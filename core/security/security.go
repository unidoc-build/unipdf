//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ada "bytes";_g "crypto/aes";_a "crypto/cipher";_d "crypto/md5";_be "crypto/rand";_gg "crypto/rc4";_ad "crypto/sha256";_e "crypto/sha512";_adc "encoding/binary";_gd "errors";_f "fmt";_df "github.com/unidoc/unipdf/v3/common";_c "hash";
_af "io";_ca "math";);func _dbb (_fff []byte ,_gad int ){_bbe :=_gad ;for _bbe < len (_fff ){copy (_fff [_bbe :],_fff [:_bbe ]);_bbe *=2;};};type ecbDecrypter ecb ;func (_ab *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ab ._ba !=0{_df .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_df .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ab ._fa .Decrypt (dst ,src [:_ab ._ba ]);src =src [_ab ._ba :];dst =dst [_ab ._ba :];};};func (_ceb stdHandlerR4 )alg4 (_aa []byte ,_beg []byte )([]byte ,error ){_fdd ,_baa :=_gg .NewCipher (_aa );if _baa !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_bea :=[]byte (_bfa );_ece :=make ([]byte ,len (_bea ));_fdd .XORKeyStream (_ece ,_bea );return _ece ,nil ;};func (_cb *ecbDecrypter )BlockSize ()int {return _cb ._ba };func _fb (_fc _a .Block )_a .BlockMode {return (*ecbEncrypter )(_gge (_fc ))};type ecbEncrypter ecb ;


// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_gdc *StdEncryptDict ,_dg ,_cag []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_bc *StdEncryptDict ,_ed []byte )([]byte ,Permissions ,error );};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};var _ StdHandler =stdHandlerR6 {};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;type ecb struct{_fa _a .Block ;_ba int ;};const (PermOwner =Permissions (_ca .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);
PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func (_fce *ecbEncrypter )BlockSize ()int {return _fce ._ba };type stdHandlerR4 struct{Length int ;ID0 string ;};

// Authenticate implements StdHandler interface.
func (_dad stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_df .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_bac ,_faf :=_dad .alg7 (d ,pass );if _faf !=nil {return nil ,0,_faf ;};if _bac !=nil {_df .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _bac ,PermOwner ,nil ;
};_df .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_bac ,_faf =_dad .alg6 (d ,pass );if _faf !=nil {return nil ,0,_faf ;
};if _bac !=nil {_df .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _bac ,d .P ,nil ;};return nil ,0,nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};type stdHandlerR6 struct{};func (_de stdHandlerR4 )alg3 (R int ,_bbb ,_ddc []byte )([]byte ,error ){var _cf []byte ;if len (_ddc )> 0{_cf =_de .alg3Key (R ,_ddc );
}else {_cf =_de .alg3Key (R ,_bbb );};_gb ,_fdc :=_gg .NewCipher (_cf );if _fdc !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_dgb :=_de .paddedPass (_bbb );_dag :=make ([]byte ,len (_dgb ));
_gb .XORKeyStream (_dag ,_dgb );if R >=3{_bbg :=make ([]byte ,len (_cf ));for _db :=0;_db < 19;_db ++{for _ea :=0;_ea < len (_cf );_ea ++{_bbg [_ea ]=_cf [_ea ]^byte (_db +1);};_ee ,_gbb :=_gg .NewCipher (_bbg );if _gbb !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ee .XORKeyStream (_dag ,_dag );};};return _dag ,nil ;};func (_bee stdHandlerR4 )alg6 (_fcd *StdEncryptDict ,_aeb []byte )([]byte ,error ){var (_fceg []byte ;_cd error ;);_abc :=_bee .alg2 (_fcd ,_aeb );if _fcd .R ==2{_fceg ,_cd =_bee .alg4 (_abc ,_aeb );
}else if _fcd .R >=3{_fceg ,_cd =_bee .alg5 (_abc ,_aeb );}else {return nil ,_gd .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _cd !=nil {return nil ,_cd ;};_df .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_fceg ),string (_fcd .U ));
_abg :=_fceg ;_eab :=_fcd .U ;if _fcd .R >=3{if len (_abg )> 16{_abg =_abg [0:16];};if len (_eab )> 16{_eab =_eab [0:16];};};if !_ada .Equal (_abg ,_eab ){return nil ,nil ;};return _abc ,nil ;};func (_bd stdHandlerR4 )alg2 (_ec *StdEncryptDict ,_bb []byte )[]byte {_df .Log .Trace ("\u0061\u006c\u0067\u0032");
_dcc :=_bd .paddedPass (_bb );_bcf :=_d .New ();_bcf .Write (_dcc );_bcf .Write (_ec .O );var _bdd [4]byte ;_adc .LittleEndian .PutUint32 (_bdd [:],uint32 (_ec .P ));_bcf .Write (_bdd [:]);_df .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_bdd );
_bcf .Write ([]byte (_bd .ID0 ));_df .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ec .R ,_ec .EncryptMetadata );
if (_ec .R >=4)&&!_ec .EncryptMetadata {_bcf .Write ([]byte {0xff,0xff,0xff,0xff});};_fcb :=_bcf .Sum (nil );if _ec .R >=3{_bcf =_d .New ();for _bcg :=0;_bcg < 50;_bcg ++{_bcf .Reset ();_bcf .Write (_fcb [0:_bd .Length /8]);_fcb =_bcf .Sum (nil );};};if _ec .R >=3{return _fcb [0:_bd .Length /8];
};return _fcb [0:5];};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};var _ StdHandler =stdHandlerR4 {};func _aec (_bffb []byte )(_a .Block ,error ){_eaa ,_aaaba :=_g .NewCipher (_bffb );if _aaaba !=nil {_df .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_aaaba );
return nil ,_aaaba ;};return _eaa ,nil ;};func _dc (_ce _a .Block )_a .BlockMode {return (*ecbDecrypter )(_gge (_ce ))};func (_fba errInvalidField )Error ()string {return _f .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_fba .Func ,_fba .Field ,_fba .Exp ,_fba .Got );
};func (_fe stdHandlerR4 )alg5 (_aaa []byte ,_aead []byte )([]byte ,error ){_bfb :=_d .New ();_bfb .Write ([]byte (_bfa ));_bfb .Write ([]byte (_fe .ID0 ));_adb :=_bfb .Sum (nil );_df .Log .Trace ("\u0061\u006c\u0067\u0035");_df .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_aaa );
_df .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_fe .ID0 );if len (_adb )!=16{return nil ,_gd .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_dec ,_gbc :=_gg .NewCipher (_aaa );
if _gbc !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_gc :=make ([]byte ,16);_dec .XORKeyStream (_gc ,_adb );_dgg :=make ([]byte ,len (_aaa ));for _efg :=0;_efg < 19;_efg ++{for _gcb :=0;
_gcb < len (_aaa );_gcb ++{_dgg [_gcb ]=_aaa [_gcb ]^byte (_efg +1);};_dec ,_gbc =_gg .NewCipher (_dgg );if _gbc !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_dec .XORKeyStream (_gc ,_gc );
_df .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_efg ,_dgg );_df .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_efg ,_gc );};_ggdc :=make ([]byte ,32);
for _gbd :=0;_gbd < 16;_gbd ++{_ggdc [_gbd ]=_gc [_gbd ];};_ ,_gbc =_be .Read (_ggdc [16:32]);if _gbc !=nil {return nil ,_gd .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _ggdc ,nil ;};

// Authenticate implements StdHandler interface.
func (_ggc stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _ggc .alg2a (d ,pass );};func (_cdde stdHandlerR6 )alg13 (_cba *StdEncryptDict ,_efgd []byte )error {if _cdc :=_afe ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_efgd );
_cdc !=nil {return _cdc ;};if _eee :=_afe ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_cba .Perms );_eee !=nil {return _eee ;};_ggdf :=make ([]byte ,16);copy (_ggdf ,_cba .Perms [:16]);_ebd ,_cdb :=_g .NewCipher (_efgd [:32]);if _cdb !=nil {return _cdb ;
};_dbef :=_dc (_ebd );_dbef .CryptBlocks (_ggdf ,_ggdf );if !_ada .Equal (_ggdf [9:12],[]byte ("\u0061\u0064\u0062")){return _gd .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_gba :=Permissions (_adc .LittleEndian .Uint32 (_ggdf [0:4]));if _gba !=_cba .P {return _gd .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _abda bool ;if _ggdf [8]=='T'{_abda =true ;}else if _ggdf [8]=='F'{_abda =false ;}else {return _gd .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _abda !=_cba .EncryptMetadata {return _gd .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_cce stdHandlerR6 )alg8 (_fbe *StdEncryptDict ,_cdd []byte ,_gcf []byte )error {if _fdac :=_afe ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_cdd );_fdac !=nil {return _fdac ;};var _cfg [16]byte ;if _ ,_bfe :=_af .ReadFull (_be .Reader ,_cfg [:]);
_bfe !=nil {return _bfe ;};_ffb :=_cfg [0:8];_eeb :=_cfg [8:16];_ddf :=make ([]byte ,len (_gcf )+len (_ffb ));_adf :=copy (_ddf ,_gcf );copy (_ddf [_adf :],_ffb );_fcg ,_dedg :=_cce .alg2b (_fbe .R ,_ddf ,_gcf ,nil );if _dedg !=nil {return _dedg ;};U :=make ([]byte ,len (_fcg )+len (_ffb )+len (_eeb ));
_adf =copy (U ,_fcg [:32]);_adf +=copy (U [_adf :],_ffb );copy (U [_adf :],_eeb );_fbe .U =U ;_adf =len (_gcf );copy (_ddf [_adf :],_eeb );_fcg ,_dedg =_cce .alg2b (_fbe .R ,_ddf ,_gcf ,nil );if _dedg !=nil {return _dedg ;};_baf ,_dedg :=_aec (_fcg [:32]);
if _dedg !=nil {return _dedg ;};_abd :=make ([]byte ,_g .BlockSize );_afde :=_a .NewCBCEncrypter (_baf ,_abd );UE :=make ([]byte ,32);_afde .CryptBlocks (UE ,_cdd [:32]);_fbe .UE =UE ;return nil ;};func _dggg (_facd []byte )([]byte ,error ){_dbe :=_ad .New ();
_dbe .Write (_facd );return _dbe .Sum (nil ),nil ;};

// Allowed checks if a set of permissions can be granted.
func (_afb Permissions )Allowed (p2 Permissions )bool {return _afb &p2 ==p2 };const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););func _bcad (_bcaa ,_fbc ,_dea []byte )([]byte ,error ){var (_dccc ,_cc ,_aac _c .Hash ;
);_dccc =_ad .New ();_edc :=make ([]byte ,64);_aecg :=_dccc ;_aecg .Write (_bcaa );K :=_aecg .Sum (_edc [:0]);_gde :=make ([]byte ,64*(127+64+48));_def :=func (_ceg int )([]byte ,error ){_ge :=len (_fbc )+len (K )+len (_dea );_efb :=_gde [:_ge ];_fbf :=copy (_efb ,_fbc );
_fbf +=copy (_efb [_fbf :],K [:]);_fbf +=copy (_efb [_fbf :],_dea );if _fbf !=_ge {_df .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_gd .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_gde [:_ge *64];_dbb (K1 ,_ge );_ggb ,_adab :=_aec (K [0:16]);if _adab !=nil {return nil ,_adab ;};_fdca :=_a .NewCBCEncrypter (_ggb ,K [16:32]);_fdca .CryptBlocks (K1 ,K1 );
E :=K1 ;_adaf :=0;for _dgad :=0;_dgad < 16;_dgad ++{_adaf +=int (E [_dgad ]%3);};var _cabe _c .Hash ;switch _adaf %3{case 0:_cabe =_dccc ;case 1:if _cc ==nil {_cc =_e .New384 ();};_cabe =_cc ;case 2:if _aac ==nil {_aac =_e .New ();};_cabe =_aac ;};_cabe .Reset ();
_cabe .Write (E );K =_cabe .Sum (_edc [:0]);return E ,nil ;};for _gca :=0;;{E ,_ag :=_def (_gca );if _ag !=nil {return nil ,_ag ;};_gcc :=E [len (E )-1];_gca ++;if _gca >=64&&_gcc <=uint8 (_gca -32){break ;};};return K [:32],nil ;};func (_adfa stdHandlerR6 )alg11 (_fde *StdEncryptDict ,_gee []byte )([]byte ,error ){if _ace :=_afe ("\u0061\u006c\u00671\u0031","\u0055",48,_fde .U );
_ace !=nil {return nil ,_ace ;};_dcaf :=make ([]byte ,len (_gee )+8);_agec :=copy (_dcaf ,_gee );_agec +=copy (_dcaf [_agec :],_fde .U [32:40]);_ega ,_edef :=_adfa .alg2b (_fde .R ,_dcaf ,_gee ,nil );if _edef !=nil {return nil ,_edef ;};_ega =_ega [:32];
if !_ada .Equal (_ega ,_fde .U [:32]){return nil ,nil ;};return _ega ,nil ;};func _afe (_cae ,_ggd string ,_fd int ,_fab []byte )error {if len (_fab )< _fd {return errInvalidField {Func :_cae ,Field :_ggd ,Exp :_fd ,Got :len (_fab )};};return nil ;};func (_dcf stdHandlerR6 )alg10 (_cac *StdEncryptDict ,_daa []byte )error {if _edfg :=_afe ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_daa );
_edfg !=nil {return _edfg ;};_fbae :=uint64 (uint32 (_cac .P ))|(_ca .MaxUint32 <<32);Perms :=make ([]byte ,16);_adc .LittleEndian .PutUint64 (Perms [:8],_fbae );if _cac .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_dbf :=_af .ReadFull (_be .Reader ,Perms [12:16]);_dbf !=nil {return _dbf ;};_fafg ,_gfa :=_aec (_daa [:32]);if _gfa !=nil {return _gfa ;};_cfb :=_fb (_fafg );_cfb .CryptBlocks (Perms ,Perms );_cac .Perms =Perms [:16];return nil ;};func (_fg stdHandlerR6 )alg2b (R int ,_ddb ,_cfa ,_gaa []byte )([]byte ,error ){if R ==5{return _dggg (_ddb );
};return _bcad (_ddb ,_cfa ,_gaa );};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_ded stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_eg :=_ded .alg3 (d .R ,upass ,opass );if _eg !=nil {_df .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_eg );
return nil ,_eg ;};d .O =O ;_df .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_bef :=_ded .alg2 (d ,upass );U ,_eg :=_ded .alg5 (_bef ,upass );if _eg !=nil {_df .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_eg );
return nil ,_eg ;};d .U =U ;_df .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _bef ,nil ;};const _bfa ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";
func (_cbd stdHandlerR6 )alg12 (_fed *StdEncryptDict ,_gggc []byte )([]byte ,error ){if _efa :=_afe ("\u0061\u006c\u00671\u0032","\u0055",48,_fed .U );_efa !=nil {return nil ,_efa ;};if _ggf :=_afe ("\u0061\u006c\u00671\u0032","\u004f",48,_fed .O );_ggf !=nil {return nil ,_ggf ;
};_eebe :=make ([]byte ,len (_gggc )+8+48);_dbc :=copy (_eebe ,_gggc );_dbc +=copy (_eebe [_dbc :],_fed .O [32:40]);_dbc +=copy (_eebe [_dbc :],_fed .U [0:48]);_fdb ,_dgf :=_cbd .alg2b (_fed .R ,_eebe ,_gggc ,_fed .U [0:48]);if _dgf !=nil {return nil ,_dgf ;
};_fdb =_fdb [:32];if !_ada .Equal (_fdb ,_fed .O [:32]){return nil ,nil ;};return _fdb ,nil ;};func _gge (_bae _a .Block )*ecb {return &ecb {_fa :_bae ,_ba :_bae .BlockSize ()}};func (stdHandlerR4 )paddedPass (_dd []byte )[]byte {_ae :=make ([]byte ,32);
_aea :=copy (_ae ,_dd );for ;_aea < 32;_aea ++{_ae [_aea ]=_bfa [_aea -len (_dd )];};return _ae ;};func (_bca stdHandlerR4 )alg3Key (R int ,_da []byte )[]byte {_dae :=_d .New ();_bff :=_bca .paddedPass (_da );_dae .Write (_bff );if R >=3{for _ga :=0;_ga < 50;
_ga ++{_cab :=_dae .Sum (nil );_dae =_d .New ();_dae .Write (_cab );};};_aff :=_dae .Sum (nil );if R ==2{_aff =_aff [0:5];}else {_aff =_aff [0:_bca .Length /8];};return _aff ;};func (_gag stdHandlerR6 )alg9 (_gdcf *StdEncryptDict ,_dce []byte ,_daf []byte )error {if _baaf :=_afe ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_dce );
_baaf !=nil {return _baaf ;};if _defg :=_afe ("\u0061\u006c\u0067\u0039","\u0055",48,_gdcf .U );_defg !=nil {return _defg ;};var _cee [16]byte ;if _ ,_fge :=_af .ReadFull (_be .Reader ,_cee [:]);_fge !=nil {return _fge ;};_eea :=_cee [0:8];_bgb :=_cee [8:16];
_afc :=_gdcf .U [:48];_aga :=make ([]byte ,len (_daf )+len (_eea )+len (_afc ));_age :=copy (_aga ,_daf );_age +=copy (_aga [_age :],_eea );_age +=copy (_aga [_age :],_afc );_gdea ,_febg :=_gag .alg2b (_gdcf .R ,_aga ,_daf ,_afc );if _febg !=nil {return _febg ;
};O :=make ([]byte ,len (_gdea )+len (_eea )+len (_bgb ));_age =copy (O ,_gdea [:32]);_age +=copy (O [_age :],_eea );_age +=copy (O [_age :],_bgb );_gdcf .O =O ;_age =len (_daf );_age +=copy (_aga [_age :],_bgb );_gdea ,_febg =_gag .alg2b (_gdcf .R ,_aga ,_daf ,_afc );
if _febg !=nil {return _febg ;};_bgbf ,_febg :=_aec (_gdea [:32]);if _febg !=nil {return _febg ;};_ceaf :=make ([]byte ,_g .BlockSize );_eabg :=_a .NewCBCEncrypter (_bgbf ,_ceaf );OE :=make ([]byte ,32);_eabg .CryptBlocks (OE ,_dce [:32]);_gdcf .OE =OE ;
return nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_efc stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_eded :=make ([]byte ,32);if _ ,_cca :=_af .ReadFull (_be .Reader ,_eded );_cca !=nil {return nil ,_cca ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;d .Perms =nil ;
if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _dfg :=_efc .alg8 (d ,_eded ,upass );_dfg !=nil {return nil ,_dfg ;};if _egd :=_efc .alg9 (d ,_eded ,opass );_egd !=nil {return nil ,_egd ;};if d .R ==5{return _eded ,nil ;
};if _aab :=_efc .alg10 (d ,_eded );_aab !=nil {return nil ,_aab ;};return _eded ,nil ;};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};func (_ac stdHandlerR4 )alg7 (_adcd *StdEncryptDict ,_fec []byte )([]byte ,error ){_aaab :=_ac .alg3Key (_adcd .R ,_fec );
_ggg :=make ([]byte ,len (_adcd .O ));if _adcd .R ==2{_gdb ,_edf :=_gg .NewCipher (_aaab );if _edf !=nil {return nil ,_gd .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_gdb .XORKeyStream (_ggg ,_adcd .O );}else if _adcd .R >=3{_afd :=append ([]byte {},_adcd .O ...);
for _bce :=0;_bce < 20;_bce ++{_fda :=append ([]byte {},_aaab ...);for _cg :=0;_cg < len (_aaab );_cg ++{_fda [_cg ]^=byte (19-_bce );};_cgb ,_caeb :=_gg .NewCipher (_fda );if _caeb !=nil {return nil ,_gd .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_cgb .XORKeyStream (_ggg ,_afd );_afd =append ([]byte {},_ggg ...);};}else {return nil ,_gd .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_dde ,_feb :=_ac .alg6 (_adcd ,_ggg );if _feb !=nil {return nil ,nil ;};return _dde ,nil ;};func (_dcd stdHandlerR6 )alg2a (_dca *StdEncryptDict ,_bcc []byte )([]byte ,Permissions ,error ){if _fac :=_afe ("\u0061\u006c\u00672\u0061","\u004f",48,_dca .O );
_fac !=nil {return nil ,0,_fac ;};if _eaab :=_afe ("\u0061\u006c\u00672\u0061","\u0055",48,_dca .U );_eaab !=nil {return nil ,0,_eaab ;};if len (_bcc )> 127{_bcc =_bcc [:127];};_cea ,_dab :=_dcd .alg12 (_dca ,_bcc );if _dab !=nil {return nil ,0,_dab ;};
var (_eb []byte ;_cbc []byte ;_ede []byte ;);var _dcb Permissions ;if len (_cea )!=0{_dcb =PermOwner ;_ddd :=make ([]byte ,len (_bcc )+8+48);_aba :=copy (_ddd ,_bcc );_aba +=copy (_ddd [_aba :],_dca .O [40:48]);copy (_ddd [_aba :],_dca .U [0:48]);_eb =_ddd ;
_cbc =_dca .OE ;_ede =_dca .U [0:48];}else {_cea ,_dab =_dcd .alg11 (_dca ,_bcc );if _dab ==nil &&len (_cea )==0{_cea ,_dab =_dcd .alg11 (_dca ,[]byte (""));};if _dab !=nil {return nil ,0,_dab ;}else if len (_cea )==0{return nil ,0,nil ;};_dcb =_dca .P ;
_eef :=make ([]byte ,len (_bcc )+8);_eed :=copy (_eef ,_bcc );copy (_eef [_eed :],_dca .U [40:48]);_eb =_eef ;_cbc =_dca .UE ;_ede =nil ;};if _ff :=_afe ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_cbc );_ff !=nil {return nil ,0,_ff ;};_cbc =_cbc [:32];
_gf ,_dab :=_dcd .alg2b (_dca .R ,_eb ,_bcc ,_ede );if _dab !=nil {return nil ,0,_dab ;};_fbb ,_dab :=_g .NewCipher (_gf [:32]);if _dab !=nil {return nil ,0,_dab ;};_eaabe :=make ([]byte ,_g .BlockSize );_ceab :=_a .NewCBCDecrypter (_fbb ,_eaabe );_dga :=make ([]byte ,32);
_ceab .CryptBlocks (_dga ,_cbc );if _dca .R ==5{return _dga ,_dcb ,nil ;};_dab =_dcd .alg13 (_dca ,_dga );if _dab !=nil {return nil ,0,_dab ;};return _dga ,_dcb ,nil ;};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func (_ef *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_ef ._ba !=0{_df .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_df .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_ef ._fa .Encrypt (dst ,src [:_ef ._ba ]);src =src [_ef ._ba :];dst =dst [_ef ._ba :];};};