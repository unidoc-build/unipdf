//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_gf "bytes";_g "crypto/aes";_f "crypto/cipher";_gc "crypto/md5";_ff "crypto/rand";_e "crypto/rc4";_bf "crypto/sha256";_ba "crypto/sha512";_c "encoding/binary";_gd "errors";_bff "fmt";_da "github.com/unidoc/unipdf/v3/common";_be "hash";
_d "io";_fa "math";);func (stdHandlerR4 )paddedPass (_ffe []byte )[]byte {_dbf :=make ([]byte ,32);_dc :=copy (_dbf ,_ffe );for ;_dc < 32;_dc ++{_dbf [_dc ]=_ad [_dc -len (_ffe )];};return _dbf ;};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_fd stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_fef :=_fd .alg3 (d .R ,upass ,opass );if _fef !=nil {_da .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_fef );
return nil ,_fef ;};d .O =O ;_da .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_dcdc :=_fd .alg2 (d ,upass );U ,_fef :=_fd .alg5 (_dcdc ,upass );if _fef !=nil {_da .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_fef );
return nil ,_fef ;};d .U =U ;_da .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _dcdc ,nil ;};func (_eaa stdHandlerR4 )alg7 (_gb *StdEncryptDict ,_gee []byte )([]byte ,error ){_gac :=_eaa .alg3Key (_gb .R ,_gee );
_bcg :=make ([]byte ,len (_gb .O ));if _gb .R ==2{_dff ,_bb :=_e .NewCipher (_gac );if _bb !=nil {return nil ,_gd .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_dff .XORKeyStream (_bcg ,_gb .O );}else if _gb .R >=3{_cga :=append ([]byte {},_gb .O ...);
for _cbd :=0;_cbd < 20;_cbd ++{_ddcg :=append ([]byte {},_gac ...);for _ae :=0;_ae < len (_gac );_ae ++{_ddcg [_ae ]^=byte (19-_cbd );};_geg ,_cgd :=_e .NewCipher (_ddcg );if _cgd !=nil {return nil ,_gd .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_geg .XORKeyStream (_bcg ,_cga );_cga =append ([]byte {},_bcg ...);};}else {return nil ,_gd .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_cegb ,_gcge :=_eaa .alg6 (_gb ,_bcg );if _gcge !=nil {return nil ,nil ;};return _cegb ,nil ;};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_cb *StdEncryptDict ,_ac ,_fg []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_bec *StdEncryptDict ,_fc []byte )([]byte ,Permissions ,error );};func (_dcd stdHandlerR4 )alg4 (_dcc []byte ,_bfb []byte )([]byte ,error ){_afb ,_dac :=_e .NewCipher (_dcc );if _dac !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_agg :=[]byte (_ad );_ffa :=make ([]byte ,len (_agg ));_afb .XORKeyStream (_ffa ,_agg );return _ffa ,nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};type ecbDecrypter ecb ;func (_ddc stdHandlerR4 )alg3 (R int ,_fff ,_fe []byte )([]byte ,error ){var _fga []byte ;if len (_fe )> 0{_fga =_ddc .alg3Key (R ,_fe );
}else {_fga =_ddc .alg3Key (R ,_fff );};_gfa ,_ga :=_e .NewCipher (_fga );if _ga !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_eaf :=_ddc .paddedPass (_fff );_cee :=make ([]byte ,len (_eaf ));
_gfa .XORKeyStream (_cee ,_eaf );if R >=3{_fea :=make ([]byte ,len (_fga ));for _ef :=0;_ef < 19;_ef ++{for _caa :=0;_caa < len (_fga );_caa ++{_fea [_caa ]=_fga [_caa ]^byte (_ef +1);};_eba ,_abe :=_e .NewCipher (_fea );if _abe !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_eba .XORKeyStream (_cee ,_cee );};};return _cee ,nil ;};func (_db *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_db ._ed !=0{_da .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_da .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_db ._ge .Encrypt (dst ,src [:_db ._ed ]);src =src [_db ._ed :];dst =dst [_db ._ed :];};};func _fcg (_ab ,_bfd string ,_fb int ,_eb []byte )error {if len (_eb )< _fb {return errInvalidField {Func :_ab ,Field :_bfd ,Exp :_fb ,Got :len (_eb )};
};return nil ;};func (_fcc stdHandlerR6 )alg9 (_gea *StdEncryptDict ,_gcf []byte ,_dbbc []byte )error {if _fbad :=_fcg ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_gcf );_fbad !=nil {return _fbad ;};if _fcf :=_fcg ("\u0061\u006c\u0067\u0039","\u0055",48,_gea .U );
_fcf !=nil {return _fcf ;};var _bda [16]byte ;if _ ,_ffbg :=_d .ReadFull (_ff .Reader ,_bda [:]);_ffbg !=nil {return _ffbg ;};_gfc :=_bda [0:8];_ddba :=_bda [8:16];_deb :=_gea .U [:48];_gce :=make ([]byte ,len (_dbbc )+len (_gfc )+len (_deb ));_ggac :=copy (_gce ,_dbbc );
_ggac +=copy (_gce [_ggac :],_gfc );_ggac +=copy (_gce [_ggac :],_deb );_dae ,_ceac :=_fcc .alg2b (_gea .R ,_gce ,_dbbc ,_deb );if _ceac !=nil {return _ceac ;};O :=make ([]byte ,len (_dae )+len (_gfc )+len (_ddba ));_ggac =copy (O ,_dae [:32]);_ggac +=copy (O [_ggac :],_gfc );
_ggac +=copy (O [_ggac :],_ddba );_gea .O =O ;_ggac =len (_dbbc );_ggac +=copy (_gce [_ggac :],_ddba );_dae ,_ceac =_fcc .alg2b (_gea .R ,_gce ,_dbbc ,_deb );if _ceac !=nil {return _ceac ;};_edb ,_ceac :=_ffb (_dae [:32]);if _ceac !=nil {return _ceac ;
};_eeg :=make ([]byte ,_g .BlockSize );_fdb :=_f .NewCBCEncrypter (_edb ,_eeg );OE :=make ([]byte ,32);_fdb .CryptBlocks (OE ,_gcf [:32]);_gea .OE =OE ;return nil ;};const _ad ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";
func (_cg stdHandlerR4 )alg3Key (R int ,_bfa []byte )[]byte {_ceg :=_gc .New ();_dad :=_cg .paddedPass (_bfa );_ceg .Write (_dad );if R >=3{for _gda :=0;_gda < 50;_gda ++{_aff :=_ceg .Sum (nil );_ceg =_gc .New ();_ceg .Write (_aff );};};_ade :=_ceg .Sum (nil );
if R ==2{_ade =_ade [0:5];}else {_ade =_ade [0:_cg .Length /8];};return _ade ;};

// Authenticate implements StdHandler interface.
func (_ged stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_da .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_dg ,_dccf :=_ged .alg7 (d ,pass );if _dccf !=nil {return nil ,0,_dccf ;};if _dg !=nil {_da .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _dg ,PermOwner ,nil ;
};_da .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_dg ,_dccf =_ged .alg6 (d ,pass );if _dccf !=nil {return nil ,0,_dccf ;
};if _dg !=nil {_da .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _dg ,d .P ,nil ;};return nil ,0,nil ;};type stdHandlerR6 struct{};

// Authenticate implements StdHandler interface.
func (_eccc stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _eccc .alg2a (d ,pass );};func (_fba stdHandlerR4 )alg6 (_fee *StdEncryptDict ,_de []byte )([]byte ,error ){var (_bc []byte ;_cgg error ;);_fcd :=_fba .alg2 (_fee ,_de );
if _fee .R ==2{_bc ,_cgg =_fba .alg4 (_fcd ,_de );}else if _fee .R >=3{_bc ,_cgg =_fba .alg5 (_fcd ,_de );}else {return nil ,_gd .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _cgg !=nil {return nil ,_cgg ;};_da .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_bc ),string (_fee .U ));
_bfg :=_bc ;_adc :=_fee .U ;if _fee .R >=3{if len (_bfg )> 16{_bfg =_bfg [0:16];};if len (_adc )> 16{_adc =_adc [0:16];};};if !_gf .Equal (_bfg ,_adc ){return nil ,nil ;};return _fcd ,nil ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_eca stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_fggg :=make ([]byte ,32);if _ ,_aeab :=_d .ReadFull (_ff .Reader ,_fggg );_aeab !=nil {return nil ,_aeab ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;
d .Perms =nil ;if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _eed :=_eca .alg8 (d ,_fggg ,upass );_eed !=nil {return nil ,_eed ;};if _cbdg :=_eca .alg9 (d ,_fggg ,opass );_cbdg !=nil {return nil ,_cbdg ;};if d .R ==5{return _fggg ,nil ;
};if _bcad :=_eca .alg10 (d ,_fggg );_bcad !=nil {return nil ,_bcad ;};return _fggg ,nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_dd stdHandlerR4 )alg2 (_ca *StdEncryptDict ,_egc []byte )[]byte {_da .Log .Trace ("\u0061\u006c\u0067\u0032");_edc :=_dd .paddedPass (_egc );_eda :=_gc .New ();_eda .Write (_edc );_eda .Write (_ca .O );
var _edd [4]byte ;_c .LittleEndian .PutUint32 (_edd [:],uint32 (_ca .P ));_eda .Write (_edd [:]);_da .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_edd );_eda .Write ([]byte (_dd .ID0 ));_da .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ca .R ,_ca .EncryptMetadata );
if (_ca .R >=4)&&!_ca .EncryptMetadata {_eda .Write ([]byte {0xff,0xff,0xff,0xff});};_dca :=_eda .Sum (nil );if _ca .R >=3{_eda =_gc .New ();for _ag :=0;_ag < 50;_ag ++{_eda .Reset ();_eda .Write (_dca [0:_dd .Length /8]);_dca =_eda .Sum (nil );};};if _ca .R >=3{return _dca [0:_dd .Length /8];
};return _dca [0:5];};func (_efa stdHandlerR6 )alg2a (_aec *StdEncryptDict ,_agb []byte )([]byte ,Permissions ,error ){if _cgf :=_fcg ("\u0061\u006c\u00672\u0061","\u004f",48,_aec .O );_cgf !=nil {return nil ,0,_cgf ;};if _ege :=_fcg ("\u0061\u006c\u00672\u0061","\u0055",48,_aec .U );
_ege !=nil {return nil ,0,_ege ;};if len (_agb )> 127{_agb =_agb [:127];};_abg ,_becg :=_efa .alg12 (_aec ,_agb );if _becg !=nil {return nil ,0,_becg ;};var (_afd []byte ;_aab []byte ;_aac []byte ;);var _aea Permissions ;if len (_abg )!=0{_aea =PermOwner ;
_fac :=make ([]byte ,len (_agb )+8+48);_abgg :=copy (_fac ,_agb );_abgg +=copy (_fac [_abgg :],_aec .O [40:48]);copy (_fac [_abgg :],_aec .U [0:48]);_afd =_fac ;_aab =_aec .OE ;_aac =_aec .U [0:48];}else {_abg ,_becg =_efa .alg11 (_aec ,_agb );if _becg ==nil &&len (_abg )==0{_abg ,_becg =_efa .alg11 (_aec ,[]byte (""));
};if _becg !=nil {return nil ,0,_becg ;}else if len (_abg )==0{return nil ,0,nil ;};_aea =_aec .P ;_adeb :=make ([]byte ,len (_agb )+8);_dfd :=copy (_adeb ,_agb );copy (_adeb [_dfd :],_aec .U [40:48]);_afd =_adeb ;_aab =_aec .UE ;_aac =nil ;};if _aeg :=_fcg ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_aab );
_aeg !=nil {return nil ,0,_aeg ;};_aab =_aab [:32];_gbb ,_becg :=_efa .alg2b (_aec .R ,_afd ,_agb ,_aac );if _becg !=nil {return nil ,0,_becg ;};_fce ,_becg :=_g .NewCipher (_gbb [:32]);if _becg !=nil {return nil ,0,_becg ;};_fae :=make ([]byte ,_g .BlockSize );
_bg :=_f .NewCBCDecrypter (_fce ,_fae );_cbbb :=make ([]byte ,32);_bg .CryptBlocks (_cbbb ,_aab );if _aec .R ==5{return _cbbb ,_aea ,nil ;};_becg =_efa .alg13 (_aec ,_cbbb );if _becg !=nil {return nil ,0,_becg ;};return _cbbb ,_aea ,nil ;};func (_ecc stdHandlerR6 )alg11 (_agef *StdEncryptDict ,_cca []byte )([]byte ,error ){if _aaca :=_fcg ("\u0061\u006c\u00671\u0031","\u0055",48,_agef .U );
_aaca !=nil {return nil ,_aaca ;};_fcfa :=make ([]byte ,len (_cca )+8);_bbd :=copy (_fcfa ,_cca );_bbd +=copy (_fcfa [_bbd :],_agef .U [32:40]);_bcf ,_fge :=_ecc .alg2b (_agef .R ,_fcfa ,_cca ,nil );if _fge !=nil {return nil ,_fge ;};_bcf =_bcf [:32];if !_gf .Equal (_bcf ,_agef .U [:32]){return nil ,nil ;
};return _bcf ,nil ;};type stdHandlerR4 struct{Length int ;ID0 string ;};func (_aa stdHandlerR4 )alg5 (_cbb []byte ,_gad []byte )([]byte ,error ){_gcg :=_gc .New ();_gcg .Write ([]byte (_ad ));_gcg .Write ([]byte (_aa .ID0 ));_cae :=_gcg .Sum (nil );_da .Log .Trace ("\u0061\u006c\u0067\u0035");
_da .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_cbb );_da .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_aa .ID0 );if len (_cae )!=16{return nil ,_gd .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_ggb ,_dbb :=_e .NewCipher (_cbb );if _dbb !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_ddb :=make ([]byte ,16);_ggb .XORKeyStream (_ddb ,_cae );_gdg :=make ([]byte ,len (_cbb ));
for _gcd :=0;_gcd < 19;_gcd ++{for _ffff :=0;_ffff < len (_cbb );_ffff ++{_gdg [_ffff ]=_cbb [_ffff ]^byte (_gcd +1);};_ggb ,_dbb =_e .NewCipher (_gdg );if _dbb !=nil {return nil ,_gd .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ggb .XORKeyStream (_ddb ,_ddb );_da .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_gcd ,_gdg );_da .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_gcd ,_ddb );
};_aca :=make ([]byte ,32);for _fbb :=0;_fbb < 16;_fbb ++{_aca [_fbb ]=_ddb [_fbb ];};_ ,_dbb =_ff .Read (_aca [16:32]);if _dbb !=nil {return nil ,_gd .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _aca ,nil ;};func (_af errInvalidField )Error ()string {return _bff .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_af .Func ,_af .Field ,_af .Exp ,_af .Got );
};func (_gg *ecbDecrypter )BlockSize ()int {return _gg ._ed };func (_ec stdHandlerR6 )alg2b (R int ,_bbf ,_cgga ,_gfg []byte )([]byte ,error ){if R ==5{return _egb (_bbf );};return _gba (_bbf ,_cgga ,_gfg );};func _gba (_cgb ,_ead ,_fdg []byte )([]byte ,error ){var (_aad ,_gec ,_fde _be .Hash ;
);_aad =_bf .New ();_dgc :=make ([]byte ,64);_fed :=_aad ;_fed .Write (_cgb );K :=_fed .Sum (_dgc [:0]);_bef :=make ([]byte ,64*(127+64+48));_gbab :=func (_cag int )([]byte ,error ){_dfa :=len (_ead )+len (K )+len (_fdg );_cbf :=_bef [:_dfa ];_dce :=copy (_cbf ,_ead );
_dce +=copy (_cbf [_dce :],K [:]);_dce +=copy (_cbf [_dce :],_fdg );if _dce !=_dfa {_da .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_gd .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_bef [:_dfa *64];_edg (K1 ,_dfa );_aegg ,_ee :=_ffb (K [0:16]);if _ee !=nil {return nil ,_ee ;};_cf :=_f .NewCBCEncrypter (_aegg ,K [16:32]);_cf .CryptBlocks (K1 ,K1 );
E :=K1 ;_bga :=0;for _afda :=0;_afda < 16;_afda ++{_bga +=int (E [_afda ]%3);};var _bfbb _be .Hash ;switch _bga %3{case 0:_bfbb =_aad ;case 1:if _gec ==nil {_gec =_ba .New384 ();};_bfbb =_gec ;case 2:if _fde ==nil {_fde =_ba .New ();};_bfbb =_fde ;};_bfbb .Reset ();
_bfbb .Write (E );K =_bfbb .Sum (_dgc [:0]);return E ,nil ;};for _aeb :=0;;{E ,_bgd :=_gbab (_aeb );if _bgd !=nil {return nil ,_bgd ;};_aecf :=E [len (E )-1];_aeb ++;if _aeb >=64&&_aecf <=uint8 (_aeb -32){break ;};};return K [:32],nil ;};func _ffb (_gaa []byte )(_f .Block ,error ){_fbbg ,_bac :=_g .NewCipher (_gaa );
if _bac !=nil {_da .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_bac );
return nil ,_bac ;};return _fbbg ,nil ;};func _df (_fad _f .Block )*ecb {return &ecb {_ge :_fad ,_ed :_fad .BlockSize ()}};type ecbEncrypter ecb ;func _ea (_faa _f .Block )_f .BlockMode {return (*ecbDecrypter )(_df (_faa ))};var _ StdHandler =stdHandlerR6 {};


// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};const (PermOwner =Permissions (_fa .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);
PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func _edg (_gaag []byte ,_egd int ){_abb :=_egd ;for _abb < len (_gaag ){copy (_gaag [_abb :],_gaag [:_abb ]);
_abb *=2;};};var _ StdHandler =stdHandlerR4 {};func (_eab *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_eab ._ed !=0{_da .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_da .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_eab ._ge .Decrypt (dst ,src [:_eab ._ed ]);src =src [_eab ._ed :];dst =dst [_eab ._ed :];};};func (_baa stdHandlerR6 )alg10 (_dfde *StdEncryptDict ,_ddd []byte )error {if _bcba :=_fcg ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_ddd );
_bcba !=nil {return _bcba ;};_gcc :=uint64 (uint32 (_dfde .P ))|(_fa .MaxUint32 <<32);Perms :=make ([]byte ,16);_c .LittleEndian .PutUint64 (Perms [:8],_gcc );if _dfde .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");
if _ ,_geca :=_d .ReadFull (_ff .Reader ,Perms [12:16]);_geca !=nil {return _geca ;};_abc ,_gfb :=_ffb (_ddd [:32]);if _gfb !=nil {return _gfb ;};_fbe :=_eg (_abc );_fbe .CryptBlocks (Perms ,Perms );_dfde .Perms =Perms [:16];return nil ;};func (_a *ecbEncrypter )BlockSize ()int {return _a ._ed };


// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func _egb (_cab []byte )([]byte ,error ){_cc :=_bf .New ();_cc .Write (_cab );return _cc .Sum (nil ),nil };func _eg (_ce _f .Block )_f .BlockMode {return (*ecbEncrypter )(_df (_ce ))};type errInvalidField struct{Func string ;Field string ;
Exp int ;Got int ;};func (_fab stdHandlerR6 )alg12 (_fedb *StdEncryptDict ,_ebf []byte )([]byte ,error ){if _bca :=_fcg ("\u0061\u006c\u00671\u0032","\u0055",48,_fedb .U );_bca !=nil {return nil ,_bca ;};if _gacf :=_fcg ("\u0061\u006c\u00671\u0032","\u004f",48,_fedb .O );
_gacf !=nil {return nil ,_gacf ;};_edab :=make ([]byte ,len (_ebf )+8+48);_bffb :=copy (_edab ,_ebf );_bffb +=copy (_edab [_bffb :],_fedb .O [32:40]);_bffb +=copy (_edab [_bffb :],_fedb .U [0:48]);_gfgf ,_ddg :=_fab .alg2b (_fedb .R ,_edab ,_ebf ,_fedb .U [0:48]);
if _ddg !=nil {return nil ,_ddg ;};_gfgf =_gfgf [:32];if !_gf .Equal (_gfgf ,_fedb .O [:32]){return nil ,nil ;};return _gfgf ,nil ;};type ecb struct{_ge _f .Block ;_ed int ;};

// Allowed checks if a set of permissions can be granted.
func (_bfda Permissions )Allowed (p2 Permissions )bool {return _bfda &p2 ==p2 };func (_aabe stdHandlerR6 )alg13 (_bea *StdEncryptDict ,_fbeg []byte )error {if _efg :=_fcg ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_fbeg );_efg !=nil {return _efg ;
};if _bffe :=_fcg ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_bea .Perms );_bffe !=nil {return _bffe ;};_aada :=make ([]byte ,16);copy (_aada ,_bea .Perms [:16]);_cfd ,_cad :=_g .NewCipher (_fbeg [:32]);if _cad !=nil {return _cad ;};_aaa :=_ea (_cfd );
_aaa .CryptBlocks (_aada ,_aada );if !_gf .Equal (_aada [9:12],[]byte ("\u0061\u0064\u0062")){return _gd .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_ffab :=Permissions (_c .LittleEndian .Uint32 (_aada [0:4]));if _ffab !=_bea .P {return _gd .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _fgg bool ;if _aada [8]=='T'{_fgg =true ;}else if _aada [8]=='F'{_fgg =false ;}else {return _gd .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _fgg !=_bea .EncryptMetadata {return _gd .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};func (_dcdf stdHandlerR6 )alg8 (_gaf *StdEncryptDict ,_bcb []byte ,_abge []byte )error {if _bd :=_fcg ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_bcb );_bd !=nil {return _bd ;};var _age [16]byte ;if _ ,_cec :=_d .ReadFull (_ff .Reader ,_age [:]);
_cec !=nil {return _cec ;};_cea :=_age [0:8];_aeba :=_age [8:16];_eaad :=make ([]byte ,len (_abge )+len (_cea ));_adcb :=copy (_eaad ,_abge );copy (_eaad [_adcb :],_cea );_cd ,_gedb :=_dcdf .alg2b (_gaf .R ,_eaad ,_abge ,nil );if _gedb !=nil {return _gedb ;
};U :=make ([]byte ,len (_cd )+len (_cea )+len (_aeba ));_adcb =copy (U ,_cd [:32]);_adcb +=copy (U [_adcb :],_cea );copy (U [_adcb :],_aeba );_gaf .U =U ;_adcb =len (_abge );copy (_eaad [_adcb :],_aeba );_cd ,_gedb =_dcdf .alg2b (_gaf .R ,_eaad ,_abge ,nil );
if _gedb !=nil {return _gedb ;};_bae ,_gedb :=_ffb (_cd [:32]);if _gedb !=nil {return _gedb ;};_geb :=make ([]byte ,_g .BlockSize );_faf :=_f .NewCBCEncrypter (_bae ,_geb );UE :=make ([]byte ,32);_faf .CryptBlocks (UE ,_bcb [:32]);_gaf .UE =UE ;return nil ;
};