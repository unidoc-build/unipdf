//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package crypt ;import (_c "crypto/aes";_cg "crypto/cipher";_gg "crypto/md5";_aa "crypto/rand";_g "crypto/rc4";_a "fmt";_ac "github.com/unidoc/unipdf/v3/common";_gc "github.com/unidoc/unipdf/v3/core/security";_f "io";);func init (){_dcf ("\u0041\u0045\u0053V\u0032",_ceb )};


// HandlerVersion implements Filter interface.
func (filterAESV2 )HandlerVersion ()(V ,R int ){V ,R =4,4;return ;};func _ffg (_fd FilterDict )(Filter ,error ){if _fd .Length ==256{_ac .Log .Debug ("\u0041\u0045S\u0056\u0033\u0020c\u0072\u0079\u0070\u0074\u0020f\u0069\u006c\u0074\u0065\u0072 l\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0073\u0020\u0074\u006f\u0020\u0062e\u0020i\u006e\u0020\u0062\u0069\u0074\u0073 ra\u0074\u0068\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0062\u0079te\u0073 \u002d\u0020\u0061\u0073s\u0075m\u0069n\u0067\u0020b\u0069\u0074s \u0028\u0025\u0064\u0029",_fd .Length );
_fd .Length /=8;};if _fd .Length !=0&&_fd .Length !=32{return nil ,_a .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0041\u0045\u0053\u0056\u0033\u0020\u0063\u0072\u0079\u0070\u0074\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006c\u0065\u006eg\u0074\u0068 \u0028\u0025\u0064\u0029",_fd .Length );
};return filterAESV3 {},nil ;};

// NewFilterAESV2 creates an AES-based filter with a 128 bit key (AESV2).
func NewFilterAESV2 ()Filter {_e ,_cc :=_ceb (FilterDict {});if _cc !=nil {_ac .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075l\u0064\u0020\u006e\u006f\u0074\u0020\u0063re\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0056\u0032\u0020\u0063\u0072\u0079pt\u0020\u0066i\u006c\u0074\u0065\u0072\u003a\u0020\u0025\u0076",_cc );
return filterAESV2 {};};return _e ;};

// NewIdentity creates an identity filter that bypasses all data without changes.
func NewIdentity ()Filter {return filterIdentity {}};func _ceb (_ga FilterDict )(Filter ,error ){if _ga .Length ==128{_ac .Log .Debug ("\u0041\u0045S\u0056\u0032\u0020c\u0072\u0079\u0070\u0074\u0020f\u0069\u006c\u0074\u0065\u0072 l\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0070\u0070\u0065\u0061\u0072\u0073\u0020\u0074\u006f\u0020\u0062e\u0020i\u006e\u0020\u0062\u0069\u0074\u0073 ra\u0074\u0068\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0062\u0079te\u0073 \u002d\u0020\u0061\u0073s\u0075m\u0069n\u0067\u0020b\u0069\u0074s \u0028\u0025\u0064\u0029",_ga .Length );
_ga .Length /=8;};if _ga .Length !=0&&_ga .Length !=16{return nil ,_a .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0041\u0045\u0053\u0056\u0032\u0020\u0063\u0072\u0079\u0070\u0074\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006c\u0065\u006eg\u0074\u0068 \u0028\u0025\u0064\u0029",_ga .Length );
};return filterAESV2 {},nil ;};var _ Filter =filterAESV3 {};func (filterIdentity )MakeKey (objNum ,genNum uint32 ,fkey []byte )([]byte ,error ){return fkey ,nil };func (filterAES )EncryptBytes (buf []byte ,okey []byte )([]byte ,error ){_ec ,_be :=_c .NewCipher (okey );
if _be !=nil {return nil ,_be ;};_ac .Log .Trace ("A\u0045\u0053\u0020\u0045nc\u0072y\u0070\u0074\u0020\u0028\u0025d\u0029\u003a\u0020\u0025\u0020\u0078",len (buf ),buf );const _bf =_c .BlockSize ;_bc :=_bf -len (buf )%_bf ;for _cd :=0;_cd < _bc ;_cd ++{buf =append (buf ,byte (_bc ));
};_ac .Log .Trace ("\u0050a\u0064d\u0065\u0064\u0020\u0074\u006f \u0025\u0064 \u0062\u0079\u0074\u0065\u0073",len (buf ));_ge :=make ([]byte ,_bf +len (buf ));_d :=_ge [:_bf ];if _ ,_ea :=_f .ReadFull (_aa .Reader ,_d );_ea !=nil {return nil ,_ea ;};_dc :=_cg .NewCBCEncrypter (_ec ,_d );
_dc .CryptBlocks (_ge [_bf :],buf );buf =_ge ;_ac .Log .Trace ("\u0074\u006f\u0020(\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078",len (buf ),buf );return buf ,nil ;};var (_cbb =make (map[string ]filterFunc ););func init (){_dcf ("\u0041\u0045\u0053V\u0033",_ffg )};


// NewFilter creates CryptFilter from a corresponding dictionary.
func NewFilter (d FilterDict )(Filter ,error ){_bdd ,_fa :=_cbd (d .CFM );if _fa !=nil {return nil ,_fa ;};_fbge ,_fa :=_bdd (d );if _fa !=nil {return nil ,_fa ;};return _fbge ,nil ;};

// KeyLength implements Filter interface.
func (filterAESV3 )KeyLength ()int {return 256/8};

// DecryptBytes implements Filter interface.
func (filterV2 )DecryptBytes (buf []byte ,okey []byte )([]byte ,error ){_gcg ,_fee :=_g .NewCipher (okey );if _fee !=nil {return nil ,_fee ;};_ac .Log .Trace ("\u0052\u00434\u0020\u0044\u0065c\u0072\u0079\u0070\u0074\u003a\u0020\u0025\u0020\u0078",buf );
_gcg .XORKeyStream (buf ,buf );_ac .Log .Trace ("\u0074o\u003a\u0020\u0025\u0020\u0078",buf );return buf ,nil ;};

// PDFVersion implements Filter interface.
func (filterAESV3 )PDFVersion ()[2]int {return [2]int {2,0}};

// HandlerVersion implements Filter interface.
func (filterAESV3 )HandlerVersion ()(V ,R int ){V ,R =5,6;return ;};

// HandlerVersion implements Filter interface.
func (_gaf filterV2 )HandlerVersion ()(V ,R int ){V ,R =2,3;return ;};func (filterIdentity )DecryptBytes (p []byte ,okey []byte )([]byte ,error ){return p ,nil };

// EncryptBytes implements Filter interface.
func (filterV2 )EncryptBytes (buf []byte ,okey []byte )([]byte ,error ){_ed ,_gba :=_g .NewCipher (okey );if _gba !=nil {return nil ,_gba ;};_ac .Log .Trace ("\u0052\u00434\u0020\u0045\u006ec\u0072\u0079\u0070\u0074\u003a\u0020\u0025\u0020\u0078",buf );
_ed .XORKeyStream (buf ,buf );_ac .Log .Trace ("\u0074o\u003a\u0020\u0025\u0020\u0078",buf );return buf ,nil ;};type filterV2 struct{_ccg int };var _ Filter =filterV2 {};

// MakeKey implements Filter interface.
func (_ggd filterV2 )MakeKey (objNum ,genNum uint32 ,ekey []byte )([]byte ,error ){return _abe (objNum ,genNum ,ekey ,false );};func (filterIdentity )Name ()string {return "\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079"};func init (){_dcf ("\u0056\u0032",_bfc )};
type filterFunc func (_ccc FilterDict )(Filter ,error );func _cbd (_bdf string )(filterFunc ,error ){_ead :=_cbb [_bdf ];if _ead ==nil {return nil ,_a .Errorf ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u0072\u0079p\u0074 \u0066\u0069\u006c\u0074\u0065\u0072\u003a \u0025\u0071",_bdf );
};return _ead ,nil ;};type filterIdentity struct{};

// Name implements Filter interface.
func (filterAESV2 )Name ()string {return "\u0041\u0045\u0053V\u0032"};

// Filter is a common interface for crypt filter methods.
type Filter interface{

// Name returns a name of the filter that should be used in CFM field of Encrypt dictionary.
Name ()string ;

// KeyLength returns a length of the encryption key in bytes.
KeyLength ()int ;

// PDFVersion reports the minimal version of PDF document that introduced this filter.
PDFVersion ()[2]int ;

// HandlerVersion reports V and R parameters that should be used for this filter.
HandlerVersion ()(V ,R int );

// MakeKey generates a object encryption key based on file encryption key and object numbers.
// Used only for legacy filters - AESV3 doesn't change the key for each object.
MakeKey (_geb ,_fbg uint32 ,_bcd []byte )([]byte ,error );

// EncryptBytes encrypts a buffer using object encryption key, as returned by MakeKey.
// Implementation may reuse a buffer and encrypt data in-place.
EncryptBytes (_fdc []byte ,_fde []byte )([]byte ,error );

// DecryptBytes decrypts a buffer using object encryption key, as returned by MakeKey.
// Implementation may reuse a buffer and decrypt data in-place.
DecryptBytes (_ggc []byte ,_bcc []byte )([]byte ,error );};

// PDFVersion implements Filter interface.
func (filterAESV2 )PDFVersion ()[2]int {return [2]int {1,5}};func (filterIdentity )PDFVersion ()[2]int {return [2]int {}};func _dcf (_ba string ,_fdec filterFunc ){if _ ,_cgf :=_cbb [_ba ];_cgf {panic ("\u0061l\u0072e\u0061\u0064\u0079\u0020\u0072e\u0067\u0069s\u0074\u0065\u0072\u0065\u0064");
};_cbb [_ba ]=_fdec ;};

// KeyLength implements Filter interface.
func (filterAESV2 )KeyLength ()int {return 128/8};

// MakeKey implements Filter interface.
func (filterAESV3 )MakeKey (_ ,_ uint32 ,ekey []byte )([]byte ,error ){return ekey ,nil };var _ Filter =filterAESV2 {};

// FilterDict represents information from a CryptFilter dictionary.
type FilterDict struct{CFM string ;AuthEvent _gc .AuthEvent ;Length int ;};

// NewFilterV2 creates a RC4-based filter with a specified key length (in bytes).
func NewFilterV2 (length int )Filter {_afg ,_eaa :=_bfc (FilterDict {Length :length });if _eaa !=nil {_ac .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075l\u0064\u0020\u006e\u006f\u0074\u0020\u0063re\u0061\u0074\u0065\u0020R\u0043\u0034\u0020\u0056\u0032\u0020\u0063\u0072\u0079pt\u0020\u0066i\u006c\u0074\u0065\u0072\u003a\u0020\u0025\u0076",_eaa );
return filterV2 {_ccg :length };};return _afg ;};

// PDFVersion implements Filter interface.
func (_bb filterV2 )PDFVersion ()[2]int {return [2]int {}};

// Name implements Filter interface.
func (filterV2 )Name ()string {return "\u0056\u0032"};

// MakeKey implements Filter interface.
func (filterAESV2 )MakeKey (objNum ,genNum uint32 ,ekey []byte )([]byte ,error ){return _abe (objNum ,genNum ,ekey ,true );};type filterAESV2 struct{filterAES };func (filterAES )DecryptBytes (buf []byte ,okey []byte )([]byte ,error ){_gga ,_gd :=_c .NewCipher (okey );
if _gd !=nil {return nil ,_gd ;};if len (buf )< 16{_ac .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020\u0041\u0045\u0053\u0020\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0062\u0075\u0066\u0020\u0025\u0073",buf );return buf ,_a .Errorf ("\u0041\u0045\u0053\u003a B\u0075\u0066\u0020\u006c\u0065\u006e\u0020\u003c\u0020\u0031\u0036\u0020\u0028\u0025d\u0029",len (buf ));
};_ca :=buf [:16];buf =buf [16:];if len (buf )%16!=0{_ac .Log .Debug ("\u0020\u0069\u0076\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078",len (_ca ),_ca );_ac .Log .Debug ("\u0062\u0075\u0066\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078",len (buf ),buf );
return buf ,_a .Errorf ("\u0041\u0045\u0053\u0020\u0062\u0075\u0066\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006e\u006f\u0074\u0020\u006d\u0075\u006c\u0074\u0069p\u006c\u0065\u0020\u006f\u0066 \u0031\u0036 \u0028\u0025\u0064\u0029",len (buf ));
};_af :=_cg .NewCBCDecrypter (_gga ,_ca );_ac .Log .Trace ("A\u0045\u0053\u0020\u0044ec\u0072y\u0070\u0074\u0020\u0028\u0025d\u0029\u003a\u0020\u0025\u0020\u0078",len (buf ),buf );_ac .Log .Trace ("\u0063\u0068\u006f\u0070\u0020\u0041\u0045\u0053\u0020\u0044\u0065c\u0072\u0079\u0070\u0074\u0020\u0028\u0025\u0064\u0029\u003a \u0025\u0020\u0078",len (buf ),buf );
_af .CryptBlocks (buf ,buf );_ac .Log .Trace ("\u0074\u006f\u0020(\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078",len (buf ),buf );if len (buf )==0{_ac .Log .Trace ("\u0045\u006d\u0070\u0074\u0079\u0020b\u0075\u0066\u002c\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067 \u0065\u006d\u0070\u0074\u0079\u0020\u0073t\u0072\u0069\u006e\u0067");
return buf ,nil ;};_gea :=int (buf [len (buf )-1]);if _gea > len (buf ){_ac .Log .Debug ("\u0049\u006c\u006c\u0065g\u0061\u006c\u0020\u0070\u0061\u0064\u0020\u006c\u0065\u006eg\u0074h\u0020\u0028\u0025\u0064\u0020\u003e\u0020%\u0064\u0029",_gea ,len (buf ));
return buf ,_a .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0070a\u0064\u0020l\u0065\u006e\u0067\u0074\u0068");};buf =buf [:len (buf )-_gea ];return buf ,nil ;};func (filterIdentity )EncryptBytes (p []byte ,okey []byte )([]byte ,error ){return p ,nil };
type filterAESV3 struct{filterAES };

// KeyLength implements Filter interface.
func (_gef filterV2 )KeyLength ()int {return _gef ._ccg };func (filterIdentity )HandlerVersion ()(V ,R int ){return ;};func _abe (_fb ,_cda uint32 ,_cf []byte ,_cff bool )([]byte ,error ){_fbd :=make ([]byte ,len (_cf )+5);for _gb :=0;_gb < len (_cf );
_gb ++{_fbd [_gb ]=_cf [_gb ];};for _db :=0;_db < 3;_db ++{_cba :=byte ((_fb >>uint32 (8*_db ))&0xff);_fbd [_db +len (_cf )]=_cba ;};for _ee :=0;_ee < 2;_ee ++{_beg :=byte ((_cda >>uint32 (8*_ee ))&0xff);_fbd [_ee +len (_cf )+3]=_beg ;};if _cff {_fbd =append (_fbd ,0x73);
_fbd =append (_fbd ,0x41);_fbd =append (_fbd ,0x6C);_fbd =append (_fbd ,0x54);};_bd :=_gg .New ();_bd .Write (_fbd );_fe :=_bd .Sum (nil );if len (_cf )+5< 16{return _fe [0:len (_cf )+5],nil ;};return _fe ,nil ;};type filterAES struct{};func (filterIdentity )KeyLength ()int {return 0};


// Name implements Filter interface.
func (filterAESV3 )Name ()string {return "\u0041\u0045\u0053V\u0033"};

// NewFilterAESV3 creates an AES-based filter with a 256 bit key (AESV3).
func NewFilterAESV3 ()Filter {_ff ,_cb :=_ffg (FilterDict {});if _cb !=nil {_ac .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075l\u0064\u0020\u006e\u006f\u0074\u0020\u0063re\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0056\u0033\u0020\u0063\u0072\u0079pt\u0020\u0066i\u006c\u0074\u0065\u0072\u003a\u0020\u0025\u0076",_cb );
return filterAESV3 {};};return _ff ;};func _bfc (_ece FilterDict )(Filter ,error ){if _ece .Length %8!=0{return nil ,_a .Errorf ("\u0063\u0072\u0079p\u0074\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006e\u006f\u0074\u0020\u006d\u0075\u006c\u0074\u0069\u0070\u006c\u0065\u0020o\u0066\u0020\u0038\u0020\u0028\u0025\u0064\u0029",_ece .Length );
};if _ece .Length < 5||_ece .Length > 16{if _ece .Length ==40||_ece .Length ==64||_ece .Length ==128{_ac .Log .Debug ("\u0053\u0054\u0041\u004e\u0044AR\u0044\u0020V\u0049\u004f\u004c\u0041\u0054\u0049\u004f\u004e\u003a\u0020\u0043\u0072\u0079\u0070\u0074\u0020\u004c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0070\u0070\u0065\u0061\u0072s\u0020\u0074\u006f \u0062\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u0074\u0073\u0020\u0072\u0061t\u0068\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0062\u0079\u0074\u0065\u0073\u0020-\u0020\u0061s\u0073u\u006d\u0069\u006e\u0067\u0020\u0062\u0069t\u0073\u0020\u0028\u0025\u0064\u0029",_ece .Length );
_ece .Length /=8;}else {return nil ,_a .Errorf ("\u0063\u0072\u0079\u0070\u0074\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006c\u0065\u006e\u0067\u0074h\u0020\u006e\u006f\u0074\u0020\u0069\u006e \u0072\u0061\u006e\u0067\u0065\u0020\u0034\u0030\u0020\u002d\u00201\u0032\u0038\u0020\u0062\u0069\u0074\u0020\u0028\u0025\u0064\u0029",_ece .Length );
};};return filterV2 {_ccg :_ece .Length },nil ;};