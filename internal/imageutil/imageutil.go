//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_e "errors";_gg "fmt";_ff "github.com/unidoc/unipdf/v3/internal/bitwise";_fe "image";_g "image/color";_f "image/draw";_b "math";);var _ Gray =&Monochrome {};func GrayHistogram (g Gray )(_fdbag [256]int ){switch _bade :=g .(type ){case Histogramer :return _bade .Histogram ();case _fe .Image :_bagda :=_bade .Bounds ();for _bddb :=0;_bddb < _bagda .Max .X ;_bddb ++{for _gcfg :=0;_gcfg < _bagda .Max .Y ;_gcfg ++{_fdbag [g .GrayAt (_bddb ,_gcfg ).Y ]++;};};return _fdbag ;default:return [256]int {};};};func (_fggc *NRGBA64 )Base ()*ImageBase {return &_fggc .ImageBase };func (_gf *CMYK32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtCMYK (x ,y ,_gf .Width ,_gf .Data ,_gf .Decode );};func (_bcdf *Gray16 )Validate ()error {if len (_bcdf .Data )!=_bcdf .Height *_bcdf .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_afa *Monochrome )ColorModel ()_g .Model {return MonochromeModel (_afa .ModelThreshold )};func (_afb *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_afb .copy ()}};func (_gdd monochromeModel )Convert (c _g .Color )_g .Color {_efa :=_g .GrayModel .Convert (c ).(_g .Gray );return _afc (_efa ,_gdd );};func (_acf *Monochrome )setGray (_ffe int ,_eac _g .Gray ,_cagf int ){if _eac .Y ==0{_acf .clearBit (_cagf ,_ffe );}else {_acf .setBit (_cagf ,_ffe );};};func (_ecb *Gray8 )Base ()*ImageBase {return &_ecb .ImageBase };func (_bbdb *Gray4 )Histogram ()(_adf [256]int ){for _geef :=0;_geef < _bbdb .Width ;_geef ++{for _gfeb :=0;_gfeb < _bbdb .Height ;_gfeb ++{_adf [_bbdb .GrayAt (_geef ,_gfeb ).Y ]++;};};return _adf ;};var _ _fe .Image =&NRGBA16 {};func _gba (_baad _g .NRGBA )_g .CMYK {_dad ,_cba ,_efb ,_ :=_baad .RGBA ();_dea ,_ea ,_dd ,_bdc :=_g .RGBToCMYK (uint8 (_dad >>8),uint8 (_cba >>8),uint8 (_efb >>8));return _g .CMYK {C :_dea ,M :_ea ,Y :_dd ,K :_bdc };};func (_gbb *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_gbb .ImageBase .copy (),ModelThreshold :_gbb .ModelThreshold };};func _ac (_gdb _g .Gray )_g .CMYK {return _g .CMYK {K :0xff-_gdb .Y }};var _ Gray =&Gray16 {};var _ Gray =&Gray2 {};var _ Image =&NRGBA32 {};func _ggf (_fefb CMYK ,_cfcg Gray ,_cagc _fe .Rectangle ){for _ccbe :=0;_ccbe < _cagc .Max .X ;_ccbe ++{for _gbad :=0;_gbad < _cagc .Max .Y ;_gbad ++{_dacb :=_bfb (_fefb .CMYKAt (_ccbe ,_gbad ));_cfcg .SetGray (_ccbe ,_gbad ,_dacb );};};};func _edgee (_faf _fe .Image )(Image ,error ){if _dgdc ,_gbd :=_faf .(*NRGBA64 );_gbd {return _dgdc .Copy (),nil ;};_adce ,_abbf ,_adfg :=_fgbd (_faf ,2);_bccc ,_cbg :=NewImage (_adce .Max .X ,_adce .Max .Y ,16,3,nil ,_adfg ,nil );if _cbg !=nil {return nil ,_cbg ;};_fdfg (_faf ,_bccc ,_adce );if len (_adfg )!=0&&!_abbf {if _ceac :=_bbabbd (_adfg ,_bccc );_ceac !=nil {return nil ,_ceac ;};};return _bccc ,nil ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_geeb :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _bedd Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_bedd =&Monochrome {ImageBase :_geeb ,ModelThreshold :0x0f};case 2:_bedd =&Gray2 {ImageBase :_geeb };case 4:_bedd =&Gray4 {ImageBase :_geeb };case 8:_bedd =&Gray8 {ImageBase :_geeb };case 16:_bedd =&Gray16 {ImageBase :_geeb };};case 3:switch bitsPerComponent {case 4:_bedd =&NRGBA16 {ImageBase :_geeb };case 8:_bedd =&NRGBA32 {ImageBase :_geeb };case 16:_bedd =&NRGBA64 {ImageBase :_geeb };};case 4:_bedd =&CMYK32 {ImageBase :_geeb };};if _bedd ==nil {return nil ,ErrInvalidImage ;};return _bedd ,nil ;};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_agg :=y *bytesPerLine +x >>3;if _agg >=len (data ){return _g .Gray {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_bef :=data [_agg ]>>uint (7-(x &7))&1;if len (decode )==2{_bef =uint8 (LinearInterpolate (float64 (_bef ),0.0,1.0,decode [0],decode [1]))&1;};return _g .Gray {Y :_bef *255},nil ;};func (_ead *NRGBA32 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_ead .Width ,Y :_ead .Height }};};func _bfb (_gfed _g .CMYK )_g .Gray {_fdb ,_fab ,_cgf :=_g .CMYKToRGB (_gfed .C ,_gfed .M ,_gfed .Y ,_gfed .K );_dcd :=(19595*uint32 (_fdb )+38470*uint32 (_fab )+7471*uint32 (_cgf )+1<<7)>>16;return _g .Gray {Y :uint8 (_dcd )};};func _cbdb (_fdba _g .Gray )_g .Gray {_fdba .Y >>=4;_fdba .Y |=_fdba .Y <<4;return _fdba };var _ _fe .Image =&Gray16 {};var _ Image =&CMYK32 {};func _cff (_fag _g .RGBA )_g .CMYK {_bda ,_ebe ,_bad ,_fed :=_g .RGBToCMYK (_fag .R ,_fag .G ,_fag .B );return _g .CMYK {C :_bda ,M :_ebe ,Y :_bad ,K :_fed };};func (_aabb *NRGBA64 )Set (x ,y int ,c _g .Color ){_cbcb :=(y *_aabb .Width +x )*2;_gdag :=_cbcb *3;if _gdag +5>=len (_aabb .Data ){return ;};_aefd :=_g .NRGBA64Model .Convert (c ).(_g .NRGBA64 );_aabb .setNRGBA64 (_gdag ,_aefd ,_cbcb );};func _acg (_ae _g .NYCbCrA )_g .NRGBA {_def :=int32 (_ae .Y )*0x10101;_fef :=int32 (_ae .Cb )-128;_egg :=int32 (_ae .Cr )-128;_ag :=_def +91881*_egg ;if uint32 (_ag )&0xff000000==0{_ag >>=8;}else {_ag =^(_ag >>31)&0xffff;};_bab :=_def -22554*_fef -46802*_egg ;if uint32 (_bab )&0xff000000==0{_bab >>=8;}else {_bab =^(_bab >>31)&0xffff;};_cfdf :=_def +116130*_fef ;if uint32 (_cfdf )&0xff000000==0{_cfdf >>=8;}else {_cfdf =^(_cfdf >>31)&0xffff;};return _g .NRGBA {R :uint8 (_ag >>8),G :uint8 (_bab >>8),B :uint8 (_cfdf >>8),A :_ae .A };};func (_abd *NRGBA16 )setNRGBA (_ccgfc ,_dfea ,_ebfd int ,_ebab _g .NRGBA ){if _ccgfc *3%2==0{_abd .Data [_ebfd ]=(_ebab .R >>4)<<4|(_ebab .G >>4);_abd .Data [_ebfd +1]=(_ebab .B >>4)<<4|(_abd .Data [_ebfd +1]&0xf);}else {_abd .Data [_ebfd ]=(_abd .Data [_ebfd ]&0xf0)|(_ebab .R >>4);_abd .Data [_ebfd +1]=(_ebab .G >>4)<<4|(_ebab .B >>4);};if _abd .Alpha !=nil {_deaa :=_dfea *BytesPerLine (_abd .Width ,4,1);if _deaa < len (_abd .Alpha ){if _ccgfc %2==0{_abd .Alpha [_deaa ]=(_ebab .A >>uint (4))<<uint (4)|(_abd .Alpha [_ebfd ]&0xf);}else {_abd .Alpha [_deaa ]=(_abd .Alpha [_deaa ]&0xf0)|(_ebab .A >>uint (4));};};};};func (_bdb *Monochrome )Set (x ,y int ,c _g .Color ){_ffbe :=y *_bdb .BytesPerLine +x >>3;if _ffbe > len (_bdb .Data )-1{return ;};_ebf :=_bdb .ColorModel ().Convert (c ).(_g .Gray );_bdb .setGray (x ,_ebf ,_ffbe );};func (_bgg *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_bgg .copy ()}};func (_gbaa *Gray2 )Histogram ()(_dfe [256]int ){for _egc :=0;_egc < _gbaa .Width ;_egc ++{for _geb :=0;_geb < _gbaa .Height ;_geb ++{_dfe [_gbaa .GrayAt (_egc ,_geb ).Y ]++;};};return _dfe ;};func (_df *CMYK32 )SetCMYK (x ,y int ,c _g .CMYK ){_bcg :=4*(y *_df .Width +x );if _bcg +3>=len (_df .Data ){return ;};_df .Data [_bcg ]=c .C ;_df .Data [_bcg +1]=c .M ;_df .Data [_bcg +2]=c .Y ;_df .Data [_bcg +3]=c .K ;};type ColorConverter interface{Convert (_gb _fe .Image )(Image ,error );};func _edc (_aegg _g .Gray )_g .Gray {_ege :=_aegg .Y >>6;_ege |=_ege <<2;_aegg .Y =_ege |_ege <<4;return _aegg ;};var (MonochromeConverter =ConverterFunc (_ce );Gray2Converter =ConverterFunc (_aea );Gray4Converter =ConverterFunc (_fad );GrayConverter =ConverterFunc (_eeef );Gray16Converter =ConverterFunc (_ceba );NRGBA16Converter =ConverterFunc (_feeg );NRGBAConverter =ConverterFunc (_eeb );NRGBA64Converter =ConverterFunc (_edgee );CMYKConverter =ConverterFunc (_bg ););var _ Image =&Gray4 {};func (_befd *Gray2 )GrayAt (x ,y int )_g .Gray {_fabf ,_ :=ColorAtGray2BPC (x ,y ,_befd .BytesPerLine ,_befd .Data ,_befd .Decode );return _fabf ;};func (_bdcg *NRGBA16 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_bdcg .Width ,Y :_bdcg .Height }};};func init (){_fgb ()};func _ceca (_dgda *_fe .Gray16 ,_gbfd uint8 )*_fe .Gray {_dgcf :=_dgda .Bounds ();_aag :=_fe .NewGray (_dgcf );for _fagf :=0;_fagf < _dgcf .Dx ();_fagf ++{for _dceb :=0;_dceb < _dgcf .Dy ();_dceb ++{_ggfg :=_dgda .Gray16At (_fagf ,_dceb );_aag .SetGray (_fagf ,_dceb ,_g .Gray {Y :_fbgb (uint8 (_ggfg .Y /256),_gbfd )});};};return _aag ;};func (_be *CMYK32 )At (x ,y int )_g .Color {_cc ,_ :=_be .ColorAt (x ,y );return _cc };var _ Image =&Gray2 {};func _fdcd (_cfec *_fe .NYCbCrA ,_dbbg NRGBA ,_gea _fe .Rectangle ){for _aff :=0;_aff < _gea .Max .X ;_aff ++{for _ccdb :=0;_ccdb < _gea .Max .Y ;_ccdb ++{_ggeeg :=_cfec .NYCbCrAAt (_aff ,_ccdb );_dbbg .SetNRGBA (_aff ,_ccdb ,_acg (_ggeeg ));};};};func _eefbf (_aefg Gray ,_dgfa NRGBA ,_eca _fe .Rectangle ){for _deae :=0;_deae < _eca .Max .X ;_deae ++{for _bcf :=0;_bcf < _eca .Max .Y ;_bcf ++{_eead :=_aefg .GrayAt (_deae ,_bcf );_dgfa .SetNRGBA (_deae ,_bcf ,_cfc (_eead ));};};};func (_gbbb *Gray2 )Base ()*ImageBase {return &_gbbb .ImageBase };func (_ceb *Monochrome )Base ()*ImageBase {return &_ceb .ImageBase };var _ _fe .Image =&Gray4 {};var _ Image =&Monochrome {};type Gray4 struct{ImageBase };func ImgToGray (i _fe .Image )*_fe .Gray {if _bcda ,_cgee :=i .(*_fe .Gray );_cgee {return _bcda ;};_cbb :=i .Bounds ();_gabf :=_fe .NewGray (_cbb );for _bgb :=0;_bgb < _cbb .Max .X ;_bgb ++{for _fgab :=0;_fgab < _cbb .Max .Y ;_fgab ++{_aga :=i .At (_bgb ,_fgab );_gabf .Set (_bgb ,_fgab ,_aga );};};return _gabf ;};func _feeg (_bddc _fe .Image )(Image ,error ){if _feca ,_bdcc :=_bddc .(*NRGBA16 );_bdcc {return _feca .Copy (),nil ;};_fdc :=_bddc .Bounds ();_geebf ,_eec :=NewImage (_fdc .Max .X ,_fdc .Max .Y ,4,3,nil ,nil ,nil );if _eec !=nil {return nil ,_eec ;};_cfbf (_bddc ,_geebf ,_fdc );return _geebf ,nil ;};var _ Image =&NRGBA64 {};func MonochromeModel (threshold uint8 )_g .Model {return monochromeModel (threshold )};func (_aedg *Gray8 )Histogram ()(_ggbdb [256]int ){for _gddb :=0;_gddb < len (_aedg .Data );_gddb ++{_ggbdb [_aedg .Data [_gddb ]]++;};return _ggbdb ;};func _fbgb (_degb ,_gbdf uint8 )uint8 {if _degb < _gbdf {return 255;};return 0;};func (_gff *NRGBA16 )NRGBAAt (x ,y int )_g .NRGBA {_abag ,_ :=ColorAtNRGBA16 (x ,y ,_gff .Width ,_gff .BytesPerLine ,_gff .Data ,_gff .Alpha ,_gff .Decode );return _abag ;};func (_dg *CMYK32 )Set (x ,y int ,c _g .Color ){_cb :=4*(y *_dg .Width +x );if _cb +3>=len (_dg .Data ){return ;};_bbe :=_g .CMYKModel .Convert (c ).(_g .CMYK );_dg .Data [_cb ]=_bbe .C ;_dg .Data [_cb +1]=_bbe .M ;_dg .Data [_cb +2]=_bbe .Y ;_dg .Data [_cb +3]=_bbe .K ;};func (_ddb *Monochrome )GrayAt (x ,y int )_g .Gray {_bcab ,_ :=ColorAtGray1BPC (x ,y ,_ddb .BytesPerLine ,_ddb .Data ,_ddb .Decode );return _bcab ;};func (_aec *NRGBA16 )Validate ()error {if len (_aec .Data )!=3*_aec .Width *_aec .Height /2{return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_bfg *Gray8 )SetGray (x ,y int ,g _g .Gray ){_gae :=y *_bfg .BytesPerLine +x ;if _gae > len (_bfg .Data )-1{return ;};_bfg .Data [_gae ]=g .Y ;};func _eefb (_gc ,_gda CMYK ,_gge _fe .Rectangle ){for _ge :=0;_ge < _gge .Max .X ;_ge ++{for _cbf :=0;_cbf < _gge .Max .Y ;_cbf ++{_gda .SetCMYK (_ge ,_cbf ,_gc .CMYKAt (_ge ,_cbf ));};};};func _aae (_egac NRGBA ,_faa Gray ,_cfgf _fe .Rectangle ){for _ecgd :=0;_ecgd < _cfgf .Max .X ;_ecgd ++{for _add :=0;_add < _cfgf .Max .Y ;_add ++{_dcdb :=_aaa (_egac .NRGBAAt (_ecgd ,_add ));_faa .SetGray (_ecgd ,_add ,_dcdb );};};};func (_adg *Monochrome )setBit (_cgcf ,_ecf int ){_adg .Data [_cgcf ]|=0x80>>uint (_ecf &7)};func (_cfg *Gray2 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_cfg .Width ,Y :_cfg .Height }};};func (_afab *Monochrome )clearBit (_cafb ,_dff int ){_afab .Data [_cafb ]&=^(0x80>>uint (_dff &7))};func (_gdfb *NRGBA16 )Set (x ,y int ,c _g .Color ){_bge :=y *_gdfb .BytesPerLine +x *3/2;if _bge +1>=len (_gdfb .Data ){return ;};_gfg :=NRGBA16Model .Convert (c ).(_g .NRGBA );_gdfb .setNRGBA (x ,y ,_bge ,_gfg );};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_edf :=y *bytesPerLine +x >>2;if _edf >=len (data ){return _g .Gray {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_bgdb :=data [_edf ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_bgdb =uint8 (uint32 (LinearInterpolate (float64 (_bgdb ),0,3.0,decode [0],decode [1]))&3);};return _g .Gray {Y :_bgdb *85},nil ;};func (_gadg *Gray16 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_gadg .Width ,Y :_gadg .Height }};};func (_cadg *Gray2 )Validate ()error {if len (_cadg .Data )!=_cadg .Height *_cadg .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _dbe (_bba NRGBA ,_eg CMYK ,_ba _fe .Rectangle ){for _baa :=0;_baa < _ba .Max .X ;_baa ++{for _a :=0;_a < _ba .Max .Y ;_a ++{_ggea :=_bba .NRGBAAt (_baa ,_a );_eg .SetCMYK (_baa ,_a ,_gba (_ggea ));};};};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_fde :=y *bytesPerLine +x >>1;if _fde >=len (data ){return _g .Gray {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_gaf :=data [_fde ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_gaf =uint8 (uint32 (LinearInterpolate (float64 (_gaf ),0,15,decode [0],decode [1]))&0xf);};return _g .Gray {Y :_gaf *17&0xff},nil ;};func (_bbfe *Gray8 )Validate ()error {if len (_bbfe .Data )!=_bbfe .Height *_bbfe .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _aea (_cac _fe .Image )(Image ,error ){if _fbb ,_cfe :=_cac .(*Gray2 );_cfe {return _fbb .Copy (),nil ;};_dac :=_cac .Bounds ();_ade ,_ddf :=NewImage (_dac .Max .X ,_dac .Max .Y ,2,1,nil ,nil ,nil );if _ddf !=nil {return nil ,_ddf ;};_cgge (_cac ,_ade ,_dac );return _ade ,nil ;};func (_ggbd *Gray2 )ColorModel ()_g .Model {return Gray2Model };var _gacg [256]uint8 ;type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_gfad *Gray8 )GrayAt (x ,y int )_g .Gray {_cgg ,_ :=ColorAtGray8BPC (x ,y ,_gfad .BytesPerLine ,_gfad .Data ,_gfad .Decode );return _cgg ;};type Gray8 struct{ImageBase };func (_gadb *NRGBA64 )SetNRGBA64 (x ,y int ,c _g .NRGBA64 ){_ffec :=(y *_gadb .Width +x )*2;_cdd :=_ffec *3;if _cdd +5>=len (_gadb .Data ){return ;};_gadb .setNRGBA64 (_cdd ,c ,_ffec );};func (_bcd *CMYK32 )ColorModel ()_g .Model {return _g .CMYKModel };func (_efg *Gray8 )At (x ,y int )_g .Color {_aeae ,_ :=_efg .ColorAt (x ,y );return _aeae };func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA64 ,error ){_dacg :=(y *width +x )*2;_gfbg :=_dacg *3;if _gfbg +5>=len (data ){return _g .NRGBA64 {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};const _ccbeg =0xffff;_dbbe :=uint16 (_ccbeg );if alpha !=nil &&len (alpha )> _dacg +1{_dbbe =uint16 (alpha [_dacg ])<<8|uint16 (alpha [_dacg +1]);};_cgb :=uint16 (data [_gfbg ])<<8|uint16 (data [_gfbg +1]);_fcga :=uint16 (data [_gfbg +2])<<8|uint16 (data [_gfbg +3]);_dag :=uint16 (data [_gfbg +4])<<8|uint16 (data [_gfbg +5]);if len (decode )==6{_cgb =uint16 (uint64 (LinearInterpolate (float64 (_cgb ),0,65535,decode [0],decode [1]))&_ccbeg );_fcga =uint16 (uint64 (LinearInterpolate (float64 (_fcga ),0,65535,decode [2],decode [3]))&_ccbeg );_dag =uint16 (uint64 (LinearInterpolate (float64 (_dag ),0,65535,decode [4],decode [5]))&_ccbeg );};return _g .NRGBA64 {R :_cgb ,G :_fcga ,B :_dag ,A :_dbbe },nil ;};var _ _fe .Image =&Gray2 {};var _ Image =&NRGBA16 {};func _bbabbd (_aege []byte ,_aecb Image )error {_caed :=true ;for _cbff :=0;_cbff < len (_aege );_cbff ++{if _aege [_cbff ]!=0xff{_caed =false ;break ;};};if _caed {switch _bbc :=_aecb .(type ){case *NRGBA32 :_bbc .Alpha =nil ;case *NRGBA64 :_bbc .Alpha =nil ;default:return _gg .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_aecb );};};return nil ;};var _ Image =&Gray8 {};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _b .Abs (xmax -xmin )< 0.000001{return ymin ;};_afaf :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _afaf ;};type Gray interface{GrayAt (_adb ,_dgc int )_g .Gray ;SetGray (_ggb ,_dade int ,_gcf _g .Gray );};func _edae (_cceb ,_dgd Gray ,_bac _fe .Rectangle ){for _gab :=0;_gab < _bac .Max .X ;_gab ++{for _becf :=0;_becf < _bac .Max .Y ;_becf ++{_dgd .SetGray (_gab ,_becf ,_cceb .GrayAt (_gab ,_becf ));};};};func (_ggdc *Gray16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray16BPC (x ,y ,_ggdc .BytesPerLine ,_ggdc .Data ,_ggdc .Decode );};func ImgToBinary (i _fe .Image ,threshold uint8 )*_fe .Gray {switch _eff :=i .(type ){case *_fe .Gray :if _eebb (_eff ){return _eff ;};return _eeba (_eff ,threshold );case *_fe .Gray16 :return _ceca (_eff ,threshold );default:return _bbdc (_eff ,threshold );};};type CMYK32 struct{ImageBase };func _bbdc (_fbae _fe .Image ,_fbdf uint8 )*_fe .Gray {_egfg :=_fbae .Bounds ();_dafe :=_fe .NewGray (_egfg );var (_gaaf _g .Color ;_ecdb _g .Gray ;);for _fdeg :=0;_fdeg < _egfg .Max .X ;_fdeg ++{for _fbbf :=0;_fbbf < _egfg .Max .Y ;_fbbf ++{_gaaf =_fbae .At (_fdeg ,_fbbf );_dafe .Set (_fdeg ,_fbbf ,_gaaf );_ecdb =_dafe .GrayAt (_fdeg ,_fbbf );_dafe .SetGray (_fdeg ,_fbbf ,_g .Gray {Y :_fbgb (_ecdb .Y ,_fbdf )});};};return _dafe ;};type monochromeModel uint8 ;func (_cbc *NRGBA16 )Base ()*ImageBase {return &_cbc .ImageBase };func (_acca *Gray16 )At (x ,y int )_g .Color {_fcf ,_ :=_acca .ColorAt (x ,y );return _fcf };func (_bdad *Gray16 )SetGray (x ,y int ,g _g .Gray ){_caef :=(y *_bdad .BytesPerLine /2+x )*2;if _caef +1>=len (_bdad .Data ){return ;};_bdad .Data [_caef ]=g .Y ;_bdad .Data [_caef +1]=g .Y ;};func (_ebdg *NRGBA32 )Validate ()error {if len (_ebdg .Data )!=3*_ebdg .Width *_ebdg .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_ece *NRGBA32 )ColorModel ()_g .Model {return _g .NRGBAModel };func (_gadc *NRGBA32 )Set (x ,y int ,c _g .Color ){_edaef :=y *_gadc .Width +x ;_bcgf :=3*_edaef ;if _bcgf +2>=len (_gadc .Data ){return ;};_abec :=_g .NRGBAModel .Convert (c ).(_g .NRGBA );_gadc .setRGBA (_edaef ,_abec );};var _ _fe .Image =&NRGBA32 {};type NRGBA interface{NRGBAAt (_ffdg ,_cfdd int )_g .NRGBA ;SetNRGBA (_bada ,_cea int ,_edce _g .NRGBA );};func (_edge *NRGBA32 )NRGBAAt (x ,y int )_g .NRGBA {_bgcc ,_ :=ColorAtNRGBA32 (x ,y ,_edge .Width ,_edge .Data ,_edge .Alpha ,_edge .Decode );return _bgcc ;};func (_eedf *Gray4 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_eedf .Width ,Y :_eedf .Height }};};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_cggg :=y *bytesPerLine +x ;if _cggg >=len (data ){return _g .Gray {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_gdf :=data [_cggg ];if len (decode )==2{_gdf =uint8 (uint32 (LinearInterpolate (float64 (_gdf ),0,255,decode [0],decode [1]))&0xff);};return _g .Gray {Y :_gdf },nil ;};func (_cfa *NRGBA16 )SetNRGBA (x ,y int ,c _g .NRGBA ){_cabb :=y *_cfa .BytesPerLine +x *3/2;if _cabb +1>=len (_cfa .Data ){return ;};c =_beb (c );_cfa .setNRGBA (x ,y ,_cabb ,c );};var _ _fe .Image =&Gray8 {};func _acc (_cfd _g .RGBA )_g .NRGBA {switch _cfd .A {case 0xff:return _g .NRGBA {R :_cfd .R ,G :_cfd .G ,B :_cfd .B ,A :0xff};case 0x00:return _g .NRGBA {};default:_fga ,_dab ,_fdbf ,_aab :=_cfd .RGBA ();_fga =(_fga *0xffff)/_aab ;_dab =(_dab *0xffff)/_aab ;_fdbf =(_fdbf *0xffff)/_aab ;return _g .NRGBA {R :uint8 (_fga >>8),G :uint8 (_dab >>8),B :uint8 (_fdbf >>8),A :uint8 (_aab >>8)};};};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_g .CMYK ,error ){_ccf :=4*(y *width +x );if _ccf +3>=len (data ){return _g .CMYK {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};C :=data [_ccf ]&0xff;M :=data [_ccf +1]&0xff;Y :=data [_ccf +2]&0xff;K :=data [_ccf +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _g .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_ebad *ImageBase )Pix ()[]byte {return _ebad .Data };func _efca (_bfge int ,_ddd int )error {return _gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_bfge ,_ddd );};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_bgff :=y *bytesPerLine +x *3/2;if _bgff +1>=len (data ){return _g .NRGBA {},_efca (x ,y );};const (_gag =0xf;_bcdb =uint8 (0xff););_bffb :=_bcdb ;if alpha !=nil {_dadd :=y *BytesPerLine (width ,4,1);if _dadd < len (alpha ){if x %2==0{_bffb =(alpha [_dadd ]>>uint (4))&_gag ;}else {_bffb =alpha [_dadd ]&_gag ;};_bffb |=_bffb <<4;};};var _abe ,_dbf ,_bcae uint8 ;if x *3%2==0{_abe =(data [_bgff ]>>uint (4))&_gag ;_dbf =data [_bgff ]&_gag ;_bcae =(data [_bgff +1]>>uint (4))&_gag ;}else {_abe =data [_bgff ]&_gag ;_dbf =(data [_bgff +1]>>uint (4))&_gag ;_bcae =data [_bgff +1]&_gag ;};if len (decode )==6{_abe =uint8 (uint32 (LinearInterpolate (float64 (_abe ),0,15,decode [0],decode [1]))&0xf);_dbf =uint8 (uint32 (LinearInterpolate (float64 (_dbf ),0,15,decode [2],decode [3]))&0xf);_bcae =uint8 (uint32 (LinearInterpolate (float64 (_bcae ),0,15,decode [4],decode [5]))&0xf);};return _g .NRGBA {R :(_abe <<4)|(_abe &0xf),G :(_dbf <<4)|(_dbf &0xf),B :(_bcae <<4)|(_bcae &0xf),A :_bffb },nil ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_gcg *Gray4 )Set (x ,y int ,c _g .Color ){if x >=_gcg .Width ||y >=_gcg .Height {return ;};_ebb :=Gray4Model .Convert (c ).(_g .Gray );_gcg .setGray (x ,y ,_ebb );};func (_gd *CMYK32 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_gd .Width ,Y :_gd .Height }};};func (_abb *ImageBase )HasAlpha ()bool {if _abb .Alpha ==nil {return false ;};for _adfc :=range _abb .Alpha {if _abb .Alpha [_adfc ]!=0xff{return true ;};};return false ;};var _ _fe .Image =&NRGBA64 {};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_gg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};func _bg (_fg _fe .Image )(Image ,error ){if _ec ,_cg :=_fg .(*CMYK32 );_cg {return _ec .Copy (),nil ;};_ed :=_fg .Bounds ();_dfg ,_bbd :=NewImage (_ed .Max .X ,_ed .Max .Y ,8,4,nil ,nil ,nil );if _bbd !=nil {return nil ,_bbd ;};switch _eef :=_fg .(type ){case CMYK :_eefb (_eef ,_dfg .(CMYK ),_ed );case Gray :_fge (_eef ,_dfg .(CMYK ),_ed );case NRGBA :_dbe (_eef ,_dfg .(CMYK ),_ed );case RGBA :_bd (_eef ,_dfg .(CMYK ),_ed );default:_da (_fg ,_dfg ,_ed );};return _dfg ,nil ;};func _cgge (_eea _fe .Image ,_eae Image ,_ggaa _fe .Rectangle ){switch _aef :=_eea .(type ){case Gray :_edae (_aef ,_eae .(Gray ),_ggaa );case NRGBA :_aae (_aef ,_eae .(Gray ),_ggaa );case CMYK :_ggf (_aef ,_eae .(Gray ),_ggaa );case RGBA :_efc (_aef ,_eae .(Gray ),_ggaa );default:_da (_eea ,_eae .(Image ),_ggaa );};};type RGBA interface{RGBAAt (_egdf ,_cde int )_g .RGBA ;SetRGBA (_cadgc ,_cbac int ,_aafe _g .RGBA );};func _fdfg (_egba _fe .Image ,_dfaf Image ,_agce _fe .Rectangle ){if _caa ,_bggb :=_egba .(SMasker );_bggb &&_caa .HasAlpha (){_dfaf .(SMasker ).MakeAlpha ();};_da (_egba ,_dfaf ,_agce );};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_ggff :=y *width +x ;_eeac :=3*_ggff ;if _eeac +2>=len (data ){return _g .NRGBA {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_ccc :=uint8 (0xff);if alpha !=nil &&len (alpha )> _ggff {_ccc =alpha [_ggff ];};_bbfb ,_gbe ,_fefg :=data [_eeac ],data [_eeac +1],data [_eeac +2];if len (decode )==6{_bbfb =uint8 (uint32 (LinearInterpolate (float64 (_bbfb ),0,255,decode [0],decode [1]))&0xff);_gbe =uint8 (uint32 (LinearInterpolate (float64 (_gbe ),0,255,decode [2],decode [3]))&0xff);_fefg =uint8 (uint32 (LinearInterpolate (float64 (_fefg ),0,255,decode [4],decode [5]))&0xff);};return _g .NRGBA {R :_bbfb ,G :_gbe ,B :_fefg ,A :_ccc },nil ;};func _afc (_aaf _g .Gray ,_ffd monochromeModel )_g .Gray {if _aaf .Y > uint8 (_ffd ){return _g .Gray {Y :_b .MaxUint8 };};return _g .Gray {};};func (_fcb *Gray2 )At (x ,y int )_g .Color {_aee ,_ :=_fcb .ColorAt (x ,y );return _aee };func (_gdfa *ImageBase )newAlpha (){_beda :=BytesPerLine (_gdfa .Width ,_gdfa .BitsPerComponent ,1);_gdfa .Alpha =make ([]byte ,_gdfa .Height *_beda );};func (_agd *ImageBase )MakeAlpha (){_agd .newAlpha ()};func (_egf *Gray16 )Base ()*ImageBase {return &_egf .ImageBase };func _bag (_cbfga ,_acgg NRGBA ,_cbaec _fe .Rectangle ){for _abdd :=0;_abdd < _cbaec .Max .X ;_abdd ++{for _fcaf :=0;_fcaf < _cbaec .Max .Y ;_fcaf ++{_acgg .SetNRGBA (_abdd ,_fcaf ,_cbfga .NRGBAAt (_abdd ,_fcaf ));};};};func _fcbc (_badc _g .Color )_g .Color {_afe :=_g .GrayModel .Convert (_badc ).(_g .Gray );return _edc (_afe )};func (_eab *Gray2 )Set (x ,y int ,c _g .Color ){if x >=_eab .Width ||y >=_eab .Height {return ;};_eeda :=Gray2Model .Convert (c ).(_g .Gray );_fdf :=y *_eab .BytesPerLine ;_bfbe :=_fdf +(x >>2);_adbf :=_eeda .Y >>6;_eab .Data [_bfbe ]=(_eab .Data [_bfbe ]&(^(0xc0>>uint (2*((x )&3)))))|(_adbf <<uint (6-2*(x &3)));};func ConverterFunc (converterFunc func (_gfe _fe .Image )(Image ,error ))ColorConverter {return colorConverter {_fdd :converterFunc };};func (_acbb *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_acbb .copy ()}};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray16 ,error ){_fcc :=(y *bytesPerLine /2+x )*2;if _fcc +1>=len (data ){return _g .Gray16 {},_gg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_cee :=uint16 (data [_fcc ])<<8|uint16 (data [_fcc +1]);if len (decode )==2{_cee =uint16 (uint64 (LinearInterpolate (float64 (_cee ),0,65535,decode [0],decode [1])));};return _g .Gray16 {Y :_cee },nil ;};func (_fgg *NRGBA16 )ColorModel ()_g .Model {return NRGBA16Model };func (_eaaf *Gray16 )Histogram ()(_ddc [256]int ){for _bgdef :=0;_bgdef < _eaaf .Width ;_bgdef ++{for _bgf :=0;_bgf < _eaaf .Height ;_bgf ++{_ddc [_eaaf .GrayAt (_bgdef ,_bgf ).Y ]++;};};return _ddc ;};func (_ggd *Gray4 )ColorModel ()_g .Model {return Gray4Model };func _daf (_gfa _g .Color )_g .Color {_eba :=_g .GrayModel .Convert (_gfa ).(_g .Gray );return _cbdb (_eba )};var ErrInvalidImage =_e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");func _ceba (_deg _fe .Image )(Image ,error ){if _cbeg ,_dbac :=_deg .(*Gray16 );_dbac {return _cbeg .Copy (),nil ;};_fbcc :=_deg .Bounds ();_age ,_bfe :=NewImage (_fbcc .Max .X ,_fbcc .Max .Y ,16,1,nil ,nil ,nil );if _bfe !=nil {return nil ,_bfe ;};_cgge (_deg ,_age ,_fbcc );return _age ,nil ;};type CMYK interface{CMYKAt (_d ,_de int )_g .CMYK ;SetCMYK (_ee ,_fa int ,_fee _g .CMYK );};func (_egd colorConverter )Convert (src _fe .Image )(Image ,error ){return _egd ._fdd (src )};var _ Gray =&Gray8 {};func (_cdb *Gray4 )SetGray (x ,y int ,g _g .Gray ){if x >=_cdb .Width ||y >=_cdb .Height {return ;};g =_cbdb (g );_cdb .setGray (x ,y ,g );};func _fge (_eb Gray ,_ffc CMYK ,_ccg _fe .Rectangle ){for _ega :=0;_ega < _ccg .Max .X ;_ega ++{for _ca :=0;_ca < _ccg .Max .Y ;_ca ++{_ad :=_eb .GrayAt (_ega ,_ca );_ffc .SetCMYK (_ega ,_ca ,_ac (_ad ));};};};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_ede :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};if data ==nil {_ede .Data =make ([]byte ,height *_ede .BytesPerLine );};return _ede ;};func _ecg (_af _g .CMYK )_g .NRGBA {_cadd ,_dae ,_fc :=_g .CMYKToRGB (_af .C ,_af .M ,_af .Y ,_af .K );return _g .NRGBA {R :_cadd ,G :_dae ,B :_fc ,A :0xff};};func (_adba *ImageBase )copy ()ImageBase {_efad :=*_adba ;_efad .Data =make ([]byte ,len (_adba .Data ));copy (_efad .Data ,_adba .Data );return _efad ;};func (_bb *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_bb .copy ()}};func (_cagg *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cagg .copy ()}};func (_cadb *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_cadb .copy ()}};func _feb (_fabd uint8 )bool {if _fabd ==0||_fabd ==255{return true ;};return false ;};func _caf (_dfgd _g .NRGBA64 )_g .NRGBA {return _g .NRGBA {R :uint8 (_dfgd .R >>8),G :uint8 (_dfgd .G >>8),B :uint8 (_dfgd .B >>8),A :uint8 (_dfgd .A >>8)};};func (_aegf *Gray8 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray8BPC (x ,y ,_aegf .BytesPerLine ,_aegf .Data ,_aegf .Decode );};func (_ggbe *NRGBA32 )At (x ,y int )_g .Color {_bgc ,_ :=_ggbe .ColorAt (x ,y );return _bgc };func (_cgd *NRGBA64 )NRGBA64At (x ,y int )_g .NRGBA64 {_ccfd ,_ :=ColorAtNRGBA64 (x ,y ,_cgd .Width ,_cgd .Data ,_cgd .Alpha ,_cgd .Decode );return _ccfd ;};func (_bfc *Monochrome )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray1BPC (x ,y ,_bfc .BytesPerLine ,_bfc .Data ,_bfc .Decode );};func _fgbd (_cec _fe .Image ,_ccgfd int )(_fe .Rectangle ,bool ,[]byte ){_eebe :=_cec .Bounds ();var (_cbacc bool ;_gca []byte ;);switch _dfa :=_cec .(type ){case SMasker :_cbacc =_dfa .HasAlpha ();case NRGBA ,RGBA ,*_fe .RGBA64 ,nrgba64 ,*_fe .NYCbCrA :_gca =make ([]byte ,_eebe .Max .X *_eebe .Max .Y *_ccgfd );};return _eebe ,_cbacc ,_gca ;};func (_aecd *NRGBA16 )At (x ,y int )_g .Color {_egdb ,_ :=_aecd .ColorAt (x ,y );return _egdb };func (_gad *Gray4 )setGray (_gbaf int ,_gfb int ,_ggae _g .Gray ){_bbeg :=_gfb *_gad .BytesPerLine ;_gcfc :=_bbeg +(_gbaf >>1);if _gcfc >=len (_gad .Data ){return ;};_aed :=_ggae .Y >>4;_gad .Data [_gcfc ]=(_gad .Data [_gcfc ]&(^(0xf0>>uint (4*(_gbaf &1)))))|(_aed <<uint (4-4*(_gbaf &1)));};var _ NRGBA =&NRGBA32 {};func _aaa (_dcb _g .NRGBA )_g .Gray {_bfd ,_ef ,_ecd ,_ :=_dcb .RGBA ();_cgc :=(19595*_bfd +38470*_ef +7471*_ecd +1<<15)>>24;return _g .Gray {Y :uint8 (_cgc )};};func _ce (_cag _fe .Image )(Image ,error ){if _dgce ,_bdg :=_cag .(*Monochrome );_bdg {return _dgce ,nil ;};_aeg ,_bbf :=_cag .(Gray );if !_bbf {_bec ,_adc :=GrayConverter .Convert (_cag );if _adc !=nil {return nil ,_adc ;};_aeg =_bec .(Gray );};_cbe :=_cag .Bounds ();_bbbc ,_eee :=NewImage (_cbe .Max .X ,_cbe .Max .Y ,1,1,nil ,nil ,nil );if _eee !=nil {return nil ,_eee ;};_gbg :=_bbbc .(*Monochrome );_eed :=AutoThresholdTriangle (GrayHistogram (_aeg ));for _cae :=0;_cae < _cbe .Max .X ;_cae ++{for _fbd :=0;_fbd < _cbe .Max .Y ;_fbd ++{_dcdc :=_afc (_aeg .GrayAt (_cae ,_fbd ),monochromeModel (_eed ));_gbg .SetGray (_cae ,_fbd ,_dcdc );};};return _bbbc ,nil ;};func (_bbab *Gray4 )At (x ,y int )_g .Color {_bgde ,_ :=_bbab .ColorAt (x ,y );return _bgde };func _ceab (_dgfd RGBA ,_ebc NRGBA ,_bgffc _fe .Rectangle ){for _dcea :=0;_dcea < _bgffc .Max .X ;_dcea ++{for _dcbb :=0;_dcbb < _bgffc .Max .Y ;_dcbb ++{_bebg :=_dgfd .RGBAAt (_dcea ,_dcbb );_ebc .SetNRGBA (_dcea ,_dcbb ,_acc (_bebg ));};};};type NRGBA32 struct{ImageBase };func (_bbege *Gray8 )ColorModel ()_g .Model {return _g .GrayModel };func _gaaa (_dfb _g .Color )_g .Color {_fbcd :=_g .NRGBAModel .Convert (_dfb ).(_g .NRGBA );return _beb (_fbcd );};func _cce (_dcdg _g .RGBA )_g .Gray {_bcb :=(19595*uint32 (_dcdg .R )+38470*uint32 (_dcdg .G )+7471*uint32 (_dcdg .B )+1<<7)>>16;return _g .Gray {Y :uint8 (_bcb )};};func (_egcf *NRGBA32 )setRGBA (_fcfe int ,_egfb _g .NRGBA ){_eag :=3*_fcfe ;_egcf .Data [_eag ]=_egfb .R ;_egcf .Data [_eag +1]=_egfb .G ;_egcf .Data [_eag +2]=_egfb .B ;if _fcfe < len (_egcf .Alpha ){_egcf .Alpha [_fcfe ]=_egfb .A ;};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _gce ,_edbac ,_eacb ,_daa int ;for _cddf :=0;_cddf < len (histogram );_cddf ++{if histogram [_cddf ]> 0{_gce =_cddf ;break ;};};if _gce > 0{_gce --;};for _caggd :=255;_caggd > 0;_caggd --{if histogram [_caggd ]> 0{_daa =_caggd ;break ;};};if _daa < 255{_daa ++;};for _gbafa :=0;_gbafa < 256;_gbafa ++{if histogram [_gbafa ]> _edbac {_eacb =_gbafa ;_edbac =histogram [_gbafa ];};};var _efeb bool ;if (_eacb -_gce )< (_daa -_eacb ){_efeb =true ;var _ddff int ;_ffdgb :=255;for _ddff < _ffdgb {_aac :=histogram [_ddff ];histogram [_ddff ]=histogram [_ffdgb ];histogram [_ffdgb ]=_aac ;_ddff ++;_ffdgb --;};_gce =255-_daa ;_eacb =255-_eacb ;};if _gce ==_eacb {return uint8 (_gce );};_abfa :=float64 (histogram [_eacb ]);_dcba :=float64 (_gce -_eacb );_cdg :=_b .Sqrt (_abfa *_abfa +_dcba *_dcba );_abfa /=_cdg ;_dcba /=_cdg ;_cdg =_abfa *float64 (_gce )+_dcba *float64 (histogram [_gce ]);_gcgfe :=_gce ;var _cgggf float64 ;for _gdgb :=_gce +1;_gdgb <=_eacb ;_gdgb ++{_bfaa :=_abfa *float64 (_gdgb )+_dcba *float64 (histogram [_gdgb ])-_cdg ;if _bfaa > _cgggf {_gcgfe =_gdgb ;_cgggf =_bfaa ;};};_gcgfe --;if _efeb {var _cfda int ;_efgg :=255;for _cfda < _efgg {_bagd :=histogram [_cfda ];histogram [_cfda ]=histogram [_efgg ];histogram [_efgg ]=_bagd ;_cfda ++;_efgg --;};return uint8 (255-_gcgfe );};return uint8 (_gcgfe );};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_gg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};func _eeef (_eeed _fe .Image )(Image ,error ){if _ffbf ,_abf :=_eeed .(*Gray8 );_abf {return _ffbf .Copy (),nil ;};_ggc :=_eeed .Bounds ();_ecbe ,_edcc :=NewImage (_ggc .Max .X ,_ggc .Max .Y ,8,1,nil ,nil ,nil );if _edcc !=nil {return nil ,_edcc ;};_cgge (_eeed ,_ecbe ,_ggc );return _ecbe ,nil ;};func (_gaeb *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_gaeb .copy ()}};func _bd (_cf RGBA ,_ffb CMYK ,_cd _fe .Rectangle ){for _fd :=0;_fd < _cd .Max .X ;_fd ++{for _cad :=0;_cad < _cd .Max .Y ;_cad ++{_gcb :=_cf .RGBAAt (_fd ,_cad );_ffb .SetCMYK (_fd ,_cad ,_cff (_gcb ));};};};func FromGoImage (i _fe .Image )(Image ,error ){switch _fdfc :=i .(type ){case Image :return _fdfc .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_fe .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_fe .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};var (Gray2Model =_g .ModelFunc (_fcbc );Gray4Model =_g .ModelFunc (_daf );NRGBA16Model =_g .ModelFunc (_gaaa ););type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_ffae :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _ffae ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_ebbd :=width *colorComponents *bitsPerComponent ;_ecdd :=_ffae *8;_gaa :=8-(_ecdd -_ebbd );_fcg :=_ff .NewReader (data );_ceeg :=_ffae -1;_caec :=make ([]byte ,_ceeg );_bdae :=make ([]byte ,height *_ffae );_gcbf :=_ff .NewWriterMSB (_bdae );var _bege uint64 ;var _edbg error ;for _gdg :=0;_gdg < height ;_gdg ++{_ ,_edbg =_fcg .Read (_caec );if _edbg !=nil {return nil ,_edbg ;};_ ,_edbg =_gcbf .Write (_caec );if _edbg !=nil {return nil ,_edbg ;};_bege ,_edbg =_fcg .ReadBits (byte (_gaa ));if _edbg !=nil {return nil ,_edbg ;};_ ,_edbg =_gcbf .WriteBits (_bege ,_gaa );if _edbg !=nil {return nil ,_edbg ;};_gcbf .FinishByte ();};return _bdae ,nil ;};func (_bcba *NRGBA64 )setNRGBA64 (_fada int ,_dafc _g .NRGBA64 ,_abgb int ){_bcba .Data [_fada ]=uint8 (_dafc .R >>8);_bcba .Data [_fada +1]=uint8 (_dafc .R &0xff);_bcba .Data [_fada +2]=uint8 (_dafc .G >>8);_bcba .Data [_fada +3]=uint8 (_dafc .G &0xff);_bcba .Data [_fada +4]=uint8 (_dafc .B >>8);_bcba .Data [_fada +5]=uint8 (_dafc .B &0xff);if _abgb +1< len (_bcba .Alpha ){_bcba .Alpha [_abgb ]=uint8 (_dafc .A >>8);_bcba .Alpha [_abgb +1]=uint8 (_dafc .A &0xff);};};func _efc (_cbdf RGBA ,_bcc Gray ,_ada _fe .Rectangle ){for _gdde :=0;_gdde < _ada .Max .X ;_gdde ++{for _fec :=0;_fec < _ada .Max .Y ;_fec ++{_gcgf :=_cce (_cbdf .RGBAAt (_gdde ,_fec ));_bcc .SetGray (_gdde ,_fec ,_gcgf );};};};func (_db *CMYK32 )Validate ()error {if len (_db .Data )!=4*_db .Width *_db .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_aba *Gray4 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray4BPC (x ,y ,_aba .BytesPerLine ,_aba .Data ,_aba .Decode );};func (_bbfd *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_bbfd .copy ()}};func _cfbf (_cffb _fe .Image ,_ebfa Image ,_fadd _fe .Rectangle ){if _cgfc ,_cbae :=_cffb .(SMasker );_cbae &&_cgfc .HasAlpha (){_ebfa .(SMasker ).MakeAlpha ();};switch _ddcd :=_cffb .(type ){case Gray :_eefbf (_ddcd ,_ebfa .(NRGBA ),_fadd );case NRGBA :_bag (_ddcd ,_ebfa .(NRGBA ),_fadd );case *_fe .NYCbCrA :_fdcd (_ddcd ,_ebfa .(NRGBA ),_fadd );case CMYK :_adaf (_ddcd ,_ebfa .(NRGBA ),_fadd );case RGBA :_ceab (_ddcd ,_ebfa .(NRGBA ),_fadd );case nrgba64 :_fbg (_ddcd ,_ebfa .(NRGBA ),_fadd );default:_da (_cffb ,_ebfa ,_fadd );};};func (_agc *Monochrome )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_agc .Width ,Y :_agc .Height }};};func (_edg *Gray16 )Set (x ,y int ,c _g .Color ){_gbf :=(y *_edg .BytesPerLine /2+x )*2;if _gbf +1>=len (_edg .Data ){return ;};_ffcb :=_g .Gray16Model .Convert (c ).(_g .Gray16 );_edg .Data [_gbf ],_edg .Data [_gbf +1]=uint8 (_ffcb .Y >>8),uint8 (_ffcb .Y &0xff);};func _eebb (_edd *_fe .Gray )bool {for _gdbb :=0;_gdbb < len (_edd .Pix );_gdbb ++{if !_feb (_edd .Pix [_gdbb ]){return false ;};};return true ;};func (_ffg *Gray16 )GrayAt (x ,y int )_g .Gray {_egde ,_ :=_ffg .ColorAt (x ,y );return _g .Gray {Y :uint8 (_egde .(_g .Gray16 ).Y >>8)};};func (_dca *monochromeThresholdConverter )Convert (img _fe .Image )(Image ,error ){if _bfa ,_aca :=img .(*Monochrome );_aca {return _bfa .Copy (),nil ;};_gee :=img .Bounds ();_gfc ,_eegd :=NewImage (_gee .Max .X ,_gee .Max .Y ,1,1,nil ,nil ,nil );if _eegd !=nil {return nil ,_eegd ;};_gfc .(*Monochrome ).ModelThreshold =_dca .Threshold ;for _aad :=0;_aad < _gee .Max .X ;_aad ++{for _bed :=0;_bed < _gee .Max .Y ;_bed ++{_cbd :=img .At (_aad ,_bed );_gfc .Set (_aad ,_bed ,_cbd );};};return _gfc ,nil ;};func _eeba (_degbe *_fe .Gray ,_agcg uint8 )*_fe .Gray {_fba :=_degbe .Bounds ();_dccg :=_fe .NewGray (_fba );for _eegc :=0;_eegc < _fba .Dx ();_eegc ++{for _aeec :=0;_aeec < _fba .Dy ();_aeec ++{_efd :=_degbe .GrayAt (_eegc ,_aeec );_dccg .SetGray (_eegc ,_aeec ,_g .Gray {Y :_fbgb (_efd .Y ,_agcg )});};};return _dccg ;};func IsGrayImgBlackAndWhite (i *_fe .Gray )bool {return _eebb (i )};func _fbg (_edbgg nrgba64 ,_edeb NRGBA ,_bfce _fe .Rectangle ){for _gde :=0;_gde < _bfce .Max .X ;_gde ++{for _baf :=0;_baf < _bfce .Max .Y ;_baf ++{_bdf :=_edbgg .NRGBA64At (_gde ,_baf );_edeb .SetNRGBA (_gde ,_baf ,_caf (_bdf ));};};};func (_dadg *NRGBA32 )SetNRGBA (x ,y int ,c _g .NRGBA ){_dffa :=y *_dadg .Width +x ;_efbd :=3*_dffa ;if _efbd +2>=len (_dadg .Data ){return ;};_dadg .setRGBA (_dffa ,c );};type Histogramer interface{Histogram ()[256]int ;};func (_gfbde *NRGBA64 )At (x ,y int )_g .Color {_gabe ,_ :=_gfbde .ColorAt (x ,y );return _gabe };func (_abg *Gray4 )Validate ()error {if len (_abg .Data )!=_abg .Height *_abg .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _da (_dbg _fe .Image ,_aa Image ,_ggee _fe .Rectangle ){for _dba :=0;_dba < _ggee .Max .X ;_dba ++{for _dgf :=0;_dgf < _ggee .Max .Y ;_dgf ++{_eeg :=_dbg .At (_dba ,_dgf );_aa .Set (_dba ,_dgf ,_eeg );};};};func (_beba *NRGBA64 )Validate ()error {if len (_beba .Data )!=3*2*_beba .Width *_beba .Height {return _e .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};type Gray16 struct{ImageBase };func (_afbg *ImageBase )GetAlpha ()[]byte {return _afbg .Alpha };func (_gfcc *NRGBA64 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA64 (x ,y ,_gfcc .Width ,_gfcc .Data ,_gfcc .Alpha ,_gfcc .Decode );};func (_bgd *Gray2 )SetGray (x ,y int ,gray _g .Gray ){_ggg :=_edc (gray );_gfef :=y *_bgd .BytesPerLine ;_caeg :=_gfef +(x >>2);if _caeg >=len (_bgd .Data ){return ;};_dcec :=_ggg .Y >>6;_bgd .Data [_caeg ]=(_bgd .Data [_caeg ]&(^(0xc0>>uint (2*((x )&3)))))|(_dcec <<uint (6-2*(x &3)));};func (_gec *NRGBA64 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_gec .Width ,Y :_gec .Height }};};var _ NRGBA =&NRGBA16 {};func (_fdbd *Gray2 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray2BPC (x ,y ,_fdbd .BytesPerLine ,_fdbd .Data ,_fdbd .Decode );};func _adaf (_acfc CMYK ,_ded NRGBA ,_fgee _fe .Rectangle ){for _fce :=0;_fce < _fgee .Max .X ;_fce ++{for _gdae :=0;_gdae < _fgee .Max .Y ;_gdae ++{_ccd :=_acfc .CMYKAt (_fce ,_gdae );_ded .SetNRGBA (_fce ,_gdae ,_ecg (_ccd ));};};};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_gg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );};};func (_dgcc *NRGBA32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA32 (x ,y ,_dgcc .Width ,_dgcc .Data ,_dgcc .Alpha ,_dgcc .Decode );};type Image interface{_f .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_gfcd ,_eefg int )(_g .Color ,error );Validate ()error ;};func (_bbec *Monochrome )At (x ,y int )_g .Color {_cfb ,_ :=_bbec .ColorAt (x ,y );return _cfb };func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};func (_fgac *Gray8 )Bounds ()_fe .Rectangle {return _fe .Rectangle {Max :_fe .Point {X :_fgac .Width ,Y :_fgac .Height }};};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func (_bbabb *NRGBA32 )Base ()*ImageBase {return &_bbabb .ImageBase };func _beb (_cab _g .NRGBA )_g .NRGBA {_cab .R =_cab .R >>4|(_cab .R >>4)<<4;_cab .G =_cab .G >>4|(_cab .G >>4)<<4;_cab .B =_cab .B >>4|(_cab .B >>4)<<4;return _cab ;};var _ Image =&Gray16 {};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};return nil ,_gg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );};type NRGBA64 struct{ImageBase };var _ Gray =&Gray4 {};func (_bbb *CMYK32 )CMYKAt (x ,y int )_g .CMYK {_gga ,_ :=ColorAtCMYK (x ,y ,_bbb .Width ,_bbb .Data ,_bbb .Decode );return _gga ;};type colorConverter struct{_fdd func (_dc _fe .Image )(Image ,error );};func (_fgaa *Monochrome )SetGray (x ,y int ,g _g .Gray ){_ebfc :=y *_fgaa .BytesPerLine +x >>3;if _ebfc > len (_fgaa .Data )-1{return ;};g =_afc (g ,monochromeModel (_fgaa .ModelThreshold ));_fgaa .setGray (x ,g ,_ebfc );};func (_bea *Gray4 )Base ()*ImageBase {return &_bea .ImageBase };func _eeb (_dfba _fe .Image )(Image ,error ){if _acd ,_eefa :=_dfba .(*NRGBA32 );_eefa {return _acd .Copy (),nil ;};_gaba ,_ffaf ,_ffdd :=_fgbd (_dfba ,1);_gfca ,_fff :=NewImage (_gaba .Max .X ,_gaba .Max .Y ,8,3,nil ,_ffdd ,nil );if _fff !=nil {return nil ,_fff ;};_cfbf (_dfba ,_gfca ,_gaba );if len (_ffdd )!=0&&!_ffaf {if _dcc :=_bbabbd (_ffdd ,_gfca );_dcc !=nil {return nil ,_dcc ;};};return _gfca ,nil ;};type NRGBA16 struct{ImageBase };func (_ga *Monochrome )Validate ()error {if len (_ga .Data )!=_ga .Height *_ga .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _fgb (){for _edb :=0;_edb < 256;_edb ++{_gacg [_edb ]=uint8 (_edb &0x1)+(uint8 (_edb >>1)&0x1)+(uint8 (_edb >>2)&0x1)+(uint8 (_edb >>3)&0x1)+(uint8 (_edb >>4)&0x1)+(uint8 (_edb >>5)&0x1)+(uint8 (_edb >>6)&0x1)+(uint8 (_edb >>7)&0x1);};};func (_ebbe *NRGBA16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA16 (x ,y ,_ebbe .Width ,_ebbe .BytesPerLine ,_ebbe .Data ,_ebbe .Alpha ,_ebbe .Decode );};func (_cbfg *Gray4 )GrayAt (x ,y int )_g .Gray {_ccgf ,_ :=ColorAtGray4BPC (x ,y ,_cbfg .BytesPerLine ,_cbfg .Data ,_cbfg .Decode );return _ccgf ;};func _fad (_eda _fe .Image )(Image ,error ){if _cgcb ,_fda :=_eda .(*Gray4 );_fda {return _cgcb .Copy (),nil ;};_ddg :=_eda .Bounds ();_ffa ,_beg :=NewImage (_ddg .Max .X ,_ddg .Max .Y ,4,1,nil ,nil ,nil );if _beg !=nil {return nil ,_beg ;};_cgge (_eda ,_ffa ,_ddg );return _ffa ,nil ;};func (_fca *NRGBA64 )ColorModel ()_g .Model {return _g .NRGBA64Model };type nrgba64 interface{NRGBA64At (_agcf ,_dbb int )_g .NRGBA64 ;SetNRGBA64 (_gcaa ,_ceg int ,_efe _g .NRGBA64 );};func _cfc (_fb _g .Gray )_g .NRGBA {return _g .NRGBA {R :_fb .Y ,G :_fb .Y ,B :_fb .Y ,A :0xff}};func (_bc *CMYK32 )Base ()*ImageBase {return &_bc .ImageBase };func (_bcbd *Gray8 )Set (x ,y int ,c _g .Color ){_fddd :=y *_bcbd .BytesPerLine +x ;if _fddd > len (_bcbd .Data )-1{return ;};_begg :=_g .GrayModel .Convert (c );_bcbd .Data [_fddd ]=_begg .(_g .Gray ).Y ;};type Gray2 struct{ImageBase };func (_eccb *Gray16 )ColorModel ()_g .Model {return _g .Gray16Model };var _ _fe .Image =&Monochrome {};func (_fdg *Monochrome )Histogram ()(_ccge [256]int ){for _ ,_eaa :=range _fdg .Data {_ccge [0xff]+=int (_gacg [_fdg .Data [_eaa ]]);};return _ccge ;};