//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_a "errors";_ae "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_cf "image";_g "image/color";_c "image/draw";_b "math";);type NRGBA64 struct{ImageBase };func (_egd *NRGBA64 )SetNRGBA64 (x ,y int ,c _g .NRGBA64 ){_affb :=(y *_egd .Width +x )*2;_gce :=_affb *3;if _gce +5>=len (_egd .Data ){return ;};_egd .setNRGBA64 (_gce ,c ,_affb );};func _fcdb (_cdgg _cf .Image )(Image ,error ){if _dceb ,_cgfb :=_cdgg .(*NRGBA32 );_cgfb {return _dceb .Copy (),nil ;};_aacc ,_fbaa ,_bcfg :=_gbdbc (_cdgg ,1);_bfbf ,_fdbb :=NewImage (_aacc .Max .X ,_aacc .Max .Y ,8,3,nil ,_bcfg ,nil );if _fdbb !=nil {return nil ,_fdbb ;};_agge (_cdgg ,_bfbf ,_aacc );if len (_bcfg )!=0&&!_fbaa {if _geg :=_gafg (_bcfg ,_bfbf );_geg !=nil {return nil ,_geg ;};};return _bfbf ,nil ;};func _ca (_gcc _g .NRGBA )_g .Gray {_bad ,_fac ,_fbe ,_ :=_gcc .RGBA ();_cgc :=(19595*_bad +38470*_fac +7471*_fbe +1<<15)>>24;return _g .Gray {Y :uint8 (_cgc )};};func _eafg (_fefd int ,_bggg int )error {return _ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_fefd ,_bggg );};func _aaba (_dbd _g .Color )_g .Color {_fdff :=_g .NRGBAModel .Convert (_dbd ).(_g .NRGBA );return _dcd (_fdff );};func _gebb (_gegb ,_cgdf NRGBA ,_acaa _cf .Rectangle ){for _gagf :=0;_gagf < _acaa .Max .X ;_gagf ++{for _agag :=0;_agag < _acaa .Max .Y ;_agag ++{_cgdf .SetNRGBA (_gagf ,_agag ,_gegb .NRGBAAt (_gagf ,_agag ));};};};func (_gfd *Gray8 )Histogram ()(_eege [256]int ){for _cef :=0;_cef < len (_gfd .Data );_cef ++{_eege [_gfd .Data [_cef ]]++;};return _eege ;};func (_gccd *Gray8 )Base ()*ImageBase {return &_gccd .ImageBase };func (_ccb *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_ccb .copy ()}};func (_eebg *Gray8 )SetGray (x ,y int ,g _g .Gray ){_egf :=y *_eebg .BytesPerLine +x ;if _egf > len (_eebg .Data )-1{return ;};_eebg .Data [_egf ]=g .Y ;};func _caf (_da _g .CMYK )_g .Gray {_bgd ,_ega ,_efa :=_g .CMYKToRGB (_da .C ,_da .M ,_da .Y ,_da .K );_gccb :=(19595*uint32 (_bgd )+38470*uint32 (_ega )+7471*uint32 (_efa )+1<<7)>>16;return _g .Gray {Y :uint8 (_gccb )};};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;};case 4:return CMYKConverter ,nil ;};return nil ,_ae .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};type colorConverter struct{_ced func (_ebea _cf .Image )(Image ,error );};type RGBA interface{RGBAAt (_edg ,_bccg int )_g .RGBA ;SetRGBA (_fdfd ,_agfd int ,_bedfd _g .RGBA );};var _bfca [256]uint8 ;func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_dfdb :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};if data ==nil {_dfdb .Data =make ([]byte ,height *_dfdb .BytesPerLine );};return _dfdb ;};func (_fdde *Gray8 )Validate ()error {if len (_fdde .Data )!=_fdde .Height *_fdde .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _cfa (_eff _g .CMYK )_g .NRGBA {_fab ,_fca ,_dcc :=_g .CMYKToRGB (_eff .C ,_eff .M ,_eff .Y ,_eff .K );return _g .NRGBA {R :_fab ,G :_fca ,B :_dcc ,A :0xff};};var _ _cf .Image =&Monochrome {};var _ Image =&Gray4 {};func _gcca (_bacc nrgba64 ,_gecg NRGBA ,_fded _cf .Rectangle ){for _bbdc :=0;_bbdc < _fded .Max .X ;_bbdc ++{for _ebbg :=0;_ebbg < _fded .Max .Y ;_ebbg ++{_affc :=_bacc .NRGBA64At (_bbdc ,_ebbg );_gecg .SetNRGBA (_bbdc ,_ebbg ,_ead (_affc ));};};};func (_bcd *Monochrome )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_bcd .Width ,Y :_bcd .Height }};};func _fgbg (){for _beb :=0;_beb < 256;_beb ++{_bfca [_beb ]=uint8 (_beb &0x1)+(uint8 (_beb >>1)&0x1)+(uint8 (_beb >>2)&0x1)+(uint8 (_beb >>3)&0x1)+(uint8 (_beb >>4)&0x1)+(uint8 (_beb >>5)&0x1)+(uint8 (_beb >>6)&0x1)+(uint8 (_beb >>7)&0x1);};};func (_dfda *ImageBase )HasAlpha ()bool {if _dfda .Alpha ==nil {return false ;};for _bbda :=range _dfda .Alpha {if _dfda .Alpha [_bbda ]!=0xff{return true ;};};return false ;};func (_ccfd *Gray2 )Set (x ,y int ,c _g .Color ){if x >=_ccfd .Width ||y >=_ccfd .Height {return ;};_fba :=Gray2Model .Convert (c ).(_g .Gray );_dac :=y *_ccfd .BytesPerLine ;_daf :=_dac +(x >>2);_gdg :=_fba .Y >>6;_ccfd .Data [_daf ]=(_ccfd .Data [_daf ]&(^(0xc0>>uint (2*((x )&3)))))|(_gdg <<uint (6-2*(x &3)));};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_ae .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};func (_baba *Monochrome )Base ()*ImageBase {return &_baba .ImageBase };func (_bedc *Gray4 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray4BPC (x ,y ,_bedc .BytesPerLine ,_bedc .Data ,_bedc .Decode );};func _gbdc (_efff *_cf .Gray ,_ccfg uint8 )*_cf .Gray {_agdb :=_efff .Bounds ();_begg :=_cf .NewGray (_agdb );for _dgfgg :=0;_dgfgg < _agdb .Dx ();_dgfgg ++{for _dbag :=0;_dbag < _agdb .Dy ();_dbag ++{_acag :=_efff .GrayAt (_dgfgg ,_dbag );_begg .SetGray (_dgfgg ,_dbag ,_g .Gray {Y :_dggc (_acag .Y ,_ccfg )});};};return _begg ;};var _ Gray =&Gray16 {};type CMYK interface{CMYKAt (_eb ,_f int )_g .CMYK ;SetCMYK (_cg ,_ff int ,_ba _g .CMYK );};func (_dag *NRGBA64 )Validate ()error {if len (_dag .Data )!=3*2*_dag .Width *_dag .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_aac *Gray16 )GrayAt (x ,y int )_g .Gray {_faff ,_ :=_aac .ColorAt (x ,y );return _g .Gray {Y :uint8 (_faff .(_g .Gray16 ).Y >>8)};};func (_dgf *Gray2 )SetGray (x ,y int ,gray _g .Gray ){_ddce :=_fged (gray );_aab :=y *_dgf .BytesPerLine ;_fgeg :=_aab +(x >>2);if _fgeg >=len (_dgf .Data ){return ;};_eeg :=_ddce .Y >>6;_dgf .Data [_fgeg ]=(_dgf .Data [_fgeg ]&(^(0xc0>>uint (2*((x )&3)))))|(_eeg <<uint (6-2*(x &3)));};func _adf (_adb _g .RGBA )_g .CMYK {_afg ,_caa ,_eaba ,_gfg :=_g .RGBToCMYK (_adb .R ,_adb .G ,_adb .B );return _g .CMYK {C :_afg ,M :_caa ,Y :_eaba ,K :_gfg };};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_efg *Gray4 )Base ()*ImageBase {return &_efg .ImageBase };func (_ecgb *Gray4 )At (x ,y int )_g .Color {_cegd ,_ :=_ecgb .ColorAt (x ,y );return _cegd };func _cbg (_bg ,_efc CMYK ,_ac _cf .Rectangle ){for _fb :=0;_fb < _ac .Max .X ;_fb ++{for _gd :=0;_gd < _ac .Max .Y ;_gd ++{_efc .SetCMYK (_fb ,_gd ,_bg .CMYKAt (_fb ,_gd ));};};};func init (){_fgbg ()};func _eacg (_cgda *_cf .Gray16 ,_fgec uint8 )*_cf .Gray {_gfdd :=_cgda .Bounds ();_gbac :=_cf .NewGray (_gfdd );for _ebag :=0;_ebag < _gfdd .Dx ();_ebag ++{for _feba :=0;_feba < _gfdd .Dy ();_feba ++{_bafd :=_cgda .Gray16At (_ebag ,_feba );_gbac .SetGray (_ebag ,_feba ,_g .Gray {Y :_dggc (uint8 (_bafd .Y /256),_fgec )});};};return _gbac ;};func _gbdbc (_gccc _cf .Image ,_bba int )(_cf .Rectangle ,bool ,[]byte ){_fbd :=_gccc .Bounds ();var (_bcec bool ;_adcgg []byte ;);switch _ecc :=_gccc .(type ){case SMasker :_bcec =_ecc .HasAlpha ();case NRGBA ,RGBA ,*_cf .RGBA64 ,nrgba64 ,*_cf .NYCbCrA :_adcgg =make ([]byte ,_fbd .Max .X *_fbd .Max .Y *_bba );};return _fbd ,_bcec ,_adcgg ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_aff :=y *bytesPerLine +x >>2;if _aff >=len (data ){return _g .Gray {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_fcc :=data [_aff ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_fcc =uint8 (uint32 (LinearInterpolate (float64 (_fcc ),0,3.0,decode [0],decode [1]))&3);};return _g .Gray {Y :_fcc *85},nil ;};func (_ddbd *Gray16 )Validate ()error {if len (_ddbd .Data )!=_ddbd .Height *_ddbd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_dbe :=y *bytesPerLine +x >>3;if _dbe >=len (data ){return _g .Gray {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_egab :=data [_dbe ]>>uint (7-(x &7))&1;if len (decode )==2{_egab =uint8 (LinearInterpolate (float64 (_egab ),0.0,1.0,decode [0],decode [1]))&1;};return _g .Gray {Y :_egab *255},nil ;};func (_ee *CMYK32 )Validate ()error {if len (_ee .Data )!=4*_ee .Width *_ee .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};var _ Gray =&Gray8 {};type Gray8 struct{ImageBase };func (_dfd *Gray4 )Set (x ,y int ,c _g .Color ){if x >=_dfd .Width ||y >=_dfd .Height {return ;};_fdd :=Gray4Model .Convert (c ).(_g .Gray );_dfd .setGray (x ,y ,_fdd );};func _fce (_gbec _cf .Image )(Image ,error ){if _ggba ,_bfbe :=_gbec .(*NRGBA16 );_bfbe {return _ggba .Copy (),nil ;};_afa :=_gbec .Bounds ();_ggd ,_bbgb :=NewImage (_afa .Max .X ,_afa .Max .Y ,4,3,nil ,nil ,nil );if _bbgb !=nil {return nil ,_bbgb ;};_agge (_gbec ,_ggd ,_afa );return _ggd ,nil ;};type Gray2 struct{ImageBase };func _cgee (_cfgg Gray ,_ege NRGBA ,_baea _cf .Rectangle ){for _ebcg :=0;_ebcg < _baea .Max .X ;_ebcg ++{for _bace :=0;_bace < _baea .Max .Y ;_bace ++{_ebab :=_cfgg .GrayAt (_ebcg ,_bace );_ege .SetNRGBA (_ebcg ,_bace ,_bbf (_ebab ));};};};func (_gdca *NRGBA64 )NRGBA64At (x ,y int )_g .NRGBA64 {_dfc ,_ :=ColorAtNRGBA64 (x ,y ,_gdca .Width ,_gdca .Data ,_gdca .Alpha ,_gdca .Decode );return _dfc ;};type Gray16 struct{ImageBase };var _ Image =&Gray8 {};func _fbf (_edc _g .Gray )_g .Gray {_edc .Y >>=4;_edc .Y |=_edc .Y <<4;return _edc };func (_ebe *CMYK32 )CMYKAt (x ,y int )_g .CMYK {_cd ,_ :=ColorAtCMYK (x ,y ,_ebe .Width ,_ebe .Data ,_ebe .Decode );return _cd ;};func (_cbc *NRGBA32 )SetNRGBA (x ,y int ,c _g .NRGBA ){_bbbbe :=y *_cbc .Width +x ;_fafe :=3*_bbbbe ;if _fafe +2>=len (_cbc .Data ){return ;};_cbc .setRGBA (_bbbbe ,c );};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_bdf :=y *bytesPerLine +x *3/2;if _bdf +1>=len (data ){return _g .NRGBA {},_eafg (x ,y );};const (_ebbb =0xf;_eagbb =uint8 (0xff););_bfb :=_eagbb ;if alpha !=nil {_dgc :=y *BytesPerLine (width ,4,1);if _dgc < len (alpha ){if x %2==0{_bfb =(alpha [_dgc ]>>uint (4))&_ebbb ;}else {_bfb =alpha [_dgc ]&_ebbb ;};_bfb |=_bfb <<4;};};var _cde ,_bfe ,_efce uint8 ;if x *3%2==0{_cde =(data [_bdf ]>>uint (4))&_ebbb ;_bfe =data [_bdf ]&_ebbb ;_efce =(data [_bdf +1]>>uint (4))&_ebbb ;}else {_cde =data [_bdf ]&_ebbb ;_bfe =(data [_bdf +1]>>uint (4))&_ebbb ;_efce =data [_bdf +1]&_ebbb ;};if len (decode )==6{_cde =uint8 (uint32 (LinearInterpolate (float64 (_cde ),0,15,decode [0],decode [1]))&0xf);_bfe =uint8 (uint32 (LinearInterpolate (float64 (_bfe ),0,15,decode [2],decode [3]))&0xf);_efce =uint8 (uint32 (LinearInterpolate (float64 (_efce ),0,15,decode [4],decode [5]))&0xf);};return _g .NRGBA {R :(_cde <<4)|(_cde &0xf),G :(_bfe <<4)|(_bfe &0xf),B :(_efce <<4)|(_efce &0xf),A :_bfb },nil ;};func _cac (_daga RGBA ,_ecb NRGBA ,_dcdd _cf .Rectangle ){for _edga :=0;_edga < _dcdd .Max .X ;_edga ++{for _feaf :=0;_feaf < _dcdd .Max .Y ;_feaf ++{_aabg :=_daga .RGBAAt (_edga ,_feaf );_ecb .SetNRGBA (_edga ,_feaf ,_cag (_aabg ));};};};func (_ecag *NRGBA64 )Set (x ,y int ,c _g .Color ){_gafc :=(y *_ecag .Width +x )*2;_abc :=_gafc *3;if _abc +5>=len (_ecag .Data ){return ;};_edbf :=_g .NRGBA64Model .Convert (c ).(_g .NRGBA64 );_ecag .setNRGBA64 (_abc ,_edbf ,_gafc );};func _bgf (_beg _cf .Image )(Image ,error ){if _caff ,_acc :=_beg .(*Monochrome );_acc {return _caff ,nil ;};_cda ,_bbe :=_beg .(Gray );if !_bbe {_agb ,_bbb :=GrayConverter .Convert (_beg );if _bbb !=nil {return nil ,_bbb ;};_cda =_agb .(Gray );};_aed :=_beg .Bounds ();_aa ,_abb :=NewImage (_aed .Max .X ,_aed .Max .Y ,1,1,nil ,nil ,nil );if _abb !=nil {return nil ,_abb ;};_faf :=_aa .(*Monochrome );_ddd :=AutoThresholdTriangle (GrayHistogram (_cda ));for _dbfc :=0;_dbfc < _aed .Max .X ;_dbfc ++{for _cbe :=0;_cbe < _aed .Max .Y ;_cbe ++{_eaga :=_ecae (_cda .GrayAt (_dbfc ,_cbe ),monochromeModel (_ddd ));_faf .SetGray (_dbfc ,_cbe ,_eaga );};};return _aa ,nil ;};type monochromeModel uint8 ;func (_gga *NRGBA32 )Base ()*ImageBase {return &_gga .ImageBase };type Histogramer interface{Histogram ()[256]int ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_g .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_ae .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );};};func _ece (_fed _cf .Image )(Image ,error ){if _aage ,_ddda :=_fed .(*Gray2 );_ddda {return _aage .Copy (),nil ;};_eadb :=_fed .Bounds ();_gdd ,_gfab :=NewImage (_eadb .Max .X ,_eadb .Max .Y ,2,1,nil ,nil ,nil );if _gfab !=nil {return nil ,_gfab ;};_ccge (_fed ,_gdd ,_eadb );return _gdd ,nil ;};var _ _cf .Image =&NRGBA16 {};func (_gee *Monochrome )SetGray (x ,y int ,g _g .Gray ){_afgd :=y *_gee .BytesPerLine +x >>3;if _afgd > len (_gee .Data )-1{return ;};g =_ecae (g ,monochromeModel (_gee .ModelThreshold ));_gee .setGray (x ,g ,_afgd );};func (_bbea *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_bbea .copy ()}};func (_bbd *Gray4 )setGray (_bd int ,_bae int ,_dce _g .Gray ){_fabc :=_bae *_bbd .BytesPerLine ;_cgfg :=_fabc +(_bd >>1);if _cgfg >=len (_bbd .Data ){return ;};_cdg :=_dce .Y >>4;_bbd .Data [_cgfg ]=(_bbd .Data [_cgfg ]&(^(0xf0>>uint (4*(_bd &1)))))|(_cdg <<uint (4-4*(_bd &1)));};func (_adcg *Gray2 )ColorModel ()_g .Model {return Gray2Model };func _ecae (_dbcd _g .Gray ,_dab monochromeModel )_g .Gray {if _dbcd .Y > uint8 (_dab ){return _g .Gray {Y :_b .MaxUint8 };};return _g .Gray {};};func (_eeab *Monochrome )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray1BPC (x ,y ,_eeab .BytesPerLine ,_eeab .Data ,_eeab .Decode );};func _ead (_eca _g .NRGBA64 )_g .NRGBA {return _g .NRGBA {R :uint8 (_eca .R >>8),G :uint8 (_eca .G >>8),B :uint8 (_eca .B >>8),A :uint8 (_eca .A >>8)};};func _ab (_fa RGBA ,_cee CMYK ,_gfe _cf .Rectangle ){for _fgb :=0;_fgb < _gfe .Max .X ;_fgb ++{for _cc :=0;_cc < _gfe .Max .Y ;_cc ++{_eag :=_fa .RGBAAt (_fgb ,_cc );_cee .SetCMYK (_fgb ,_cc ,_adf (_eag ));};};};func _fged (_fdeb _g .Gray )_g .Gray {_aag :=_fdeb .Y >>6;_aag |=_aag <<2;_fdeb .Y =_aag |_aag <<4;return _fdeb ;};func (_ffe *NRGBA32 )Set (x ,y int ,c _g .Color ){_aga :=y *_ffe .Width +x ;_bfg :=3*_aga ;if _bfg +2>=len (_ffe .Data ){return ;};_eede :=_g .NRGBAModel .Convert (c ).(_g .NRGBA );_ffe .setRGBA (_aga ,_eede );};func (_ebd *Gray8 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray8BPC (x ,y ,_ebd .BytesPerLine ,_ebd .Data ,_ebd .Decode );};type CMYK32 struct{ImageBase };func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA64 ,error ){_cdbb :=(y *width +x )*2;_efb :=_cdbb *3;if _efb +5>=len (data ){return _g .NRGBA64 {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};const _cdga =0xffff;_efef :=uint16 (_cdga );if alpha !=nil &&len (alpha )> _cdbb +1{_efef =uint16 (alpha [_cdbb ])<<8|uint16 (alpha [_cdbb +1]);};_fdc :=uint16 (data [_efb ])<<8|uint16 (data [_efb +1]);_fgfd :=uint16 (data [_efb +2])<<8|uint16 (data [_efb +3]);_eae :=uint16 (data [_efb +4])<<8|uint16 (data [_efb +5]);if len (decode )==6{_fdc =uint16 (uint64 (LinearInterpolate (float64 (_fdc ),0,65535,decode [0],decode [1]))&_cdga );_fgfd =uint16 (uint64 (LinearInterpolate (float64 (_fgfd ),0,65535,decode [2],decode [3]))&_cdga );_eae =uint16 (uint64 (LinearInterpolate (float64 (_eae ),0,65535,decode [4],decode [5]))&_cdga );};return _g .NRGBA64 {R :_fdc ,G :_fgfd ,B :_eae ,A :_efef },nil ;};func (_af *CMYK32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtCMYK (x ,y ,_af .Width ,_af .Data ,_af .Decode );};type Image interface{_c .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_cge ,_cagb int )(_g .Color ,error );Validate ()error ;};func _dbcb (_cba _g .Gray )_g .CMYK {return _g .CMYK {K :0xff-_cba .Y }};func (_befd *Monochrome )Set (x ,y int ,c _g .Color ){_fad :=y *_befd .BytesPerLine +x >>3;if _fad > len (_befd .Data )-1{return ;};_ddc :=_befd .ColorModel ().Convert (c ).(_g .Gray );_befd .setGray (x ,_ddc ,_fad );};func (_dddd *Gray2 )Validate ()error {if len (_dddd .Data )!=_dddd .Height *_dddd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _aaaee (_eaed CMYK ,_beff NRGBA ,_ffcg _cf .Rectangle ){for _cdbe :=0;_cdbe < _ffcg .Max .X ;_cdbe ++{for _fbed :=0;_fbed < _ffcg .Max .Y ;_fbed ++{_gdace :=_eaed .CMYKAt (_cdbe ,_fbed );_beff .SetNRGBA (_cdbe ,_fbed ,_cfa (_gdace ));};};};func _bce (_fcf _cf .Image )(Image ,error ){if _bdd ,_gbe :=_fcf .(*Gray4 );_gbe {return _bdd .Copy (),nil ;};_afgc :=_fcf .Bounds ();_ceeg ,_aaa :=NewImage (_afgc .Max .X ,_afgc .Max .Y ,4,1,nil ,nil ,nil );if _aaa !=nil {return nil ,_aaa ;};_ccge (_fcf ,_ceeg ,_afgc );return _ceeg ,nil ;};func (_degd *Gray16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray16BPC (x ,y ,_degd .BytesPerLine ,_degd .Data ,_degd .Decode );};func (_afcfd *NRGBA16 )Set (x ,y int ,c _g .Color ){_bbde :=y *_afcfd .BytesPerLine +x *3/2;if _bbde +1>=len (_afcfd .Data ){return ;};_dada :=NRGBA16Model .Convert (c ).(_g .NRGBA );_afcfd .setNRGBA (x ,y ,_bbde ,_dada );};func (_aafd *ImageBase )Pix ()[]byte {return _aafd .Data };func (_cgb *Gray16 )SetGray (x ,y int ,g _g .Gray ){_bbed :=(y *_cgb .BytesPerLine /2+x )*2;if _bbed +1>=len (_cgb .Data ){return ;};_cgb .Data [_bbed ]=g .Y ;_cgb .Data [_bbed +1]=g .Y ;};func (_bbg *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_bbg .copy ()}};func (_ggfe *Monochrome )Histogram ()(_gab [256]int ){for _ ,_dg :=range _ggfe .Data {_gab [0xff]+=int (_bfca [_ggfe .Data [_dg ]]);};return _gab ;};type NRGBA16 struct{ImageBase };func (_bcc *monochromeThresholdConverter )Convert (img _cf .Image )(Image ,error ){if _cafc ,_cdff :=img .(*Monochrome );_cdff {return _cafc .Copy (),nil ;};_dca :=img .Bounds ();_efe ,_fec :=NewImage (_dca .Max .X ,_dca .Max .Y ,1,1,nil ,nil ,nil );if _fec !=nil {return nil ,_fec ;};_efe .(*Monochrome ).ModelThreshold =_bcc .Threshold ;for _fge :=0;_fge < _dca .Max .X ;_fge ++{for _abbb :=0;_abbb < _dca .Max .Y ;_abbb ++{_dbg :=img .At (_fge ,_abbb );_efe .Set (_fge ,_abbb ,_dbg );};};return _efe ,nil ;};func (_cdb *NRGBA16 )ColorModel ()_g .Model {return NRGBA16Model };func (_ceba *Gray16 )Histogram ()(_eeac [256]int ){for _edfa :=0;_edfa < _ceba .Width ;_edfa ++{for _ggb :=0;_ggb < _ceba .Height ;_ggb ++{_eeac [_ceba .GrayAt (_edfa ,_ggb ).Y ]++;};};return _eeac ;};func (_ecdb *Gray8 )GrayAt (x ,y int )_g .Gray {_ebg ,_ :=ColorAtGray8BPC (x ,y ,_ecdb .BytesPerLine ,_ecdb .Data ,_ecdb .Decode );return _ebg ;};func (_cfb *Gray4 )GrayAt (x ,y int )_g .Gray {_dfg ,_ :=ColorAtGray4BPC (x ,y ,_cfb .BytesPerLine ,_cfb .Data ,_cfb .Decode );return _dfg ;};type Gray4 struct{ImageBase };type nrgba64 interface{NRGBA64At (_fadf ,_gca int )_g .NRGBA64 ;SetNRGBA64 (_edgc ,_fdaf int ,_eabe _g .NRGBA64 );};func _dggc (_fgbfg ,_fgfc uint8 )uint8 {if _fgbfg < _fgfc {return 255;};return 0;};func (_edbe *Gray16 )At (x ,y int )_g .Color {_def ,_ :=_edbe .ColorAt (x ,y );return _def };func _bcff (_dga *_cf .Gray )bool {for _ade :=0;_ade < len (_dga .Pix );_ade ++{if !_dgaa (_dga .Pix [_ade ]){return false ;};};return true ;};type NRGBA interface{NRGBAAt (_fefe ,_dadb int )_g .NRGBA ;SetNRGBA (_gace ,_dbce int ,_baad _g .NRGBA );};func (_eec *NRGBA16 )Validate ()error {if len (_eec .Data )!=3*_eec .Width *_eec .Height /2{return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_ce *CMYK32 )Base ()*ImageBase {return &_ce .ImageBase };func _eef (_dgcd *_cf .NYCbCrA ,_ace NRGBA ,_aaee _cf .Rectangle ){for _ebabg :=0;_ebabg < _aaee .Max .X ;_ebabg ++{for _afbd :=0;_afbd < _aaee .Max .Y ;_afbd ++{_abda :=_dgcd .NYCbCrAAt (_ebabg ,_afbd );_ace .SetNRGBA (_ebabg ,_afbd ,_ebb (_abda ));};};};var _ _cf .Image =&Gray16 {};func (_fcd *Monochrome )ColorModel ()_g .Model {return MonochromeModel (_fcd .ModelThreshold )};func (_gbc *Gray16 )ColorModel ()_g .Model {return _g .Gray16Model };func (_ccf *Monochrome )GrayAt (x ,y int )_g .Gray {_gag ,_ :=ColorAtGray1BPC (x ,y ,_ccf .BytesPerLine ,_ccf .Data ,_ccf .Decode );return _gag ;};func MonochromeModel (threshold uint8 )_g .Model {return monochromeModel (threshold )};func (_gdab *Gray4 )ColorModel ()_g .Model {return Gray4Model };var _ Gray =&Gray2 {};func (_aecg *ImageBase )copy ()ImageBase {_gbaa :=*_aecg ;_gbaa .Data =make ([]byte ,len (_aecg .Data ));copy (_gbaa .Data ,_aecg .Data );return _gbaa ;};func ConverterFunc (converterFunc func (_fee _cf .Image )(Image ,error ))ColorConverter {return colorConverter {_ced :converterFunc };};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray16 ,error ){_edd :=(y *bytesPerLine /2+x )*2;if _edd +1>=len (data ){return _g .Gray16 {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_dgb :=uint16 (data [_edd ])<<8|uint16 (data [_edd +1]);if len (decode )==2{_dgb =uint16 (uint64 (LinearInterpolate (float64 (_dgb ),0,65535,decode [0],decode [1])));};return _g .Gray16 {Y :_dgb },nil ;};func (_agf *CMYK32 )ColorModel ()_g .Model {return _g .CMYKModel };func (_bbfd *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_bbfd .ImageBase .copy (),ModelThreshold :_bbfd .ModelThreshold };};func (_cfg *NRGBA64 )At (x ,y int )_g .Color {_fbga ,_ :=_cfg .ColorAt (x ,y );return _fbga };func (_fgf monochromeModel )Convert (c _g .Color )_g .Color {_cdce :=_g .GrayModel .Convert (c ).(_g .Gray );return _ecae (_cdce ,_fgf );};func (_bacd *Gray16 )Base ()*ImageBase {return &_bacd .ImageBase };func (_ffeg *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_ffeg .copy ()}};var ErrInvalidImage =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");func _agge (_cfba _cf .Image ,_dgbd Image ,_egcc _cf .Rectangle ){if _bga ,_gccde :=_cfba .(SMasker );_gccde &&_bga .HasAlpha (){_dgbd .(SMasker ).MakeAlpha ();};switch _eddc :=_cfba .(type ){case Gray :_cgee (_eddc ,_dgbd .(NRGBA ),_egcc );case NRGBA :_gebb (_eddc ,_dgbd .(NRGBA ),_egcc );case *_cf .NYCbCrA :_eef (_eddc ,_dgbd .(NRGBA ),_egcc );case CMYK :_aaaee (_eddc ,_dgbd .(NRGBA ),_egcc );case RGBA :_cac (_eddc ,_dgbd .(NRGBA ),_egcc );case nrgba64 :_gcca (_eddc ,_dgbd .(NRGBA ),_egcc );default:_bb (_cfba ,_dgbd ,_egcc );};};func _ccge (_aca _cf .Image ,_bgee Image ,_eaf _cf .Rectangle ){switch _aec :=_aca .(type ){case Gray :_cdac (_aec ,_bgee .(Gray ),_eaf );case NRGBA :_gac (_aec ,_bgee .(Gray ),_eaf );case CMYK :_fda (_aec ,_bgee .(Gray ),_eaf );case RGBA :_efd (_aec ,_bgee .(Gray ),_eaf );default:_bb (_aca ,_bgee .(Image ),_eaf );};};func (_abdc *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_abdc .copy ()}};func (_cea *Gray8 )At (x ,y int )_g .Color {_daa ,_ :=_cea .ColorAt (x ,y );return _daa };func (_dcg *Gray2 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtGray2BPC (x ,y ,_dcg .BytesPerLine ,_dcg .Data ,_dcg .Decode );};func (_gedfe *NRGBA32 )At (x ,y int )_g .Color {_cdeg ,_ :=_gedfe .ColorAt (x ,y );return _cdeg };func (_cdd *Monochrome )setGray (_eagb int ,_cgf _g .Gray ,_dbbb int ){if _cgf .Y ==0{_cdd .clearBit (_dbbb ,_eagb );}else {_cdd .setBit (_dbbb ,_eagb );};};func (_fdb *NRGBA16 )setNRGBA (_dgbe ,_fabf ,_accg int ,_eeea _g .NRGBA ){if _dgbe *3%2==0{_fdb .Data [_accg ]=(_eeea .R >>4)<<4|(_eeea .G >>4);_fdb .Data [_accg +1]=(_eeea .B >>4)<<4|(_fdb .Data [_accg +1]&0xf);}else {_fdb .Data [_accg ]=(_fdb .Data [_accg ]&0xf0)|(_eeea .R >>4);_fdb .Data [_accg +1]=(_eeea .G >>4)<<4|(_eeea .B >>4);};if _fdb .Alpha !=nil {_babd :=_fabf *BytesPerLine (_fdb .Width ,4,1);if _babd < len (_fdb .Alpha ){if _dgbe %2==0{_fdb .Alpha [_babd ]=(_eeea .A >>uint (4))<<uint (4)|(_fdb .Alpha [_accg ]&0xf);}else {_fdb .Alpha [_babd ]=(_fdb .Alpha [_babd ]&0xf0)|(_eeea .A >>uint (4));};};};};var _ Image =&NRGBA64 {};func IsGrayImgBlackAndWhite (i *_cf .Gray )bool {return _bcff (i )};var _ Image =&Gray16 {};func _fecg (_ecgg _g .Color )_g .Color {_geab :=_g .GrayModel .Convert (_ecgg ).(_g .Gray );return _fbf (_geab );};func (_baa *Gray2 )Histogram ()(_ffb [256]int ){for _dfa :=0;_dfa < _baa .Width ;_dfa ++{for _ddf :=0;_ddf < _baa .Height ;_ddf ++{_ffb [_baa .GrayAt (_dfa ,_ddf ).Y ]++;};};return _ffb ;};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_gdc :=y *bytesPerLine +x >>1;if _gdc >=len (data ){return _g .Gray {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_cege :=data [_gdc ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_cege =uint8 (uint32 (LinearInterpolate (float64 (_cege ),0,15,decode [0],decode [1]))&0xf);};return _g .Gray {Y :_cege *17&0xff},nil ;};func (_ffag *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_ffag .copy ()}};func _bb (_eea _cf .Image ,_afc Image ,_de _cf .Rectangle ){for _ceg :=0;_ceg < _de .Max .X ;_ceg ++{for _add :=0;_add < _de .Max .Y ;_add ++{_abg :=_eea .At (_ceg ,_add );_afc .Set (_ceg ,_add ,_abg );};};};func GrayHistogram (g Gray )(_cabg [256]int ){switch _ddfb :=g .(type ){case Histogramer :return _ddfb .Histogram ();case _cf .Image :_cfgf :=_ddfb .Bounds ();for _eafb :=0;_eafb < _cfgf .Max .X ;_eafb ++{for _afdg :=0;_afdg < _cfgf .Max .Y ;_afdg ++{_cabg [g .GrayAt (_eafb ,_afdg ).Y ]++;};};return _cabg ;default:return [256]int {};};};func (_deg *Gray2 )Base ()*ImageBase {return &_deg .ImageBase };func (_ffc *Gray4 )Histogram ()(_gba [256]int ){for _bbfe :=0;_bbfe < _ffc .Width ;_bbfe ++{for _edb :=0;_edb < _ffc .Height ;_edb ++{_gba [_ffc .GrayAt (_bbfe ,_edb ).Y ]++;};};return _gba ;};func _dgaa (_gdbd uint8 )bool {if _gdbd ==0||_gdbd ==255{return true ;};return false ;};func (_dd *CMYK32 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_dd .Width ,Y :_dd .Height }};};func (_feg colorConverter )Convert (src _cf .Image )(Image ,error ){return _feg ._ced (src )};var _ _cf .Image =&Gray2 {};func (_dc *CMYK32 )Set (x ,y int ,c _g .Color ){_dbf :=4*(y *_dc .Width +x );if _dbf +3>=len (_dc .Data ){return ;};_ag :=_g .CMYKModel .Convert (c ).(_g .CMYK );_dc .Data [_dbf ]=_ag .C ;_dc .Data [_dbf +1]=_ag .M ;_dc .Data [_dbf +2]=_ag .Y ;_dc .Data [_dbf +3]=_ag .K ;};func (_beec *ImageBase )newAlpha (){_cagc :=BytesPerLine (_beec .Width ,_beec .BitsPerComponent ,1);_beec .Alpha =make ([]byte ,_beec .Height *_cagc );};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func _ggaf (_bde _cf .Image ,_cgbe Image ,_deff _cf .Rectangle ){if _cfgc ,_bcba :=_bde .(SMasker );_bcba &&_cfgc .HasAlpha (){_cgbe .(SMasker ).MakeAlpha ();};_bb (_bde ,_cgbe ,_deff );};var _ Image =&Monochrome {};func FromGoImage (i _cf .Image )(Image ,error ){switch _cefg :=i .(type ){case Image :return _cefg .Copy (),nil ;case Gray :return GrayConverter .Convert (i );case *_cf .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_cf .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func (_fgc *NRGBA16 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_fgc .Width ,Y :_fgc .Height }};};var _ _cf .Image =&Gray8 {};func (_ecea *Gray16 )Set (x ,y int ,c _g .Color ){_gff :=(y *_ecea .BytesPerLine /2+x )*2;if _gff +1>=len (_ecea .Data ){return ;};_bega :=_g .Gray16Model .Convert (c ).(_g .Gray16 );_ecea .Data [_gff ],_ecea .Data [_gff +1]=uint8 (_bega .Y >>8),uint8 (_bega .Y &0xff);};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_fedg :=BytesPerLine (width ,bitsPerComponent ,colorComponents );if _fedg ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_cec :=width *colorComponents *bitsPerComponent ;_dddg :=_fedg *8;_ddff :=8-(_dddg -_cec );_gedf :=_d .NewReader (data );_abdd :=_fedg -1;_fef :=make ([]byte ,_abdd );_ebbd :=make ([]byte ,height *_fedg );_gcbd :=_d .NewWriterMSB (_ebbd );var _adbf uint64 ;var _ccbd error ;for _gaed :=0;_gaed < height ;_gaed ++{_ ,_ccbd =_gedf .Read (_fef );if _ccbd !=nil {return nil ,_ccbd ;};_ ,_ccbd =_gcbd .Write (_fef );if _ccbd !=nil {return nil ,_ccbd ;};_adbf ,_ccbd =_gedf .ReadBits (byte (_ddff ));if _ccbd !=nil {return nil ,_ccbd ;};_ ,_ccbd =_gcbd .WriteBits (_adbf ,_ddff );if _ccbd !=nil {return nil ,_ccbd ;};_gcbd .FinishByte ();};return _ebbd ,nil ;};func _fda (_dccc CMYK ,_ebba Gray ,_eee _cf .Rectangle ){for _ebdb :=0;_ebdb < _eee .Max .X ;_ebdb ++{for _ceafd :=0;_ceafd < _eee .Max .Y ;_ceafd ++{_aabf :=_caf (_dccc .CMYKAt (_ebdb ,_ceafd ));_ebba .SetGray (_ebdb ,_ceafd ,_aabf );};};};type NRGBA32 struct{ImageBase };func _cdac (_dbccd ,_agc Gray ,_gae _cf .Rectangle ){for _gdac :=0;_gdac < _gae .Max .X ;_gdac ++{for _gfae :=0;_gfae < _gae .Max .Y ;_gfae ++{_agc .SetGray (_gdac ,_gfae ,_dbccd .GrayAt (_gdac ,_gfae ));};};};func (_aagc *Gray2 )GrayAt (x ,y int )_g .Gray {_bedf ,_ :=ColorAtGray2BPC (x ,y ,_aagc .BytesPerLine ,_aagc .Data ,_aagc .Decode );return _bedf ;};func _bbf (_acf _g .Gray )_g .NRGBA {return _g .NRGBA {R :_acf .Y ,G :_acf .Y ,B :_acf .Y ,A :0xff}};func (_facf *Gray4 )SetGray (x ,y int ,g _g .Gray ){if x >=_facf .Width ||y >=_facf .Height {return ;};g =_fbf (g );_facf .setGray (x ,y ,g );};var _ Gray =&Gray4 {};func (_fcg *NRGBA32 )ColorModel ()_g .Model {return _g .NRGBAModel };var _ NRGBA =&NRGBA16 {};func ImgToBinary (i _cf .Image ,threshold uint8 )*_cf .Gray {switch _fcfd :=i .(type ){case *_cf .Gray :if _bcff (_fcfd ){return _fcfd ;};return _gbdc (_fcfd ,threshold );case *_cf .Gray16 :return _eacg (_fcfd ,threshold );default:return _gacd (_fcfd ,threshold );};};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_ceb *CMYK32 )At (x ,y int )_g .Color {_ec ,_ :=_ceb .ColorAt (x ,y );return _ec };func (_afcga *NRGBA64 )Base ()*ImageBase {return &_afcga .ImageBase };func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_g .CMYK ,error ){_dbcc :=4*(y *width +x );if _dbcc +3>=len (data ){return _g .CMYK {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};C :=data [_dbcc ]&0xff;M :=data [_dbcc +1]&0xff;Y :=data [_dbcc +2]&0xff;K :=data [_dbcc +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _g .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};var (MonochromeConverter =ConverterFunc (_bgf );Gray2Converter =ConverterFunc (_ece );Gray4Converter =ConverterFunc (_bce );GrayConverter =ConverterFunc (_afcf );Gray16Converter =ConverterFunc (_dcbb );NRGBA16Converter =ConverterFunc (_fce );NRGBAConverter =ConverterFunc (_fcdb );NRGBA64Converter =ConverterFunc (_cfab );CMYKConverter =ConverterFunc (_gc ););func _bed (_ecd _g .RGBA )_g .Gray {_dec :=(19595*uint32 (_ecd .R )+38470*uint32 (_ecd .G )+7471*uint32 (_ecd .B )+1<<7)>>16;return _g .Gray {Y :uint8 (_dec )};};func (_cfbc *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cfbc .copy ()}};func (_cgce *Gray8 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_cgce .Width ,Y :_cgce .Height }};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _acad ,_gfce ,_fdfb ,_fff int ;for _gdb :=0;_gdb < len (histogram );_gdb ++{if histogram [_gdb ]> 0{_acad =_gdb ;break ;};};if _acad > 0{_acad --;};for _ggad :=255;_ggad > 0;_ggad --{if histogram [_ggad ]> 0{_fff =_ggad ;break ;};};if _fff < 255{_fff ++;};for _egce :=0;_egce < 256;_egce ++{if histogram [_egce ]> _gfce {_fdfb =_egce ;_gfce =histogram [_egce ];};};var _effc bool ;if (_fdfb -_acad )< (_fff -_fdfb ){_effc =true ;var _egb int ;_cefge :=255;for _egb < _cefge {_afda :=histogram [_egb ];histogram [_egb ]=histogram [_cefge ];histogram [_cefge ]=_afda ;_egb ++;_cefge --;};_acad =255-_fff ;_fdfb =255-_fdfb ;};if _acad ==_fdfb {return uint8 (_acad );};_cfe :=float64 (histogram [_fdfb ]);_gbdbg :=float64 (_acad -_fdfb );_dagg :=_b .Sqrt (_cfe *_cfe +_gbdbg *_gbdbg );_cfe /=_dagg ;_gbdbg /=_dagg ;_dagg =_cfe *float64 (_acad )+_gbdbg *float64 (histogram [_acad ]);_fccc :=_acad ;var _cedf float64 ;for _fbdf :=_acad +1;_fbdf <=_fdfb ;_fbdf ++{_dff :=_cfe *float64 (_fbdf )+_gbdbg *float64 (histogram [_fbdf ])-_dagg ;if _dff > _cedf {_fccc =_fbdf ;_cedf =_dff ;};};_fccc --;if _effc {var _ceee int ;_gde :=255;for _ceee < _gde {_dade :=histogram [_ceee ];histogram [_ceee ]=histogram [_gde ];histogram [_gde ]=_dade ;_ceee ++;_gde --;};return uint8 (255-_fccc );};return uint8 (_fccc );};func (_dcgf *ImageBase )MakeAlpha (){_dcgf .newAlpha ()};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Gray ,error ){_eed :=y *bytesPerLine +x ;if _eed >=len (data ){return _g .Gray {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_ddb :=data [_eed ];if len (decode )==2{_ddb =uint8 (uint32 (LinearInterpolate (float64 (_ddb ),0,255,decode [0],decode [1]))&0xff);};return _g .Gray {Y :_ddb },nil ;};func (_dbc *CMYK32 )SetCMYK (x ,y int ,c _g .CMYK ){_bc :=4*(y *_dbc .Width +x );if _bc +3>=len (_dbc .Data ){return ;};_dbc .Data [_bc ]=c .C ;_dbc .Data [_bc +1]=c .M ;_dbc .Data [_bc +2]=c .Y ;_dbc .Data [_bc +3]=c .K ;};func (_fd *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_fd .copy ()}};func _gc (_gf _cf .Image )(Image ,error ){if _gb ,_eg :=_gf .(*CMYK32 );_eg {return _gb .Copy (),nil ;};_cdf :=_gf .Bounds ();_ga ,_cb :=NewImage (_cdf .Max .X ,_cdf .Max .Y ,8,4,nil ,nil ,nil );if _cb !=nil {return nil ,_cb ;};switch _fc :=_gf .(type ){case CMYK :_cbg (_fc ,_ga .(CMYK ),_cdf );case Gray :_eba (_fc ,_ga .(CMYK ),_cdf );case NRGBA :_gg (_fc ,_ga .(CMYK ),_cdf );case RGBA :_ab (_fc ,_ga .(CMYK ),_cdf );default:_bb (_gf ,_ga ,_cdf );};return _ga ,nil ;};func (_ccg *Monochrome )clearBit (_afcg ,_cfd int ){_ccg .Data [_afcg ]&=^(0x80>>uint (_cfd &7))};func _efd (_adfc RGBA ,_fgbd Gray ,_bee _cf .Rectangle ){for _abfb :=0;_abfb < _bee .Max .X ;_abfb ++{for _fcfg :=0;_fcfg < _bee .Max .Y ;_fcfg ++{_fdf :=_bed (_adfc .RGBAAt (_abfb ,_fcfg ));_fgbd .SetGray (_abfb ,_fcfg ,_fdf );};};};func _gacd (_acge _cf .Image ,_faca uint8 )*_cf .Gray {_cfc :=_acge .Bounds ();_ccac :=_cf .NewGray (_cfc );var (_gcd _g .Color ;_dcag _g .Gray ;);for _gaa :=0;_gaa < _cfc .Max .X ;_gaa ++{for _cdeb :=0;_cdeb < _cfc .Max .Y ;_cdeb ++{_gcd =_acge .At (_gaa ,_cdeb );_ccac .Set (_gaa ,_cdeb ,_gcd );_dcag =_ccac .GrayAt (_gaa ,_cdeb );_ccac .SetGray (_gaa ,_cdeb ,_g .Gray {Y :_dggc (_dcag .Y ,_faca )});};};return _ccac ;};var _ _cf .Image =&NRGBA32 {};func (_abbf *Gray8 )Set (x ,y int ,c _g .Color ){_cbd :=y *_abbf .BytesPerLine +x ;if _cbd > len (_abbf .Data )-1{return ;};_bgc :=_g .GrayModel .Convert (c );_abbf .Data [_cbd ]=_bgc .(_g .Gray ).Y ;};func _gaf (_cae _g .Color )_g .Color {_abd :=_g .GrayModel .Convert (_cae ).(_g .Gray );return _fged (_abd )};func (_bgb *NRGBA16 )Base ()*ImageBase {return &_bgb .ImageBase };func (_acfd *NRGBA32 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_acfd .Width ,Y :_acfd .Height }};};func (_bfa *NRGBA32 )NRGBAAt (x ,y int )_g .NRGBA {_dcdg ,_ :=ColorAtNRGBA32 (x ,y ,_bfa .Width ,_bfa .Data ,_bfa .Alpha ,_bfa .Decode );return _dcdg ;};func (_cafa *Gray2 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_cafa .Width ,Y :_cafa .Height }};};func (_ggg *NRGBA64 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ggg .Width ,_ggg .Data ,_ggg .Alpha ,_ggg .Decode );};var _ _cf .Image =&NRGBA64 {};var _ _cf .Image =&Gray4 {};var _ NRGBA =&NRGBA32 {};func (_dcb *Gray4 )Validate ()error {if len (_dcb .Data )!=_dcb .Height *_dcb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_ada *NRGBA64 )setNRGBA64 (_bccb int ,_adcb _g .NRGBA64 ,_cbee int ){_ada .Data [_bccb ]=uint8 (_adcb .R >>8);_ada .Data [_bccb +1]=uint8 (_adcb .R &0xff);_ada .Data [_bccb +2]=uint8 (_adcb .G >>8);_ada .Data [_bccb +3]=uint8 (_adcb .G &0xff);_ada .Data [_bccb +4]=uint8 (_adcb .B >>8);_ada .Data [_bccb +5]=uint8 (_adcb .B &0xff);if _cbee +1< len (_ada .Alpha ){_ada .Alpha [_cbee ]=uint8 (_adcb .A >>8);_ada .Alpha [_cbee +1]=uint8 (_adcb .A &0xff);};};func (_egfe *NRGBA32 )Validate ()error {if len (_egfe .Data )!=3*_egfe .Width *_egfe .Height {return _a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");};return nil ;};func (_gcb *Gray16 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_gcb .Width ,Y :_gcb .Height }};};func _ebb (_bede _g .NYCbCrA )_g .NRGBA {_dad :=int32 (_bede .Y )*0x10101;_acb :=int32 (_bede .Cb )-128;_dbb :=int32 (_bede .Cr )-128;_egc :=_dad +91881*_dbb ;if uint32 (_egc )&0xff000000==0{_egc >>=8;}else {_egc =^(_egc >>31)&0xffff;};_ffa :=_dad -22554*_acb -46802*_dbb ;if uint32 (_ffa )&0xff000000==0{_ffa >>=8;}else {_ffa =^(_ffa >>31)&0xffff;};_gbg :=_dad +116130*_acb ;if uint32 (_gbg )&0xff000000==0{_gbg >>=8;}else {_gbg =^(_gbg >>31)&0xffff;};return _g .NRGBA {R :uint8 (_egc >>8),G :uint8 (_ffa >>8),B :uint8 (_gbg >>8),A :_bede .A };};var _ Image =&CMYK32 {};func _dcd (_egfd _g .NRGBA )_g .NRGBA {_egfd .R =_egfd .R >>4|(_egfd .R >>4)<<4;_egfd .G =_egfd .G >>4|(_egfd .G >>4)<<4;_egfd .B =_egfd .B >>4|(_egfd .B >>4)<<4;return _egfd ;};func (_dgca *NRGBA64 )ColorModel ()_g .Model {return _g .NRGBA64Model };func _dcbb (_daac _cf .Image )(Image ,error ){if _ebc ,_dbea :=_daac .(*Gray16 );_dbea {return _ebc .Copy (),nil ;};_aeg :=_daac .Bounds ();_febd ,_bfcb :=NewImage (_aeg .Max .X ,_aeg .Max .Y ,16,1,nil ,nil ,nil );if _bfcb !=nil {return nil ,_bfcb ;};_ccge (_daac ,_febd ,_aeg );return _febd ,nil ;};func (_cgcb *Gray8 )ColorModel ()_g .Model {return _g .GrayModel };func _gafg (_cce []byte ,_eedg Image )error {_ebdd :=true ;for _gcg :=0;_gcg < len (_cce );_gcg ++{if _cce [_gcg ]!=0xff{_ebdd =false ;break ;};};if _ebdd {switch _ccff :=_eedg .(type ){case *NRGBA32 :_ccff .Alpha =nil ;case *NRGBA64 :_ccff .Alpha =nil ;default:return _ae .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_eedg );};};return nil ;};func (_aef *Monochrome )setBit (_baf ,_gge int ){_aef .Data [_baf ]|=0x80>>uint (_gge &7)};func (_afb *NRGBA32 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA32 (x ,y ,_afb .Width ,_afb .Data ,_afb .Alpha ,_afb .Decode );};var _ Image =&Gray2 {};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _b .Abs (xmax -xmin )< 0.000001{return ymin ;};_fea :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _fea ;};func _cfab (_ccffd _cf .Image )(Image ,error ){if _cegc ,_egcg :=_ccffd .(*NRGBA64 );_egcg {return _cegc .Copy (),nil ;};_caaa ,_aae ,_cebag :=_gbdbc (_ccffd ,2);_aaae ,_abff :=NewImage (_caaa .Max .X ,_caaa .Max .Y ,16,3,nil ,_cebag ,nil );if _abff !=nil {return nil ,_abff ;};_ggaf (_ccffd ,_aaae ,_caaa );if len (_cebag )!=0&&!_aae {if _fdgd :=_gafg (_cebag ,_aaae );_fdgd !=nil {return nil ,_fdgd ;};};return _aaae ,nil ;};func ImgToGray (i _cf .Image )*_cf .Gray {if _daab ,_bafg :=i .(*_cf .Gray );_bafg {return _daab ;};_egbf :=i .Bounds ();_aabc :=_cf .NewGray (_egbf );for _cgfge :=0;_cgfge < _egbf .Max .X ;_cgfge ++{for _fbff :=0;_fbff < _egbf .Max .Y ;_fbff ++{_accb :=i .At (_cgfge ,_fbff );_aabc .Set (_cgfge ,_fbff ,_accb );};};return _aabc ;};func _gac (_adg NRGBA ,_bgg Gray ,_bcb _cf .Rectangle ){for _gdgb :=0;_gdgb < _bcb .Max .X ;_gdgb ++{for _aea :=0;_aea < _bcb .Max .Y ;_aea ++{_ddbe :=_ca (_adg .NRGBAAt (_gdgb ,_aea ));_bgg .SetGray (_gdgb ,_aea ,_ddbe );};};};func (_bfcd *ImageBase )GetAlpha ()[]byte {return _bfcd .Alpha };var _ Image =&NRGBA32 {};var (Gray2Model =_g .ModelFunc (_gaf );Gray4Model =_g .ModelFunc (_fecg );NRGBA16Model =_g .ModelFunc (_aaba ););type ColorConverter interface{Convert (_eab _cf .Image )(Image ,error );};func (_bcdd *NRGBA16 )At (x ,y int )_g .Color {_bbbb ,_ :=_bcdd .ColorAt (x ,y );return _bbbb };func (_aad *Monochrome )Validate ()error {if len (_aad .Data )!=_aad .Height *_aad .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _afcf (_bea _cf .Image )(Image ,error ){if _fbg ,_bfc :=_bea .(*Gray8 );_bfc {return _fbg .Copy (),nil ;};_ccc :=_bea .Bounds ();_eabac ,_cab :=NewImage (_ccc .Max .X ,_ccc .Max .Y ,8,1,nil ,nil ,nil );if _cab !=nil {return nil ,_cab ;};_ccge (_bea ,_eabac ,_ccc );return _eabac ,nil ;};func (_deb *Gray2 )At (x ,y int )_g .Color {_cade ,_ :=_deb .ColorAt (x ,y );return _cade };type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_g .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_ae .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );};};func _eba (_fg Gray ,_ad CMYK ,_bge _cf .Rectangle ){for _agd :=0;_agd < _bge .Max .X ;_agd ++{for _eeb :=0;_eeb < _bge .Max .Y ;_eeb ++{_fde :=_fg .GrayAt (_agd ,_eeb );_ad .SetCMYK (_agd ,_eeb ,_dbcb (_fde ));};};};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_g .NRGBA ,error ){_dgfg :=y *width +x ;_edca :=3*_dgfg ;if _edca +2>=len (data ){return _g .NRGBA {},_ae .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );};_ggbf :=uint8 (0xff);if alpha !=nil &&len (alpha )> _dgfg {_ggbf =alpha [_dgfg ];};_cbca ,_cfaa ,_dfdf :=data [_edca ],data [_edca +1],data [_edca +2];if len (decode )==6{_cbca =uint8 (uint32 (LinearInterpolate (float64 (_cbca ),0,255,decode [0],decode [1]))&0xff);_cfaa =uint8 (uint32 (LinearInterpolate (float64 (_cfaa ),0,255,decode [2],decode [3]))&0xff);_dfdf =uint8 (uint32 (LinearInterpolate (float64 (_dfdf ),0,255,decode [4],decode [5]))&0xff);};return _g .NRGBA {R :_cbca ,G :_cfaa ,B :_dfdf ,A :_ggbf },nil ;};func _cag (_eabc _g .RGBA )_g .NRGBA {switch _eabc .A {case 0xff:return _g .NRGBA {R :_eabc .R ,G :_eabc .G ,B :_eabc .B ,A :0xff};case 0x00:return _g .NRGBA {};default:_fdee ,_cdc ,_df ,_dcf :=_eabc .RGBA ();_fdee =(_fdee *0xffff)/_dcf ;_cdc =(_cdc *0xffff)/_dcf ;_df =(_df *0xffff)/_dcf ;return _g .NRGBA {R :uint8 (_fdee >>8),G :uint8 (_cdc >>8),B :uint8 (_df >>8),A :uint8 (_dcf >>8)};};};func (_afd *Monochrome )At (x ,y int )_g .Color {_adc ,_ :=_afd .ColorAt (x ,y );return _adc };type Gray interface{GrayAt (_bf ,_ggff int )_g .Gray ;SetGray (_fcac ,_bef int ,_fbc _g .Gray );};func _cedd (_bcf _g .NRGBA )_g .CMYK {_be ,_fdg ,_gea ,_ :=_bcf .RGBA ();_ged ,_fgbf ,_gfc ,_cad :=_g .RGBToCMYK (uint8 (_be >>8),uint8 (_fdg >>8),uint8 (_gea >>8));return _g .CMYK {C :_ged ,M :_fgbf ,Y :_gfc ,K :_cad };};func (_aeb *NRGBA16 )SetNRGBA (x ,y int ,c _g .NRGBA ){_ebdg :=y *_aeb .BytesPerLine +x *3/2;if _ebdg +1>=len (_aeb .Data ){return ;};c =_dcd (c );_aeb .setNRGBA (x ,y ,_ebdg ,c );};var _ Gray =&Monochrome {};func (_ccgf *NRGBA64 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_ccgf .Width ,Y :_ccgf .Height }};};func _gg (_ea NRGBA ,_ge CMYK ,_gbb _cf .Rectangle ){for _eac :=0;_eac < _gbb .Max .X ;_eac ++{for _fe :=0;_fe < _gbb .Max .Y ;_fe ++{_bab :=_ea .NRGBAAt (_eac ,_fe );_ge .SetCMYK (_eac ,_fe ,_cedd (_bab ));};};};func (_febc *NRGBA16 )ColorAt (x ,y int )(_g .Color ,error ){return ColorAtNRGBA16 (x ,y ,_febc .Width ,_febc .BytesPerLine ,_febc .Data ,_febc .Alpha ,_febc .Decode );};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_ebf :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );var _afff Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_afff =&Monochrome {ImageBase :_ebf ,ModelThreshold :0x0f};case 2:_afff =&Gray2 {ImageBase :_ebf };case 4:_afff =&Gray4 {ImageBase :_ebf };case 8:_afff =&Gray8 {ImageBase :_ebf };case 16:_afff =&Gray16 {ImageBase :_ebf };};case 3:switch bitsPerComponent {case 4:_afff =&NRGBA16 {ImageBase :_ebf };case 8:_afff =&NRGBA32 {ImageBase :_ebf };case 16:_afff =&NRGBA64 {ImageBase :_ebf };};case 4:_afff =&CMYK32 {ImageBase :_ebf };};if _afff ==nil {return nil ,ErrInvalidImage ;};return _afff ,nil ;};func (_gbdg *NRGBA32 )setRGBA (_beda int ,_fbef _g .NRGBA ){_dgd :=3*_beda ;_gbdg .Data [_dgd ]=_fbef .R ;_gbdg .Data [_dgd +1]=_fbef .G ;_gbdg .Data [_dgd +2]=_fbef .B ;if _beda < len (_gbdg .Alpha ){_gbdg .Alpha [_beda ]=_fbef .A ;};};func (_cca *NRGBA16 )NRGBAAt (x ,y int )_g .NRGBA {_abe ,_ :=ColorAtNRGBA16 (x ,y ,_cca .Width ,_cca .BytesPerLine ,_cca .Data ,_cca .Alpha ,_cca .Decode );return _abe ;};var _ Image =&NRGBA16 {};func (_dba *Gray4 )Bounds ()_cf .Rectangle {return _cf .Rectangle {Max :_cf .Point {X :_dba .Width ,Y :_dba .Height }};};