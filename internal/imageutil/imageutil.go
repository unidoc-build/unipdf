//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_fb "encoding/binary";_b "errors";_bg "fmt";_df "github.com/unidoc/unipdf/v3/common";_ae "github.com/unidoc/unipdf/v3/internal/bitwise";_f "image";_e "image/color";_g "image/draw";_a "math";);func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_e .NRGBA ,error ){_adcc :=y *bytesPerLine +x *3/2;
if _adcc +1>=len (data ){return _e .NRGBA {},_dgbf (x ,y );};const (_cfbg =0xf;_addfa =uint8 (0xff););_gfcf :=_addfa ;if alpha !=nil {_bbcb :=y *BytesPerLine (width ,4,1);if _bbcb < len (alpha ){if x %2==0{_gfcf =(alpha [_bbcb ]>>uint (4))&_cfbg ;}else {_gfcf =alpha [_bbcb ]&_cfbg ;
};_gfcf |=_gfcf <<4;};};var _ggce ,_aedc ,_cbggf uint8 ;if x *3%2==0{_ggce =(data [_adcc ]>>uint (4))&_cfbg ;_aedc =data [_adcc ]&_cfbg ;_cbggf =(data [_adcc +1]>>uint (4))&_cfbg ;}else {_ggce =data [_adcc ]&_cfbg ;_aedc =(data [_adcc +1]>>uint (4))&_cfbg ;
_cbggf =data [_adcc +1]&_cfbg ;};if len (decode )==6{_ggce =uint8 (uint32 (LinearInterpolate (float64 (_ggce ),0,15,decode [0],decode [1]))&0xf);_aedc =uint8 (uint32 (LinearInterpolate (float64 (_aedc ),0,15,decode [2],decode [3]))&0xf);_cbggf =uint8 (uint32 (LinearInterpolate (float64 (_cbggf ),0,15,decode [4],decode [5]))&0xf);
};return _e .NRGBA {R :(_ggce <<4)|(_ggce &0xf),G :(_aedc <<4)|(_aedc &0xf),B :(_cbggf <<4)|(_cbggf &0xf),A :_gfcf },nil ;};func (_feafg *ImageBase )setFourBytes (_fdfa int ,_eeca uint32 )error {if _fdfa +3> len (_feafg .Data )-1{return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fdfa );
};_feafg .Data [_fdfa ]=byte ((_eeca &0xff000000)>>24);_feafg .Data [_fdfa +1]=byte ((_eeca &0xff0000)>>16);_feafg .Data [_fdfa +2]=byte ((_eeca &0xff00)>>8);_feafg .Data [_fdfa +3]=byte (_eeca &0xff);return nil ;};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _a .Abs (xmax -xmin )< 0.000001{return ymin ;
};_bcc :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _bcc ;};func _fa (_gdb ,_ffgg int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_gdb ,_ffgg ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};};var _ Image =&Gray8 {};func (_eccc *Gray2 )Histogram ()(_cga [256]int ){for _bedc :=0;
_bedc < _eccc .Width ;_bedc ++{for _dabf :=0;_dabf < _eccc .Height ;_dabf ++{_cga [_eccc .GrayAt (_bedc ,_dabf ).Y ]++;};};return _cga ;};func (_acf *Monochrome )setGrayBit (_dcbb ,_gffb int ){_acf .Data [_dcbb ]|=0x80>>uint (_gffb &7)};func (_aaff *Gray8 )Base ()*ImageBase {return &_aaff .ImageBase };
func _afc (_cdae Gray ,_bgfc nrgba64 ,_ffb _f .Rectangle ){for _afe :=0;_afe < _ffb .Max .X ;_afe ++{for _cfe :=0;_cfe < _ffb .Max .Y ;_cfe ++{_gddb :=_fde (_bgfc .NRGBA64At (_afe ,_cfe ));_cdae .SetGray (_afe ,_cfe ,_gddb );};};};func (_bfdf *Gray8 )GrayAt (x ,y int )_e .Gray {_acegg ,_ :=ColorAtGray8BPC (x ,y ,_bfdf .BytesPerLine ,_bfdf .Data ,_bfdf .Decode );
return _acegg ;};func (_fcb *CMYK32 )At (x ,y int )_e .Color {_bgfa ,_ :=_fcb .ColorAt (x ,y );return _bgfa };type RGBA32 struct{ImageBase };func (_ddee *RGBA32 )SetRGBA (x ,y int ,c _e .RGBA ){_gbcgg :=y *_ddee .Width +x ;_daef :=3*_gbcgg ;if _daef +2>=len (_ddee .Data ){return ;
};_ddee .setRGBA (_gbcgg ,c );};func (_gbebc *Gray16 )Base ()*ImageBase {return &_gbebc .ImageBase };var _ Image =&NRGBA32 {};func (_ggg *Gray8 )Validate ()error {if len (_ggg .Data )!=_ggg .Height *_ggg .BytesPerLine {return ErrInvalidImage ;};return nil ;
};func (_aaba *ImageBase )setByte (_dbcf int ,_eeced byte )error {if _dbcf > len (_aaba .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_aaba .Data [_dbcf ]=_eeced ;return nil ;};var _ Gray =&Gray2 {};
func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_fd :=BytesPerLine (width ,8,1);if len (data )< _fd *height {return nil ,nil ;};_dfg :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_bf ,_be :=MonochromeConverter .Convert (_dfg );
if _be !=nil {return nil ,_be ;};return _bf .Base ().Data ,nil ;};func (_aafb *NRGBA64 )NRGBA64At (x ,y int )_e .NRGBA64 {_gdccd ,_ :=ColorAtNRGBA64 (x ,y ,_aafb .Width ,_aafb .Data ,_aafb .Alpha ,_aafb .Decode );return _gdccd ;};func _cgee (_dfga *Monochrome ,_ffa ,_bagd ,_eead ,_gad int ,_fgea RasterOperator ,_fgd *Monochrome ,_cgab ,_dcdd int )error {var (_beac bool ;
_eggc bool ;_fadfe int ;_becf int ;_aabd int ;_dfgd bool ;_cfa byte ;_eade int ;_ffed int ;_dbfg int ;_ecde ,_cfgfe int ;);_ebcg :=8-(_ffa &7);_aca :=_bdc [_ebcg ];_gcga :=_dfga .BytesPerLine *_bagd +(_ffa >>3);_def :=_fgd .BytesPerLine *_dcdd +(_cgab >>3);
if _eead < _ebcg {_beac =true ;_aca &=_cfgc [8-_ebcg +_eead ];};if !_beac {_fadfe =(_eead -_ebcg )>>3;if _fadfe > 0{_eggc =true ;_becf =_gcga +1;_aabd =_def +1;};};_eade =(_ffa +_eead )&7;if !(_beac ||_eade ==0){_dfgd =true ;_cfa =_cfgc [_eade ];_ffed =_gcga +1+_fadfe ;
_dbfg =_def +1+_fadfe ;};switch _fgea {case PixSrc :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],_fgd .Data [_def ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;};if _eggc {for _ecde =0;_ecde < _gad ;
_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=_fgd .Data [_aabd +_cfgfe ];};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],_fgd .Data [_dbfg ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixNotSrc :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],^_fgd .Data [_def ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;};if _eggc {for _ecde =0;
_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=^_fgd .Data [_aabd +_cfgfe ];};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],^_fgd .Data [_dbfg ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixSrcOrDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],_fgd .Data [_def ]|_dfga .Data [_gcga ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]|=_fgd .Data [_aabd +_cfgfe ];};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],_fgd .Data [_dbfg ]|_dfga .Data [_ffed ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixSrcAndDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],_fgd .Data [_def ]&_dfga .Data [_gcga ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]&=_fgd .Data [_aabd +_cfgfe ];};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],_fgd .Data [_dbfg ]&_dfga .Data [_ffed ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixSrcXorDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],_fgd .Data [_def ]^_dfga .Data [_gcga ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]^=_fgd .Data [_aabd +_cfgfe ];};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],_fgd .Data [_dbfg ]^_dfga .Data [_ffed ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixNotSrcOrDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],^(_fgd .Data [_def ])|_dfga .Data [_gcga ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]|=^(_fgd .Data [_aabd +_cfgfe ]);};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],^(_fgd .Data [_dbfg ])|_dfga .Data [_ffed ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixNotSrcAndDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],^(_fgd .Data [_def ])&_dfga .Data [_gcga ],_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]&=^_fgd .Data [_aabd +_cfgfe ];};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],^(_fgd .Data [_dbfg ])&_dfga .Data [_ffed ],_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixSrcOrNotDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],_fgd .Data [_def ]|^(_dfga .Data [_gcga ]),_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=_fgd .Data [_aabd +_cfgfe ]|^(_dfga .Data [_becf +_cfgfe ]);};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;
_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],_fgd .Data [_dbfg ]|^(_dfga .Data [_ffed ]),_cfa );_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixSrcAndNotDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],_fgd .Data [_def ]&^(_dfga .Data [_gcga ]),_aca );
_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=_fgd .Data [_aabd +_cfgfe ]&^(_dfga .Data [_becf +_cfgfe ]);};_becf +=_dfga .BytesPerLine ;
_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],_fgd .Data [_dbfg ]&^(_dfga .Data [_ffed ]),_cfa );_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixNotPixSrcOrDst :for _ecde =0;
_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],^(_fgd .Data [_def ]|_dfga .Data [_gcga ]),_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;
_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=^(_fgd .Data [_aabd +_cfgfe ]|_dfga .Data [_becf +_cfgfe ]);};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],^(_fgd .Data [_dbfg ]|_dfga .Data [_ffed ]),_cfa );
_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixNotPixSrcAndDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],^(_fgd .Data [_def ]&_dfga .Data [_gcga ]),_aca );_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;
};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=^(_fgd .Data [_aabd +_cfgfe ]&_dfga .Data [_becf +_cfgfe ]);};_becf +=_dfga .BytesPerLine ;_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;
_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],^(_fgd .Data [_dbfg ]&_dfga .Data [_ffed ]),_cfa );_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};case PixNotPixSrcXorDst :for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_gcga ]=_eafc (_dfga .Data [_gcga ],^(_fgd .Data [_def ]^_dfga .Data [_gcga ]),_aca );
_gcga +=_dfga .BytesPerLine ;_def +=_fgd .BytesPerLine ;};if _eggc {for _ecde =0;_ecde < _gad ;_ecde ++{for _cfgfe =0;_cfgfe < _fadfe ;_cfgfe ++{_dfga .Data [_becf +_cfgfe ]=^(_fgd .Data [_aabd +_cfgfe ]^_dfga .Data [_becf +_cfgfe ]);};_becf +=_dfga .BytesPerLine ;
_aabd +=_fgd .BytesPerLine ;};};if _dfgd {for _ecde =0;_ecde < _gad ;_ecde ++{_dfga .Data [_ffed ]=_eafc (_dfga .Data [_ffed ],^(_fgd .Data [_dbfg ]^_dfga .Data [_ffed ]),_cfa );_ffed +=_dfga .BytesPerLine ;_dbfg +=_fgd .BytesPerLine ;};};default:_df .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_fgea );
return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func _ccefg (_fcdd _f .Image )(Image ,error ){if _efcg ,_eeadf :=_fcdd .(*NRGBA16 );_eeadf {return _efcg .Copy (),nil ;
};_cfgg :=_fcdd .Bounds ();_edbd ,_bfbe :=NewImage (_cfgg .Max .X ,_cfgg .Max .Y ,4,3,nil ,nil ,nil );if _bfbe !=nil {return nil ,_bfbe ;};_cabb (_fcdd ,_edbd ,_cfgg );return _edbd ,nil ;};func (_ccgb *Gray2 )At (x ,y int )_e .Color {_agca ,_ :=_ccgb .ColorAt (x ,y );
return _agca };func _cege (_deec _e .NRGBA )_e .CMYK {_badf ,_eeb ,_gab ,_ :=_deec .RGBA ();_egac ,_facb ,_acd ,_dab :=_e .RGBToCMYK (uint8 (_badf >>8),uint8 (_eeb >>8),uint8 (_gab >>8));return _e .CMYK {C :_egac ,M :_facb ,Y :_acd ,K :_dab };};type ColorConverter interface{Convert (_aba _f .Image )(Image ,error );
};type CMYK32 struct{ImageBase };func _fgdb (_abfgf _f .Image )(Image ,error ){if _aggc ,_bgbe :=_abfgf .(*NRGBA32 );_bgbe {return _aggc .Copy (),nil ;};_edbc ,_agab ,_fbagd :=_bgcg (_abfgf ,1);_dadbg ,_gddg :=NewImage (_edbc .Max .X ,_edbc .Max .Y ,8,3,nil ,_fbagd ,nil );
if _gddg !=nil {return nil ,_gddg ;};_cabb (_abfgf ,_dadbg ,_edbc );if len (_fbagd )!=0&&!_agab {if _facg :=_eged (_fbagd ,_dadbg );_facg !=nil {return nil ,_facg ;};};return _dadbg ,nil ;};func (_gebd *Monochrome )InverseData ()error {return _gebd .RasterOperation (0,0,_gebd .Width ,_gebd .Height ,PixNotDst ,nil ,0,0);
};func _dfed (_fcce _f .Image )(Image ,error ){if _cece ,_eabb :=_fcce .(*Gray2 );_eabb {return _cece .Copy (),nil ;};_bee :=_fcce .Bounds ();_faee ,_gbcg :=NewImage (_bee .Max .X ,_bee .Max .Y ,2,1,nil ,nil ,nil );if _gbcg !=nil {return nil ,_gbcg ;};
_gagb (_fcce ,_faee ,_bee );return _faee ,nil ;};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func _fec (_bag ,_fee *Monochrome ,_bdac []byte ,_edc int )(_cecd error ){var (_adg ,_cca ,_cef ,_gdbf ,_ggd ,_bec ,_ee ,_fgg int ;
_bebb ,_fdca uint32 ;_eee ,_bff byte ;_dcd uint16 ;);_baae :=make ([]byte ,4);_fdb :=make ([]byte ,4);for _cef =0;_cef < _bag .Height -1;_cef ,_gdbf =_cef +2,_gdbf +1{_adg =_cef *_bag .BytesPerLine ;_cca =_gdbf *_fee .BytesPerLine ;for _ggd ,_bec =0,0;
_ggd < _edc ;_ggd ,_bec =_ggd +4,_bec +1{for _ee =0;_ee < 4;_ee ++{_fgg =_adg +_ggd +_ee ;if _fgg <=len (_bag .Data )-1&&_fgg < _adg +_bag .BytesPerLine {_baae [_ee ]=_bag .Data [_fgg ];}else {_baae [_ee ]=0x00;};_fgg =_adg +_bag .BytesPerLine +_ggd +_ee ;
if _fgg <=len (_bag .Data )-1&&_fgg < _adg +(2*_bag .BytesPerLine ){_fdb [_ee ]=_bag .Data [_fgg ];}else {_fdb [_ee ]=0x00;};};_bebb =_fb .BigEndian .Uint32 (_baae );_fdca =_fb .BigEndian .Uint32 (_fdb );_fdca |=_bebb ;_fdca |=_fdca <<1;_fdca &=0xaaaaaaaa;
_bebb =_fdca |(_fdca <<7);_eee =byte (_bebb >>24);_bff =byte ((_bebb >>8)&0xff);_fgg =_cca +_bec ;if _fgg +1==len (_fee .Data )-1||_fgg +1>=_cca +_fee .BytesPerLine {_fee .Data [_fgg ]=_bdac [_eee ];}else {_dcd =(uint16 (_bdac [_eee ])<<8)|uint16 (_bdac [_bff ]);
if _cecd =_fee .setTwoBytes (_fgg ,_dcd );_cecd !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fgg );
};_bec ++;};};};return nil ;};var _ Gray =&Monochrome {};var _ Image =&RGBA32 {};func (_afa *Monochrome )clearBit (_adfd ,_ggbd int ){_afa .Data [_adfd ]&=^(0x80>>uint (_ggbd &7))};func _cabb (_fggga _f .Image ,_eefb Image ,_faag _f .Rectangle ){if _faae ,_cadag :=_fggga .(SMasker );
_cadag &&_faae .HasAlpha (){_eefb .(SMasker ).MakeAlpha ();};switch _gfge :=_fggga .(type ){case Gray :_agbc (_gfge ,_eefb .(NRGBA ),_faag );case NRGBA :_faeeg (_gfge ,_eefb .(NRGBA ),_faag );case *_f .NYCbCrA :_ggac (_gfge ,_eefb .(NRGBA ),_faag );case CMYK :_dccg (_gfge ,_eefb .(NRGBA ),_faag );
case RGBA :_gfgbe (_gfge ,_eefb .(NRGBA ),_faag );case nrgba64 :_fcfdd (_gfge ,_eefb .(NRGBA ),_faag );default:_cgdd (_fggga ,_eefb ,_faag );};};func _bbb (_gec *Monochrome ,_aaf int ,_edd []byte )(_fge *Monochrome ,_bea error ){const _cdfa ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _gec ==nil {return nil ,_b .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _aaf < 1||_aaf > 4{return nil ,_b .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _gec .Height <=1{return nil ,_b .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_fge =_fa (_gec .Width /2,_gec .Height /2);
if _edd ==nil {_edd =_bfg ();};_bbd :=_daca (_gec .BytesPerLine ,2*_fge .BytesPerLine );switch _aaf {case 1:_bea =_fec (_gec ,_fge ,_edd ,_bbd );case 2:_bea =_ead (_gec ,_fge ,_edd ,_bbd );case 3:_bea =_gaf (_gec ,_fge ,_edd ,_bbd );case 4:_bea =_egf (_gec ,_fge ,_edd ,_bbd );
};if _bea !=nil {return nil ,_bea ;};return _fge ,nil ;};func (_fadf *Gray4 )SetGray (x ,y int ,g _e .Gray ){if x >=_fadf .Width ||y >=_fadf .Height {return ;};g =_bfgea (g );_fadf .setGray (x ,y ,g );};func (_gdbd *Gray2 )Base ()*ImageBase {return &_gdbd .ImageBase };
func _dccg (_ddg CMYK ,_eafd NRGBA ,_ece _f .Rectangle ){for _bebe :=0;_bebe < _ece .Max .X ;_bebe ++{for _bddf :=0;_bddf < _ece .Max .Y ;_bddf ++{_bfccc :=_ddg .CMYKAt (_bebe ,_bddf );_eafd .SetNRGBA (_bebe ,_bddf ,_ccae (_bfccc ));};};};func (_ffcd *ImageBase )setTwoBytes (_acc int ,_gdgf uint16 )error {if _acc +1> len (_ffcd .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ffcd .Data [_acc ]=byte ((_gdgf &0xff00)>>8);_ffcd .Data [_acc +1]=byte (_gdgf &0xff);return nil ;};func _ada ()(_bcd [256]uint16 ){for _cgc :=0;_cgc < 256;_cgc ++{if _cgc &0x01!=0{_bcd [_cgc ]|=0x3;};if _cgc &0x02!=0{_bcd [_cgc ]|=0xc;};if _cgc &0x04!=0{_bcd [_cgc ]|=0x30;
};if _cgc &0x08!=0{_bcd [_cgc ]|=0xc0;};if _cgc &0x10!=0{_bcd [_cgc ]|=0x300;};if _cgc &0x20!=0{_bcd [_cgc ]|=0xc00;};if _cgc &0x40!=0{_bcd [_cgc ]|=0x3000;};if _cgc &0x80!=0{_bcd [_cgc ]|=0xc000;};};return _bcd ;};var _ Image =&Gray2 {};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_bg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};type CMYK interface{CMYKAt (_fagf ,_dfe int )_e .CMYK ;SetCMYK (_ecbc ,_fbd int ,_adb _e .CMYK );};func _eadf (_dbac CMYK ,_ggcee RGBA ,_cfgcd _f .Rectangle ){for _dcae :=0;_dcae < _cfgcd .Max .X ;_dcae ++{for _cacaf :=0;_cacaf < _cfgcd .Max .Y ;_cacaf ++{_cdcc :=_dbac .CMYKAt (_dcae ,_cacaf );
_ggcee .SetRGBA (_dcae ,_cacaf ,_abe (_cdcc ));};};};var _ Image =&NRGBA64 {};func (_ggeda *Gray2 )SetGray (x ,y int ,gray _e .Gray ){_feaf :=_eaag (gray );_cgcd :=y *_ggeda .BytesPerLine ;_cdaeg :=_cgcd +(x >>2);if _cdaeg >=len (_ggeda .Data ){return ;
};_efbg :=_feaf .Y >>6;_ggeda .Data [_cdaeg ]=(_ggeda .Data [_cdaeg ]&(^(0xc0>>uint (2*((x )&3)))))|(_efbg <<uint (6-2*(x &3)));};func _eegf (_aebgb _e .NRGBA )_e .NRGBA {_aebgb .R =_aebgb .R >>4|(_aebgb .R >>4)<<4;_aebgb .G =_aebgb .G >>4|(_aebgb .G >>4)<<4;
_aebgb .B =_aebgb .B >>4|(_aebgb .B >>4)<<4;return _aebgb ;};func (_ddcgd *NRGBA64 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ddcgd .Width ,_ddcgd .Data ,_ddcgd .Alpha ,_ddcgd .Decode );};type RasterOperator int ;func _gcf (_agfba uint )uint {var _ecgac uint ;
for _agfba !=0{_agfba >>=1;_ecgac ++;};return _ecgac -1;};func (_fegc *Gray8 )ColorModel ()_e .Model {return _e .GrayModel };func (_eeea *ImageBase )MakeAlpha (){_eeea .newAlpha ()};func _bafc (_gdcd ,_bfc CMYK ,_eef _f .Rectangle ){for _ggb :=0;_ggb < _eef .Max .X ;
_ggb ++{for _fef :=0;_fef < _eef .Max .Y ;_fef ++{_bfc .SetCMYK (_ggb ,_fef ,_gdcd .CMYKAt (_ggb ,_fef ));};};};func _ggac (_fegfd *_f .NYCbCrA ,_aefe NRGBA ,_agfd _f .Rectangle ){for _befa :=0;_befa < _agfd .Max .X ;_befa ++{for _eedf :=0;_eedf < _agfd .Max .Y ;
_eedf ++{_eeef :=_fegfd .NYCbCrAAt (_befa ,_eedf );_aefe .SetNRGBA (_befa ,_eedf ,_fdag (_eeef ));};};};func (_cffdf *NRGBA16 )SetNRGBA (x ,y int ,c _e .NRGBA ){_fgab :=y *_cffdf .BytesPerLine +x *3/2;if _fgab +1>=len (_cffdf .Data ){return ;};c =_eegf (c );
_cffdf .setNRGBA (x ,y ,_fgab ,c );};func (_gfd *Monochrome )At (x ,y int )_e .Color {_geac ,_ :=_gfd .ColorAt (x ,y );return _geac };func (_dgcg *NRGBA16 )Validate ()error {if len (_dgcg .Data )!=3*_dgcg .Width *_dgcg .Height /2{return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_fca *monochromeThresholdConverter )Convert (img _f .Image )(Image ,error ){if _abaa ,_ffff :=img .(*Monochrome );_ffff {return _abaa .Copy (),nil ;};_fdfd :=img .Bounds ();_beag ,_cfcb :=NewImage (_fdfd .Max .X ,_fdfd .Max .Y ,1,1,nil ,nil ,nil );
if _cfcb !=nil {return nil ,_cfcb ;};_beag .(*Monochrome ).ModelThreshold =_fca .Threshold ;for _egcg :=0;_egcg < _fdfd .Max .X ;_egcg ++{for _adgf :=0;_adgf < _fdfd .Max .Y ;_adgf ++{_gaa :=img .At (_egcg ,_adgf );_beag .Set (_egcg ,_adgf ,_gaa );};};
return _beag ,nil ;};func (_fba *Gray4 )Set (x ,y int ,c _e .Color ){if x >=_fba .Width ||y >=_fba .Height {return ;};_fecc :=Gray4Model .Convert (c ).(_e .Gray );_fba .setGray (x ,y ,_fecc );};func (_ceag *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_ceag .copy ()}};
func (_bcae *Gray2 )GrayAt (x ,y int )_e .Gray {_fgfa ,_ :=ColorAtGray2BPC (x ,y ,_bcae .BytesPerLine ,_bcae .Data ,_bcae .Decode );return _fgfa ;};func _eged (_fgda []byte ,_gadg Image )error {_fdfc :=true ;for _adba :=0;_adba < len (_fgda );_adba ++{if _fgda [_adba ]!=0xff{_fdfc =false ;
break ;};};if _fdfc {switch _gcfe :=_gadg .(type ){case *NRGBA32 :_gcfe .Alpha =nil ;case *NRGBA64 :_gcfe .Alpha =nil ;default:return _bg .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_gadg );
};};return nil ;};func (_beaa *Monochrome )setBit (_cbdf ,_feebb int ){_beaa .Data [_cbdf +(_feebb >>3)]|=0x80>>uint (_feebb &7);};func _dgbf (_feabb int ,_bbgf int )error {return _bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_feabb ,_bbgf );
};func _egd (_age NRGBA ,_bfec CMYK ,_daf _f .Rectangle ){for _eeff :=0;_eeff < _daf .Max .X ;_eeff ++{for _agcd :=0;_agcd < _daf .Max .Y ;_agcd ++{_faeb :=_age .NRGBAAt (_eeff ,_agcd );_bfec .SetCMYK (_eeff ,_agcd ,_cege (_faeb ));};};};func _badb (_edf _f .Image )(Image ,error ){if _dfeg ,_bfdb :=_edf .(*Gray8 );
_bfdb {return _dfeg .Copy (),nil ;};_dbga :=_edf .Bounds ();_caeb ,_dbaa :=NewImage (_dbga .Max .X ,_dbga .Max .Y ,8,1,nil ,nil ,nil );if _dbaa !=nil {return nil ,_dbaa ;};_gagb (_edf ,_caeb ,_dbga );return _caeb ,nil ;};func (_acda *Gray2 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_acda .Width ,Y :_acda .Height }};
};type monochromeModel uint8 ;func init (){_cdbg ()};func (_gdee *Monochrome )Set (x ,y int ,c _e .Color ){_aggd :=y *_gdee .BytesPerLine +x >>3;if _aggd > len (_gdee .Data )-1{return ;};_afg :=_gdee .ColorModel ().Convert (c ).(_e .Gray );_gdee .setGray (x ,_afg ,_aggd );
};func (_bacf *RGBA32 )At (x ,y int )_e .Color {_ecfe ,_ :=_bacf .ColorAt (x ,y );return _ecfe };var _ Gray =&Gray16 {};func (_edfa *NRGBA64 )At (x ,y int )_e .Color {_gdeef ,_ :=_edfa .ColorAt (x ,y );return _gdeef };var ErrInvalidImage =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_e .CMYK ,error ){_fac :=4*(y *width +x );if _fac +3>=len (data ){return _e .CMYK {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_fac ]&0xff;M :=data [_fac +1]&0xff;Y :=data [_fac +2]&0xff;K :=data [_fac +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _e .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_e .Gray ,error ){_dgd :=y *bytesPerLine +x >>2;
if _dgd >=len (data ){return _e .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_ffgd :=data [_dgd ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_ffgd =uint8 (uint32 (LinearInterpolate (float64 (_ffgd ),0,3.0,decode [0],decode [1]))&3);};return _e .Gray {Y :_ffgd *85},nil ;};func _ace (_aebg _e .Gray )_e .CMYK {return _e .CMYK {K :0xff-_aebg .Y }};
func (_ggeg *Gray8 )At (x ,y int )_e .Color {_cfg ,_ :=_ggeg .ColorAt (x ,y );return _cfg };func _cgfg (_dfaa uint8 )bool {if _dfaa ==0||_dfaa ==255{return true ;};return false ;};func (_gccb *NRGBA32 )setRGBA (_abfb int ,_dbfd _e .NRGBA ){_dca :=3*_abfb ;
_gccb .Data [_dca ]=_dbfd .R ;_gccb .Data [_dca +1]=_dbfd .G ;_gccb .Data [_dca +2]=_dbfd .B ;if _abfb < len (_gccb .Alpha ){_gccb .Alpha [_abfb ]=_dbfd .A ;};};func (_ecgg *Gray2 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtGray2BPC (x ,y ,_ecgg .BytesPerLine ,_ecgg .Data ,_ecgg .Decode );
};func (_baadc *Gray16 )Validate ()error {if len (_baadc .Data )!=_baadc .Height *_baadc .BytesPerLine {return ErrInvalidImage ;};return nil ;};type monochromeThresholdConverter struct{Threshold uint8 ;};func (_fffe *Gray8 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtGray8BPC (x ,y ,_fffe .BytesPerLine ,_fffe .Data ,_fffe .Decode );
};func (_dege *Gray8 )Histogram ()(_fgfg [256]int ){for _bgef :=0;_bgef < len (_dege .Data );_bgef ++{_fgfg [_dege .Data [_bgef ]]++;};return _fgfg ;};func _faeeg (_agbac ,_bgd NRGBA ,_gddcd _f .Rectangle ){for _cdaegb :=0;_cdaegb < _gddcd .Max .X ;_cdaegb ++{for _feebba :=0;
_feebba < _gddcd .Max .Y ;_feebba ++{_bgd .SetNRGBA (_cdaegb ,_feebba ,_agbac .NRGBAAt (_cdaegb ,_feebba ));};};};func (_fada *Gray16 )SetGray (x ,y int ,g _e .Gray ){_eece :=(y *_fada .BytesPerLine /2+x )*2;if _eece +1>=len (_fada .Data ){return ;};_fada .Data [_eece ]=g .Y ;
_fada .Data [_eece +1]=g .Y ;};var (_fdc =_ada ();_fdf =_cdf ();_efc =_bb (););func GrayHistogram (g Gray )(_gcdcb [256]int ){switch _fbcg :=g .(type ){case Histogramer :return _fbcg .Histogram ();case _f .Image :_edfaa :=_fbcg .Bounds ();for _daceb :=0;
_daceb < _edfaa .Max .X ;_daceb ++{for _gadd :=0;_gadd < _edfaa .Max .Y ;_gadd ++{_gcdcb [g .GrayAt (_daceb ,_gadd ).Y ]++;};};return _gcdcb ;default:return [256]int {};};};func (_ddff *NRGBA64 )Base ()*ImageBase {return &_ddff .ImageBase };func (_ddcg *NRGBA32 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtNRGBA32 (x ,y ,_ddcg .Width ,_ddcg .Data ,_ddcg .Alpha ,_ddcg .Decode );
};var _ RGBA =&RGBA32 {};func _egf (_ddd ,_dec *Monochrome ,_cae []byte ,_fad int )(_gcde error ){var (_ccfg ,_egfc ,_bgf ,_bad ,_cff ,_gda ,_edb ,_adc int ;_dae ,_dfc uint32 ;_gebb ,_gcda byte ;_bdd uint16 ;);_ccb :=make ([]byte ,4);_gdc :=make ([]byte ,4);
for _bgf =0;_bgf < _ddd .Height -1;_bgf ,_bad =_bgf +2,_bad +1{_ccfg =_bgf *_ddd .BytesPerLine ;_egfc =_bad *_dec .BytesPerLine ;for _cff ,_gda =0,0;_cff < _fad ;_cff ,_gda =_cff +4,_gda +1{for _edb =0;_edb < 4;_edb ++{_adc =_ccfg +_cff +_edb ;if _adc <=len (_ddd .Data )-1&&_adc < _ccfg +_ddd .BytesPerLine {_ccb [_edb ]=_ddd .Data [_adc ];
}else {_ccb [_edb ]=0x00;};_adc =_ccfg +_ddd .BytesPerLine +_cff +_edb ;if _adc <=len (_ddd .Data )-1&&_adc < _ccfg +(2*_ddd .BytesPerLine ){_gdc [_edb ]=_ddd .Data [_adc ];}else {_gdc [_edb ]=0x00;};};_dae =_fb .BigEndian .Uint32 (_ccb );_dfc =_fb .BigEndian .Uint32 (_gdc );
_dfc &=_dae ;_dfc &=_dfc <<1;_dfc &=0xaaaaaaaa;_dae =_dfc |(_dfc <<7);_gebb =byte (_dae >>24);_gcda =byte ((_dae >>8)&0xff);_adc =_egfc +_gda ;if _adc +1==len (_dec .Data )-1||_adc +1>=_egfc +_dec .BytesPerLine {_dec .Data [_adc ]=_cae [_gebb ];if _gcde =_dec .setByte (_adc ,_cae [_gebb ]);
_gcde !=nil {return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_adc );};}else {_bdd =(uint16 (_cae [_gebb ])<<8)|uint16 (_cae [_gcda ]);if _gcde =_dec .setTwoBytes (_adc ,_bdd );_gcde !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_adc );
};_gda ++;};};};return nil ;};func (_ggff *ImageBase )setEightPartlyBytes (_bedf ,_fbda int ,_adcag uint64 )(_bbaaa error ){var (_gdcc byte ;_dbgf int ;);for _afca :=1;_afca <=_fbda ;_afca ++{_dbgf =64-_afca *8;_gdcc =byte (_adcag >>uint (_dbgf )&0xff);
if _bbaaa =_ggff .setByte (_bedf +_afca -1,_gdcc );_bbaaa !=nil {return _bbaaa ;};};_agfb :=_ggff .BytesPerLine *8-_ggff .Width ;if _agfb ==0{return nil ;};_dbgf -=8;_gdcc =byte (_adcag >>uint (_dbgf )&0xff)<<uint (_agfb );if _bbaaa =_ggff .setByte (_bedf +_fbda ,_gdcc );
_bbaaa !=nil {return _bbaaa ;};return nil ;};func (_adef *Monochrome )Base ()*ImageBase {return &_adef .ImageBase };func (_eag *Gray4 )setGray (_eff int ,_aggg int ,_ceca _e .Gray ){_dcc :=_aggg *_eag .BytesPerLine ;_aacg :=_dcc +(_eff >>1);if _aacg >=len (_eag .Data ){return ;
};_ggdf :=_ceca .Y >>4;_eag .Data [_aacg ]=(_eag .Data [_aacg ]&(^(0xf0>>uint (4*(_eff &1)))))|(_ggdf <<uint (4-4*(_eff &1)));};func (_dfgdb *NRGBA64 )setNRGBA64 (_acbd int ,_abfbb _e .NRGBA64 ,_ffdf int ){_dfgdb .Data [_acbd ]=uint8 (_abfbb .R >>8);_dfgdb .Data [_acbd +1]=uint8 (_abfbb .R &0xff);
_dfgdb .Data [_acbd +2]=uint8 (_abfbb .G >>8);_dfgdb .Data [_acbd +3]=uint8 (_abfbb .G &0xff);_dfgdb .Data [_acbd +4]=uint8 (_abfbb .B >>8);_dfgdb .Data [_acbd +5]=uint8 (_abfbb .B &0xff);if _ffdf +1< len (_dfgdb .Alpha ){_dfgdb .Alpha [_ffdf ]=uint8 (_abfbb .A >>8);
_dfgdb .Alpha [_ffdf +1]=uint8 (_abfbb .A &0xff);};};var _ _f .Image =&RGBA32 {};func _caba (_gcbg *Monochrome ,_fbag ,_gfe int ,_gefe ,_abeb int ,_fegf RasterOperator ,_adeg *Monochrome ,_bgaf ,_eabe int )error {var _fggd ,_cbgg ,_debf ,_feff int ;if _fbag < 0{_bgaf -=_fbag ;
_gefe +=_fbag ;_fbag =0;};if _bgaf < 0{_fbag -=_bgaf ;_gefe +=_bgaf ;_bgaf =0;};_fggd =_fbag +_gefe -_gcbg .Width ;if _fggd > 0{_gefe -=_fggd ;};_cbgg =_bgaf +_gefe -_adeg .Width ;if _cbgg > 0{_gefe -=_cbgg ;};if _gfe < 0{_eabe -=_gfe ;_abeb +=_gfe ;_gfe =0;
};if _eabe < 0{_gfe -=_eabe ;_abeb +=_eabe ;_eabe =0;};_debf =_gfe +_abeb -_gcbg .Height ;if _debf > 0{_abeb -=_debf ;};_feff =_eabe +_abeb -_adeg .Height ;if _feff > 0{_abeb -=_feff ;};if _gefe <=0||_abeb <=0{return nil ;};var _fgege error ;switch {case _fbag &7==0&&_bgaf &7==0:_fgege =_bbea (_gcbg ,_fbag ,_gfe ,_gefe ,_abeb ,_fegf ,_adeg ,_bgaf ,_eabe );
case _fbag &7==_bgaf &7:_fgege =_cgee (_gcbg ,_fbag ,_gfe ,_gefe ,_abeb ,_fegf ,_adeg ,_bgaf ,_eabe );default:_fgege =_egbf (_gcbg ,_fbag ,_gfe ,_gefe ,_abeb ,_fegf ,_adeg ,_bgaf ,_eabe );};if _fgege !=nil {return _fgege ;};return nil ;};func (_fgeg *CMYK32 )CMYKAt (x ,y int )_e .CMYK {_ddc ,_ :=ColorAtCMYK (x ,y ,_fgeg .Width ,_fgeg .Data ,_fgeg .Decode );
return _ddc ;};func (_fegb *Monochrome )SetGray (x ,y int ,g _e .Gray ){_bfge :=y *_fegb .BytesPerLine +x >>3;if _bfge > len (_fegb .Data )-1{return ;};g =_deb (g ,monochromeModel (_fegb .ModelThreshold ));_fegb .setGray (x ,g ,_bfge );};func (_ede *Monochrome )getBit (_dgg ,_aecb int )uint8 {return _ede .Data [_dgg +(_aecb >>3)]>>uint (7-(_aecb &7))&1;
};func (_fcbb *Gray4 )Base ()*ImageBase {return &_fcbb .ImageBase };func (_fbe *ImageBase )newAlpha (){_cbdc :=BytesPerLine (_fbe .Width ,_fbe .BitsPerComponent ,1);_fbe .Alpha =make ([]byte ,_fbe .Height *_cbdc );};func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_e .Gray ,error ){_bef :=y *bytesPerLine +x ;
if _bef >=len (data ){return _e .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cgacc :=data [_bef ];if len (decode )==2{_cgacc =uint8 (uint32 (LinearInterpolate (float64 (_cgacc ),0,255,decode [0],decode [1]))&0xff);};return _e .Gray {Y :_cgacc },nil ;};func _accd (_gcbb _f .Image ,_egge uint8 )*_f .Gray {_edac :=_gcbb .Bounds ();
_eadec :=_f .NewGray (_edac );var (_dagf _e .Color ;_bbad _e .Gray ;);for _cbda :=0;_cbda < _edac .Max .X ;_cbda ++{for _ccbb :=0;_ccbb < _edac .Max .Y ;_ccbb ++{_dagf =_gcbb .At (_cbda ,_ccbb );_eadec .Set (_cbda ,_ccbb ,_dagf );_bbad =_eadec .GrayAt (_cbda ,_ccbb );
_eadec .SetGray (_cbda ,_ccbb ,_e .Gray {Y :_adegb (_bbad .Y ,_egge )});};};return _eadec ;};var _ Image =&Gray4 {};func (_bbcc *Gray16 )Set (x ,y int ,c _e .Color ){_fddb :=(y *_bbcc .BytesPerLine /2+x )*2;if _fddb +1>=len (_bbcc .Data ){return ;};_ceae :=_e .Gray16Model .Convert (c ).(_e .Gray16 );
_bbcc .Data [_fddb ],_bbcc .Data [_fddb +1]=uint8 (_ceae .Y >>8),uint8 (_ceae .Y &0xff);};func _egbf (_dbaaf *Monochrome ,_fdbdc ,_gdaf ,_bbcd ,_bcbc int ,_gagf RasterOperator ,_cffa *Monochrome ,_gae ,_fedcf int )error {var (_acaa bool ;_bbca bool ;_bfgg byte ;
_gcbgf int ;_eegg int ;_caea int ;_ecge int ;_dcdcd bool ;_affcg int ;_aeea int ;_eegb int ;_afb bool ;_beae byte ;_fegbd int ;_bdb int ;_dafb int ;_bbf byte ;_adbd int ;_agacb int ;_bcgc uint ;_ffcb uint ;_bfaf byte ;_ggef shift ;_faeg bool ;_gffbd bool ;
_deca ,_dgbbg int ;);if _gae &7!=0{_agacb =8-(_gae &7);};if _fdbdc &7!=0{_eegg =8-(_fdbdc &7);};if _agacb ==0&&_eegg ==0{_bfaf =_bdc [0];}else {if _eegg > _agacb {_bcgc =uint (_eegg -_agacb );}else {_bcgc =uint (8-(_agacb -_eegg ));};_ffcb =8-_bcgc ;_bfaf =_bdc [_bcgc ];
};if (_fdbdc &7)!=0{_acaa =true ;_gcbgf =8-(_fdbdc &7);_bfgg =_bdc [_gcbgf ];_caea =_dbaaf .BytesPerLine *_gdaf +(_fdbdc >>3);_ecge =_cffa .BytesPerLine *_fedcf +(_gae >>3);_adbd =8-(_gae &7);if _gcbgf > _adbd {_ggef =_ggba ;if _bbcd >=_agacb {_faeg =true ;
};}else {_ggef =_fafc ;};};if _bbcd < _gcbgf {_bbca =true ;_bfgg &=_cfgc [8-_gcbgf +_bbcd ];};if !_bbca {_affcg =(_bbcd -_gcbgf )>>3;if _affcg !=0{_dcdcd =true ;_aeea =_dbaaf .BytesPerLine *_gdaf +((_fdbdc +_eegg )>>3);_eegb =_cffa .BytesPerLine *_fedcf +((_gae +_eegg )>>3);
};};_fegbd =(_fdbdc +_bbcd )&7;if !(_bbca ||_fegbd ==0){_afb =true ;_beae =_cfgc [_fegbd ];_bdb =_dbaaf .BytesPerLine *_gdaf +((_fdbdc +_eegg )>>3)+_affcg ;_dafb =_cffa .BytesPerLine *_fedcf +((_gae +_eegg )>>3)+_affcg ;if _fegbd > int (_ffcb ){_gffbd =true ;
};};switch _gagf {case PixSrc :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],_bbf ,_bfgg );
_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]=_bbf ;
};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],_bbf ,_beae );
_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixNotSrc :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;
};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],^_bbf ,_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );
_dbaaf .Data [_aeea +_dgbbg ]=^_bbf ;};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );
};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],^_bbf ,_beae );_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixSrcOrDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );
};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],_bbf |_dbaaf .Data [_caea ],_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;
_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]|=_bbf ;};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;
_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],_bbf |_dbaaf .Data [_bdb ],_beae );_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;
};};case PixSrcAndDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],_bbf &_dbaaf .Data [_caea ],_bfgg );
_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]&=_bbf ;
};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],_bbf &_dbaaf .Data [_bdb ],_beae );
_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixSrcXorDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;
};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],_bbf ^_dbaaf .Data [_caea ],_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );
_dbaaf .Data [_aeea +_dgbbg ]^=_bbf ;};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );
};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],_bbf ^_dbaaf .Data [_bdb ],_beae );_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixNotSrcOrDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;
if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],^_bbf |_dbaaf .Data [_caea ],_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;
};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]|=^_bbf ;};_aeea +=_dbaaf .BytesPerLine ;
_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],^_bbf |_dbaaf .Data [_bdb ],_beae );
_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixNotSrcAndDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );
};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],^_bbf &_dbaaf .Data [_caea ],_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;
_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]&=^_bbf ;};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;
_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],^_bbf &_dbaaf .Data [_bdb ],_beae );_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;
};};case PixSrcOrNotDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],_bbf |^_dbaaf .Data [_caea ],_bfgg );
_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]=_bbf |^_dbaaf .Data [_aeea +_dgbbg ];
};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],_bbf |^_dbaaf .Data [_bdb ],_beae );
_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixSrcAndNotDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );
};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],_bbf &^_dbaaf .Data [_caea ],_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;
_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]=_bbf &^_dbaaf .Data [_aeea +_dgbbg ];};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;
};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],_bbf &^_dbaaf .Data [_bdb ],_beae );_bdb +=_dbaaf .BytesPerLine ;
_dafb +=_cffa .BytesPerLine ;};};case PixNotPixSrcOrDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;
};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],^(_bbf |_dbaaf .Data [_caea ]),_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );
_dbaaf .Data [_aeea +_dgbbg ]=^(_bbf |_dbaaf .Data [_aeea +_dgbbg ]);};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );
};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],^(_bbf |_dbaaf .Data [_bdb ]),_beae );_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixNotPixSrcAndDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;
if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],^(_bbf &_dbaaf .Data [_caea ]),_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;
};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]=^(_bbf &_dbaaf .Data [_aeea +_dgbbg ]);
};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],^(_bbf &_dbaaf .Data [_bdb ]),_beae );
_bdb +=_dbaaf .BytesPerLine ;_dafb +=_cffa .BytesPerLine ;};};case PixNotPixSrcXorDst :if _acaa {for _deca =0;_deca < _bcbc ;_deca ++{if _ggef ==_ggba {_bbf =_cffa .Data [_ecge ]<<_bcgc ;if _faeg {_bbf =_eafc (_bbf ,_cffa .Data [_ecge +1]>>_ffcb ,_bfaf );
};}else {_bbf =_cffa .Data [_ecge ]>>_ffcb ;};_dbaaf .Data [_caea ]=_eafc (_dbaaf .Data [_caea ],^(_bbf ^_dbaaf .Data [_caea ]),_bfgg );_caea +=_dbaaf .BytesPerLine ;_ecge +=_cffa .BytesPerLine ;};};if _dcdcd {for _deca =0;_deca < _bcbc ;_deca ++{for _dgbbg =0;
_dgbbg < _affcg ;_dgbbg ++{_bbf =_eafc (_cffa .Data [_eegb +_dgbbg ]<<_bcgc ,_cffa .Data [_eegb +_dgbbg +1]>>_ffcb ,_bfaf );_dbaaf .Data [_aeea +_dgbbg ]=^(_bbf ^_dbaaf .Data [_aeea +_dgbbg ]);};_aeea +=_dbaaf .BytesPerLine ;_eegb +=_cffa .BytesPerLine ;
};};if _afb {for _deca =0;_deca < _bcbc ;_deca ++{_bbf =_cffa .Data [_dafb ]<<_bcgc ;if _gffbd {_bbf =_eafc (_bbf ,_cffa .Data [_dafb +1]>>_ffcb ,_bfaf );};_dbaaf .Data [_bdb ]=_eafc (_dbaaf .Data [_bdb ],^(_bbf ^_dbaaf .Data [_bdb ]),_beae );_bdb +=_dbaaf .BytesPerLine ;
_dafb +=_cffa .BytesPerLine ;};};default:_df .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_gagf );return _b .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};type Gray16 struct{ImageBase };func _eafc (_ebf ,_dffe ,_cabf byte )byte {return (_ebf &^(_cabf ))|(_dffe &_cabf )};func _aaa (_dfa RGBA ,_eeee CMYK ,_ggc _f .Rectangle ){for _daed :=0;_daed < _ggc .Max .X ;_daed ++{for _gfa :=0;_gfa < _ggc .Max .Y ;
_gfa ++{_egdd :=_dfa .RGBAAt (_daed ,_gfa );_eeee .SetCMYK (_daed ,_gfa ,_dgbg (_egdd ));};};};func (_cgbf *Gray8 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_cgbf .Width ,Y :_cgbf .Height }};};func _gbb (_cdaff ,_cafc Gray ,_bgeb _f .Rectangle ){for _edbb :=0;
_edbb < _bgeb .Max .X ;_edbb ++{for _afcb :=0;_afcb < _bgeb .Max .Y ;_afcb ++{_cafc .SetGray (_edbb ,_afcb ,_cdaff .GrayAt (_edbb ,_afcb ));};};};type NRGBA interface{NRGBAAt (_caaa ,_fcae int )_e .NRGBA ;SetNRGBA (_ecaa ,_fgc int ,_ccfc _e .NRGBA );};
var _ _f .Image =&Monochrome {};func (_ggcae *Monochrome )setIndexedBit (_fcda int ){_ggcae .Data [(_fcda >>3)]|=0x80>>uint (_fcda &7);};func (_gcbf *Monochrome )AddPadding ()(_dcbg error ){if _aeg :=((_gcbf .Width *_gcbf .Height )+7)>>3;len (_gcbf .Data )< _aeg {return _bg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_gcbf .Data ),_aeg );
};_gcg :=_gcbf .Width %8;if _gcg ==0{return nil ;};_dad :=_gcbf .Width /8;_eec :=_ae .NewReader (_gcbf .Data );_ggca :=make ([]byte ,_gcbf .Height *_gcbf .BytesPerLine );_fgag :=_ae .NewWriterMSB (_ggca );_gbg :=make ([]byte ,_dad );var (_ecd int ;_dgbc uint64 ;
);for _ecd =0;_ecd < _gcbf .Height ;_ecd ++{if _ ,_dcbg =_eec .Read (_gbg );_dcbg !=nil {return _dcbg ;};if _ ,_dcbg =_fgag .Write (_gbg );_dcbg !=nil {return _dcbg ;};if _dgbc ,_dcbg =_eec .ReadBits (byte (_gcg ));_dcbg !=nil {return _dcbg ;};if _dcbg =_fgag .WriteByte (byte (_dgbc )<<uint (8-_gcg ));
_dcbg !=nil {return _dcbg ;};};_gcbf .Data =_fgag .Data ();return nil ;};func (_cdde *Gray2 )Validate ()error {if len (_cdde .Data )!=_cdde .Height *_cdde .BytesPerLine {return ErrInvalidImage ;};return nil ;};func _bbea (_dcg *Monochrome ,_aeba ,_dfff ,_egde ,_dacc int ,_dgec RasterOperator ,_bagg *Monochrome ,_ebcb ,_degee int )error {var (_dacb byte ;
_gdbg int ;_fafd int ;_ecf ,_fffa int ;_cffd ,_eeeae int ;);_adeea :=_egde >>3;_bgg :=_egde &7;if _bgg > 0{_dacb =_cfgc [_bgg ];};_gdbg =_bagg .BytesPerLine *_degee +(_ebcb >>3);_fafd =_dcg .BytesPerLine *_dfff +(_aeba >>3);switch _dgec {case PixSrc :for _cffd =0;
_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=_bagg .Data [_ecf ];_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],_bagg .Data [_ecf ],_dacb );
};};case PixNotSrc :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=^(_bagg .Data [_ecf ]);_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],^_bagg .Data [_ecf ],_dacb );
};};case PixSrcOrDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]|=_bagg .Data [_ecf ];_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],_bagg .Data [_ecf ]|_dcg .Data [_fffa ],_dacb );
};};case PixSrcAndDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]&=_bagg .Data [_ecf ];_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],_bagg .Data [_ecf ]&_dcg .Data [_fffa ],_dacb );
};};case PixSrcXorDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]^=_bagg .Data [_ecf ];_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],_bagg .Data [_ecf ]^_dcg .Data [_fffa ],_dacb );
};};case PixNotSrcOrDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]|=^(_bagg .Data [_ecf ]);_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],^(_bagg .Data [_ecf ])|_dcg .Data [_fffa ],_dacb );
};};case PixNotSrcAndDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]&=^(_bagg .Data [_ecf ]);_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],^(_bagg .Data [_ecf ])&_dcg .Data [_fffa ],_dacb );
};};case PixSrcOrNotDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=_bagg .Data [_ecf ]|^(_dcg .Data [_fffa ]);_fffa ++;
_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],_bagg .Data [_ecf ]|^(_dcg .Data [_fffa ]),_dacb );};};case PixSrcAndNotDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;
for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=_bagg .Data [_ecf ]&^(_dcg .Data [_fffa ]);_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],_bagg .Data [_ecf ]&^(_dcg .Data [_fffa ]),_dacb );};};case PixNotPixSrcOrDst :for _cffd =0;
_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=^(_bagg .Data [_ecf ]|_dcg .Data [_fffa ]);_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],^(_bagg .Data [_ecf ]|_dcg .Data [_fffa ]),_dacb );
};};case PixNotPixSrcAndDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=^(_bagg .Data [_ecf ]&_dcg .Data [_fffa ]);
_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],^(_bagg .Data [_ecf ]&_dcg .Data [_fffa ]),_dacb );};};case PixNotPixSrcXorDst :for _cffd =0;_cffd < _dacc ;_cffd ++{_ecf =_gdbg +_cffd *_bagg .BytesPerLine ;_fffa =_fafd +_cffd *_dcg .BytesPerLine ;
for _eeeae =0;_eeeae < _adeea ;_eeeae ++{_dcg .Data [_fffa ]=^(_bagg .Data [_ecf ]^_dcg .Data [_fffa ]);_fffa ++;_ecf ++;};if _bgg > 0{_dcg .Data [_fffa ]=_eafc (_dcg .Data [_fffa ],^(_bagg .Data [_ecf ]^_dcg .Data [_fffa ]),_dacb );};};default:_df .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_dgec );
return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_faeba *NRGBA16 )At (x ,y int )_e .Color {_bffc ,_ :=_faeba .ColorAt (x ,y );return _bffc };
func _gggg (_gefd RGBA ,_dbe Gray ,_addb _f .Rectangle ){for _fgaa :=0;_fgaa < _addb .Max .X ;_fgaa ++{for _decg :=0;_decg < _addb .Max .Y ;_decg ++{_ddf :=_gebe (_gefd .RGBAAt (_fgaa ,_decg ));_dbe .SetGray (_fgaa ,_decg ,_ddf );};};};func _ggbb (_gfcg CMYK ,_bdf Gray ,_ffdb _f .Rectangle ){for _gagbe :=0;
_gagbe < _ffdb .Max .X ;_gagbe ++{for _fece :=0;_fece < _ffdb .Max .Y ;_fece ++{_agac :=_eae (_gfcg .CMYKAt (_gagbe ,_fece ));_bdf .SetGray (_gagbe ,_fece ,_agac );};};};func (_cceb *Gray16 )Histogram ()(_cged [256]int ){for _dgca :=0;_dgca < _cceb .Width ;
_dgca ++{for _gabb :=0;_gabb < _cceb .Height ;_gabb ++{_cged [_cceb .GrayAt (_dgca ,_gabb ).Y ]++;};};return _cged ;};func _bfdg (_egfb _e .NRGBA )_e .Gray {_ebg ,_dcb ,_cabg ,_ :=_egfb .RGBA ();_faac :=(19595*_ebg +38470*_dcb +7471*_cabg +1<<15)>>24;return _e .Gray {Y :uint8 (_faac )};
};func (_edg *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_edg .copy ()}};func _aaagd (_cace *_f .Gray16 ,_bbge uint8 )*_f .Gray {_caaf :=_cace .Bounds ();_efdg :=_f .NewGray (_caaf );for _daeca :=0;_daeca < _caaf .Dx ();_daeca ++{for _gafb :=0;
_gafb < _caaf .Dy ();_gafb ++{_acde :=_cace .Gray16At (_daeca ,_gafb );_efdg .SetGray (_daeca ,_gafb ,_e .Gray {Y :_adegb (uint8 (_acde .Y /256),_bbge )});};};return _efdg ;};func (_ecccd *Gray4 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtGray4BPC (x ,y ,_ecccd .BytesPerLine ,_ecccd .Data ,_ecccd .Decode );
};func (_aade *Gray4 )ColorModel ()_e .Model {return Gray4Model };func _fde (_aea _e .NRGBA64 )_e .Gray {var _bcbg _e .NRGBA64 ;if _aea ==_bcbg {return _e .Gray {Y :0xff};};_dfcb ,_facc ,_fggg ,_ :=_aea .RGBA ();_dde :=(19595*_dfcb +38470*_facc +7471*_fggg +1<<15)>>24;
return _e .Gray {Y :uint8 (_dde )};};type RGBA interface{RGBAAt (_abae ,_gbga int )_e .RGBA ;SetRGBA (_fcbdg ,_cbb int ,_cdgf _e .RGBA );};var _ Image =&Monochrome {};func _cag (_acac nrgba64 ,_dcbd RGBA ,_cbba _f .Rectangle ){for _eceg :=0;_eceg < _cbba .Max .X ;
_eceg ++{for _gacg :=0;_gacg < _cbba .Max .Y ;_gacg ++{_bggd :=_acac .NRGBA64At (_eceg ,_gacg );_dcbd .SetRGBA (_eceg ,_gacg ,_aaef (_bggd ));};};};func _gfgbe (_eabg RGBA ,_eac NRGBA ,_cecdf _f .Rectangle ){for _cbgc :=0;_cbgc < _cecdf .Max .X ;_cbgc ++{for _edab :=0;
_edab < _cecdf .Max .Y ;_edab ++{_bdebb :=_eabg .RGBAAt (_cbgc ,_edab );_eac .SetNRGBA (_cbgc ,_edab ,_decd (_bdebb ));};};};func _ff (_bc *Monochrome ,_fe int )(*Monochrome ,error ){if _bc ==nil {return nil ,_b .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fe ==1{return _bc .copy (),nil ;};if !IsPowerOf2 (uint (_fe )){return nil ,_bg .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_fe );
};_de :=_cedf (_fe );return _bcb (_bc ,_fe ,_de );};func (_fceff *NRGBA32 )SetNRGBA (x ,y int ,c _e .NRGBA ){_dgfd :=y *_fceff .Width +x ;_gfacd :=3*_dgfd ;if _gfacd +2>=len (_fceff .Data ){return ;};_fceff .setRGBA (_dgfd ,c );};type Gray8 struct{ImageBase };
func (_ccge *NRGBA16 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_ccge .Width ,Y :_ccge .Height }};};func (_aaegg *RGBA32 )setRGBA (_bfgb int ,_fdbb _e .RGBA ){_gcbc :=3*_bfgb ;_aaegg .Data [_gcbc ]=_fdbb .R ;_aaegg .Data [_gcbc +1]=_fdbb .G ;
_aaegg .Data [_gcbc +2]=_fdbb .B ;if _bfgb < len (_aaegg .Alpha ){_aaegg .Alpha [_bfgb ]=_fdbb .A ;};};func _gbgd (_daag *Monochrome ,_gefa ,_cgfb int ,_bbacf ,_ddeg int ,_ccba RasterOperator ){var (_dedb int ;_dbdd byte ;_abcd ,_dbgfa int ;_cbf int ;);
_aaadc :=_bbacf >>3;_egba :=_bbacf &7;if _egba > 0{_dbdd =_cfgc [_egba ];};_dedb =_daag .BytesPerLine *_cgfb +(_gefa >>3);switch _ccba {case PixClr :for _abcd =0;_abcd < _ddeg ;_abcd ++{_cbf =_dedb +_abcd *_daag .BytesPerLine ;for _dbgfa =0;_dbgfa < _aaadc ;
_dbgfa ++{_daag .Data [_cbf ]=0x0;_cbf ++;};if _egba > 0{_daag .Data [_cbf ]=_eafc (_daag .Data [_cbf ],0x0,_dbdd );};};case PixSet :for _abcd =0;_abcd < _ddeg ;_abcd ++{_cbf =_dedb +_abcd *_daag .BytesPerLine ;for _dbgfa =0;_dbgfa < _aaadc ;_dbgfa ++{_daag .Data [_cbf ]=0xff;
_cbf ++;};if _egba > 0{_daag .Data [_cbf ]=_eafc (_daag .Data [_cbf ],0xff,_dbdd );};};case PixNotDst :for _abcd =0;_abcd < _ddeg ;_abcd ++{_cbf =_dedb +_abcd *_daag .BytesPerLine ;for _dbgfa =0;_dbgfa < _aaadc ;_dbgfa ++{_daag .Data [_cbf ]=^_daag .Data [_cbf ];
_cbf ++;};if _egba > 0{_daag .Data [_cbf ]=_eafc (_daag .Data [_cbf ],^_daag .Data [_cbf ],_dbdd );};};};};func _bb ()(_add [256]uint64 ){for _beb :=0;_beb < 256;_beb ++{if _beb &0x01!=0{_add [_beb ]|=0xff;};if _beb &0x02!=0{_add [_beb ]|=0xff00;};if _beb &0x04!=0{_add [_beb ]|=0xff0000;
};if _beb &0x08!=0{_add [_beb ]|=0xff000000;};if _beb &0x10!=0{_add [_beb ]|=0xff00000000;};if _beb &0x20!=0{_add [_beb ]|=0xff0000000000;};if _beb &0x40!=0{_add [_beb ]|=0xff000000000000;};if _beb &0x80!=0{_add [_beb ]|=0xff00000000000000;};};return _add ;
};func (_geaec *Monochrome )getBitAt (_eeaa ,_cgf int )bool {_cee :=_cgf *_geaec .BytesPerLine +(_eeaa >>3);_degg :=_eeaa &0x07;_cbg :=uint (7-_degg );if _cee > len (_geaec .Data )-1{return false ;};if (_geaec .Data [_cee ]>>_cbg )&0x01>=1{return true ;
};return false ;};func _cdbgb (_bcbgf _f .Image )(Image ,error ){if _afce ,_efbb :=_bcbgf .(*RGBA32 );_efbb {return _afce .Copy (),nil ;};_bdfeeb ,_dgee ,_bgfd :=_bgcg (_bcbgf ,1);_cde :=&RGBA32 {ImageBase :NewImageBase (_bdfeeb .Max .X ,_bdfeeb .Max .Y ,8,3,nil ,_bgfd ,nil )};
_gfff (_bcbgf ,_cde ,_bdfeeb );if len (_bgfd )!=0&&!_dgee {if _edca :=_eged (_bgfd ,_cde );_edca !=nil {return nil ,_edca ;};};return _cde ,nil ;};func _egfbbg (_gdg _f .Image )(Image ,error ){if _agcdf ,_adae :=_gdg .(*Monochrome );_adae {return _agcdf ,nil ;
};_abb :=_gdg .Bounds ();var _fgbb Gray ;switch _aeda :=_gdg .(type ){case Gray :_fgbb =_aeda ;case NRGBA :_fgbb =&Gray8 {ImageBase :NewImageBase (_abb .Max .X ,_abb .Max .Y ,8,1,nil ,nil ,nil )};_dcbf (_fgbb ,_aeda ,_abb );case nrgba64 :_fgbb =&Gray8 {ImageBase :NewImageBase (_abb .Max .X ,_abb .Max .Y ,8,1,nil ,nil ,nil )};
_afc (_fgbb ,_aeda ,_abb );default:_ccc ,_abfe :=GrayConverter .Convert (_gdg );if _abfe !=nil {return nil ,_abfe ;};_fgbb =_ccc .(Gray );};_gbd ,_ggfc :=NewImage (_abb .Max .X ,_abb .Max .Y ,1,1,nil ,nil ,nil );if _ggfc !=nil {return nil ,_ggfc ;};_aaea :=_gbd .(*Monochrome );
_fgf :=AutoThresholdTriangle (GrayHistogram (_fgbb ));for _ccde :=0;_ccde < _abb .Max .X ;_ccde ++{for _ggbg :=0;_ggbg < _abb .Max .Y ;_ggbg ++{_deg :=_deb (_fgbb .GrayAt (_ccde ,_ggbg ),monochromeModel (_fgf ));_aaea .SetGray (_ccde ,_ggbg ,_deg );};};
return _gbd ,nil ;};func _eaag (_gcgd _e .Gray )_e .Gray {_adcg :=_gcgd .Y >>6;_adcg |=_adcg <<2;_gcgd .Y =_adcg |_adcg <<4;return _gcgd ;};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_fcbc :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _fgaf Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_fgaf =&Monochrome {ImageBase :_fcbc ,ModelThreshold :0x0f};case 2:_fgaf =&Gray2 {ImageBase :_fcbc };case 4:_fgaf =&Gray4 {ImageBase :_fcbc };case 8:_fgaf =&Gray8 {ImageBase :_fcbc };
case 16:_fgaf =&Gray16 {ImageBase :_fcbc };};case 3:switch bitsPerComponent {case 4:_fgaf =&NRGBA16 {ImageBase :_fcbc };case 8:_fgaf =&NRGBA32 {ImageBase :_fcbc };case 16:_fgaf =&NRGBA64 {ImageBase :_fcbc };};case 4:_fgaf =&CMYK32 {ImageBase :_fcbc };};
if _fgaf ==nil {return nil ,ErrInvalidImage ;};return _fgaf ,nil ;};func (_edce *NRGBA64 )Set (x ,y int ,c _e .Color ){_bacg :=(y *_edce .Width +x )*2;_efbdb :=_bacg *3;if _efbdb +5>=len (_edce .Data ){return ;};_cdfab :=_e .NRGBA64Model .Convert (c ).(_e .NRGBA64 );
_edce .setNRGBA64 (_efbdb ,_cdfab ,_bacg );};func _cdge (_aeed _f .Image )(Image ,error ){if _bbbe ,_cba :=_aeed .(*NRGBA64 );_cba {return _bbbe .Copy (),nil ;};_adfb ,_acgd ,_cgdde :=_bgcg (_aeed ,2);_cfce ,_fgegc :=NewImage (_adfb .Max .X ,_adfb .Max .Y ,16,3,nil ,_cgdde ,nil );
if _fgegc !=nil {return nil ,_fgegc ;};_fddgb (_aeed ,_cfce ,_adfb );if len (_cgdde )!=0&&!_acgd {if _afcg :=_eged (_cgdde ,_cfce );_afcg !=nil {return nil ,_afcg ;};};return _cfce ,nil ;};var _dadd [256]uint8 ;func (_aaec *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gfgf (_aaec ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_cbeg *ImageBase )getByte (_cccf int )(byte ,error ){if _cccf > len (_cbeg .Data )-1||_cccf < 0{return 0,_bg .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_cccf );
};return _cbeg .Data [_cccf ],nil ;};var _ _f .Image =&Gray8 {};func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func _bdgf (_abdd _f .Image )(Image ,error ){if _bcdc ,_bbde :=_abdd .(*Gray4 );_bbde {return _bcdc .Copy (),nil ;};_bebbg :=_abdd .Bounds ();
_aff ,_gace :=NewImage (_bebbg .Max .X ,_bebbg .Max .Y ,4,1,nil ,nil ,nil );if _gace !=nil {return nil ,_gace ;};_gagb (_abdd ,_aff ,_bebbg );return _aff ,nil ;};func (_adec *Gray4 )GrayAt (x ,y int )_e .Gray {_dcbfe ,_ :=ColorAtGray4BPC (x ,y ,_adec .BytesPerLine ,_adec .Data ,_adec .Decode );
return _dcbfe ;};func _cgdd (_ccg _f .Image ,_bfb Image ,_feda _f .Rectangle ){for _dgb :=0;_dgb < _feda .Max .X ;_dgb ++{for _eeg :=0;_eeg < _feda .Max .Y ;_eeg ++{_fead :=_ccg .At (_dgb ,_eeg );_bfb .Set (_dgb ,_eeg ,_fead );};};};func _adegb (_cdca ,_bgagg uint8 )uint8 {if _cdca < _bgagg {return 255;
};return 0;};func _eae (_egg _e .CMYK )_e .Gray {_eed ,_cffg ,_bceb :=_e .CMYKToRGB (_egg .C ,_egg .M ,_egg .Y ,_egg .K );_adf :=(19595*uint32 (_eed )+38470*uint32 (_cffg )+7471*uint32 (_bceb )+1<<7)>>16;return _e .Gray {Y :uint8 (_adf )};};func (_caag *NRGBA16 )ColorModel ()_e .Model {return NRGBA16Model };
func _gfca (_bdbfe *_f .Gray )bool {for _bedd :=0;_bedd < len (_bdbfe .Pix );_bedd ++{if !_cgfg (_bdbfe .Pix [_bedd ]){return false ;};};return true ;};func _dfcf (_ggdb _e .NRGBA )_e .RGBA {_caec ,_aee ,_babb ,_eada :=_ggdb .RGBA ();return _e .RGBA {R :uint8 (_caec >>8),G :uint8 (_aee >>8),B :uint8 (_babb >>8),A :uint8 (_eada >>8)};
};func _eeed (_abda NRGBA ,_cbcb RGBA ,_decdg _f .Rectangle ){for _ffga :=0;_ffga < _decdg .Max .X ;_ffga ++{for _fcca :=0;_fcca < _decdg .Max .Y ;_fcca ++{_dccc :=_abda .NRGBAAt (_ffga ,_fcca );_cbcb .SetRGBA (_ffga ,_fcca ,_dfcf (_dccc ));};};};func IsGrayImgBlackAndWhite (i *_f .Gray )bool {return _gfca (i )};
func (_cdg *Monochrome )copy ()*Monochrome {_fedc :=_fa (_cdg .Width ,_cdg .Height );_fedc .ModelThreshold =_cdg .ModelThreshold ;_fedc .Data =make ([]byte ,len (_cdg .Data ));copy (_fedc .Data ,_cdg .Data );if len (_cdg .Decode )!=0{_fedc .Decode =make ([]float64 ,len (_cdg .Decode ));
copy (_fedc .Decode ,_cdg .Decode );};if len (_cdg .Alpha )!=0{_fedc .Alpha =make ([]byte ,len (_cdg .Alpha ));copy (_fedc .Alpha ,_cdg .Alpha );};return _fedc ;};func (_dadb *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_dadb .copy ()}};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;
};func _fbce (_bddg _e .Color )_e .Color {_agcf :=_e .GrayModel .Convert (_bddg ).(_e .Gray );return _bfgea (_agcf );};func (_gead *ImageBase )copy ()ImageBase {_cedc :=*_gead ;_cedc .Data =make ([]byte ,len (_gead .Data ));copy (_cedc .Data ,_gead .Data );
return _cedc ;};func _abddf (_aaffa _f .Image )(Image ,error ){if _bfccd ,_decf :=_aaffa .(*Gray16 );_decf {return _bfccd .Copy (),nil ;};_gfb :=_aaffa .Bounds ();_agf ,_ecab :=NewImage (_gfb .Max .X ,_gfb .Max .Y ,16,1,nil ,nil ,nil );if _ecab !=nil {return nil ,_ecab ;
};_gagb (_aaffa ,_agf ,_gfb );return _agf ,nil ;};func _ea (_bed ,_cfb *Monochrome )(_cec error ){_gca :=_cfb .BytesPerLine ;_bcba :=_bed .BytesPerLine ;_ef :=_cfb .BytesPerLine *4-_bed .BytesPerLine ;var (_ec ,_dff byte ;_dgf uint32 ;_cce ,_af ,_ffg ,_ba ,_fff ,_bga ,_cd int ;
);for _ffg =0;_ffg < _cfb .Height ;_ffg ++{_cce =_ffg *_gca ;_af =4*_ffg *_bcba ;for _ba =0;_ba < _gca ;_ba ++{_ec =_cfb .Data [_cce +_ba ];_dgf =_fdf [_ec ];_bga =_af +_ba *4;if _ef !=0&&(_ba +1)*4> _bed .BytesPerLine {for _fff =_ef ;_fff > 0;_fff --{_dff =byte ((_dgf >>uint (_fff *8))&0xff);
_cd =_bga +(_ef -_fff );if _cec =_bed .setByte (_cd ,_dff );_cec !=nil {return _cec ;};};}else if _cec =_bed .setFourBytes (_bga ,_dgf );_cec !=nil {return _cec ;};if _cec =_bed .setFourBytes (_af +_ba *4,_fdf [_cfb .Data [_cce +_ba ]]);_cec !=nil {return _cec ;
};};for _fff =1;_fff < 4;_fff ++{for _ba =0;_ba < _bcba ;_ba ++{if _cec =_bed .setByte (_af +_fff *_bcba +_ba ,_bed .Data [_af +_ba ]);_cec !=nil {return _cec ;};};};};return nil ;};type colorConverter struct{_beg func (_gfc _f .Image )(Image ,error );
};func (_bdba *NRGBA32 )NRGBAAt (x ,y int )_e .NRGBA {_gage ,_ :=ColorAtNRGBA32 (x ,y ,_bdba .Width ,_bdba .Data ,_bdba .Alpha ,_bdba .Decode );return _gage ;};func (_ddbf *NRGBA16 )Base ()*ImageBase {return &_ddbf .ImageBase };func (_aad *Monochrome )Histogram ()(_fcbd [256]int ){for _ ,_bca :=range _aad .Data {_fcbd [0xff]+=int (_dadd [_aad .Data [_bca ]]);
};return _fcbd ;};var _ NRGBA =&NRGBA16 {};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_e .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_bg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_aeec *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_aeec .copy ()}};func (_edea *RGBA32 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_edea .Width ,Y :_edea .Height }};};func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_e .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );
case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );
default:return nil ,_bg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_gfac *Gray2 )ColorModel ()_e .Model {return Gray2Model };type nrgba64 interface{NRGBA64At (_befb ,_ccag int )_e .NRGBA64 ;SetNRGBA64 (_cgcc ,_efca int ,_agbag _e .NRGBA64 );};func (_egca *CMYK32 )Set (x ,y int ,c _e .Color ){_cad :=4*(y *_egca .Width +x );
if _cad +3>=len (_egca .Data ){return ;};_gea :=_e .CMYKModel .Convert (c ).(_e .CMYK );_egca .Data [_cad ]=_gea .C ;_egca .Data [_cad +1]=_gea .M ;_egca .Data [_cad +2]=_gea .Y ;_egca .Data [_cad +3]=_gea .K ;};func (_edbe *Monochrome )IsUnpadded ()bool {return (_edbe .Width *_edbe .Height )==len (_edbe .Data )};
func (_faaf *NRGBA16 )NRGBAAt (x ,y int )_e .NRGBA {_cegf ,_ :=ColorAtNRGBA16 (x ,y ,_faaf .Width ,_faaf .BytesPerLine ,_faaf .Data ,_faaf .Alpha ,_faaf .Decode );return _cegf ;};func (_fagg *ImageBase )GetAlpha ()[]byte {return _fagg .Alpha };func (_egbb *Gray16 )GrayAt (x ,y int )_e .Gray {_adee ,_ :=_egbb .ColorAt (x ,y );
return _e .Gray {Y :uint8 (_adee .(_e .Gray16 ).Y >>8)};};func (_afcd *Gray16 )At (x ,y int )_e .Color {_ggab ,_ :=_afcd .ColorAt (x ,y );return _ggab };func _aaef (_fbc _e .NRGBA64 )_e .RGBA {_egbc ,_ggf ,_aaefd ,_gdaee :=_fbc .RGBA ();return _e .RGBA {R :uint8 (_egbc >>8),G :uint8 (_ggf >>8),B :uint8 (_aaefd >>8),A :uint8 (_gdaee >>8)};
};func (_gebeg *Gray8 )SetGray (x ,y int ,g _e .Gray ){_dcbcg :=y *_gebeg .BytesPerLine +x ;if _dcbcg > len (_gebeg .Data )-1{return ;};_gebeg .Data [_dcbcg ]=g .Y ;};func _bfgea (_bbg _e .Gray )_e .Gray {_bbg .Y >>=4;_bbg .Y |=_bbg .Y <<4;return _bbg };
func _cg (_gag *Monochrome ,_ded ,_eg int )(*Monochrome ,error ){if _gag ==nil {return nil ,_b .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ded <=0||_eg <=0{return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _ded ==_eg {if _ded ==1{return _gag .copy (),nil ;};if _ded ==2||_ded ==4||_ded ==8{_gac ,_ad :=_ff (_gag ,_ded );if _ad !=nil {return nil ,_ad ;};return _gac ,nil ;};};_gbc :=_ded *_gag .Width ;_fg :=_eg *_gag .Height ;_ag :=_fa (_gbc ,_fg );_dbf :=_ag .BytesPerLine ;
var (_ced ,_eca ,_bda ,_aecf ,_dgc int ;_ac byte ;_ceb error ;);for _eca =0;_eca < _gag .Height ;_eca ++{_ced =_eg *_eca *_dbf ;for _bda =0;_bda < _gag .Width ;_bda ++{if _ca :=_gag .getBitAt (_bda ,_eca );_ca {_dgc =_ded *_bda ;for _aecf =0;_aecf < _ded ;
_aecf ++{_ag .setIndexedBit (_ced *8+_dgc +_aecf );};};};for _aecf =1;_aecf < _eg ;_aecf ++{_dc :=_ced +_aecf *_dbf ;for _bgc :=0;_bgc < _dbf ;_bgc ++{if _ac ,_ceb =_ag .getByte (_ced +_bgc );_ceb !=nil {return nil ,_ceb ;};if _ceb =_ag .setByte (_dc +_bgc ,_ac );
_ceb !=nil {return nil ,_ceb ;};};};};return _ag ,nil ;};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_e .Gray ,error ){_cfdg :=y *bytesPerLine +x >>1;if _cfdg >=len (data ){return _e .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_dedd :=data [_cfdg ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_dedd =uint8 (uint32 (LinearInterpolate (float64 (_dedd ),0,15,decode [0],decode [1]))&0xf);};return _e .Gray {Y :_dedd *17&0xff},nil ;};func (_bece *Gray16 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtGray16BPC (x ,y ,_bece .BytesPerLine ,_bece .Data ,_bece .Decode );
};func (_faef *ImageBase )setEightFullBytes (_ecdf int ,_cgedb uint64 )error {if _ecdf +7> len (_faef .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_faef .Data [_ecdf ]=byte ((_cgedb &0xff00000000000000)>>56);
_faef .Data [_ecdf +1]=byte ((_cgedb &0xff000000000000)>>48);_faef .Data [_ecdf +2]=byte ((_cgedb &0xff0000000000)>>40);_faef .Data [_ecdf +3]=byte ((_cgedb &0xff00000000)>>32);_faef .Data [_ecdf +4]=byte ((_cgedb &0xff000000)>>24);_faef .Data [_ecdf +5]=byte ((_cgedb &0xff0000)>>16);
_faef .Data [_ecdf +6]=byte ((_cgedb &0xff00)>>8);_faef .Data [_ecdf +7]=byte (_cgedb &0xff);return nil ;};type Gray interface{GrayAt (_abfg ,_dac int )_e .Gray ;SetGray (_egfbb ,_bae int ,_acb _e .Gray );};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_e .Gray16 ,error ){_fddc :=(y *bytesPerLine /2+x )*2;
if _fddc +1>=len (data ){return _e .Gray16 {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gacd :=uint16 (data [_fddc ])<<8|uint16 (data [_fddc +1]);if len (decode )==2{_gacd =uint16 (uint64 (LinearInterpolate (float64 (_gacd ),0,65535,decode [0],decode [1])));};return _e .Gray16 {Y :_gacd },nil ;};func _bcb (_gb *Monochrome ,_gd int ,_dg []uint )(*Monochrome ,error ){_gbe :=_gd *_gb .Width ;
_c :=_gd *_gb .Height ;_cf :=_fa (_gbe ,_c );for _aec ,_ed :=range _dg {var _cc error ;switch _ed {case 2:_cc =_db (_cf ,_gb );case 4:_cc =_ea (_cf ,_gb );case 8:_cc =_cb (_cf ,_gb );};if _cc !=nil {return nil ,_cc ;};if _aec !=len (_dg )-1{_gb =_cf .copy ();
};};return _cf ,nil ;};func (_aebea *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_b .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_baaf :=_fa (width ,height );_bdg :=make ([]int ,height );_bba :=make ([]int ,width );_bfcf :=float64 (_aebea .Width )/float64 (width );_dgcf :=float64 (_aebea .Height )/float64 (height );for _dce :=0;_dce < height ;_dce ++{_bdg [_dce ]=int (_a .Min (_dgcf *float64 (_dce )+0.5,float64 (_aebea .Height -1)));
};for _bgbb :=0;_bgbb < width ;_bgbb ++{_bba [_bgbb ]=int (_a .Min (_bfcf *float64 (_bgbb )+0.5,float64 (_aebea .Width -1)));};_ecg :=-1;_begg :=byte (0);for _cgeg :=0;_cgeg < height ;_cgeg ++{_dfba :=_bdg [_cgeg ]*_aebea .BytesPerLine ;_fbb :=_cgeg *_baaf .BytesPerLine ;
for _aac :=0;_aac < width ;_aac ++{_feeb :=_bba [_aac ];if _feeb !=_ecg {_begg =_aebea .getBit (_dfba ,_feeb );if _begg !=0{_baaf .setBit (_fbb ,_aac );};_ecg =_feeb ;}else {if _begg !=0{_baaf .setBit (_fbb ,_aac );};};};};return _baaf ,nil ;};func (_gbcf *Gray8 )Set (x ,y int ,c _e .Color ){_egcb :=y *_gbcf .BytesPerLine +x ;
if _egcb > len (_gbcf .Data )-1{return ;};_fcba :=_e .GrayModel .Convert (c );_gbcf .Data [_egcb ]=_fcba .(_e .Gray ).Y ;};func (_dgagg *NRGBA32 )Set (x ,y int ,c _e .Color ){_badbf :=y *_dgagg .Width +x ;_gaba :=3*_badbf ;if _gaba +2>=len (_dgagg .Data ){return ;
};_aebb :=_e .NRGBAModel .Convert (c ).(_e .NRGBA );_dgagg .setRGBA (_badbf ,_aebb );};type NRGBA64 struct{ImageBase };func (_bdcg *NRGBA32 )ColorModel ()_e .Model {return _e .NRGBAModel };type Gray4 struct{ImageBase };var _ _f .Image =&Gray2 {};func _acg (_ebdc _e .Color )_e .Color {_bdfc :=_e .NRGBAModel .Convert (_ebdc ).(_e .NRGBA );
return _eegf (_bdfc );};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};var (MonochromeConverter =ConverterFunc (_egfbbg );Gray2Converter =ConverterFunc (_dfed );Gray4Converter =ConverterFunc (_bdgf );GrayConverter =ConverterFunc (_badb );Gray16Converter =ConverterFunc (_abddf );
NRGBA16Converter =ConverterFunc (_ccefg );NRGBAConverter =ConverterFunc (_fgdb );NRGBA64Converter =ConverterFunc (_cdge );RGBAConverter =ConverterFunc (_cdbgb );CMYKConverter =ConverterFunc (_egb ););func _ebc (_ccfe _e .Gray )_e .RGBA {return _e .RGBA {R :_ccfe .Y ,G :_ccfe .Y ,B :_ccfe .Y ,A :0xff}};
func _ceff (_bfdc _e .Gray )_e .NRGBA {return _e .NRGBA {R :_bfdc .Y ,G :_bfdc .Y ,B :_bfdc .Y ,A :0xff}};func _db (_ccd ,_gg *Monochrome )(_ab error ){_ce :=_gg .BytesPerLine ;_bd :=_ccd .BytesPerLine ;var (_feb byte ;_gc uint16 ;_ge ,_abd ,_ga ,_dge ,_bfe int ;
);for _ga =0;_ga < _gg .Height ;_ga ++{_ge =_ga *_ce ;_abd =2*_ga *_bd ;for _dge =0;_dge < _ce ;_dge ++{_feb =_gg .Data [_ge +_dge ];_gc =_fdc [_feb ];_bfe =_abd +_dge *2;if _ccd .BytesPerLine !=_gg .BytesPerLine *2&&(_dge +1)*2> _ccd .BytesPerLine {_ab =_ccd .setByte (_bfe ,byte (_gc >>8));
}else {_ab =_ccd .setTwoBytes (_bfe ,_gc );};if _ab !=nil {return _ab ;};};for _dge =0;_dge < _bd ;_dge ++{_bfe =_abd +_bd +_dge ;_feb =_ccd .Data [_abd +_dge ];if _ab =_ccd .setByte (_bfe ,_feb );_ab !=nil {return _ab ;};};};return nil ;};func (_cgbff *NRGBA16 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtNRGBA16 (x ,y ,_cgbff .Width ,_cgbff .BytesPerLine ,_cgbff .Data ,_cgbff .Alpha ,_cgbff .Decode );
};func (_bafb *Monochrome )Validate ()error {if len (_bafb .Data )!=_bafb .Height *_bafb .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_dcbcc *NRGBA64 )SetNRGBA64 (x ,y int ,c _e .NRGBA64 ){_abfd :=(y *_dcbcc .Width +x )*2;_dag :=_abfd *3;
if _dag +5>=len (_dcbcc .Data ){return ;};_dcbcc .setNRGBA64 (_dag ,c ,_abfd );};func (_gged monochromeModel )Convert (c _e .Color )_e .Color {_decc :=_e .GrayModel .Convert (c ).(_e .Gray );return _deb (_decc ,_gged );};func FromGoImage (i _f .Image )(Image ,error ){switch _dfcd :=i .(type ){case Image :return _dfcd .Copy (),nil ;
case Gray :return GrayConverter .Convert (i );case *_f .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_f .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};
func _ead (_gff ,_ccaf *Monochrome ,_ccef []byte ,_eea int )(_aaeg error ){var (_fc ,_cbc ,_dedc ,_adge ,_agc ,_dd ,_adaa ,_feg int ;_fda ,_fed ,_ffc ,_dda uint32 ;_caf ,_ccac byte ;_egc uint16 ;);_gcd :=make ([]byte ,4);_gef :=make ([]byte ,4);for _dedc =0;
_dedc < _gff .Height -1;_dedc ,_adge =_dedc +2,_adge +1{_fc =_dedc *_gff .BytesPerLine ;_cbc =_adge *_ccaf .BytesPerLine ;for _agc ,_dd =0,0;_agc < _eea ;_agc ,_dd =_agc +4,_dd +1{for _adaa =0;_adaa < 4;_adaa ++{_feg =_fc +_agc +_adaa ;if _feg <=len (_gff .Data )-1&&_feg < _fc +_gff .BytesPerLine {_gcd [_adaa ]=_gff .Data [_feg ];
}else {_gcd [_adaa ]=0x00;};_feg =_fc +_gff .BytesPerLine +_agc +_adaa ;if _feg <=len (_gff .Data )-1&&_feg < _fc +(2*_gff .BytesPerLine ){_gef [_adaa ]=_gff .Data [_feg ];}else {_gef [_adaa ]=0x00;};};_fda =_fb .BigEndian .Uint32 (_gcd );_fed =_fb .BigEndian .Uint32 (_gef );
_ffc =_fda &_fed ;_ffc |=_ffc <<1;_dda =_fda |_fed ;_dda &=_dda <<1;_fed =_ffc |_dda ;_fed &=0xaaaaaaaa;_fda =_fed |(_fed <<7);_caf =byte (_fda >>24);_ccac =byte ((_fda >>8)&0xff);_feg =_cbc +_dd ;if _feg +1==len (_ccaf .Data )-1||_feg +1>=_cbc +_ccaf .BytesPerLine {if _aaeg =_ccaf .setByte (_feg ,_ccef [_caf ]);
_aaeg !=nil {return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_feg );};}else {_egc =(uint16 (_ccef [_caf ])<<8)|uint16 (_ccef [_ccac ]);if _aaeg =_ccaf .setTwoBytes (_feg ,_egc );_aaeg !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_feg );
};_dd ++;};};};return nil ;};func (_cfda *RGBA32 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtRGBA32 (x ,y ,_cfda .Width ,_cfda .Data ,_cfda .Alpha ,_cfda .Decode );};func (_ffgga *NRGBA32 )At (x ,y int )_e .Color {_fdba ,_ :=_ffgga .ColorAt (x ,y );
return _fdba };func (_baad *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_baad .copy ()}};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_fbf :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _fbf ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_aeeb :=width *colorComponents *bitsPerComponent ;_dgcfc :=_fbf *8;_cgcf :=8-(_dgcfc -_aeeb );_ffcc :=_ae .NewReader (data );_gfcd :=_fbf -1;_bagf :=make ([]byte ,_gfcd );_cecf :=make ([]byte ,height *_fbf );
_bgfcf :=_ae .NewWriterMSB (_cecf );var _daec uint64 ;var _eadc error ;for _eaef :=0;_eaef < height ;_eaef ++{_ ,_eadc =_ffcc .Read (_bagf );if _eadc !=nil {return nil ,_eadc ;};_ ,_eadc =_bgfcf .Write (_bagf );if _eadc !=nil {return nil ,_eadc ;};_daec ,_eadc =_ffcc .ReadBits (byte (_cgcf ));
if _eadc !=nil {return nil ,_eadc ;};_ ,_eadc =_bgfcf .WriteBits (_daec ,_cgcf );if _eadc !=nil {return nil ,_eadc ;};_bgfcf .FinishByte ();};return _cecf ,nil ;};var _ _f .Image =&Gray16 {};func _gagb (_dccf _f .Image ,_ebed Image ,_cbeae _f .Rectangle ){switch _feab :=_dccf .(type ){case Gray :_gbb (_feab ,_ebed .(Gray ),_cbeae );
case NRGBA :_gebee (_feab ,_ebed .(Gray ),_cbeae );case CMYK :_ggbb (_feab ,_ebed .(Gray ),_cbeae );case RGBA :_gggg (_feab ,_ebed .(Gray ),_cbeae );default:_cgdd (_dccf ,_ebed .(Image ),_cbeae );};};func _cada (_bcgg *Monochrome ,_cacf ,_gcab ,_agef ,_bbac int ,_efdf RasterOperator ){if _cacf < 0{_agef +=_cacf ;
_cacf =0;};_ddcb :=_cacf +_agef -_bcgg .Width ;if _ddcb > 0{_agef -=_ddcb ;};if _gcab < 0{_bbac +=_gcab ;_gcab =0;};_eegd :=_gcab +_bbac -_bcgg .Height ;if _eegd > 0{_bbac -=_eegd ;};if _agef <=0||_bbac <=0{return ;};if (_cacf &7)==0{_gbgd (_bcgg ,_cacf ,_gcab ,_agef ,_bbac ,_efdf );
}else {_caca (_bcgg ,_cacf ,_gcab ,_agef ,_bbac ,_efdf );};};var _ _f .Image =&NRGBA64 {};var _ Gray =&Gray4 {};func (_bcggb *NRGBA16 )Set (x ,y int ,c _e .Color ){_fbee :=y *_bcggb .BytesPerLine +x *3/2;if _fbee +1>=len (_bcggb .Data ){return ;};_gdad :=NRGBA16Model .Convert (c ).(_e .NRGBA );
_bcggb .setNRGBA (x ,y ,_fbee ,_gdad );};func (_cfgf *ImageBase )HasAlpha ()bool {if _cfgf .Alpha ==nil {return false ;};for _ecabf :=range _cfgf .Alpha {if _cfgf .Alpha [_ecabf ]!=0xff{return true ;};};return false ;};func (_gdgc *RGBA32 )Set (x ,y int ,c _e .Color ){_bdee :=y *_gdgc .Width +x ;
_fab :=3*_bdee ;if _fab +2>=len (_gdgc .Data ){return ;};_abdf :=_e .RGBAModel .Convert (c ).(_e .RGBA );_gdgc .setRGBA (_bdee ,_abdf );};func (_bdbf *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_bdbf .copy ()}};func InDelta (expected ,current ,delta float64 )bool {_aaag :=expected -current ;
if _aaag <=-delta ||_aaag >=delta {return false ;};return true ;};func (_egcd *ImageBase )setEightBytes (_fbdd int ,_gcag uint64 )error {_ceda :=_egcd .BytesPerLine -(_fbdd %_egcd .BytesPerLine );if _egcd .BytesPerLine !=_egcd .Width >>3{_ceda --;};if _ceda >=8{return _egcd .setEightFullBytes (_fbdd ,_gcag );
};return _egcd .setEightPartlyBytes (_fbdd ,_ceda ,_gcag );};var _ Image =&NRGBA16 {};func _abe (_cdd _e .CMYK )_e .RGBA {_bce ,_bcgb ,_cbe :=_e .CMYKToRGB (_cdd .C ,_cdd .M ,_cdd .Y ,_cdd .K );return _e .RGBA {R :_bce ,G :_bcgb ,B :_cbe ,A :0xff};};func _agbc (_aggb Gray ,_fcfd NRGBA ,_aecfg _f .Rectangle ){for _dgfde :=0;
_dgfde < _aecfg .Max .X ;_dgfde ++{for _defa :=0;_defa < _aecfg .Max .Y ;_defa ++{_dafa :=_aggb .GrayAt (_dgfde ,_defa );_fcfd .SetNRGBA (_dgfde ,_defa ,_ceff (_dafa ));};};};func (_gbda *Gray4 )Histogram ()(_afd [256]int ){for _gfaf :=0;_gfaf < _gbda .Width ;
_gfaf ++{for _aeef :=0;_aeef < _gbda .Height ;_aeef ++{_afd [_gbda .GrayAt (_gfaf ,_aeef ).Y ]++;};};return _afd ;};func (_affc *ImageBase )Pix ()[]byte {return _affc .Data };func _bde (_cfc ,_ebe int ,_ffge []byte )*Monochrome {_addf :=_fa (_cfc ,_ebe );
_addf .Data =_ffge ;return _addf ;};func (_bge *CMYK32 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_bge .Width ,Y :_bge .Height }};};func _decd (_egfg _e .RGBA )_e .NRGBA {switch _egfg .A {case 0xff:return _e .NRGBA {R :_egfg .R ,G :_egfg .G ,B :_egfg .B ,A :0xff};
case 0x00:return _e .NRGBA {};default:_fcd ,_geae ,_dgbd ,_dea :=_egfg .RGBA ();_fcd =(_fcd *0xffff)/_dea ;_geae =(_geae *0xffff)/_dea ;_dgbd =(_dgbd *0xffff)/_dea ;return _e .NRGBA {R :uint8 (_fcd >>8),G :uint8 (_geae >>8),B :uint8 (_dgbd >>8),A :uint8 (_dea >>8)};
};};func _cdf ()(_da [256]uint32 ){for _gce :=0;_gce < 256;_gce ++{if _gce &0x01!=0{_da [_gce ]|=0xf;};if _gce &0x02!=0{_da [_gce ]|=0xf0;};if _gce &0x04!=0{_da [_gce ]|=0xf00;};if _gce &0x08!=0{_da [_gce ]|=0xf000;};if _gce &0x10!=0{_da [_gce ]|=0xf0000;
};if _gce &0x20!=0{_da [_gce ]|=0xf00000;};if _gce &0x40!=0{_da [_gce ]|=0xf000000;};if _gce &0x80!=0{_da [_gce ]|=0xf0000000;};};return _da ;};func _gfff (_agefb _f .Image ,_efe Image ,_gagd _f .Rectangle ){if _bfff ,_abde :=_agefb .(SMasker );_abde &&_bfff .HasAlpha (){_efe .(SMasker ).MakeAlpha ();
};switch _cecg :=_agefb .(type ){case Gray :_cabe (_cecg ,_efe .(RGBA ),_gagd );case NRGBA :_eeed (_cecg ,_efe .(RGBA ),_gagd );case *_f .NYCbCrA :_cgge (_cecg ,_efe .(RGBA ),_gagd );case CMYK :_eadf (_cecg ,_efe .(RGBA ),_gagd );case RGBA :_bdaa (_cecg ,_efe .(RGBA ),_gagd );
case nrgba64 :_cag (_cecg ,_efe .(RGBA ),_gagd );default:_cgdd (_agefb ,_efe ,_gagd );};};type Image interface{_g .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_faff ,_dgeg int )(_e .Color ,error );Validate ()error ;};func _deb (_gffg _e .Gray ,_bgbbb monochromeModel )_e .Gray {if _gffg .Y > uint8 (_bgbbb ){return _e .Gray {Y :_a .MaxUint8 };
};return _e .Gray {};};func (_fdbd *Monochrome )ColorModel ()_e .Model {return MonochromeModel (_fdbd .ModelThreshold )};func (_ffdc *NRGBA32 )Validate ()error {if len (_ffdc .Data )!=3*_ffdc .Width *_ffdc .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func ImgToBinary (i _f .Image ,threshold uint8 )*_f .Gray {switch _eagc :=i .(type ){case *_f .Gray :if _gfca (_eagc ){return _eagc ;};return _dbdcd (_eagc ,threshold );case *_f .Gray16 :return _aaagd (_eagc ,threshold );default:return _accd (_eagc ,threshold );
};};func _cabe (_fefb Gray ,_adbdd RGBA ,_adeb _f .Rectangle ){for _fcfg :=0;_fcfg < _adeb .Max .X ;_fcfg ++{for _egag :=0;_egag < _adeb .Max .Y ;_egag ++{_afcag :=_fefb .GrayAt (_fcfg ,_egag );_adbdd .SetRGBA (_fcfg ,_egag ,_ebc (_afcag ));};};};func (_bac *CMYK32 )ColorModel ()_e .Model {return _e .CMYKModel };
func (_egga *Gray16 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_egga .Width ,Y :_egga .Height }};};func (_dgag *NRGBA32 )Base ()*ImageBase {return &_dgag .ImageBase };func _gfg (_aef Gray ,_dee CMYK ,_fga _f .Rectangle ){for _gdcf :=0;
_gdcf < _fga .Max .X ;_gdcf ++{for _fea :=0;_fea < _fga .Max .Y ;_fea ++{_bbbf :=_aef .GrayAt (_gdcf ,_fea );_dee .SetCMYK (_gdcf ,_fea ,_ace (_bbbf ));};};};func (_cdc *NRGBA16 )setNRGBA (_ecgf ,_bcgbc ,_geg int ,_dadg _e .NRGBA ){if _ecgf *3%2==0{_cdc .Data [_geg ]=(_dadg .R >>4)<<4|(_dadg .G >>4);
_cdc .Data [_geg +1]=(_dadg .B >>4)<<4|(_cdc .Data [_geg +1]&0xf);}else {_cdc .Data [_geg ]=(_cdc .Data [_geg ]&0xf0)|(_dadg .R >>4);_cdc .Data [_geg +1]=(_dadg .G >>4)<<4|(_dadg .B >>4);};if _cdc .Alpha !=nil {_cedca :=_bcgbc *BytesPerLine (_cdc .Width ,4,1);
if _cedca < len (_cdc .Alpha ){if _ecgf %2==0{_cdc .Alpha [_cedca ]=(_dadg .A >>uint (4))<<uint (4)|(_cdc .Alpha [_geg ]&0xf);}else {_cdc .Alpha [_cedca ]=(_cdc .Alpha [_cedca ]&0xf0)|(_dadg .A >>uint (4));};};};};func _cb (_baf ,_cea *Monochrome )(_eab error ){_cfd :=_cea .BytesPerLine ;
_bcf :=_baf .BytesPerLine ;var _baa ,_bfd ,_cda ,_ecc ,_dbg int ;for _cda =0;_cda < _cea .Height ;_cda ++{_baa =_cda *_cfd ;_bfd =8*_cda *_bcf ;for _ecc =0;_ecc < _cfd ;_ecc ++{if _eab =_baf .setEightBytes (_bfd +_ecc *8,_efc [_cea .Data [_baa +_ecc ]]);
_eab !=nil {return _eab ;};};for _dbg =1;_dbg < 8;_dbg ++{for _ecc =0;_ecc < _bcf ;_ecc ++{if _eab =_baf .setByte (_bfd +_dbg *_bcf +_ecc ,_baf .Data [_bfd +_ecc ]);_eab !=nil {return _eab ;};};};};return nil ;};type shift int ;func (_cgg *Gray2 )Set (x ,y int ,c _e .Color ){if x >=_cgg .Width ||y >=_cgg .Height {return ;
};_bgbf :=Gray2Model .Convert (c ).(_e .Gray );_ebd :=y *_cgg .BytesPerLine ;_adgea :=_ebd +(x >>2);_gcdd :=_bgbf .Y >>6;_cgg .Data [_adgea ]=(_cgg .Data [_adgea ]&(^(0xc0>>uint (2*((x )&3)))))|(_gcdd <<uint (6-2*(x &3)));};func _fddgb (_ebgb _f .Image ,_adggf Image ,_bcea _f .Rectangle ){if _afad ,_aegbf :=_ebgb .(SMasker );
_aegbf &&_afad .HasAlpha (){_adggf .(SMasker ).MakeAlpha ();};_cgdd (_ebgb ,_adggf ,_bcea );};func (_fcac *Monochrome )ResolveDecode ()error {if len (_fcac .Decode )!=2{return nil ;};if _fcac .Decode [0]==1&&_fcac .Decode [1]==0{if _bcdf :=_fcac .InverseData ();
_bcdf !=nil {return _bcdf ;};_fcac .Decode =nil ;};return nil ;};type NRGBA16 struct{ImageBase };const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;
PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;
PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);var _ Image =&CMYK32 {};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_gcf (n )+1);
};var _ _f .Image =&NRGBA32 {};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _gfgf (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_gbgad *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_gbgad .copy ()}};
func (_fcea *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_fcea .ImageBase .copy (),ModelThreshold :_fcea .ModelThreshold };};func (_abf colorConverter )Convert (src _f .Image )(Image ,error ){return _abf ._beg (src )};func (_aegb *Gray16 )ColorModel ()_e .Model {return _e .Gray16Model };
func _gaf (_bfdd ,_gece *Monochrome ,_fag []byte ,_gacb int )(_efg error ){var (_gcdc ,_beaf ,_bcg ,_ecb ,_ccf ,_ccea ,_ffe ,_aag int ;_cdaf ,_cgd ,_daa ,_abg uint32 ;_aeb ,_agg byte ;_gde uint16 ;);_adga :=make ([]byte ,4);_eeaf :=make ([]byte ,4);for _bcg =0;
_bcg < _bfdd .Height -1;_bcg ,_ecb =_bcg +2,_ecb +1{_gcdc =_bcg *_bfdd .BytesPerLine ;_beaf =_ecb *_gece .BytesPerLine ;for _ccf ,_ccea =0,0;_ccf < _gacb ;_ccf ,_ccea =_ccf +4,_ccea +1{for _ffe =0;_ffe < 4;_ffe ++{_aag =_gcdc +_ccf +_ffe ;if _aag <=len (_bfdd .Data )-1&&_aag < _gcdc +_bfdd .BytesPerLine {_adga [_ffe ]=_bfdd .Data [_aag ];
}else {_adga [_ffe ]=0x00;};_aag =_gcdc +_bfdd .BytesPerLine +_ccf +_ffe ;if _aag <=len (_bfdd .Data )-1&&_aag < _gcdc +(2*_bfdd .BytesPerLine ){_eeaf [_ffe ]=_bfdd .Data [_aag ];}else {_eeaf [_ffe ]=0x00;};};_cdaf =_fb .BigEndian .Uint32 (_adga );_cgd =_fb .BigEndian .Uint32 (_eeaf );
_daa =_cdaf &_cgd ;_daa |=_daa <<1;_abg =_cdaf |_cgd ;_abg &=_abg <<1;_cgd =_daa &_abg ;_cgd &=0xaaaaaaaa;_cdaf =_cgd |(_cgd <<7);_aeb =byte (_cdaf >>24);_agg =byte ((_cdaf >>8)&0xff);_aag =_beaf +_ccea ;if _aag +1==len (_gece .Data )-1||_aag +1>=_beaf +_gece .BytesPerLine {if _efg =_gece .setByte (_aag ,_fag [_aeb ]);
_efg !=nil {return _bg .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aag );};}else {_gde =(uint16 (_fag [_aeb ])<<8)|uint16 (_fag [_agg ]);if _efg =_gece .setTwoBytes (_aag ,_gde );_efg !=nil {return _bg .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aag );
};_ccea ++;};};};return nil ;};func _dcbf (_agba Gray ,_daeb NRGBA ,_ddb _f .Rectangle ){for _ggbgb :=0;_ggbgb < _ddb .Max .X ;_ggbgb ++{for _fcef :=0;_fcef < _ddb .Max .Y ;_fcef ++{_bgea :=_aga (_daeb .NRGBAAt (_ggbgb ,_fcef ));_agba .SetGray (_ggbgb ,_fcef ,_bgea );
};};};func (_egdf *NRGBA64 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_egdf .Width ,Y :_egdf .Height }};};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_e .NRGBA64 ,error ){_bdgc :=(y *width +x )*2;
_eefd :=_bdgc *3;if _eefd +5>=len (data ){return _e .NRGBA64 {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _adgad =0xffff;_cdaa :=uint16 (_adgad );if alpha !=nil &&len (alpha )> _bdgc +1{_cdaa =uint16 (alpha [_bdgc ])<<8|uint16 (alpha [_bdgc +1]);};_bgebg :=uint16 (data [_eefd ])<<8|uint16 (data [_eefd +1]);_bdfee :=uint16 (data [_eefd +2])<<8|uint16 (data [_eefd +3]);
_aebgd :=uint16 (data [_eefd +4])<<8|uint16 (data [_eefd +5]);if len (decode )==6{_bgebg =uint16 (uint64 (LinearInterpolate (float64 (_bgebg ),0,65535,decode [0],decode [1]))&_adgad );_bdfee =uint16 (uint64 (LinearInterpolate (float64 (_bdfee ),0,65535,decode [2],decode [3]))&_adgad );
_aebgd =uint16 (uint64 (LinearInterpolate (float64 (_aebgd ),0,65535,decode [4],decode [5]))&_adgad );};return _e .NRGBA64 {R :_bgebg ,G :_bdfee ,B :_aebgd ,A :_cdaa },nil ;};func _cge (_aceb _e .NRGBA64 )_e .NRGBA {return _e .NRGBA {R :uint8 (_aceb .R >>8),G :uint8 (_aceb .G >>8),B :uint8 (_aceb .B >>8),A :uint8 (_aceb .A >>8)};
};var _ NRGBA =&NRGBA32 {};func (_caa *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_ccdc :=_gcf (uint (factor ));if !IsPowerOf2 (uint (factor )){_ccdc ++;};_fagd :=make ([]int ,_ccdc );for _ggad :=range _fagd {_fagd [_ggad ]=4;};_fdee ,_caff :=_gbeb (_caa ,_fagd ...);
if _caff !=nil {return nil ,_caff ;};return _fdee ,nil ;};func AutoThresholdTriangle (histogram [256]int )uint8 {var _ddfa ,_agggd ,_efea ,_fdgd int ;for _gefff :=0;_gefff < len (histogram );_gefff ++{if histogram [_gefff ]> 0{_ddfa =_gefff ;break ;};};
if _ddfa > 0{_ddfa --;};for _gcgac :=255;_gcgac > 0;_gcgac --{if histogram [_gcgac ]> 0{_fdgd =_gcgac ;break ;};};if _fdgd < 255{_fdgd ++;};for _eacb :=0;_eacb < 256;_eacb ++{if histogram [_eacb ]> _agggd {_efea =_eacb ;_agggd =histogram [_eacb ];};};var _eadcb bool ;
if (_efea -_ddfa )< (_fdgd -_efea ){_eadcb =true ;var _bfae int ;_bbcab :=255;for _bfae < _bbcab {_gdbb :=histogram [_bfae ];histogram [_bfae ]=histogram [_bbcab ];histogram [_bbcab ]=_gdbb ;_bfae ++;_bbcab --;};_ddfa =255-_fdgd ;_efea =255-_efea ;};if _ddfa ==_efea {return uint8 (_ddfa );
};_effg :=float64 (histogram [_efea ]);_cbbb :=float64 (_ddfa -_efea );_acbc :=_a .Sqrt (_effg *_effg +_cbbb *_cbbb );_effg /=_acbc ;_cbbb /=_acbc ;_acbc =_effg *float64 (_ddfa )+_cbbb *float64 (histogram [_ddfa ]);_ebea :=_ddfa ;var _bdea float64 ;for _fedg :=_ddfa +1;
_fedg <=_efea ;_fedg ++{_eegbf :=_effg *float64 (_fedg )+_cbbb *float64 (histogram [_fedg ])-_acbc ;if _eegbf > _bdea {_ebea =_fedg ;_bdea =_eegbf ;};};_ebea --;if _eadcb {var _cfggc int ;_dggg :=255;for _cfggc < _dggg {_fbbc :=histogram [_cfggc ];histogram [_cfggc ]=histogram [_dggg ];
histogram [_dggg ]=_fbbc ;_cfggc ++;_dggg --;};return uint8 (255-_ebea );};return uint8 (_ebea );};type Histogramer interface{Histogram ()[256]int ;};func _egb (_ege _f .Image )(Image ,error ){if _eaf ,_gbea :=_ege .(*CMYK32 );_gbea {return _eaf .Copy (),nil ;
};_bcgd :=_ege .Bounds ();_daaa ,_dfb :=NewImage (_bcgd .Max .X ,_bcgd .Max .Y ,8,4,nil ,nil ,nil );if _dfb !=nil {return nil ,_dfb ;};switch _agb :=_ege .(type ){case CMYK :_bafc (_agb ,_daaa .(CMYK ),_bcgd );case Gray :_gfg (_agb ,_daaa .(CMYK ),_bcgd );
case NRGBA :_egd (_agb ,_daaa .(CMYK ),_bcgd );case RGBA :_aaa (_agb ,_daaa .(CMYK ),_bcgd );default:_cgdd (_ege ,_daaa ,_bcgd );};return _daaa ,nil ;};func _bgcg (_fcgc _f .Image ,_gbbc int )(_f .Rectangle ,bool ,[]byte ){_bcbcg :=_fcgc .Bounds ();var (_aded bool ;
_dgba []byte ;);switch _ggdbc :=_fcgc .(type ){case SMasker :_aded =_ggdbc .HasAlpha ();case NRGBA ,RGBA ,*_f .RGBA64 ,nrgba64 ,*_f .NYCbCrA :_dgba =make ([]byte ,_bcbcg .Max .X *_bcbcg .Max .Y *_gbbc );case *_f .Paletted :var _acaf bool ;for _ ,_ffbb :=range _ggdbc .Palette {_cfbga ,_bfad ,_bfea ,_ecgb :=_ffbb .RGBA ();
if _cfbga ==0&&_bfad ==0&&_bfea ==0&&_ecgb !=0{_acaf =true ;break ;};};if _acaf {_dgba =make ([]byte ,_bcbcg .Max .X *_bcbcg .Max .Y *_gbbc );};};return _bcbcg ,_aded ,_dgba ;};func (_ccgbg *Gray4 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_ccgbg .Width ,Y :_ccgbg .Height }};
};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func _cedf (_aa int )[]uint {var _eb []uint ;_fgb :=_aa ;_cgb :=_fgb /8;if _cgb !=0{for _gcb :=0;_gcb < _cgb ;_gcb ++{_eb =append (_eb ,8);
};_efa :=_fgb %8;_fgb =0;if _efa !=0{_fgb =_efa ;};};_ade :=_fgb /4;if _ade !=0{for _bgb :=0;_bgb < _ade ;_bgb ++{_eb =append (_eb ,4);};_geb :=_fgb %4;_fgb =0;if _geb !=0{_fgb =_geb ;};};_dbd :=_fgb /2;if _dbd !=0{for _gcc :=0;_gcc < _dbd ;_gcc ++{_eb =append (_eb ,2);
};};return _eb ;};func _caca (_fbbg *Monochrome ,_gdf ,_cgdf int ,_aeff ,_edda int ,_ggcaf RasterOperator ){var (_bbbb bool ;_gdfg bool ;_cdgd int ;_gdfa int ;_bgge int ;_ffdd int ;_adgd bool ;_bdfe byte ;);_dgecd :=8-(_gdf &7);_beef :=_bdc [_dgecd ];_beaee :=_fbbg .BytesPerLine *_cgdf +(_gdf >>3);
if _aeff < _dgecd {_bbbb =true ;_beef &=_cfgc [8-_dgecd +_aeff ];};if !_bbbb {_cdgd =(_aeff -_dgecd )>>3;if _cdgd !=0{_gdfg =true ;_gdfa =_beaee +1;};};_bgge =(_gdf +_aeff )&7;if !(_bbbb ||_bgge ==0){_adgd =true ;_bdfe =_cfgc [_bgge ];_ffdd =_beaee +1+_cdgd ;
};var _ggfcc ,_gfbc int ;switch _ggcaf {case PixClr :for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{_fbbg .Data [_beaee ]=_eafc (_fbbg .Data [_beaee ],0x0,_beef );_beaee +=_fbbg .BytesPerLine ;};if _gdfg {for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{for _gfbc =0;_gfbc < _cdgd ;
_gfbc ++{_fbbg .Data [_gdfa +_gfbc ]=0x0;};_gdfa +=_fbbg .BytesPerLine ;};};if _adgd {for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{_fbbg .Data [_ffdd ]=_eafc (_fbbg .Data [_ffdd ],0x0,_bdfe );_ffdd +=_fbbg .BytesPerLine ;};};case PixSet :for _ggfcc =0;_ggfcc < _edda ;
_ggfcc ++{_fbbg .Data [_beaee ]=_eafc (_fbbg .Data [_beaee ],0xff,_beef );_beaee +=_fbbg .BytesPerLine ;};if _gdfg {for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{for _gfbc =0;_gfbc < _cdgd ;_gfbc ++{_fbbg .Data [_gdfa +_gfbc ]=0xff;};_gdfa +=_fbbg .BytesPerLine ;
};};if _adgd {for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{_fbbg .Data [_ffdd ]=_eafc (_fbbg .Data [_ffdd ],0xff,_bdfe );_ffdd +=_fbbg .BytesPerLine ;};};case PixNotDst :for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{_fbbg .Data [_beaee ]=_eafc (_fbbg .Data [_beaee ],^_fbbg .Data [_beaee ],_beef );
_beaee +=_fbbg .BytesPerLine ;};if _gdfg {for _ggfcc =0;_ggfcc < _edda ;_ggfcc ++{for _gfbc =0;_gfbc < _cdgd ;_gfbc ++{_fbbg .Data [_gdfa +_gfbc ]=^(_fbbg .Data [_gdfa +_gfbc ]);};_gdfa +=_fbbg .BytesPerLine ;};};if _adgd {for _ggfcc =0;_ggfcc < _edda ;
_ggfcc ++{_fbbg .Data [_ffdd ]=_eafc (_fbbg .Data [_ffdd ],^_fbbg .Data [_ffdd ],_bdfe );_ffdd +=_fbbg .BytesPerLine ;};};};};func (_ddcd *CMYK32 )SetCMYK (x ,y int ,c _e .CMYK ){_efd :=4*(y *_ddcd .Width +x );if _efd +3>=len (_ddcd .Data ){return ;};_ddcd .Data [_efd ]=c .C ;
_ddcd .Data [_efd +1]=c .M ;_ddcd .Data [_efd +2]=c .Y ;_ddcd .Data [_efd +3]=c .K ;};func (_bbaa *Monochrome )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_bbaa .Width ,Y :_bbaa .Height }};};func (_gge *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_bg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _ff (_gge ,factor );};func (_ecccda *RGBA32 )Validate ()error {if len (_ecccda .Data )!=3*_ecccda .Width *_ecccda .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _fcfdd (_fagdd nrgba64 ,_dbgad NRGBA ,_beggf _f .Rectangle ){for _faab :=0;_faab < _beggf .Max .X ;_faab ++{for _bbeaa :=0;_bbeaa < _beggf .Max .Y ;_bbeaa ++{_fcbag :=_fagdd .NRGBA64At (_faab ,_bbeaa );_dbgad .SetNRGBA (_faab ,_bbeaa ,_cge (_fcbag ));
};};};func (_befbb *NRGBA64 )Validate ()error {if len (_befbb .Data )!=3*2*_befbb .Width *_befbb .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_e .NRGBA ,error ){_gfef :=y *width +x ;_bbfg :=3*_gfef ;if _bbfg +2>=len (data ){return _e .NRGBA {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_geadd :=uint8 (0xff);if alpha !=nil &&len (alpha )> _gfef {_geadd =alpha [_gfef ];};_fbff ,_dedce ,_egce :=data [_bbfg ],data [_bbfg +1],data [_bbfg +2];if len (decode )==6{_fbff =uint8 (uint32 (LinearInterpolate (float64 (_fbff ),0,255,decode [0],decode [1]))&0xff);
_dedce =uint8 (uint32 (LinearInterpolate (float64 (_dedce ),0,255,decode [2],decode [3]))&0xff);_egce =uint8 (uint32 (LinearInterpolate (float64 (_egce ),0,255,decode [4],decode [5]))&0xff);};return _e .NRGBA {R :_fbff ,G :_dedce ,B :_egce ,A :_geadd },nil ;
};var _ _f .Image =&Gray4 {};func (_bfed *RGBA32 )Base ()*ImageBase {return &_bfed .ImageBase };func MonochromeModel (threshold uint8 )_e .Model {return monochromeModel (threshold )};func _gebe (_bcebg _e .RGBA )_e .Gray {_fefa :=(19595*uint32 (_bcebg .R )+38470*uint32 (_bcebg .G )+7471*uint32 (_bcebg .B )+1<<7)>>16;
return _e .Gray {Y :uint8 (_fefa )};};func (_ggabg *RGBA32 )RGBAAt (x ,y int )_e .RGBA {_gdfb ,_ :=ColorAtRGBA32 (x ,y ,_ggabg .Width ,_ggabg .Data ,_ggabg .Alpha ,_ggabg .Decode );return _gdfb ;};func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_e .RGBA ,error ){_gdfgg :=y *width +x ;
_eagg :=3*_gdfgg ;if _eagg +2>=len (data ){return _e .RGBA {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fgae :=uint8 (0xff);if alpha !=nil &&len (alpha )> _gdfgg {_fgae =alpha [_gdfgg ];};_agefa ,_gade ,_bbfe :=data [_eagg ],data [_eagg +1],data [_eagg +2];if len (decode )==6{_agefa =uint8 (uint32 (LinearInterpolate (float64 (_agefa ),0,255,decode [0],decode [1]))&0xff);
_gade =uint8 (uint32 (LinearInterpolate (float64 (_gade ),0,255,decode [2],decode [3]))&0xff);_bbfe =uint8 (uint32 (LinearInterpolate (float64 (_bbfe ),0,255,decode [4],decode [5]))&0xff);};return _e .RGBA {R :_agefa ,G :_gade ,B :_bbfe ,A :_fgae },nil ;
};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;MakeAlpha ();};func (_ffef *CMYK32 )Validate ()error {if len (_ffef .Data )!=4*_ffef .Width *_ffef .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _daca (_gddc int ,_fcf int )int {if _gddc < _fcf {return _gddc ;};return _fcf ;};func _dbdcd (_dbcb *_f .Gray ,_daeg uint8 )*_f .Gray {_bfcb :=_dbcb .Bounds ();_fggf :=_f .NewGray (_bfcb );for _gaae :=0;_gaae < _bfcb .Dx ();_gaae ++{for _bega :=0;
_bega < _bfcb .Dy ();_bega ++{_acca :=_dbcb .GrayAt (_gaae ,_bega );_fggf .SetGray (_gaae ,_bega ,_e .Gray {Y :_adegb (_acca .Y ,_daeg )});};};return _fggf ;};func _fdag (_efga _e .NYCbCrA )_e .NRGBA {_aceg :=int32 (_efga .Y )*0x10101;_aab :=int32 (_efga .Cb )-128;
_dba :=int32 (_efga .Cr )-128;_bbc :=_aceg +91881*_dba ;if uint32 (_bbc )&0xff000000==0{_bbc >>=8;}else {_bbc =^(_bbc >>31)&0xffff;};_eccg :=_aceg -22554*_aab -46802*_dba ;if uint32 (_eccg )&0xff000000==0{_eccg >>=8;}else {_eccg =^(_eccg >>31)&0xffff;};
_adac :=_aceg +116130*_aab ;if uint32 (_adac )&0xff000000==0{_adac >>=8;}else {_adac =^(_adac >>31)&0xffff;};return _e .NRGBA {R :uint8 (_bbc >>8),G :uint8 (_eccg >>8),B :uint8 (_adac >>8),A :_efga .A };};func (_fcab *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_fcab .copy ()}};
func (_bcef *Monochrome )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtGray1BPC (x ,y ,_bcef .BytesPerLine ,_bcef .Data ,_bcef .Decode );};func (_dbc *Gray4 )Validate ()error {if len (_dbc .Data )!=_dbc .Height *_dbc .BytesPerLine {return ErrInvalidImage ;
};return nil ;};var (Gray2Model =_e .ModelFunc (_bdab );Gray4Model =_e .ModelFunc (_fbce );NRGBA16Model =_e .ModelFunc (_acg ););func (_dcdb *NRGBA32 )Bounds ()_f .Rectangle {return _f .Rectangle {Max :_f .Point {X :_dcdb .Width ,Y :_dcdb .Height }};};
func (_gacc *RGBA32 )ColorModel ()_e .Model {return _e .NRGBAModel };func (_cdag *NRGBA64 )ColorModel ()_e .Model {return _e .NRGBA64Model };func (_adca *CMYK32 )ColorAt (x ,y int )(_e .Color ,error ){return ColorAtCMYK (x ,y ,_adca .Width ,_adca .Data ,_adca .Decode );
};func (_eecc *Monochrome )setGray (_ged int ,_gdcdc _e .Gray ,_dga int ){if _gdcdc .Y ==0{_eecc .clearBit (_dga ,_ged );}else {_eecc .setGrayBit (_dga ,_ged );};};func _bdab (_bbba _e .Color )_e .Color {_eaa :=_e .GrayModel .Convert (_bbba ).(_e .Gray );
return _eaag (_eaa );};type NRGBA32 struct{ImageBase };func _cgge (_dafd *_f .NYCbCrA ,_abgb RGBA ,_aedca _f .Rectangle ){for _fdga :=0;_fdga < _aedca .Max .X ;_fdga ++{for _ggee :=0;_ggee < _aedca .Max .Y ;_ggee ++{_fgfd :=_dafd .NYCbCrAAt (_fdga ,_ggee );
_abgb .SetRGBA (_fdga ,_ggee ,_gdae (_fgfd ));};};};func _gbeb (_gf *Monochrome ,_cab ...int )(_aae *Monochrome ,_ega error ){if _gf ==nil {return nil ,_b .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_cab )==0{return nil ,_b .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_ceg :=_bfg ();_aae =_gf ;for _ ,_bafe :=range _cab {if _bafe <=0{break ;};_aae ,_ega =_bbb (_aae ,_bafe ,_ceg );if _ega !=nil {return nil ,_ega ;};};return _aae ,nil ;};const (_ggba shift =iota ;_fafc ;);func (_ddbg *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _cefb bool ;
_geff :=scale ;if scale < 1{_geff =1/scale ;_cefb =true ;};_fgbe :=NextPowerOf2 (uint (_geff ));if InDelta (float64 (_fgbe ),_geff ,0.001){if _cefb {return _ddbg .ReduceBinary (_geff );};return _ddbg .ExpandBinary (int (_fgbe ));};_eaea :=int (_a .RoundToEven (float64 (_ddbg .Width )*scale ));
_ecad :=int (_a .RoundToEven (float64 (_ddbg .Height )*scale ));return _ddbg .ScaleLow (_eaea ,_ecad );};func ConverterFunc (converterFunc func (_dbdc _f .Image )(Image ,error ))ColorConverter {return colorConverter {_beg :converterFunc };};func (_fcc *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_fcc .copy ()}};
func _dgbg (_cecb _e .RGBA )_e .CMYK {_geaa ,_cdfb ,_eebb ,_daba :=_e .RGBToCMYK (_cecb .R ,_cecb .G ,_cecb .B );return _e .CMYK {C :_geaa ,M :_cdfb ,Y :_eebb ,K :_daba };};func _aga (_gafa _e .NRGBA )_e .Gray {var _bab _e .NRGBA ;if _gafa ==_bab {return _e .Gray {Y :0xff};
};_cdb ,_bbe ,_aaad ,_ :=_gafa .RGBA ();_cecc :=(19595*_cdb +38470*_bbe +7471*_aaad +1<<15)>>24;return _e .Gray {Y :uint8 (_cecc )};};func _ccae (_gbf _e .CMYK )_e .NRGBA {_fggb ,_cebe ,_bbbg :=_e .CMYKToRGB (_gbf .C ,_gbf .M ,_gbf .Y ,_gbf .K );return _e .NRGBA {R :_fggb ,G :_cebe ,B :_bbbg ,A :0xff};
};func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_e .Gray ,error ){_geaca :=y *bytesPerLine +x >>3;if _geaca >=len (data ){return _e .Gray {},_bg .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_gbff :=data [_geaca ]>>uint (7-(x &7))&1;if len (decode )==2{_gbff =uint8 (LinearInterpolate (float64 (_gbff ),0.0,1.0,decode [0],decode [1]))&1;};return _e .Gray {Y :_gbff *255},nil ;};type Gray2 struct{ImageBase };func (_aagg *CMYK32 )Base ()*ImageBase {return &_aagg .ImageBase };
var _ _f .Image =&NRGBA16 {};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gedd :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_gedd .Data =make ([]byte ,height *_gedd .BytesPerLine );};return _gedd ;};func _bfg ()(_faa []byte ){_faa =make ([]byte ,256);for _fae :=0;_fae < 256;_fae ++{_gbcb :=byte (_fae );_faa [_gbcb ]=(_gbcb &0x01)|((_gbcb &0x04)>>1)|((_gbcb &0x10)>>2)|((_gbcb &0x40)>>3)|((_gbcb &0x02)<<3)|((_gbcb &0x08)<<2)|((_gbcb &0x20)<<1)|(_gbcb &0x80);
};return _faa ;};func _gebee (_cgff NRGBA ,_eda Gray ,_abgf _f .Rectangle ){for _faf :=0;_faf < _abgf .Max .X ;_faf ++{for _abc :=0;_abc < _abgf .Max .Y ;_abc ++{_aeag :=_bfdg (_cgff .NRGBAAt (_faf ,_abc ));_eda .SetGray (_faf ,_abc ,_aeag );};};};func _cdbg (){for _ecga :=0;
_ecga < 256;_ecga ++{_dadd [_ecga ]=uint8 (_ecga &0x1)+(uint8 (_ecga >>1)&0x1)+(uint8 (_ecga >>2)&0x1)+(uint8 (_ecga >>3)&0x1)+(uint8 (_ecga >>4)&0x1)+(uint8 (_ecga >>5)&0x1)+(uint8 (_ecga >>6)&0x1)+(uint8 (_ecga >>7)&0x1);};};var _ Image =&Gray16 {};func ImgToGray (i _f .Image )*_f .Gray {if _fagda ,_gdfc :=i .(*_f .Gray );
_gdfc {return _fagda ;};_gdfag :=i .Bounds ();_bdebbc :=_f .NewGray (_gdfag );for _eega :=0;_eega < _gdfag .Max .X ;_eega ++{for _gba :=0;_gba < _gdfag .Max .Y ;_gba ++{_cbff :=i .At (_eega ,_gba );_bdebbc .Set (_eega ,_gba ,_cbff );};};return _bdebbc ;
};func (_cbea *Monochrome )GrayAt (x ,y int )_e .Gray {_fade ,_ :=ColorAtGray1BPC (x ,y ,_cbea .BytesPerLine ,_cbea .Data ,_cbea .Decode );return _fade ;};var (_cfgc =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_bdc =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
);func _gdae (_cbeb _e .NYCbCrA )_e .RGBA {_adgg ,_bcbf ,_gga ,_bfcc :=_fdag (_cbeb ).RGBA ();return _e .RGBA {R :uint8 (_adgg >>8),G :uint8 (_bcbf >>8),B :uint8 (_gga >>8),A :uint8 (_bfcc >>8)};};var _ Gray =&Gray8 {};func _bdaa (_eegbe ,_gcce RGBA ,_ffea _f .Rectangle ){for _adcb :=0;
_adcb < _ffea .Max .X ;_adcb ++{for _ceffe :=0;_ceffe < _ffea .Max .Y ;_ceffe ++{_gcce .SetRGBA (_adcb ,_ceffe ,_eegbe .RGBAAt (_adcb ,_ceffe ));};};};func (_eddb *Gray4 )At (x ,y int )_e .Color {_dcbe ,_ :=_eddb .ColorAt (x ,y );return _dcbe };func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_e .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_bg .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _gfgf (_faed *Monochrome ,_cac ,_bgcc ,_gebdc ,_cccd int ,_fccb RasterOperator ,_eege *Monochrome ,_cebc ,_cfdf int )error {if _faed ==nil {return _b .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _fccb ==PixDst {return nil ;};switch _fccb {case PixClr ,PixSet ,PixNotDst :_cada (_faed ,_cac ,_bgcc ,_gebdc ,_cccd ,_fccb );return nil ;};if _eege ==nil {_df .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _b .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ggfg :=_caba (_faed ,_cac ,_bgcc ,_gebdc ,_cccd ,_fccb ,_eege ,_cebc ,_cfdf );_ggfg !=nil {return _ggfg ;};return nil ;};