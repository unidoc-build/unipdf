//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_g "bufio";_de "bytes";_e "encoding/hex";_gb "errors";_d "fmt";_b "github.com/unidoc/unipdf/v3/common";_dea "github.com/unidoc/unipdf/v3/core";_dg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_f "io";_ee "sort";_c "strconv";
_ca "strings";_aa "unicode/utf16";);const (_fd =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )parseCodespaceRange ()error {for {_caa ,_ddf :=cmap .parseObject ();if _ddf !=nil {if _ddf ==_f .EOF {break ;};
return _ddf ;};_dbc ,_gcf :=_caa .(cmapHexString );if !_gcf {if _eagf ,_ecd :=_caa .(cmapOperand );_ecd {if _eagf .Operand ==_agf {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_caa ,_ddf =cmap .parseObject ();if _ddf !=nil {if _ddf ==_f .EOF {break ;};return _ddf ;};_bae ,_gcf :=_caa .(cmapHexString );if !_gcf {return _gb .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_dbc ._bbd )!=len (_bae ._bbd ){return _gb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_fegd :=_bgeb (_dbc );_bda :=_bgeb (_bae );if _bda < _fegd {_b .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_fegd ,_bda );
return ErrBadCMap ;};_bdbd :=_bae ._abfd ;_cgb :=Codespace {NumBytes :_bdbd ,Low :_fegd ,High :_bda };cmap ._fee =append (cmap ._fee ,_cgb );_b .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_fegd ,_bda );
};if len (cmap ._fee )==0{_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )parseType ()error {_cae :=0;
_fgf :=false ;for _agg :=0;_agg < 3&&!_fgf ;_agg ++{_daa ,_ege :=cmap .parseObject ();if _ege !=nil {return _ege ;};switch _caff :=_daa .(type ){case cmapOperand :switch _caff .Operand {case "\u0064\u0065\u0066":_fgf =true ;default:_b .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_daa );
return ErrBadCMap ;};case cmapInt :_cae =int (_caff ._gabeg );};};cmap ._fac =_cae ;return nil ;};func _abfb (_bcea string )rune {_bdb :=[]rune (_bcea );return _bdb [len (_bdb )-1]};func (_gcfb *cMapParser )parseNumber ()(cmapObject ,error ){_bfad ,_ggg :=_dea .ParseNumber (_gcfb ._cba );
if _ggg !=nil {return nil ,_ggg ;};switch _ddd :=_bfad .(type ){case *_dea .PdfObjectFloat :return cmapFloat {float64 (*_ddd )},nil ;case *_dea .PdfObjectInteger :return cmapInt {int64 (*_ddd )},nil ;};return nil ,_d .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bfad );
};func (cmap *CMap )parseSystemInfo ()error {_gfg :=false ;_aab :=false ;_gcba :="";_edeb :=false ;_ffe :=CIDSystemInfo {};for _eff :=0;_eff < 50&&!_edeb ;_eff ++{_gfbb ,_gabf :=cmap .parseObject ();if _gabf !=nil {return _gabf ;};switch _gdb :=_gfbb .(type ){case cmapDict :_gba :=_gdb .Dict ;
_cab ,_baa :=_gba ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_baa {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dgb ,_baa :=_cab .(cmapString );
if !_baa {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ffe .Registry =_dgb .String ;_cab ,_baa =_gba ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_baa {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dgb ,_baa =_cab .(cmapString );if !_baa {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ffe .Ordering =_dgb .String ;_eeee ,_baa :=_gba ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_baa {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bbg ,_baa :=_eeee .(cmapInt );if !_baa {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ffe .Supplement =int (_bbg ._gabeg );
_edeb =true ;case cmapOperand :switch _gdb .Operand {case "\u0062\u0065\u0067i\u006e":_gfg =true ;case "\u0065\u006e\u0064":_edeb =true ;case "\u0064\u0065\u0066":_aab =false ;};case cmapName :if _gfg {_gcba =_gdb .Name ;_aab =true ;};case cmapString :if _aab {switch _gcba {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_ffe .Registry =_gdb .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_ffe .Ordering =_gdb .String ;};};case cmapInt :if _aab {switch _gcba {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_ffe .Supplement =int (_gdb ._gabeg );};};};};if !_edeb {_b .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._cb =_ffe ;return nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gbbc ,_cfd :=cmap ._aad [code ];return _gbbc ,_cfd ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ebf ,_ce :=cmap ._ga [cid ];
return _ebf ,_ce ;};func (cmap *CMap )Type ()int {return cmap ._fac };func (cmap *CMap )WMode ()(int ,bool ){return cmap ._gfb ._bfe ,cmap ._gfb ._eacc };func (_ece *cMapParser )parseArray ()(cmapArray ,error ){_cedd :=cmapArray {};_cedd .Array =[]cmapObject {};
_ece ._cba .ReadByte ();for {_ece .skipSpaces ();_eab ,_agaf :=_ece ._cba .Peek (1);if _agaf !=nil {return _cedd ,_agaf ;};if _eab [0]==']'{_ece ._cba .ReadByte ();break ;};_dbdd ,_agaf :=_ece .parseObject ();if _agaf !=nil {return _cedd ,_agaf ;};_cedd .Array =append (_cedd .Array ,_dbdd );
};return _cedd ,nil ;};func (_cgdd *cMapParser )skipSpaces ()(int ,error ){_aee :=0;for {_efg ,_adgd :=_cgdd ._cba .Peek (1);if _adgd !=nil {return 0,_adgd ;};if _dea .IsWhiteSpace (_efg [0]){_cgdd ._cba .ReadByte ();_aee ++;}else {break ;};};return _aee ,nil ;
};func (cmap *CMap )parseCIDRange ()error {for {_bbf ,_ffea :=cmap .parseObject ();if _ffea !=nil {if _ffea ==_f .EOF {break ;};return _ffea ;};_bfg ,_acc :=_bbf .(cmapHexString );if !_acc {if _baae ,_fef :=_bbf .(cmapOperand );_fef {if _baae .Operand ==_dce {return nil ;
};return _gb .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_fgfe :=_bgeb (_bfg );
_bbf ,_ffea =cmap .parseObject ();if _ffea !=nil {if _ffea ==_f .EOF {break ;};return _ffea ;};_gga ,_acc :=_bbf .(cmapHexString );if !_acc {return _gb .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_bfg ._bbd )!=len (_gga ._bbd ){return _gb .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_cbbfb :=_bgeb (_gga );
if _fgfe > _cbbfb {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_fgfe ,_cbbfb );
return ErrBadCMap ;};_bbf ,_ffea =cmap .parseObject ();if _ffea !=nil {if _ffea ==_f .EOF {break ;};return _ffea ;};_fca ,_acc :=_bbf .(cmapInt );if !_acc {return _gb .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _fca ._gabeg < 0{return _gb .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_efd :=_fca ._gabeg ;for _bcd :=_fgfe ;_bcd <=_cbbfb ;_bcd ++{cmap ._aad [_bcd ]=CharCode (_efd );
_efd ++;};_b .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_fgfe ,_cbbfb ,_fca ._gabeg );};return nil ;};func IsPredefinedCMap (name string )bool {return _dg .AssetExists (name )};
const (_ecg ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_gfd ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_fbf ="\u0065n\u0064\u0063\u006d\u0061\u0070";_gfgc ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_agf ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_afa ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_eca ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_fad ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_ada ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_dgcb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_dce ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_febd ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_fdb ="\u0057\u004d\u006fd\u0065";_aga ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_daba ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gcgb ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);type cmapString struct{String string ;
};type cmapName struct{Name string ;};func _aeg (_dab string )string {_fbdb :=[]rune (_dab );_gcg :=make ([]string ,len (_fbdb ));for _ddbe ,_fde :=range _fbdb {_gcg [_ddbe ]=_d .Sprintf ("\u0025\u0030\u0034\u0078",_fde );};return _d .Sprintf ("\u003c\u0025\u0073\u003e",_ca .Join (_gcg ,""));
};type fbRange struct{_fb CharCode ;_bec CharCode ;_gbb string ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_bg *CIDSystemInfo )String ()string {return _d .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_bg .Registry ,_bg .Ordering ,_bg .Supplement );
};type cmapObject interface{};func (cmap *CMap )parse ()error {var _gae cmapObject ;for {_fbg ,_gabe :=cmap .parseObject ();if _gabe !=nil {if _gabe ==_f .EOF {break ;};_b .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_gabe );
return _gabe ;};switch _fda :=_fbg .(type ){case cmapOperand :_dbf :=_fda ;switch _dbf .Operand {case _gfgc :_adg :=cmap .parseCodespaceRange ();if _adg !=nil {return _adg ;};case _dgcb :_cfdfb :=cmap .parseCIDRange ();if _cfdfb !=nil {return _cfdfb ;};
case _afa :_afc :=cmap .parseBfchar ();if _afc !=nil {return _afc ;};case _fad :_daeb :=cmap .parseBfrange ();if _daeb !=nil {return _daeb ;};case _febd :if _gae ==nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_gg ,_cge :=_gae .(cmapName );if !_cge {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_gae );
return ErrBadCMap ;};cmap ._af =_gg .Name ;case _ecg :_edc :=cmap .parseSystemInfo ();if _edc !=nil {return _edc ;};};case cmapName :_age :=_fda ;switch _age .Name {case _ecg :_acgc :=cmap .parseSystemInfo ();if _acgc !=nil {return _acgc ;};case _aga :_eg :=cmap .parseName ();
if _eg !=nil {return _eg ;};case _daba :_beca :=cmap .parseType ();if _beca !=nil {return _beca ;};case _gcgb :_abe :=cmap .parseVersion ();if _abe !=nil {return _abe ;};case _fdb :if _gabe =cmap .parseWMode ();_gabe !=nil {return _gabe ;};};};_gae =_fbg ;
};return nil ;};func _gdg (_bfbd []byte )*cMapParser {_cac :=cMapParser {};_daed :=_de .NewBuffer (_bfbd );_cac ._cba =_g .NewReader (_daed );return &_cac ;};func (cmap *CMap )matchCode (_fec []byte )(_eag CharCode ,_bbc int ,_fcf bool ){for _ae :=0;_ae < _fd ;
_ae ++{if _ae < len (_fec ){_eag =_eag <<8|CharCode (_fec [_ae ]);_bbc ++;};_fcf =cmap .inCodespace (_eag ,_ae +1);if _fcf {return _eag ,_bbc ,true ;};};_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_fec ,string (_fec ),cmap );
return 0,0,false ;};func (cmap *CMap )NBits ()int {return cmap ._gf };func (cmap *CMap )Bytes ()[]byte {_b .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._bf )> 0{return cmap ._bf ;
};cmap ._bf =[]byte (_ca .Join ([]string {_eac ,cmap .toBfData (),_fdc },"\u000a"));return cmap ._bf ;};type CMap struct{*cMapParser ;_fe string ;_gf int ;_fac int ;_bga string ;_af string ;_cb CIDSystemInfo ;_fee []Codespace ;_aad map[CharCode ]CharCode ;
_ga map[CharCode ]CharCode ;_eec map[CharCode ]string ;_eea map[string ]CharCode ;_bf []byte ;_bef *_dea .PdfObjectStream ;_gfb integer ;};type cmapInt struct{_gabeg int64 };var (ErrBadCMap =_gb .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_gb .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_gb .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._cb };func _bcf (_ddea cmapHexString )[]rune {if len (_ddea ._bbd )==1{return []rune {rune (_ddea ._bbd [0])};};_bcda :=_ddea ._bbd ;if len (_bcda )%2!=0{_bcda =append (_bcda ,0);_b .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_ddea ,_bcda );
};_cdc :=len (_bcda )>>1;_ceaac :=make ([]uint16 ,_cdc );for _gbc :=0;_gbc < _cdc ;_gbc ++{_ceaac [_gbc ]=uint16 (_bcda [_gbc <<1])<<8+uint16 (_bcda [_gbc <<1+1]);};_dda :=_aa .Decode (_ceaac );return _dda ;};func (cmap *CMap )parseWMode ()error {var _eecc int ;
_cbe :=false ;for _dde :=0;_dde < 3&&!_cbe ;_dde ++{_ccbb ,_ceaa :=cmap .parseObject ();if _ceaa !=nil {return _ceaa ;};switch _dabg :=_ccbb .(type ){case cmapOperand :switch _dabg .Operand {case "\u0064\u0065\u0066":_cbe =true ;default:_b .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_ccbb );
return ErrBadCMap ;};case cmapInt :_eecc =int (_dabg ._gabeg );};};cmap ._gfb =integer {_eacc :true ,_bfe :_eecc };return nil ;};func _cgc ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};type Codespace struct{NumBytes int ;Low CharCode ;
High CharCode ;};func _gfgd (_gbf ,_ffd int )int {if _gbf < _ffd {return _gbf ;};return _ffd ;};func (cmap *CMap )parseBfrange ()error {for {var _aef CharCode ;_aaf ,_dfb :=cmap .parseObject ();if _dfb !=nil {if _dfb ==_f .EOF {break ;};return _dfb ;};
switch _ega :=_aaf .(type ){case cmapOperand :if _ega .Operand ==_ada {return nil ;};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_aef =_bgeb (_ega );default:return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _gaee CharCode ;_aaf ,_dfb =cmap .parseObject ();if _dfb !=nil {if _dfb ==_f .EOF {break ;};return _dfb ;};switch _aegg :=_aaf .(type ){case cmapOperand :_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_gaee =_bgeb (_aegg );if _gaee > 0xffff{_gaee =0xffff;};default:_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_aaf );return ErrBadCMap ;
};_aaf ,_dfb =cmap .parseObject ();if _dfb !=nil {if _dfb ==_f .EOF {break ;};return _dfb ;};switch _feda :=_aaf .(type ){case cmapArray :if len (_feda .Array )!=int (_gaee -_aef )+1{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _acf :=_aef ;_acf <=_gaee ;_acf ++{_fgga :=_feda .Array [_acf -_aef ];_gdc ,_aeb :=_fgga .(cmapHexString );if !_aeb {return _gb .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_dfde :=_bcf (_gdc );cmap ._eec [_acf ]=string (_dfde );};case cmapHexString :_fdcg :=_bcf (_feda );_acba :=len (_fdcg );for _ecc :=_aef ;_ecc <=_gaee ;_ecc ++{cmap ._eec [_ecc ]=string (_fdcg );if _acba > 0{_fdcg [_acba -1]++;}else {_b .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_ecc );
};if _ecc ==1<<32-1{break ;};};default:_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_aaf );return ErrBadCMap ;};};return nil ;};type integer struct{_eacc bool ;
_bfe int ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_deec ,_fdf :=cmap .BytesToCharcodes (data );if !_fdf {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_abg :=make ([]string ,len (_deec ));var _adb []CharCode ;for _fdg ,_bce :=range _deec {_aade ,_cfa :=cmap ._eec [_bce ];if !_cfa {_adb =append (_adb ,_bce );_aade =MissingCodeString ;};_abg [_fdg ]=_aade ;};_abgg :=_ca .Join (_abg ,"");if len (_adb )> 0{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_deec ,len (_adb ),_adb ,_abgg ,cmap );
};return _abgg ,len (_adb );};func (cmap *CMap )Stream ()(*_dea .PdfObjectStream ,error ){if cmap ._bef !=nil {return cmap ._bef ,nil ;};_cbd ,_fag :=_dea .MakeStream (cmap .Bytes (),_dea .NewFlateEncoder ());if _fag !=nil {return nil ,_fag ;};cmap ._bef =_cbd ;
return cmap ._bef ,nil ;};type cMapParser struct{_cba *_g .Reader };func (cmap *CMap )parseName ()error {_cfeb :="";_bge :=false ;for _cea :=0;_cea < 20&&!_bge ;_cea ++{_adgb ,_cce :=cmap .parseObject ();if _cce !=nil {return _cce ;};switch _cgd :=_adgb .(type ){case cmapOperand :switch _cgd .Operand {case "\u0064\u0065\u0066":_bge =true ;
default:_b .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_adgb ,_cfeb );
if _cfeb !=""{_cfeb =_d .Sprintf ("\u0025\u0073\u0020%\u0073",_cfeb ,_cgd .Operand );};_b .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_cfeb );
};case cmapName :_cfeb =_cgd .Name ;};};if !_bge {_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._fe =_cfeb ;return nil ;};func (_afag *cMapParser )parseObject ()(cmapObject ,error ){_afag .skipSpaces ();
for {_fefb ,_aea :=_afag ._cba .Peek (2);if _aea !=nil {return nil ,_aea ;};if _fefb [0]=='%'{_afag .parseComment ();_afag .skipSpaces ();continue ;}else if _fefb [0]=='/'{_cfgd ,_ggfg :=_afag .parseName ();return _cfgd ,_ggfg ;}else if _fefb [0]=='('{_cbab ,_acbc :=_afag .parseString ();
return _cbab ,_acbc ;}else if _fefb [0]=='['{_egf ,_efc :=_afag .parseArray ();return _egf ,_efc ;}else if (_fefb [0]=='<')&&(_fefb [1]=='<'){_egec ,_dbaa :=_afag .parseDict ();return _egec ,_dbaa ;}else if _fefb [0]=='<'{_dcf ,_cbdf :=_afag .parseHexString ();
return _dcf ,_cbdf ;}else if _dea .IsDecimalDigit (_fefb [0])||(_fefb [0]=='-'&&_dea .IsDecimalDigit (_fefb [1])){_aegb ,_bdg :=_afag .parseNumber ();if _bdg !=nil {return nil ,_bdg ;};return _aegb ,nil ;}else {_beb ,_bgaf :=_afag .parseOperand ();if _bgaf !=nil {return nil ,_bgaf ;
};return _beb ,nil ;};};};func _bgeb (_aag cmapHexString )CharCode {_ccc :=CharCode (0);for _ ,_aegf :=range _aag ._bbd {_ccc <<=8;_ccc |=CharCode (_aegf );};return _ccc ;};type cmapFloat struct{_geb float64 };func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_b .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_fed (isSimple );cmap .cMapParser =_gdg (data );_cc :=cmap .parse ();if _cc !=nil {return nil ,_cc ;};if len (cmap ._fee )==0{if cmap ._af !=""{return cmap ,nil ;};_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type cmapOperand struct{Operand string ;};func (_caae *cMapParser )parseOperand ()(cmapOperand ,error ){_gde :=cmapOperand {};_cdd :=_de .Buffer {};for {_eae ,_ddg :=_caae ._cba .Peek (1);
if _ddg !=nil {if _ddg ==_f .EOF {break ;};return _gde ,_ddg ;};if _dea .IsDelimiter (_eae [0]){break ;};if _dea .IsWhiteSpace (_eae [0]){break ;};_fgd ,_ :=_caae ._cba .ReadByte ();_cdd .WriteByte (_fgd );};if _cdd .Len ()==0{return _gde ,_d .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_gde .Operand =_cdd .String ();return _gde ,nil ;};func (_gdfc *cMapParser )parseDict ()(cmapDict ,error ){_b .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_bde :=_cgc ();_cfac ,_ :=_gdfc ._cba .ReadByte ();
if _cfac !='<'{return _bde ,ErrBadCMapDict ;};_cfac ,_ =_gdfc ._cba .ReadByte ();if _cfac !='<'{return _bde ,ErrBadCMapDict ;};for {_gdfc .skipSpaces ();_fbe ,_daae :=_gdfc ._cba .Peek (2);if _daae !=nil {return _bde ,_daae ;};if (_fbe [0]=='>')&&(_fbe [1]=='>'){_gdfc ._cba .ReadByte ();
_gdfc ._cba .ReadByte ();break ;};_abd ,_daae :=_gdfc .parseName ();_b .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_abd .Name );if _daae !=nil {_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_daae );
return _bde ,_daae ;};_gdfc .skipSpaces ();_afba ,_daae :=_gdfc .parseObject ();if _daae !=nil {return _bde ,_daae ;};_bde .Dict [_abd .Name ]=_afba ;_gdfc .skipSpaces ();_fbe ,_daae =_gdfc ._cba .Peek (3);if _daae !=nil {return _bde ,_daae ;};if string (_fbe )=="\u0064\u0065\u0066"{_gdfc ._cba .Discard (3);
};};return _bde ,nil ;};func (_effb *cMapParser )parseHexString ()(cmapHexString ,error ){_effb ._cba .ReadByte ();_bbfg :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_acce :=_de .Buffer {};for {_effb .skipSpaces ();_ccd ,_daac :=_effb ._cba .Peek (1);if _daac !=nil {return cmapHexString {},_daac ;};if _ccd [0]=='>'{_effb ._cba .ReadByte ();break ;};_fbb ,_ :=_effb ._cba .ReadByte ();if _de .IndexByte (_bbfg ,_fbb )>=0{_acce .WriteByte (_fbb );
};};if _acce .Len ()%2==1{_b .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_acce .String ());_acce .WriteByte ('0');};_gbe :=_acce .Len ()/2;
_ddba ,_ :=_e .DecodeString (_acce .String ());return cmapHexString {_abfd :_gbe ,_bbd :_ddba },nil ;};type charRange struct{_be CharCode ;_fa CharCode ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_df :=_eeab (name );if _df !=nil {return nil ,_df ;
};if cmap ._af ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_eed ,_df :=_eeab (cmap ._af );if _df !=nil {return nil ,_df ;};for _cbb ,_afg :=range _eed ._aad {if _ ,_cg :=cmap ._aad [_cbb ];!_cg {cmap ._aad [_cbb ]=_afg ;};};cmap ._fee =append (cmap ._fee ,_eed ._fee ...);
cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )inCodespace (_dca CharCode ,_fga int )bool {for _ ,_fea :=range cmap ._fee {if _fea .Low <=_dca &&_dca <=_fea .High &&_fga ==_fea .NumBytes {return true ;};};return false ;};type cmapHexString struct{_abfd int ;
_bbd []byte ;};func (cmap *CMap )Name ()string {return cmap ._fe };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bd []CharCode ;if cmap ._gf ==8{for _ ,_ffb :=range data {_bd =append (_bd ,CharCode (_ffb ));};return _bd ,true ;
};for _eee :=0;_eee < len (data );{_acb ,_cbbf ,_ffc :=cmap .matchCode (data [_eee :]);if !_ffc {_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_eee ,data ,string (data ));
return _bd ,false ;};_bd =append (_bd ,_acb );_eee +=_cbbf ;};return _bd ,true ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _db ,_gd :=cmap ._eec [code ];_gd {return _db ,true ;};return MissingCodeString ,false ;};const (_gdf =100;
_eac ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_fdc ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )computeInverseMappings (){for _eda ,_dgg :=range cmap ._aad {if _faa ,_ge :=cmap ._ga [_dgg ];!_ge ||(_ge &&_faa > _eda ){cmap ._ga [_dgg ]=_eda ;};};for _gfc ,_bee :=range cmap ._eec {if _fc ,_bc :=cmap ._eea [_bee ];!_bc ||(_bc &&_fc > _gfc ){cmap ._eea [_bee ]=_gfc ;
};};_ee .Slice (cmap ._fee ,func (_dc ,_fge int )bool {return cmap ._fee [_dc ].Low < cmap ._fee [_fge ].Low });};type CharCode uint32 ;func (cmap *CMap )toBfData ()string {if len (cmap ._eec )==0{return "";};_dae :=make ([]CharCode ,0,len (cmap ._eec ));
for _abf :=range cmap ._eec {_dae =append (_dae ,_abf );};_ee .Slice (_dae ,func (_ffbb ,_eaf int )bool {return _dae [_ffbb ]< _dae [_eaf ]});var _dag []charRange ;_fgc :=charRange {_dae [0],_dae [0]};_gab :=cmap ._eec [_dae [0]];for _ ,_dfd :=range _dae [1:]{_bgbb :=cmap ._eec [_dfd ];
if _dfd ==_fgc ._fa +1&&_abfb (_bgbb )==_abfb (_gab )+1{_fgc ._fa =_dfd ;}else {_dag =append (_dag ,_fgc );_fgc ._be ,_fgc ._fa =_dfd ,_dfd ;};_gab =_bgbb ;};_dag =append (_dag ,_fgc );var _bcc []CharCode ;var _abfc []fbRange ;for _ ,_dba :=range _dag {if _dba ._be ==_dba ._fa {_bcc =append (_bcc ,_dba ._be );
}else {_abfc =append (_abfc ,fbRange {_fb :_dba ._be ,_bec :_dba ._fa ,_gbb :cmap ._eec [_dba ._be ]});};};_b .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dag ),len (_bcc ),len (_abfc ));
var _bff []string ;if len (_bcc )> 0{_cfde :=(len (_bcc )+_gdf -1)/_gdf ;for _ddb :=0;_ddb < _cfde ;_ddb ++{_dbd :=_gfgd (len (_bcc )-_ddb *_gdf ,_gdf );_bff =append (_bff ,_d .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_dbd ));
for _cfg :=0;_cfg < _dbd ;_cfg ++{_bgc :=_bcc [_ddb *_gdf +_cfg ];_cfdf :=cmap ._eec [_bgc ];_bff =append (_bff ,_d .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_bgc ,_aeg (_cfdf )));};_bff =append (_bff ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_abfc )> 0{_gce :=(len (_abfc )+_gdf -1)/_gdf ;for _ef :=0;_ef < _gce ;_ef ++{_aba :=_gfgd (len (_abfc )-_ef *_gdf ,_gdf );_bff =append (_bff ,_d .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_aba ));
for _adf :=0;_adf < _aba ;_adf ++{_ecf :=_abfc [_ef *_gdf +_adf ];_bff =append (_bff ,_d .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_ecf ._fb ,_ecf ._bec ,_aeg (_ecf ._gbb )));};_bff =append (_bff ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _ca .Join (_bff ,"\u000a");};func (_eagc *cMapParser )parseComment ()(string ,error ){var _fgac _de .Buffer ;_ ,_daf :=_eagc .skipSpaces ();if _daf !=nil {return _fgac .String (),_daf ;};_afgd :=true ;for {_fadd ,_bca :=_eagc ._cba .Peek (1);
if _bca !=nil {_b .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_bca );return _fgac .String (),_bca ;};if _afgd &&_fadd [0]!='%'{return _fgac .String (),ErrBadCMapComment ;};_afgd =false ;
if (_fadd [0]!='\r')&&(_fadd [0]!='\n'){_aaa ,_ :=_eagc ._cba .ReadByte ();_fgac .WriteByte (_aaa );}else {break ;};};return _fgac .String (),nil ;};func NewCIDSystemInfo (obj _dea .PdfObject )(_fg CIDSystemInfo ,_eb error ){_ab ,_ad :=_dea .GetDict (obj );
if !_ad {return CIDSystemInfo {},_dea .ErrTypeError ;};_bed ,_ad :=_dea .GetStringVal (_ab .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ad {return CIDSystemInfo {},_dea .ErrTypeError ;};_da ,_ad :=_dea .GetStringVal (_ab .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_ad {return CIDSystemInfo {},_dea .ErrTypeError ;};_ea ,_ad :=_dea .GetIntVal (_ab .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ad {return CIDSystemInfo {},_dea .ErrTypeError ;};return CIDSystemInfo {Registry :_bed ,Ordering :_da ,Supplement :_ea },nil ;
};func _ecff (_gcef cmapHexString )rune {_cgad :=_bcf (_gcef );if _gdec :=len (_cgad );_gdec ==0{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_gcef );
return MissingCodeRune ;};if len (_cgad )> 1{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_gcef ,_cgad );
};return _cgad [0];};func (cmap *CMap )String ()string {_abc :=cmap ._cb ;_ba :=[]string {_d .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._gf ),_d .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._fac )};if cmap ._bga !=""{_ba =append (_ba ,_d .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._bga ));
};if cmap ._af !=""{_ba =append (_ba ,_d .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._af ));};_ba =append (_ba ,_d .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_abc .String ()));
if len (cmap ._fee )> 0{_ba =append (_ba ,_d .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._fee )));};if len (cmap ._eec )> 0{_ba =append (_ba ,_d .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._eec )));
};return _d .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._fe ,_ca .Join (_ba ,"\u0020"));};func _eeab (_feb string )(*CMap ,error ){_ed ,_dd :=_dg .Asset (_feb );if _dd !=nil {return nil ,_dd ;};return LoadCmapFromDataCID (_ed );
};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_dee :=make (map[CharCode ]string ,len (codeToRune ));for _ag ,_ac :=range codeToRune {_dee [_ag ]=string (_ac );};cmap :=&CMap {_fe :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_fac :2,_gf :16,_cb :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_fee :[]Codespace {{Low :0,High :0xffff}},_eec :_dee ,_eea :make (map[string ]CharCode ,len (codeToRune )),_aad :make (map[CharCode ]CharCode ,len (codeToRune )),_ga :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )parseBfchar ()error {for {_ged ,_fdd :=cmap .parseObject ();if _fdd !=nil {if _fdd ==_f .EOF {break ;};return _fdd ;};var _bea CharCode ;switch _deeg :=_ged .(type ){case cmapOperand :if _deeg .Operand ==_eca {return nil ;
};return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bea =_bgeb (_deeg );default:return _gb .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_ged ,_fdd =cmap .parseObject ();if _fdd !=nil {if _fdd ==_f .EOF {break ;};return _fdd ;};var _cfca []rune ;switch _gfgf :=_ged .(type ){case cmapOperand :if _gfgf .Operand ==_eca {return nil ;};_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_gfgf );
return ErrBadCMap ;case cmapHexString :_cfca =_bcf (_gfgf );case cmapName :_b .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_gfgf );_cfca =[]rune {MissingCodeRune };
default:_b .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_ged );return ErrBadCMap ;};cmap ._eec [_bea ]=string (_cfca );};return nil ;};type cmapArray struct{Array []cmapObject ;
};func (_gcgba *cMapParser )parseName ()(cmapName ,error ){_faae :="";_eba :=false ;for {_acd ,_bad :=_gcgba ._cba .Peek (1);if _bad ==_f .EOF {break ;};if _bad !=nil {return cmapName {_faae },_bad ;};if !_eba {if _acd [0]=='/'{_eba =true ;_gcgba ._cba .ReadByte ();
}else {_b .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_acd ,_acd );return cmapName {_faae },_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_acd [0]);
};}else {if _dea .IsWhiteSpace (_acd [0]){break ;}else if (_acd [0]=='/')||(_acd [0]=='[')||(_acd [0]=='(')||(_acd [0]==']')||(_acd [0]=='<')||(_acd [0]=='>'){break ;}else if _acd [0]=='#'{_fbfd ,_bcee :=_gcgba ._cba .Peek (3);if _bcee !=nil {return cmapName {_faae },_bcee ;
};_gcgba ._cba .Discard (3);_cga ,_bcee :=_e .DecodeString (string (_fbfd [1:3]));if _bcee !=nil {return cmapName {_faae },_bcee ;};_faae +=string (_cga );}else {_caeg ,_ :=_gcgba ._cba .ReadByte ();_faae +=string (_caeg );};};};return cmapName {_faae },nil ;
};func _fed (_gaa bool )*CMap {_fba :=16;if _gaa {_fba =8;};return &CMap {_gf :_fba ,_aad :make (map[CharCode ]CharCode ),_ga :make (map[CharCode ]CharCode ),_eec :make (map[CharCode ]string ),_eea :make (map[string ]CharCode )};};func (cmap *CMap )parseVersion ()error {_bfb :="";
_gfa :=false ;for _bdd :=0;_bdd < 3&&!_gfa ;_bdd ++{_cfc ,_cad :=cmap .parseObject ();if _cad !=nil {return _cad ;};switch _bddc :=_cfc .(type ){case cmapOperand :switch _bddc .Operand {case "\u0064\u0065\u0066":_gfa =true ;default:_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cfc );
return ErrBadCMap ;};case cmapInt :_bfb =_d .Sprintf ("\u0025\u0064",_bddc ._gabeg );case cmapFloat :_bfb =_d .Sprintf ("\u0025\u0066",_bddc ._geb );case cmapString :_bfb =_bddc .String ;default:_b .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cfc );
};};cmap ._bga =_bfb ;return nil ;};func (_ceeg *cMapParser )parseString ()(cmapString ,error ){_ceeg ._cba .ReadByte ();_ffg :=_de .Buffer {};_caed :=1;for {_geaa ,_bcgd :=_ceeg ._cba .Peek (1);if _bcgd !=nil {return cmapString {_ffg .String ()},_bcgd ;
};if _geaa [0]=='\\'{_ceeg ._cba .ReadByte ();_dada ,_bac :=_ceeg ._cba .ReadByte ();if _bac !=nil {return cmapString {_ffg .String ()},_bac ;};if _dea .IsOctalDigit (_dada ){_cd ,_aeaf :=_ceeg ._cba .Peek (2);if _aeaf !=nil {return cmapString {_ffg .String ()},_aeaf ;
};var _cgf []byte ;_cgf =append (_cgf ,_dada );for _ ,_bced :=range _cd {if _dea .IsOctalDigit (_bced ){_cgf =append (_cgf ,_bced );}else {break ;};};_ceeg ._cba .Discard (len (_cgf )-1);_b .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_cgf );
_ebe ,_aeaf :=_c .ParseUint (string (_cgf ),8,32);if _aeaf !=nil {return cmapString {_ffg .String ()},_aeaf ;};_ffg .WriteByte (byte (_ebe ));continue ;};switch _dada {case 'n':_ffg .WriteByte ('\n');case 'r':_ffg .WriteByte ('\r');case 't':_ffg .WriteByte ('\t');
case 'b':_ffg .WriteByte ('\b');case 'f':_ffg .WriteByte ('\f');case '(':_ffg .WriteByte ('(');case ')':_ffg .WriteByte (')');case '\\':_ffg .WriteByte ('\\');};continue ;}else if _geaa [0]=='('{_caed ++;}else if _geaa [0]==')'{_caed --;if _caed ==0{_ceeg ._cba .ReadByte ();
break ;};};_gfda ,_ :=_ceeg ._cba .ReadByte ();_ffg .WriteByte (_gfda );};return cmapString {_ffg .String ()},nil ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_afb ,_fcb :=cmap ._eea [s ];
return _afb ,_fcb ;};