//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_bf "bufio";_b "bytes";_fc "encoding/hex";_ee "errors";_c "fmt";_eg "github.com/unidoc/unipdf/v3/common";_fcd "github.com/unidoc/unipdf/v3/core";_fe "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_bg "io";_be "sort";_a "strconv";
_af "strings";_f "unicode/utf16";);func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _gfc []CharCode ;if cmap ._ed ==8{for _ ,_fca :=range data {_gfc =append (_gfc ,CharCode (_fca ));};return _gfc ,true ;};for _ag :=0;_ag < len (data );
{_ea ,_gcg ,_fdd :=cmap .matchCode (data [_ag :]);if !_fdd {_eg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ag ,data ,string (data ));
return _gfc ,false ;};_gfc =append (_gfc ,_ea );_ag +=_gcg ;};return _gfc ,true ;};func (_cccf *cMapParser )parseNumber ()(cmapObject ,error ){_cae ,_bcc :=_fcd .ParseNumber (_cccf ._bdd );if _bcc !=nil {return nil ,_bcc ;};switch _ded :=_cae .(type ){case *_fcd .PdfObjectFloat :return cmapFloat {float64 (*_ded )},nil ;
case *_fcd .PdfObjectInteger :return cmapInt {int64 (*_ded )},nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cae );};func (cmap *CMap )String ()string {_cag :=cmap ._ebc ;
_bcb :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ed ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._de )};if cmap ._baa !=""{_bcb =append (_bcb ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._baa ));
};if cmap ._bee !=""{_bcb =append (_bcb ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._bee ));};_bcb =append (_bcb ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_cag .String ()));
if len (cmap ._gcb )> 0{_bcb =append (_bcb ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._gcb )));};if len (cmap ._ebe )> 0{_bcb =append (_bcb ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._ebe )));
};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cf ,_af .Join (_bcb ,"\u0020"));};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_eg .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_ca (isSimple );cmap .cMapParser =_age (data );_fge :=cmap .parse ();if _fge !=nil {return nil ,_fge ;};if len (cmap ._gcb )==0{if cmap ._bee !=""{return cmap ,nil ;};_eg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func _feb (_gdeb cmapHexString )rune {_gded :=_cede (_gdeb );if _dgf :=len (_gded );_dgf ==0{_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_gdeb );
return MissingCodeRune ;};if len (_gded )> 1{_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_gdeb ,_gded );
};return _gded [0];};func (cmap *CMap )Name ()string {return cmap ._cf };func (cmap *CMap )matchCode (_dcg []byte )(_bdb CharCode ,_cbb int ,_geef bool ){for _fac :=0;_fac < _bb ;_fac ++{if _fac < len (_dcg ){_bdb =_bdb <<8|CharCode (_dcg [_fac ]);_cbb ++;
};_geef =cmap .inCodespace (_bdb ,_fac +1);if _geef {return _bdb ,_cbb ,true ;};};_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dcg ,string (_dcg ),cmap );
return 0,0,false ;};const (_bb =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )parseCodespaceRange ()error {for {_ddg ,_bfb :=cmap .parseObject ();if _bfb !=nil {if _bfb ==_bg .EOF {break ;};return _bfb ;};
_fdf ,_bdbg :=_ddg .(cmapHexString );if !_bdbg {if _eegg ,_ad :=_ddg .(cmapOperand );_ad {if _eegg .Operand ==_adc {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ddg ,_bfb =cmap .parseObject ();
if _bfb !=nil {if _bfb ==_bg .EOF {break ;};return _bfb ;};_ffd ,_bdbg :=_ddg .(cmapHexString );if !_bdbg {return _ee .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fdf ._eebc )!=len (_ffd ._eebc ){return _ee .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gdee :=_ffg (_fdf );_dfa :=_ffg (_ffd );if _dfa < _gdee {_eg .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gdee ,_dfa );
return ErrBadCMap ;};_bae :=_ffd ._deda ;_aed :=Codespace {NumBytes :_bae ,Low :_gdee ,High :_dfa };cmap ._gcb =append (cmap ._gcb ,_aed );_eg .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gdee ,_dfa );
};if len (cmap ._gcb )==0{_eg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type CMap struct{*cMapParser ;
_cf string ;_ed int ;_de int ;_baa string ;_bee string ;_ebc CIDSystemInfo ;_gcb []Codespace ;_edb map[CharCode ]CharCode ;_bea map[CharCode ]CharCode ;_ebe map[CharCode ]string ;_bbd map[string ]CharCode ;_bbe []byte ;_gb *_fcd .PdfObjectStream ;};func (cmap *CMap )parseBfchar ()error {for {_cfd ,_bcg :=cmap .parseObject ();
if _bcg !=nil {if _bcg ==_bg .EOF {break ;};return _bcg ;};var _abb CharCode ;switch _feg :=_cfd .(type ){case cmapOperand :if _feg .Operand ==_cdad {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_abb =_ffg (_feg );default:return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_cfd ,_bcg =cmap .parseObject ();if _bcg !=nil {if _bcg ==_bg .EOF {break ;};return _bcg ;};var _bcbe []rune ;
switch _ede :=_cfd .(type ){case cmapOperand :if _ede .Operand ==_cdad {return nil ;};_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ede );
return ErrBadCMap ;case cmapHexString :_bcbe =_cede (_ede );case cmapName :_eg .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ede );_bcbe =[]rune {MissingCodeRune };
default:_eg .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_cfd );return ErrBadCMap ;};cmap ._ebe [_abb ]=string (_bcbe );};return nil ;};func (_fab *cMapParser )parseOperand ()(cmapOperand ,error ){_bfdg :=cmapOperand {};
_cdge :=_b .Buffer {};for {_bdfb ,_cgb :=_fab ._bdd .Peek (1);if _cgb !=nil {if _cgb ==_bg .EOF {break ;};return _bfdg ,_cgb ;};if _fcd .IsDelimiter (_bdfb [0]){break ;};if _fcd .IsWhiteSpace (_bdfb [0]){break ;};_dfda ,_ :=_fab ._bdd .ReadByte ();_cdge .WriteByte (_dfda );
};if _cdge .Len ()==0{return _bfdg ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_bfdg .Operand =_cdge .String ();return _bfdg ,nil ;};func (cmap *CMap )parseBfrange ()error {for {var _daeb CharCode ;
_fbf ,_gebd :=cmap .parseObject ();if _gebd !=nil {if _gebd ==_bg .EOF {break ;};return _gebd ;};switch _eac :=_fbf .(type ){case cmapOperand :if _eac .Operand ==_bbb {return nil ;};return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_daeb =_ffg (_eac );default:return _ee .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _dag CharCode ;_fbf ,_gebd =cmap .parseObject ();if _gebd !=nil {if _gebd ==_bg .EOF {break ;};return _gebd ;
};switch _daba :=_fbf .(type ){case cmapOperand :_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_dag =_ffg (_daba );default:_eg .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_fbf );return ErrBadCMap ;};_fbf ,_gebd =cmap .parseObject ();
if _gebd !=nil {if _gebd ==_bg .EOF {break ;};return _gebd ;};switch _edce :=_fbf .(type ){case cmapArray :if len (_edce .Array )!=int (_dag -_daeb )+1{_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _gcbb :=_daeb ;_gcbb <=_dag ;_gcbb ++{_ebeb :=_edce .Array [_gcbb -_daeb ];_gada ,_ddde :=_ebeb .(cmapHexString );if !_ddde {return _ee .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_gfd :=_cede (_gada );cmap ._ebe [_gcbb ]=string (_gfd );};case cmapHexString :_abec :=_cede (_edce );_eaag :=len (_abec );for _cfcg :=_daeb ;_cfcg <=_dag ;_cfcg ++{cmap ._ebe [_cfcg ]=string (_abec );if _eaag > 0{_abec [_eaag -1]++;}else {_eg .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_cfcg );
};};default:_eg .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_fbf );return ErrBadCMap ;};};return nil ;};func _cdg (_dae string )rune {_dfcf :=[]rune (_dae );return _dfcf [len (_dfcf )-1]};
type CharCode uint32 ;func (_aeff *cMapParser )parseString ()(cmapString ,error ){_aeff ._bdd .ReadByte ();_gga :=_b .Buffer {};_eff :=1;for {_fcaf ,_eba :=_aeff ._bdd .Peek (1);if _eba !=nil {return cmapString {_gga .String ()},_eba ;};if _fcaf [0]=='\\'{_aeff ._bdd .ReadByte ();
_ffaa ,_geab :=_aeff ._bdd .ReadByte ();if _geab !=nil {return cmapString {_gga .String ()},_geab ;};if _fcd .IsOctalDigit (_ffaa ){_eegd ,_dgc :=_aeff ._bdd .Peek (2);if _dgc !=nil {return cmapString {_gga .String ()},_dgc ;};var _gac []byte ;_gac =append (_gac ,_ffaa );
for _ ,_afe :=range _eegd {if _fcd .IsOctalDigit (_afe ){_gac =append (_gac ,_afe );}else {break ;};};_aeff ._bdd .Discard (len (_gac )-1);_eg .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gac );
_eda ,_dgc :=_a .ParseUint (string (_gac ),8,32);if _dgc !=nil {return cmapString {_gga .String ()},_dgc ;};_gga .WriteByte (byte (_eda ));continue ;};switch _ffaa {case 'n':_gga .WriteByte ('\n');case 'r':_gga .WriteByte ('\r');case 't':_gga .WriteByte ('\t');
case 'b':_gga .WriteByte ('\b');case 'f':_gga .WriteByte ('\f');case '(':_gga .WriteByte ('(');case ')':_gga .WriteByte (')');case '\\':_gga .WriteByte ('\\');};continue ;}else if _fcaf [0]=='('{_eff ++;}else if _fcaf [0]==')'{_eff --;if _eff ==0{_aeff ._bdd .ReadByte ();
break ;};};_cbfbe ,_ :=_aeff ._bdd .ReadByte ();_gga .WriteByte (_cbfbe );};return cmapString {_gga .String ()},nil ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ace ,_cfb :=cmap ._bea [cid ];
return _ace ,_cfb ;};func (cmap *CMap )Stream ()(*_fcd .PdfObjectStream ,error ){if cmap ._gb !=nil {return cmap ._gb ,nil ;};_eaa ,_eaf :=_fcd .MakeStream (cmap .Bytes (),_fcd .NewFlateEncoder ());if _eaf !=nil {return nil ,_eaf ;};cmap ._gb =_eaa ;return cmap ._gb ,nil ;
};func _gdda (_dedg ,_agfe int )int {if _dedg < _agfe {return _dedg ;};return _agfe ;};type cMapParser struct{_bdd *_bf .Reader };func (cmap *CMap )parseCIDRange ()error {for {_cg ,_gcbg :=cmap .parseObject ();if _gcbg !=nil {if _gcbg ==_bg .EOF {break ;
};return _gcbg ;};_deae ,_ggd :=_cg .(cmapHexString );if !_ggd {if _cfbc ,_eeb :=_cg .(cmapOperand );_eeb {if _cfbc .Operand ==_baae {return nil ;};return _ee .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_dfb :=_ffg (_deae );_cg ,_gcbg =cmap .parseObject ();if _gcbg !=nil {if _gcbg ==_bg .EOF {break ;};return _gcbg ;};_cdaf ,_ggd :=_cg .(cmapHexString );if !_ggd {return _ee .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_deae ._eebc )!=len (_cdaf ._eebc ){return _ee .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_faf :=_ffg (_cdaf );
if _dfb > _faf {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_dfb ,_faf );
return ErrBadCMap ;};_cg ,_gcbg =cmap .parseObject ();if _gcbg !=nil {if _gcbg ==_bg .EOF {break ;};return _gcbg ;};_fec ,_ggd :=_cg .(cmapInt );if !_ggd {return _ee .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _fec ._beae < 0{return _ee .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_dg :=_fec ._beae ;for _fbd :=_dfb ;_fbd <=_faf ;_fbd ++{cmap ._edb [_fbd ]=CharCode (_dg );
_dg ++;};_eg .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_dfb ,_faf ,_fec ._beae );};return nil ;};type charRange struct{_egd CharCode ;_fa CharCode ;
};func NewCIDSystemInfo (obj _fcd .PdfObject )(_gc CIDSystemInfo ,_d error ){_ba ,_aa :=_fcd .GetDict (obj );if !_aa {return CIDSystemInfo {},_fcd .ErrTypeError ;};_eb ,_aa :=_fcd .GetStringVal (_ba .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_aa {return CIDSystemInfo {},_fcd .ErrTypeError ;};_fb ,_aa :=_fcd .GetStringVal (_ba .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_aa {return CIDSystemInfo {},_fcd .ErrTypeError ;};_cd ,_aa :=_fcd .GetIntVal (_ba .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_aa {return CIDSystemInfo {},_fcd .ErrTypeError ;};return CIDSystemInfo {Registry :_eb ,Ordering :_fb ,Supplement :_cd },nil ;};func _gefc (_dba string )string {_bbea :=[]rune (_dba );_facg :=make ([]string ,len (_bbea ));for _bdc ,_geb :=range _bbea {_facg [_bdc ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_geb );
};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_af .Join (_facg ,""));};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _ebf ,_fd :=cmap ._ebe [code ];_fd {return _ebf ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )Bytes ()[]byte {_eg .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._bbe )> 0{return cmap ._bbe ;};cmap ._bbe =[]byte (_af .Join ([]string {_egac ,cmap .toBfData (),_fad },"\u000a"));return cmap ._bbe ;};func _cede (_beg cmapHexString )[]rune {if len (_beg ._eebc )==1{return []rune {rune (_beg ._eebc [0])};
};_ebd :=_beg ._eebc ;if len (_ebd )%2!=0{_ebd =append (_ebd ,0);_eg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_beg ,_ebd );
};_eea :=len (_ebd )>>1;_ecd :=make ([]uint16 ,_eea );for _dfe :=0;_dfe < _eea ;_dfe ++{_ecd [_dfe ]=uint16 (_ebd [_dfe <<1])<<8+uint16 (_ebd [_dfe <<1+1]);};_gfa :=_f .Decode (_ecd );return _gfa ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gce :=make (map[CharCode ]string ,len (codeToRune ));
for _gf ,_df :=range codeToRune {_gce [_gf ]=string (_df );};cmap :=&CMap {_cf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_de :2,_ed :16,_ebc :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_gcb :[]Codespace {{Low :0,High :0xffff}},_ebe :_gce ,_bbd :make (map[string ]CharCode ,len (codeToRune )),_edb :make (map[CharCode ]CharCode ,len (codeToRune )),_bea :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_ga :=_ab (name );if _ga !=nil {return nil ,_ga ;};if cmap ._bee ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_afd ,_ga :=_ab (cmap ._bee );
if _ga !=nil {return nil ,_ga ;};for _acb ,_bd :=range _afd ._edb {if _ ,_ebg :=cmap ._edb [_acb ];!_ebg {cmap ._edb [_acb ]=_bd ;};};cmap ._gcb =append (cmap ._gcb ,_afd ._gcb ...);cmap .computeInverseMappings ();return cmap ,nil ;};const (_bce =100;_egac ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_fad ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};type fbRange struct{_g CharCode ;_bgc CharCode ;_fcg string ;};func (cmap *CMap )toBfData ()string {if len (cmap ._ebe )==0{return "";};_abe :=make ([]CharCode ,0,len (cmap ._ebe ));
for _ceb :=range cmap ._ebe {_abe =append (_abe ,_ceb );};_be .Slice (_abe ,func (_bcbf ,_edc int )bool {return _abe [_bcbf ]< _abe [_edc ]});var _beee []charRange ;_fgf :=charRange {_abe [0],_abe [0]};_fbbb :=cmap ._ebe [_abe [0]];for _ ,_cfc :=range _abe [1:]{_cde :=cmap ._ebe [_cfc ];
if _cfc ==_fgf ._fa +1&&_cdg (_cde )==_cdg (_fbbb )+1{_fgf ._fa =_cfc ;}else {_beee =append (_beee ,_fgf );_fgf ._egd ,_fgf ._fa =_cfc ,_cfc ;};_fbbb =_cde ;};_beee =append (_beee ,_fgf );var _gdf []CharCode ;var _gdd []fbRange ;for _ ,_dab :=range _beee {if _dab ._egd ==_dab ._fa {_gdf =append (_gdf ,_dab ._egd );
}else {_gdd =append (_gdd ,fbRange {_g :_dab ._egd ,_bgc :_dab ._fa ,_fcg :cmap ._ebe [_dab ._egd ]});};};_eg .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_beee ),len (_gdf ),len (_gdd ));
var _ggbg []string ;if len (_gdf )> 0{_ega :=(len (_gdf )+_bce -1)/_bce ;for _fbc :=0;_fbc < _ega ;_fbc ++{_abc :=_gdda (len (_gdf )-_fbc *_bce ,_bce );_ggbg =append (_ggbg ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_abc ));
for _abcf :=0;_abcf < _abc ;_abcf ++{_bed :=_gdf [_fbc *_bce +_abcf ];_bda :=cmap ._ebe [_bed ];_ggbg =append (_ggbg ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_bed ,_gefc (_bda )));};_ggbg =append (_ggbg ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_gdd )> 0{_fde :=(len (_gdd )+_bce -1)/_bce ;for _ddc :=0;_ddc < _fde ;_ddc ++{_fae :=_gdda (len (_gdd )-_ddc *_bce ,_bce );_ggbg =append (_ggbg ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_fae ));
for _ccc :=0;_ccc < _fae ;_ccc ++{_fgef :=_gdd [_ddc *_bce +_ccc ];_ggbg =append (_ggbg ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_fgef ._g ,_fgef ._bgc ,_gefc (_fgef ._fcg )));};_ggbg =append (_ggbg ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _af .Join (_ggbg ,"\u000a");};func (cmap *CMap )parseSystemInfo ()error {_ddce :=false ;_gcf :=false ;_fea :="";_gag :=false ;_aae :=CIDSystemInfo {};for _ddcea :=0;_ddcea < 50&&!_gag ;_ddcea ++{_dac ,_cee :=cmap .parseObject ();if _cee !=nil {return _cee ;
};switch _agc :=_dac .(type ){case cmapDict :_cdef :=_agc .Dict ;_bcf ,_ecf :=_cdef ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_ecf {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ged ,_ecf :=_bcf .(cmapString );if !_ecf {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aae .Registry =_ged .String ;
_bcf ,_ecf =_cdef ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_ecf {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ged ,_ecf =_bcf .(cmapString );
if !_ecf {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aae .Ordering =_ged .String ;_bgaa ,_ecf :=_cdef ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_ecf {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_eage ,_ecf :=_bgaa .(cmapInt );if !_ecf {_eg .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_aae .Supplement =int (_eage ._beae );_gag =true ;case cmapOperand :switch _agc .Operand {case "\u0062\u0065\u0067i\u006e":_ddce =true ;case "\u0065\u006e\u0064":_gag =true ;case "\u0064\u0065\u0066":_gcf =false ;};case cmapName :if _ddce {_fea =_agc .Name ;
_gcf =true ;};case cmapString :if _gcf {switch _fea {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_aae .Registry =_agc .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_aae .Ordering =_agc .String ;};};case cmapInt :if _gcf {switch _fea {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_aae .Supplement =int (_agc ._beae );
};};};};if !_gag {_eg .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._ebc =_aae ;return nil ;};func (_fbafd *cMapParser )parseDict ()(cmapDict ,error ){_eg .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_dfd :=_gdfd ();_bdg ,_ :=_fbafd ._bdd .ReadByte ();
if _bdg !='<'{return _dfd ,ErrBadCMapDict ;};_bdg ,_ =_fbafd ._bdd .ReadByte ();if _bdg !='<'{return _dfd ,ErrBadCMapDict ;};for {_fbafd .skipSpaces ();_dgd ,_becd :=_fbafd ._bdd .Peek (2);if _becd !=nil {return _dfd ,_becd ;};if (_dgd [0]=='>')&&(_dgd [1]=='>'){_fbafd ._bdd .ReadByte ();
_fbafd ._bdd .ReadByte ();break ;};_eagee ,_becd :=_fbafd .parseName ();_eg .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_eagee .Name );if _becd !=nil {_eg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_becd );
return _dfd ,_becd ;};_fbafd .skipSpaces ();_egb ,_becd :=_fbafd .parseObject ();if _becd !=nil {return _dfd ,_becd ;};_dfd .Dict [_eagee .Name ]=_egb ;_fbafd .skipSpaces ();_dgd ,_becd =_fbafd ._bdd .Peek (3);if _becd !=nil {return _dfd ,_becd ;};if string (_dgd )=="\u0064\u0065\u0066"{_fbafd ._bdd .Discard (3);
};};return _dfd ,nil ;};func _gdfd ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};type cmapObject interface{};func (cmap *CMap )parseName ()error {_fbaf :="";_efa :=false ;for _gda :=0;_gda < 20&&!_efa ;_gda ++{_facd ,_beb :=cmap .parseObject ();
if _beb !=nil {return _beb ;};switch _bga :=_facd .(type ){case cmapOperand :switch _bga .Operand {case "\u0064\u0065\u0066":_efa =true ;default:_eg .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_facd ,_fbaf );
if _fbaf !=""{_fbaf =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_fbaf ,_bga .Operand );};_eg .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_fbaf );
};case cmapName :_fbaf =_bga .Name ;};};if !_efa {_eg .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cf =_fbaf ;return nil ;};type cmapString struct{String string ;
};func (cmap *CMap )parseVersion ()error {_edbg :="";_cdc :=false ;for _efb :=0;_efb < 3&&!_cdc ;_efb ++{_fbab ,_cca :=cmap .parseObject ();if _cca !=nil {return _cca ;};switch _eae :=_fbab .(type ){case cmapOperand :switch _eae .Operand {case "\u0064\u0065\u0066":_cdc =true ;
default:_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_fbab );
return ErrBadCMap ;};case cmapInt :_edbg =_c .Sprintf ("\u0025\u0064",_eae ._beae );case cmapFloat :_edbg =_c .Sprintf ("\u0025\u0066",_eae ._gdg );case cmapString :_edbg =_eae .String ;default:_eg .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_fbab );
};};cmap ._baa =_edbg ;return nil ;};func _ca (_ce bool )*CMap {_ac :=16;if _ce {_ac =8;};return &CMap {_ed :_ac ,_edb :make (map[CharCode ]CharCode ),_bea :make (map[CharCode ]CharCode ),_ebe :make (map[CharCode ]string ),_bbd :make (map[string ]CharCode )};
};func IsPredefinedCMap (name string )bool {return _fe .AssetExists (name )};func (_cfdf *cMapParser )parseArray ()(cmapArray ,error ){_ddgb :=cmapArray {};_ddgb .Array =[]cmapObject {};_cfdf ._bdd .ReadByte ();for {_cfdf .skipSpaces ();_bddg ,_fccc :=_cfdf ._bdd .Peek (1);
if _fccc !=nil {return _ddgb ,_fccc ;};if _bddg [0]==']'{_cfdf ._bdd .ReadByte ();break ;};_befc ,_fccc :=_cfdf .parseObject ();if _fccc !=nil {return _ddgb ,_fccc ;};_ddgb .Array =append (_ddgb .Array ,_befc );};return _ddgb ,nil ;};type cmapDict struct{Dict map[string ]cmapObject ;
};type cmapHexString struct{_deda int ;_eebc []byte ;};func _age (_ecfd []byte )*cMapParser {_fecd :=cMapParser {};_fda :=_b .NewBuffer (_ecfd );_fecd ._bdd =_bf .NewReader (_fda );return &_fecd ;};func (_cfbe *cMapParser )parseHexString ()(cmapHexString ,error ){_cfbe ._bdd .ReadByte ();
_gcac :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_adf :=_b .Buffer {};for {_cfbe .skipSpaces ();_dgb ,_cfg :=_cfbe ._bdd .Peek (1);if _cfg !=nil {return cmapHexString {},_cfg ;
};if _dgb [0]=='>'{_cfbe ._bdd .ReadByte ();break ;};_gabf ,_ :=_cfbe ._bdd .ReadByte ();if _b .IndexByte (_gcac ,_gabf )>=0{_adf .WriteByte (_gabf );};};if _adf .Len ()%2==1{_eg .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_adf .String ());
_adf .WriteByte ('0');};_fcb :=_adf .Len ()/2;_efe ,_ :=_fc .DecodeString (_adf .String ());return cmapHexString {_deda :_fcb ,_eebc :_efe },nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_dea ,_bc :=cmap ._edb [code ];return _dea ,_bc ;
};const (_afg ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_geea ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_cega ="\u0065n\u0064\u0063\u006d\u0061\u0070";_gea ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_adc ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_egc ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_cdad ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_bcfe ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_bbb ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fbca ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_baae ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_ecff ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_fcab ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_baf ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_deb ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_ef ,_bfa :=cmap .BytesToCharcodes (data );
if !_bfa {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_gad :=make ([]string ,len (_ef ));var _fbb []CharCode ;for _dfg ,_fbg :=range _ef {_egg ,_efd :=cmap ._ebe [_fbg ];if !_efd {_fbb =append (_fbb ,_fbg );_egg =MissingCodeString ;};_gad [_dfg ]=_egg ;};_cbf :=_af .Join (_gad ,"");if len (_fbb )> 0{_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_ef ,len (_fbb ),_fbb ,_cbf ,cmap );
};return _cbf ,len (_fbb );};func (cmap *CMap )parse ()error {var _ddcc cmapObject ;for {_agb ,_cac :=cmap .parseObject ();if _cac !=nil {if _cac ==_bg .EOF {break ;};_eg .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cac );
return _cac ;};switch _eag :=_agb .(type ){case cmapOperand :_ebec :=_eag ;switch _ebec .Operand {case _gea :_bcbfd :=cmap .parseCodespaceRange ();if _bcbfd !=nil {return _bcbfd ;};case _fbca :_gae :=cmap .parseCIDRange ();if _gae !=nil {return _gae ;};
case _egc :_ccg :=cmap .parseBfchar ();if _ccg !=nil {return _ccg ;};case _bcfe :_bfg :=cmap .parseBfrange ();if _bfg !=nil {return _bfg ;};case _ecff :if _ddcc ==nil {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_aced ,_ead :=_ddcc .(cmapName );if !_ead {_eg .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_ddcc );
return ErrBadCMap ;};cmap ._bee =_aced .Name ;case _afg :_aga :=cmap .parseSystemInfo ();if _aga !=nil {return _aga ;};};case cmapName :_eaad :=_eag ;switch _eaad .Name {case _afg :_dbb :=cmap .parseSystemInfo ();if _dbb !=nil {return _dbb ;};case _fcab :_ddd :=cmap .parseName ();
if _ddd !=nil {return _ddd ;};case _baf :_egdg :=cmap .parseType ();if _egdg !=nil {return _egdg ;};case _deb :_gab :=cmap .parseVersion ();if _gab !=nil {return _gab ;};};};_ddcc =_agb ;};return nil ;};func (_caca *cMapParser )parseName ()(cmapName ,error ){_ffe :="";
_ceda :=false ;for {_dbd ,_dgg :=_caca ._bdd .Peek (1);if _dgg ==_bg .EOF {break ;};if _dgg !=nil {return cmapName {_ffe },_dgg ;};if !_ceda {if _dbd [0]=='/'{_ceda =true ;_caca ._bdd .ReadByte ();}else {_eg .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_dbd ,_dbd );
return cmapName {_ffe },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_dbd [0]);};}else {if _fcd .IsWhiteSpace (_dbd [0]){break ;}else if (_dbd [0]=='/')||(_dbd [0]=='[')||(_dbd [0]=='(')||(_dbd [0]==']')||(_dbd [0]=='<')||(_dbd [0]=='>'){break ;
}else if _dbd [0]=='#'{_gagf ,_fcdb :=_caca ._bdd .Peek (3);if _fcdb !=nil {return cmapName {_ffe },_fcdb ;};_caca ._bdd .Discard (3);_bac ,_fcdb :=_fc .DecodeString (string (_gagf [1:3]));if _fcdb !=nil {return cmapName {_ffe },_fcdb ;};_ffe +=string (_bac );
}else {_dfac ,_ :=_caca ._bdd .ReadByte ();_ffe +=string (_dfac );};};};return cmapName {_ffe },nil ;};func (cmap *CMap )NBits ()int {return cmap ._ed };func (_dga *cMapParser )skipSpaces ()(int ,error ){_fga :=0;for {_fdg ,_add :=_dga ._bdd .Peek (1);
if _add !=nil {return 0,_add ;};if _fcd .IsWhiteSpace (_fdg [0]){_dga ._bdd .ReadByte ();_fga ++;}else {break ;};};return _fga ,nil ;};func (cmap *CMap )computeInverseMappings (){for _ae ,_aef :=range cmap ._edb {if _bbf ,_gef :=cmap ._bea [_aef ];!_gef ||(_gef &&_bbf > _ae ){cmap ._bea [_aef ]=_ae ;
};};for _afa ,_faa :=range cmap ._ebe {if _dfc ,_gd :=cmap ._bbd [_faa ];!_gd ||(_gd &&_dfc > _afa ){cmap ._bbd [_faa ]=_afa ;};};_be .Slice (cmap ._gcb ,func (_cb ,_afde int )bool {return cmap ._gcb [_cb ].Low < cmap ._gcb [_afde ].Low });};type cmapArray struct{Array []cmapObject ;
};type cmapFloat struct{_gdg float64 };func _ab (_bgf string )(*CMap ,error ){_fgd ,_dec :=_fe .Asset (_bgf );if _dec !=nil {return nil ,_dec ;};return LoadCmapFromDataCID (_fgd );};type cmapInt struct{_beae int64 };func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_dd ,_fbe :=cmap ._bbd [s ];
return _dd ,_fbe };var (ErrBadCMap =_ee .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ee .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_ee .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )inCodespace (_ggb CharCode ,_eeg int )bool {for _ ,_fddf :=range cmap ._gcb {if _fddf .Low <=_ggb &&_ggb <=_fddf .High &&_eeg ==_fddf .NumBytes {return true ;
};};return false ;};func (_ggg *cMapParser )parseObject ()(cmapObject ,error ){_ggg .skipSpaces ();for {_agf ,_ggc :=_ggg ._bdd .Peek (2);if _ggc !=nil {return nil ,_ggc ;};if _agf [0]=='%'{_ggg .parseComment ();_ggg .skipSpaces ();continue ;}else if _agf [0]=='/'{_ade ,_cdea :=_ggg .parseName ();
return _ade ,_cdea ;}else if _agf [0]=='('{_ddceg ,_cgg :=_ggg .parseString ();return _ddceg ,_cgg ;}else if _agf [0]=='['{_bcbb ,_acd :=_ggg .parseArray ();return _bcbb ,_acd ;}else if (_agf [0]=='<')&&(_agf [1]=='<'){_efad ,_cegb :=_ggg .parseDict ();
return _efad ,_cegb ;}else if _agf [0]=='<'{_abg ,_bfgc :=_ggg .parseHexString ();return _abg ,_bfgc ;}else if _fcd .IsDecimalDigit (_agf [0])||(_agf [0]=='-'&&_fcd .IsDecimalDigit (_agf [1])){_fecdb ,_cded :=_ggg .parseNumber ();if _cded !=nil {return nil ,_cded ;
};return _fecdb ,nil ;}else {_cbg ,_cfa :=_ggg .parseOperand ();if _cfa !=nil {return nil ,_cfa ;};return _cbg ,nil ;};};};type cmapName struct{Name string ;};func _ffg (_dbaf cmapHexString )CharCode {_bfad :=CharCode (0);for _ ,_fgeb :=range _dbaf ._eebc {_bfad <<=8;
_bfad |=CharCode (_fgeb );};return _bfad ;};func (_bab *cMapParser )parseComment ()(string ,error ){var _afaf _b .Buffer ;_ ,_fbdf :=_bab .skipSpaces ();if _fbdf !=nil {return _afaf .String (),_fbdf ;};_adb :=true ;for {_bfd ,_cbfb :=_bab ._bdd .Peek (1);
if _cbfb !=nil {_eg .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_cbfb );return _afaf .String (),_cbfb ;};if _adb &&_bfd [0]!='%'{return _afaf .String (),ErrBadCMapComment ;};_adb =false ;
if (_bfd [0]!='\r')&&(_bfd [0]!='\n'){_fdgb ,_ :=_bab ._bdd .ReadByte ();_afaf .WriteByte (_fdgb );}else {break ;};};return _afaf .String (),nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )parseType ()error {_facgf :=0;
_efdd :=false ;for _afb :=0;_afb < 3&&!_efdd ;_afb ++{_ffa ,_bdf :=cmap .parseObject ();if _bdf !=nil {return _bdf ;};switch _cfbg :=_ffa .(type ){case cmapOperand :switch _cfbg .Operand {case "\u0064\u0065\u0066":_efdd =true ;default:_eg .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_ffa );
return ErrBadCMap ;};case cmapInt :_facgf =int (_cfbg ._beae );};};cmap ._de =_facgf ;return nil ;};func (_ge *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ge .Registry ,_ge .Ordering ,_ge .Supplement );
};func (cmap *CMap )Type ()int {return cmap ._de };