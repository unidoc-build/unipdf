//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_b "bufio";_gf "bytes";_d "encoding/hex";_fe "errors";_f "fmt";_ff "github.com/unidoc/unipdf/v3/common";_af "github.com/unidoc/unipdf/v3/core";_ac "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_c "io";_de "sort";_a "strconv";_bd "strings";_gb "unicode/utf16";);type cmapFloat struct{_bece float64 };func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_cbc ,_bf :=cmap ._cb [s ];return _cbc ,_bf };type cmapOperand struct{Operand string ;};func (cmap *CMap )parseBfrange ()error {for {var _bcfc CharCode ;_abac ,_egc :=cmap .parseObject ();if _egc !=nil {if _egc ==_c .EOF {break ;};return _egc ;};switch _cdea :=_abac .(type ){case cmapOperand :if _cdea .Operand ==_fec {return nil ;};return _fe .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bcfc =_fbbc (_cdea );default:return _fe .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _bfd CharCode ;_abac ,_egc =cmap .parseObject ();if _egc !=nil {if _egc ==_c .EOF {break ;};return _egc ;};switch _agaa :=_abac .(type ){case cmapOperand :_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_bfd =_fbbc (_agaa );default:_ff .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_abac );return ErrBadCMap ;};_abac ,_egc =cmap .parseObject ();if _egc !=nil {if _egc ==_c .EOF {break ;};return _egc ;};switch _eaf :=_abac .(type ){case cmapArray :if len (_eaf .Array )!=int (_bfd -_bcfc )+1{_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _geg :=_bcfc ;_geg <=_bfd ;_geg ++{_fdbg :=_eaf .Array [_geg -_bcfc ];_gfa ,_efc :=_fdbg .(cmapHexString );if !_efc {return _fe .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_ebbe :=_cfge (_gfa );cmap ._fag [_geg ]=string (_ebbe );};case cmapHexString :_bgd :=_cfge (_eaf );_cgd :=len (_bgd );for _cbdd :=_bcfc ;_cbdd <=_bfd ;_cbdd ++{cmap ._fag [_cbdd ]=string (_bgd );_bgd [_cgd -1]++;};default:_ff .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_abac );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )NBits ()int {return cmap ._ca };func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_ff .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_aa (isSimple );cmap .cMapParser =_cffc (data );_fg :=cmap .parse ();if _fg !=nil {return nil ,_fg ;};if len (cmap ._bed )==0{if cmap ._acf !=""{return cmap ,nil ;};_ff .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};const (_ab =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););const (_fbe ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_edd ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_eaa ="\u0065n\u0064\u0063\u006d\u0061\u0070";_fgf ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_cegc ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_fcag ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_cfa ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_bfac ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fec ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_baf ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fcd ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_febd ="\u0075s\u0065\u0063\u006d\u0061\u0070";_abfgf ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_caaf ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gbfe ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )Bytes ()[]byte {_ff .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._ge )> 0{return cmap ._ge ;};cmap ._ge =[]byte (_bd .Join ([]string {_abea ,cmap .toBfData (),_eefb },"\u000a"));return cmap ._ge ;};func (cmap *CMap )computeInverseMappings (){for _cab ,_gbb :=range cmap ._bg {if _gbg ,_bef :=cmap ._bacc [_gbb ];!_bef ||(_bef &&_gbg > _cab ){cmap ._bacc [_gbb ]=_cab ;};};for _bacf ,_ace :=range cmap ._fag {if _afd ,_dc :=cmap ._cb [_ace ];!_dc ||(_dc &&_afd > _bacf ){cmap ._cb [_ace ]=_bacf ;};};_de .Slice (cmap ._bed ,func (_gcf ,_gda int )bool {return cmap ._bed [_gcf ].Low < cmap ._bed [_gda ].Low });};func (cmap *CMap )parseCodespaceRange ()error {for {_cdc ,_gaa :=cmap .parseObject ();if _gaa !=nil {if _gaa ==_c .EOF {break ;};return _gaa ;};_fde ,_caae :=_cdc .(cmapHexString );if !_caae {if _gdde ,_efe :=_cdc .(cmapOperand );_efe {if _gdde .Operand ==_cegc {return nil ;};return _fe .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_cdc ,_gaa =cmap .parseObject ();if _gaa !=nil {if _gaa ==_c .EOF {break ;};return _gaa ;};_bcg ,_caae :=_cdc .(cmapHexString );if !_caae {return _fe .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fde ._ccee )!=len (_bcg ._ccee ){return _fe .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_dea :=_fbbc (_fde );_aaae :=_fbbc (_bcg );if _aaae < _dea {_ff .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_dea ,_aaae );return ErrBadCMap ;};_dda :=_bcg ._gebb ;_eab :=Codespace {NumBytes :_dda ,Low :_dea ,High :_aaae };cmap ._bed =append (cmap ._bed ,_eab );_ff .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_dea ,_aaae );};if len (cmap ._bed )==0{_ff .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_dad *cMapParser )parseOperand ()(cmapOperand ,error ){_fbf :=cmapOperand {};_abce :=_gf .Buffer {};for {_eafd ,_cbgc :=_dad ._gea .Peek (1);if _cbgc !=nil {if _cbgc ==_c .EOF {break ;};return _fbf ,_cbgc ;};if _af .IsDelimiter (_eafd [0]){break ;};if _af .IsWhiteSpace (_eafd [0]){break ;};_aef ,_ :=_dad ._gea .ReadByte ();_abce .WriteByte (_aef );};if _abce .Len ()==0{return _fbf ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_fbf .Operand =_abce .String ();return _fbf ,nil ;};type cmapHexString struct{_gebb int ;_ccee []byte ;};func _ddg ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )Name ()string {return cmap ._bac };func _ebd (_ee string )(*CMap ,error ){_gdea ,_db :=_ac .Asset (_ee );if _db !=nil {return nil ,_db ;};return LoadCmapFromDataCID (_gdea );};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type cmapObject interface{};type CMap struct{*cMapParser ;_bac string ;_ca int ;_be int ;_aba string ;_acf string ;_acfg CIDSystemInfo ;_bed []Codespace ;_bg map[CharCode ]CharCode ;_bacc map[CharCode ]CharCode ;_fag map[CharCode ]string ;_cb map[string ]CharCode ;_ge []byte ;_dg *_af .PdfObjectStream ;};func (cmap *CMap )parseVersion ()error {_gbfa :="";_fce :=false ;for _ccg :=0;_ccg < 3&&!_fce ;_ccg ++{_eff ,_gdd :=cmap .parseObject ();if _gdd !=nil {return _gdd ;};switch _ceg :=_eff .(type ){case cmapOperand :switch _ceg .Operand {case "\u0064\u0065\u0066":_fce =true ;default:_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_eff );return ErrBadCMap ;};case cmapInt :_gbfa =_f .Sprintf ("\u0025\u0064",_ceg ._gfbc );case cmapFloat :_gbfa =_f .Sprintf ("\u0025\u0066",_ceg ._bece );case cmapString :_gbfa =_ceg .String ;default:_ff .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_eff );};};cmap ._aba =_gbfa ;return nil ;};func (cmap *CMap )Stream ()(*_af .PdfObjectStream ,error ){if cmap ._dg !=nil {return cmap ._dg ,nil ;};_bc ,_df :=_af .MakeStream (cmap .Bytes (),_af .NewFlateEncoder ());if _df !=nil {return nil ,_df ;};cmap ._dg =_bc ;return cmap ._dg ,nil ;};const (_bgf =100;_abea ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_eefb ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func (_abcc *cMapParser )skipSpaces ()(int ,error ){_fcca :=0;for {_aac ,_cba :=_abcc ._gea .Peek (1);if _cba !=nil {return 0,_cba ;};if _af .IsWhiteSpace (_aac [0]){_abcc ._gea .ReadByte ();_fcca ++;}else {break ;};};return _fcca ,nil ;};func _cffc (_ggc []byte )*cMapParser {_acc :=cMapParser {};_fcda :=_gf .NewBuffer (_ggc );_acc ._gea =_b .NewReader (_fcda );return &_acc ;};type cmapName struct{Name string ;};type charRange struct{_ba CharCode ;_cd CharCode ;};func _abfc (_dgd cmapHexString )rune {_defc :=_cfge (_dgd );if _ffdc :=len (_defc );_ffdc ==0{_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_dgd );return MissingCodeRune ;};if len (_defc )> 1{_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_dgd ,_defc );};return _defc [0];};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )inCodespace (_cge CharCode ,_fcc int )bool {for _ ,_ga :=range cmap ._bed {if _ga .Low <=_cge &&_cge <=_ga .High &&_fcc ==_ga .NumBytes {return true ;};};return false ;};var (ErrBadCMap =_fe .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_fe .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_fe .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (_bb *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_bb .Registry ,_bb .Ordering ,_bb .Supplement );};type cmapDict struct{Dict map[string ]cmapObject ;};type cmapInt struct{_gfbc int64 };func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_feg :=make (map[CharCode ]string ,len (codeToRune ));for _gc ,_ea :=range codeToRune {_feg [_gc ]=string (_ea );};cmap :=&CMap {_bac :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_be :2,_ca :16,_acfg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_bed :[]Codespace {{Low :0,High :0xffff}},_fag :_feg ,_cb :make (map[string ]CharCode ,len (codeToRune )),_bg :make (map[CharCode ]CharCode ,len (codeToRune )),_bacc :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_bdc ,_ade :=cmap ._bacc [cid ];return _bdc ,_ade ;};type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )parseCIDRange ()error {for {_fba ,_ddac :=cmap .parseObject ();if _ddac !=nil {if _ddac ==_c .EOF {break ;};return _ddac ;};_ebdd ,_faef :=_fba .(cmapHexString );if !_faef {if _fgdb ,_abg :=_fba .(cmapOperand );_abg {if _fgdb .Operand ==_fcd {return nil ;};return _fe .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_bbg :=_fbbc (_ebdd );_fba ,_ddac =cmap .parseObject ();if _ddac !=nil {if _ddac ==_c .EOF {break ;};return _ddac ;};_bab ,_faef :=_fba .(cmapHexString );if !_faef {return _fe .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_ebdd ._ccee )!=len (_bab ._ccee ){return _fe .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gff :=_fbbc (_bab );if _bbg > _gff {_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_bbg ,_gff );return ErrBadCMap ;};_fba ,_ddac =cmap .parseObject ();if _ddac !=nil {if _ddac ==_c .EOF {break ;};return _ddac ;};_debb ,_faef :=_fba .(cmapInt );if !_faef {return _fe .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _debb ._gfbc < 0{return _fe .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_agcc :=_debb ._gfbc ;for _cabe :=_bbg ;_cabe <=_gff ;_cabe ++{cmap ._bg [_cabe ]=CharCode (_agcc );_agcc ++;};_ff .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_bbg ,_gff ,_debb ._gfbc );};return nil ;};func (_baag *cMapParser )parseArray ()(cmapArray ,error ){_dfed :=cmapArray {};_dfed .Array =[]cmapObject {};_baag ._gea .ReadByte ();for {_baag .skipSpaces ();_dff ,_bbc :=_baag ._gea .Peek (1);if _bbc !=nil {return _dfed ,_bbc ;};if _dff [0]==']'{_baag ._gea .ReadByte ();break ;};_cfg ,_bbc :=_baag .parseObject ();if _bbc !=nil {return _dfed ,_bbc ;};_dfed .Array =append (_dfed .Array ,_cfg );};return _dfed ,nil ;};func _aa (_ec bool )*CMap {_ae :=16;if _ec {_ae =8;};return &CMap {_ca :_ae ,_bg :make (map[CharCode ]CharCode ),_bacc :make (map[CharCode ]CharCode ),_fag :make (map[CharCode ]string ),_cb :make (map[string ]CharCode )};};func _dade (_agf ,_dgdb int )int {if _agf < _dgdb {return _agf ;};return _dgdb ;};func IsPredefinedCMap (name string )bool {return _ac .AssetExists (name )};func (_bfg *cMapParser )parseObject ()(cmapObject ,error ){_bfg .skipSpaces ();for {_cdg ,_ebfc :=_bfg ._gea .Peek (2);if _ebfc !=nil {return nil ,_ebfc ;};if _cdg [0]=='%'{_bfg .parseComment ();_bfg .skipSpaces ();continue ;}else if _cdg [0]=='/'{_bcb ,_fcg :=_bfg .parseName ();return _bcb ,_fcg ;}else if _cdg [0]=='('{_bfgg ,_cbe :=_bfg .parseString ();return _bfgg ,_cbe ;}else if _cdg [0]=='['{_cgg ,_daf :=_bfg .parseArray ();return _cgg ,_daf ;}else if (_cdg [0]=='<')&&(_cdg [1]=='<'){_gbce ,_cbddg :=_bfg .parseDict ();return _gbce ,_cbddg ;}else if _cdg [0]=='<'{_cgde ,_bgec :=_bfg .parseHexString ();return _cgde ,_bgec ;}else if _af .IsDecimalDigit (_cdg [0])||(_cdg [0]=='-'&&_af .IsDecimalDigit (_cdg [1])){_baa ,_degd :=_bfg .parseNumber ();if _degd !=nil {return nil ,_degd ;};return _baa ,nil ;}else {_bedb ,_fee :=_bfg .parseOperand ();if _fee !=nil {return nil ,_fee ;};return _bedb ,nil ;};};};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gca ,_add :=cmap ._bg [code ];return _gca ,_add ;};func (_adc *cMapParser )parseName ()(cmapName ,error ){_dfe :="";_aacb :=false ;for {_geb ,_cgf :=_adc ._gea .Peek (1);if _cgf ==_c .EOF {break ;};if _cgf !=nil {return cmapName {_dfe },_cgf ;};if !_aacb {if _geb [0]=='/'{_aacb =true ;_adc ._gea .ReadByte ();}else {_ff .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_geb ,_geb );return cmapName {_dfe },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_geb [0]);};}else {if _af .IsWhiteSpace (_geb [0]){break ;}else if (_geb [0]=='/')||(_geb [0]=='[')||(_geb [0]=='(')||(_geb [0]==']')||(_geb [0]=='<')||(_geb [0]=='>'){break ;}else if _geb [0]=='#'{_babb ,_ecc :=_adc ._gea .Peek (3);if _ecc !=nil {return cmapName {_dfe },_ecc ;};_adc ._gea .Discard (3);_beb ,_ecc :=_d .DecodeString (string (_babb [1:3]));if _ecc !=nil {return cmapName {_dfe },_ecc ;};_dfe +=string (_beb );}else {_dfa ,_ :=_adc ._gea .ReadByte ();_dfe +=string (_dfa );};};};return cmapName {_dfe },nil ;};func (_fea *cMapParser )parseNumber ()(cmapObject ,error ){_gcb ,_agbg :=_af .ParseNumber (_fea ._gea );if _agbg !=nil {return nil ,_agbg ;};switch _cce :=_gcb .(type ){case *_af .PdfObjectFloat :return cmapFloat {float64 (*_cce )},nil ;case *_af .PdfObjectInteger :return cmapInt {int64 (*_cce )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gcb );};func (_gdc *cMapParser )parseDict ()(cmapDict ,error ){_ff .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_caad :=_ddg ();_dcc ,_ :=_gdc ._gea .ReadByte ();if _dcc !='<'{return _caad ,ErrBadCMapDict ;};_dcc ,_ =_gdc ._gea .ReadByte ();if _dcc !='<'{return _caad ,ErrBadCMapDict ;};for {_gdc .skipSpaces ();_cdd ,_bagg :=_gdc ._gea .Peek (2);if _bagg !=nil {return _caad ,_bagg ;};if (_cdd [0]=='>')&&(_cdd [1]=='>'){_gdc ._gea .ReadByte ();_gdc ._gea .ReadByte ();break ;};_cfed ,_bagg :=_gdc .parseName ();_ff .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cfed .Name );if _bagg !=nil {_ff .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_bagg );return _caad ,_bagg ;};_gdc .skipSpaces ();_fage ,_bagg :=_gdc .parseObject ();if _bagg !=nil {return _caad ,_bagg ;};_caad .Dict [_cfed .Name ]=_fage ;_gdc .skipSpaces ();_cdd ,_bagg =_gdc ._gea .Peek (3);if _bagg !=nil {return _caad ,_bagg ;};if string (_cdd )=="\u0064\u0065\u0066"{_gdc ._gea .Discard (3);};};return _caad ,nil ;};func _fge (_aadd string )rune {_dbf :=[]rune (_aadd );return _dbf [len (_dbf )-1]};type cMapParser struct{_gea *_b .Reader };func (_ebfb *cMapParser )parseHexString ()(cmapHexString ,error ){_ebfb ._gea .ReadByte ();_eda :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_afa :=_gf .Buffer {};for {_ebfb .skipSpaces ();_fcf ,_bba :=_ebfb ._gea .Peek (1);if _bba !=nil {return cmapHexString {},_bba ;};if _fcf [0]=='>'{_ebfb ._gea .ReadByte ();break ;};_bbdd ,_ :=_ebfb ._gea .ReadByte ();if _gf .IndexByte (_eda ,_bbdd )>=0{_afa .WriteByte (_bbdd );};};if _afa .Len ()%2==1{_ff .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_afa .String ());_afa .WriteByte ('0');};_gdf :=_afa .Len ()/2;_cfee ,_ :=_d .DecodeString (_afa .String ());return cmapHexString {_gebb :_gdf ,_ccee :_cfee },nil ;};func (cmap *CMap )parse ()error {var _aga cmapObject ;for {_bec ,_cef :=cmap .parseObject ();if _cef !=nil {if _cef ==_c .EOF {break ;};_ff .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cef );return _cef ;};switch _gcdc :=_bec .(type ){case cmapOperand :_ede :=_gcdc ;switch _ede .Operand {case _fgf :_gaeg :=cmap .parseCodespaceRange ();if _gaeg !=nil {return _gaeg ;};case _baf :_ffc :=cmap .parseCIDRange ();if _ffc !=nil {return _ffc ;};case _fcag :_aaf :=cmap .parseBfchar ();if _aaf !=nil {return _aaf ;};case _bfac :_fae :=cmap .parseBfrange ();if _fae !=nil {return _fae ;};case _febd :if _aga ==nil {_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_bgb ,_cagc :=_aga .(cmapName );if !_cagc {_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_aga );return ErrBadCMap ;};cmap ._acf =_bgb .Name ;case _fbe :_gcag :=cmap .parseSystemInfo ();if _gcag !=nil {return _gcag ;};};case cmapName :_dbfb :=_gcdc ;switch _dbfb .Name {case _fbe :_ebg :=cmap .parseSystemInfo ();if _ebg !=nil {return _ebg ;};case _abfgf :_ebef :=cmap .parseName ();if _ebef !=nil {return _ebef ;};case _caaf :_ecf :=cmap .parseType ();if _ecf !=nil {return _ecf ;};case _gbfe :_cec :=cmap .parseVersion ();if _cec !=nil {return _cec ;};};};_aga =_bec ;};return nil ;};func (_fdda *cMapParser )parseString ()(cmapString ,error ){_fdda ._gea .ReadByte ();_affb :=_gf .Buffer {};_gfad :=1;for {_fccf ,_bbb :=_fdda ._gea .Peek (1);if _bbb !=nil {return cmapString {_affb .String ()},_bbb ;};if _fccf [0]=='\\'{_fdda ._gea .ReadByte ();_bfdf ,_deda :=_fdda ._gea .ReadByte ();if _deda !=nil {return cmapString {_affb .String ()},_deda ;};if _af .IsOctalDigit (_bfdf ){_dee ,_gbe :=_fdda ._gea .Peek (2);if _gbe !=nil {return cmapString {_affb .String ()},_gbe ;};var _acb []byte ;_acb =append (_acb ,_bfdf );for _ ,_efg :=range _dee {if _af .IsOctalDigit (_efg ){_acb =append (_acb ,_efg );}else {break ;};};_fdda ._gea .Discard (len (_acb )-1);_ff .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_acb );_cbgb ,_gbe :=_a .ParseUint (string (_acb ),8,32);if _gbe !=nil {return cmapString {_affb .String ()},_gbe ;};_affb .WriteByte (byte (_cbgb ));continue ;};switch _bfdf {case 'n':_affb .WriteByte ('\n');case 'r':_affb .WriteByte ('\r');case 't':_affb .WriteByte ('\t');case 'b':_affb .WriteByte ('\b');case 'f':_affb .WriteByte ('\f');case '(':_affb .WriteByte ('(');case ')':_affb .WriteByte (')');case '\\':_affb .WriteByte ('\\');};continue ;}else if _fccf [0]=='('{_gfad ++;}else if _fccf [0]==')'{_gfad --;if _gfad ==0{_fdda ._gea .ReadByte ();break ;};};_cfea ,_ :=_fdda ._gea .ReadByte ();_affb .WriteByte (_cfea );};return cmapString {_affb .String ()},nil ;};func _bgc (_aff string )string {_ccc :=[]rune (_aff );_da :=make ([]string ,len (_ccc ));for _fdd ,_efa :=range _ccc {_da [_fdd ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_efa );};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_bd .Join (_da ,""));};func (cmap *CMap )Type ()int {return cmap ._be };func (cmap *CMap )parseBfchar ()error {for {_fca ,_gdgd :=cmap .parseObject ();if _gdgd !=nil {if _gdgd ==_c .EOF {break ;};return _gdgd ;};var _bdcf CharCode ;switch _ebf :=_fca .(type ){case cmapOperand :if _ebf .Operand ==_cfa {return nil ;};return _fe .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bdcf =_fbbc (_ebf );default:return _fe .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_fca ,_gdgd =cmap .parseObject ();if _gdgd !=nil {if _gdgd ==_c .EOF {break ;};return _gdgd ;};var _fda []rune ;switch _ddd :=_fca .(type ){case cmapOperand :if _ddd .Operand ==_cfa {return nil ;};_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ddd );return ErrBadCMap ;case cmapHexString :_fda =_cfge (_ddd );case cmapName :_ff .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ddd );_fda =[]rune {MissingCodeRune };default:_ff .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_fca );return ErrBadCMap ;};cmap ._fag [_bdcf ]=string (_fda );};return nil ;};func (cmap *CMap )parseType ()error {_aeee :=0;_gcaf :=false ;for _caa :=0;_caa < 3&&!_gcaf ;_caa ++{_abcb ,_cbg :=cmap .parseObject ();if _cbg !=nil {return _cbg ;};switch _bfe :=_abcb .(type ){case cmapOperand :switch _bfe .Operand {case "\u0064\u0065\u0066":_gcaf =true ;default:_ff .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_abcb );return ErrBadCMap ;};case cmapInt :_aeee =int (_bfe ._gfbc );};};cmap ._be =_aeee ;return nil ;};func (_ccd *cMapParser )parseComment ()(string ,error ){var _ead _gf .Buffer ;_ ,_edf :=_ccd .skipSpaces ();if _edf !=nil {return _ead .String (),_edf ;};_ged :=true ;for {_gfe ,_fgb :=_ccd ._gea .Peek (1);if _fgb !=nil {_ff .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_fgb );return _ead .String (),_fgb ;};if _ged &&_gfe [0]!='%'{return _ead .String (),ErrBadCMapComment ;};_ged =false ;if (_gfe [0]!='\r')&&(_gfe [0]!='\n'){_gcg ,_ :=_ccd ._gea .ReadByte ();_ead .WriteByte (_gcg );}else {break ;};};return _ead .String (),nil ;};type cmapString struct{String string ;};func _fbbc (_cebf cmapHexString )CharCode {_adef :=CharCode (0);for _ ,_eefbe :=range _cebf ._ccee {_adef <<=8;_adef |=CharCode (_eefbe );};return _adef ;};func (cmap *CMap )matchCode (_eeb []byte )(_cfe CharCode ,_dedb int ,_dbb bool ){for _gecc :=0;_gecc < _ab ;_gecc ++{if _gecc < len (_eeb ){_cfe =_cfe <<8|CharCode (_eeb [_gecc ]);_dedb ++;};_dbb =cmap .inCodespace (_cfe ,_gecc +1);if _dbb {return _cfe ,_dedb ,true ;};};_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_eeb ,string (_eeb ),cmap );return 0,0,false ;};func _cfge (_adb cmapHexString )[]rune {if len (_adb ._ccee )==1{return []rune {rune (_adb ._ccee [0])};};_cdce :=_adb ._ccee ;if len (_cdce )%2!=0{_cdce =append (_cdce ,0);_ff .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_adb ,_cdce );};_bae :=len (_cdce )>>1;_edc :=make ([]uint16 ,_bae );for _cgfd :=0;_cgfd < _bae ;_cgfd ++{_edc [_cgfd ]=uint16 (_cdce [_cgfd <<1])<<8+uint16 (_cdce [_cgfd <<1+1]);};_eabe :=_gb .Decode (_edc );return _eabe ;};type CharCode uint32 ;type fbRange struct{_gd CharCode ;_cg CharCode ;_fa string ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _abe ,_cag :=cmap ._fag [code ];_cag {return _abe ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )String ()string {_cbd :=cmap ._acfg ;_bddb :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ca ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._be )};if cmap ._aba !=""{_bddb =append (_bddb ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._aba ));};if cmap ._acf !=""{_bddb =append (_bddb ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._acf ));};_bddb =append (_bddb ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_cbd .String ()));if len (cmap ._bed )> 0{_bddb =append (_bddb ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._bed )));};if len (cmap ._fag )> 0{_bddb =append (_bddb ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._fag )));};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bac ,_bd .Join (_bddb ,"\u0020"));};func (cmap *CMap )toBfData ()string {if len (cmap ._fag )==0{return "";};_dba :=make ([]CharCode ,0,len (cmap ._fag ));for _ce :=range cmap ._fag {_dba =append (_dba ,_ce );};_de .Slice (_dba ,func (_cff ,_bcf int )bool {return _dba [_cff ]< _dba [_bcf ]});var _dbd []charRange ;_fdb :=charRange {_dba [0],_dba [0]};_gcd :=cmap ._fag [_dba [0]];for _ ,_ceb :=range _dba [1:]{_gded :=cmap ._fag [_ceb ];if _ceb ==_fdb ._cd +1&&_fge (_gded )==_fge (_gcd )+1{_fdb ._cd =_ceb ;}else {_dbd =append (_dbd ,_fdb );_fdb ._ba ,_fdb ._cd =_ceb ,_ceb ;};_gcd =_gded ;};_dbd =append (_dbd ,_fdb );var _bca []CharCode ;var _gge []fbRange ;for _ ,_deb :=range _dbd {if _deb ._ba ==_deb ._cd {_bca =append (_bca ,_deb ._ba );}else {_gge =append (_gge ,fbRange {_gd :_deb ._ba ,_cg :_deb ._cd ,_fa :cmap ._fag [_deb ._ba ]});};};_ff .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_dbd ),len (_bca ),len (_gge ));var _gdb []string ;if len (_bca )> 0{_bag :=(len (_bca )+_bgf -1)/_bgf ;for _bbe :=0;_bbe < _bag ;_bbe ++{_eca :=_dade (len (_bca )-_bbe *_bgf ,_bgf );_gdb =append (_gdb ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_eca ));for _ffd :=0;_ffd < _eca ;_ffd ++{_abf :=_bca [_bbe *_bgf +_ffd ];_dd :=cmap ._fag [_abf ];_gdb =append (_gdb ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_abf ,_bgc (_dd )));};_gdb =append (_gdb ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_gge )> 0{_aec :=(len (_gge )+_bgf -1)/_bgf ;for _adg :=0;_adg < _aec ;_adg ++{_bbf :=_dade (len (_gge )-_adg *_bgf ,_bgf );_gdb =append (_gdb ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_bbf ));for _fef :=0;_fef < _bbf ;_fef ++{_bedc :=_gge [_adg *_bgf +_fef ];_gdb =append (_gdb ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_bedc ._gd ,_bedc ._cg ,_bgc (_bedc ._fa )));};_gdb =append (_gdb ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _bd .Join (_gdb ,"\u000a");};func NewCIDSystemInfo (obj _af .PdfObject )(_fd CIDSystemInfo ,_e error ){_ef ,_gde :=_af .GetDict (obj );if !_gde {return CIDSystemInfo {},_af .ErrTypeError ;};_ded ,_gde :=_af .GetStringVal (_ef .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_gde {return CIDSystemInfo {},_af .ErrTypeError ;};_ffb ,_gde :=_af .GetStringVal (_ef .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_gde {return CIDSystemInfo {},_af .ErrTypeError ;};_eb ,_gde :=_af .GetIntVal (_ef .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_gde {return CIDSystemInfo {},_af .ErrTypeError ;};return CIDSystemInfo {Registry :_ded ,Ordering :_ffb ,Supplement :_eb },nil ;};func (cmap *CMap )parseSystemInfo ()error {_cga :=false ;_bfa :=false ;_fb :="";_egd :=false ;_bcab :=CIDSystemInfo {};for _gdg :=0;_gdg < 50&&!_egd ;_gdg ++{_aaab ,_efff :=cmap .parseObject ();if _efff !=nil {return _efff ;};switch _cagce :=_aaab .(type ){case cmapDict :_ffe :=_cagce .Dict ;_egg ,_fgd :=_ffe ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_fgd {_ff .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_abfg ,_fgd :=_egg .(cmapString );if !_fgd {_ff .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcab .Registry =_abfg .String ;_egg ,_fgd =_ffe ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_fgd {_ff .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_abfg ,_fgd =_egg .(cmapString );if !_fgd {_ff .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcab .Ordering =_abfg .String ;_caf ,_fgd :=_ffe ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_fgd {_ff .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_deg ,_fgd :=_caf .(cmapInt );if !_fgd {_ff .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcab .Supplement =int (_deg ._gfbc );_egd =true ;case cmapOperand :switch _cagce .Operand {case "\u0062\u0065\u0067i\u006e":_cga =true ;case "\u0065\u006e\u0064":_egd =true ;case "\u0064\u0065\u0066":_bfa =false ;};case cmapName :if _cga {_fb =_cagce .Name ;_bfa =true ;};case cmapString :if _bfa {switch _fb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bcab .Registry =_cagce .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bcab .Ordering =_cagce .String ;};};case cmapInt :if _bfa {switch _fb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bcab .Supplement =int (_cagce ._gfbc );};};};};if !_egd {_ff .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._acfg =_bcab ;return nil ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_aee ,_fdf :=cmap .BytesToCharcodes (data );if !_fdf {_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_dge :=make ([]string ,len (_aee ));var _ad []CharCode ;for _cc ,_agc :=range _aee {_dbc ,_aae :=cmap ._fag [_agc ];if !_aae {_ad =append (_ad ,_agc );_dbc =MissingCodeString ;};_dge [_cc ]=_dbc ;};_cbf :=_bd .Join (_dge ,"");if len (_ad )> 0{_ff .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_aee ,len (_ad ),_ad ,_cbf ,cmap );};return _cbf ,len (_ad );};func (cmap *CMap )parseName ()error {_gbf :="";_geca :=false ;for _eg :=0;_eg < 20&&!_geca ;_eg ++{_gbge ,_ecd :=cmap .parseObject ();if _ecd !=nil {return _ecd ;};switch _ecdb :=_gbge .(type ){case cmapOperand :switch _ecdb .Operand {case "\u0064\u0065\u0066":_geca =true ;default:_ff .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_gbge ,_gbf );if _gbf !=""{_gbf =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_gbf ,_ecdb .Operand );};_ff .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_gbf );};case cmapName :_gbf =_ecdb .Name ;};};if !_geca {_ff .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bac =_gbf ;return nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_aad :=_ebd (name );if _aad !=nil {return nil ,_aad ;};if cmap ._acf ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_acd ,_aad :=_ebd (cmap ._acf );if _aad !=nil {return nil ,_aad ;};for _aaa ,_bdd :=range _acd ._bg {if _ ,_gg :=cmap ._bg [_aaa ];!_gg {cmap ._bg [_aaa ]=_bdd ;};};cmap ._bed =append (cmap ._bed ,_acd ._bed ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bad []CharCode ;if cmap ._ca ==8{for _ ,_abc :=range data {_bad =append (_bad ,CharCode (_abc ));};return _bad ,true ;};for _eef :=0;_eef < len (data );{_gfb ,_cf ,_cfd :=cmap .matchCode (data [_eef :]);if !_cfd {_ff .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_eef ,data ,string (data ));return _bad ,false ;};_bad =append (_bad ,_gfb );_eef +=_cf ;};return _bad ,true ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};