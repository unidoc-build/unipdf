//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ebd "bufio";_c "bytes";_eb "encoding/hex";_ab "errors";_a "fmt";_ac "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/core";_bf "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_dd "io";_ce "sort";_e "strconv";_b "strings";_d "unicode/utf16";);func _ebcde (_bgdg cmapHexString )rune {_gbb :=_dfdb (_bgdg );if _caff :=len (_gbb );_caff ==0{_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_bgdg );return MissingCodeRune ;};if len (_gbb )> 1{_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_bgdg ,_gbb );};return _gbb [0];};func _dfdb (_bdfd cmapHexString )[]rune {if len (_bdfd ._bfba )==1{return []rune {rune (_bdfd ._bfba [0])};};_bbdd :=_bdfd ._bfba ;if len (_bbdd )%2!=0{_bbdd =append (_bbdd ,0);_ac .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_bdfd ,_bbdd );};_daag :=len (_bbdd )>>1;_bfd :=make ([]uint16 ,_daag );for _egf :=0;_egf < _daag ;_egf ++{_bfd [_egf ]=uint16 (_bbdd [_egf <<1])<<8+uint16 (_bbdd [_egf <<1+1]);};_agfb :=_d .Decode (_bfd );return _agfb ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_bfe :=_ee (name );if _bfe !=nil {return nil ,_bfe ;};if cmap ._cb ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ccc ,_bfe :=_ee (cmap ._cb );if _bfe !=nil {return nil ,_bfe ;};for _dfg ,_bcc :=range _ccc ._cg {if _ ,_fe :=cmap ._cg [_dfg ];!_fe {cmap ._cg [_dfg ]=_bcc ;};};cmap ._cbg =append (cmap ._cbg ,_ccc ._cbg ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (_df *CIDSystemInfo )String ()string {return _a .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_df .Registry ,_df .Ordering ,_df .Supplement );};func (_eded *cMapParser )parseObject ()(cmapObject ,error ){_eded .skipSpaces ();for {_cae ,_aace :=_eded ._gcbc .Peek (2);if _aace !=nil {return nil ,_aace ;};if _cae [0]=='%'{_eded .parseComment ();_eded .skipSpaces ();continue ;}else if _cae [0]=='/'{_fgf ,_fagf :=_eded .parseName ();return _fgf ,_fagf ;}else if _cae [0]=='('{_gbf ,_bee :=_eded .parseString ();return _gbf ,_bee ;}else if _cae [0]=='['{_afb ,_gec :=_eded .parseArray ();return _afb ,_gec ;}else if (_cae [0]=='<')&&(_cae [1]=='<'){_ebg ,_adga :=_eded .parseDict ();return _ebg ,_adga ;}else if _cae [0]=='<'{_cbgf ,_efc :=_eded .parseHexString ();return _cbgf ,_efc ;}else if _f .IsDecimalDigit (_cae [0])||(_cae [0]=='-'&&_f .IsDecimalDigit (_cae [1])){_edbd ,_aea :=_eded .parseNumber ();if _aea !=nil {return nil ,_aea ;};return _edbd ,nil ;}else {_afa ,_eaac :=_eded .parseOperand ();if _eaac !=nil {return nil ,_eaac ;};return _afa ,nil ;};};};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _cbd ,_cgg :=cmap ._fa [code ];_cgg {return _cbd ,true ;};return MissingCodeString ,false ;};func IsPredefinedCMap (name string )bool {return _bf .AssetExists (name )};type cmapObject interface{};type cmapString struct{String string ;};func (cmap *CMap )parseSystemInfo ()error {_bdb :=false ;_gfg :=false ;_ea :="";_eag :=false ;_bdf :=CIDSystemInfo {};for _efdc :=0;_efdc < 50&&!_eag ;_efdc ++{_cbc ,_deg :=cmap .parseObject ();if _deg !=nil {return _deg ;};switch _gacc :=_cbc .(type ){case cmapDict :_bgfb :=_gacc .Dict ;_bgb ,_ffg :=_bgfb ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_ffg {_ac .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cdf ,_ffg :=_bgb .(cmapString );if !_ffg {_ac .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bdf .Registry =_cdf .String ;_bgb ,_ffg =_bgfb ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_ffg {_ac .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cdf ,_ffg =_bgb .(cmapString );if !_ffg {_ac .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bdf .Ordering =_cdf .String ;_bacf ,_ffg :=_bgfb ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_ffg {_ac .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fcfe ,_ffg :=_bacf .(cmapInt );if !_ffg {_ac .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bdf .Supplement =int (_fcfe ._cca );_eag =true ;case cmapOperand :switch _gacc .Operand {case "\u0062\u0065\u0067i\u006e":_bdb =true ;case "\u0065\u006e\u0064":_eag =true ;case "\u0064\u0065\u0066":_gfg =false ;};case cmapName :if _bdb {_ea =_gacc .Name ;_gfg =true ;};case cmapString :if _gfg {switch _ea {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bdf .Registry =_gacc .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bdf .Ordering =_gacc .String ;};};case cmapInt :if _gfg {switch _ea {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bdf .Supplement =int (_gacc ._cca );};};};};if !_eag {_ac .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._ccg =_bdf ;return nil ;};func (cmap *CMap )parseName ()error {_abf :="";_gaf :=false ;for _fdbe :=0;_fdbe < 20&&!_gaf ;_fdbe ++{_cdc ,_edf :=cmap .parseObject ();if _edf !=nil {return _edf ;};switch _fbe :=_cdc .(type ){case cmapOperand :switch _fbe .Operand {case "\u0064\u0065\u0066":_gaf =true ;default:_ac .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_cdc ,_abf );if _abf !=""{_abf =_a .Sprintf ("\u0025\u0073\u0020%\u0073",_abf ,_fbe .Operand );};_ac .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_abf );};case cmapName :_abf =_fbe .Name ;};};if !_gaf {_ac .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._edc =_abf ;return nil ;};func (_cad *cMapParser )skipSpaces ()(int ,error ){_cbcg :=0;for {_fgc ,_fcae :=_cad ._gcbc .Peek (1);if _fcae !=nil {return 0,_fcae ;};if _f .IsWhiteSpace (_fgc [0]){_cad ._gcbc .ReadByte ();_cbcg ++;}else {break ;};};return _cbcg ,nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_ac .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_gfed (isSimple );cmap .cMapParser =_befb (data );_bb :=cmap .parse ();if _bb !=nil {return nil ,_bb ;};if len (cmap ._cbg )==0{if cmap ._cb !=""{return cmap ,nil ;};_ac .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (_bca *cMapParser )parseHexString ()(cmapHexString ,error ){_bca ._gcbc .ReadByte ();_bgcgc :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_efa :=_c .Buffer {};for {_bca .skipSpaces ();_feba ,_aecg :=_bca ._gcbc .Peek (1);if _aecg !=nil {return cmapHexString {},_aecg ;};if _feba [0]=='>'{_bca ._gcbc .ReadByte ();break ;};_acee ,_ :=_bca ._gcbc .ReadByte ();if _c .IndexByte (_bgcgc ,_acee )>=0{_efa .WriteByte (_acee );};};if _efa .Len ()%2==1{_ac .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_efa .String ());_efa .WriteByte ('0');};_agba :=_efa .Len ()/2;_dbb ,_ :=_eb .DecodeString (_efa .String ());return cmapHexString {_begf :_agba ,_bfba :_dbb },nil ;};func (cmap *CMap )parse ()error {var _afg cmapObject ;for {_fca ,_ega :=cmap .parseObject ();if _ega !=nil {if _ega ==_dd .EOF {break ;};_ac .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ega );return _ega ;};switch _ffee :=_fca .(type ){case cmapOperand :_dga :=_ffee ;switch _dga .Operand {case _abd :_dcb :=cmap .parseCodespaceRange ();if _dcb !=nil {return _dcb ;};case _fba :_dag :=cmap .parseCIDRange ();if _dag !=nil {return _dag ;};case _bfea :_add :=cmap .parseBfchar ();if _add !=nil {return _add ;};case _fad :_eba :=cmap .parseBfrange ();if _eba !=nil {return _eba ;};case _gcaaa :if _afg ==nil {_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_agc ,_cgaf :=_afg .(cmapName );if !_cgaf {_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_afg );return ErrBadCMap ;};cmap ._cb =_agc .Name ;case _bgbc :_gbe :=cmap .parseSystemInfo ();if _gbe !=nil {return _gbe ;};};case cmapName :_cgab :=_ffee ;switch _cgab .Name {case _bgbc :_edcc :=cmap .parseSystemInfo ();if _edcc !=nil {return _edcc ;};case _cda :_dgba :=cmap .parseName ();if _dgba !=nil {return _dgba ;};case _edd :_facg :=cmap .parseType ();if _facg !=nil {return _facg ;};case _geba :_cfg :=cmap .parseVersion ();if _cfg !=nil {return _cfg ;};};};_afg =_fca ;};return nil ;};func _dbcb (_cega ,_gega int )int {if _cega < _gega {return _cega ;};return _gega ;};const (_gea =100;_gfeb ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_aeg ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func _cgd (_aegf cmapHexString )CharCode {_cggd :=CharCode (0);for _ ,_gdf :=range _aegf ._bfba {_cggd <<=8;_cggd |=CharCode (_gdf );};return _cggd ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_dbc ,_bac :=cmap ._cg [code ];return _dbc ,_bac ;};func (_fee *cMapParser )parseName ()(cmapName ,error ){_egb :="";_gfad :=false ;for {_dca ,_ccb :=_fee ._gcbc .Peek (1);if _ccb ==_dd .EOF {break ;};if _ccb !=nil {return cmapName {_egb },_ccb ;};if !_gfad {if _dca [0]=='/'{_gfad =true ;_fee ._gcbc .ReadByte ();}else {_ac .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_dca ,_dca );return cmapName {_egb },_a .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_dca [0]);};}else {if _f .IsWhiteSpace (_dca [0]){break ;}else if (_dca [0]=='/')||(_dca [0]=='[')||(_dca [0]=='(')||(_dca [0]==']')||(_dca [0]=='<')||(_dca [0]=='>'){break ;}else if _dca [0]=='#'{_ebb ,_beg :=_fee ._gcbc .Peek (3);if _beg !=nil {return cmapName {_egb },_beg ;};_fee ._gcbc .Discard (3);_ffeeg ,_beg :=_eb .DecodeString (string (_ebb [1:3]));if _beg !=nil {return cmapName {_egb },_beg ;};_egb +=string (_ffeeg );}else {_adb ,_ :=_fee ._gcbc .ReadByte ();_egb +=string (_adb );};};};return cmapName {_egb },nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_dad ,_dac :=cmap ._bgf [s ];return _dad ,_dac ;};func (cmap *CMap )inCodespace (_cgb CharCode ,_abeg int )bool {for _ ,_cegc :=range cmap ._cbg {if _cegc .Low <=_cgb &&_cgb <=_cegc .High &&_abeg ==_cegc .NumBytes {return true ;};};return false ;};type cmapFloat struct{_fef float64 };func (cmap *CMap )parseBfrange ()error {for {var _fbg CharCode ;_dge ,_edb :=cmap .parseObject ();if _edb !=nil {if _edb ==_dd .EOF {break ;};return _edb ;};switch _ccgb :=_dge .(type ){case cmapOperand :if _ccgb .Operand ==_aaf {return nil ;};return _ab .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_fbg =_cgd (_ccgb );default:return _ab .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _agb CharCode ;_dge ,_edb =cmap .parseObject ();if _edb !=nil {if _edb ==_dd .EOF {break ;};return _edb ;};switch _cec :=_dge .(type ){case cmapOperand :_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_agb =_cgd (_cec );default:_ac .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dge );return ErrBadCMap ;};_dge ,_edb =cmap .parseObject ();if _edb !=nil {if _edb ==_dd .EOF {break ;};return _edb ;};switch _ecg :=_dge .(type ){case cmapArray :if len (_ecg .Array )!=int (_agb -_fbg )+1{_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _bde :=_fbg ;_bde <=_agb ;_bde ++{_bec :=_ecg .Array [_bde -_fbg ];_geg ,_cegcb :=_bec .(cmapHexString );if !_cegcb {return _ab .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_fg :=_dfdb (_geg );cmap ._fa [_bde ]=string (_fg );};case cmapHexString :_dade :=_dfdb (_ecg );_gegd :=len (_dade );for _afgc :=_fbg ;_afgc <=_agb ;_afgc ++{cmap ._fa [_afgc ]=string (_dade );_dade [_gegd -1]++;};default:_ac .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dge );return ErrBadCMap ;};};return nil ;};func _gfed (_abb bool )*CMap {_bga :=16;if _abb {_bga =8;};return &CMap {_ff :_bga ,_cg :make (map[CharCode ]CharCode ),_ebc :make (map[CharCode ]CharCode ),_fa :make (map[CharCode ]string ),_bgf :make (map[string ]CharCode )};};func (cmap *CMap )toBfData ()string {if len (cmap ._fa )==0{return "";};_ada :=make ([]CharCode ,0,len (cmap ._fa ));for _edg :=range cmap ._fa {_ada =append (_ada ,_edg );};_ce .Slice (_ada ,func (_cggc ,_cdd int )bool {return _ada [_cggc ]< _ada [_cdd ]});var _age []charRange ;_fcd :=charRange {_ada [0],_ada [0]};_aec :=cmap ._fa [_ada [0]];for _ ,_gdd :=range _ada [1:]{_efd :=cmap ._fa [_gdd ];if _gdd ==_fcd ._bc +1&&_gca (_efd )==_gca (_aec )+1{_fcd ._bc =_gdd ;}else {_age =append (_age ,_fcd );_fcd ._cc ,_fcd ._bc =_gdd ,_gdd ;};_aec =_efd ;};_age =append (_age ,_fcd );var _daa []CharCode ;var _cge []fbRange ;for _ ,_aga :=range _age {if _aga ._cc ==_aga ._bc {_daa =append (_daa ,_aga ._cc );}else {_cge =append (_cge ,fbRange {_bg :_aga ._cc ,_ga :_aga ._bc ,_ef :cmap ._fa [_aga ._cc ]});};};_ac .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_age ),len (_daa ),len (_cge ));var _eea []string ;if len (_daa )> 0{_bccd :=(len (_daa )+_gea -1)/_gea ;for _ffa :=0;_ffa < _bccd ;_ffa ++{_acga :=_dbcb (len (_daa )-_ffa *_gea ,_gea );_eea =append (_eea ,_a .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_acga ));for _cag :=0;_cag < _acga ;_cag ++{_bef :=_daa [_ffa *_gea +_cag ];_ffd :=cmap ._fa [_bef ];_eea =append (_eea ,_a .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_bef ,_ceb (_ffd )));};_eea =append (_eea ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_cge )> 0{_caa :=(len (_cge )+_gea -1)/_gea ;for _adg :=0;_adg < _caa ;_adg ++{_ace :=_dbcb (len (_cge )-_adg *_gea ,_gea );_eea =append (_eea ,_a .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_ace ));for _dgg :=0;_dgg < _ace ;_dgg ++{_fdb :=_cge [_adg *_gea +_dgg ];_eea =append (_eea ,_a .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_fdb ._bg ,_fdb ._ga ,_ceb (_fdb ._ef )));};_eea =append (_eea ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _b .Join (_eea ,"\u000a");};func (_abff *cMapParser )parseOperand ()(cmapOperand ,error ){_gfgc :=cmapOperand {};_bae :=_c .Buffer {};for {_cade ,_aedb :=_abff ._gcbc .Peek (1);if _aedb !=nil {if _aedb ==_dd .EOF {break ;};return _gfgc ,_aedb ;};if _f .IsDelimiter (_cade [0]){break ;};if _f .IsWhiteSpace (_cade [0]){break ;};_ccd ,_ :=_abff ._gcbc .ReadByte ();_bae .WriteByte (_ccd );};if _bae .Len ()==0{return _gfgc ,_a .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_gfgc .Operand =_bae .String ();return _gfgc ,nil ;};type cMapParser struct{_gcbc *_ebd .Reader };type cmapInt struct{_cca int64 };const (_bgbc ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_ageg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gcc ="\u0065n\u0064\u0063\u006d\u0061\u0070";_abd ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_ecc ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_bfea ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_bbe ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_fad ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_aaf ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fba ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bbef ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gcaaa ="\u0075s\u0065\u0063\u006d\u0061\u0070";_cda ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_edd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_geba ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func _gca (_gcaa string )rune {_aac :=[]rune (_gcaa );return _aac [len (_aac )-1]};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_gffe ,_ae :=cmap .BytesToCharcodes (data );if !_ae {_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_ca :=make ([]string ,len (_gffe ));var _adf []CharCode ;for _adc ,_deae :=range _gffe {_bfb ,_cff :=cmap ._fa [_deae ];if !_cff {_adf =append (_adf ,_deae );_bfb =MissingCodeString ;};_ca [_adc ]=_bfb ;};_gfd :=_b .Join (_ca ,"");if len (_adf )> 0{_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_gffe ,len (_adf ),_adf ,_gfd ,cmap );};return _gfd ,len (_adf );};type charRange struct{_cc CharCode ;_bc CharCode ;};func (cmap *CMap )computeInverseMappings (){for _ba ,_eeg :=range cmap ._cg {if _eeb ,_ede :=cmap ._ebc [_eeg ];!_ede ||(_ede &&_eeb > _ba ){cmap ._ebc [_eeg ]=_ba ;};};for _ec ,_ecd :=range cmap ._fa {if _bge ,_dab :=cmap ._bgf [_ecd ];!_dab ||(_dab &&_bge > _ec ){cmap ._bgf [_ecd ]=_ec ;};};_ce .Slice (cmap ._cbg ,func (_gb ,_cga int )bool {return cmap ._cbg [_gb ].Low < cmap ._cbg [_cga ].Low });};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_dc ,_cac :=cmap ._ebc [cid ];return _dc ,_cac ;};func (cmap *CMap )parseCodespaceRange ()error {for {_abc ,_dcg :=cmap .parseObject ();if _dcg !=nil {if _dcg ==_dd .EOF {break ;};return _dcg ;};_fda ,_bag :=_abc .(cmapHexString );if !_bag {if _cbgb ,_geb :=_abc .(cmapOperand );_geb {if _cbgb .Operand ==_ecc {return nil ;};return _ab .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_abc ,_dcg =cmap .parseObject ();if _dcg !=nil {if _dcg ==_dd .EOF {break ;};return _dcg ;};_badg ,_bag :=_abc .(cmapHexString );if !_bag {return _ab .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_fda ._bfba )!=len (_badg ._bfba ){return _ab .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_aad :=_cgd (_fda );_abcc :=_cgd (_badg );if _abcc < _aad {_ac .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_aad ,_abcc );return ErrBadCMap ;};_ggg :=_badg ._begf ;_abcb :=Codespace {NumBytes :_ggg ,Low :_aad ,High :_abcc };cmap ._cbg =append (cmap ._cbg ,_abcb );_ac .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_aad ,_abcc );};if len (cmap ._cbg )==0{_ac .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};var (ErrBadCMap =_ab .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_ab .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_ab .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (_gfb *cMapParser )parseString ()(cmapString ,error ){_gfb ._gcbc .ReadByte ();_gacf :=_c .Buffer {};_cgga :=1;for {_efdcf ,_dce :=_gfb ._gcbc .Peek (1);if _dce !=nil {return cmapString {_gacf .String ()},_dce ;};if _efdcf [0]=='\\'{_gfb ._gcbc .ReadByte ();_cdb ,_ccgba :=_gfb ._gcbc .ReadByte ();if _ccgba !=nil {return cmapString {_gacf .String ()},_ccgba ;};if _f .IsOctalDigit (_cdb ){_cdbg ,_abegb :=_gfb ._gcbc .Peek (2);if _abegb !=nil {return cmapString {_gacf .String ()},_abegb ;};var _ecgd []byte ;_ecgd =append (_ecgd ,_cdb );for _ ,_baa :=range _cdbg {if _f .IsOctalDigit (_baa ){_ecgd =append (_ecgd ,_baa );}else {break ;};};_gfb ._gcbc .Discard (len (_ecgd )-1);_ac .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_ecgd );_faa ,_abegb :=_e .ParseUint (string (_ecgd ),8,32);if _abegb !=nil {return cmapString {_gacf .String ()},_abegb ;};_gacf .WriteByte (byte (_faa ));continue ;};switch _cdb {case 'n':_gacf .WriteByte ('\n');case 'r':_gacf .WriteByte ('\r');case 't':_gacf .WriteByte ('\t');case 'b':_gacf .WriteByte ('\b');case 'f':_gacf .WriteByte ('\f');case '(':_gacf .WriteByte ('(');case ')':_gacf .WriteByte (')');case '\\':_gacf .WriteByte ('\\');};continue ;}else if _efdcf [0]=='('{_cgga ++;}else if _efdcf [0]==')'{_cgga --;if _cgga ==0{_gfb ._gcbc .ReadByte ();break ;};};_cfc ,_ :=_gfb ._gcbc .ReadByte ();_gacf .WriteByte (_cfc );};return cmapString {_gacf .String ()},nil ;};func (cmap *CMap )Name ()string {return cmap ._edc };func (_aed *cMapParser )parseArray ()(cmapArray ,error ){_fagc :=cmapArray {};_fagc .Array =[]cmapObject {};_aed ._gcbc .ReadByte ();for {_aed .skipSpaces ();_dfc ,_dadb :=_aed ._gcbc .Peek (1);if _dadb !=nil {return _fagc ,_dadb ;};if _dfc [0]==']'{_aed ._gcbc .ReadByte ();break ;};_fed ,_dadb :=_aed .parseObject ();if _dadb !=nil {return _fagc ,_dadb ;};_fagc .Array =append (_fagc .Array ,_fed );};return _fagc ,nil ;};func (cmap *CMap )NBits ()int {return cmap ._ff };type cmapHexString struct{_begf int ;_bfba []byte ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )String ()string {_feb :=cmap ._ccg ;_gef :=[]string {_a .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ff ),_a .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._gfe )};if cmap ._agd !=""{_gef =append (_gef ,_a .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._agd ));};if cmap ._cb !=""{_gef =append (_gef ,_a .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._cb ));};_gef =append (_gef ,_a .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_feb .String ()));if len (cmap ._cbg )> 0{_gef =append (_gef ,_a .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cbg )));};if len (cmap ._fa )> 0{_gef =append (_gef ,_a .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._fa )));};return _a .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._edc ,_b .Join (_gef ,"\u0020"));};func (cmap *CMap )parseType ()error {_gafa :=0;_cebe :=false ;for _dadd :=0;_dadd < 3&&!_cebe ;_dadd ++{_dbf ,_caf :=cmap .parseObject ();if _caf !=nil {return _caf ;};switch _fceb :=_dbf .(type ){case cmapOperand :switch _fceb .Operand {case "\u0064\u0065\u0066":_cebe =true ;default:_ac .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_dbf );return ErrBadCMap ;};case cmapInt :_gafa =int (_fceb ._cca );};};cmap ._gfe =_gafa ;return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_dcdc ,_agf :=cmap .parseObject ();if _agf !=nil {if _agf ==_dd .EOF {break ;};return _agf ;};_agcd ,_gfac :=_dcdc .(cmapHexString );if !_gfac {if _gbc ,_gfc :=_dcdc .(cmapOperand );_gfc {if _gbc .Operand ==_bbef {return nil ;};return _ab .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_bcgf :=_cgd (_agcd );_dcdc ,_agf =cmap .parseObject ();if _agf !=nil {if _agf ==_dd .EOF {break ;};return _agf ;};_ece ,_gfac :=_dcdc .(cmapHexString );if !_gfac {return _ab .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_agcd ._bfba )!=len (_ece ._bfba ){return _ab .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_fae :=_cgd (_ece );if _bcgf > _fae {_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_bcgf ,_fae );return ErrBadCMap ;};_dcdc ,_agf =cmap .parseObject ();if _agf !=nil {if _agf ==_dd .EOF {break ;};return _agf ;};_dgde ,_gfac :=_dcdc .(cmapInt );if !_gfac {return _ab .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _dgde ._cca < 0{return _ab .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_aba :=_dgde ._cca ;for _bgg :=_bcgf ;_bgg <=_fae ;_bgg ++{cmap ._cg [_bgg ]=CharCode (_aba );_aba ++;};_ac .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_bcgf ,_fae ,_dgde ._cca );};return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )parseVersion ()error {_bad :="";_dee :=false ;for _cace :=0;_cace < 3&&!_dee ;_cace ++{_bce ,_bgac :=cmap .parseObject ();if _bgac !=nil {return _bgac ;};switch _dgf :=_bce .(type ){case cmapOperand :switch _dgf .Operand {case "\u0064\u0065\u0066":_dee =true ;default:_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_bce );return ErrBadCMap ;};case cmapInt :_bad =_a .Sprintf ("\u0025\u0064",_dgf ._cca );case cmapFloat :_bad =_a .Sprintf ("\u0025\u0066",_dgf ._fef );case cmapString :_bad =_dgf .String ;default:_ac .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_bce );};};cmap ._agd =_bad ;return nil ;};func NewCIDSystemInfo (obj _f .PdfObject )(_ed CIDSystemInfo ,_fd error ){_ag ,_dea :=_f .GetDict (obj );if !_dea {return CIDSystemInfo {},_f .ErrTypeError ;};_gf ,_dea :=_f .GetStringVal (_ag .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_dea {return CIDSystemInfo {},_f .ErrTypeError ;};_fc ,_dea :=_f .GetStringVal (_ag .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_dea {return CIDSystemInfo {},_f .ErrTypeError ;};_bd ,_dea :=_f .GetIntVal (_ag .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_dea {return CIDSystemInfo {},_f .ErrTypeError ;};return CIDSystemInfo {Registry :_gf ,Ordering :_fc ,Supplement :_bd },nil ;};const (_de =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_cebf *cMapParser )parseComment ()(string ,error ){var _caed _c .Buffer ;_ ,_def :=_cebf .skipSpaces ();if _def !=nil {return _caed .String (),_def ;};_efce :=true ;for {_dde ,_gccf :=_cebf ._gcbc .Peek (1);if _gccf !=nil {_ac .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_gccf );return _caed .String (),_gccf ;};if _efce &&_dde [0]!='%'{return _caed .String (),ErrBadCMapComment ;};_efce =false ;if (_dde [0]!='\r')&&(_dde [0]!='\n'){_ffdb ,_ :=_cebf ._gcbc .ReadByte ();_caed .WriteByte (_ffdb );}else {break ;};};return _caed .String (),nil ;};func _ee (_ad string )(*CMap ,error ){_fcf ,_dg :=_bf .Asset (_ad );if _dg !=nil {return nil ,_dg ;};return LoadCmapFromDataCID (_fcf );};type cmapDict struct{Dict map[string ]cmapObject ;};type CMap struct{*cMapParser ;_edc string ;_ff int ;_gfe int ;_agd string ;_cb string ;_ccg CIDSystemInfo ;_cbg []Codespace ;_cg map[CharCode ]CharCode ;_ebc map[CharCode ]CharCode ;_fa map[CharCode ]string ;_bgf map[string ]CharCode ;_cf []byte ;_ge *_f .PdfObjectStream ;};func (cmap *CMap )Stream ()(*_f .PdfObjectStream ,error ){if cmap ._ge !=nil {return cmap ._ge ,nil ;};_dfe ,_fdd :=_f .MakeStream (cmap .Bytes (),_f .NewFlateEncoder ());if _fdd !=nil {return nil ,_fdd ;};cmap ._ge =_dfe ;return cmap ._ge ,nil ;};func _befb (_cdac []byte )*cMapParser {_cgff :=cMapParser {};_gab :=_c .NewBuffer (_cdac );_cgff ._gcbc =_ebd .NewReader (_gab );return &_cgff ;};func (cmap *CMap )matchCode (_bbf []byte )(_dgb CharCode ,_aa int ,_fce bool ){for _ceg :=0;_ceg < _de ;_ceg ++{if _ceg < len (_bbf ){_dgb =_dgb <<8|CharCode (_bbf [_ceg ]);_aa ++;};_fce =cmap .inCodespace (_dgb ,_ceg +1);if _fce {return _dgb ,_aa ,true ;};};_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bbf ,string (_bbf ),cmap );return 0,0,false ;};func (cmap *CMap )parseBfchar ()error {for {_gdg ,_dgbd :=cmap .parseObject ();if _dgbd !=nil {if _dgbd ==_dd .EOF {break ;};return _dgbd ;};var _bgd CharCode ;switch _aacd :=_gdg .(type ){case cmapOperand :if _aacd .Operand ==_bbe {return nil ;};return _ab .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_bgd =_cgd (_aacd );default:return _ab .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_gdg ,_dgbd =cmap .parseObject ();if _dgbd !=nil {if _dgbd ==_dd .EOF {break ;};return _dgbd ;};var _bfa []rune ;switch _abed :=_gdg .(type ){case cmapOperand :if _abed .Operand ==_bbe {return nil ;};_ac .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_abed );return ErrBadCMap ;case cmapHexString :_bfa =_dfdb (_abed );case cmapName :_ac .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_abed );_bfa =[]rune {MissingCodeRune };default:_ac .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_gdg );return ErrBadCMap ;};cmap ._fa [_bgd ]=string (_bfa );};return nil ;};func (cmap *CMap )Type ()int {return cmap ._gfe };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _dgd []CharCode ;if cmap ._ff ==8{for _ ,_bbd :=range data {_dgd =append (_dgd ,CharCode (_bbd ));};return _dgd ,true ;};for _af :=0;_af < len (data );{_gcbf ,_dcd ,_fea :=cmap .matchCode (data [_af :]);if !_fea {_ac .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_af ,data ,string (data ));return _dgd ,false ;};_dgd =append (_dgd ,_gcbf );_af +=_dcd ;};return _dgd ,true ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gc :=make (map[CharCode ]string ,len (codeToRune ));for _da ,_db :=range codeToRune {_gc [_da ]=string (_db );};cmap :=&CMap {_edc :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_gfe :2,_ff :16,_ccg :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cbg :[]Codespace {{Low :0,High :0xffff}},_fa :_gc ,_bgf :make (map[string ]CharCode ,len (codeToRune )),_cg :make (map[CharCode ]CharCode ,len (codeToRune )),_ebc :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};type cmapName struct{Name string ;};func _aef ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_aadg *cMapParser )parseNumber ()(cmapObject ,error ){_ebcb ,_agbc :=_f .ParseNumber (_aadg ._gcbc );if _agbc !=nil {return nil ,_agbc ;};switch _bba :=_ebcb .(type ){case *_f .PdfObjectFloat :return cmapFloat {float64 (*_bba )},nil ;case *_f .PdfObjectInteger :return cmapInt {int64 (*_bba )},nil ;};return nil ,_a .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ebcb );};func _ceb (_fb string )string {_ffe :=[]rune (_fb );_bgcg :=make ([]string ,len (_ffe ));for _gac ,_fbb :=range _ffe {_bgcg [_gac ]=_a .Sprintf ("\u0025\u0030\u0034\u0078",_fbb );};return _a .Sprintf ("\u003c\u0025\u0073\u003e",_b .Join (_bgcg ,""));};func (cmap *CMap )Bytes ()[]byte {_ac .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._cf )> 0{return cmap ._cf ;};cmap ._cf =[]byte (_b .Join ([]string {_gfeb ,cmap .toBfData (),_aeg },"\u000a"));return cmap ._cf ;};type cmapArray struct{Array []cmapObject ;};type fbRange struct{_bg CharCode ;_ga CharCode ;_ef string ;};type CharCode uint32 ;func (_bbda *cMapParser )parseDict ()(cmapDict ,error ){_ac .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_dacc :=_aef ();_dace ,_ :=_bbda ._gcbc .ReadByte ();if _dace !='<'{return _dacc ,ErrBadCMapDict ;};_dace ,_ =_bbda ._gcbc .ReadByte ();if _dace !='<'{return _dacc ,ErrBadCMapDict ;};for {_bbda .skipSpaces ();_fcb ,_gafb :=_bbda ._gcbc .Peek (2);if _gafb !=nil {return _dacc ,_gafb ;};if (_fcb [0]=='>')&&(_fcb [1]=='>'){_bbda ._gcbc .ReadByte ();_bbda ._gcbc .ReadByte ();break ;};_abge ,_gafb :=_bbda .parseName ();_ac .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_abge .Name );if _gafb !=nil {_ac .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_gafb );return _dacc ,_gafb ;};_bbda .skipSpaces ();_eeac ,_gafb :=_bbda .parseObject ();if _gafb !=nil {return _dacc ,_gafb ;};_dacc .Dict [_abge .Name ]=_eeac ;_bbda .skipSpaces ();_fcb ,_gafb =_bbda ._gcbc .Peek (3);if _gafb !=nil {return _dacc ,_gafb ;};if string (_fcb )=="\u0064\u0065\u0066"{_bbda ._gcbc .Discard (3);};};return _dacc ,nil ;};