//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ce "bufio";_bc "bytes";_c "encoding/hex";_a "errors";_d "fmt";_ef "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/core";_ed "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_g "io";_cg "sort";_dg "strconv";_f "strings";_e "unicode/utf16";);type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func _fb (_efb string )rune {_aac :=[]rune (_efb );return _aac [len (_aac )-1]};func (cmap *CMap )toBfData ()string {if len (cmap ._aag )==0{return "";};_bde :=make ([]CharCode ,0,len (cmap ._aag ));for _dbb :=range cmap ._aag {_bde =append (_bde ,_dbb );};_cg .Slice (_bde ,func (_fae ,_cgaf int )bool {return _bde [_fae ]< _bde [_cgaf ]});var _ddaf []charRange ;_agf :=charRange {_bde [0],_bde [0]};_dfb :=cmap ._aag [_bde [0]];for _ ,_ge :=range _bde [1:]{_dea :=cmap ._aag [_ge ];if _ge ==_agf ._af +1&&_fb (_dea )==_fb (_dfb )+1{_agf ._af =_ge ;}else {_ddaf =append (_ddaf ,_agf );_agf ._eb ,_agf ._af =_ge ,_ge ;};_dfb =_dea ;};_ddaf =append (_ddaf ,_agf );var _cbb []CharCode ;var _cae []fbRange ;for _ ,_dgb :=range _ddaf {if _dgb ._eb ==_dgb ._af {_cbb =append (_cbb ,_dgb ._eb );}else {_cae =append (_cae ,fbRange {_gf :_dgb ._eb ,_aa :_dgb ._af ,_ae :cmap ._aag [_dgb ._eb ]});};};_ef .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ddaf ),len (_cbb ),len (_cae ));var _efaa []string ;if len (_cbb )> 0{_gff :=(len (_cbb )+_bea -1)/_bea ;for _dc :=0;_dc < _gff ;_dc ++{_deac :=_ced (len (_cbb )-_dc *_bea ,_bea );_efaa =append (_efaa ,_d .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_deac ));for _dfc :=0;_dfc < _deac ;_dfc ++{_abga :=_cbb [_dc *_bea +_dfc ];_gg :=cmap ._aag [_abga ];_efaa =append (_efaa ,_d .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_abga ,_bf (_gg )));};_efaa =append (_efaa ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_cae )> 0{_bcfe :=(len (_cae )+_bea -1)/_bea ;for _aagc :=0;_aagc < _bcfe ;_aagc ++{_agc :=_ced (len (_cae )-_aagc *_bea ,_bea );_efaa =append (_efaa ,_d .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_agc ));for _fgbf :=0;_fgbf < _agc ;_fgbf ++{_gfd :=_cae [_aagc *_bea +_fgbf ];_efaa =append (_efaa ,_d .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_gfd ._gf ,_gfd ._aa ,_bf (_gfd ._ae )));};_efaa =append (_efaa ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _f .Join (_efaa ,"\u000a");};func (cmap *CMap )Stream ()(*_bd .PdfObjectStream ,error ){if cmap ._ga !=nil {return cmap ._ga ,nil ;};_bag ,_bbf :=_bd .MakeStream (cmap .Bytes (),_bd .NewFlateEncoder ());if _bbf !=nil {return nil ,_bbf ;};cmap ._ga =_bag ;return cmap ._ga ,nil ;};type cmapInt struct{_agfd int64 };func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_ef .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_aae (isSimple );cmap .cMapParser =_edgc (data );_bdd :=cmap .parse ();if _bdd !=nil {return nil ,_bdd ;};if len (cmap ._ee )==0{if cmap ._dgf !=""{return cmap ,nil ;};_ef .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )Bytes ()[]byte {_ef .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._eg )> 0{return cmap ._eg ;};cmap ._eg =[]byte (_f .Join ([]string {_bbe ,cmap .toBfData (),_fec },"\u000a"));return cmap ._eg ;};func (cmap *CMap )matchCode (_agd []byte )(_fcf CharCode ,_bgb int ,_adf bool ){for _efa :=0;_efa < _ea ;_efa ++{if _efa < len (_agd ){_fcf =_fcf <<8|CharCode (_agd [_efa ]);_bgb ++;};_adf =cmap .inCodespace (_fcf ,_efa +1);if _adf {return _fcf ,_bgb ,true ;};};_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_agd ,string (_agd ),cmap );return 0,0,false ;};func IsPredefinedCMap (name string )bool {return _ed .AssetExists (name )};type CharCode uint32 ;func (cmap *CMap )parseSystemInfo ()error {_ddb :=false ;_beg :=false ;_faec :="";_ebb :=false ;_cfc :=CIDSystemInfo {};for _edge :=0;_edge < 50&&!_ebb ;_edge ++{_fbf ,_ddf :=cmap .parseObject ();if _ddf !=nil {return _ddf ;};switch _cadb :=_fbf .(type ){case cmapDict :_efbd :=_cadb .Dict ;_ffg ,_gcb :=_efbd ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_gcb {_ef .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcff ,_gcb :=_ffg .(cmapString );if !_gcb {_ef .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cfc .Registry =_bcff .String ;_ffg ,_gcb =_efbd ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_gcb {_ef .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bcff ,_gcb =_ffg .(cmapString );if !_gcb {_ef .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cfc .Ordering =_bcff .String ;_egb ,_gcb :=_efbd ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_gcb {_ef .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_aaec ,_gcb :=_egb .(cmapInt );if !_gcb {_ef .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cfc .Supplement =int (_aaec ._agfd );_ebb =true ;case cmapOperand :switch _cadb .Operand {case "\u0062\u0065\u0067i\u006e":_ddb =true ;case "\u0065\u006e\u0064":_ebb =true ;case "\u0064\u0065\u0066":_beg =false ;};case cmapName :if _ddb {_faec =_cadb .Name ;_beg =true ;};case cmapString :if _beg {switch _faec {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cfc .Registry =_cadb .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cfc .Ordering =_cadb .String ;};};case cmapInt :if _beg {switch _faec {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cfc .Supplement =int (_cadb ._agfd );};};};};if !_ebb {_ef .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._dad =_cfc ;return nil ;};func _gbd (_eeeb cmapHexString )rune {_fcd :=_bcd (_eeeb );if _dgdd :=len (_fcd );_dgdd ==0{_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_eeeb );return MissingCodeRune ;};if len (_fcd )> 1{_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_eeeb ,_fcd );};return _fcd [0];};const (_bea =100;_bbe ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_fec ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};type cmapOperand struct{Operand string ;};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_de ,_cdc :=cmap .BytesToCharcodes (data );if !_cdc {_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_abg :=make ([]string ,len (_de ));var _abgg []CharCode ;for _cdca ,_ba :=range _de {_aec ,_bge :=cmap ._aag [_ba ];if !_bge {_abgg =append (_abgg ,_ba );_aec =MissingCodeString ;};_abg [_cdca ]=_aec ;};_age :=_f .Join (_abg ,"");if len (_abgg )> 0{_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_de ,len (_abgg ),_abgg ,_age ,cmap );};return _age ,len (_abgg );};func (cmap *CMap )NBits ()int {return cmap ._cfg };func (cmap *CMap )parseType ()error {_ebc :=0;_ggf :=false ;for _afc :=0;_afc < 3&&!_ggf ;_afc ++{_faed ,_dbfd :=cmap .parseObject ();if _dbfd !=nil {return _dbfd ;};switch _cgb :=_faed .(type ){case cmapOperand :switch _cgb .Operand {case "\u0064\u0065\u0066":_ggf =true ;default:_ef .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_faed );return ErrBadCMap ;};case cmapInt :_ebc =int (_cgb ._agfd );};};cmap ._bdb =_ebc ;return nil ;};type cmapArray struct{Array []cmapObject ;};func _afg (_cbeg cmapHexString )CharCode {_aab :=CharCode (0);for _ ,_cggd :=range _cbeg ._bcc {_aab <<=8;_aab |=CharCode (_cggd );};return _aab ;};func (_ca *CIDSystemInfo )String ()string {return _d .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ca .Registry ,_ca .Ordering ,_ca .Supplement );};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _bab []CharCode ;if cmap ._cfg ==8{for _ ,_fd :=range data {_bab =append (_bab ,CharCode (_fd ));};return _bab ,true ;};for _eee :=0;_eee < len (data );{_cdf ,_egg ,_bda :=cmap .matchCode (data [_eee :]);if !_bda {_ef .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_eee ,data ,string (data ));return _bab ,false ;};_bab =append (_bab ,_cdf );_eee +=_egg ;};return _bab ,true ;};func _dgfe (_edg string )(*CMap ,error ){_aee ,_ec :=_ed .Asset (_edg );if _ec !=nil {return nil ,_ec ;};return LoadCmapFromDataCID (_aee );};func (_fga *cMapParser )parseString ()(cmapString ,error ){_fga ._def .ReadByte ();_bcac :=_bc .Buffer {};_bdcb :=1;for {_eefb ,_bff :=_fga ._def .Peek (1);if _bff !=nil {return cmapString {_bcac .String ()},_bff ;};if _eefb [0]=='\\'{_fga ._def .ReadByte ();_dbd ,_agab :=_fga ._def .ReadByte ();if _agab !=nil {return cmapString {_bcac .String ()},_agab ;};if _bd .IsOctalDigit (_dbd ){_cfge ,_cge :=_fga ._def .Peek (2);if _cge !=nil {return cmapString {_bcac .String ()},_cge ;};var _defe []byte ;_defe =append (_defe ,_dbd );for _ ,_cfcf :=range _cfge {if _bd .IsOctalDigit (_cfcf ){_defe =append (_defe ,_cfcf );}else {break ;};};_fga ._def .Discard (len (_defe )-1);_ef .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_defe );_fde ,_cge :=_dg .ParseUint (string (_defe ),8,32);if _cge !=nil {return cmapString {_bcac .String ()},_cge ;};_bcac .WriteByte (byte (_fde ));continue ;};switch _dbd {case 'n':_bcac .WriteByte ('\n');case 'r':_bcac .WriteByte ('\r');case 't':_bcac .WriteByte ('\t');case 'b':_bcac .WriteByte ('\b');case 'f':_bcac .WriteByte ('\f');case '(':_bcac .WriteByte ('(');case ')':_bcac .WriteByte (')');case '\\':_bcac .WriteByte ('\\');};continue ;}else if _eefb [0]=='('{_bdcb ++;}else if _eefb [0]==')'{_bdcb --;if _bdcb ==0{_fga ._def .ReadByte ();break ;};};_bcfc ,_ :=_fga ._def .ReadByte ();_bcac .WriteByte (_bcfc );};return cmapString {_bcac .String ()},nil ;};type cmapHexString struct{_fed int ;_bcc []byte ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fef ,_egf :=cmap ._ceb [code ];return _fef ,_egf ;};func (_eefc *cMapParser )parseObject ()(cmapObject ,error ){_eefc .skipSpaces ();for {_cbcd ,_fbb :=_eefc ._def .Peek (2);if _fbb !=nil {return nil ,_fbb ;};if _cbcd [0]=='%'{_eefc .parseComment ();_eefc .skipSpaces ();continue ;}else if _cbcd [0]=='/'{_dege ,_aaa :=_eefc .parseName ();return _dege ,_aaa ;}else if _cbcd [0]=='('{_dbc ,_ggg :=_eefc .parseString ();return _dbc ,_ggg ;}else if _cbcd [0]=='['{_aefc ,_aeg :=_eefc .parseArray ();return _aefc ,_aeg ;}else if (_cbcd [0]=='<')&&(_cbcd [1]=='<'){_caee ,_aage :=_eefc .parseDict ();return _caee ,_aage ;}else if _cbcd [0]=='<'{_aegc ,_fbbc :=_eefc .parseHexString ();return _aegc ,_fbbc ;}else if _bd .IsDecimalDigit (_cbcd [0])||(_cbcd [0]=='-'&&_bd .IsDecimalDigit (_cbcd [1])){_dgc ,_aaae :=_eefc .parseNumber ();if _aaae !=nil {return nil ,_aaae ;};return _dgc ,nil ;}else {_bgd ,_eabc :=_eefc .parseOperand ();if _eabc !=nil {return nil ,_eabc ;};return _bgd ,nil ;};};};func (cmap *CMap )parseBfrange ()error {for {var _eeg CharCode ;_dcf ,_efdg :=cmap .parseObject ();if _efdg !=nil {if _efdg ==_g .EOF {break ;};return _efdg ;};switch _cfgg :=_dcf .(type ){case cmapOperand :if _cfgg .Operand ==_adb {return nil ;};return _a .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_eeg =_afg (_cfgg );default:return _a .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _cda CharCode ;_dcf ,_efdg =cmap .parseObject ();if _efdg !=nil {if _efdg ==_g .EOF {break ;};return _efdg ;};switch _aad :=_dcf .(type ){case cmapOperand :_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_cda =_afg (_aad );default:_ef .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dcf );return ErrBadCMap ;};_dcf ,_efdg =cmap .parseObject ();if _efdg !=nil {if _efdg ==_g .EOF {break ;};return _efdg ;};switch _aadf :=_dcf .(type ){case cmapArray :if len (_aadf .Array )!=int (_cda -_eeg )+1{_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _gca :=_eeg ;_gca <=_cda ;_gca ++{_fea :=_aadf .Array [_gca -_eeg ];_gcf ,_eaef :=_fea .(cmapHexString );if !_eaef {return _a .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_fce :=_bcd (_gcf );cmap ._aag [_gca ]=string (_fce );};case cmapHexString :_dfbb :=_bcd (_aadf );_dbba :=len (_dfbb );for _dedf :=_eeg ;_dedf <=_cda ;_dedf ++{cmap ._aag [_dedf ]=string (_dfbb );_dfbb [_dbba -1]++;};default:_ef .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dcf );return ErrBadCMap ;};};return nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_fag :=_dgfe (name );if _fag !=nil {return nil ,_fag ;};if cmap ._dgf ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ad ,_fag :=_dgfe (cmap ._dgf );if _fag !=nil {return nil ,_fag ;};for _eec ,_efd :=range _ad ._ceb {if _ ,_efc :=cmap ._ceb [_eec ];!_efc {cmap ._ceb [_eec ]=_efd ;};};cmap ._ee =append (cmap ._ee ,_ad ._ee ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_bcf ,_ffe :=cmap ._fa [s ];return _bcf ,_ffe ;};type cmapFloat struct{_bgbe float64 };type cMapParser struct{_def *_ce .Reader };type CMap struct{*cMapParser ;_cf string ;_cfg int ;_bdb int ;_gc string ;_dgf string ;_dad CIDSystemInfo ;_ee []Codespace ;_ceb map[CharCode ]CharCode ;_dac map[CharCode ]CharCode ;_aag map[CharCode ]string ;_fa map[string ]CharCode ;_eg []byte ;_ga *_bd .PdfObjectStream ;};func NewCIDSystemInfo (obj _bd .PdfObject )(_cd CIDSystemInfo ,_dd error ){_da ,_eae :=_bd .GetDict (obj );if !_eae {return CIDSystemInfo {},_bd .ErrTypeError ;};_fc ,_eae :=_bd .GetStringVal (_da .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_eae {return CIDSystemInfo {},_bd .ErrTypeError ;};_cdg ,_eae :=_bd .GetStringVal (_da .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_eae {return CIDSystemInfo {},_bd .ErrTypeError ;};_ag ,_eae :=_bd .GetIntVal (_da .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_eae {return CIDSystemInfo {},_bd .ErrTypeError ;};return CIDSystemInfo {Registry :_fc ,Ordering :_cdg ,Supplement :_ag },nil ;};func (_afd *cMapParser )parseComment ()(string ,error ){var _gda _bc .Buffer ;_ ,_cdcb :=_afd .skipSpaces ();if _cdcb !=nil {return _gda .String (),_cdcb ;};_dfcd :=true ;for {_ceee ,_eaf :=_afd ._def .Peek (1);if _eaf !=nil {_ef .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_eaf );return _gda .String (),_eaf ;};if _dfcd &&_ceee [0]!='%'{return _gda .String (),ErrBadCMapComment ;};_dfcd =false ;if (_ceee [0]!='\r')&&(_ceee [0]!='\n'){_ffge ,_ :=_afd ._def .ReadByte ();_gda .WriteByte (_ffge );}else {break ;};};return _gda .String (),nil ;};func (_dbbd *cMapParser )parseHexString ()(cmapHexString ,error ){_dbbd ._def .ReadByte ();_bagb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_egfb :=_bc .Buffer {};for {_dbbd .skipSpaces ();_gfde ,_dfe :=_dbbd ._def .Peek (1);if _dfe !=nil {return cmapHexString {},_dfe ;};if _gfde [0]=='>'{_dbbd ._def .ReadByte ();break ;};_dadf ,_ :=_dbbd ._def .ReadByte ();if _bc .IndexByte (_bagb ,_dadf )>=0{_egfb .WriteByte (_dadf );};};if _egfb .Len ()%2==1{_ef .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_egfb .String ());_egfb .WriteByte ('0');};_gdd :=_egfb .Len ()/2;_aegd ,_ :=_c .DecodeString (_egfb .String ());return cmapHexString {_fed :_gdd ,_bcc :_aegd },nil ;};func (_fgbb *cMapParser )parseDict ()(cmapDict ,error ){_ef .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_gaa :=_fbe ();_ecgb ,_ :=_fgbb ._def .ReadByte ();if _ecgb !='<'{return _gaa ,ErrBadCMapDict ;};_ecgb ,_ =_fgbb ._def .ReadByte ();if _ecgb !='<'{return _gaa ,ErrBadCMapDict ;};for {_fgbb .skipSpaces ();_agcc ,_ccg :=_fgbb ._def .Peek (2);if _ccg !=nil {return _gaa ,_ccg ;};if (_agcc [0]=='>')&&(_agcc [1]=='>'){_fgbb ._def .ReadByte ();_fgbb ._def .ReadByte ();break ;};_cag ,_ccg :=_fgbb .parseName ();_ef .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cag .Name );if _ccg !=nil {_ef .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_ccg );return _gaa ,_ccg ;};_fgbb .skipSpaces ();_cffe ,_ccg :=_fgbb .parseObject ();if _ccg !=nil {return _gaa ,_ccg ;};_gaa .Dict [_cag .Name ]=_cffe ;_fgbb .skipSpaces ();_agcc ,_ccg =_fgbb ._def .Peek (3);if _ccg !=nil {return _gaa ,_ccg ;};if string (_agcc )=="\u0064\u0065\u0066"{_fgbb ._def .Discard (3);};};return _gaa ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_ggc ,_cef :=cmap .parseObject ();if _cef !=nil {if _cef ==_g .EOF {break ;};return _cef ;};_cgg ,_gag :=_ggc .(cmapHexString );if !_gag {if _afe ,_bec :=_ggc .(cmapOperand );_bec {if _afe .Operand ==_bddf {return nil ;};return _a .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ggc ,_cef =cmap .parseObject ();if _cef !=nil {if _cef ==_g .EOF {break ;};return _cef ;};_bbfe ,_gag :=_ggc .(cmapHexString );if !_gag {return _a .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_cgg ._bcc )!=len (_bbfe ._bcc ){return _a .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_ebfa :=_afg (_cgg );_cbf :=_afg (_bbfe );if _cbf < _ebfa {_ef .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_ebfa ,_cbf );return ErrBadCMap ;};_ebfe :=_bbfe ._fed ;_bee :=Codespace {NumBytes :_ebfe ,Low :_ebfa ,High :_cbf };cmap ._ee =append (cmap ._ee ,_bee );_ef .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_ebfa ,_cbf );};if len (cmap ._ee )==0{_ef .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_ggde ,_ege :=cmap .parseObject ();if _ege !=nil {if _ege ==_g .EOF {break ;};return _ege ;};_efce ,_ada :=_ggde .(cmapHexString );if !_ada {if _fdg ,_cgc :=_ggde .(cmapOperand );_cgc {if _fdg .Operand ==_aga {return nil ;};return _a .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_gb :=_afg (_efce );_ggde ,_ege =cmap .parseObject ();if _ege !=nil {if _ege ==_g .EOF {break ;};return _ege ;};_gcc ,_ada :=_ggde .(cmapHexString );if !_ada {return _a .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_efce ._bcc )!=len (_gcc ._bcc ){return _a .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gbc :=_afg (_gcc );if _gb > _gbc {_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gb ,_gbc );return ErrBadCMap ;};_ggde ,_ege =cmap .parseObject ();if _ege !=nil {if _ege ==_g .EOF {break ;};return _ege ;};_bbg ,_ada :=_ggde .(cmapInt );if !_ada {return _a .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _bbg ._agfd < 0{return _a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_bgec :=_bbg ._agfd ;for _fdd :=_gb ;_fdd <=_gbc ;_fdd ++{cmap ._ceb [_fdd ]=CharCode (_bgec );_bgec ++;};_ef .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gb ,_gbc ,_bbg ._agfd );};return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_fg :=make (map[CharCode ]string ,len (codeToRune ));for _daf ,_fe :=range codeToRune {_fg [_daf ]=string (_fe );};cmap :=&CMap {_cf :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bdb :2,_cfg :16,_dad :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ee :[]Codespace {{Low :0,High :0xffff}},_aag :_fg ,_fa :make (map[string ]CharCode ,len (codeToRune )),_ceb :make (map[CharCode ]CharCode ,len (codeToRune )),_dac :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};type cmapObject interface{};func (cmap *CMap )parseName ()error {_eac :="";_ac :=false ;for _gfb :=0;_gfb < 20&&!_ac ;_gfb ++{_eaee ,_fgcd :=cmap .parseObject ();if _fgcd !=nil {return _fgcd ;};switch _eacb :=_eaee .(type ){case cmapOperand :switch _eacb .Operand {case "\u0064\u0065\u0066":_ac =true ;default:_ef .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_eaee ,_eac );if _eac !=""{_eac =_d .Sprintf ("\u0025\u0073\u0020%\u0073",_eac ,_eacb .Operand );};_ef .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_eac );};case cmapName :_eac =_eacb .Name ;};};if !_ac {_ef .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._cf =_eac ;return nil ;};func _edgc (_caf []byte )*cMapParser {_ceeb :=cMapParser {};_geb :=_bc .NewBuffer (_caf );_ceeb ._def =_ce .NewReader (_geb );return &_ceeb ;};const (_egfd ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_bdfa ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_dfcc ="\u0065n\u0064\u0063\u006d\u0061\u0070";_aadd ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_bddf ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_ddfb ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_eag ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_agec ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_adb ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_edfc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_aga ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_gge ="\u0075s\u0065\u0063\u006d\u0061\u0070";_cbfe ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_cgcd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_cgba ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);var (ErrBadCMap =_a .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_a .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_a .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )String ()string {_edc :=cmap ._dad ;_baf :=[]string {_d .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._cfg ),_d .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bdb )};if cmap ._gc !=""{_baf =append (_baf ,_d .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._gc ));};if cmap ._dgf !=""{_baf =append (_baf ,_d .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._dgf ));};_baf =append (_baf ,_d .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_edc .String ()));if len (cmap ._ee )> 0{_baf =append (_baf ,_d .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ee )));};if len (cmap ._aag )> 0{_baf =append (_baf ,_d .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._aag )));};return _d .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._cf ,_f .Join (_baf ,"\u0020"));};func _aae (_df bool )*CMap {_bdc :=16;if _df {_bdc =8;};return &CMap {_cfg :_bdc ,_ceb :make (map[CharCode ]CharCode ),_dac :make (map[CharCode ]CharCode ),_aag :make (map[CharCode ]string ),_fa :make (map[string ]CharCode )};};type cmapName struct{Name string ;};func (cmap *CMap )parseBfchar ()error {for {_dbe ,_gfdb :=cmap .parseObject ();if _gfdb !=nil {if _gfdb ==_g .EOF {break ;};return _gfdb ;};var _baa CharCode ;switch _cba :=_dbe .(type ){case cmapOperand :if _cba .Operand ==_eag {return nil ;};return _a .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_baa =_afg (_cba );default:return _a .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_dbe ,_gfdb =cmap .parseObject ();if _gfdb !=nil {if _gfdb ==_g .EOF {break ;};return _gfdb ;};var _edgea []rune ;switch _aca :=_dbe .(type ){case cmapOperand :if _aca .Operand ==_eag {return nil ;};_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_aca );return ErrBadCMap ;case cmapHexString :_edgea =_bcd (_aca );case cmapName :_ef .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_aca );_edgea =[]rune {MissingCodeRune };default:_ef .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_dbe );return ErrBadCMap ;};cmap ._aag [_baa ]=string (_edgea );};return nil ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_bdf ,_fgc :=cmap ._dac [cid ];return _bdf ,_fgc ;};func (_deag *cMapParser )parseNumber ()(cmapObject ,error ){_ggb ,_bba :=_bd .ParseNumber (_deag ._def );if _bba !=nil {return nil ,_bba ;};switch _dff :=_ggb .(type ){case *_bd .PdfObjectFloat :return cmapFloat {float64 (*_dff )},nil ;case *_bd .PdfObjectInteger :return cmapInt {int64 (*_dff )},nil ;};return nil ,_d .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ggb );};func (cmap *CMap )inCodespace (_cb CharCode ,_ccf int )bool {for _ ,_cbc :=range cmap ._ee {if _cbc .Low <=_cb &&_cb <=_cbc .High &&_ccf ==_cbc .NumBytes {return true ;};};return false ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func _ced (_agfde ,_dca int )int {if _agfde < _dca {return _agfde ;};return _dca ;};func (_gfe *cMapParser )parseOperand ()(cmapOperand ,error ){_beb :=cmapOperand {};_caef :=_bc .Buffer {};for {_cffa ,_bgf :=_gfe ._def .Peek (1);if _bgf !=nil {if _bgf ==_g .EOF {break ;};return _beb ,_bgf ;};if _bd .IsDelimiter (_cffa [0]){break ;};if _bd .IsWhiteSpace (_cffa [0]){break ;};_dcc ,_ :=_gfe ._def .ReadByte ();_caef .WriteByte (_dcc );};if _caef .Len ()==0{return _beb ,_d .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_beb .Operand =_caef .String ();return _beb ,nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _eeb ,_bb :=cmap ._aag [code ];_bb {return _eeb ,true ;};return MissingCodeString ,false ;};func (_abc *cMapParser )parseName ()(cmapName ,error ){_ddda :="";_beeb :=false ;for {_aegf ,_cbab :=_abc ._def .Peek (1);if _cbab ==_g .EOF {break ;};if _cbab !=nil {return cmapName {_ddda },_cbab ;};if !_beeb {if _aegf [0]=='/'{_beeb =true ;_abc ._def .ReadByte ();}else {_ef .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_aegf ,_aegf );return cmapName {_ddda },_d .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_aegf [0]);};}else {if _bd .IsWhiteSpace (_aegf [0]){break ;}else if (_aegf [0]=='/')||(_aegf [0]=='[')||(_aegf [0]=='(')||(_aegf [0]==']')||(_aegf [0]=='<')||(_aegf [0]=='>'){break ;}else if _aegf [0]=='#'{_bdeg ,_dfd :=_abc ._def .Peek (3);if _dfd !=nil {return cmapName {_ddda },_dfd ;};_abc ._def .Discard (3);_bbgf ,_dfd :=_c .DecodeString (string (_bdeg [1:3]));if _dfd !=nil {return cmapName {_ddda },_dfd ;};_ddda +=string (_bbgf );}else {_ccba ,_ :=_abc ._def .ReadByte ();_ddda +=string (_ccba );};};};return cmapName {_ddda },nil ;};const (_ea =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )computeInverseMappings (){for _eab ,_ff :=range cmap ._ceb {if _fcc ,_eef :=cmap ._dac [_ff ];!_eef ||(_eef &&_fcc > _eab ){cmap ._dac [_ff ]=_eab ;};};for _aef ,_dda :=range cmap ._aag {if _ebe ,_db :=cmap ._fa [_dda ];!_db ||(_db &&_ebe > _aef ){cmap ._fa [_dda ]=_aef ;};};_cg .Slice (cmap ._ee ,func (_cee ,_bef int )bool {return cmap ._ee [_cee ].Low < cmap ._ee [_bef ].Low });};func _bf (_ddc string )string {_cbe :=[]rune (_ddc );_cff :=make ([]string ,len (_cbe ));for _bdab ,_daa :=range _cbe {_cff [_bdab ]=_d .Sprintf ("\u0025\u0030\u0034\u0078",_daa );};return _d .Sprintf ("\u003c\u0025\u0073\u003e",_f .Join (_cff ,""));};func (_acd *cMapParser )parseArray ()(cmapArray ,error ){_edgec :=cmapArray {};_edgec .Array =[]cmapObject {};_acd ._def .ReadByte ();for {_acd .skipSpaces ();_agda ,_afad :=_acd ._def .Peek (1);if _afad !=nil {return _edgec ,_afad ;};if _agda [0]==']'{_acd ._def .ReadByte ();break ;};_fdae ,_afad :=_acd .parseObject ();if _afad !=nil {return _edgec ,_afad ;};_edgec .Array =append (_edgec .Array ,_fdae );};return _edgec ,nil ;};func (_bca *cMapParser )skipSpaces ()(int ,error ){_adg :=0;for {_edbd ,_ecg :=_bca ._def .Peek (1);if _ecg !=nil {return 0,_ecg ;};if _bd .IsWhiteSpace (_edbd [0]){_bca ._def .ReadByte ();_adg ++;}else {break ;};};return _adg ,nil ;};type charRange struct{_eb CharCode ;_af CharCode ;};func _bcd (_cbd cmapHexString )[]rune {if len (_cbd ._bcc )==1{return []rune {rune (_cbd ._bcc [0])};};_aeae :=_cbd ._bcc ;if len (_aeae )%2!=0{_aeae =append (_aeae ,0);_ef .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_cbd ,_aeae );};_gacc :=len (_aeae )>>1;_egec :=make ([]uint16 ,_gacc );for _ecgf :=0;_ecgf < _gacc ;_ecgf ++{_egec [_ecgf ]=uint16 (_aeae [_ecgf <<1])<<8+uint16 (_aeae [_ecgf <<1+1]);};_gcbf :=_e .Decode (_egec );return _gcbf ;};func (cmap *CMap )Name ()string {return cmap ._cf };type cmapString struct{String string ;};func _fbe ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )Type ()int {return cmap ._bdb };func (cmap *CMap )parse ()error {var _fda cmapObject ;for {_aff ,_ceef :=cmap .parseObject ();if _ceef !=nil {if _ceef ==_g .EOF {break ;};_ef .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ceef );return _ceef ;};switch _ede :=_aff .(type ){case cmapOperand :_dcb :=_ede ;switch _dcb .Operand {case _aadd :_fgf :=cmap .parseCodespaceRange ();if _fgf !=nil {return _fgf ;};case _edfc :_cad :=cmap .parseCIDRange ();if _cad !=nil {return _cad ;};case _ddfb :_cgd :=cmap .parseBfchar ();if _cgd !=nil {return _cgd ;};case _agec :_bce :=cmap .parseBfrange ();if _bce !=nil {return _bce ;};case _gge :if _fda ==nil {_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_cbg ,_cdff :=_fda .(cmapName );if !_cdff {_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_fda );return ErrBadCMap ;};cmap ._dgf =_cbg .Name ;case _egfd :_bgg :=cmap .parseSystemInfo ();if _bgg !=nil {return _bgg ;};};case cmapName :_gac :=_ede ;switch _gac .Name {case _egfd :_dacd :=cmap .parseSystemInfo ();if _dacd !=nil {return _dacd ;};case _cbfe :_fdaa :=cmap .parseName ();if _fdaa !=nil {return _fdaa ;};case _cgcd :_ggd :=cmap .parseType ();if _ggd !=nil {return _ggd ;};case _cgba :_aecd :=cmap .parseVersion ();if _aecd !=nil {return _aecd ;};};};_fda =_aff ;};return nil ;};type fbRange struct{_gf CharCode ;_aa CharCode ;_ae string ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )parseVersion ()error {_ded :="";_geg :=false ;for _dga :=0;_dga < 3&&!_geg ;_dga ++{_edga ,_eaed :=cmap .parseObject ();if _eaed !=nil {return _eaed ;};switch _ged :=_edga .(type ){case cmapOperand :switch _ged .Operand {case "\u0064\u0065\u0066":_geg =true ;default:_ef .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_edga );return ErrBadCMap ;};case cmapInt :_ded =_d .Sprintf ("\u0025\u0064",_ged ._agfd );case cmapFloat :_ded =_d .Sprintf ("\u0025\u0066",_ged ._bgbe );case cmapString :_ded =_ged .String ;default:_ef .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_edga );};};cmap ._gc =_ded ;return nil ;};