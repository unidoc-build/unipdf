//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_e "bufio";_fe "bytes";_cb "encoding/hex";_fef "errors";_c "fmt";_b "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/core";_db "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ad "io";_cf "sort";_a "strconv";
_d "strings";_f "unicode/utf16";);func (_gab *cMapParser )parseHexString ()(cmapHexString ,error ){_gab ._dagg .ReadByte ();_agca :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_dce :=_fe .Buffer {};for {_gab .skipSpaces ();_gecb ,_dae :=_gab ._dagg .Peek (1);if _dae !=nil {return cmapHexString {},_dae ;};if _gecb [0]=='>'{_gab ._dagg .ReadByte ();break ;};_bba ,_ :=_gab ._dagg .ReadByte ();if _fe .IndexByte (_agca ,_bba )>=0{_dce .WriteByte (_bba );
};};if _dce .Len ()%2==1{_b .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_dce .String ());_dce .WriteByte ('0');};_edg :=_dce .Len ()/2;
_ega ,_ :=_cb .DecodeString (_dce .String ());return cmapHexString {_egad :_edg ,_gde :_ega },nil ;};func (cmap *CMap )parseBfrange ()error {for {var _dacf CharCode ;_cdfe ,_dea :=cmap .parseObject ();if _dea !=nil {if _dea ==_ad .EOF {break ;};return _dea ;
};switch _cbda :=_cdfe .(type ){case cmapOperand :if _cbda .Operand ==_ebad {return nil ;};return _fef .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_dacf =_gca (_cbda );default:return _fef .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _ecd CharCode ;_cdfe ,_dea =cmap .parseObject ();if _dea !=nil {if _dea ==_ad .EOF {break ;};return _dea ;};switch _aae :=_cdfe .(type ){case cmapOperand :_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_ecd =_gca (_aae );default:_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cdfe );return ErrBadCMap ;};_cdfe ,_dea =cmap .parseObject ();
if _dea !=nil {if _dea ==_ad .EOF {break ;};return _dea ;};switch _ddg :=_cdfe .(type ){case cmapArray :if len (_ddg .Array )!=int (_ecd -_dacf )+1{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fec :=_dacf ;_fec <=_ecd ;_fec ++{_fcb :=_ddg .Array [_fec -_dacf ];_eda ,_gffb :=_fcb .(cmapHexString );if !_gffb {return _fef .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_ecf :=_edb (_eda );cmap ._cfc [_fec ]=string (_ecf );};case cmapHexString :_efdc :=_edb (_ddg );_aec :=len (_efdc );for _cgf :=_dacf ;_cgf <=_ecd ;_cgf ++{cmap ._cfc [_cgf ]=string (_efdc );if _aec > 0{_efdc [_aec -1]++;}else {_b .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_cgf );
};};default:_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cdfe );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._fdd ._dbge ,cmap ._fdd ._dffa };
func _gdf (_acd string )string {_dggd :=[]rune (_acd );_gdfd :=make ([]string ,len (_dggd ));for _eea ,_aag :=range _dggd {_gdfd [_eea ]=_c .Sprintf ("\u0025\u0030\u0034\u0078",_aag );};return _c .Sprintf ("\u003c\u0025\u0073\u003e",_d .Join (_gdfd ,""));
};func _edb (_egag cmapHexString )[]rune {if len (_egag ._gde )==1{return []rune {rune (_egag ._gde [0])};};_ade :=_egag ._gde ;if len (_ade )%2!=0{_ade =append (_ade ,0);_b .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_egag ,_ade );
};_bfce :=len (_ade )>>1;_defa :=make ([]uint16 ,_bfce );for _bddc :=0;_bddc < _bfce ;_bddc ++{_defa [_bddc ]=uint16 (_ade [_bddc <<1])<<8+uint16 (_ade [_bddc <<1+1]);};_egbc :=_f .Decode (_defa );return _egbc ;};func (cmap *CMap )parseCIDRange ()error {for {_aad ,_eec :=cmap .parseObject ();
if _eec !=nil {if _eec ==_ad .EOF {break ;};return _eec ;};_fge ,_dac :=_aad .(cmapHexString );if !_dac {if _fbeb ,_dbc :=_aad .(cmapOperand );_dbc {if _fbeb .Operand ==_fcf {return nil ;};return _fef .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_beb :=_gca (_fge );_aad ,_eec =cmap .parseObject ();if _eec !=nil {if _eec ==_ad .EOF {break ;};return _eec ;};_abge ,_dac :=_aad .(cmapHexString );if !_dac {return _fef .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_fge ._gde )!=len (_abge ._gde ){return _fef .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_gea :=_gca (_abge );
if _beb > _gea {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_beb ,_gea );
return ErrBadCMap ;};_aad ,_eec =cmap .parseObject ();if _eec !=nil {if _eec ==_ad .EOF {break ;};return _eec ;};_ddda ,_dac :=_aad .(cmapInt );if !_dac {return _fef .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ddda ._aggb < 0{return _fef .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_geeg :=_ddda ._aggb ;for _gbab :=_beb ;_gbab <=_gea ;_gbab ++{cmap ._dd [_gbab ]=CharCode (_geeg );
_geeg ++;};_b .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_beb ,_gea ,_ddda ._aggb );};return nil ;};func (_ddf *cMapParser )parseComment ()(string ,error ){var _ffe _fe .Buffer ;
_ ,_fegb :=_ddf .skipSpaces ();if _fegb !=nil {return _ffe .String (),_fegb ;};_fffc :=true ;for {_gbec ,_cgdg :=_ddf ._dagg .Peek (1);if _cgdg !=nil {_b .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_cgdg );
return _ffe .String (),_cgdg ;};if _fffc &&_gbec [0]!='%'{return _ffe .String (),ErrBadCMapComment ;};_fffc =false ;if (_gbec [0]!='\r')&&(_gbec [0]!='\n'){_ece ,_ :=_ddf ._dagg .ReadByte ();_ffe .WriteByte (_ece );}else {break ;};};return _ffe .String (),nil ;
};func (_bfe *cMapParser )parseNumber ()(cmapObject ,error ){_bfc ,_degg :=_ee .ParseNumber (_bfe ._dagg );if _degg !=nil {return nil ,_degg ;};switch _ceea :=_bfc .(type ){case *_ee .PdfObjectFloat :return cmapFloat {float64 (*_ceea )},nil ;case *_ee .PdfObjectInteger :return cmapInt {int64 (*_ceea )},nil ;
};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bfc );};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._df };func (cmap *CMap )parse ()error {var _bbb cmapObject ;
for {_ab ,_ede :=cmap .parseObject ();if _ede !=nil {if _ede ==_ad .EOF {break ;};_b .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ede );return _ede ;};switch _fbc :=_ab .(type ){case cmapOperand :_agf :=_fbc ;
switch _agf .Operand {case _cgbf :_cee :=cmap .parseCodespaceRange ();if _cee !=nil {return _cee ;};case _gcbc :_gec :=cmap .parseCIDRange ();if _gec !=nil {return _gec ;};case _fdc :_abg :=cmap .parseBfchar ();if _abg !=nil {return _abg ;};case _cfg :_cefg :=cmap .parseBfrange ();
if _cefg !=nil {return _cefg ;};case _afab :if _bbb ==nil {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_feb ,_bdd :=_bbb .(cmapName );
if !_bdd {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_bbb );return ErrBadCMap ;};cmap ._af =_feb .Name ;
case _bac :_cgda :=cmap .parseSystemInfo ();if _cgda !=nil {return _cgda ;};};case cmapName :_beg :=_fbc ;switch _beg .Name {case _bac :_bafe :=cmap .parseSystemInfo ();if _bafe !=nil {return _bafe ;};case _geca :_aea :=cmap .parseName ();if _aea !=nil {return _aea ;
};case _bdb :_gcb :=cmap .parseType ();if _gcb !=nil {return _gcb ;};case _agg :_dbgb :=cmap .parseVersion ();if _dbgb !=nil {return _dbgb ;};case _ggcg :if _ede =cmap .parseWMode ();_ede !=nil {return _ede ;};};};_bbb =_ab ;};return nil ;};func (_cbde *cMapParser )parseObject ()(cmapObject ,error ){_cbde .skipSpaces ();
for {_abf ,_dcg :=_cbde ._dagg .Peek (2);if _dcg !=nil {return nil ,_dcg ;};if _abf [0]=='%'{_cbde .parseComment ();_cbde .skipSpaces ();continue ;}else if _abf [0]=='/'{_cec ,_gcc :=_cbde .parseName ();return _cec ,_gcc ;}else if _abf [0]=='('{_bdfg ,_fccf :=_cbde .parseString ();
return _bdfg ,_fccf ;}else if _abf [0]=='['{_bff ,_bdc :=_cbde .parseArray ();return _bff ,_bdc ;}else if (_abf [0]=='<')&&(_abf [1]=='<'){_egg ,_eaeb :=_cbde .parseDict ();return _egg ,_eaeb ;}else if _abf [0]=='<'{_efa ,_gecd :=_cbde .parseHexString ();
return _efa ,_gecd ;}else if _ee .IsDecimalDigit (_abf [0])||(_abf [0]=='-'&&_ee .IsDecimalDigit (_abf [1])){_gcf ,_gccg :=_cbde .parseNumber ();if _gccg !=nil {return nil ,_gccg ;};return _gcf ,nil ;}else {_fa ,_aab :=_cbde .parseOperand ();if _aab !=nil {return nil ,_aab ;
};return _fa ,nil ;};};};func (cmap *CMap )parseCodespaceRange ()error {for {_gff ,_ggc :=cmap .parseObject ();if _ggc !=nil {if _ggc ==_ad .EOF {break ;};return _ggc ;};_gfef ,_cba :=_gff .(cmapHexString );if !_cba {if _egb ,_ggbe :=_gff .(cmapOperand );
_ggbe {if _egb .Operand ==_fefe {return nil ;};return _fef .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_gff ,_ggc =cmap .parseObject ();if _ggc !=nil {if _ggc ==_ad .EOF {break ;};return _ggc ;};
_ggcf ,_cba :=_gff .(cmapHexString );if !_cba {return _fef .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_gfef ._gde )!=len (_ggcf ._gde ){return _fef .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_dag :=_gca (_gfef );_dfd :=_gca (_ggcf );if _dfd < _dag {_b .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_dag ,_dfd );
return ErrBadCMap ;};_fde :=_ggcf ._egad ;_aagaf :=Codespace {NumBytes :_fde ,Low :_dag ,High :_dfd };cmap ._fb =append (cmap ._fb ,_aagaf );_b .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_dag ,_dfd );
};if len (cmap ._fb )==0{_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type cmapArray struct{Array []cmapObject ;
};func (cmap *CMap )inCodespace (_dbf CharCode ,_gbf int )bool {for _ ,_bbf :=range cmap ._fb {if _bbf .Low <=_dbf &&_dbf <=_bbf .High &&_gbf ==_bbf .NumBytes {return true ;};};return false ;};func _adfe (_eedde ,_ege int )int {if _eedde < _ege {return _eedde ;
};return _ege ;};func _dffe ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_cbdb *cMapParser )parseArray ()(cmapArray ,error ){_dec :=cmapArray {};_dec .Array =[]cmapObject {};_cbdb ._dagg .ReadByte ();for {_cbdb .skipSpaces ();_egbe ,_ggd :=_cbdb ._dagg .Peek (1);
if _ggd !=nil {return _dec ,_ggd ;};if _egbe [0]==']'{_cbdb ._dagg .ReadByte ();break ;};_cea ,_ggd :=_cbdb .parseObject ();if _ggd !=nil {return _dec ,_ggd ;};_dec .Array =append (_dec .Array ,_cea );};return _dec ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _gaa []CharCode ;
if cmap ._ada ==8{for _ ,_ccbc :=range data {_gaa =append (_gaa ,CharCode (_ccbc ));};return _gaa ,true ;};for _agd :=0;_agd < len (data );{_bda ,_eba ,_bae :=cmap .matchCode (data [_agd :]);if !_bae {_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_agd ,data ,string (data ));
return _gaa ,false ;};_gaa =append (_gaa ,_bda );_agd +=_eba ;};return _gaa ,true ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )NBits ()int {return cmap ._ada };const (_aed =100;_bgg ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_ebe ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func _fda (_gacg cmapHexString )rune {_dbb :=_edb (_gacg );if _fae :=len (_dbb );_fae ==0{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_gacg );
return MissingCodeRune ;};if len (_dbb )> 1{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_gacg ,_dbb );
};return _dbb [0];};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ecg ,_fc :=cmap ._ea [cid ];return _ecg ,_fc ;};const (_gb =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )Type ()int {return cmap ._cbf };
func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func _cc (_ca string )(*CMap ,error ){_eag ,_dc :=_db .Asset (_ca );if _dc !=nil {return nil ,_dc ;};return LoadCmapFromDataCID (_eag );};type cmapInt struct{_aggb int64 };
func (cmap *CMap )computeInverseMappings (){for _afa ,_cdf :=range cmap ._dd {if _bec ,_geeb :=cmap ._ea [_cdf ];!_geeb ||(_geeb &&_bec > _afa ){cmap ._ea [_cdf ]=_afa ;};};for _dggc ,_ff :=range cmap ._cfc {if _ecb ,_cbd :=cmap ._ged [_ff ];!_cbd ||(_cbd &&_ecb > _dggc ){cmap ._ged [_ff ]=_dggc ;
};};_cf .Slice (cmap ._fb ,func (_bg ,_ccb int )bool {return cmap ._fb [_bg ].Low < cmap ._fb [_ccb ].Low });};func IsPredefinedCMap (name string )bool {return _db .AssetExists (name )};type charRange struct{_gbg CharCode ;_gg CharCode ;};func _gca (_cae cmapHexString )CharCode {_ggab :=CharCode (0);
for _ ,_eedf :=range _cae ._gde {_ggab <<=8;_ggab |=CharCode (_eedf );};return _ggab ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _fee ,_ffb :=cmap ._cfc [code ];_ffb {return _fee ,true ;};return MissingCodeString ,false ;};
func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_de :=make (map[CharCode ]string ,len (codeToRune ));for _ba ,_dfa :=range codeToRune {_de [_ba ]=string (_dfa );};cmap :=&CMap {_ec :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_cbf :2,_ada :16,_df :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_fb :[]Codespace {{Low :0,High :0xffff}},_cfc :_de ,_ged :make (map[string ]CharCode ,len (codeToRune )),_dd :make (map[CharCode ]CharCode ,len (codeToRune )),_ea :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};var (ErrBadCMap =_fef .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_fef .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_fef .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func (cmap *CMap )parseName ()error {_fcc :="";_dcc :=false ;for _gga :=0;_gga < 20&&!_dcc ;_gga ++{_eae ,_edfe :=cmap .parseObject ();if _edfe !=nil {return _edfe ;
};switch _gba :=_eae .(type ){case cmapOperand :switch _gba .Operand {case "\u0064\u0065\u0066":_dcc =true ;default:_b .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_eae ,_fcc );
if _fcc !=""{_fcc =_c .Sprintf ("\u0025\u0073\u0020%\u0073",_fcc ,_gba .Operand );};_b .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_fcc );
};case cmapName :_fcc =_gba .Name ;};};if !_dcc {_b .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ec =_fcc ;return nil ;};type fbRange struct{_ac CharCode ;
_aa CharCode ;_fg string ;};type cmapHexString struct{_egad int ;_gde []byte ;};func _bgde (_dgd string )rune {_fbbg :=[]rune (_dgd );return _fbbg [len (_fbbg )-1]};type cmapObject interface{};func (_dgc *CIDSystemInfo )String ()string {return _c .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_dgc .Registry ,_dgc .Ordering ,_dgc .Supplement );
};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_dggg :=_cc (name );if _dggg !=nil {return nil ,_dggg ;};if cmap ._af ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_cd ,_dggg :=_cc (cmap ._af );if _dggg !=nil {return nil ,_dggg ;
};for _bd ,_ga :=range _cd ._dd {if _ ,_edf :=cmap ._dd [_bd ];!_edf {cmap ._dd [_bd ]=_ga ;};};cmap ._fb =append (cmap ._fb ,_cd ._fb ...);cmap .computeInverseMappings ();return cmap ,nil ;};type cMapParser struct{_dagg *_e .Reader };func (cmap *CMap )parseVersion ()error {_dde :="";
_gac :=false ;for _bddg :=0;_bddg < 3&&!_gac ;_bddg ++{_bef ,_cfd :=cmap .parseObject ();if _cfd !=nil {return _cfd ;};switch _cbb :=_bef .(type ){case cmapOperand :switch _cbb .Operand {case "\u0064\u0065\u0066":_gac =true ;default:_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_bef );
return ErrBadCMap ;};case cmapInt :_dde =_c .Sprintf ("\u0025\u0064",_cbb ._aggb );case cmapFloat :_dde =_c .Sprintf ("\u0025\u0066",_cbb ._dad );case cmapString :_dde =_cbb .String ;default:_b .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_bef );
};};cmap ._cg =_dde ;return nil ;};func (cmap *CMap )Stream ()(*_ee .PdfObjectStream ,error ){if cmap ._fd !=nil {return cmap ._fd ,nil ;};_cffd ,_bab :=_ee .MakeStream (cmap .Bytes (),_ee .NewFlateEncoder ());if _bab !=nil {return nil ,_bab ;};cmap ._fd =_cffd ;
return cmap ._fd ,nil ;};func (cmap *CMap )parseBfchar ()error {for {_fff ,_dee :=cmap .parseObject ();if _dee !=nil {if _dee ==_ad .EOF {break ;};return _dee ;};var _feee CharCode ;switch _ead :=_fff .(type ){case cmapOperand :if _ead .Operand ==_fbbc {return nil ;
};return _fef .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_feee =_gca (_ead );default:return _fef .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_fff ,_dee =cmap .parseObject ();if _dee !=nil {if _dee ==_ad .EOF {break ;};return _dee ;};var _egbg []rune ;switch _aead :=_fff .(type ){case cmapOperand :if _aead .Operand ==_fbbc {return nil ;};_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_aead );
return ErrBadCMap ;case cmapHexString :_egbg =_edb (_aead );case cmapName :_b .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_aead );_egbg =[]rune {MissingCodeRune };
default:_b .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_fff );return ErrBadCMap ;};cmap ._cfc [_feee ]=string (_egbg );};return nil ;};func (_edff *cMapParser )parseOperand ()(cmapOperand ,error ){_acb :=cmapOperand {};
_accde :=_fe .Buffer {};for {_gdc ,_baed :=_edff ._dagg .Peek (1);if _baed !=nil {if _baed ==_ad .EOF {break ;};return _acb ,_baed ;};if _ee .IsDelimiter (_gdc [0]){break ;};if _ee .IsWhiteSpace (_gdc [0]){break ;};_cad ,_ :=_edff ._dagg .ReadByte ();_accde .WriteByte (_cad );
};if _accde .Len ()==0{return _acb ,_c .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_acb .Operand =_accde .String ();return _acb ,nil ;};type cmapName struct{Name string ;
};func (cmap *CMap )String ()string {_ffba :=cmap ._df ;_cac :=[]string {_c .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ada ),_c .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._cbf )};if cmap ._cg !=""{_cac =append (_cac ,_c .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._cg ));
};if cmap ._af !=""{_cac =append (_cac ,_c .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._af ));};_cac =append (_cac ,_c .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_ffba .String ()));
if len (cmap ._fb )> 0{_cac =append (_cac ,_c .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._fb )));};if len (cmap ._cfc )> 0{_cac =append (_cac ,_c .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._cfc )));
};return _c .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ec ,_d .Join (_cac ,"\u0020"));};func (_dge *cMapParser )parseDict ()(cmapDict ,error ){_b .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_feea :=_dffe ();_gafe ,_ :=_dge ._dagg .ReadByte ();if _gafe !='<'{return _feea ,ErrBadCMapDict ;};_gafe ,_ =_dge ._dagg .ReadByte ();if _gafe !='<'{return _feea ,ErrBadCMapDict ;};for {_dge .skipSpaces ();_ebf ,_gef :=_dge ._dagg .Peek (2);if _gef !=nil {return _feea ,_gef ;
};if (_ebf [0]=='>')&&(_ebf [1]=='>'){_dge ._dagg .ReadByte ();_dge ._dagg .ReadByte ();break ;};_fcd ,_gef :=_dge .parseName ();_b .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fcd .Name );if _gef !=nil {_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_gef );
return _feea ,_gef ;};_dge .skipSpaces ();_accd ,_gef :=_dge .parseObject ();if _gef !=nil {return _feea ,_gef ;};_feea .Dict [_fcd .Name ]=_accd ;_dge .skipSpaces ();_ebf ,_gef =_dge ._dagg .Peek (3);if _gef !=nil {return _feea ,_gef ;};if string (_ebf )=="\u0064\u0065\u0066"{_dge ._dagg .Discard (3);
};};return _feea ,nil ;};type cmapOperand struct{Operand string ;};type cmapString struct{String string ;};func _dgg (_fgf bool )*CMap {_fgb :=16;if _fgf {_fgb =8;};return &CMap {_ada :_fgb ,_dd :make (map[CharCode ]CharCode ),_ea :make (map[CharCode ]CharCode ),_cfc :make (map[CharCode ]string ),_ged :make (map[string ]CharCode )};
};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_bdf ,_fgd :=cmap ._ged [s ];return _bdf ,_fgd ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_ace ,_eg :=cmap ._dd [code ];return _ace ,_eg ;};type integer struct{_dffa bool ;
_dbge int ;};type CMap struct{*cMapParser ;_ec string ;_ada int ;_cbf int ;_cg string ;_af string ;_df CIDSystemInfo ;_fb []Codespace ;_dd map[CharCode ]CharCode ;_ea map[CharCode ]CharCode ;_cfc map[CharCode ]string ;_ged map[string ]CharCode ;_gee []byte ;
_fd *_ee .PdfObjectStream ;_fdd integer ;};func (_ffbe *cMapParser )parseName ()(cmapName ,error ){_defd :="";_dcca :=false ;for {_cbfc ,_gfa :=_ffbe ._dagg .Peek (1);if _gfa ==_ad .EOF {break ;};if _gfa !=nil {return cmapName {_defd },_gfa ;};if !_dcca {if _cbfc [0]=='/'{_dcca =true ;
_ffbe ._dagg .ReadByte ();}else {_b .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_cbfc ,_cbfc );return cmapName {_defd },_c .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cbfc [0]);
};}else {if _ee .IsWhiteSpace (_cbfc [0]){break ;}else if (_cbfc [0]=='/')||(_cbfc [0]=='[')||(_cbfc [0]=='(')||(_cbfc [0]==']')||(_cbfc [0]=='<')||(_cbfc [0]=='>'){break ;}else if _cbfc [0]=='#'{_ceb ,_gfaf :=_ffbe ._dagg .Peek (3);if _gfaf !=nil {return cmapName {_defd },_gfaf ;
};_ffbe ._dagg .Discard (3);_cgbb ,_gfaf :=_cb .DecodeString (string (_ceb [1:3]));if _gfaf !=nil {return cmapName {_defd },_gfaf ;};_defd +=string (_cgbb );}else {_adb ,_ :=_ffbe ._dagg .ReadByte ();_defd +=string (_adb );};};};return cmapName {_defd },nil ;
};const (_bac ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_dccg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_cgb ="\u0065n\u0064\u0063\u006d\u0061\u0070";_cgbf ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_fefe ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_fdc ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_fbbc ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_cfg ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_ebad ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_gcbc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fcf ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_afab ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_ggcg ="\u0057\u004d\u006fd\u0065";_geca ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_bdb ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_agg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);type cmapFloat struct{_dad float64 };
func (cmap *CMap )parseType ()error {_bge :=0;_fege :=false ;for _geda :=0;_geda < 3&&!_fege ;_geda ++{_agee ,_gad :=cmap .parseObject ();if _gad !=nil {return _gad ;};switch _ffc :=_agee .(type ){case cmapOperand :switch _ffc .Operand {case "\u0064\u0065\u0066":_fege =true ;
default:_b .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_agee );return ErrBadCMap ;};case cmapInt :_bge =int (_ffc ._aggb );
};};cmap ._cbf =_bge ;return nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_b .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_dgg (isSimple );cmap .cMapParser =_ced (data );_gd :=cmap .parse ();if _gd !=nil {return nil ,_gd ;};if len (cmap ._fb )==0{if cmap ._af !=""{return cmap ,nil ;};_b .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )matchCode (_gaf []byte )(_afe CharCode ,_fefg int ,_cgd bool ){for _cfb :=0;
_cfb < _gb ;_cfb ++{if _cfb < len (_gaf ){_afe =_afe <<8|CharCode (_gaf [_cfb ]);_fefg ++;};_cgd =cmap .inCodespace (_afe ,_cfb +1);if _cgd {return _afe ,_fefg ,true ;};};_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_gaf ,string (_gaf ),cmap );
return 0,0,false ;};func (_eedd *cMapParser )skipSpaces ()(int ,error ){_defc :=0;for {_ceg ,_dgce :=_eedd ._dagg .Peek (1);if _dgce !=nil {return 0,_dgce ;};if _ee .IsWhiteSpace (_ceg [0]){_eedd ._dagg .ReadByte ();_defc ++;}else {break ;};};return _defc ,nil ;
};func (_abb *cMapParser )parseString ()(cmapString ,error ){_abb ._dagg .ReadByte ();_cbg :=_fe .Buffer {};_bga :=1;for {_dfc ,_eedda :=_abb ._dagg .Peek (1);if _eedda !=nil {return cmapString {_cbg .String ()},_eedda ;};if _dfc [0]=='\\'{_abb ._dagg .ReadByte ();
_eef ,_cag :=_abb ._dagg .ReadByte ();if _cag !=nil {return cmapString {_cbg .String ()},_cag ;};if _ee .IsOctalDigit (_eef ){_adf ,_aebc :=_abb ._dagg .Peek (2);if _aebc !=nil {return cmapString {_cbg .String ()},_aebc ;};var _fag []byte ;_fag =append (_fag ,_eef );
for _ ,_aee :=range _adf {if _ee .IsOctalDigit (_aee ){_fag =append (_fag ,_aee );}else {break ;};};_abb ._dagg .Discard (len (_fag )-1);_b .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fag );
_beba ,_aebc :=_a .ParseUint (string (_fag ),8,32);if _aebc !=nil {return cmapString {_cbg .String ()},_aebc ;};_cbg .WriteByte (byte (_beba ));continue ;};switch _eef {case 'n':_cbg .WriteByte ('\n');case 'r':_cbg .WriteByte ('\r');case 't':_cbg .WriteByte ('\t');
case 'b':_cbg .WriteByte ('\b');case 'f':_cbg .WriteByte ('\f');case '(':_cbg .WriteByte ('(');case ')':_cbg .WriteByte (')');case '\\':_cbg .WriteByte ('\\');};continue ;}else if _dfc [0]=='('{_bga ++;}else if _dfc [0]==')'{_bga --;if _bga ==0{_abb ._dagg .ReadByte ();
break ;};};_fba ,_ :=_abb ._dagg .ReadByte ();_cbg .WriteByte (_fba );};return cmapString {_cbg .String ()},nil ;};func _ced (_aggd []byte )*cMapParser {_cdc :=cMapParser {};_aaf :=_fe .NewBuffer (_aggd );_cdc ._dagg =_e .NewReader (_aaf );return &_cdc ;
};func NewCIDSystemInfo (obj _ee .PdfObject )(_bb CIDSystemInfo ,_dg error ){_ge ,_ed :=_ee .GetDict (obj );if !_ed {return CIDSystemInfo {},_ee .ErrTypeError ;};_bc ,_ed :=_ee .GetStringVal (_ge .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_ed {return CIDSystemInfo {},_ee .ErrTypeError ;};_cff ,_ed :=_ee .GetStringVal (_ge .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_ed {return CIDSystemInfo {},_ee .ErrTypeError ;};_dbd ,_ed :=_ee .GetIntVal (_ge .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_ed {return CIDSystemInfo {},_ee .ErrTypeError ;};return CIDSystemInfo {Registry :_bc ,Ordering :_cff ,Supplement :_dbd },nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._cfc )==0{return "";};_bgf :=make ([]CharCode ,0,len (cmap ._cfc ));
for _degf :=range cmap ._cfc {_bgf =append (_bgf ,_degf );};_cf .Slice (_bgf ,func (_fbd ,_cgg int )bool {return _bgf [_fbd ]< _bgf [_cgg ]});var _fbb []charRange ;_dede :=charRange {_bgf [0],_bgf [0]};_afc :=cmap ._cfc [_bgf [0]];for _ ,_bbee :=range _bgf [1:]{_bfa :=cmap ._cfc [_bbee ];
if _bbee ==_dede ._gg +1&&_bgde (_bfa )==_bgde (_afc )+1{_dede ._gg =_bbee ;}else {_fbb =append (_fbb ,_dede );_dede ._gbg ,_dede ._gg =_bbee ,_bbee ;};_afc =_bfa ;};_fbb =append (_fbb ,_dede );var _ae []CharCode ;var _baf []fbRange ;for _ ,_ccc :=range _fbb {if _ccc ._gbg ==_ccc ._gg {_ae =append (_ae ,_ccc ._gbg );
}else {_baf =append (_baf ,fbRange {_ac :_ccc ._gbg ,_aa :_ccc ._gg ,_fg :cmap ._cfc [_ccc ._gbg ]});};};_b .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_fbb ),len (_ae ),len (_baf ));
var _dff []string ;if len (_ae )> 0{_ggf :=(len (_ae )+_aed -1)/_aed ;for _beab :=0;_beab < _ggf ;_beab ++{_dgf :=_adfe (len (_ae )-_beab *_aed ,_aed );_dff =append (_dff ,_c .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_dgf ));
for _ce :=0;_ce < _dgf ;_ce ++{_efe :=_ae [_beab *_aed +_ce ];_gfg :=cmap ._cfc [_efe ];_dff =append (_dff ,_c .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_efe ,_gdf (_gfg )));};_dff =append (_dff ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_baf )> 0{_bbc :=(len (_baf )+_aed -1)/_aed ;for _cef :=0;_cef < _bbc ;_cef ++{_feg :=_adfe (len (_baf )-_cef *_aed ,_aed );_dff =append (_dff ,_c .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_feg ));
for _baeb :=0;_baeb < _feg ;_baeb ++{_acfd :=_baf [_cef *_aed +_baeb ];_dff =append (_dff ,_c .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_acfd ._ac ,_acfd ._aa ,_gdf (_acfd ._fg )));};_dff =append (_dff ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _d .Join (_dff ,"\u000a");};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_acf ,_ded :=cmap .BytesToCharcodes (data );if !_ded {_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_eb :=make ([]string ,len (_acf ));var _fea []CharCode ;for _eca ,_bgb :=range _acf {_deg ,_ag :=cmap ._cfc [_bgb ];if !_ag {_fea =append (_fea ,_bgb );_deg =MissingCodeString ;};_eb [_eca ]=_deg ;};_bgd :=_d .Join (_eb ,"");if len (_fea )> 0{_b .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_acf ,len (_fea ),_fea ,_bgd ,cmap );
};return _bgd ,len (_fea );};type CharCode uint32 ;func (cmap *CMap )parseSystemInfo ()error {_gfgd :=false ;_gge :=false ;_gfb :="";_ddc :=false ;_acdd :=CIDSystemInfo {};for _eagb :=0;_eagb < 50&&!_ddc ;_eagb ++{_eee ,_aaga :=cmap .parseObject ();if _aaga !=nil {return _aaga ;
};switch _ddbe :=_eee .(type ){case cmapDict :_gfbd :=_ddbe .Dict ;_gbe ,_dga :=_gfbd ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_dga {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_fdg ,_dga :=_gbe .(cmapString );if !_dga {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_acdd .Registry =_fdg .String ;
_gbe ,_dga =_gfbd ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_dga {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fdg ,_dga =_gbe .(cmapString );
if !_dga {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_acdd .Ordering =_fdg .String ;_bdfa ,_dga :=_gfbd ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_dga {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_efb ,_dga :=_bdfa .(cmapInt );if !_dga {_b .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_acdd .Supplement =int (_efb ._aggb );_ddc =true ;case cmapOperand :switch _ddbe .Operand {case "\u0062\u0065\u0067i\u006e":_gfgd =true ;case "\u0065\u006e\u0064":_ddc =true ;case "\u0064\u0065\u0066":_gge =false ;};case cmapName :if _gfgd {_gfb =_ddbe .Name ;
_gge =true ;};case cmapString :if _gge {switch _gfb {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_acdd .Registry =_ddbe .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_acdd .Ordering =_ddbe .String ;};};case cmapInt :if _gge {switch _gfb {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_acdd .Supplement =int (_ddbe ._aggb );
};};};};if !_ddc {_b .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._df =_acdd ;return nil ;};func (cmap *CMap )parseWMode ()error {var _agc int ;_ccg :=false ;for _gce :=0;_gce < 3&&!_ccg ;_gce ++{_gfe ,_cffe :=cmap .parseObject ();if _cffe !=nil {return _cffe ;};switch _bbg :=_gfe .(type ){case cmapOperand :switch _bbg .Operand {case "\u0064\u0065\u0066":_ccg =true ;
default:_b .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_gfe );return ErrBadCMap ;};case cmapInt :_agc =int (_bbg ._aggb );
};};cmap ._fdd =integer {_dffa :true ,_dbge :_agc };return nil ;};func (cmap *CMap )Bytes ()[]byte {_b .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._gee )> 0{return cmap ._gee ;
};cmap ._gee =[]byte (_d .Join ([]string {_bgg ,cmap .toBfData (),_ebe },"\u000a"));return cmap ._gee ;};func (cmap *CMap )Name ()string {return cmap ._ec };