//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_g "bytes";_a "fmt";_b "github.com/unidoc/unichart/render";_gd "github.com/unidoc/unipdf/v3/common";_bc "github.com/unidoc/unipdf/v3/contentstream";_cd "github.com/unidoc/unipdf/v3/contentstream/draw";_fc "github.com/unidoc/unipdf/v3/core";
_e "github.com/unidoc/unipdf/v3/model";_ff "image/color";_c "io";_fg "math";);func (_egbc *Renderer )ClearTextRotation (){_egbc ._fgg =0};func (_de *Renderer )SetStrokeDashArray (dashArray []float64 ){_bcb :=make ([]int64 ,len (dashArray ));for _ge ,_gg :=range dashArray {_bcb [_ge ]=int64 (_gg );
};_de ._ef .Add_d (_bcb ,0);};func NewRenderer (cc *_bc .ContentCreator ,res *_e .PdfPageResources )func (int ,int )(_b .Renderer ,error ){return func (_cc ,_dc int )(_b .Renderer ,error ){_fcb :=&Renderer {_gb :_cc ,_gc :_dc ,_gdg :72,_ef :cc ,_be :res ,_cdc :map[*_e .PdfFont ]_fc .PdfObjectName {}};
_fcb .ResetStyle ();return _fcb ,nil ;};};func (_ed *Renderer )SetFont (font _b .Font ){_fgd ,_edb :=font .(*_e .PdfFont );if !_edb {_gd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");
return ;};_bcg ,_edb :=_ed ._cdc [_fgd ];if !_edb {_bcg =_gda ("\u0046\u006f\u006e\u0074",1,_ed ._be .HasFontByName );if _ded :=_ed ._be .SetFontByName (_bcg ,_fgd .ToPdfObject ());_ded !=nil {_gd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_fgd );
};_ed ._cdc [_fgd ]=_bcg ;};_ed ._ef .Add_Tf (_bcg ,_ed ._fa );_ed ._dd =_fgd ;};func (_ec *Renderer )SetFillColor (color _ff .Color ){_ec ._fcf =color ;_dga ,_fcba ,_bd ,_ :=_eda (color );_ec ._ef .Add_rg (_dga ,_fcba ,_bd );};func (_db *Renderer )Text (text string ,x ,y int ){_db ._ef .Add_q ();
_db .SetFont (_db ._dd );_fggf ,_egb ,_ced ,_ :=_eda (_db ._ea );_db ._ef .Add_rg (_fggf ,_egb ,_ced );_db ._ef .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _gea :=_db ._fgg ;_gea !=0{_db ._ef .RotateDeg (_gea );};_db ._ef .Add_BT ().Add_TL (_db ._fa );
var (_fb =_db ._dd .Encoder ();_agc =_db .wrapText (text );_ffg =len (_agc ););for _ffgf ,_dfg :=range _agc {_db ._ef .Add_TJ (_fc .MakeStringFromBytes (_fb .Encode (_dfg )));if _ffgf !=_ffg -1{_db ._ef .Add_Tstar ();};};_db ._ef .Add_ET ();_db ._ef .Add_Q ();
};func (_ce *Renderer )SetStrokeWidth (width float64 ){_ce ._df =width ;_ce ._ef .Add_w (width )};func _dfgc (_fbe _ff .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_gef ,_faf ,_ecg ,_ebc :=_fbe .RGBA ();return uint8 (_gef >>8),uint8 (_faf >>8),uint8 (_ecg >>8),uint8 (_ebc >>8);
};func (_dcd *Renderer )SetFontColor (color _ff .Color ){_dcd ._ea =color };func (_cga *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_abca (2.0*_fg .Pi -startAngle );deltaAngle =_abca (-deltaAngle );_cf ,_dfd :=deltaAngle ,1;
if _fg .Abs (deltaAngle )> 90.0{_dfd =int (_fg .Ceil (_fg .Abs (deltaAngle )/90.0));_cf =deltaAngle /float64 (_dfd );};var (_efe =_bbe (_cf /2);_gga =_fg .Abs (4.0/3.0*(1.0-_fg .Cos (_efe ))/_fg .Sin (_efe ));_cee =float64 (cx );_af =float64 (cy ););for _bca :=0;
_bca < _dfd ;_bca ++{_ac :=_bbe (startAngle +float64 (_bca )*_cf );_eg :=_bbe (startAngle +float64 (_bca +1)*_cf );_gf :=_fg .Cos (_ac );_bef :=_fg .Cos (_eg );_cfg :=_fg .Sin (_ac );_gdf :=_fg .Sin (_eg );var _cad []float64 ;if _cf > 0{_cad =[]float64 {_cee +rx *_gf ,_af -ry *_cfg ,_cee +rx *(_gf -_gga *_cfg ),_af -ry *(_cfg +_gga *_gf ),_cee +rx *(_bef +_gga *_gdf ),_af -ry *(_gdf -_gga *_bef ),_cee +rx *_bef ,_af -ry *_gdf };
}else {_cad =[]float64 {_cee +rx *_gf ,_af -ry *_cfg ,_cee +rx *(_gf +_gga *_cfg ),_af -ry *(_cfg -_gga *_gf ),_cee +rx *(_bef -_gga *_gdf ),_af -ry *(_gdf +_gga *_bef ),_cee +rx *_bef ,_af -ry *_gdf };};if _bca ==0{_cga ._ef .Add_l (_cad [0],_cad [1]);
};_cga ._ef .Add_c (_cad [2],_cad [3],_cad [4],_cad [5],_cad [6],_cad [7]);};};func (_ba *Renderer )SetDPI (dpi float64 ){_ba ._gdg =dpi };func (_eb *Renderer )Stroke (){_eb ._ef .Add_S ()};func (_fcfg *Renderer )SetTextRotation (radians float64 ){_fcfg ._fgg =_abca (-radians )};
func (_fcbf *Renderer )Close (){_fcbf ._ef .Add_h ()};func (_ebf *Renderer )MeasureText (text string )_b .Box {_ae :=_ebf ._fa ;_ceed ,_bbd :=_ebf ._dd .GetFontDescriptor ();if _bbd !=nil {_gd .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_dca ,_aca :=_ceed .GetCapHeight ();if _aca !=nil {_gd .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_aca );
}else {_ae =_dca /1000.0*_ebf ._fa ;};};var (_cedc =0.0;_edbb =_ebf .wrapText (text ););for _ ,_cfe :=range _edbb {if _ccg :=_ebf .getTextWidth (_cfe );_ccg > _cedc {_cedc =_ccg ;};};_fe :=_b .NewBox (0,0,int (_cedc ),int (_ae ));if _dfa :=_ebf ._fgg ;
_dfa !=0{_fe =_fe .Corners ().Rotate (_dfa ).Box ();};return _fe ;};func _gda (_fae string ,_bcf int ,_gaa func (_fc .PdfObjectName )bool )_fc .PdfObjectName {_fde :=_fc .PdfObjectName (_a .Sprintf ("\u0025\u0073\u0025\u0064",_fae ,_bcf ));for _gdga :=_bcf ;
_gaa (_fde );{_gdga ++;_fde =_fc .PdfObjectName (_a .Sprintf ("\u0025\u0073\u0025\u0064",_fae ,_gdga ));};return _fde ;};func (_dff *Renderer )Circle (radius float64 ,x ,y int ){_dgd :=radius ;if _dgde :=_dff ._df ;_dgde !=0{_dgd -=_dgde /2;};_abc :=_dgd *0.551784;
_dfe :=_cd .CubicBezierPath {Curves :[]_cd .CubicBezierCurve {_cd .NewCubicBezierCurve (-_dgd ,0,-_dgd ,_abc ,-_abc ,_dgd ,0,_dgd ),_cd .NewCubicBezierCurve (0,_dgd ,_abc ,_dgd ,_dgd ,_abc ,_dgd ,0),_cd .NewCubicBezierCurve (_dgd ,0,_dgd ,-_abc ,_abc ,-_dgd ,0,-_dgd ),_cd .NewCubicBezierCurve (0,-_dgd ,-_abc ,-_dgd ,-_dgd ,-_abc ,-_dgd ,0)}};
if _cbfc :=_dff ._df ;_cbfc !=0{_dfe =_dfe .Offset (_cbfc /2,_cbfc /2);};_dfe =_dfe .Offset (float64 (x ),float64 (y ));_cd .DrawBezierPathWithCreator (_dfe ,_dff ._ef );};func (_fag *Renderer )Save (w _c .Writer )error {if w ==nil {return nil ;};_ ,_gad :=_c .Copy (w ,_g .NewBuffer (_fag ._ef .Bytes ()));
return _gad ;};type Renderer struct{_gb int ;_gc int ;_gdg float64 ;_ef *_bc .ContentCreator ;_be *_e .PdfPageResources ;_fcf _ff .Color ;_d _ff .Color ;_df float64 ;_dd *_e .PdfFont ;_fa float64 ;_ea _ff .Color ;_fgg float64 ;_cdc map[*_e .PdfFont ]_fc .PdfObjectName ;
};func (_cb *Renderer )GetDPI ()float64 {return _cb ._gdg };func (_cdf *Renderer )SetClassName (name string ){};func _bbe (_bag float64 )float64 {return _bag *_fg .Pi /180.0};func (_abd *Renderer )SetFontSize (size float64 ){_abd ._fa =size };func _eda (_bde _ff .Color )(float64 ,float64 ,float64 ,float64 ){_bae ,_aaf ,_cba ,_ebcf :=_dfgc (_bde );
return float64 (_bae )/255,float64 (_aaf )/255,float64 (_cba )/255,float64 (_ebcf )/255;};func (_dgb *Renderer )wrapText (_gfe string )[]string {var (_ebb []string ;_agf []rune ;);for _ ,_dfc :=range _gfe {if _dfc =='\n'{_ebb =append (_ebb ,string (_agf ));
_agf =[]rune {};continue ;};_agf =append (_agf ,_dfc );};if len (_agf )> 0{_ebb =append (_ebb ,string (_agf ));};return _ebb ;};func (_ab *Renderer )Fill (){_ab ._ef .Add_f ()};func (_dg *Renderer )ResetStyle (){_dg .SetFillColor (_ff .Black );_dg .SetStrokeColor (_ff .Transparent );
_dg .SetStrokeWidth (0);_dg .SetFont (_e .DefaultFont ());_dg .SetFontColor (_ff .Black );_dg .SetFontSize (12);_dg .SetTextRotation (0);};func _abca (_dbd float64 )float64 {return _dbd *180/_fg .Pi };func (_bb *Renderer )FillStroke (){_bb ._ef .Add_B ()};
func (_gbg *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_gbg ._ef .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_ag *Renderer )SetStrokeColor (color _ff .Color ){_ag ._d =color ;_ca ,_ga ,_fd ,_ :=_eda (color );_ag ._ef .Add_RG (_ca ,_ga ,_fd );
};func (_dfgd *Renderer )getTextWidth (_cedg string )float64 {var _gadd float64 ;for _ ,_feb :=range _cedg {_efa ,_cdd :=_dfgd ._dd .GetRuneMetrics (_feb );if !_cdd {_gd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_feb );
};_gadd +=_efa .Wx ;};return _dfgd ._fa *_gadd /1000.0;};func (_cbf *Renderer )LineTo (x ,y int ){_cbf ._ef .Add_l (float64 (x ),float64 (y ))};func (_aa *Renderer )MoveTo (x ,y int ){_aa ._ef .Add_m (float64 (x ),float64 (y ))};