//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_e "errors";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_gc "io";_d "math";);type Decoder struct{_add int ;_ccaf int ;_fbb int ;_afd []byte ;_ga int ;_eac bool ;_cbc bool ;_da bool ;_ef bool ;_gg bool ;_ccae bool ;_daf bool ;
_gdd int ;_be int ;_cbg []int ;_geg []int ;_bfg int ;_gdcb int ;_bea int ;_afb int ;_ede *_b .Reader ;_ebc tiffType ;_eace error ;};func init (){_gd =&treeNode {_gfc :true ,_cfec :_bgd };_f =&treeNode {_cfec :_c ,_gdfe :_gd };_f ._feaa =_f ;_bga =&tree {_ged :&treeNode {}};
if _ebe :=_bga .fillWithNode (12,0,_f );_ebe !=nil {panic (_ebe .Error ());};if _fb :=_bga .fillWithNode (12,1,_gd );_fb !=nil {panic (_fb .Error ());};_bg =&tree {_ged :&treeNode {}};for _fa :=0;_fa < len (_aef );_fa ++{for _ff :=0;_ff < len (_aef [_fa ]);
_ff ++{if _a :=_bg .fill (_fa +2,int (_aef [_fa ][_ff ]),int (_dc [_fa ][_ff ]));_a !=nil {panic (_a .Error ());};};};if _cc :=_bg .fillWithNode (12,0,_f );_cc !=nil {panic (_cc .Error ());};if _ce :=_bg .fillWithNode (12,1,_gd );_ce !=nil {panic (_ce .Error ());
};_gca =&tree {_ged :&treeNode {}};for _ae :=0;_ae < len (_fd );_ae ++{for _faf :=0;_faf < len (_fd [_ae ]);_faf ++{if _cd :=_gca .fill (_ae +4,int (_fd [_ae ][_faf ]),int (_dd [_ae ][_faf ]));_cd !=nil {panic (_cd .Error ());};};};if _ccc :=_gca .fillWithNode (12,0,_f );
_ccc !=nil {panic (_ccc .Error ());};if _cca :=_gca .fillWithNode (12,1,_gd );_cca !=nil {panic (_cca .Error ());};_ed =&tree {_ged :&treeNode {}};if _ad :=_ed .fill (4,1,_eb );_ad !=nil {panic (_ad .Error ());};if _ade :=_ed .fill (3,1,_bb );_ade !=nil {panic (_ade .Error ());
};if _edg :=_ed .fill (1,1,0);_edg !=nil {panic (_edg .Error ());};if _fafd :=_ed .fill (3,3,1);_fafd !=nil {panic (_fafd .Error ());};if _gda :=_ed .fill (6,3,2);_gda !=nil {panic (_gda .Error ());};if _cb :=_ed .fill (7,3,3);_cb !=nil {panic (_cb .Error ());
};if _fae :=_ed .fill (3,2,-1);_fae !=nil {panic (_fae .Error ());};if _gb :=_ed .fill (6,2,-2);_gb !=nil {panic (_gb .Error ());};if _fg :=_ed .fill (7,2,-3);_fg !=nil {panic (_fg .Error ());};};func (_fcf *Decoder )decodeRow ()(_afe error ){if !_fcf ._ccae &&_fcf ._ccaf > 0&&_fcf ._ccaf ==_fcf ._fbb {return _gc .EOF ;
};switch _fcf ._ebc {case _bbb :_afe =_fcf .decodeRowType2 ();case _bf :_afe =_fcf .decodeRowType4 ();case _gbf :_afe =_fcf .decodeRowType6 ();};if _afe !=nil {return _afe ;};_ada :=0;_fdbf :=true ;_fcf ._afb =0;for _fbc :=0;_fbc < _fcf ._gdcb ;_fbc ++{_gfg :=_fcf ._add ;
if _fbc !=_fcf ._gdcb {_gfg =_fcf ._geg [_fbc ];};if _gfg > _fcf ._add {_gfg =_fcf ._add ;};_fgc :=_ada /8;for _ada %8!=0&&_gfg -_ada > 0{var _egc byte ;if !_fdbf {_egc =1<<uint (7-(_ada %8));};_fcf ._afd [_fgc ]|=_egc ;_ada ++;};if _ada %8==0{_fgc =_ada /8;
var _afdc byte ;if !_fdbf {_afdc =0xff;};for _gfg -_ada > 7{_fcf ._afd [_fgc ]=_afdc ;_ada +=8;_fgc ++;};};for _gfg -_ada > 0{if _ada %8==0{_fcf ._afd [_fgc ]=0;};var _ead byte ;if !_fdbf {_ead =1<<uint (7-(_ada %8));};_fcf ._afd [_fgc ]|=_ead ;_ada ++;
};_fdbf =!_fdbf ;};if _ada !=_fcf ._add {return _e .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_fcf ._gdd =(_ada +7)/8;_fcf ._fbb ++;return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_faa :=&Decoder {_ede :_b .NewReader (data ),_add :options .Columns ,_ccaf :options .Rows ,_ga :options .DamagedRowsBeforeError ,_afd :make ([]byte ,(options .Columns +7)/8),_cbg :make ([]int ,options .Columns +2),_geg :make ([]int ,options .Columns +2),_daf :options .EncodedByteAligned ,_ef :options .BlackIsOne ,_gg :options .EndOfLine ,_ccae :options .EndOfBlock };
switch {case options .K ==0:_faa ._ebc =_bf ;if len (data )< 20{return nil ,_e .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_acc :=data [:20];if _acc [0]!=0||(_acc [1]>>4!=1&&_acc [1]!=1){_faa ._ebc =_bbb ;
_efc :=(uint16 (_acc [0])<<8+uint16 (_acc [1]&0xff))>>4;for _bge :=12;_bge < 160;_bge ++{_efc =(_efc <<1)+uint16 ((_acc [_bge /8]>>uint16 (7-(_bge %8)))&0x01);if _efc &0xfff==1{_faa ._ebc =_bf ;break ;};};};case options .K < 0:_faa ._ebc =_gbf ;case options .K > 0:_faa ._ebc =_bf ;
_faa ._eac =true ;};switch _faa ._ebc {case _bbb ,_bf ,_gbf :default:return nil ,_e .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _faa ,nil ;};var _aef =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_cccg *Encoder )encodeG31D (_eef [][]byte )[]byte {var _cgb []byte ;_bcb :=0;for _cdc :=range _eef {if _cccg .Rows > 0&&!_cccg .EndOfBlock &&_cdc ==_cccg .Rows {break ;};_bcec ,_deg :=_edf (_eef [_cdc ],_bcb ,_fdb );_cgb =_cccg .appendEncodedRow (_cgb ,_bcec ,_bcb );
if _cccg .EncodedByteAlign {_deg =0;};_bcb =_deg ;};if _cccg .EndOfBlock {_gdbf ,_ :=_abf (_bcb );_cgb =_cccg .appendEncodedRow (_cgb ,_gdbf ,_bcb );};return _cgb ;};func _cdd (_dae int )([]byte ,int ){var _ddc []byte ;for _cab :=0;_cab < 6;_cab ++{_ddc ,_dae =_aded (_ddc ,_dae ,_ffg );
};return _ddc ,_dae %8;};func _dddc (_gdf ,_gcaa int )code {var _geff code ;switch _gcaa -_gdf {case -1:_geff =_af ;case -2:_geff =_ea ;case -3:_geff =_cfe ;case 0:_geff =_db ;case 1:_geff =_dfg ;case 2:_geff =_ge ;case 3:_geff =_fc ;};return _geff ;};
func init (){_df =make (map[int ]code );_df [0]=code {Code :13<<8|3<<6,BitsWritten :10};_df [1]=code {Code :2<<(5+8),BitsWritten :3};_df [2]=code {Code :3<<(6+8),BitsWritten :2};_df [3]=code {Code :2<<(6+8),BitsWritten :2};_df [4]=code {Code :3<<(5+8),BitsWritten :3};
_df [5]=code {Code :3<<(4+8),BitsWritten :4};_df [6]=code {Code :2<<(4+8),BitsWritten :4};_df [7]=code {Code :3<<(3+8),BitsWritten :5};_df [8]=code {Code :5<<(2+8),BitsWritten :6};_df [9]=code {Code :4<<(2+8),BitsWritten :6};_df [10]=code {Code :4<<(1+8),BitsWritten :7};
_df [11]=code {Code :5<<(1+8),BitsWritten :7};_df [12]=code {Code :7<<(1+8),BitsWritten :7};_df [13]=code {Code :4<<8,BitsWritten :8};_df [14]=code {Code :7<<8,BitsWritten :8};_df [15]=code {Code :12<<8,BitsWritten :9};_df [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_df [17]=code {Code :6<<8,BitsWritten :10};_df [18]=code {Code :2<<8,BitsWritten :10};_df [19]=code {Code :12<<8|7<<5,BitsWritten :11};_df [20]=code {Code :13<<8,BitsWritten :11};_df [21]=code {Code :13<<8|4<<5,BitsWritten :11};_df [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_df [23]=code {Code :5<<8,BitsWritten :11};_df [24]=code {Code :2<<8|7<<5,BitsWritten :11};_df [25]=code {Code :3<<8,BitsWritten :11};_df [26]=code {Code :12<<8|10<<4,BitsWritten :12};_df [27]=code {Code :12<<8|11<<4,BitsWritten :12};_df [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_df [29]=code {Code :12<<8|13<<4,BitsWritten :12};_df [30]=code {Code :6<<8|8<<4,BitsWritten :12};_df [31]=code {Code :6<<8|9<<4,BitsWritten :12};_df [32]=code {Code :6<<8|10<<4,BitsWritten :12};_df [33]=code {Code :6<<8|11<<4,BitsWritten :12};_df [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_df [35]=code {Code :13<<8|3<<4,BitsWritten :12};_df [36]=code {Code :13<<8|4<<4,BitsWritten :12};_df [37]=code {Code :13<<8|5<<4,BitsWritten :12};_df [38]=code {Code :13<<8|6<<4,BitsWritten :12};_df [39]=code {Code :13<<8|7<<4,BitsWritten :12};_df [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_df [41]=code {Code :6<<8|13<<4,BitsWritten :12};_df [42]=code {Code :13<<8|10<<4,BitsWritten :12};_df [43]=code {Code :13<<8|11<<4,BitsWritten :12};_df [44]=code {Code :5<<8|4<<4,BitsWritten :12};_df [45]=code {Code :5<<8|5<<4,BitsWritten :12};_df [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_df [47]=code {Code :5<<8|7<<4,BitsWritten :12};_df [48]=code {Code :6<<8|4<<4,BitsWritten :12};_df [49]=code {Code :6<<8|5<<4,BitsWritten :12};_df [50]=code {Code :5<<8|2<<4,BitsWritten :12};_df [51]=code {Code :5<<8|3<<4,BitsWritten :12};_df [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_df [53]=code {Code :3<<8|7<<4,BitsWritten :12};_df [54]=code {Code :3<<8|8<<4,BitsWritten :12};_df [55]=code {Code :2<<8|7<<4,BitsWritten :12};_df [56]=code {Code :2<<8|8<<4,BitsWritten :12};_df [57]=code {Code :5<<8|8<<4,BitsWritten :12};_df [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_df [59]=code {Code :2<<8|11<<4,BitsWritten :12};_df [60]=code {Code :2<<8|12<<4,BitsWritten :12};_df [61]=code {Code :5<<8|10<<4,BitsWritten :12};_df [62]=code {Code :6<<8|6<<4,BitsWritten :12};_df [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ca =make (map[int ]code );
_ca [0]=code {Code :53<<8,BitsWritten :8};_ca [1]=code {Code :7<<(2+8),BitsWritten :6};_ca [2]=code {Code :7<<(4+8),BitsWritten :4};_ca [3]=code {Code :8<<(4+8),BitsWritten :4};_ca [4]=code {Code :11<<(4+8),BitsWritten :4};_ca [5]=code {Code :12<<(4+8),BitsWritten :4};
_ca [6]=code {Code :14<<(4+8),BitsWritten :4};_ca [7]=code {Code :15<<(4+8),BitsWritten :4};_ca [8]=code {Code :19<<(3+8),BitsWritten :5};_ca [9]=code {Code :20<<(3+8),BitsWritten :5};_ca [10]=code {Code :7<<(3+8),BitsWritten :5};_ca [11]=code {Code :8<<(3+8),BitsWritten :5};
_ca [12]=code {Code :8<<(2+8),BitsWritten :6};_ca [13]=code {Code :3<<(2+8),BitsWritten :6};_ca [14]=code {Code :52<<(2+8),BitsWritten :6};_ca [15]=code {Code :53<<(2+8),BitsWritten :6};_ca [16]=code {Code :42<<(2+8),BitsWritten :6};_ca [17]=code {Code :43<<(2+8),BitsWritten :6};
_ca [18]=code {Code :39<<(1+8),BitsWritten :7};_ca [19]=code {Code :12<<(1+8),BitsWritten :7};_ca [20]=code {Code :8<<(1+8),BitsWritten :7};_ca [21]=code {Code :23<<(1+8),BitsWritten :7};_ca [22]=code {Code :3<<(1+8),BitsWritten :7};_ca [23]=code {Code :4<<(1+8),BitsWritten :7};
_ca [24]=code {Code :40<<(1+8),BitsWritten :7};_ca [25]=code {Code :43<<(1+8),BitsWritten :7};_ca [26]=code {Code :19<<(1+8),BitsWritten :7};_ca [27]=code {Code :36<<(1+8),BitsWritten :7};_ca [28]=code {Code :24<<(1+8),BitsWritten :7};_ca [29]=code {Code :2<<8,BitsWritten :8};
_ca [30]=code {Code :3<<8,BitsWritten :8};_ca [31]=code {Code :26<<8,BitsWritten :8};_ca [32]=code {Code :27<<8,BitsWritten :8};_ca [33]=code {Code :18<<8,BitsWritten :8};_ca [34]=code {Code :19<<8,BitsWritten :8};_ca [35]=code {Code :20<<8,BitsWritten :8};
_ca [36]=code {Code :21<<8,BitsWritten :8};_ca [37]=code {Code :22<<8,BitsWritten :8};_ca [38]=code {Code :23<<8,BitsWritten :8};_ca [39]=code {Code :40<<8,BitsWritten :8};_ca [40]=code {Code :41<<8,BitsWritten :8};_ca [41]=code {Code :42<<8,BitsWritten :8};
_ca [42]=code {Code :43<<8,BitsWritten :8};_ca [43]=code {Code :44<<8,BitsWritten :8};_ca [44]=code {Code :45<<8,BitsWritten :8};_ca [45]=code {Code :4<<8,BitsWritten :8};_ca [46]=code {Code :5<<8,BitsWritten :8};_ca [47]=code {Code :10<<8,BitsWritten :8};
_ca [48]=code {Code :11<<8,BitsWritten :8};_ca [49]=code {Code :82<<8,BitsWritten :8};_ca [50]=code {Code :83<<8,BitsWritten :8};_ca [51]=code {Code :84<<8,BitsWritten :8};_ca [52]=code {Code :85<<8,BitsWritten :8};_ca [53]=code {Code :36<<8,BitsWritten :8};
_ca [54]=code {Code :37<<8,BitsWritten :8};_ca [55]=code {Code :88<<8,BitsWritten :8};_ca [56]=code {Code :89<<8,BitsWritten :8};_ca [57]=code {Code :90<<8,BitsWritten :8};_ca [58]=code {Code :91<<8,BitsWritten :8};_ca [59]=code {Code :74<<8,BitsWritten :8};
_ca [60]=code {Code :75<<8,BitsWritten :8};_ca [61]=code {Code :50<<8,BitsWritten :8};_ca [62]=code {Code :51<<8,BitsWritten :8};_ca [63]=code {Code :52<<8,BitsWritten :8};_cf =make (map[int ]code );_cf [64]=code {Code :3<<8|3<<6,BitsWritten :10};_cf [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_cf [192]=code {Code :12<<8|9<<4,BitsWritten :12};_cf [256]=code {Code :5<<8|11<<4,BitsWritten :12};_cf [320]=code {Code :3<<8|3<<4,BitsWritten :12};_cf [384]=code {Code :3<<8|4<<4,BitsWritten :12};_cf [448]=code {Code :3<<8|5<<4,BitsWritten :12};_cf [512]=code {Code :3<<8|12<<3,BitsWritten :13};
_cf [576]=code {Code :3<<8|13<<3,BitsWritten :13};_cf [640]=code {Code :2<<8|10<<3,BitsWritten :13};_cf [704]=code {Code :2<<8|11<<3,BitsWritten :13};_cf [768]=code {Code :2<<8|12<<3,BitsWritten :13};_cf [832]=code {Code :2<<8|13<<3,BitsWritten :13};_cf [896]=code {Code :3<<8|18<<3,BitsWritten :13};
_cf [960]=code {Code :3<<8|19<<3,BitsWritten :13};_cf [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_cf [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_cf [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_cf [1216]=code {Code :119<<3,BitsWritten :13};_cf [1280]=code {Code :2<<8|18<<3,BitsWritten :13};
_cf [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_cf [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_cf [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_cf [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_cf [1600]=code {Code :2<<8|27<<3,BitsWritten :13};
_cf [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_cf [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_de =make (map[int ]code );_de [64]=code {Code :27<<(3+8),BitsWritten :5};_de [128]=code {Code :18<<(3+8),BitsWritten :5};_de [192]=code {Code :23<<(2+8),BitsWritten :6};
_de [256]=code {Code :55<<(1+8),BitsWritten :7};_de [320]=code {Code :54<<8,BitsWritten :8};_de [384]=code {Code :55<<8,BitsWritten :8};_de [448]=code {Code :100<<8,BitsWritten :8};_de [512]=code {Code :101<<8,BitsWritten :8};_de [576]=code {Code :104<<8,BitsWritten :8};
_de [640]=code {Code :103<<8,BitsWritten :8};_de [704]=code {Code :102<<8,BitsWritten :9};_de [768]=code {Code :102<<8|1<<7,BitsWritten :9};_de [832]=code {Code :105<<8,BitsWritten :9};_de [896]=code {Code :105<<8|1<<7,BitsWritten :9};_de [960]=code {Code :106<<8,BitsWritten :9};
_de [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_de [1088]=code {Code :107<<8,BitsWritten :9};_de [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_de [1216]=code {Code :108<<8,BitsWritten :9};_de [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_de [1344]=code {Code :109<<8,BitsWritten :9};
_de [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_de [1472]=code {Code :76<<8,BitsWritten :9};_de [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_de [1600]=code {Code :77<<8,BitsWritten :9};_de [1664]=code {Code :24<<(2+8),BitsWritten :6};_de [1728]=code {Code :77<<8|1<<7,BitsWritten :9};
_aa =make (map[int ]code );_aa [1792]=code {Code :1<<8,BitsWritten :11};_aa [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_aa [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_aa [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_aa [2048]=code {Code :1<<8|3<<4,BitsWritten :12};
_aa [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_aa [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_aa [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_aa [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_aa [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_aa [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_aa [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_aa [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ac =make (map[int ]byte );_ac [0]=0xFF;_ac [1]=0xFE;_ac [2]=0xFC;_ac [3]=0xF8;_ac [4]=0xF0;_ac [5]=0xE0;_ac [6]=0xC0;_ac [7]=0x80;_ac [8]=0x00;};func _fcge (_ggc []byte ,_adc int )int {if _adc >=len (_ggc ){return _adc ;
};if _adc < -1{_adc =-1;};var _eeb byte ;if _adc > -1{_eeb =_ggc [_adc ];}else {_eeb =_bce ;};_addg :=_adc +1;for _addg < len (_ggc ){if _ggc [_addg ]!=_eeb {break ;};_addg ++;};return _addg ;};var _dc =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func _abfg (_bdgg []byte ,_ffeb int )([]byte ,int ){return _aded (_bdgg ,_ffeb ,_aeg )};func (_ec *Decoder )getNextChangingElement (_bee int ,_adgc bool )int {_aad :=0;if !_adgc {_aad =1;};_bfa :=int (uint32 (_ec ._afb )&0xFFFFFFFE)+_aad ;if _bfa > 2{_bfa -=2;
};if _bee ==0{return _bfa ;};for _dbe :=_bfa ;_dbe < _ec ._bfg ;_dbe +=2{if _bee < _ec ._cbg [_dbe ]{_ec ._afb =_dbe ;return _dbe ;};};return -1;};func (_bgef *Decoder )decodeRowType4 ()error {if !_bgef ._eac {return _bgef .decoderRowType41D ();};if _bgef ._daf {_bgef ._ede .Align ();
};_bgef ._ede .Mark ();_gdda ,_baa :=_bgef .tryFetchEOL ();if _baa !=nil {return _baa ;};if !_gdda &&_bgef ._gg {_bgef ._bea ++;if _bgef ._bea > _bgef ._ga {return _ceg ;};_bgef ._ede .Reset ();};if !_gdda {_bgef ._ede .Reset ();};_ddg ,_baa :=_bgef ._ede .ReadBool ();
if _baa !=nil {return _baa ;};if _ddg {if _gdda &&_bgef ._ccae {if _baa =_bgef .tryFetchRTC2D ();_baa !=nil {return _baa ;};};_baa =_bgef .decode1D ();}else {_baa =_bgef .decode2D ();};if _baa !=nil {return _baa ;};return nil ;};func (_beab *Decoder )decodeG32D ()error {_beab ._bfg =_beab ._gdcb ;
_beab ._geg ,_beab ._cbg =_beab ._cbg ,_beab ._geg ;_bgaa :=true ;var (_ccg bool ;_fcc int ;_fbe error ;);_beab ._gdcb =0;_afc :for _fcc < _beab ._add {_dcg :=_ed ._ged ;for {_ccg ,_fbe =_beab ._ede .ReadBool ();if _fbe !=nil {return _fbe ;};_dcg =_dcg .walk (_ccg );
if _dcg ==nil {continue _afc ;};if !_dcg ._gfc {continue ;};switch _dcg ._cfec {case _bb :var _efcb int ;if _bgaa {_efcb ,_fbe =_beab .decodeRun (_gca );}else {_efcb ,_fbe =_beab .decodeRun (_bg );};if _fbe !=nil {return _fbe ;};_fcc +=_efcb ;_beab ._geg [_beab ._gdcb ]=_fcc ;
_beab ._gdcb ++;if _bgaa {_efcb ,_fbe =_beab .decodeRun (_bg );}else {_efcb ,_fbe =_beab .decodeRun (_gca );};if _fbe !=nil {return _fbe ;};_fcc +=_efcb ;_beab ._geg [_beab ._gdcb ]=_fcc ;_beab ._gdcb ++;case _eb :_ded :=_beab .getNextChangingElement (_fcc ,_bgaa )+1;
if _ded >=_beab ._bfg {_fcc =_beab ._add ;}else {_fcc =_beab ._cbg [_ded ];};default:_bac :=_beab .getNextChangingElement (_fcc ,_bgaa );if _bac >=_beab ._bfg ||_bac ==-1{_fcc =_beab ._add +_dcg ._cfec ;}else {_fcc =_beab ._cbg [_bac ]+_dcg ._cfec ;};_beab ._geg [_beab ._gdcb ]=_fcc ;
_beab ._gdcb ++;_bgaa =!_bgaa ;};continue _afc ;};};return nil ;};func _ceb (_fef []byte ,_cfc ,_gdg ,_gdge int )([]byte ,int ){_gbcea :=_dddc (_gdg ,_gdge );_fef ,_cfc =_aded (_fef ,_cfc ,_gbcea );return _fef ,_cfc ;};func (_fed *treeNode )walk (_cdf bool )*treeNode {if _cdf {return _fed ._gdfe ;
};return _fed ._feaa ;};func _aag (_aeaa [][]byte )[][]byte {_cbeb :=make ([]byte ,len (_aeaa [0]));for _edfb :=range _cbeb {_cbeb [_edfb ]=_bce ;};_aeaa =append (_aeaa ,[]byte {});for _deb :=len (_aeaa )-1;_deb > 0;_deb --{_aeaa [_deb ]=_aeaa [_deb -1];
};_aeaa [0]=_cbeb ;return _aeaa ;};func (_gfe tiffType )String ()string {switch _gfe {case _bbb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _bf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _gbf :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_cef *Decoder )tryFetchEOL ()(bool ,error ){_fdfc ,_dg :=_cef ._ede .ReadBits (12);
if _dg !=nil {return false ,_dg ;};return _fdfc ==0x1,nil ;};func (_aegc *Decoder )decoderRowType41D ()error {if _aegc ._daf {_aegc ._ede .Align ();};_aegc ._ede .Mark ();var (_ee bool ;_cbe error ;);if _aegc ._gg {_ee ,_cbe =_aegc .tryFetchEOL ();if _cbe !=nil {return _cbe ;
};if !_ee {return _ceg ;};}else {_ee ,_cbe =_aegc .looseFetchEOL ();if _cbe !=nil {return _cbe ;};};if !_ee {_aegc ._ede .Reset ();};if _ee &&_aegc ._ccae {_aegc ._ede .Mark ();for _dbf :=0;_dbf < 5;_dbf ++{_ee ,_cbe =_aegc .tryFetchEOL ();if _cbe !=nil {if _e .Is (_cbe ,_gc .EOF ){if _dbf ==0{break ;
};return _fdf ;};};if _ee {continue ;};if _dbf > 0{return _fdf ;};break ;};if _ee {return _gc .EOF ;};_aegc ._ede .Reset ();};if _cbe =_aegc .decode1D ();_cbe !=nil {return _cbe ;};return nil ;};func (_baf *Decoder )Read (in []byte )(int ,error ){if _baf ._eace !=nil {return 0,_baf ._eace ;
};_bag :=len (in );var (_gff int ;_gdcg int ;);for _bag !=0{if _baf ._be >=_baf ._gdd {if _aca :=_baf .fetch ();_aca !=nil {_baf ._eace =_aca ;return 0,_aca ;};};if _baf ._gdd ==-1{return _gff ,_gc .EOF ;};switch {case _bag <=_baf ._gdd -_baf ._be :_ddd :=_baf ._afd [_baf ._be :_baf ._be +_bag ];
for _ ,_fca :=range _ddd {if !_baf ._ef {_fca =^_fca ;};in [_gdcg ]=_fca ;_gdcg ++;};_gff +=len (_ddd );_baf ._be +=len (_ddd );return _gff ,nil ;default:_bed :=_baf ._afd [_baf ._be :];for _ ,_dfc :=range _bed {if !_baf ._ef {_dfc =^_dfc ;};in [_gdcg ]=_dfc ;
_gdcg ++;};_gff +=len (_bed );_baf ._be +=len (_bed );_bag -=len (_bed );};};return _gff ,nil ;};func (_ccf *Decoder )decodeRowType2 ()error {if _ccf ._daf {_ccf ._ede .Align ();};if _agf :=_ccf .decode1D ();_agf !=nil {return _agf ;};return nil ;};func (_fe *Decoder )tryFetchRTC2D ()(_aaac error ){_fe ._ede .Mark ();
var _dbc bool ;for _gdb :=0;_gdb < 5;_gdb ++{_dbc ,_aaac =_fe .tryFetchEOL1 ();if _aaac !=nil {if _e .Is (_aaac ,_gc .EOF ){if _gdb ==0{break ;};return _fdf ;};};if _dbc {continue ;};if _gdb > 0{return _fdf ;};break ;};if _dbc {return _gc .EOF ;};_fe ._ede .Reset ();
return _aaac ;};var (_fdf =_e .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_ceg =_e .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_dee *Decoder )tryFetchEOL1 ()(bool ,error ){_aed ,_aefa :=_dee ._ede .ReadBits (13);if _aefa !=nil {return false ,_aefa ;};return _aed ==0x3,nil ;};var (_gd *treeNode ;_f *treeNode ;_bg *tree ;_gca *tree ;_bga *tree ;_ed *tree ;_bgd =-2000;_c =-1000;
_eb =-3000;_bb =-4000;);type tree struct{_ged *treeNode };func (_eca *Encoder )encodeG32D (_aac [][]byte )[]byte {var _adgf []byte ;var _fcg int ;for _ffe :=0;_ffe < len (_aac );_ffe +=_eca .K {if _eca .Rows > 0&&!_eca .EndOfBlock &&_ffe ==_eca .Rows {break ;
};_cdce ,_ebeb :=_edf (_aac [_ffe ],_fcg ,_ffg );_adgf =_eca .appendEncodedRow (_adgf ,_cdce ,_fcg );if _eca .EncodedByteAlign {_ebeb =0;};_fcg =_ebeb ;for _aadb :=_ffe +1;_aadb < (_ffe +_eca .K )&&_aadb < len (_aac );_aadb ++{if _eca .Rows > 0&&!_eca .EndOfBlock &&_aadb ==_eca .Rows {break ;
};_cgc ,_fba :=_aded (nil ,_fcg ,_ba );var _fdg ,_bacd ,_eefd int ;_dbcf :=-1;for _dbcf < len (_aac [_aadb ]){_fdg =_fcge (_aac [_aadb ],_dbcf );_bacd =_gbg (_aac [_aadb ],_aac [_aadb -1],_dbcf );_eefd =_fcge (_aac [_aadb -1],_bacd );if _eefd < _fdg {_cgc ,_fba =_abfg (_cgc ,_fba );
_dbcf =_eefd ;}else {if _d .Abs (float64 (_bacd -_fdg ))> 3{_cgc ,_fba ,_dbcf =_beacb (_aac [_aadb ],_cgc ,_fba ,_dbcf ,_fdg );}else {_cgc ,_fba =_ceb (_cgc ,_fba ,_fdg ,_bacd );_dbcf =_fdg ;};};};_adgf =_eca .appendEncodedRow (_adgf ,_cgc ,_fcg );if _eca .EncodedByteAlign {_fba =0;
};_fcg =_fba %8;};};if _eca .EndOfBlock {_fee ,_ :=_cdd (_fcg );_adgf =_eca .appendEncodedRow (_adgf ,_fee ,_fcg );};return _adgf ;};func _edd (_eaf int )([]byte ,int ){var _fadd []byte ;for _fac :=0;_fac < 2;_fac ++{_fadd ,_eaf =_aded (_fadd ,_eaf ,_fdb );
};return _fadd ,_eaf %8;};func (_cg *Decoder )decodeRowType6 ()error {if _cg ._daf {_cg ._ede .Align ();};if _cg ._ccae {_cg ._ede .Mark ();_cec ,_gde :=_cg .tryFetchEOL ();if _gde !=nil {return _gde ;};if _cec {_cec ,_gde =_cg .tryFetchEOL ();if _gde !=nil {return _gde ;
};if _cec {return _gc .EOF ;};};_cg ._ede .Reset ();};return _cg .decode2D ();};func (_ebb *Encoder )encodeG4 (_gbfe [][]byte )[]byte {_gbee :=make ([][]byte ,len (_gbfe ));copy (_gbee ,_gbfe );_gbee =_aag (_gbee );var _aacd []byte ;var _gaa int ;for _dcd :=1;
_dcd < len (_gbee );_dcd ++{if _ebb .Rows > 0&&!_ebb .EndOfBlock &&_dcd ==(_ebb .Rows +1){break ;};var _faae []byte ;var _fdbff ,_bbbc ,_edge int ;_gef :=_gaa ;_cdcg :=-1;for _cdcg < len (_gbee [_dcd ]){_fdbff =_fcge (_gbee [_dcd ],_cdcg );_bbbc =_gbg (_gbee [_dcd ],_gbee [_dcd -1],_cdcg );
_edge =_fcge (_gbee [_dcd -1],_bbbc );if _edge < _fdbff {_faae ,_gef =_aded (_faae ,_gef ,_aeg );_cdcg =_edge ;}else {if _d .Abs (float64 (_bbbc -_fdbff ))> 3{_faae ,_gef ,_cdcg =_beacb (_gbee [_dcd ],_faae ,_gef ,_cdcg ,_fdbff );}else {_faae ,_gef =_ceb (_faae ,_gef ,_fdbff ,_bbbc );
_cdcg =_fdbff ;};};};_aacd =_ebb .appendEncodedRow (_aacd ,_faae ,_gaa );if _ebb .EncodedByteAlign {_gef =0;};_gaa =_gef %8;};if _ebb .EndOfBlock {_efa ,_ :=_edd (_gaa );_aacd =_ebb .appendEncodedRow (_aacd ,_efa ,_gaa );};return _aacd ;};func _dbda (_ffea ,_gea []byte ,_aea int ,_fde bool )int {_edgf :=_fcge (_gea ,_aea );
if _edgf < len (_gea )&&(_aea ==-1&&_gea [_edgf ]==_bce ||_aea >=0&&_aea < len (_ffea )&&_ffea [_aea ]==_gea [_edgf ]||_aea >=len (_ffea )&&_fde &&_gea [_edgf ]==_bce ||_aea >=len (_ffea )&&!_fde &&_gea [_edgf ]==_gfab ){_edgf =_fcge (_gea ,_edgf );};return _edgf ;
};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_gbe *Decoder )decodeRun (_ebcg *tree )(int ,error ){var _aaa int ;_aab :=_ebcg ._ged ;
for {_cac ,_fcb :=_gbe ._ede .ReadBool ();if _fcb !=nil {return 0,_fcb ;};_aab =_aab .walk (_cac );if _aab ==nil {return 0,_e .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _aab ._gfc {_aaa +=_aab ._cfec ;switch {case _aab ._cfec >=64:_aab =_ebcg ._ged ;case _aab ._cfec >=0:return _aaa ,nil ;default:return _gbe ._add ,nil ;};};};};func (_bgeb *Decoder )fetch ()error {if _bgeb ._gdd ==-1{return nil ;};if _bgeb ._be < _bgeb ._gdd {return nil ;
};_bgeb ._gdd =0;_adg :=_bgeb .decodeRow ();if _adg !=nil {if !_e .Is (_adg ,_gc .EOF ){return _adg ;};if _bgeb ._gdd !=0{return _adg ;};_bgeb ._gdd =-1;};_bgeb ._be =0;return nil ;};const (_ tiffType =iota ;_bbb ;_bf ;_gbf ;);var _fd =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_abd *Decoder )looseFetchEOL ()(bool ,error ){_fad ,_ffgg :=_abd ._ede .ReadBits (12);if _ffgg !=nil {return false ,_ffgg ;};switch _fad {case 0x1:return true ,nil ;case 0x0:for {_gfa ,_bafa :=_abd ._ede .ReadBool ();if _bafa !=nil {return false ,_bafa ;
};if _gfa {return true ,nil ;};};default:return false ,nil ;};};func (_fcbb *tree )fill (_faec ,_ccd ,_cadf int )error {_dbdg :=_fcbb ._ged ;for _fce :=0;_fce < _faec ;_fce ++{_ebbc :=_faec -1-_fce ;_ebbd :=((_ccd >>uint (_ebbc ))&1)!=0;_eddd :=_dbdg .walk (_ebbd );
if _eddd !=nil {if _eddd ._gfc {return _e .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_dbdg =_eddd ;continue ;
};_eddd =&treeNode {};if _fce ==_faec -1{_eddd ._cfec =_cadf ;_eddd ._gfc =true ;};if _ccd ==0{_eddd ._fgb =true ;};_dbdg .set (_ebbd ,_eddd );_dbdg =_eddd ;};return nil ;};var _dd =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
var (_df map[int ]code ;_ca map[int ]code ;_cf map[int ]code ;_de map[int ]code ;_aa map[int ]code ;_ac map[int ]byte ;_fdb =code {Code :1<<4,BitsWritten :12};_ffg =code {Code :3<<3,BitsWritten :13};_ba =code {Code :2<<3,BitsWritten :13};_aeg =code {Code :1<<12,BitsWritten :4};
_ag =code {Code :1<<13,BitsWritten :3};_db =code {Code :1<<15,BitsWritten :1};_af =code {Code :3<<13,BitsWritten :3};_ea =code {Code :3<<10,BitsWritten :6};_cfe =code {Code :3<<9,BitsWritten :7};_dfg =code {Code :2<<13,BitsWritten :3};_ge =code {Code :2<<10,BitsWritten :6};
_fc =code {Code :2<<9,BitsWritten :7};);func (_beg *Encoder )appendEncodedRow (_baac ,_bae []byte ,_cfg int )[]byte {if len (_baac )> 0&&_cfg !=0&&!_beg .EncodedByteAlign {_baac [len (_baac )-1]=_baac [len (_baac )-1]|_bae [0];_baac =append (_baac ,_bae [1:]...);
}else {_baac =append (_baac ,_bae ...);};return _baac ;};type treeNode struct{_feaa *treeNode ;_gdfe *treeNode ;_cfec int ;_fgb bool ;_gfc bool ;};func _gbg (_acg ,_gce []byte ,_eab int )int {_gab :=_fcge (_gce ,_eab );if _gab < len (_gce )&&(_eab ==-1&&_gce [_gab ]==_bce ||_eab >=0&&_eab < len (_acg )&&_acg [_eab ]==_gce [_gab ]||_eab >=len (_acg )&&_acg [_eab -1]!=_gce [_gab ]){_gab =_fcge (_gce ,_gab );
};return _gab ;};func (_gbd *tree )fillWithNode (_gbde ,_bdgf int ,_cfca *treeNode )error {_dadd :=_gbd ._ged ;for _cbce :=0;_cbce < _gbde ;_cbce ++{_gbcf :=uint (_gbde -1-_cbce );_ega :=((_bdgf >>_gbcf )&1)!=0;_cae :=_dadd .walk (_ega );if _cae !=nil {if _cae ._gfc {return _e .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_dadd =_cae ;continue ;};if _cbce ==_gbde -1{_cae =_cfca ;}else {_cae =&treeNode {};};if _bdgf ==0{_cae ._fgb =true ;};_dadd .set (_ega ,_cae );_dadd =_cae ;};return nil ;};func (_acbc *treeNode )set (_cee bool ,_ceff *treeNode ){if !_cee {_acbc ._feaa =_ceff ;
}else {_acbc ._gdfe =_ceff ;};};func _gefe (_gbff []byte ,_ccfa int ,_fgcc int ,_cbgd bool )([]byte ,int ){var (_gdac code ;_aegb bool ;);for !_aegb {_gdac ,_fgcc ,_aegb =_bdg (_fgcc ,_cbgd );_gbff ,_ccfa =_aded (_gbff ,_ccfa ,_gdac );};return _gbff ,_ccfa ;
};func (_ccb *Decoder )decode2D ()error {_ccb ._bfg =_ccb ._gdcb ;_ccb ._geg ,_ccb ._cbg =_ccb ._cbg ,_ccb ._geg ;_ffb :=true ;var (_eec bool ;_fgf int ;_beac error ;);_ccb ._gdcb =0;_bc :for _fgf < _ccb ._add {_agg :=_ed ._ged ;for {_eec ,_beac =_ccb ._ede .ReadBool ();
if _beac !=nil {return _beac ;};_agg =_agg .walk (_eec );if _agg ==nil {continue _bc ;};if !_agg ._gfc {continue ;};switch _agg ._cfec {case _bb :var _gbc int ;if _ffb {_gbc ,_beac =_ccb .decodeRun (_gca );}else {_gbc ,_beac =_ccb .decodeRun (_bg );};if _beac !=nil {return _beac ;
};_fgf +=_gbc ;_ccb ._geg [_ccb ._gdcb ]=_fgf ;_ccb ._gdcb ++;if _ffb {_gbc ,_beac =_ccb .decodeRun (_bg );}else {_gbc ,_beac =_ccb .decodeRun (_gca );};if _beac !=nil {return _beac ;};_fgf +=_gbc ;_ccb ._geg [_ccb ._gdcb ]=_fgf ;_ccb ._gdcb ++;case _eb :_afda :=_ccb .getNextChangingElement (_fgf ,_ffb )+1;
if _afda >=_ccb ._bfg {_fgf =_ccb ._add ;}else {_fgf =_ccb ._cbg [_afda ];};default:_fbg :=_ccb .getNextChangingElement (_fgf ,_ffb );if _fbg >=_ccb ._bfg ||_fbg ==-1{_fgf =_ccb ._add +_agg ._cfec ;}else {_fgf =_ccb ._cbg [_fbg ]+_agg ._cfec ;};_ccb ._geg [_ccb ._gdcb ]=_fgf ;
_ccb ._gdcb ++;_ffb =!_ffb ;};continue _bc ;};};return nil ;};func _edf (_fea []byte ,_fab int ,_cag code )([]byte ,int ){_gcd :=true ;var _cbcf []byte ;_cbcf ,_fab =_aded (nil ,_fab ,_cag );_bec :=0;var _ecf int ;for _bec < len (_fea ){_ecf ,_bec =_beabg (_fea ,_gcd ,_bec );
_cbcf ,_fab =_gefe (_cbcf ,_fab ,_ecf ,_gcd );_gcd =!_gcd ;};return _cbcf ,_fab %8;};func _bdg (_dfd int ,_cgf bool )(code ,int ,bool ){if _dfd < 64{if _cgf {return _ca [_dfd ],0,true ;};return _df [_dfd ],0,true ;};_ggf :=_dfd /64;if _ggf > 40{return _aa [2560],_dfd -2560,false ;
};if _ggf > 27{return _aa [_ggf *64],_dfd -_ggf *64,false ;};if _cgf {return _de [_ggf *64],_dfd -_ggf *64,false ;};return _cf [_ggf *64],_dfd -_ggf *64,false ;};func _aded (_bgde []byte ,_gbce int ,_cad code )([]byte ,int ){_bgaf :=0;for _bgaf < _cad .BitsWritten {_ebeba :=_gbce /8;
_aebb :=_gbce %8;if _ebeba >=len (_bgde ){_bgde =append (_bgde ,0);};_cabf :=8-_aebb ;_eee :=_cad .BitsWritten -_bgaf ;if _cabf > _eee {_cabf =_eee ;};if _bgaf < 8{_bgde [_ebeba ]=_bgde [_ebeba ]|byte (_cad .Code >>uint (8+_aebb -_bgaf ))&_ac [8-_cabf -_aebb ];
}else {_bgde [_ebeba ]=_bgde [_ebeba ]|(byte (_cad .Code <<uint (_bgaf -8))&_ac [8-_cabf ])>>uint (_aebb );};_gbce +=_cabf ;_bgaf +=_cabf ;};return _bgde ,_gbce ;};func _beacb (_acb ,_facf []byte ,_fgcb ,_cgg ,_dfe int )([]byte ,int ,int ){_ffgb :=_fcge (_acb ,_dfe );
_acf :=_cgg >=0&&_acb [_cgg ]==_bce ||_cgg ==-1;_facf ,_fgcb =_aded (_facf ,_fgcb ,_ag );var _fdbb int ;if _cgg > -1{_fdbb =_dfe -_cgg ;}else {_fdbb =_dfe -_cgg -1;};_facf ,_fgcb =_gefe (_facf ,_fgcb ,_fdbb ,_acf );_acf =!_acf ;_abff :=_ffgb -_dfe ;_facf ,_fgcb =_gefe (_facf ,_fgcb ,_abff ,_acf );
_cgg =_ffgb ;return _facf ,_fgcb ,_cgg ;};func _abf (_agb int )([]byte ,int ){var _dgg []byte ;for _dbcc :=0;_dbcc < 6;_dbcc ++{_dgg ,_agb =_aded (_dgg ,_agb ,_fdb );};return _dgg ,_agb %8;};func (_agfg *Encoder )Encode (pixels [][]byte )[]byte {if _agfg .BlackIs1 {_bce =0;
_gfab =1;}else {_bce =1;_gfab =0;};if _agfg .K ==0{return _agfg .encodeG31D (pixels );};if _agfg .K > 0{return _agfg .encodeG32D (pixels );};if _agfg .K < 0{return _agfg .encodeG4 (pixels );};return nil ;};var (_bce byte =1;_gfab byte =0;);type code struct{Code uint16 ;
BitsWritten int ;};func _beabg (_dgc []byte ,_ccff bool ,_deed int )(int ,int ){_aaf :=0;for _deed < len (_dgc ){if _ccff {if _dgc [_deed ]!=_bce {break ;};}else {if _dgc [_deed ]!=_gfab {break ;};};_aaf ++;_deed ++;};return _aaf ,_deed ;};func (_dbd *Decoder )decode1D ()error {var (_dad int ;
_efd error ;);_aeb :=true ;_dbd ._gdcb =0;for {var _dff int ;if _aeb {_dff ,_efd =_dbd .decodeRun (_gca );}else {_dff ,_efd =_dbd .decodeRun (_bg );};if _efd !=nil {return _efd ;};_dad +=_dff ;_dbd ._geg [_dbd ._gdcb ]=_dad ;_dbd ._gdcb ++;_aeb =!_aeb ;
if _dad >=_dbd ._add {break ;};};return nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};type tiffType int ;