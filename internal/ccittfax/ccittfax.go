//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_c "errors";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_e "io";_dd "math";);func _dce (_egf []byte ,_fcb int ,_beeb int ,_def bool )([]byte ,int ){var (_aecf code ;_dae bool ;);for !_dae {_aecf ,_beeb ,_dae =_eeb (_beeb ,_def );
_egf ,_fcb =_fade (_egf ,_fcb ,_aecf );};return _egf ,_fcb ;};func init (){_eg =&treeNode {_acba :true ,_ffe :_cf };_ea =&treeNode {_ffe :_ef ,_bcf :_eg };_ea ._cbce =_ea ;_gef =&tree {_faa :&treeNode {}};if _fe :=_gef .fillWithNode (12,0,_ea );_fe !=nil {panic (_fe .Error ());
};if _fa :=_gef .fillWithNode (12,1,_eg );_fa !=nil {panic (_fa .Error ());};_dde =&tree {_faa :&treeNode {}};for _fc :=0;_fc < len (_ddeg );_fc ++{for _a :=0;_a < len (_ddeg [_fc ]);_a ++{if _b :=_dde .fill (_fc +2,int (_ddeg [_fc ][_a ]),int (_deg [_fc ][_a ]));
_b !=nil {panic (_b .Error ());};};};if _cc :=_dde .fillWithNode (12,0,_ea );_cc !=nil {panic (_cc .Error ());};if _ca :=_dde .fillWithNode (12,1,_eg );_ca !=nil {panic (_ca .Error ());};_ge =&tree {_faa :&treeNode {}};for _db :=0;_db < len (_gf );_db ++{for _fea :=0;
_fea < len (_gf [_db ]);_fea ++{if _bc :=_ge .fill (_db +4,int (_gf [_db ][_fea ]),int (_ag [_db ][_fea ]));_bc !=nil {panic (_bc .Error ());};};};if _ega :=_ge .fillWithNode (12,0,_ea );_ega !=nil {panic (_ega .Error ());};if _cb :=_ge .fillWithNode (12,1,_eg );
_cb !=nil {panic (_cb .Error ());};_da =&tree {_faa :&treeNode {}};if _de :=_da .fill (4,1,_f );_de !=nil {panic (_de .Error ());};if _ae :=_da .fill (3,1,_gg );_ae !=nil {panic (_ae .Error ());};if _bg :=_da .fill (1,1,0);_bg !=nil {panic (_bg .Error ());
};if _df :=_da .fill (3,3,1);_df !=nil {panic (_df .Error ());};if _cac :=_da .fill (6,3,2);_cac !=nil {panic (_cac .Error ());};if _dg :=_da .fill (7,3,3);_dg !=nil {panic (_dg .Error ());};if _ab :=_da .fill (3,2,-1);_ab !=nil {panic (_ab .Error ());
};if _fae :=_da .fill (6,2,-2);_fae !=nil {panic (_fae .Error ());};if _gd :=_da .fill (7,2,-3);_gd !=nil {panic (_gd .Error ());};};var _ag =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_bge *Decoder )tryFetchRTC2D ()(_cfgd error ){_bge ._ffd .Mark ();var _fbb bool ;for _bdb :=0;_bdb < 5;_bdb ++{_fbb ,_cfgd =_bge .tryFetchEOL1 ();if _cfgd !=nil {if _c .Is (_cfgd ,_e .EOF ){if _bdb ==0{break ;};return _bgd ;};};if _fbb {continue ;
};if _bdb > 0{return _bgd ;};break ;};if _fbb {return _e .EOF ;};_bge ._ffd .Reset ();return _cfgd ;};func _ggc (_eed []byte ,_bdbc int )([]byte ,int ){return _fade (_eed ,_bdbc ,_fd )};func (_bad *Decoder )decode2D ()error {_bad ._ccb =_bad ._cce ;_bad ._bea ,_bad ._ac =_bad ._ac ,_bad ._bea ;
_fbed :=true ;var (_ggg bool ;_bgc int ;_egaa error ;);_bad ._cce =0;_gcc :for _bgc < _bad ._gdg {_cdg :=_da ._faa ;for {_ggg ,_egaa =_bad ._ffd .ReadBool ();if _egaa !=nil {return _egaa ;};_cdg =_cdg .walk (_ggg );if _cdg ==nil {continue _gcc ;};if !_cdg ._acba {continue ;
};switch _cdg ._ffe {case _gg :var _acc int ;if _fbed {_acc ,_egaa =_bad .decodeRun (_ge );}else {_acc ,_egaa =_bad .decodeRun (_dde );};if _egaa !=nil {return _egaa ;};_bgc +=_acc ;_bad ._bea [_bad ._cce ]=_bgc ;_bad ._cce ++;if _fbed {_acc ,_egaa =_bad .decodeRun (_dde );
}else {_acc ,_egaa =_bad .decodeRun (_ge );};if _egaa !=nil {return _egaa ;};_bgc +=_acc ;_bad ._bea [_bad ._cce ]=_bgc ;_bad ._cce ++;case _f :_ddea :=_bad .getNextChangingElement (_bgc ,_fbed )+1;if _ddea >=_bad ._ccb {_bgc =_bad ._gdg ;}else {_bgc =_bad ._ac [_ddea ];
};default:_beeg :=_bad .getNextChangingElement (_bgc ,_fbed );if _beeg >=_bad ._ccb ||_beeg ==-1{_bgc =_bad ._gdg +_cdg ._ffe ;}else {_bgc =_bad ._ac [_beeg ]+_cdg ._ffe ;};_bad ._bea [_bad ._cce ]=_bgc ;_bad ._cce ++;_fbed =!_fbed ;};continue _gcc ;};
};return nil ;};func _bbc (_efc [][]byte )[][]byte {_feb :=make ([]byte ,len (_efc [0]));for _egda :=range _feb {_feb [_egda ]=_bcb ;};_efc =append (_efc ,[]byte {});for _fdef :=len (_efc )-1;_fdef > 0;_fdef --{_efc [_fdef ]=_efc [_fdef -1];};_efc [0]=_feb ;
return _efc ;};func (_gc *Decoder )decode1D ()error {var (_facc int ;_cddc error ;);_ged :=true ;_gc ._cce =0;for {var _ee int ;if _ged {_ee ,_cddc =_gc .decodeRun (_ge );}else {_ee ,_cddc =_gc .decodeRun (_dde );};if _cddc !=nil {return _cddc ;};_facc +=_ee ;
_gc ._bea [_gc ._cce ]=_facc ;_gc ._cce ++;_ged =!_ged ;if _facc >=_gc ._gdg {break ;};};return nil ;};func init (){_ad =make (map[int ]code );_ad [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ad [1]=code {Code :2<<(5+8),BitsWritten :3};_ad [2]=code {Code :3<<(6+8),BitsWritten :2};
_ad [3]=code {Code :2<<(6+8),BitsWritten :2};_ad [4]=code {Code :3<<(5+8),BitsWritten :3};_ad [5]=code {Code :3<<(4+8),BitsWritten :4};_ad [6]=code {Code :2<<(4+8),BitsWritten :4};_ad [7]=code {Code :3<<(3+8),BitsWritten :5};_ad [8]=code {Code :5<<(2+8),BitsWritten :6};
_ad [9]=code {Code :4<<(2+8),BitsWritten :6};_ad [10]=code {Code :4<<(1+8),BitsWritten :7};_ad [11]=code {Code :5<<(1+8),BitsWritten :7};_ad [12]=code {Code :7<<(1+8),BitsWritten :7};_ad [13]=code {Code :4<<8,BitsWritten :8};_ad [14]=code {Code :7<<8,BitsWritten :8};
_ad [15]=code {Code :12<<8,BitsWritten :9};_ad [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ad [17]=code {Code :6<<8,BitsWritten :10};_ad [18]=code {Code :2<<8,BitsWritten :10};_ad [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ad [20]=code {Code :13<<8,BitsWritten :11};
_ad [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ad [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ad [23]=code {Code :5<<8,BitsWritten :11};_ad [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ad [25]=code {Code :3<<8,BitsWritten :11};_ad [26]=code {Code :12<<8|10<<4,BitsWritten :12};
_ad [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ad [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ad [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ad [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ad [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ad [32]=code {Code :6<<8|10<<4,BitsWritten :12};
_ad [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ad [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ad [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ad [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ad [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ad [38]=code {Code :13<<8|6<<4,BitsWritten :12};
_ad [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ad [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ad [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ad [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ad [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ad [44]=code {Code :5<<8|4<<4,BitsWritten :12};
_ad [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ad [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ad [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ad [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ad [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ad [50]=code {Code :5<<8|2<<4,BitsWritten :12};
_ad [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ad [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ad [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ad [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ad [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ad [56]=code {Code :2<<8|8<<4,BitsWritten :12};
_ad [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ad [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ad [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ad [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ad [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ad [62]=code {Code :6<<8|6<<4,BitsWritten :12};
_ad [63]=code {Code :6<<8|7<<4,BitsWritten :12};_bf =make (map[int ]code );_bf [0]=code {Code :53<<8,BitsWritten :8};_bf [1]=code {Code :7<<(2+8),BitsWritten :6};_bf [2]=code {Code :7<<(4+8),BitsWritten :4};_bf [3]=code {Code :8<<(4+8),BitsWritten :4};
_bf [4]=code {Code :11<<(4+8),BitsWritten :4};_bf [5]=code {Code :12<<(4+8),BitsWritten :4};_bf [6]=code {Code :14<<(4+8),BitsWritten :4};_bf [7]=code {Code :15<<(4+8),BitsWritten :4};_bf [8]=code {Code :19<<(3+8),BitsWritten :5};_bf [9]=code {Code :20<<(3+8),BitsWritten :5};
_bf [10]=code {Code :7<<(3+8),BitsWritten :5};_bf [11]=code {Code :8<<(3+8),BitsWritten :5};_bf [12]=code {Code :8<<(2+8),BitsWritten :6};_bf [13]=code {Code :3<<(2+8),BitsWritten :6};_bf [14]=code {Code :52<<(2+8),BitsWritten :6};_bf [15]=code {Code :53<<(2+8),BitsWritten :6};
_bf [16]=code {Code :42<<(2+8),BitsWritten :6};_bf [17]=code {Code :43<<(2+8),BitsWritten :6};_bf [18]=code {Code :39<<(1+8),BitsWritten :7};_bf [19]=code {Code :12<<(1+8),BitsWritten :7};_bf [20]=code {Code :8<<(1+8),BitsWritten :7};_bf [21]=code {Code :23<<(1+8),BitsWritten :7};
_bf [22]=code {Code :3<<(1+8),BitsWritten :7};_bf [23]=code {Code :4<<(1+8),BitsWritten :7};_bf [24]=code {Code :40<<(1+8),BitsWritten :7};_bf [25]=code {Code :43<<(1+8),BitsWritten :7};_bf [26]=code {Code :19<<(1+8),BitsWritten :7};_bf [27]=code {Code :36<<(1+8),BitsWritten :7};
_bf [28]=code {Code :24<<(1+8),BitsWritten :7};_bf [29]=code {Code :2<<8,BitsWritten :8};_bf [30]=code {Code :3<<8,BitsWritten :8};_bf [31]=code {Code :26<<8,BitsWritten :8};_bf [32]=code {Code :27<<8,BitsWritten :8};_bf [33]=code {Code :18<<8,BitsWritten :8};
_bf [34]=code {Code :19<<8,BitsWritten :8};_bf [35]=code {Code :20<<8,BitsWritten :8};_bf [36]=code {Code :21<<8,BitsWritten :8};_bf [37]=code {Code :22<<8,BitsWritten :8};_bf [38]=code {Code :23<<8,BitsWritten :8};_bf [39]=code {Code :40<<8,BitsWritten :8};
_bf [40]=code {Code :41<<8,BitsWritten :8};_bf [41]=code {Code :42<<8,BitsWritten :8};_bf [42]=code {Code :43<<8,BitsWritten :8};_bf [43]=code {Code :44<<8,BitsWritten :8};_bf [44]=code {Code :45<<8,BitsWritten :8};_bf [45]=code {Code :4<<8,BitsWritten :8};
_bf [46]=code {Code :5<<8,BitsWritten :8};_bf [47]=code {Code :10<<8,BitsWritten :8};_bf [48]=code {Code :11<<8,BitsWritten :8};_bf [49]=code {Code :82<<8,BitsWritten :8};_bf [50]=code {Code :83<<8,BitsWritten :8};_bf [51]=code {Code :84<<8,BitsWritten :8};
_bf [52]=code {Code :85<<8,BitsWritten :8};_bf [53]=code {Code :36<<8,BitsWritten :8};_bf [54]=code {Code :37<<8,BitsWritten :8};_bf [55]=code {Code :88<<8,BitsWritten :8};_bf [56]=code {Code :89<<8,BitsWritten :8};_bf [57]=code {Code :90<<8,BitsWritten :8};
_bf [58]=code {Code :91<<8,BitsWritten :8};_bf [59]=code {Code :74<<8,BitsWritten :8};_bf [60]=code {Code :75<<8,BitsWritten :8};_bf [61]=code {Code :50<<8,BitsWritten :8};_bf [62]=code {Code :51<<8,BitsWritten :8};_bf [63]=code {Code :52<<8,BitsWritten :8};
_ga =make (map[int ]code );_ga [64]=code {Code :3<<8|3<<6,BitsWritten :10};_ga [128]=code {Code :12<<8|8<<4,BitsWritten :12};_ga [192]=code {Code :12<<8|9<<4,BitsWritten :12};_ga [256]=code {Code :5<<8|11<<4,BitsWritten :12};_ga [320]=code {Code :3<<8|3<<4,BitsWritten :12};
_ga [384]=code {Code :3<<8|4<<4,BitsWritten :12};_ga [448]=code {Code :3<<8|5<<4,BitsWritten :12};_ga [512]=code {Code :3<<8|12<<3,BitsWritten :13};_ga [576]=code {Code :3<<8|13<<3,BitsWritten :13};_ga [640]=code {Code :2<<8|10<<3,BitsWritten :13};_ga [704]=code {Code :2<<8|11<<3,BitsWritten :13};
_ga [768]=code {Code :2<<8|12<<3,BitsWritten :13};_ga [832]=code {Code :2<<8|13<<3,BitsWritten :13};_ga [896]=code {Code :3<<8|18<<3,BitsWritten :13};_ga [960]=code {Code :3<<8|19<<3,BitsWritten :13};_ga [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_ga [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_ga [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_ga [1216]=code {Code :119<<3,BitsWritten :13};_ga [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_ga [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_ga [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_ga [1472]=code {Code :2<<8|21<<3,BitsWritten :13};
_ga [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_ga [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_ga [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_ga [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_agg =make (map[int ]code );_agg [64]=code {Code :27<<(3+8),BitsWritten :5};
_agg [128]=code {Code :18<<(3+8),BitsWritten :5};_agg [192]=code {Code :23<<(2+8),BitsWritten :6};_agg [256]=code {Code :55<<(1+8),BitsWritten :7};_agg [320]=code {Code :54<<8,BitsWritten :8};_agg [384]=code {Code :55<<8,BitsWritten :8};_agg [448]=code {Code :100<<8,BitsWritten :8};
_agg [512]=code {Code :101<<8,BitsWritten :8};_agg [576]=code {Code :104<<8,BitsWritten :8};_agg [640]=code {Code :103<<8,BitsWritten :8};_agg [704]=code {Code :102<<8,BitsWritten :9};_agg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_agg [832]=code {Code :105<<8,BitsWritten :9};
_agg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_agg [960]=code {Code :106<<8,BitsWritten :9};_agg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_agg [1088]=code {Code :107<<8,BitsWritten :9};_agg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_agg [1216]=code {Code :108<<8,BitsWritten :9};
_agg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_agg [1344]=code {Code :109<<8,BitsWritten :9};_agg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_agg [1472]=code {Code :76<<8,BitsWritten :9};_agg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_agg [1600]=code {Code :77<<8,BitsWritten :9};
_agg [1664]=code {Code :24<<(2+8),BitsWritten :6};_agg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bfe =make (map[int ]code );_bfe [1792]=code {Code :1<<8,BitsWritten :11};_bfe [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bfe [1920]=code {Code :1<<8|5<<5,BitsWritten :11};
_bfe [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_bfe [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bfe [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_bfe [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bfe [2240]=code {Code :1<<8|6<<4,BitsWritten :12};
_bfe [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_bfe [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bfe [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_bfe [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bfe [2560]=code {Code :1<<8|15<<4,BitsWritten :12};
_gdd =make (map[int ]byte );_gdd [0]=0xFF;_gdd [1]=0xFE;_gdd [2]=0xFC;_gdd [3]=0xF8;_gdd [4]=0xF0;_gdd [5]=0xE0;_gdd [6]=0xC0;_gdd [7]=0x80;_gdd [8]=0x00;};func _ce (_efbe []byte ,_gag int ,_ggbcg code )([]byte ,int ){_gga :=true ;var _bfce []byte ;_bfce ,_gag =_fade (nil ,_gag ,_ggbcg );
_eaa :=0;var _dfcd int ;for _eaa < len (_efbe ){_dfcd ,_eaa =_dfg (_efbe ,_gga ,_eaa );_bfce ,_gag =_dce (_bfce ,_gag ,_dfcd ,_gga );_gga =!_gga ;};return _bfce ,_gag %8;};func (_facf *Decoder )tryFetchEOL1 ()(bool ,error ){_dbee ,_egd :=_facf ._ffd .ReadBits (13);
if _egd !=nil {return false ,_egd ;};return _dbee ==0x3,nil ;};func (_bgdb *Encoder )encodeG32D (_dfad [][]byte )[]byte {var _cfe []byte ;var _dfcb int ;for _effd :=0;_effd < len (_dfad );_effd +=_bgdb .K {if _bgdb .Rows > 0&&!_bgdb .EndOfBlock &&_effd ==_bgdb .Rows {break ;
};_gda ,_dag :=_ce (_dfad [_effd ],_dfcb ,_bfg );_cfe =_bgdb .appendEncodedRow (_cfe ,_gda ,_dfcb );if _bgdb .EncodedByteAlign {_dag =0;};_dfcb =_dag ;for _cgb :=_effd +1;_cgb < (_effd +_bgdb .K )&&_cgb < len (_dfad );_cgb ++{if _bgdb .Rows > 0&&!_bgdb .EndOfBlock &&_cgb ==_bgdb .Rows {break ;
};_deb ,_bab :=_fade (nil ,_dfcb ,_bgf );var _fdbd ,_fcf ,_bgda int ;_edc :=-1;for _edc < len (_dfad [_cgb ]){_fdbd =_debe (_dfad [_cgb ],_edc );_fcf =_ceb (_dfad [_cgb ],_dfad [_cgb -1],_edc );_bgda =_debe (_dfad [_cgb -1],_fcf );if _bgda < _fdbd {_deb ,_bab =_ggc (_deb ,_bab );
_edc =_bgda ;}else {if _dd .Abs (float64 (_fcf -_fdbd ))> 3{_deb ,_bab ,_edc =_gfa (_dfad [_cgb ],_deb ,_bab ,_edc ,_fdbd );}else {_deb ,_bab =_eacg (_deb ,_bab ,_fdbd ,_fcf );_edc =_fdbd ;};};};_cfe =_bgdb .appendEncodedRow (_cfe ,_deb ,_dfcb );if _bgdb .EncodedByteAlign {_bab =0;
};_dfcb =_bab %8;};};if _bgdb .EndOfBlock {_fgc ,_ :=_ggf (_dfcb );_cfe =_bgdb .appendEncodedRow (_cfe ,_fgc ,_dfcb );};return _cfe ;};func (_dcf *Decoder )decodeRowType6 ()error {if _dcf ._bee {_dcf ._ffd .Align ();};if _dcf ._fdc {_dcf ._ffd .Mark ();
_acd ,_fca :=_dcf .tryFetchEOL ();if _fca !=nil {return _fca ;};if _acd {_acd ,_fca =_dcf .tryFetchEOL ();if _fca !=nil {return _fca ;};if _acd {return _e .EOF ;};};_dcf ._ffd .Reset ();};return _dcf .decode2D ();};type DecodeOptions struct{Columns int ;
Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};var (_ad map[int ]code ;_bf map[int ]code ;_ga map[int ]code ;_agg map[int ]code ;_bfe map[int ]code ;_gdd map[int ]byte ;_gb =code {Code :1<<4,BitsWritten :12};
_bfg =code {Code :3<<3,BitsWritten :13};_bgf =code {Code :2<<3,BitsWritten :13};_fd =code {Code :1<<12,BitsWritten :4};_cbb =code {Code :1<<13,BitsWritten :3};_be =code {Code :1<<15,BitsWritten :1};_cab =code {Code :3<<13,BitsWritten :3};_dea =code {Code :3<<10,BitsWritten :6};
_ba =code {Code :3<<9,BitsWritten :7};_dfc =code {Code :2<<13,BitsWritten :3};_dda =code {Code :2<<10,BitsWritten :6};_fed =code {Code :2<<9,BitsWritten :7};);var _ddeg =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_abc *Decoder )tryFetchEOL ()(bool ,error ){_adbe ,_aa :=_abc ._ffd .ReadBits (12);if _aa !=nil {return false ,_aa ;};return _adbe ==0x1,nil ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;
BlackIs1 bool ;DamagedRowsBeforeError int ;};func _eeb (_efa int ,_dcee bool )(code ,int ,bool ){if _efa < 64{if _dcee {return _bf [_efa ],0,true ;};return _ad [_efa ],0,true ;};_aee :=_efa /64;if _aee > 40{return _bfe [2560],_efa -2560,false ;};if _aee > 27{return _bfe [_aee *64],_efa -_aee *64,false ;
};if _dcee {return _agg [_aee *64],_efa -_aee *64,false ;};return _ga [_aee *64],_efa -_aee *64,false ;};func (_abfg *tree )fillWithNode (_efeg ,_bca int ,_gbff *treeNode )error {_acbe :=_abfg ._faa ;for _ecg :=0;_ecg < _efeg ;_ecg ++{_geb :=uint (_efeg -1-_ecg );
_egff :=((_bca >>_geb )&1)!=0;_cfb :=_acbe .walk (_egff );if _cfb !=nil {if _cfb ._acba {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_acbe =_cfb ;continue ;};if _ecg ==_efeg -1{_cfb =_gbff ;}else {_cfb =&treeNode {};};if _bca ==0{_cfb ._cbbf =true ;};_acbe .set (_egff ,_cfb );_acbe =_cfb ;};return nil ;};func (_gaff *Encoder )Encode (pixels [][]byte )[]byte {if _gaff .BlackIs1 {_bcb =0;
_eggd =1;}else {_bcb =1;_eggd =0;};if _gaff .K ==0{return _gaff .encodeG31D (pixels );};if _gaff .K > 0{return _gaff .encodeG32D (pixels );};if _gaff .K < 0{return _gaff .encodeG4 (pixels );};return nil ;};func _dbd (_fda int )([]byte ,int ){var _dgd []byte ;
for _afd :=0;_afd < 6;_afd ++{_dgd ,_fda =_fade (_dgd ,_fda ,_gb );};return _dgd ,_fda %8;};func (_fdg *Decoder )decoderRowType41D ()error {if _fdg ._bee {_fdg ._ffd .Align ();};_fdg ._ffd .Mark ();_beg ,_adb :=_fdg .tryFetchEOL ();if _adb !=nil {return _adb ;
};if !_beg &&_fdg ._fac {return _dfd ;};if !_beg {_fdg ._ffd .Reset ();};if _beg &&_fdg ._fdc {_fdg ._ffd .Mark ();for _gbf :=0;_gbf < 5;_gbf ++{_beg ,_adb =_fdg .tryFetchEOL ();if _adb !=nil {if _c .Is (_adb ,_e .EOF ){if _gbf ==0{break ;};return _bgd ;
};};if _beg {continue ;};if _gbf > 0{return _bgd ;};break ;};if _beg {return _e .EOF ;};_fdg ._ffd .Reset ();};if _adb =_fdg .decode1D ();_adb !=nil {return _adb ;};return nil ;};type Decoder struct{_gdg int ;_fee int ;_bd int ;_aed []byte ;_dee int ;_dbf bool ;
_ded bool ;_fag bool ;_gde bool ;_fac bool ;_fdc bool ;_bee bool ;_aec int ;_fb int ;_ac []int ;_bea []int ;_ccb int ;_cce int ;_dbea int ;_bb int ;_ffd *_g .Reader ;_ed tiffType ;_daa error ;};type tiffType int ;func (_deeg *Encoder )encodeG31D (_cbe [][]byte )[]byte {var _faeg []byte ;
_ddag :=0;for _gbb :=range _cbe {if _deeg .Rows > 0&&!_deeg .EndOfBlock &&_gbb ==_deeg .Rows {break ;};_aga ,_bbg :=_ce (_cbe [_gbb ],_ddag ,_gb );_faeg =_deeg .appendEncodedRow (_faeg ,_aga ,_ddag );if _deeg .EncodedByteAlign {_bbg =0;};_ddag =_bbg ;};
if _deeg .EndOfBlock {_eb ,_ :=_dbd (_ddag );_faeg =_deeg .appendEncodedRow (_faeg ,_eb ,_ddag );};return _faeg ;};func _eacg (_ddcd []byte ,_cced ,_caca ,_abee int )([]byte ,int ){_badg :=_gbfb (_caca ,_abee );_ddcd ,_cced =_fade (_ddcd ,_cced ,_badg );
return _ddcd ,_cced ;};func _dfg (_fdd []byte ,_bfeb bool ,_ddg int )(int ,int ){_dgeg :=0;for _ddg < len (_fdd ){if _bfeb {if _fdd [_ddg ]!=_bcb {break ;};}else {if _fdd [_ddg ]!=_eggd {break ;};};_dgeg ++;_ddg ++;};return _dgeg ,_ddg ;};func _ggf (_aad int )([]byte ,int ){var _dff []byte ;
for _ddc :=0;_ddc < 6;_ddc ++{_dff ,_aad =_fade (_dff ,_aad ,_bfg );};return _dff ,_aad %8;};func (_acb *Decoder )decodeRow ()(_fbe error ){if !_acb ._fdc &&_acb ._fee > 0&&_acb ._fee ==_acb ._bd {return _e .EOF ;};switch _acb ._ed {case _fg :_fbe =_acb .decodeRowType2 ();
case _ggb :_fbe =_acb .decodeRowType4 ();case _dba :_fbe =_acb .decodeRowType6 ();};if _fbe !=nil {return _fbe ;};_gdb :=0;_dc :=true ;_acb ._bb =0;for _bdg :=0;_bdg < _acb ._cce ;_bdg ++{_add :=_acb ._gdg ;if _bdg !=_acb ._cce {_add =_acb ._bea [_bdg ];
};if _add > _acb ._gdg {_add =_acb ._gdg ;};_cbcd :=_gdb /8;for _gdb %8!=0&&_add -_gdb > 0{var _bcc byte ;if !_dc {_bcc =1<<uint (7-(_gdb %8));};_acb ._aed [_cbcd ]|=_bcc ;_gdb ++;};if _gdb %8==0{_cbcd =_gdb /8;var _eae byte ;if !_dc {_eae =0xff;};for _add -_gdb > 7{_acb ._aed [_cbcd ]=_eae ;
_gdb +=8;_cbcd ++;};};for _add -_gdb > 0{if _gdb %8==0{_acb ._aed [_cbcd ]=0;};var _acbb byte ;if !_dc {_acbb =1<<uint (7-(_gdb %8));};_acb ._aed [_cbcd ]|=_acbb ;_gdb ++;};_dc =!_dc ;};if _gdb !=_acb ._gdg {return _c .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_acb ._aec =(_gdb +7)/8;_acb ._bd ++;return nil ;};var (_bcb byte =1;_eggd byte =0;);func (_fdcd *Encoder )appendEncodedRow (_edg ,_cba []byte ,_ddaf int )[]byte {if len (_edg )> 0&&_ddaf !=0&&!_fdcd .EncodedByteAlign {_edg [len (_edg )-1]=_edg [len (_edg )-1]|_cba [0];
_edg =append (_edg ,_cba [1:]...);}else {_edg =append (_edg ,_cba ...);};return _edg ;};func _gfa (_eebd ,_agec []byte ,_agd ,_eedf ,_feda int )([]byte ,int ,int ){_beac :=_debe (_eebd ,_feda );_egge :=_eedf >=0&&_eebd [_eedf ]==_bcb ||_eedf ==-1;_agec ,_agd =_fade (_agec ,_agd ,_cbb );
var _edb int ;if _eedf > -1{_edb =_feda -_eedf ;}else {_edb =_feda -_eedf -1;};_agec ,_agd =_dce (_agec ,_agd ,_edb ,_egge );_egge =!_egge ;_ccf :=_beac -_feda ;_agec ,_agd =_dce (_agec ,_agd ,_ccf ,_egge );_eedf =_beac ;return _agec ,_agd ,_eedf ;};type tree struct{_faa *treeNode };
func (_cdd *Decoder )fetch ()error {if _cdd ._aec ==-1{return nil ;};if _cdd ._fb < _cdd ._aec {return nil ;};_cdd ._aec =0;_fad :=_cdd .decodeRow ();if _fad !=nil {if !_c .Is (_fad ,_e .EOF ){return _fad ;};if _cdd ._aec !=0{return _fad ;};_cdd ._aec =-1;
};_cdd ._fb =0;return nil ;};func (_cbd *Decoder )decodeRowType4 ()error {if !_cbd ._dbf {return _cbd .decoderRowType41D ();};if _cbd ._bee {_cbd ._ffd .Align ();};_cbd ._ffd .Mark ();_cg ,_aca :=_cbd .tryFetchEOL ();if _aca !=nil {return _aca ;};if !_cg &&_cbd ._fac {_cbd ._dbea ++;
if _cbd ._dbea > _cbd ._dee {return _dfd ;};_cbd ._ffd .Reset ();};if !_cg {_cbd ._ffd .Reset ();};_beb ,_aca :=_cbd ._ffd .ReadBool ();if _aca !=nil {return _aca ;};if _beb {if _cg &&_cbd ._fdc {if _aca =_cbd .tryFetchRTC2D ();_aca !=nil {return _aca ;
};};_aca =_cbd .decode1D ();}else {_aca =_cbd .decode2D ();};if _aca !=nil {return _aca ;};return nil ;};var (_eg *treeNode ;_ea *treeNode ;_dde *tree ;_ge *tree ;_gef *tree ;_da *tree ;_cf =-2000;_ef =-1000;_f =-3000;_gg =-4000;);func _debe (_bgb []byte ,_ccbe int )int {if _ccbe >=len (_bgb ){return _ccbe ;
};if _ccbe < -1{_ccbe =-1;};var _dgdb byte ;if _ccbe > -1{_dgdb =_bgb [_ccbe ];}else {_dgdb =_bcb ;};_fagd :=_ccbe +1;for _fagd < len (_bgb ){if _bgb [_fagd ]!=_dgdb {break ;};_fagd ++;};return _fagd ;};func _gbfb (_bef ,_egc int )code {var _gac code ;
switch _egc -_bef {case -1:_gac =_cab ;case -2:_gac =_dea ;case -3:_gac =_ba ;case 0:_gac =_be ;case 1:_gac =_dfc ;case 2:_gac =_dda ;case 3:_gac =_fed ;};return _gac ;};func (_ffb *Decoder )decodeG32D ()error {_ffb ._ccb =_ffb ._cce ;_ffb ._bea ,_ffb ._ac =_ffb ._ac ,_ffb ._bea ;
_fdcg :=true ;var (_ddb bool ;_cbdg int ;_dfa error ;);_ffb ._cce =0;_age :for _cbdg < _ffb ._gdg {_dbfe :=_da ._faa ;for {_ddb ,_dfa =_ffb ._ffd .ReadBool ();if _dfa !=nil {return _dfa ;};_dbfe =_dbfe .walk (_ddb );if _dbfe ==nil {continue _age ;};if !_dbfe ._acba {continue ;
};switch _dbfe ._ffe {case _gg :var _bgg int ;if _fdcg {_bgg ,_dfa =_ffb .decodeRun (_ge );}else {_bgg ,_dfa =_ffb .decodeRun (_dde );};if _dfa !=nil {return _dfa ;};_cbdg +=_bgg ;_ffb ._bea [_ffb ._cce ]=_cbdg ;_ffb ._cce ++;if _fdcg {_bgg ,_dfa =_ffb .decodeRun (_dde );
}else {_bgg ,_dfa =_ffb .decodeRun (_ge );};if _dfa !=nil {return _dfa ;};_cbdg +=_bgg ;_ffb ._bea [_ffb ._cce ]=_cbdg ;_ffb ._cce ++;case _f :_gee :=_ffb .getNextChangingElement (_cbdg ,_fdcg )+1;if _gee >=_ffb ._ccb {_cbdg =_ffb ._gdg ;}else {_cbdg =_ffb ._ac [_gee ];
};default:_dab :=_ffb .getNextChangingElement (_cbdg ,_fdcg );if _dab >=_ffb ._ccb ||_dab ==-1{_cbdg =_ffb ._gdg +_dbfe ._ffe ;}else {_cbdg =_ffb ._ac [_dab ]+_dbfe ._ffe ;};_ffb ._bea [_ffb ._cce ]=_cbdg ;_ffb ._cce ++;_fdcg =!_fdcg ;};continue _age ;
};};return nil ;};func (_cbc *Decoder )Read (in []byte )(int ,error ){if _cbc ._daa !=nil {return 0,_cbc ._daa ;};_bfc :=len (in );var (_af int ;_cd int ;);for _bfc !=0{if _cbc ._fb >=_cbc ._aec {if _egg :=_cbc .fetch ();_egg !=nil {_cbc ._daa =_egg ;return 0,_egg ;
};};if _cbc ._aec ==-1{return _af ,_e .EOF ;};switch {case _bfc <=_cbc ._aec -_cbc ._fb :_fdb :=_cbc ._aed [_cbc ._fb :_cbc ._fb +_bfc ];for _ ,_gfe :=range _fdb {if !_cbc ._gde {_gfe =^_gfe ;};in [_cd ]=_gfe ;_cd ++;};_af +=len (_fdb );_cbc ._fb +=len (_fdb );
return _af ,nil ;default:_gfg :=_cbc ._aed [_cbc ._fb :];for _ ,_fdbf :=range _gfg {if !_cbc ._gde {_fdbf =^_fdbf ;};in [_cd ]=_fdbf ;_cd ++;};_af +=len (_gfg );_cbc ._fb +=len (_gfg );_bfc -=len (_gfg );};};return _af ,nil ;};type code struct{Code uint16 ;
BitsWritten int ;};func _gafe (_abf int )([]byte ,int ){var _efed []byte ;for _bdgg :=0;_bdgg < 2;_bdgg ++{_efed ,_abf =_fade (_efed ,_abf ,_gb );};return _efed ,_abf %8;};var _deg =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_gfeg *treeNode )set (_cea bool ,_bccf *treeNode ){if !_cea {_gfeg ._cbce =_bccf ;}else {_gfeg ._bcf =_bccf ;};};var _gf =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_ec *Decoder )decodeRun (_ecc *tree )(int ,error ){var _ecb int ;_cddg :=_ecc ._faa ;for {_ddad ,_dabe :=_ec ._ffd .ReadBool ();if _dabe !=nil {return 0,_dabe ;};_cddg =_cddg .walk (_ddad );if _cddg ==nil {return 0,_c .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _cddg ._acba {_ecb +=_cddg ._ffe ;switch {case _cddg ._ffe >=64:_cddg =_ecc ._faa ;case _cddg ._ffe >=0:return _ecb ,nil ;default:return _ec ._gdg ,nil ;};};};};func (_efab *treeNode )walk (_daad bool )*treeNode {if _daad {return _efab ._bcf ;};return _efab ._cbce ;
};func _eac (_dabeg ,_gab []byte ,_bde int ,_dabf bool )int {_cgf :=_debe (_gab ,_bde );if _cgf < len (_gab )&&(_bde ==-1&&_gab [_cgf ]==_bcb ||_bde >=0&&_bde < len (_dabeg )&&_dabeg [_bde ]==_gab [_cgf ]||_bde >=len (_dabeg )&&_dabf &&_gab [_cgf ]==_bcb ||_bde >=len (_dabeg )&&!_dabf &&_gab [_cgf ]==_eggd ){_cgf =_debe (_gab ,_cgf );
};return _cgf ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_fgb :=&Decoder {_ffd :_g .NewReader (data ),_gdg :options .Columns ,_fee :options .Rows ,_dee :options .DamagedRowsBeforeError ,_aed :make ([]byte ,(options .Columns +7)/8),_ac :make ([]int ,options .Columns +2),_bea :make ([]int ,options .Columns +2),_bee :options .EncodedByteAligned ,_gde :options .BlackIsOne ,_fac :options .EndOfLine ,_fdc :options .EndOfBlock };
switch {case options .K ==0:_fgb ._ed =_ggb ;if len (data )< 20{return nil ,_c .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_dgea :=data [:20];if _dgea [0]!=0||(_dgea [1]>>4!=1&&_dgea [1]!=1){_fgb ._ed =_fg ;
_efe :=(uint16 (_dgea [0])<<8+uint16 (_dgea [1]&0xff))>>4;for _efb :=12;_efb < 160;_efb ++{_efe =(_efe <<1)+uint16 ((_dgea [_efb /8]>>uint16 (7-(_efb %8)))&0x01);if _efe &0xfff==1{_fgb ._ed =_ggb ;break ;};};};case options .K < 0:_fgb ._ed =_dba ;case options .K > 0:_fgb ._ed =_ggb ;
_fgb ._dbf =true ;};switch _fgb ._ed {case _fg ,_ggb ,_dba :default:return nil ,_c .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _fgb ,nil ;};type treeNode struct{_cbce *treeNode ;_bcf *treeNode ;_ffe int ;_cbbf bool ;_acba bool ;};func (_gdc *Encoder )encodeG4 (_fbd [][]byte )[]byte {_fbdc :=make ([][]byte ,len (_fbd ));copy (_fbdc ,_fbd );_fbdc =_bbc (_fbdc );var _agf []byte ;
var _bfa int ;for _edd :=1;_edd < len (_fbdc );_edd ++{if _gdc .Rows > 0&&!_gdc .EndOfBlock &&_edd ==(_gdc .Rows +1){break ;};var _dad []byte ;var _cag ,_beba ,_ggbc int ;_abe :=_bfa ;_aac :=-1;for _aac < len (_fbdc [_edd ]){_cag =_debe (_fbdc [_edd ],_aac );
_beba =_ceb (_fbdc [_edd ],_fbdc [_edd -1],_aac );_ggbc =_debe (_fbdc [_edd -1],_beba );if _ggbc < _cag {_dad ,_abe =_fade (_dad ,_abe ,_fd );_aac =_ggbc ;}else {if _dd .Abs (float64 (_beba -_cag ))> 3{_dad ,_abe ,_aac =_gfa (_fbdc [_edd ],_dad ,_abe ,_aac ,_cag );
}else {_dad ,_abe =_eacg (_dad ,_abe ,_cag ,_beba );_aac =_cag ;};};};_agf =_gdc .appendEncodedRow (_agf ,_dad ,_bfa );if _gdc .EncodedByteAlign {_abe =0;};_bfa =_abe %8;};if _gdc .EndOfBlock {_ddd ,_ :=_gafe (_bfa );_agf =_gdc .appendEncodedRow (_agf ,_ddd ,_bfa );
};return _agf ;};var (_bgd =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_dfd =_c .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_gaf *Decoder )getNextChangingElement (_dfe int ,_cfg bool )int {_cae :=0;if !_cfg {_cae =1;};_bdc :=int (uint32 (_gaf ._bb )&0xFFFFFFFE)+_cae ;if _bdc > 2{_bdc -=2;};if _dfe ==0{return _bdc ;};for _dfeb :=_bdc ;_dfeb < _gaf ._ccb ;_dfeb +=2{if _dfe < _gaf ._ac [_dfeb ]{_gaf ._bb =_dfeb ;
return _dfeb ;};};return -1;};func (_eff *Decoder )decodeRowType2 ()error {if _eff ._bee {_eff ._ffd .Align ();};if _adg :=_eff .decode1D ();_adg !=nil {return _adg ;};return nil ;};func (_dbe tiffType )String ()string {switch _dbe {case _fg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _ggb :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _dba :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _ceb (_ccc ,_adf []byte ,_aeed int )int {_fef :=_debe (_adf ,_aeed );
if _fef < len (_adf )&&(_aeed ==-1&&_adf [_fef ]==_bcb ||_aeed >=0&&_aeed < len (_ccc )&&_ccc [_aeed ]==_adf [_fef ]||_aeed >=len (_ccc )&&_ccc [_aeed -1]!=_adf [_fef ]){_fef =_debe (_adf ,_fef );};return _fef ;};func _fade (_ggd []byte ,_baff int ,_bgdg code )([]byte ,int ){_bfd :=0;
for _bfd < _bgdg .BitsWritten {_cbg :=_baff /8;_ceg :=_baff %8;if _cbg >=len (_ggd ){_ggd =append (_ggd ,0);};_fbf :=8-_ceg ;_acbbb :=_bgdg .BitsWritten -_bfd ;if _fbf > _acbbb {_fbf =_acbbb ;};if _bfd < 8{_ggd [_cbg ]=_ggd [_cbg ]|byte (_bgdg .Code >>uint (8+_ceg -_bfd ))&_gdd [8-_fbf -_ceg ];
}else {_ggd [_cbg ]=_ggd [_cbg ]|(byte (_bgdg .Code <<uint (_bfd -8))&_gdd [8-_fbf ])>>uint (_ceg );};_baff +=_fbf ;_bfd +=_fbf ;};return _ggd ,_baff ;};const (_ tiffType =iota ;_fg ;_ggb ;_dba ;);func (_agef *tree )fill (_acbbbd ,_cef ,_dfgd int )error {_agdb :=_agef ._faa ;
for _fgd :=0;_fgd < _acbbbd ;_fgd ++{_acf :=_acbbbd -1-_fgd ;_bdf :=((_cef >>uint (_acf ))&1)!=0;_cbef :=_agdb .walk (_bdf );if _cbef !=nil {if _cbef ._acba {return _c .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_agdb =_cbef ;continue ;};_cbef =&treeNode {};if _fgd ==_acbbbd -1{_cbef ._ffe =_dfgd ;_cbef ._acba =true ;};if _cef ==0{_cbef ._cbbf =true ;};_agdb .set (_bdf ,_cbef );_agdb =_cbef ;};return nil ;};