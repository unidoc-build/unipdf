//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_c "math";);func _dda (_dfg []byte ,_bea int ,_bgc bool )(int ,int ){var (_fcc uint16 ;_bggf int ;_cba int ;);_cba =_bea ;_fcc ,_bggf ,_ =_cde (_dfg ,_bea );_cga ,_ag :=_bgd (_fcc ,_bggf ,_bgc );if _cga ==-1{return -1,_cba ;};return _cga ,_cba +_ag .BitsWritten ;};func _befb (_cdb []byte ,_eee ,_bdd ,_dacd int )([]byte ,int ){_aecd :=_fgd (_bdd ,_dacd );_cdb ,_eee =_aad (_cdb ,_eee ,_aecd );return _cdb ,_eee ;};func init (){_ga =make (map[int ]code );_ga [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ga [1]=code {Code :2<<(5+8),BitsWritten :3};_ga [2]=code {Code :3<<(6+8),BitsWritten :2};_ga [3]=code {Code :2<<(6+8),BitsWritten :2};_ga [4]=code {Code :3<<(5+8),BitsWritten :3};_ga [5]=code {Code :3<<(4+8),BitsWritten :4};_ga [6]=code {Code :2<<(4+8),BitsWritten :4};_ga [7]=code {Code :3<<(3+8),BitsWritten :5};_ga [8]=code {Code :5<<(2+8),BitsWritten :6};_ga [9]=code {Code :4<<(2+8),BitsWritten :6};_ga [10]=code {Code :4<<(1+8),BitsWritten :7};_ga [11]=code {Code :5<<(1+8),BitsWritten :7};_ga [12]=code {Code :7<<(1+8),BitsWritten :7};_ga [13]=code {Code :4<<8,BitsWritten :8};_ga [14]=code {Code :7<<8,BitsWritten :8};_ga [15]=code {Code :12<<8,BitsWritten :9};_ga [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ga [17]=code {Code :6<<8,BitsWritten :10};_ga [18]=code {Code :2<<8,BitsWritten :10};_ga [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ga [20]=code {Code :13<<8,BitsWritten :11};_ga [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ga [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ga [23]=code {Code :5<<8,BitsWritten :11};_ga [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ga [25]=code {Code :3<<8,BitsWritten :11};_ga [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ga [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ga [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ga [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ga [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ga [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ga [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ga [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ga [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ga [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ga [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ga [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ga [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ga [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ga [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ga [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ga [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ga [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ga [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ga [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ga [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ga [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ga [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ga [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ga [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ga [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ga [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ga [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ga [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ga [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ga [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ga [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ga [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ga [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ga [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ga [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ga [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ga [63]=code {Code :6<<8|7<<4,BitsWritten :12};_f =make (map[int ]code );_f [0]=code {Code :53<<8,BitsWritten :8};_f [1]=code {Code :7<<(2+8),BitsWritten :6};_f [2]=code {Code :7<<(4+8),BitsWritten :4};_f [3]=code {Code :8<<(4+8),BitsWritten :4};_f [4]=code {Code :11<<(4+8),BitsWritten :4};_f [5]=code {Code :12<<(4+8),BitsWritten :4};_f [6]=code {Code :14<<(4+8),BitsWritten :4};_f [7]=code {Code :15<<(4+8),BitsWritten :4};_f [8]=code {Code :19<<(3+8),BitsWritten :5};_f [9]=code {Code :20<<(3+8),BitsWritten :5};_f [10]=code {Code :7<<(3+8),BitsWritten :5};_f [11]=code {Code :8<<(3+8),BitsWritten :5};_f [12]=code {Code :8<<(2+8),BitsWritten :6};_f [13]=code {Code :3<<(2+8),BitsWritten :6};_f [14]=code {Code :52<<(2+8),BitsWritten :6};_f [15]=code {Code :53<<(2+8),BitsWritten :6};_f [16]=code {Code :42<<(2+8),BitsWritten :6};_f [17]=code {Code :43<<(2+8),BitsWritten :6};_f [18]=code {Code :39<<(1+8),BitsWritten :7};_f [19]=code {Code :12<<(1+8),BitsWritten :7};_f [20]=code {Code :8<<(1+8),BitsWritten :7};_f [21]=code {Code :23<<(1+8),BitsWritten :7};_f [22]=code {Code :3<<(1+8),BitsWritten :7};_f [23]=code {Code :4<<(1+8),BitsWritten :7};_f [24]=code {Code :40<<(1+8),BitsWritten :7};_f [25]=code {Code :43<<(1+8),BitsWritten :7};_f [26]=code {Code :19<<(1+8),BitsWritten :7};_f [27]=code {Code :36<<(1+8),BitsWritten :7};_f [28]=code {Code :24<<(1+8),BitsWritten :7};_f [29]=code {Code :2<<8,BitsWritten :8};_f [30]=code {Code :3<<8,BitsWritten :8};_f [31]=code {Code :26<<8,BitsWritten :8};_f [32]=code {Code :27<<8,BitsWritten :8};_f [33]=code {Code :18<<8,BitsWritten :8};_f [34]=code {Code :19<<8,BitsWritten :8};_f [35]=code {Code :20<<8,BitsWritten :8};_f [36]=code {Code :21<<8,BitsWritten :8};_f [37]=code {Code :22<<8,BitsWritten :8};_f [38]=code {Code :23<<8,BitsWritten :8};_f [39]=code {Code :40<<8,BitsWritten :8};_f [40]=code {Code :41<<8,BitsWritten :8};_f [41]=code {Code :42<<8,BitsWritten :8};_f [42]=code {Code :43<<8,BitsWritten :8};_f [43]=code {Code :44<<8,BitsWritten :8};_f [44]=code {Code :45<<8,BitsWritten :8};_f [45]=code {Code :4<<8,BitsWritten :8};_f [46]=code {Code :5<<8,BitsWritten :8};_f [47]=code {Code :10<<8,BitsWritten :8};_f [48]=code {Code :11<<8,BitsWritten :8};_f [49]=code {Code :82<<8,BitsWritten :8};_f [50]=code {Code :83<<8,BitsWritten :8};_f [51]=code {Code :84<<8,BitsWritten :8};_f [52]=code {Code :85<<8,BitsWritten :8};_f [53]=code {Code :36<<8,BitsWritten :8};_f [54]=code {Code :37<<8,BitsWritten :8};_f [55]=code {Code :88<<8,BitsWritten :8};_f [56]=code {Code :89<<8,BitsWritten :8};_f [57]=code {Code :90<<8,BitsWritten :8};_f [58]=code {Code :91<<8,BitsWritten :8};_f [59]=code {Code :74<<8,BitsWritten :8};_f [60]=code {Code :75<<8,BitsWritten :8};_f [61]=code {Code :50<<8,BitsWritten :8};_f [62]=code {Code :51<<8,BitsWritten :8};_f [63]=code {Code :52<<8,BitsWritten :8};_e =make (map[int ]code );_e [64]=code {Code :3<<8|3<<6,BitsWritten :10};_e [128]=code {Code :12<<8|8<<4,BitsWritten :12};_e [192]=code {Code :12<<8|9<<4,BitsWritten :12};_e [256]=code {Code :5<<8|11<<4,BitsWritten :12};_e [320]=code {Code :3<<8|3<<4,BitsWritten :12};_e [384]=code {Code :3<<8|4<<4,BitsWritten :12};_e [448]=code {Code :3<<8|5<<4,BitsWritten :12};_e [512]=code {Code :3<<8|12<<3,BitsWritten :13};_e [576]=code {Code :3<<8|13<<3,BitsWritten :13};_e [640]=code {Code :2<<8|10<<3,BitsWritten :13};_e [704]=code {Code :2<<8|11<<3,BitsWritten :13};_e [768]=code {Code :2<<8|12<<3,BitsWritten :13};_e [832]=code {Code :2<<8|13<<3,BitsWritten :13};_e [896]=code {Code :3<<8|18<<3,BitsWritten :13};_e [960]=code {Code :3<<8|19<<3,BitsWritten :13};_e [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_e [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_e [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_e [1216]=code {Code :119<<3,BitsWritten :13};_e [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_e [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_e [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_e [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_e [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_e [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_e [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_e [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_ca =make (map[int ]code );_ca [64]=code {Code :27<<(3+8),BitsWritten :5};_ca [128]=code {Code :18<<(3+8),BitsWritten :5};_ca [192]=code {Code :23<<(2+8),BitsWritten :6};_ca [256]=code {Code :55<<(1+8),BitsWritten :7};_ca [320]=code {Code :54<<8,BitsWritten :8};_ca [384]=code {Code :55<<8,BitsWritten :8};_ca [448]=code {Code :100<<8,BitsWritten :8};_ca [512]=code {Code :101<<8,BitsWritten :8};_ca [576]=code {Code :104<<8,BitsWritten :8};_ca [640]=code {Code :103<<8,BitsWritten :8};_ca [704]=code {Code :102<<8,BitsWritten :9};_ca [768]=code {Code :102<<8|1<<7,BitsWritten :9};_ca [832]=code {Code :105<<8,BitsWritten :9};_ca [896]=code {Code :105<<8|1<<7,BitsWritten :9};_ca [960]=code {Code :106<<8,BitsWritten :9};_ca [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_ca [1088]=code {Code :107<<8,BitsWritten :9};_ca [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_ca [1216]=code {Code :108<<8,BitsWritten :9};_ca [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_ca [1344]=code {Code :109<<8,BitsWritten :9};_ca [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_ca [1472]=code {Code :76<<8,BitsWritten :9};_ca [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_ca [1600]=code {Code :77<<8,BitsWritten :9};_ca [1664]=code {Code :24<<(2+8),BitsWritten :6};_ca [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_a =make (map[int ]code );_a [1792]=code {Code :1<<8,BitsWritten :11};_a [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_a [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_a [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_a [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_a [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_a [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_a [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_a [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_a [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_a [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_a [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_a [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_cd =make (map[int ]byte );_cd [0]=0xFF;_cd [1]=0xFE;_cd [2]=0xFC;_cd [3]=0xF8;_cd [4]=0xF0;_cd [5]=0xE0;_cd [6]=0xC0;_cd [7]=0x80;_cd [8]=0x00;};func _bfd (_db ,_egea []byte ,_gdg int ,_eff bool )([]byte ,int ,error ){_fcg :=_gdg ;var _eag int ;for _eag ,_gdg =_dda (_db ,_gdg ,_eff );_eag !=-1;_eag ,_gdg =_dda (_db ,_gdg ,_eff ){_egea =_bde (_egea ,_eff ,_eag );if _eag < 64{break ;};};if _eag ==-1{return _egea ,_fcg ,_bba ;};return _egea ,_gdg ,nil ;};func (_eae *Encoder )decodeG31D (_cfd []byte )([][]byte ,error ){var _ed [][]byte ;var _fe int ;for (_fe /8)< len (_cfd ){var _bag bool ;_bag ,_fe =_eac (_cfd ,_fe );if !_bag {if _eae .EndOfLine {return nil ,_afe ;};}else {for _cdf :=0;_cdf < 5;_cdf ++{_bag ,_fe =_eac (_cfd ,_fe );if !_bag {if _cdf ==0{break ;};return nil ,_cf ;};};if _bag {break ;};};var _aa []byte ;_aa ,_fe =_eae .decodeRow1D (_cfd ,_fe );if _eae .EncodedByteAlign &&_fe %8!=0{_fe +=8-_fe %8;};_ed =append (_ed ,_aa );if _eae .Rows > 0&&!_eae .EndOfBlock &&len (_ed )>=_eae .Rows {break ;};};return _ed ,nil ;};func init (){for _dge ,_ba :=range _f {_abb (_eg ,_ba ,0,_dge );};for _cb ,_fc :=range _ca {_abb (_eg ,_fc ,0,_cb );};for _gf ,_eb :=range _ga {_abb (_gdd ,_eb ,0,_gf );};for _de ,_gc :=range _e {_abb (_gdd ,_gc ,0,_de );};for _egd ,_bf :=range _a {_abb (_eg ,_bf ,0,_egd );_abb (_gdd ,_bf ,0,_egd );};_abb (_gb ,_dc ,0,0);_abb (_gb ,_bc ,0,0);_abb (_gb ,_af ,0,0);_abb (_gb ,_caf ,0,0);_abb (_gb ,_bbg ,0,0);_abb (_gb ,_gd ,0,0);_abb (_gb ,_ea ,0,0);_abb (_gb ,_dd ,0,0);_abb (_gb ,_acc ,0,0);};func _abbc (_bdca []byte ,_dfc bool ,_cda int )(int ,int ){_cbcf :=0;for _cda < len (_bdca ){if _dfc {if _bdca [_cda ]!=_cce {break ;};}else {if _bdca [_cda ]!=_bgf {break ;};};_cbcf ++;_cda ++;};return _cbcf ,_cda ;};func _aad (_gadb []byte ,_dbd int ,_bff code )([]byte ,int ){_ecg :=0;for _ecg < _bff .BitsWritten {_cccf :=_dbd /8;_fcgf :=_dbd %8;if _cccf >=len (_gadb ){_gadb =append (_gadb ,0);};_agcd :=8-_fcgf ;_fbdc :=_bff .BitsWritten -_ecg ;if _agcd > _fbdc {_agcd =_fbdc ;};if _ecg < 8{_gadb [_cccf ]=_gadb [_cccf ]|byte (_bff .Code >>uint (8+_fcgf -_ecg ))&_cd [8-_agcd -_fcgf ];}else {_gadb [_cccf ]=_gadb [_cccf ]|(byte (_bff .Code <<uint (_ecg -8))&_cd [8-_agcd ])>>uint (_fcgf );};_dbd +=_agcd ;_ecg +=_agcd ;};return _gadb ,_dbd ;};func _bec (_beg []byte ,_ded int ,_gbbf code )(bool ,int ){_fff :=_ded ;var (_egab uint16 ;_fcd int ;);_egab ,_fcd ,_ded =_cde (_beg ,_ded );if _fcd > 3{return false ,_fff ;};_egab >>=uint (3-_fcd );_egab <<=3;if _egab !=_gbbf .Code {return false ,_fff ;};return true ,_ded -3+_fcd ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func (_fbb *Encoder )encodeG31D (_ecd [][]byte )[]byte {var _eddf []byte ;_gfg :=0;for _bagg :=range _ecd {if _fbb .Rows > 0&&!_fbb .EndOfBlock &&_bagg ==_fbb .Rows {break ;};_add ,_fdag :=_cfbd (_ecd [_bagg ],_gfg ,_d );_eddf =_fbb .appendEncodedRow (_eddf ,_add ,_gfg );if _fbb .EncodedByteAlign {_fdag =0;};_gfg =_fdag ;};if _fbb .EndOfBlock {_fgb ,_ :=_affe (_gfg );_eddf =_fbb .appendEncodedRow (_eddf ,_fgb ,_gfg );};return _eddf ;};func _cde (_gge []byte ,_bfg int )(uint16 ,int ,int ){_dbc :=_bfg ;_bca :=_bfg /8;_bfg %=8;if _bca >=len (_gge ){return 0,16,_dbc ;};_abe :=byte (0xFF>>uint (_bfg ));_efc :=uint16 ((_gge [_bca ]&_abe )<<uint (_bfg ))<<8;_deec :=8-_bfg ;_bca ++;_bfg =0;if _bca >=len (_gge ){return _efc >>(16-uint (_deec )),16-_deec ,_dbc +_deec ;};_efc |=uint16 (_gge [_bca ])<<(8-uint (_deec ));_deec +=8;_bca ++;_bfg =0;if _bca >=len (_gge ){return _efc >>(16-uint (_deec )),16-_deec ,_dbc +_deec ;};if _deec ==16{return _efc ,0,_dbc +_deec ;};_babc :=16-_deec ;_efc |=uint16 (_gge [_bca ]>>(8-uint (_babc )));return _efc ,0,_dbc +16;};var (_bbd =_b .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_dg =_b .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_bba =_b .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_afe =_b .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_cf =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_fb =_b .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _cgd (_cca int ,_fgbc bool )(code ,int ,bool ){if _cca < 64{if _fgbc {return _f [_cca ],0,true ;};return _ga [_cca ],0,true ;};_bga :=_cca /64;if _bga > 40{return _a [2560],_cca -2560,false ;};if _bga > 27{return _a [_bga *64],_cca -_bga *64,false ;};if _fgbc {return _ca [_bga *64],_cca -_bga *64,false ;};return _e [_bga *64],_cca -_bga *64,false ;};func _dfbb (_dgg *decodingTreeNode ,_fabd uint16 ,_ffb int )(*int ,*code ){if _dgg ==nil {return nil ,nil ;};if _ffb ==16{return _dgg .RunLen ,_dgg .Code ;};_aec :=_ccf (_fabd ,_ffb );_ffb ++;var _dcg *int ;var _ddd *code ;if _aec ==1{_dcg ,_ddd =_dfbb (_dgg .Right ,_fabd ,_ffb );}else {_dcg ,_ddd =_dfbb (_dgg .Left ,_fabd ,_ffb );};if _dcg ==nil {_dcg =_dgg .RunLen ;_ddd =_dgg .Code ;};return _dcg ,_ddd ;};func _ccf (_cag uint16 ,_dgb int )byte {if _dgb < 8{_cag >>=8;};_dgb %=8;_bgg :=byte (0x01<<(7-uint (_dgb )));return (byte (_cag )&_bgg )>>(7-uint (_dgb ));};func (_bbb *Encoder )appendEncodedRow (_agb ,_afd []byte ,_fcae int )[]byte {if len (_agb )> 0&&_fcae !=0&&!_bbb .EncodedByteAlign {_agb [len (_agb )-1]=_agb [len (_agb )-1]|_afd [0];_agb =append (_agb ,_afd [1:]...);}else {_agb =append (_agb ,_afd ...);};return _agb ;};func _fgd (_dea ,_bgcc int )code {var _gddf code ;switch _bgcc -_dea {case -1:_gddf =_caf ;case -2:_gddf =_bbg ;case -3:_gddf =_gd ;case 0:_gddf =_af ;case 1:_gddf =_ea ;case 2:_gddf =_dd ;case 3:_gddf =_acc ;};return _gddf ;};func _daa (_cdg []byte ,_cae int )(bool ,int ){return _bec (_cdg ,_cae ,_bb )};func _eac (_dac []byte ,_dfb int )(bool ,int ){_gcg :=_dfb ;var (_babf uint16 ;_gbec int ;);_babf ,_gbec ,_dfb =_cde (_dac ,_dfb );if _gbec > 4{return false ,_gcg ;};_babf >>=uint (4-_gbec );_babf <<=4;if _babf !=_d .Code {return false ,_gcg ;};return true ,_dfb -4+_gbec ;};func _edd (_adg ,_gdb []byte ,_egdd int ,_gee bool ,_fbac int )([]byte ,int ,int ,error ){_ggda :=_egdd ;var _egaa error ;_gdb ,_egdd ,_egaa =_bfd (_adg ,_gdb ,_egdd ,_gee );if _egaa !=nil {return _gdb ,_ggda ,_fbac ,_egaa ;};_gee =!_gee ;_gdb ,_egdd ,_egaa =_bfd (_adg ,_gdb ,_egdd ,_gee );if _egaa !=nil {return _gdb ,_ggda ,_fbac ,_egaa ;};_fbac =len (_gdb );return _gdb ,_egdd ,_fbac ,nil ;};func _ce (_faf int )([]byte ,int ){var _bcge []byte ;for _bgcb :=0;_bgcb < 6;_bgcb ++{_bcge ,_faf =_aad (_bcge ,_faf ,_bb );};return _bcge ,_faf %8;};var (_ga map[int ]code ;_f map[int ]code ;_e map[int ]code ;_ca map[int ]code ;_a map[int ]code ;_cd map[int ]byte ;_d =code {Code :1<<4,BitsWritten :12};_bb =code {Code :3<<3,BitsWritten :13};_ac =code {Code :2<<3,BitsWritten :13};_dc =code {Code :1<<12,BitsWritten :4};_bc =code {Code :1<<13,BitsWritten :3};_af =code {Code :1<<15,BitsWritten :1};_caf =code {Code :3<<13,BitsWritten :3};_bbg =code {Code :3<<10,BitsWritten :6};_gd =code {Code :3<<9,BitsWritten :7};_ea =code {Code :2<<13,BitsWritten :3};_dd =code {Code :2<<10,BitsWritten :6};_acc =code {Code :2<<9,BitsWritten :7};);func _affe (_bbf int )([]byte ,int ){var _agd []byte ;for _cge :=0;_cge < 6;_cge ++{_agd ,_bbf =_aad (_agd ,_bbf ,_d );};return _agd ,_bbf %8;};func _fag (_dedg []byte ,_edbd int )int {if _edbd >=len (_dedg ){return _edbd ;};if _edbd < -1{_edbd =-1;};var _bbga byte ;if _edbd > -1{_bbga =_dedg [_edbd ];}else {_bbga =_cce ;};_feed :=_edbd +1;for _feed < len (_dedg ){if _dedg [_feed ]!=_bbga {break ;};_feed ++;};return _feed ;};func (_dfgg *Encoder )Encode (pixels [][]byte )[]byte {if _dfgg .BlackIs1 {_cce =0;_bgf =1;}else {_cce =1;_bgf =0;};if _dfgg .K ==0{return _dfgg .encodeG31D (pixels );};if _dfgg .K > 0{return _dfgg .encodeG32D (pixels );};if _dfgg .K < 0{return _dfgg .encodeG4 (pixels );};return nil ;};func _bdf (_gea uint16 ,_ddcg int )(code ,bool ){_ ,_egg :=_dfbb (_gb ,_gea ,_ddcg );if _egg ==nil {return code {},false ;};return *_egg ,true ;};func (_gfb *Encoder )decodeG4 (_be []byte )([][]byte ,error ){_cg :=make ([]byte ,_gfb .Columns );for _bg :=range _cg {_cg [_bg ]=_cce ;};_ec :=make ([][]byte ,1);_ec [0]=_cg ;var (_aae bool ;_bfe error ;_gbb int ;);for (_gbb /8)< len (_be ){_aae ,_gbb ,_bfe =_fab (_be ,_gbb );if _bfe !=nil {return nil ,_bfe ;};if _aae {break ;};var (_gbd code ;_fbe bool ;);_df :=true ;var _dee []byte ;_edb :=-1;for _edb < _gfb .Columns {_gbd ,_gbb ,_fbe =_fbc (_be ,_gbb );if !_fbe {return nil ,_fb ;};switch _gbd {case _dc :_dee ,_edb =_ege (_ec ,_dee ,_df ,_edb );case _bc :_dee ,_gbb ,_edb ,_bfe =_edd (_be ,_dee ,_gbb ,_df ,_edb );if _bfe !=nil {return nil ,_bfe ;};case _af :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,0);_df =!_df ;case _caf :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,1);_df =!_df ;case _bbg :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,2);_df =!_df ;case _gd :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,3);_df =!_df ;case _ea :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,-1);_df =!_df ;case _dd :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,-2);_df =!_df ;case _acc :_dee ,_edb =_ega (_ec ,_dee ,_df ,_edb ,-3);_df =!_df ;};if len (_dee )>=_gfb .Columns {break ;};};if _gfb .EncodedByteAlign &&_gbb %8!=0{_gbb +=8-_gbb %8;};_ec =append (_ec ,_dee );if _gfb .Rows > 0&&!_gfb .EndOfBlock &&len (_ec )>=(_gfb .Rows +1){break ;};};_ec =_ec [1:];return _ec ,nil ;};var (_eg =&decodingTreeNode {Val :255};_gdd =&decodingTreeNode {Val :255};_gb =&decodingTreeNode {Val :255};);func _fab (_aba []byte ,_gda int )(bool ,int ,error ){_dgf :=_gda ;var _gff bool ;_gff ,_gda =_eac (_aba ,_gda );if _gff {_gff ,_gda =_eac (_aba ,_gda );if _gff {return true ,_gda ,nil ;};return false ,_dgf ,_bbd ;};return false ,_dgf ,nil ;};func (_bcg *Encoder )encodeG4 (_fbd [][]byte )[]byte {_bbe :=make ([][]byte ,len (_fbd ));copy (_bbe ,_fbd );_bbe =_dcgf (_bbe );var _ecda []byte ;var _bbee int ;for _geg :=1;_geg < len (_bbe );_geg ++{if _bcg .Rows > 0&&!_bcg .EndOfBlock &&_geg ==(_bcg .Rows +1){break ;};var _gebe []byte ;var _agc ,_gcgf ,_facf int ;_ddcd :=_bbee ;_ebc :=-1;for _ebc < len (_bbe [_geg ]){_agc =_fag (_bbe [_geg ],_ebc );_gcgf =_gae (_bbe [_geg ],_bbe [_geg -1],_ebc );_facf =_fag (_bbe [_geg -1],_gcgf );if _facf < _agc {_gebe ,_ddcd =_aad (_gebe ,_ddcd ,_dc );_ebc =_facf ;}else {if _c .Abs (float64 (_gcgf -_agc ))> 3{_gebe ,_ddcd ,_ebc =_egdb (_bbe [_geg ],_gebe ,_ddcd ,_ebc ,_agc );}else {_gebe ,_ddcd =_befb (_gebe ,_ddcd ,_agc ,_gcgf );_ebc =_agc ;};};};_ecda =_bcg .appendEncodedRow (_ecda ,_gebe ,_bbee );if _bcg .EncodedByteAlign {_ddcd =0;};_bbee =_ddcd %8;};if _bcg .EndOfBlock {_gga ,_ :=_dbf (_bbee );_ecda =_bcg .appendEncodedRow (_ecda ,_gga ,_bbee );};return _ecda ;};func _dcb (_dbe []byte ,_bdee int )(bool ,int ){return _bec (_dbe ,_bdee ,_ac )};func _egdb (_geed ,_cfc []byte ,_afg ,_dfa ,_cagd int )([]byte ,int ,int ){_eefa :=_fag (_geed ,_cagd );_bfee :=_dfa >=0&&_geed [_dfa ]==_cce ||_dfa ==-1;_cfc ,_afg =_aad (_cfc ,_afg ,_bc );var _dgc int ;if _dfa > -1{_dgc =_cagd -_dfa ;}else {_dgc =_cagd -_dfa -1;};_cfc ,_afg =_efcf (_cfc ,_afg ,_dgc ,_bfee );_bfee =!_bfee ;_bffc :=_eefa -_cagd ;_cfc ,_afg =_efcf (_cfc ,_afg ,_bffc ,_bfee );_dfa =_eefa ;return _cfc ,_afg ,_dfa ;};func _bfc (_egaad []byte ,_ccd int )([]byte ,int ){return _aad (_egaad ,_ccd ,_dc )};func _abb (_cbc *decodingTreeNode ,_facd code ,_daab int ,_bef int ){_deg :=_ccf (_facd .Code ,_daab );_daab ++;if _deg ==1{if _cbc .Right ==nil {_cbc .Right =&decodingTreeNode {Val :_deg };};if _daab ==_facd .BitsWritten {_cbc .Right .RunLen =&_bef ;_cbc .Right .Code =&_facd ;}else {_abb (_cbc .Right ,_facd ,_daab ,_bef );};}else {if _cbc .Left ==nil {_cbc .Left =&decodingTreeNode {Val :_deg };};if _daab ==_facd .BitsWritten {_cbc .Left .RunLen =&_bef ;_cbc .Left .Code =&_facd ;}else {_abb (_cbc .Left ,_facd ,_daab ,_bef );};};};func (_fba *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fba .BlackIs1 {_cce =0;_bgf =1;}else {_cce =1;_bgf =0;};if _fba .K ==0{return _fba .decodeG31D (encoded );};if _fba .K > 0{return _fba .decodeG32D (encoded );};if _fba .K < 4{return _fba .decodeG4 (encoded );};return nil ,nil ;};func _bde (_gfa []byte ,_ada bool ,_fac int )[]byte {if _fac < 0{return _gfa ;};_da :=make ([]byte ,_fac );if _ada {for _ede :=0;_ede < len (_da );_ede ++{_da [_ede ]=_cce ;};}else {for _dec :=0;_dec < len (_da );_dec ++{_da [_dec ]=_bgf ;};};_gfa =append (_gfa ,_da ...);return _gfa ;};func _gae (_edab ,_ece []byte ,_egc int )int {_cac :=_fag (_ece ,_egc );if _cac < len (_ece )&&(_egc ==-1&&_ece [_cac ]==_cce ||_egc >=0&&_egc < len (_edab )&&_edab [_egc ]==_ece [_cac ]||_egc >=len (_edab )&&_edab [_egc -1]!=_ece [_cac ]){_cac =_fag (_ece ,_cac );};return _cac ;};func _fbc (_cdd []byte ,_fda int )(code ,int ,bool ){var (_edc uint16 ;_fbcf int ;_bbc int ;);_bbc =_fda ;_edc ,_fbcf ,_ =_cde (_cdd ,_fda );_cad ,_debc :=_bdf (_edc ,_fbcf );if !_debc {return code {},_bbc ,false ;};return _cad ,_bbc +_cad .BitsWritten ,true ;};func _dcgf (_beaf [][]byte )[][]byte {_ebae :=make ([]byte ,len (_beaf [0]));for _daf :=range _ebae {_ebae [_daf ]=_cce ;};_beaf =append (_beaf ,[]byte {});for _fad :=len (_beaf )-1;_fad > 0;_fad --{_beaf [_fad ]=_beaf [_fad -1];};_beaf [0]=_ebae ;return _beaf ;};func (_cdfg *Encoder )encodeG32D (_fga [][]byte )[]byte {var _cfg []byte ;var _caed int ;for _abac :=0;_abac < len (_fga );_abac +=_cdfg .K {if _cdfg .Rows > 0&&!_cdfg .EndOfBlock &&_abac ==_cdfg .Rows {break ;};_eaeb ,_effe :=_cfbd (_fga [_abac ],_caed ,_bb );_cfg =_cdfg .appendEncodedRow (_cfg ,_eaeb ,_caed );if _cdfg .EncodedByteAlign {_effe =0;};_caed =_effe ;for _fbec :=_abac +1;_fbec < (_abac +_cdfg .K )&&_fbec < len (_fga );_fbec ++{if _cdfg .Rows > 0&&!_cdfg .EndOfBlock &&_fbec ==_cdfg .Rows {break ;};_cdge ,_bbdb :=_aad (nil ,_caed ,_ac );var _bac ,_bfec ,_aaf int ;_edac :=-1;for _edac < len (_fga [_fbec ]){_bac =_fag (_fga [_fbec ],_edac );_bfec =_gae (_fga [_fbec ],_fga [_fbec -1],_edac );_aaf =_fag (_fga [_fbec -1],_bfec );if _aaf < _bac {_cdge ,_bbdb =_bfc (_cdge ,_bbdb );_edac =_aaf ;}else {if _c .Abs (float64 (_bfec -_bac ))> 3{_cdge ,_bbdb ,_edac =_egdb (_fga [_fbec ],_cdge ,_bbdb ,_edac ,_bac );}else {_cdge ,_bbdb =_befb (_cdge ,_bbdb ,_bac ,_bfec );_edac =_bac ;};};};_cfg =_cdfg .appendEncodedRow (_cfg ,_cdge ,_caed );if _cdfg .EncodedByteAlign {_bbdb =0;};_caed =_bbdb %8;};};if _cdfg .EndOfBlock {_cdgb ,_ :=_ce (_caed );_cfg =_cdfg .appendEncodedRow (_cfg ,_cdgb ,_caed );};return _cfg ;};func _ege (_ad [][]byte ,_eaf []byte ,_bdb bool ,_ggd int )([]byte ,int ){_bdc :=_efb (_eaf ,_ad [len (_ad )-1],_ggd ,_bdb );_ae :=_fag (_ad [len (_ad )-1],_bdc );if _ggd ==-1{_eaf =_bde (_eaf ,_bdb ,_ae -_ggd -1);}else {_eaf =_bde (_eaf ,_bdb ,_ae -_ggd );};_ggd =_ae ;return _eaf ,_ggd ;};func _efcf (_affc []byte ,_gaa int ,_fcde int ,_adab bool )([]byte ,int ){var (_gad code ;_eba bool ;);for !_eba {_gad ,_fcde ,_eba =_cgd (_fcde ,_adab );_affc ,_gaa =_aad (_affc ,_gaa ,_gad );};return _affc ,_gaa ;};func (_eab *Encoder )decodeG32D (_cc []byte )([][]byte ,error ){var (_cfb [][]byte ;_fee int ;_fd error ;);_ee :for (_fee /8)< len (_cc ){var _gbe bool ;_gbe ,_fee ,_fd =_fa (_cc ,_fee );if _fd !=nil {return nil ,_fd ;};if _gbe {break ;};_gbe ,_fee =_daa (_cc ,_fee );if !_gbe {if _eab .EndOfLine {return nil ,_afe ;};};var _ab []byte ;_ab ,_fee =_eab .decodeRow1D (_cc ,_fee );if _eab .EncodedByteAlign &&_fee %8!=0{_fee +=8-_fee %8;};if _ab !=nil {_cfb =append (_cfb ,_ab );};if _eab .Rows > 0&&!_eab .EndOfBlock &&len (_cfb )>=_eab .Rows {break ;};for _ef :=1;_ef < _eab .K &&(_fee /8)< len (_cc );_ef ++{_gbe ,_fee =_dcb (_cc ,_fee );if !_gbe {_gbe ,_fee ,_fd =_fa (_cc ,_fee );if _fd !=nil {return nil ,_fd ;};if _gbe {break _ee ;}else {if _eab .EndOfLine {return nil ,_afe ;};};};var (_gg code ;_dgd bool ;);_bd :=true ;var _bfa []byte ;_fca :=-1;for _gg ,_fee ,_dgd =_fbc (_cc ,_fee );_dgd ;_gg ,_fee ,_dgd =_fbc (_cc ,_fee ){switch _gg {case _dc :_bfa ,_fca =_ege (_cfb ,_bfa ,_bd ,_fca );case _bc :_bfa ,_fee ,_fca ,_fd =_edd (_cc ,_bfa ,_fee ,_bd ,_fca );if _fd !=nil {return nil ,_fd ;};case _af :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,0);_bd =!_bd ;case _caf :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,1);_bd =!_bd ;case _bbg :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,2);_bd =!_bd ;case _gd :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,3);_bd =!_bd ;case _ea :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,-1);_bd =!_bd ;case _dd :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,-2);_bd =!_bd ;case _acc :_bfa ,_fca =_ega (_cfb ,_bfa ,_bd ,_fca ,-3);_bd =!_bd ;};if len (_bfa )>=_eab .Columns {break ;};};if _eab .EncodedByteAlign &&_fee %8!=0{_fee +=8-_fee %8;};if _bfa !=nil {_cfb =append (_cfb ,_bfa );};if _eab .Rows > 0&&!_eab .EndOfBlock &&len (_cfb )>=_eab .Rows {break _ee ;};};};return _cfb ,nil ;};func _ega (_cbb [][]byte ,_eef []byte ,_ccc bool ,_ge ,_bcf int )([]byte ,int ){_deb :=_efb (_eef ,_cbb [len (_cbb )-1],_ge ,_ccc );_edbe :=_deb +_bcf ;if _ge ==-1{_eef =_bde (_eef ,_ccc ,_edbe -_ge -1);}else {_eef =_bde (_eef ,_ccc ,_edbe -_ge );};_ge =_edbe ;return _eef ,_ge ;};func _dbf (_fabc int )([]byte ,int ){var _cbac []byte ;for _bacc :=0;_bacc < 2;_bacc ++{_cbac ,_fabc =_aad (_cbac ,_fabc ,_d );};return _cbac ,_fabc %8;};func _fa (_eda []byte ,_fae int )(bool ,int ,error ){_fcb :=_fae ;var _bab =false ;for _adb :=0;_adb < 6;_adb ++{_bab ,_fae =_daa (_eda ,_fae );if !_bab {if _adb > 1{return false ,_fcb ,_dg ;};_fae =_fcb ;break ;};};return _bab ,_fae ,nil ;};var (_cce byte =1;_bgf byte =0;);func _cfbd (_fdd []byte ,_bfdf int ,_fbdg code )([]byte ,int ){_aafa :=true ;var _efd []byte ;_efd ,_bfdf =_aad (nil ,_bfdf ,_fbdg );_gbg :=0;var _cgc int ;for _gbg < len (_fdd ){_cgc ,_gbg =_abbc (_fdd ,_aafa ,_gbg );_efd ,_bfdf =_efcf (_efd ,_bfdf ,_cgc ,_aafa );_aafa =!_aafa ;};return _efd ,_bfdf %8;};func (_ff *Encoder )decodeRow1D (_ecf []byte ,_ecc int )([]byte ,int ){var _ggb []byte ;_eea :=true ;var _aee int ;_aee ,_ecc =_dda (_ecf ,_ecc ,_eea );for _aee !=-1{_ggb =_bde (_ggb ,_eea ,_aee );if _aee < 64{if len (_ggb )>=_ff .Columns {break ;};_eea =!_eea ;};_aee ,_ecc =_dda (_ecf ,_ecc ,_eea );};return _ggb ,_ecc ;};func _bgd (_def uint16 ,_cafa int ,_fde bool )(int ,code ){var _acg *int ;var _fcbg *code ;if _fde {_acg ,_fcbg =_dfbb (_eg ,_def ,_cafa );}else {_acg ,_fcbg =_dfbb (_gdd ,_def ,_cafa );};if _acg ==nil {return -1,code {};};return *_acg ,*_fcbg ;};func _efb (_adad ,_dedf []byte ,_gaad int ,_gadg bool )int {_daca :=_fag (_dedf ,_gaad );if _daca < len (_dedf )&&(_gaad ==-1&&_dedf [_daca ]==_cce ||_gaad >=0&&_gaad < len (_adad )&&_adad [_gaad ]==_dedf [_daca ]||_gaad >=len (_adad )&&_gadg &&_dedf [_daca ]==_cce ||_gaad >=len (_adad )&&!_gadg &&_dedf [_daca ]==_bgf ){_daca =_fag (_dedf ,_daca );};return _daca ;};type code struct{Code uint16 ;BitsWritten int ;};