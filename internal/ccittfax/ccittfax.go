//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_d "math";);func (_fef *Encoder )encodeG31D (_fae [][]byte )[]byte {var _fagc []byte ;_fagd :=0;for _ggdc :=range _fae {if _fef .Rows > 0&&!_fef .EndOfBlock &&_ggdc ==_fef .Rows {break ;};_feeg ,_bdce :=_bdd (_fae [_ggdc ],_fagd ,_c );_fagc =_fef .appendEncodedRow (_fagc ,_feeg ,_fagd );if _fef .EncodedByteAlign {_bdce =0;};_fagd =_bdce ;};if _fef .EndOfBlock {_bea ,_ :=_dgdd (_fagd );_fagc =_fef .appendEncodedRow (_fagc ,_bea ,_fagd );};return _fagc ;};func _adc (_fagb []byte ,_caef int )int {if _caef >=len (_fagb ){return _caef ;};if _caef < -1{_caef =-1;};var _cbe byte ;if _caef > -1{_cbe =_fagb [_caef ];}else {_cbe =_ead ;};_cadf :=_caef +1;for _cadf < len (_fagb ){if _fagb [_cadf ]!=_cbe {break ;};_cadf ++;};return _cadf ;};func init (){_g =make (map[int ]code );_g [0]=code {Code :13<<8|3<<6,BitsWritten :10};_g [1]=code {Code :2<<(5+8),BitsWritten :3};_g [2]=code {Code :3<<(6+8),BitsWritten :2};_g [3]=code {Code :2<<(6+8),BitsWritten :2};_g [4]=code {Code :3<<(5+8),BitsWritten :3};_g [5]=code {Code :3<<(4+8),BitsWritten :4};_g [6]=code {Code :2<<(4+8),BitsWritten :4};_g [7]=code {Code :3<<(3+8),BitsWritten :5};_g [8]=code {Code :5<<(2+8),BitsWritten :6};_g [9]=code {Code :4<<(2+8),BitsWritten :6};_g [10]=code {Code :4<<(1+8),BitsWritten :7};_g [11]=code {Code :5<<(1+8),BitsWritten :7};_g [12]=code {Code :7<<(1+8),BitsWritten :7};_g [13]=code {Code :4<<8,BitsWritten :8};_g [14]=code {Code :7<<8,BitsWritten :8};_g [15]=code {Code :12<<8,BitsWritten :9};_g [16]=code {Code :5<<8|3<<6,BitsWritten :10};_g [17]=code {Code :6<<8,BitsWritten :10};_g [18]=code {Code :2<<8,BitsWritten :10};_g [19]=code {Code :12<<8|7<<5,BitsWritten :11};_g [20]=code {Code :13<<8,BitsWritten :11};_g [21]=code {Code :13<<8|4<<5,BitsWritten :11};_g [22]=code {Code :6<<8|7<<5,BitsWritten :11};_g [23]=code {Code :5<<8,BitsWritten :11};_g [24]=code {Code :2<<8|7<<5,BitsWritten :11};_g [25]=code {Code :3<<8,BitsWritten :11};_g [26]=code {Code :12<<8|10<<4,BitsWritten :12};_g [27]=code {Code :12<<8|11<<4,BitsWritten :12};_g [28]=code {Code :12<<8|12<<4,BitsWritten :12};_g [29]=code {Code :12<<8|13<<4,BitsWritten :12};_g [30]=code {Code :6<<8|8<<4,BitsWritten :12};_g [31]=code {Code :6<<8|9<<4,BitsWritten :12};_g [32]=code {Code :6<<8|10<<4,BitsWritten :12};_g [33]=code {Code :6<<8|11<<4,BitsWritten :12};_g [34]=code {Code :13<<8|2<<4,BitsWritten :12};_g [35]=code {Code :13<<8|3<<4,BitsWritten :12};_g [36]=code {Code :13<<8|4<<4,BitsWritten :12};_g [37]=code {Code :13<<8|5<<4,BitsWritten :12};_g [38]=code {Code :13<<8|6<<4,BitsWritten :12};_g [39]=code {Code :13<<8|7<<4,BitsWritten :12};_g [40]=code {Code :6<<8|12<<4,BitsWritten :12};_g [41]=code {Code :6<<8|13<<4,BitsWritten :12};_g [42]=code {Code :13<<8|10<<4,BitsWritten :12};_g [43]=code {Code :13<<8|11<<4,BitsWritten :12};_g [44]=code {Code :5<<8|4<<4,BitsWritten :12};_g [45]=code {Code :5<<8|5<<4,BitsWritten :12};_g [46]=code {Code :5<<8|6<<4,BitsWritten :12};_g [47]=code {Code :5<<8|7<<4,BitsWritten :12};_g [48]=code {Code :6<<8|4<<4,BitsWritten :12};_g [49]=code {Code :6<<8|5<<4,BitsWritten :12};_g [50]=code {Code :5<<8|2<<4,BitsWritten :12};_g [51]=code {Code :5<<8|3<<4,BitsWritten :12};_g [52]=code {Code :2<<8|4<<4,BitsWritten :12};_g [53]=code {Code :3<<8|7<<4,BitsWritten :12};_g [54]=code {Code :3<<8|8<<4,BitsWritten :12};_g [55]=code {Code :2<<8|7<<4,BitsWritten :12};_g [56]=code {Code :2<<8|8<<4,BitsWritten :12};_g [57]=code {Code :5<<8|8<<4,BitsWritten :12};_g [58]=code {Code :5<<8|9<<4,BitsWritten :12};_g [59]=code {Code :2<<8|11<<4,BitsWritten :12};_g [60]=code {Code :2<<8|12<<4,BitsWritten :12};_g [61]=code {Code :5<<8|10<<4,BitsWritten :12};_g [62]=code {Code :6<<8|6<<4,BitsWritten :12};_g [63]=code {Code :6<<8|7<<4,BitsWritten :12};_bc =make (map[int ]code );_bc [0]=code {Code :53<<8,BitsWritten :8};_bc [1]=code {Code :7<<(2+8),BitsWritten :6};_bc [2]=code {Code :7<<(4+8),BitsWritten :4};_bc [3]=code {Code :8<<(4+8),BitsWritten :4};_bc [4]=code {Code :11<<(4+8),BitsWritten :4};_bc [5]=code {Code :12<<(4+8),BitsWritten :4};_bc [6]=code {Code :14<<(4+8),BitsWritten :4};_bc [7]=code {Code :15<<(4+8),BitsWritten :4};_bc [8]=code {Code :19<<(3+8),BitsWritten :5};_bc [9]=code {Code :20<<(3+8),BitsWritten :5};_bc [10]=code {Code :7<<(3+8),BitsWritten :5};_bc [11]=code {Code :8<<(3+8),BitsWritten :5};_bc [12]=code {Code :8<<(2+8),BitsWritten :6};_bc [13]=code {Code :3<<(2+8),BitsWritten :6};_bc [14]=code {Code :52<<(2+8),BitsWritten :6};_bc [15]=code {Code :53<<(2+8),BitsWritten :6};_bc [16]=code {Code :42<<(2+8),BitsWritten :6};_bc [17]=code {Code :43<<(2+8),BitsWritten :6};_bc [18]=code {Code :39<<(1+8),BitsWritten :7};_bc [19]=code {Code :12<<(1+8),BitsWritten :7};_bc [20]=code {Code :8<<(1+8),BitsWritten :7};_bc [21]=code {Code :23<<(1+8),BitsWritten :7};_bc [22]=code {Code :3<<(1+8),BitsWritten :7};_bc [23]=code {Code :4<<(1+8),BitsWritten :7};_bc [24]=code {Code :40<<(1+8),BitsWritten :7};_bc [25]=code {Code :43<<(1+8),BitsWritten :7};_bc [26]=code {Code :19<<(1+8),BitsWritten :7};_bc [27]=code {Code :36<<(1+8),BitsWritten :7};_bc [28]=code {Code :24<<(1+8),BitsWritten :7};_bc [29]=code {Code :2<<8,BitsWritten :8};_bc [30]=code {Code :3<<8,BitsWritten :8};_bc [31]=code {Code :26<<8,BitsWritten :8};_bc [32]=code {Code :27<<8,BitsWritten :8};_bc [33]=code {Code :18<<8,BitsWritten :8};_bc [34]=code {Code :19<<8,BitsWritten :8};_bc [35]=code {Code :20<<8,BitsWritten :8};_bc [36]=code {Code :21<<8,BitsWritten :8};_bc [37]=code {Code :22<<8,BitsWritten :8};_bc [38]=code {Code :23<<8,BitsWritten :8};_bc [39]=code {Code :40<<8,BitsWritten :8};_bc [40]=code {Code :41<<8,BitsWritten :8};_bc [41]=code {Code :42<<8,BitsWritten :8};_bc [42]=code {Code :43<<8,BitsWritten :8};_bc [43]=code {Code :44<<8,BitsWritten :8};_bc [44]=code {Code :45<<8,BitsWritten :8};_bc [45]=code {Code :4<<8,BitsWritten :8};_bc [46]=code {Code :5<<8,BitsWritten :8};_bc [47]=code {Code :10<<8,BitsWritten :8};_bc [48]=code {Code :11<<8,BitsWritten :8};_bc [49]=code {Code :82<<8,BitsWritten :8};_bc [50]=code {Code :83<<8,BitsWritten :8};_bc [51]=code {Code :84<<8,BitsWritten :8};_bc [52]=code {Code :85<<8,BitsWritten :8};_bc [53]=code {Code :36<<8,BitsWritten :8};_bc [54]=code {Code :37<<8,BitsWritten :8};_bc [55]=code {Code :88<<8,BitsWritten :8};_bc [56]=code {Code :89<<8,BitsWritten :8};_bc [57]=code {Code :90<<8,BitsWritten :8};_bc [58]=code {Code :91<<8,BitsWritten :8};_bc [59]=code {Code :74<<8,BitsWritten :8};_bc [60]=code {Code :75<<8,BitsWritten :8};_bc [61]=code {Code :50<<8,BitsWritten :8};_bc [62]=code {Code :51<<8,BitsWritten :8};_bc [63]=code {Code :52<<8,BitsWritten :8};_bf =make (map[int ]code );_bf [64]=code {Code :3<<8|3<<6,BitsWritten :10};_bf [128]=code {Code :12<<8|8<<4,BitsWritten :12};_bf [192]=code {Code :12<<8|9<<4,BitsWritten :12};_bf [256]=code {Code :5<<8|11<<4,BitsWritten :12};_bf [320]=code {Code :3<<8|3<<4,BitsWritten :12};_bf [384]=code {Code :3<<8|4<<4,BitsWritten :12};_bf [448]=code {Code :3<<8|5<<4,BitsWritten :12};_bf [512]=code {Code :3<<8|12<<3,BitsWritten :13};_bf [576]=code {Code :3<<8|13<<3,BitsWritten :13};_bf [640]=code {Code :2<<8|10<<3,BitsWritten :13};_bf [704]=code {Code :2<<8|11<<3,BitsWritten :13};_bf [768]=code {Code :2<<8|12<<3,BitsWritten :13};_bf [832]=code {Code :2<<8|13<<3,BitsWritten :13};_bf [896]=code {Code :3<<8|18<<3,BitsWritten :13};_bf [960]=code {Code :3<<8|19<<3,BitsWritten :13};_bf [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_bf [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_bf [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_bf [1216]=code {Code :119<<3,BitsWritten :13};_bf [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_bf [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_bf [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_bf [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_bf [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_bf [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_bf [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_bf [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_e =make (map[int ]code );_e [64]=code {Code :27<<(3+8),BitsWritten :5};_e [128]=code {Code :18<<(3+8),BitsWritten :5};_e [192]=code {Code :23<<(2+8),BitsWritten :6};_e [256]=code {Code :55<<(1+8),BitsWritten :7};_e [320]=code {Code :54<<8,BitsWritten :8};_e [384]=code {Code :55<<8,BitsWritten :8};_e [448]=code {Code :100<<8,BitsWritten :8};_e [512]=code {Code :101<<8,BitsWritten :8};_e [576]=code {Code :104<<8,BitsWritten :8};_e [640]=code {Code :103<<8,BitsWritten :8};_e [704]=code {Code :102<<8,BitsWritten :9};_e [768]=code {Code :102<<8|1<<7,BitsWritten :9};_e [832]=code {Code :105<<8,BitsWritten :9};_e [896]=code {Code :105<<8|1<<7,BitsWritten :9};_e [960]=code {Code :106<<8,BitsWritten :9};_e [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_e [1088]=code {Code :107<<8,BitsWritten :9};_e [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_e [1216]=code {Code :108<<8,BitsWritten :9};_e [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_e [1344]=code {Code :109<<8,BitsWritten :9};_e [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_e [1472]=code {Code :76<<8,BitsWritten :9};_e [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_e [1600]=code {Code :77<<8,BitsWritten :9};_e [1664]=code {Code :24<<(2+8),BitsWritten :6};_e [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_be =make (map[int ]code );_be [1792]=code {Code :1<<8,BitsWritten :11};_be [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_be [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_be [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_be [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_be [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_be [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_be [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_be [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_be [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_be [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_be [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_be [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ga =make (map[int ]byte );_ga [0]=0xFF;_ga [1]=0xFE;_ga [2]=0xFC;_ga [3]=0xF8;_ga [4]=0xF0;_ga [5]=0xE0;_ga [6]=0xC0;_ga [7]=0x80;_ga [8]=0x00;};func _ggbf (_cfag []byte ,_dedc int )(bool ,int ){return _ffb (_cfag ,_dedc ,_ab )};var (_ee =_b .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_gd =_b .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_fc =_b .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_gg =_b .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_fd =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ea =_b .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func init (){for _dce ,_ce :=range _bc {_ced (_afg ,_ce ,0,_dce );};for _bb ,_dg :=range _e {_ced (_afg ,_dg ,0,_bb );};for _beg ,_bce :=range _g {_ced (_dc ,_bce ,0,_beg );};for _gf ,_fe :=range _bf {_ced (_dc ,_fe ,0,_gf );};for _gb ,_aed :=range _be {_ced (_afg ,_aed ,0,_gb );_ced (_dc ,_aed ,0,_gb );};_ced (_ef ,_gag ,0,0);_ced (_ef ,_ac ,0,0);_ced (_ef ,_ba ,0,0);_ced (_ef ,_ae ,0,0);_ced (_ef ,_bff ,0,0);_ced (_ef ,_cg ,0,0);_ced (_ef ,_ca ,0,0);_ced (_ef ,_af ,0,0);_ced (_ef ,_dd ,0,0);};func _eae (_fge uint16 ,_fbb int ,_baca bool )(int ,code ){var _agc *int ;var _cee *code ;if _baca {_agc ,_cee =_gbf (_afg ,_fge ,_fbb );}else {_agc ,_cee =_gbf (_dc ,_fge ,_fbb );};if _agc ==nil {return -1,code {};};return *_agc ,*_cee ;};var (_g map[int ]code ;_bc map[int ]code ;_bf map[int ]code ;_e map[int ]code ;_be map[int ]code ;_ga map[int ]byte ;_c =code {Code :1<<4,BitsWritten :12};_f =code {Code :3<<3,BitsWritten :13};_ab =code {Code :2<<3,BitsWritten :13};_gag =code {Code :1<<12,BitsWritten :4};_ac =code {Code :1<<13,BitsWritten :3};_ba =code {Code :1<<15,BitsWritten :1};_ae =code {Code :3<<13,BitsWritten :3};_bff =code {Code :3<<10,BitsWritten :6};_cg =code {Code :3<<9,BitsWritten :7};_ca =code {Code :2<<13,BitsWritten :3};_af =code {Code :2<<10,BitsWritten :6};_dd =code {Code :2<<9,BitsWritten :7};);func _bffe (_dda ,_cb []byte ,_aga int ,_cf bool )([]byte ,int ,error ){_egb :=_aga ;var _eag int ;for _eag ,_aga =_bbg (_dda ,_aga ,_cf );_eag !=-1;_eag ,_aga =_bbg (_dda ,_aga ,_cf ){_cb =_fde (_cb ,_cf ,_eag );if _eag < 64{break ;};};if _eag ==-1{return _cb ,_egb ,_fc ;};return _cb ,_aga ,nil ;};func _ecc (_bad ,_ggd []byte ,_eca int ,_dede bool ,_beeg int )([]byte ,int ,int ,error ){_gga :=_eca ;var _bdc error ;_ggd ,_eca ,_bdc =_bffe (_bad ,_ggd ,_eca ,_dede );if _bdc !=nil {return _ggd ,_gga ,_beeg ,_bdc ;};_dede =!_dede ;_ggd ,_eca ,_bdc =_bffe (_bad ,_ggd ,_eca ,_dede );if _bdc !=nil {return _ggd ,_gga ,_beeg ,_bdc ;};_beeg =len (_ggd );return _ggd ,_eca ,_beeg ,nil ;};func (_gdd *Encoder )decodeG31D (_ag []byte )([][]byte ,error ){var _bbc [][]byte ;var _ed int ;for (_ed /8)< len (_ag ){var _de bool ;_de ,_ed =_ddec (_ag ,_ed );if !_de {if _gdd .EndOfLine {return nil ,_gg ;};}else {for _cgf :=0;_cgf < 5;_cgf ++{_de ,_ed =_ddec (_ag ,_ed );if !_de {if _cgf ==0{break ;};return nil ,_fd ;};};if _de {break ;};};var _abe []byte ;_abe ,_ed =_gdd .decodeRow1D (_ag ,_ed );if _gdd .EncodedByteAlign &&_ed %8!=0{_ed +=8-_ed %8;};_bbc =append (_bbc ,_abe );if _gdd .Rows > 0&&!_gdd .EndOfBlock &&len (_bbc )>=_gdd .Rows {break ;};};return _bbc ,nil ;};func _bbg (_cfc []byte ,_ffg int ,_baa bool )(int ,int ){var (_fee uint16 ;_bda int ;_bbca int ;);_bbca =_ffg ;_fee ,_bda ,_ =_ge (_cfc ,_ffg );_faa ,_bef :=_eae (_fee ,_bda ,_baa );if _faa ==-1{return -1,_bbca ;};return _faa ,_bbca +_bef .BitsWritten ;};func _faga (_gdc []byte ,_ceeb ,_cdfdg ,_gcde int )([]byte ,int ){_gbfg :=_ecb (_cdfdg ,_gcde );_gdc ,_ceeb =_abcb (_gdc ,_ceeb ,_gbfg );return _gdc ,_ceeb ;};func _eaa (_bba [][]byte ,_cgb []byte ,_bee bool ,_egd int )([]byte ,int ){_fda :=_bfd (_cgb ,_bba [len (_bba )-1],_egd ,_bee );_ffe :=_adc (_bba [len (_bba )-1],_fda );if _egd ==-1{_cgb =_fde (_cgb ,_bee ,_ffe -_egd -1);}else {_cgb =_fde (_cgb ,_bee ,_ffe -_egd );};_egd =_ffe ;return _cgb ,_egd ;};func _fde (_ecaa []byte ,_aca bool ,_cea int )[]byte {if _cea < 0{return _ecaa ;};_ceab :=make ([]byte ,_cea );if _aca {for _aaa :=0;_aaa < len (_ceab );_aaa ++{_ceab [_aaa ]=_ead ;};}else {for _aag :=0;_aag < len (_ceab );_aag ++{_ceab [_aag ]=_gaf ;};};_ecaa =append (_ecaa ,_ceab ...);return _ecaa ;};func _ffb (_cbd []byte ,_gea int ,_abea code )(bool ,int ){_gcd :=_gea ;var (_bacc uint16 ;_abc int ;);_bacc ,_abc ,_gea =_ge (_cbd ,_gea );if _abc > 3{return false ,_gcd ;};_bacc >>=uint (3-_abc );_bacc <<=3;if _bacc !=_abea .Code {return false ,_gcd ;};return true ,_gea -3+_abc ;};func _ecb (_dcgc ,_afda int )code {var _gdb code ;switch _afda -_dcgc {case -1:_gdb =_ae ;case -2:_gdb =_bff ;case -3:_gdb =_cg ;case 0:_gdb =_ba ;case 1:_gdb =_ca ;case 2:_gdb =_af ;case 3:_gdb =_dd ;};return _gdb ;};func _cede (_dbb []byte ,_dfe bool ,_bece int )(int ,int ){_fgec :=0;for _bece < len (_dbb ){if _dfe {if _dbb [_bece ]!=_ead {break ;};}else {if _dbb [_bece ]!=_gaf {break ;};};_fgec ++;_bece ++;};return _fgec ,_bece ;};func _bfd (_acca ,_gbad []byte ,_beee int ,_bca bool )int {_beca :=_adc (_gbad ,_beee );if _beca < len (_gbad )&&(_beee ==-1&&_gbad [_beca ]==_ead ||_beee >=0&&_beee < len (_acca )&&_acca [_beee ]==_gbad [_beca ]||_beee >=len (_acca )&&_bca &&_gbad [_beca ]==_ead ||_beee >=len (_acca )&&!_bca &&_gbad [_beca ]==_gaf ){_beca =_adc (_gbad ,_beca );};return _beca ;};func _ade (_bdf int ,_egeg bool )(code ,int ,bool ){if _bdf < 64{if _egeg {return _bc [_bdf ],0,true ;};return _g [_bdf ],0,true ;};_efac :=_bdf /64;if _efac > 40{return _be [2560],_bdf -2560,false ;};if _efac > 27{return _be [_efac *64],_bdf -_efac *64,false ;};if _egeg {return _e [_efac *64],_bdf -_efac *64,false ;};return _bf [_efac *64],_bdf -_efac *64,false ;};func (_feg *Encoder )decodeRow1D (_bbf []byte ,_fbc int )([]byte ,int ){var _eef []byte ;_dcg :=true ;var _ace int ;_ace ,_fbc =_bbg (_bbf ,_fbc ,_dcg );for _ace !=-1{_eef =_fde (_eef ,_dcg ,_ace );if _ace < 64{if len (_eef )>=_feg .Columns {break ;};_dcg =!_dcg ;};_ace ,_fbc =_bbg (_bbf ,_fbc ,_dcg );};return _eef ,_fbc ;};func _dgdd (_gbc int )([]byte ,int ){var _fgcd []byte ;for _gfc :=0;_gfc < 6;_gfc ++{_fgcd ,_gbc =_abcb (_fgcd ,_gbc ,_c );};return _fgcd ,_gbc %8;};func (_abd *Encoder )Encode (pixels [][]byte )[]byte {if _abd .BlackIs1 {_ead =0;_gaf =1;}else {_ead =1;_gaf =0;};if _abd .K ==0{return _abd .encodeG31D (pixels );};if _abd .K > 0{return _abd .encodeG32D (pixels );};if _abd .K < 0{return _abd .encodeG4 (pixels );};return nil ;};func _ccd (_bdb []byte ,_ecg int ,_gba int ,_bbbe bool )([]byte ,int ){var (_aeg code ;_efa bool ;);for !_efa {_aeg ,_gba ,_efa =_ade (_gba ,_bbbe );_bdb ,_ecg =_abcb (_bdb ,_ecg ,_aeg );};return _bdb ,_ecg ;};func _caed (_efg uint16 ,_edc int )byte {if _edc < 8{_efg >>=8;};_edc %=8;_cde :=byte (0x01<<(7-uint (_edc )));return (byte (_efg )&_cde )>>(7-uint (_edc ));};func _eea (_gdf int )([]byte ,int ){var _gcb []byte ;for _cec :=0;_cec < 6;_cec ++{_gcb ,_gdf =_abcb (_gcb ,_gdf ,_f );};return _gcb ,_gdf %8;};func _bdd (_fdb []byte ,_gcda int ,_fga code )([]byte ,int ){_ceac :=true ;var _acd []byte ;_acd ,_gcda =_abcb (nil ,_gcda ,_fga );_ada :=0;var _cggc int ;for _ada < len (_fdb ){_cggc ,_ada =_cede (_fdb ,_ceac ,_ada );_acd ,_gcda =_ccd (_acd ,_gcda ,_cggc ,_ceac );_ceac =!_ceac ;};return _acd ,_gcda %8;};func _gbf (_egc *decodingTreeNode ,_fcb uint16 ,_bgg int )(*int ,*code ){if _egc ==nil {return nil ,nil ;};if _bgg ==16{return _egc .RunLen ,_egc .Code ;};_ggdg :=_caed (_fcb ,_bgg );_bgg ++;var _cbb *int ;var _fff *code ;if _ggdg ==1{_cbb ,_fff =_gbf (_egc .Right ,_fcb ,_bgg );}else {_cbb ,_fff =_gbf (_egc .Left ,_fcb ,_bgg );};if _cbb ==nil {_cbb =_egc .RunLen ;_fff =_egc .Code ;};return _cbb ,_fff ;};func _cgg (_aac int )([]byte ,int ){var _aea []byte ;for _dgfb :=0;_dgfb < 2;_dgfb ++{_aea ,_aac =_abcb (_aea ,_aac ,_c );};return _aea ,_aac %8;};func (_ff *Encoder )decodeG4 (_cda []byte )([][]byte ,error ){_fb :=make ([]byte ,_ff .Columns );for _agb :=range _fb {_fb [_agb ]=_ead ;};_cab :=make ([][]byte ,1);_cab [0]=_fb ;var (_agf bool ;_gbg error ;_fbe int ;);for (_fbe /8)< len (_cda ){_agf ,_fbe ,_gbg =_acb (_cda ,_fbe );if _gbg !=nil {return nil ,_gbg ;};if _agf {break ;};var (_bgf code ;_dde bool ;);_eg :=true ;var _cc []byte ;_ceg :=-1;for _ceg < _ff .Columns {_bgf ,_fbe ,_dde =_ggb (_cda ,_fbe );if !_dde {return nil ,_ea ;};switch _bgf {case _gag :_cc ,_ceg =_eaa (_cab ,_cc ,_eg ,_ceg );case _ac :_cc ,_fbe ,_ceg ,_gbg =_ecc (_cda ,_cc ,_fbe ,_eg ,_ceg );if _gbg !=nil {return nil ,_gbg ;};case _ba :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,0);_eg =!_eg ;case _ae :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,1);_eg =!_eg ;case _bff :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,2);_eg =!_eg ;case _cg :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,3);_eg =!_eg ;case _ca :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,-1);_eg =!_eg ;case _af :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,-2);_eg =!_eg ;case _dd :_cc ,_ceg =_bac (_cab ,_cc ,_eg ,_ceg ,-3);_eg =!_eg ;};if len (_cc )>=_ff .Columns {break ;};};if _ff .EncodedByteAlign &&_fbe %8!=0{_fbe +=8-_fbe %8;};_cab =append (_cab ,_cc );if _ff .Rows > 0&&!_ff .EndOfBlock &&len (_cab )>=(_ff .Rows +1){break ;};};_cab =_cab [1:];return _cab ,nil ;};type code struct{Code uint16 ;BitsWritten int ;};func (_dab *Encoder )appendEncodedRow (_agca ,_dbe []byte ,_adg int )[]byte {if len (_agca )> 0&&_adg !=0&&!_dab .EncodedByteAlign {_agca [len (_agca )-1]=_agca [len (_agca )-1]|_dbe [0];_agca =append (_agca ,_dbe [1:]...);}else {_agca =append (_agca ,_dbe ...);};return _agca ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _ced (_ccf *decodingTreeNode ,_ebc code ,_ged int ,_afd int ){_bbb :=_caed (_ebc .Code ,_ged );_ged ++;if _bbb ==1{if _ccf .Right ==nil {_ccf .Right =&decodingTreeNode {Val :_bbb };};if _ged ==_ebc .BitsWritten {_ccf .Right .RunLen =&_afd ;_ccf .Right .Code =&_ebc ;}else {_ced (_ccf .Right ,_ebc ,_ged ,_afd );};}else {if _ccf .Left ==nil {_ccf .Left =&decodingTreeNode {Val :_bbb };};if _ged ==_ebc .BitsWritten {_ccf .Left .RunLen =&_afd ;_ccf .Left .Code =&_ebc ;}else {_ced (_ccf .Left ,_ebc ,_ged ,_afd );};};};func _abg (_fgc uint16 ,_fgg int )(code ,bool ){_ ,_cgc :=_gbf (_ef ,_fgc ,_fgg );if _cgc ==nil {return code {},false ;};return *_cgc ,true ;};func _acb (_cef []byte ,_edg int )(bool ,int ,error ){_ffeg :=_edg ;var _gaa bool ;_gaa ,_edg =_ddec (_cef ,_edg );if _gaa {_gaa ,_edg =_ddec (_cef ,_edg );if _gaa {return true ,_edg ,nil ;};return false ,_ffeg ,_ee ;};return false ,_ffeg ,nil ;};func (_ec *Encoder )decodeG32D (_gc []byte )([][]byte ,error ){var (_cae [][]byte ;_bceb int ;_afe error ;);_bg :for (_bceb /8)< len (_gc ){var _fg bool ;_fg ,_bceb ,_afe =_ad (_gc ,_bceb );if _afe !=nil {return nil ,_afe ;};if _fg {break ;};_fg ,_bceb =_dac (_gc ,_bceb );if !_fg {if _ec .EndOfLine {return nil ,_gg ;};};var _gfg []byte ;_gfg ,_bceb =_ec .decodeRow1D (_gc ,_bceb );if _ec .EncodedByteAlign &&_bceb %8!=0{_bceb +=8-_bceb %8;};if _gfg !=nil {_cae =append (_cae ,_gfg );};if _ec .Rows > 0&&!_ec .EndOfBlock &&len (_cae )>=_ec .Rows {break ;};for _dcd :=1;_dcd < _ec .K &&(_bceb /8)< len (_gc );_dcd ++{_fg ,_bceb =_ggbf (_gc ,_bceb );if !_fg {_fg ,_bceb ,_afe =_ad (_gc ,_bceb );if _afe !=nil {return nil ,_afe ;};if _fg {break _bg ;}else {if _ec .EndOfLine {return nil ,_gg ;};};};var (_acg code ;_fa bool ;);_efe :=true ;var _bd []byte ;_ddd :=-1;for _acg ,_bceb ,_fa =_ggb (_gc ,_bceb );_fa ;_acg ,_bceb ,_fa =_ggb (_gc ,_bceb ){switch _acg {case _gag :_bd ,_ddd =_eaa (_cae ,_bd ,_efe ,_ddd );case _ac :_bd ,_bceb ,_ddd ,_afe =_ecc (_gc ,_bd ,_bceb ,_efe ,_ddd );if _afe !=nil {return nil ,_afe ;};case _ba :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,0);_efe =!_efe ;case _ae :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,1);_efe =!_efe ;case _bff :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,2);_efe =!_efe ;case _cg :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,3);_efe =!_efe ;case _ca :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,-1);_efe =!_efe ;case _af :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,-2);_efe =!_efe ;case _dd :_bd ,_ddd =_bac (_cae ,_bd ,_efe ,_ddd ,-3);_efe =!_efe ;};if len (_bd )>=_ec .Columns {break ;};};if _ec .EncodedByteAlign &&_bceb %8!=0{_bceb +=8-_bceb %8;};if _bd !=nil {_cae =append (_cae ,_bd );};if _ec .Rows > 0&&!_ec .EndOfBlock &&len (_cae )>=_ec .Rows {break _bg ;};};};return _cae ,nil ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _abcb (_dgcb []byte ,_bbaa int ,_fac code )([]byte ,int ){_efd :=0;for _efd < _fac .BitsWritten {_bcee :=_bbaa /8;_bde :=_bbaa %8;if _bcee >=len (_dgcb ){_dgcb =append (_dgcb ,0);};_bgc :=8-_bde ;_gce :=_fac .BitsWritten -_efd ;if _bgc > _gce {_bgc =_gce ;};if _efd < 8{_dgcb [_bcee ]=_dgcb [_bcee ]|byte (_fac .Code >>uint (8+_bde -_efd ))&_ga [8-_bgc -_bde ];}else {_dgcb [_bcee ]=_dgcb [_bcee ]|(byte (_fac .Code <<uint (_efd -8))&_ga [8-_bgc ])>>uint (_bde );};_bbaa +=_bgc ;_efd +=_bgc ;};return _dgcb ,_bbaa ;};func _geaa (_acffb [][]byte )[][]byte {_begg :=make ([]byte ,len (_acffb [0]));for _ceabf :=range _begg {_begg [_ceabf ]=_ead ;};_acffb =append (_acffb ,[]byte {});for _egg :=len (_acffb )-1;_egg > 0;_egg --{_acffb [_egg ]=_acffb [_egg -1];};_acffb [0]=_begg ;return _acffb ;};func (_acf *Encoder )encodeG4 (_edb [][]byte )[]byte {_gcf :=make ([][]byte ,len (_edb ));copy (_gcf ,_edb );_gcf =_geaa (_gcf );var _cfb []byte ;var _eee int ;for _egdc :=1;_egdc < len (_gcf );_egdc ++{if _acf .Rows > 0&&!_acf .EndOfBlock &&_egdc ==(_acf .Rows +1){break ;};var _acff []byte ;var _bbfd ,_eab ,_geg int ;_ddf :=_eee ;_befe :=-1;for _befe < len (_gcf [_egdc ]){_bbfd =_adc (_gcf [_egdc ],_befe );_eab =_fgb (_gcf [_egdc ],_gcf [_egdc -1],_befe );_geg =_adc (_gcf [_egdc -1],_eab );if _geg < _bbfd {_acff ,_ddf =_abcb (_acff ,_ddf ,_gag );_befe =_geg ;}else {if _d .Abs (float64 (_eab -_bbfd ))> 3{_acff ,_ddf ,_befe =_dgb (_gcf [_egdc ],_acff ,_ddf ,_befe ,_bbfd );}else {_acff ,_ddf =_faga (_acff ,_ddf ,_bbfd ,_eab );_befe =_bbfd ;};};};_cfb =_acf .appendEncodedRow (_cfb ,_acff ,_eee );if _acf .EncodedByteAlign {_ddf =0;};_eee =_ddf %8;};if _acf .EndOfBlock {_dbgf ,_ :=_cgg (_eee );_cfb =_acf .appendEncodedRow (_cfb ,_dbgf ,_eee );};return _cfb ;};func _dgb (_afdc ,_bcg []byte ,_gedf ,_ggg ,_bfff int )([]byte ,int ,int ){_gfe :=_adc (_afdc ,_bfff );_efde :=_ggg >=0&&_afdc [_ggg ]==_ead ||_ggg ==-1;_bcg ,_gedf =_abcb (_bcg ,_gedf ,_ac );var _cag int ;if _ggg > -1{_cag =_bfff -_ggg ;}else {_cag =_bfff -_ggg -1;};_bcg ,_gedf =_ccd (_bcg ,_gedf ,_cag ,_efde );_efde =!_efde ;_aef :=_gfe -_bfff ;_bcg ,_gedf =_ccd (_bcg ,_gedf ,_aef ,_efde );_ggg =_gfe ;return _bcg ,_gedf ,_ggg ;};var (_ead byte =1;_gaf byte =0;);func _ddec (_eba []byte ,_gfa int )(bool ,int ){_geb :=_gfa ;var (_bfg uint16 ;_ege int ;);_bfg ,_ege ,_gfa =_ge (_eba ,_gfa );if _ege > 4{return false ,_geb ;};_bfg >>=uint (4-_ege );_bfg <<=4;if _bfg !=_c .Code {return false ,_geb ;};return true ,_gfa -4+_ege ;};func _ggb (_gfb []byte ,_da int )(code ,int ,bool ){var (_bgfe uint16 ;_bec int ;_db int ;);_db =_da ;_bgfe ,_bec ,_ =_ge (_gfb ,_da );_fec ,_cdfd :=_abg (_bgfe ,_bec );if !_cdfd {return code {},_db ,false ;};return _fec ,_db +_fec .BitsWritten ,true ;};func _ad (_cfa []byte ,_aa int )(bool ,int ,error ){_gffa :=_aa ;var _cdf =false ;for _ggad :=0;_ggad < 6;_ggad ++{_cdf ,_aa =_dac (_cfa ,_aa );if !_cdf {if _ggad > 1{return false ,_gffa ,_gd ;};_aa =_gffa ;break ;};};return _cdf ,_aa ,nil ;};func _dac (_cade []byte ,_baaa int )(bool ,int ){return _ffb (_cade ,_baaa ,_f )};func _bac (_ded [][]byte ,_bgfb []byte ,_ceb bool ,_eb ,_gfd int )([]byte ,int ){_ega :=_bfd (_bgfb ,_ded [len (_ded )-1],_eb ,_ceb );_df :=_ega +_gfd ;if _eb ==-1{_bgfb =_fde (_bgfb ,_ceb ,_df -_eb -1);}else {_bgfb =_fde (_bgfb ,_ceb ,_df -_eb );};_eb =_df ;return _bgfb ,_eb ;};func _fgb (_eadc ,_bdba []byte ,_caa int )int {_adb :=_adc (_bdba ,_caa );if _adb < len (_bdba )&&(_caa ==-1&&_bdba [_adb ]==_ead ||_caa >=0&&_caa < len (_eadc )&&_eadc [_caa ]==_bdba [_adb ]||_caa >=len (_eadc )&&_eadc [_caa -1]!=_bdba [_adb ]){_adb =_adc (_bdba ,_adb );};return _adb ;};func (_cba *Encoder )encodeG32D (_aba [][]byte )[]byte {var _gcg []byte ;var _gfbb int ;for _edcgc :=0;_edcgc < len (_aba );_edcgc +=_cba .K {if _cba .Rows > 0&&!_cba .EndOfBlock &&_edcgc ==_cba .Rows {break ;};_dddg ,_add :=_bdd (_aba [_edcgc ],_gfbb ,_f );_gcg =_cba .appendEncodedRow (_gcg ,_dddg ,_gfbb );if _cba .EncodedByteAlign {_add =0;};_gfbb =_add ;for _dgc :=_edcgc +1;_dgc < (_edcgc +_cba .K )&&_dgc < len (_aba );_dgc ++{if _cba .Rows > 0&&!_cba .EndOfBlock &&_dgc ==_cba .Rows {break ;};_eeg ,_dfb :=_abcb (nil ,_gfbb ,_ab );var _fbbg ,_dgf ,_dbc int ;_agd :=-1;for _agd < len (_aba [_dgc ]){_fbbg =_adc (_aba [_dgc ],_agd );_dgf =_fgb (_aba [_dgc ],_aba [_dgc -1],_agd );_dbc =_adc (_aba [_dgc -1],_dgf );if _dbc < _fbbg {_eeg ,_dfb =_cce (_eeg ,_dfb );_agd =_dbc ;}else {if _d .Abs (float64 (_dgf -_fbbg ))> 3{_eeg ,_dfb ,_agd =_dgb (_aba [_dgc ],_eeg ,_dfb ,_agd ,_fbbg );}else {_eeg ,_dfb =_faga (_eeg ,_dfb ,_fbbg ,_dgf );_agd =_fbbg ;};};};_gcg =_cba .appendEncodedRow (_gcg ,_eeg ,_gfbb );if _cba .EncodedByteAlign {_dfb =0;};_gfbb =_dfb %8;};};if _cba .EndOfBlock {_deg ,_ :=_eea (_gfbb );_gcg =_cba .appendEncodedRow (_gcg ,_deg ,_gfbb );};return _gcg ;};func _cce (_ggae []byte ,_bcb int )([]byte ,int ){return _abcb (_ggae ,_bcb ,_gag )};func (_gff *Encoder )Decode (encoded []byte )([][]byte ,error ){if _gff .BlackIs1 {_ead =0;_gaf =1;}else {_ead =1;_gaf =0;};if _gff .K ==0{return _gff .decodeG31D (encoded );};if _gff .K > 0{return _gff .decodeG32D (encoded );};if _gff .K < 4{return _gff .decodeG4 (encoded );};return nil ,nil ;};var (_afg =&decodingTreeNode {Val :255};_dc =&decodingTreeNode {Val :255};_ef =&decodingTreeNode {Val :255};);func _ge (_dgd []byte ,_edcg int )(uint16 ,int ,int ){_cga :=_edcg ;_aeb :=_edcg /8;_edcg %=8;if _aeb >=len (_dgd ){return 0,16,_cga ;};_dbg :=byte (0xFF>>uint (_edcg ));_fag :=uint16 ((_dgd [_aeb ]&_dbg )<<uint (_edcg ))<<8;_acc :=8-_edcg ;_aeb ++;_edcg =0;if _aeb >=len (_dgd ){return _fag >>(16-uint (_acc )),16-_acc ,_cga +_acc ;};_fag |=uint16 (_dgd [_aeb ])<<(8-uint (_acc ));_acc +=8;_aeb ++;_edcg =0;if _aeb >=len (_dgd ){return _fag >>(16-uint (_acc )),16-_acc ,_cga +_acc ;};if _acc ==16{return _fag ,0,_cga +_acc ;};_cfcb :=16-_acc ;_fag |=uint16 (_dgd [_aeb ]>>(8-uint (_cfcb )));return _fag ,0,_cga +16;};