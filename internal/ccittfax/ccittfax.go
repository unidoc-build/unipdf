//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_gg "errors";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_gd "io";_gc "math";);func _ddca (_bdde ,_fcfb []byte ,_dee int )int {_fcgf :=_fge (_fcfb ,_dee );if _fcgf < len (_fcfb )&&(_dee ==-1&&_fcfb [_fcgf ]==_gcb ||_dee >=0&&_dee < len (_bdde )&&_bdde [_dee ]==_fcfb [_fcgf ]||_dee >=len (_bdde )&&_bdde [_dee -1]!=_fcfb [_fcgf ]){_fcgf =_fge (_fcfb ,_fcgf );
};return _fcgf ;};func init (){_e =&treeNode {_ddgd :true ,_ecgg :_ge };_d =&treeNode {_ecgg :_ff ,_fbgd :_e };_d ._fdaf =_d ;_c =&tree {_caa :&treeNode {}};if _ec :=_c .fillWithNode (12,0,_d );_ec !=nil {panic (_ec .Error ());};if _cg :=_c .fillWithNode (12,1,_e );
_cg !=nil {panic (_cg .Error ());};_f =&tree {_caa :&treeNode {}};for _ce :=0;_ce < len (_cgf );_ce ++{for _fb :=0;_fb < len (_cgf [_ce ]);_fb ++{if _bg :=_f .fill (_ce +2,int (_cgf [_ce ][_fb ]),int (_gb [_ce ][_fb ]));_bg !=nil {panic (_bg .Error ());
};};};if _a :=_f .fillWithNode (12,0,_d );_a !=nil {panic (_a .Error ());};if _da :=_f .fillWithNode (12,1,_e );_da !=nil {panic (_da .Error ());};_db =&tree {_caa :&treeNode {}};for _bb :=0;_bb < len (_dbb );_bb ++{for _ad :=0;_ad < len (_dbb [_bb ]);
_ad ++{if _eg :=_db .fill (_bb +4,int (_dbb [_bb ][_ad ]),int (_dg [_bb ][_ad ]));_eg !=nil {panic (_eg .Error ());};};};if _ddb :=_db .fillWithNode (12,0,_d );_ddb !=nil {panic (_ddb .Error ());};if _aa :=_db .fillWithNode (12,1,_e );_aa !=nil {panic (_aa .Error ());
};_fc =&tree {_caa :&treeNode {}};if _fbd :=_fc .fill (4,1,_gf );_fbd !=nil {panic (_fbd .Error ());};if _bd :=_fc .fill (3,1,_ca );_bd !=nil {panic (_bd .Error ());};if _fe :=_fc .fill (1,1,0);_fe !=nil {panic (_fe .Error ());};if _ffa :=_fc .fill (3,3,1);
_ffa !=nil {panic (_ffa .Error ());};if _ced :=_fc .fill (6,3,2);_ced !=nil {panic (_ced .Error ());};if _ea :=_fc .fill (7,3,3);_ea !=nil {panic (_ea .Error ());};if _bf :=_fc .fill (3,2,-1);_bf !=nil {panic (_bf .Error ());};if _cea :=_fc .fill (6,2,-2);
_cea !=nil {panic (_cea .Error ());};if _fce :=_fc .fill (7,2,-3);_fce !=nil {panic (_fce .Error ());};};func (_cfg *Encoder )encodeG32D (_aac [][]byte )[]byte {var _aaeb []byte ;var _adcc int ;for _ggae :=0;_ggae < len (_aac );_ggae +=_cfg .K {if _cfg .Rows > 0&&!_cfg .EndOfBlock &&_ggae ==_cfg .Rows {break ;
};_afe ,_gdc :=_efaf (_aac [_ggae ],_adcc ,_cd );_aaeb =_cfg .appendEncodedRow (_aaeb ,_afe ,_adcc );if _cfg .EncodedByteAlign {_gdc =0;};_adcc =_gdc ;for _gdgd :=_ggae +1;_gdgd < (_ggae +_cfg .K )&&_gdgd < len (_aac );_gdgd ++{if _cfg .Rows > 0&&!_cfg .EndOfBlock &&_gdgd ==_cfg .Rows {break ;
};_cadc ,_dff :=_effg (nil ,_adcc ,_ed );var _cde ,_adf ,_edf int ;_dbfd :=-1;for _dbfd < len (_aac [_gdgd ]){_cde =_fge (_aac [_gdgd ],_dbfd );_adf =_ddca (_aac [_gdgd ],_aac [_gdgd -1],_dbfd );_edf =_fge (_aac [_gdgd -1],_adf );if _edf < _cde {_cadc ,_dff =_dace (_cadc ,_dff );
_dbfd =_edf ;}else {if _gc .Abs (float64 (_adf -_cde ))> 3{_cadc ,_dff ,_dbfd =_feda (_aac [_gdgd ],_cadc ,_dff ,_dbfd ,_cde );}else {_cadc ,_dff =_gceb (_cadc ,_dff ,_cde ,_adf );_dbfd =_cde ;};};};_aaeb =_cfg .appendEncodedRow (_aaeb ,_cadc ,_adcc );
if _cfg .EncodedByteAlign {_dff =0;};_adcc =_dff %8;};};if _cfg .EndOfBlock {_bcf ,_ :=_gaa (_adcc );_aaeb =_cfg .appendEncodedRow (_aaeb ,_bcf ,_adcc );};return _aaeb ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_bgb :=&Decoder {_eec :_b .NewReader (data ),_ffd :options .Columns ,_dgd :options .Rows ,_dgc :options .DamagedRowsBeforeError ,_dce :make ([]byte ,(options .Columns +7)/8),_eb :make ([]int ,options .Columns +2),_bgc :make ([]int ,options .Columns +2),_dac :options .EncodedByteAligned ,_ggb :options .BlackIsOne ,_aba :options .EndOfLine ,_fed :options .EndOfBlock };
switch {case options .K ==0:_bgb ._dea =_ag ;if len (data )< 20{return nil ,_gg .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_gcd :=data [:20];if _gcd [0]!=0||(_gcd [1]>>4!=1&&_gcd [1]!=1){_bgb ._dea =_gbe ;
_gaf :=(uint16 (_gcd [0])<<8+uint16 (_gcd [1]&0xff))>>4;for _fee :=12;_fee < 160;_fee ++{_gaf =(_gaf <<1)+uint16 ((_gcd [_fee /8]>>uint16 (7-(_fee %8)))&0x01);if _gaf &0xfff==1{_bgb ._dea =_ag ;break ;};};};case options .K < 0:_bgb ._dea =_fbdd ;case options .K > 0:_bgb ._dea =_ag ;
_bgb ._ee =true ;};switch _bgb ._dea {case _gbe ,_ag ,_fbdd :default:return nil ,_gg .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _bgb ,nil ;};func (_aef *Decoder )decodeRowType6 ()error {if _aef ._dac {_aef ._eec .Align ();};if _aef ._fed {_aef ._eec .Mark ();_eab ,_ef :=_aef .tryFetchEOL ();if _ef !=nil {return _ef ;};if _eab {_eab ,_ef =_aef .tryFetchEOL ();if _ef !=nil {return _ef ;
};if _eab {return _gd .EOF ;};};_aef ._eec .Reset ();};return _aef .decode2D ();};func _fge (_ecg []byte ,_cdda int )int {if _cdda >=len (_ecg ){return _cdda ;};if _cdda < -1{_cdda =-1;};var _efe byte ;if _cdda > -1{_efe =_ecg [_cdda ];}else {_efe =_gcb ;
};_ebe :=_cdda +1;for _ebe < len (_ecg ){if _ecg [_ebe ]!=_efe {break ;};_ebe ++;};return _ebe ;};func (_cdg *Decoder )decodeRowType2 ()error {if _cdg ._dac {_cdg ._eec .Align ();};if _egg :=_cdg .decode1D ();_egg !=nil {return _egg ;};return nil ;};func (_bdc *Decoder )decodeG32D ()error {_bdc ._eed =_bdc ._fd ;
_bdc ._bgc ,_bdc ._eb =_bdc ._eb ,_bdc ._bgc ;_fag :=true ;var (_afb bool ;_fdd int ;_gee error ;);_bdc ._fd =0;_ecf :for _fdd < _bdc ._ffd {_cc :=_fc ._caa ;for {_afb ,_gee =_bdc ._eec .ReadBool ();if _gee !=nil {return _gee ;};_cc =_cc .walk (_afb );
if _cc ==nil {continue _ecf ;};if !_cc ._ddgd {continue ;};switch _cc ._ecgg {case _ca :var _fae int ;if _fag {_fae ,_gee =_bdc .decodeRun (_db );}else {_fae ,_gee =_bdc .decodeRun (_f );};if _gee !=nil {return _gee ;};_fdd +=_fae ;_bdc ._bgc [_bdc ._fd ]=_fdd ;
_bdc ._fd ++;if _fag {_fae ,_gee =_bdc .decodeRun (_f );}else {_fae ,_gee =_bdc .decodeRun (_db );};if _gee !=nil {return _gee ;};_fdd +=_fae ;_bdc ._bgc [_bdc ._fd ]=_fdd ;_bdc ._fd ++;case _gf :_cad :=_bdc .getNextChangingElement (_fdd ,_fag )+1;if _cad >=_bdc ._eed {_fdd =_bdc ._ffd ;
}else {_fdd =_bdc ._eb [_cad ];};default:_beb :=_bdc .getNextChangingElement (_fdd ,_fag );if _beb >=_bdc ._eed ||_beb ==-1{_fdd =_bdc ._ffd +_cc ._ecgg ;}else {_fdd =_bdc ._eb [_beb ]+_cc ._ecgg ;};_bdc ._bgc [_bdc ._fd ]=_fdd ;_bdc ._fd ++;_fag =!_fag ;
};continue _ecf ;};};return nil ;};func init (){_ab =make (map[int ]code );_ab [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ab [1]=code {Code :2<<(5+8),BitsWritten :3};_ab [2]=code {Code :3<<(6+8),BitsWritten :2};_ab [3]=code {Code :2<<(6+8),BitsWritten :2};
_ab [4]=code {Code :3<<(5+8),BitsWritten :3};_ab [5]=code {Code :3<<(4+8),BitsWritten :4};_ab [6]=code {Code :2<<(4+8),BitsWritten :4};_ab [7]=code {Code :3<<(3+8),BitsWritten :5};_ab [8]=code {Code :5<<(2+8),BitsWritten :6};_ab [9]=code {Code :4<<(2+8),BitsWritten :6};
_ab [10]=code {Code :4<<(1+8),BitsWritten :7};_ab [11]=code {Code :5<<(1+8),BitsWritten :7};_ab [12]=code {Code :7<<(1+8),BitsWritten :7};_ab [13]=code {Code :4<<8,BitsWritten :8};_ab [14]=code {Code :7<<8,BitsWritten :8};_ab [15]=code {Code :12<<8,BitsWritten :9};
_ab [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ab [17]=code {Code :6<<8,BitsWritten :10};_ab [18]=code {Code :2<<8,BitsWritten :10};_ab [19]=code {Code :12<<8|7<<5,BitsWritten :11};_ab [20]=code {Code :13<<8,BitsWritten :11};_ab [21]=code {Code :13<<8|4<<5,BitsWritten :11};
_ab [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ab [23]=code {Code :5<<8,BitsWritten :11};_ab [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ab [25]=code {Code :3<<8,BitsWritten :11};_ab [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ab [27]=code {Code :12<<8|11<<4,BitsWritten :12};
_ab [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ab [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ab [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ab [31]=code {Code :6<<8|9<<4,BitsWritten :12};_ab [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ab [33]=code {Code :6<<8|11<<4,BitsWritten :12};
_ab [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ab [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ab [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ab [37]=code {Code :13<<8|5<<4,BitsWritten :12};_ab [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ab [39]=code {Code :13<<8|7<<4,BitsWritten :12};
_ab [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ab [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ab [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ab [43]=code {Code :13<<8|11<<4,BitsWritten :12};_ab [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ab [45]=code {Code :5<<8|5<<4,BitsWritten :12};
_ab [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ab [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ab [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ab [49]=code {Code :6<<8|5<<4,BitsWritten :12};_ab [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ab [51]=code {Code :5<<8|3<<4,BitsWritten :12};
_ab [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ab [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ab [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ab [55]=code {Code :2<<8|7<<4,BitsWritten :12};_ab [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ab [57]=code {Code :5<<8|8<<4,BitsWritten :12};
_ab [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ab [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ab [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ab [61]=code {Code :5<<8|10<<4,BitsWritten :12};_ab [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ab [63]=code {Code :6<<8|7<<4,BitsWritten :12};
_de =make (map[int ]code );_de [0]=code {Code :53<<8,BitsWritten :8};_de [1]=code {Code :7<<(2+8),BitsWritten :6};_de [2]=code {Code :7<<(4+8),BitsWritten :4};_de [3]=code {Code :8<<(4+8),BitsWritten :4};_de [4]=code {Code :11<<(4+8),BitsWritten :4};_de [5]=code {Code :12<<(4+8),BitsWritten :4};
_de [6]=code {Code :14<<(4+8),BitsWritten :4};_de [7]=code {Code :15<<(4+8),BitsWritten :4};_de [8]=code {Code :19<<(3+8),BitsWritten :5};_de [9]=code {Code :20<<(3+8),BitsWritten :5};_de [10]=code {Code :7<<(3+8),BitsWritten :5};_de [11]=code {Code :8<<(3+8),BitsWritten :5};
_de [12]=code {Code :8<<(2+8),BitsWritten :6};_de [13]=code {Code :3<<(2+8),BitsWritten :6};_de [14]=code {Code :52<<(2+8),BitsWritten :6};_de [15]=code {Code :53<<(2+8),BitsWritten :6};_de [16]=code {Code :42<<(2+8),BitsWritten :6};_de [17]=code {Code :43<<(2+8),BitsWritten :6};
_de [18]=code {Code :39<<(1+8),BitsWritten :7};_de [19]=code {Code :12<<(1+8),BitsWritten :7};_de [20]=code {Code :8<<(1+8),BitsWritten :7};_de [21]=code {Code :23<<(1+8),BitsWritten :7};_de [22]=code {Code :3<<(1+8),BitsWritten :7};_de [23]=code {Code :4<<(1+8),BitsWritten :7};
_de [24]=code {Code :40<<(1+8),BitsWritten :7};_de [25]=code {Code :43<<(1+8),BitsWritten :7};_de [26]=code {Code :19<<(1+8),BitsWritten :7};_de [27]=code {Code :36<<(1+8),BitsWritten :7};_de [28]=code {Code :24<<(1+8),BitsWritten :7};_de [29]=code {Code :2<<8,BitsWritten :8};
_de [30]=code {Code :3<<8,BitsWritten :8};_de [31]=code {Code :26<<8,BitsWritten :8};_de [32]=code {Code :27<<8,BitsWritten :8};_de [33]=code {Code :18<<8,BitsWritten :8};_de [34]=code {Code :19<<8,BitsWritten :8};_de [35]=code {Code :20<<8,BitsWritten :8};
_de [36]=code {Code :21<<8,BitsWritten :8};_de [37]=code {Code :22<<8,BitsWritten :8};_de [38]=code {Code :23<<8,BitsWritten :8};_de [39]=code {Code :40<<8,BitsWritten :8};_de [40]=code {Code :41<<8,BitsWritten :8};_de [41]=code {Code :42<<8,BitsWritten :8};
_de [42]=code {Code :43<<8,BitsWritten :8};_de [43]=code {Code :44<<8,BitsWritten :8};_de [44]=code {Code :45<<8,BitsWritten :8};_de [45]=code {Code :4<<8,BitsWritten :8};_de [46]=code {Code :5<<8,BitsWritten :8};_de [47]=code {Code :10<<8,BitsWritten :8};
_de [48]=code {Code :11<<8,BitsWritten :8};_de [49]=code {Code :82<<8,BitsWritten :8};_de [50]=code {Code :83<<8,BitsWritten :8};_de [51]=code {Code :84<<8,BitsWritten :8};_de [52]=code {Code :85<<8,BitsWritten :8};_de [53]=code {Code :36<<8,BitsWritten :8};
_de [54]=code {Code :37<<8,BitsWritten :8};_de [55]=code {Code :88<<8,BitsWritten :8};_de [56]=code {Code :89<<8,BitsWritten :8};_de [57]=code {Code :90<<8,BitsWritten :8};_de [58]=code {Code :91<<8,BitsWritten :8};_de [59]=code {Code :74<<8,BitsWritten :8};
_de [60]=code {Code :75<<8,BitsWritten :8};_de [61]=code {Code :50<<8,BitsWritten :8};_de [62]=code {Code :51<<8,BitsWritten :8};_de [63]=code {Code :52<<8,BitsWritten :8};_dbf =make (map[int ]code );_dbf [64]=code {Code :3<<8|3<<6,BitsWritten :10};_dbf [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_dbf [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dbf [256]=code {Code :5<<8|11<<4,BitsWritten :12};_dbf [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dbf [384]=code {Code :3<<8|4<<4,BitsWritten :12};_dbf [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_dbf [512]=code {Code :3<<8|12<<3,BitsWritten :13};_dbf [576]=code {Code :3<<8|13<<3,BitsWritten :13};_dbf [640]=code {Code :2<<8|10<<3,BitsWritten :13};_dbf [704]=code {Code :2<<8|11<<3,BitsWritten :13};_dbf [768]=code {Code :2<<8|12<<3,BitsWritten :13};
_dbf [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dbf [896]=code {Code :3<<8|18<<3,BitsWritten :13};_dbf [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dbf [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_dbf [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_dbf [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dbf [1216]=code {Code :119<<3,BitsWritten :13};_dbf [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_dbf [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_dbf [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_dbf [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dbf [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_dbf [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_dbf [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_dbf [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_feb =make (map[int ]code );_feb [64]=code {Code :27<<(3+8),BitsWritten :5};_feb [128]=code {Code :18<<(3+8),BitsWritten :5};_feb [192]=code {Code :23<<(2+8),BitsWritten :6};_feb [256]=code {Code :55<<(1+8),BitsWritten :7};_feb [320]=code {Code :54<<8,BitsWritten :8};
_feb [384]=code {Code :55<<8,BitsWritten :8};_feb [448]=code {Code :100<<8,BitsWritten :8};_feb [512]=code {Code :101<<8,BitsWritten :8};_feb [576]=code {Code :104<<8,BitsWritten :8};_feb [640]=code {Code :103<<8,BitsWritten :8};_feb [704]=code {Code :102<<8,BitsWritten :9};
_feb [768]=code {Code :102<<8|1<<7,BitsWritten :9};_feb [832]=code {Code :105<<8,BitsWritten :9};_feb [896]=code {Code :105<<8|1<<7,BitsWritten :9};_feb [960]=code {Code :106<<8,BitsWritten :9};_feb [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_feb [1088]=code {Code :107<<8,BitsWritten :9};
_feb [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_feb [1216]=code {Code :108<<8,BitsWritten :9};_feb [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_feb [1344]=code {Code :109<<8,BitsWritten :9};_feb [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_feb [1472]=code {Code :76<<8,BitsWritten :9};
_feb [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_feb [1600]=code {Code :77<<8,BitsWritten :9};_feb [1664]=code {Code :24<<(2+8),BitsWritten :6};_feb [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ddc =make (map[int ]code );_ddc [1792]=code {Code :1<<8,BitsWritten :11};
_ddc [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ddc [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ddc [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ddc [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ddc [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_ddc [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_ddc [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ddc [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ddc [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ddc [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_ddc [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_ddc [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_abc =make (map[int ]byte );_abc [0]=0xFF;_abc [1]=0xFE;_abc [2]=0xFC;_abc [3]=0xF8;_abc [4]=0xF0;_abc [5]=0xE0;_abc [6]=0xC0;_abc [7]=0x80;_abc [8]=0x00;
};type tiffType int ;func (_bc tiffType )String ()string {switch _bc {case _gbe :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _ag :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _fbdd :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_bebe *Decoder )tryFetchEOL ()(bool ,error ){_faef ,_fcb :=_bebe ._eec .ReadBits (12);if _fcb !=nil {return false ,_fcb ;
};return _faef ==0x1,nil ;};func _efaf (_dae []byte ,_abd int ,_bdd code )([]byte ,int ){_bfc :=true ;var _fbg []byte ;_fbg ,_abd =_effg (nil ,_abd ,_bdd );_accc :=0;var _dfg int ;for _accc < len (_dae ){_dfg ,_accc =_agd (_dae ,_bfc ,_accc );_fbg ,_abd =_cbc (_fbg ,_abd ,_dfg ,_bfc );
_bfc =!_bfc ;};return _fbg ,_abd %8;};func (_bdfg *Decoder )tryFetchEOL1 ()(bool ,error ){_beba ,_fcga :=_bdfg ._eec .ReadBits (13);if _fcga !=nil {return false ,_fcga ;};return _beba ==0x3,nil ;};func (_eef *treeNode )set (_dbff bool ,_cfa *treeNode ){if !_dbff {_eef ._fdaf =_cfa ;
}else {_eef ._fbgd =_cfa ;};};func (_aeb *Decoder )Read (in []byte )(int ,error ){if _aeb ._df !=nil {return 0,_aeb ._df ;};_ggd :=len (in );var (_dgb int ;_cdd int ;);for _ggd !=0{if _aeb ._ggec >=_aeb ._dacg {if _fbddf :=_aeb .fetch ();_fbddf !=nil {_aeb ._df =_fbddf ;
return 0,_fbddf ;};};if _aeb ._dacg ==-1{return _dgb ,_gd .EOF ;};switch {case _ggd <=_aeb ._dacg -_aeb ._ggec :_dga :=_aeb ._dce [_aeb ._ggec :_aeb ._ggec +_ggd ];for _ ,_be :=range _dga {if !_aeb ._ggb {_be =^_be ;};in [_cdd ]=_be ;_cdd ++;};_dgb +=len (_dga );
_aeb ._ggec +=len (_dga );return _dgb ,nil ;default:_abe :=_aeb ._dce [_aeb ._ggec :];for _ ,_eadg :=range _abe {if !_aeb ._ggb {_eadg =^_eadg ;};in [_cdd ]=_eadg ;_cdd ++;};_dgb +=len (_abe );_aeb ._ggec +=len (_abe );_ggd -=len (_abe );};};return _dgb ,nil ;
};func _gaa (_aeg int )([]byte ,int ){var _febg []byte ;for _bdef :=0;_bdef < 6;_bdef ++{_febg ,_aeg =_effg (_febg ,_aeg ,_cd );};return _febg ,_aeg %8;};func _effg (_gcc []byte ,_baf int ,_edfg code )([]byte ,int ){_ggdf :=0;for _ggdf < _edfg .BitsWritten {_ccd :=_baf /8;
_adcg :=_baf %8;if _ccd >=len (_gcc ){_gcc =append (_gcc ,0);};_dcg :=8-_adcg ;_geg :=_edfg .BitsWritten -_ggdf ;if _dcg > _geg {_dcg =_geg ;};if _ggdf < 8{_gcc [_ccd ]=_gcc [_ccd ]|byte (_edfg .Code >>uint (8+_adcg -_ggdf ))&_abc [8-_dcg -_adcg ];}else {_gcc [_ccd ]=_gcc [_ccd ]|(byte (_edfg .Code <<uint (_ggdf -8))&_abc [8-_dcg ])>>uint (_adcg );
};_baf +=_dcg ;_ggdf +=_dcg ;};return _gcc ,_baf ;};func _agd (_bfef []byte ,_bag bool ,_ggge int )(int ,int ){_ddd :=0;for _ggge < len (_bfef ){if _bag {if _bfef [_ggge ]!=_gcb {break ;};}else {if _bfef [_ggge ]!=_geebc {break ;};};_ddd ++;_ggge ++;};
return _ddd ,_ggge ;};func _aace (_agag int )([]byte ,int ){var _gfa []byte ;for _gbga :=0;_gbga < 2;_gbga ++{_gfa ,_agag =_effg (_gfa ,_agag ,_ead );};return _gfa ,_agag %8;};var (_ab map[int ]code ;_de map[int ]code ;_dbf map[int ]code ;_feb map[int ]code ;
_ddc map[int ]code ;_abc map[int ]byte ;_ead =code {Code :1<<4,BitsWritten :12};_cd =code {Code :3<<3,BitsWritten :13};_ed =code {Code :2<<3,BitsWritten :13};_gdb =code {Code :1<<12,BitsWritten :4};_ffe =code {Code :1<<13,BitsWritten :3};_dc =code {Code :1<<15,BitsWritten :1};
_ae =code {Code :3<<13,BitsWritten :3};_dcf =code {Code :3<<10,BitsWritten :6};_dgf =code {Code :3<<9,BitsWritten :7};_cgc =code {Code :2<<13,BitsWritten :3};_gef =code {Code :2<<10,BitsWritten :6};_ac =code {Code :2<<9,BitsWritten :7};);func (_eggd *Decoder )decode2D ()error {_eggd ._eed =_eggd ._fd ;
_eggd ._bgc ,_eggd ._eb =_eggd ._eb ,_eggd ._bgc ;_bcc :=true ;var (_fg bool ;_cb int ;_edc error ;);_eggd ._fd =0;_cgd :for _cb < _eggd ._ffd {_eae :=_fc ._caa ;for {_fg ,_edc =_eggd ._eec .ReadBool ();if _edc !=nil {return _edc ;};_eae =_eae .walk (_fg );
if _eae ==nil {continue _cgd ;};if !_eae ._ddgd {continue ;};switch _eae ._ecgg {case _ca :var _dde int ;if _bcc {_dde ,_edc =_eggd .decodeRun (_db );}else {_dde ,_edc =_eggd .decodeRun (_f );};if _edc !=nil {return _edc ;};_cb +=_dde ;_eggd ._bgc [_eggd ._fd ]=_cb ;
_eggd ._fd ++;if _bcc {_dde ,_edc =_eggd .decodeRun (_f );}else {_dde ,_edc =_eggd .decodeRun (_db );};if _edc !=nil {return _edc ;};_cb +=_dde ;_eggd ._bgc [_eggd ._fd ]=_cb ;_eggd ._fd ++;case _gf :_ccb :=_eggd .getNextChangingElement (_cb ,_bcc )+1;
if _ccb >=_eggd ._eed {_cb =_eggd ._ffd ;}else {_cb =_eggd ._eb [_ccb ];};default:_fde :=_eggd .getNextChangingElement (_cb ,_bcc );if _fde >=_eggd ._eed ||_fde ==-1{_cb =_eggd ._ffd +_eae ._ecgg ;}else {_cb =_eggd ._eb [_fde ]+_eae ._ecgg ;};_eggd ._bgc [_eggd ._fd ]=_cb ;
_eggd ._fd ++;_bcc =!_bcc ;};continue _cgd ;};};return nil ;};func (_ebb *Decoder )decodeRowType4 ()error {if !_ebb ._ee {return _ebb .decoderRowType41D ();};if _ebb ._dac {_ebb ._eec .Align ();};_ebb ._eec .Mark ();_fdc ,_bba :=_ebb .tryFetchEOL ();if _bba !=nil {return _bba ;
};if !_fdc &&_ebb ._aba {_ebb ._aga ++;if _ebb ._aga > _ebb ._dgc {return _acf ;};_ebb ._eec .Reset ();};if !_fdc {_ebb ._eec .Reset ();};_dacf ,_bba :=_ebb ._eec .ReadBool ();if _bba !=nil {return _bba ;};if _dacf {if _fdc &&_ebb ._fed {if _bba =_ebb .tryFetchRTC2D ();
_bba !=nil {return _bba ;};};_bba =_ebb .decode1D ();}else {_bba =_ebb .decode2D ();};if _bba !=nil {return _bba ;};return nil ;};var _gb =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func (_ggg *Decoder )fetch ()error {if _ggg ._dacg ==-1{return nil ;};if _ggg ._ggec < _ggg ._dacg {return nil ;};_ggg ._dacg =0;_gga :=_ggg .decodeRow ();if _gga !=nil {if !_gg .Is (_gga ,_gd .EOF ){return _gga ;};if _ggg ._dacg !=0{return _gga ;};_ggg ._dacg =-1;
};_ggg ._ggec =0;return nil ;};func (_bbe *Decoder )decoderRowType41D ()error {if _bbe ._dac {_bbe ._eec .Align ();};_bbe ._eec .Mark ();var (_aaf bool ;_fedc error ;);if _bbe ._aba {_aaf ,_fedc =_bbe .tryFetchEOL ();if _fedc !=nil {return _fedc ;};if !_aaf {return _acf ;
};}else {_aaf ,_fedc =_bbe .looseFetchEOL ();if _fedc !=nil {return _fedc ;};};if !_aaf {_bbe ._eec .Reset ();};if _aaf &&_bbe ._fed {_bbe ._eec .Mark ();for _gea :=0;_gea < 5;_gea ++{_aaf ,_fedc =_bbe .tryFetchEOL ();if _fedc !=nil {if _gg .Is (_fedc ,_gd .EOF ){if _gea ==0{break ;
};return _cef ;};};if _aaf {continue ;};if _gea > 0{return _cef ;};break ;};if _aaf {return _gd .EOF ;};_bbe ._eec .Reset ();};if _fedc =_bbe .decode1D ();_fedc !=nil {return _fedc ;};return nil ;};const (_ tiffType =iota ;_gbe ;_ag ;_fbdd ;);var (_cef =_gg .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_acf =_gg .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););type Decoder struct{_ffd int ;_dgd int ;_ga int ;_dce []byte ;_dgc int ;_ee bool ;_fca bool ;_aag bool ;_ggb bool ;
_aba bool ;_fed bool ;_dac bool ;_dacg int ;_ggec int ;_eb []int ;_bgc []int ;_eed int ;_fd int ;_aga int ;_fda int ;_eec *_b .Reader ;_dea tiffType ;_df error ;};func (_ecb *Encoder )Encode (pixels [][]byte )[]byte {if _ecb .BlackIs1 {_gcb =0;_geebc =1;
}else {_gcb =1;_geebc =0;};if _ecb .K ==0{return _ecb .encodeG31D (pixels );};if _ecb .K > 0{return _ecb .encodeG32D (pixels );};if _ecb .K < 0{return _ecb .encodeG4 (pixels );};return nil ;};func (_bfa *Encoder )encodeG31D (_gaff [][]byte )[]byte {var _gcec []byte ;
_cgb :=0;for _gfc :=range _gaff {if _bfa .Rows > 0&&!_bfa .EndOfBlock &&_gfc ==_bfa .Rows {break ;};_fbf ,_gab :=_efaf (_gaff [_gfc ],_cgb ,_ead );_gcec =_bfa .appendEncodedRow (_gcec ,_fbf ,_cgb );if _bfa .EncodedByteAlign {_gab =0;};_cgb =_gab ;};if _bfa .EndOfBlock {_gade ,_ :=_ddec (_cgb );
_gcec =_bfa .appendEncodedRow (_gcec ,_gade ,_cgb );};return _gcec ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_gfad *treeNode )walk (_ffc bool )*treeNode {if _ffc {return _gfad ._fbgd ;
};return _gfad ._fdaf ;};func _ddec (_faga int )([]byte ,int ){var _bfe []byte ;for _fdf :=0;_fdf < 6;_fdf ++{_bfe ,_faga =_effg (_bfe ,_faga ,_ead );};return _bfe ,_faga %8;};type code struct{Code uint16 ;BitsWritten int ;};func _cbc (_cag []byte ,_deag int ,_cfd int ,_ccg bool )([]byte ,int ){var (_gaef code ;
_daf bool ;);for !_daf {_gaef ,_cfd ,_daf =_dda (_cfd ,_ccg );_cag ,_deag =_effg (_cag ,_deag ,_gaef );};return _cag ,_deag ;};func (_aae *Decoder )looseFetchEOL ()(bool ,error ){_efg ,_fdag :=_aae ._eec .ReadBits (12);if _fdag !=nil {return false ,_fdag ;
};switch _efg {case 0x1:return true ,nil ;case 0x0:for {_egc ,_efa :=_aae ._eec .ReadBool ();if _efa !=nil {return false ,_efa ;};if _egc {return true ,nil ;};};default:return false ,nil ;};};type tree struct{_caa *treeNode };func (_aed *Decoder )getNextChangingElement (_ggda int ,_ba bool )int {_bbec :=0;
if !_ba {_bbec =1;};_gbb :=int (uint32 (_aed ._fda )&0xFFFFFFFE)+_bbec ;if _gbb > 2{_gbb -=2;};if _ggda ==0{return _gbb ;};for _ada :=_gbb ;_ada < _aed ._eed ;_ada +=2{if _ggda < _aed ._eb [_ada ]{_aed ._fda =_ada ;return _ada ;};};return -1;};func (_fcf *Encoder )encodeG4 (_ffb [][]byte )[]byte {_fff :=make ([][]byte ,len (_ffb ));
copy (_fff ,_ffb );_fff =_cab (_fff );var _acc []byte ;var _gbg int ;for _eag :=1;_eag < len (_fff );_eag ++{if _fcf .Rows > 0&&!_fcf .EndOfBlock &&_eag ==(_fcf .Rows +1){break ;};var _eff []byte ;var _cgdf ,_baa ,_efff int ;_agf :=_gbg ;_gcg :=-1;for _gcg < len (_fff [_eag ]){_cgdf =_fge (_fff [_eag ],_gcg );
_baa =_ddca (_fff [_eag ],_fff [_eag -1],_gcg );_efff =_fge (_fff [_eag -1],_baa );if _efff < _cgdf {_eff ,_agf =_effg (_eff ,_agf ,_gdb );_gcg =_efff ;}else {if _gc .Abs (float64 (_baa -_cgdf ))> 3{_eff ,_agf ,_gcg =_feda (_fff [_eag ],_eff ,_agf ,_gcg ,_cgdf );
}else {_eff ,_agf =_gceb (_eff ,_agf ,_cgdf ,_baa );_gcg =_cgdf ;};};};_acc =_fcf .appendEncodedRow (_acc ,_eff ,_gbg );if _fcf .EncodedByteAlign {_agf =0;};_gbg =_agf %8;};if _fcf .EndOfBlock {_fef ,_ :=_aace (_gbg );_acc =_fcf .appendEncodedRow (_acc ,_fef ,_gbg );
};return _acc ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_bdf *Decoder )decodeRun (_ebf *tree )(int ,error ){var _ggbg int ;_dcef :=_ebf ._caa ;
for {_gfg ,_cgcg :=_bdf ._eec .ReadBool ();if _cgcg !=nil {return 0,_cgcg ;};_dcef =_dcef .walk (_gfg );if _dcef ==nil {return 0,_gg .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _dcef ._ddgd {_ggbg +=_dcef ._ecgg ;switch {case _dcef ._ecgg >=64:_dcef =_ebf ._caa ;case _dcef ._ecgg >=0:return _ggbg ,nil ;default:return _bdf ._ffd ,nil ;};};};};func _feda (_faa ,_aegb []byte ,_bdg ,_ecbb ,_gbd int )([]byte ,int ,int ){_eded :=_fge (_faa ,_gbd );
_bfcb :=_ecbb >=0&&_faa [_ecbb ]==_gcb ||_ecbb ==-1;_aegb ,_bdg =_effg (_aegb ,_bdg ,_ffe );var _dbd int ;if _ecbb > -1{_dbd =_gbd -_ecbb ;}else {_dbd =_gbd -_ecbb -1;};_aegb ,_bdg =_cbc (_aegb ,_bdg ,_dbd ,_bfcb );_bfcb =!_bfcb ;_ffbf :=_eded -_gbd ;_aegb ,_bdg =_cbc (_aegb ,_bdg ,_ffbf ,_bfcb );
_ecbb =_eded ;return _aegb ,_bdg ,_ecbb ;};func _gffd (_ebg ,_bebac []byte ,_bed int ,_aaec bool )int {_gbgf :=_fge (_bebac ,_bed );if _gbgf < len (_bebac )&&(_bed ==-1&&_bebac [_gbgf ]==_gcb ||_bed >=0&&_bed < len (_ebg )&&_ebg [_bed ]==_bebac [_gbgf ]||_bed >=len (_ebg )&&_aaec &&_bebac [_gbgf ]==_gcb ||_bed >=len (_ebg )&&!_aaec &&_bebac [_gbgf ]==_geebc ){_gbgf =_fge (_bebac ,_gbgf );
};return _gbgf ;};func (_afeb *tree )fill (_gaefc ,_bbb ,_gdf int )error {_agff :=_afeb ._caa ;for _fgc :=0;_fgc < _gaefc ;_fgc ++{_gbee :=_gaefc -1-_fgc ;_bab :=((_bbb >>uint (_gbee ))&1)!=0;_acd :=_agff .walk (_bab );if _acd !=nil {if _acd ._ddgd {return _gg .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_agff =_acd ;continue ;};_acd =&treeNode {};if _fgc ==_gaefc -1{_acd ._ecgg =_gdf ;_acd ._ddgd =true ;};if _bbb ==0{_acd ._edede =true ;};_agff .set (_bab ,_acd );_agff =_acd ;};return nil ;};func (_bgcf *Encoder )appendEncodedRow (_gadg ,_fdcc []byte ,_bgg int )[]byte {if len (_gadg )> 0&&_bgg !=0&&!_bgcf .EncodedByteAlign {_gadg [len (_gadg )-1]=_gadg [len (_gadg )-1]|_fdcc [0];
_gadg =append (_gadg ,_fdcc [1:]...);}else {_gadg =append (_gadg ,_fdcc ...);};return _gadg ;};func _dda (_ede int ,_gfe bool )(code ,int ,bool ){if _ede < 64{if _gfe {return _de [_ede ],0,true ;};return _ab [_ede ],0,true ;};_dag :=_ede /64;if _dag > 40{return _ddc [2560],_ede -2560,false ;
};if _dag > 27{return _ddc [_dag *64],_ede -_dag *64,false ;};if _gfe {return _feb [_dag *64],_ede -_dag *64,false ;};return _dbf [_dag *64],_ede -_dag *64,false ;};var _dg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_gce *Decoder )decode1D ()error {var (_efb int ;_ddg error ;);_bef :=true ;_gce ._fd =0;for {var _bbeg int ;if _bef {_bbeg ,_ddg =_gce .decodeRun (_db );}else {_bbeg ,_ddg =_gce .decodeRun (_f );};if _ddg !=nil {return _ddg ;};_efb +=_bbeg ;_gce ._bgc [_gce ._fd ]=_efb ;
_gce ._fd ++;_bef =!_bef ;if _efb >=_gce ._ffd {break ;};};return nil ;};func _dace (_bfg []byte ,_afed int )([]byte ,int ){return _effg (_bfg ,_afed ,_gdb )};func _gafa (_cagf ,_cge int )code {var _fceg code ;switch _cge -_cagf {case -1:_fceg =_ae ;case -2:_fceg =_dcf ;
case -3:_fceg =_dgf ;case 0:_fceg =_dc ;case 1:_fceg =_cgc ;case 2:_fceg =_gef ;case 3:_fceg =_ac ;};return _fceg ;};func (_efae *Decoder )tryFetchRTC2D ()(_ccc error ){_efae ._eec .Mark ();var _geeb bool ;for _ddf :=0;_ddf < 5;_ddf ++{_geeb ,_ccc =_efae .tryFetchEOL1 ();
if _ccc !=nil {if _gg .Is (_ccc ,_gd .EOF ){if _ddf ==0{break ;};return _cef ;};};if _geeb {continue ;};if _ddf > 0{return _cef ;};break ;};if _geeb {return _gd .EOF ;};_efae ._eec .Reset ();return _ccc ;};var (_gcb byte =1;_geebc byte =0;);type treeNode struct{_fdaf *treeNode ;
_fbgd *treeNode ;_ecgg int ;_edede bool ;_ddgd bool ;};func _gceb (_cgg []byte ,_gcdd ,_fea ,_abcg int )([]byte ,int ){_fdab :=_gafa (_fea ,_abcg );_cgg ,_gcdd =_effg (_cgg ,_gcdd ,_fdab );return _cgg ,_gcdd ;};func _cab (_ccdd [][]byte )[][]byte {_dca :=make ([]byte ,len (_ccdd [0]));
for _cfb :=range _dca {_dca [_cfb ]=_gcb ;};_ccdd =append (_ccdd ,[]byte {});for _cged :=len (_ccdd )-1;_cged > 0;_cged --{_ccdd [_cged ]=_ccdd [_cged -1];};_ccdd [0]=_dca ;return _ccdd ;};var _dbb =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
var (_e *treeNode ;_d *treeNode ;_f *tree ;_db *tree ;_c *tree ;_fc *tree ;_ge =-2000;_ff =-1000;_gf =-3000;_ca =-4000;);func (_bee *Decoder )decodeRow ()(_af error ){if !_bee ._fed &&_bee ._dgd > 0&&_bee ._dgd ==_bee ._ga {return _gd .EOF ;};switch _bee ._dea {case _gbe :_af =_bee .decodeRowType2 ();
case _ag :_af =_bee .decodeRowType4 ();case _fbdd :_af =_bee .decodeRowType6 ();};if _af !=nil {return _af ;};_cf :=0;_bga :=true ;_bee ._fda =0;for _bde :=0;_bde < _bee ._fd ;_bde ++{_fcg :=_bee ._ffd ;if _bde !=_bee ._fd {_fcg =_bee ._bgc [_bde ];};if _fcg > _bee ._ffd {_fcg =_bee ._ffd ;
};_feg :=_cf /8;for _cf %8!=0&&_fcg -_cf > 0{var _gae byte ;if !_bga {_gae =1<<uint (7-(_cf %8));};_bee ._dce [_feg ]|=_gae ;_cf ++;};if _cf %8==0{_feg =_cf /8;var _gad byte ;if !_bga {_gad =0xff;};for _fcg -_cf > 7{_bee ._dce [_feg ]=_gad ;_cf +=8;_feg ++;
};};for _fcg -_cf > 0{if _cf %8==0{_bee ._dce [_feg ]=0;};var _abef byte ;if !_bga {_abef =1<<uint (7-(_cf %8));};_bee ._dce [_feg ]|=_abef ;_cf ++;};_bga =!_bga ;};if _cf !=_bee ._ffd {return _gg .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_bee ._dacg =(_cf +7)/8;_bee ._ga ++;return nil ;};var _cgf =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_agac *tree )fillWithNode (_ffff ,_ggc int ,_abed *treeNode )error {_afd :=_agac ._caa ;for _abad :=0;_abad < _ffff ;_abad ++{_edfb :=uint (_ffff -1-_abad );_dgaf :=((_ggc >>_edfb )&1)!=0;_fcd :=_afd .walk (_dgaf );if _fcd !=nil {if _fcd ._ddgd {return _gg .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_afd =_fcd ;continue ;};if _abad ==_ffff -1{_fcd =_abed ;}else {_fcd =&treeNode {};};if _ggc ==0{_fcd ._edede =true ;};_afd .set (_dgaf ,_fcd );_afd =_fcd ;};return nil ;};