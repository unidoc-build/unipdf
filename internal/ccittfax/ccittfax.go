//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_a "errors";_ae "math";);func _gge (_cegc []byte ,_fdb int )(bool ,int ,error ){_ega :=_fdb ;var _cdcf =false ;for _dda :=0;_dda < 6;_dda ++{_cdcf ,_fdb =_afcd (_cegc ,_fdb );if !_cdcf {if _dda > 1{return false ,_ega ,_gc ;};_fdb =_ega ;break ;};};return _cdcf ,_fdb ,nil ;};func _eff (_acc uint16 ,_afc int ,_cbc bool )(int ,code ){var _bff *int ;var _ggge *code ;if _cbc {_bff ,_ggge =_aebf (_ab ,_acc ,_afc );}else {_bff ,_ggge =_aebf (_aaa ,_acc ,_afc );};if _bff ==nil {return -1,code {};};return *_bff ,*_ggge ;};func init (){_e =make (map[int ]code );_e [0]=code {Code :13<<8|3<<6,BitsWritten :10};_e [1]=code {Code :2<<(5+8),BitsWritten :3};_e [2]=code {Code :3<<(6+8),BitsWritten :2};_e [3]=code {Code :2<<(6+8),BitsWritten :2};_e [4]=code {Code :3<<(5+8),BitsWritten :3};_e [5]=code {Code :3<<(4+8),BitsWritten :4};_e [6]=code {Code :2<<(4+8),BitsWritten :4};_e [7]=code {Code :3<<(3+8),BitsWritten :5};_e [8]=code {Code :5<<(2+8),BitsWritten :6};_e [9]=code {Code :4<<(2+8),BitsWritten :6};_e [10]=code {Code :4<<(1+8),BitsWritten :7};_e [11]=code {Code :5<<(1+8),BitsWritten :7};_e [12]=code {Code :7<<(1+8),BitsWritten :7};_e [13]=code {Code :4<<8,BitsWritten :8};_e [14]=code {Code :7<<8,BitsWritten :8};_e [15]=code {Code :12<<8,BitsWritten :9};_e [16]=code {Code :5<<8|3<<6,BitsWritten :10};_e [17]=code {Code :6<<8,BitsWritten :10};_e [18]=code {Code :2<<8,BitsWritten :10};_e [19]=code {Code :12<<8|7<<5,BitsWritten :11};_e [20]=code {Code :13<<8,BitsWritten :11};_e [21]=code {Code :13<<8|4<<5,BitsWritten :11};_e [22]=code {Code :6<<8|7<<5,BitsWritten :11};_e [23]=code {Code :5<<8,BitsWritten :11};_e [24]=code {Code :2<<8|7<<5,BitsWritten :11};_e [25]=code {Code :3<<8,BitsWritten :11};_e [26]=code {Code :12<<8|10<<4,BitsWritten :12};_e [27]=code {Code :12<<8|11<<4,BitsWritten :12};_e [28]=code {Code :12<<8|12<<4,BitsWritten :12};_e [29]=code {Code :12<<8|13<<4,BitsWritten :12};_e [30]=code {Code :6<<8|8<<4,BitsWritten :12};_e [31]=code {Code :6<<8|9<<4,BitsWritten :12};_e [32]=code {Code :6<<8|10<<4,BitsWritten :12};_e [33]=code {Code :6<<8|11<<4,BitsWritten :12};_e [34]=code {Code :13<<8|2<<4,BitsWritten :12};_e [35]=code {Code :13<<8|3<<4,BitsWritten :12};_e [36]=code {Code :13<<8|4<<4,BitsWritten :12};_e [37]=code {Code :13<<8|5<<4,BitsWritten :12};_e [38]=code {Code :13<<8|6<<4,BitsWritten :12};_e [39]=code {Code :13<<8|7<<4,BitsWritten :12};_e [40]=code {Code :6<<8|12<<4,BitsWritten :12};_e [41]=code {Code :6<<8|13<<4,BitsWritten :12};_e [42]=code {Code :13<<8|10<<4,BitsWritten :12};_e [43]=code {Code :13<<8|11<<4,BitsWritten :12};_e [44]=code {Code :5<<8|4<<4,BitsWritten :12};_e [45]=code {Code :5<<8|5<<4,BitsWritten :12};_e [46]=code {Code :5<<8|6<<4,BitsWritten :12};_e [47]=code {Code :5<<8|7<<4,BitsWritten :12};_e [48]=code {Code :6<<8|4<<4,BitsWritten :12};_e [49]=code {Code :6<<8|5<<4,BitsWritten :12};_e [50]=code {Code :5<<8|2<<4,BitsWritten :12};_e [51]=code {Code :5<<8|3<<4,BitsWritten :12};_e [52]=code {Code :2<<8|4<<4,BitsWritten :12};_e [53]=code {Code :3<<8|7<<4,BitsWritten :12};_e [54]=code {Code :3<<8|8<<4,BitsWritten :12};_e [55]=code {Code :2<<8|7<<4,BitsWritten :12};_e [56]=code {Code :2<<8|8<<4,BitsWritten :12};_e [57]=code {Code :5<<8|8<<4,BitsWritten :12};_e [58]=code {Code :5<<8|9<<4,BitsWritten :12};_e [59]=code {Code :2<<8|11<<4,BitsWritten :12};_e [60]=code {Code :2<<8|12<<4,BitsWritten :12};_e [61]=code {Code :5<<8|10<<4,BitsWritten :12};_e [62]=code {Code :6<<8|6<<4,BitsWritten :12};_e [63]=code {Code :6<<8|7<<4,BitsWritten :12};_f =make (map[int ]code );_f [0]=code {Code :53<<8,BitsWritten :8};_f [1]=code {Code :7<<(2+8),BitsWritten :6};_f [2]=code {Code :7<<(4+8),BitsWritten :4};_f [3]=code {Code :8<<(4+8),BitsWritten :4};_f [4]=code {Code :11<<(4+8),BitsWritten :4};_f [5]=code {Code :12<<(4+8),BitsWritten :4};_f [6]=code {Code :14<<(4+8),BitsWritten :4};_f [7]=code {Code :15<<(4+8),BitsWritten :4};_f [8]=code {Code :19<<(3+8),BitsWritten :5};_f [9]=code {Code :20<<(3+8),BitsWritten :5};_f [10]=code {Code :7<<(3+8),BitsWritten :5};_f [11]=code {Code :8<<(3+8),BitsWritten :5};_f [12]=code {Code :8<<(2+8),BitsWritten :6};_f [13]=code {Code :3<<(2+8),BitsWritten :6};_f [14]=code {Code :52<<(2+8),BitsWritten :6};_f [15]=code {Code :53<<(2+8),BitsWritten :6};_f [16]=code {Code :42<<(2+8),BitsWritten :6};_f [17]=code {Code :43<<(2+8),BitsWritten :6};_f [18]=code {Code :39<<(1+8),BitsWritten :7};_f [19]=code {Code :12<<(1+8),BitsWritten :7};_f [20]=code {Code :8<<(1+8),BitsWritten :7};_f [21]=code {Code :23<<(1+8),BitsWritten :7};_f [22]=code {Code :3<<(1+8),BitsWritten :7};_f [23]=code {Code :4<<(1+8),BitsWritten :7};_f [24]=code {Code :40<<(1+8),BitsWritten :7};_f [25]=code {Code :43<<(1+8),BitsWritten :7};_f [26]=code {Code :19<<(1+8),BitsWritten :7};_f [27]=code {Code :36<<(1+8),BitsWritten :7};_f [28]=code {Code :24<<(1+8),BitsWritten :7};_f [29]=code {Code :2<<8,BitsWritten :8};_f [30]=code {Code :3<<8,BitsWritten :8};_f [31]=code {Code :26<<8,BitsWritten :8};_f [32]=code {Code :27<<8,BitsWritten :8};_f [33]=code {Code :18<<8,BitsWritten :8};_f [34]=code {Code :19<<8,BitsWritten :8};_f [35]=code {Code :20<<8,BitsWritten :8};_f [36]=code {Code :21<<8,BitsWritten :8};_f [37]=code {Code :22<<8,BitsWritten :8};_f [38]=code {Code :23<<8,BitsWritten :8};_f [39]=code {Code :40<<8,BitsWritten :8};_f [40]=code {Code :41<<8,BitsWritten :8};_f [41]=code {Code :42<<8,BitsWritten :8};_f [42]=code {Code :43<<8,BitsWritten :8};_f [43]=code {Code :44<<8,BitsWritten :8};_f [44]=code {Code :45<<8,BitsWritten :8};_f [45]=code {Code :4<<8,BitsWritten :8};_f [46]=code {Code :5<<8,BitsWritten :8};_f [47]=code {Code :10<<8,BitsWritten :8};_f [48]=code {Code :11<<8,BitsWritten :8};_f [49]=code {Code :82<<8,BitsWritten :8};_f [50]=code {Code :83<<8,BitsWritten :8};_f [51]=code {Code :84<<8,BitsWritten :8};_f [52]=code {Code :85<<8,BitsWritten :8};_f [53]=code {Code :36<<8,BitsWritten :8};_f [54]=code {Code :37<<8,BitsWritten :8};_f [55]=code {Code :88<<8,BitsWritten :8};_f [56]=code {Code :89<<8,BitsWritten :8};_f [57]=code {Code :90<<8,BitsWritten :8};_f [58]=code {Code :91<<8,BitsWritten :8};_f [59]=code {Code :74<<8,BitsWritten :8};_f [60]=code {Code :75<<8,BitsWritten :8};_f [61]=code {Code :50<<8,BitsWritten :8};_f [62]=code {Code :51<<8,BitsWritten :8};_f [63]=code {Code :52<<8,BitsWritten :8};_c =make (map[int ]code );_c [64]=code {Code :3<<8|3<<6,BitsWritten :10};_c [128]=code {Code :12<<8|8<<4,BitsWritten :12};_c [192]=code {Code :12<<8|9<<4,BitsWritten :12};_c [256]=code {Code :5<<8|11<<4,BitsWritten :12};_c [320]=code {Code :3<<8|3<<4,BitsWritten :12};_c [384]=code {Code :3<<8|4<<4,BitsWritten :12};_c [448]=code {Code :3<<8|5<<4,BitsWritten :12};_c [512]=code {Code :3<<8|12<<3,BitsWritten :13};_c [576]=code {Code :3<<8|13<<3,BitsWritten :13};_c [640]=code {Code :2<<8|10<<3,BitsWritten :13};_c [704]=code {Code :2<<8|11<<3,BitsWritten :13};_c [768]=code {Code :2<<8|12<<3,BitsWritten :13};_c [832]=code {Code :2<<8|13<<3,BitsWritten :13};_c [896]=code {Code :3<<8|18<<3,BitsWritten :13};_c [960]=code {Code :3<<8|19<<3,BitsWritten :13};_c [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_c [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_c [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_c [1216]=code {Code :119<<3,BitsWritten :13};_c [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_c [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_c [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_c [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_c [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_c [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_c [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_c [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_d =make (map[int ]code );_d [64]=code {Code :27<<(3+8),BitsWritten :5};_d [128]=code {Code :18<<(3+8),BitsWritten :5};_d [192]=code {Code :23<<(2+8),BitsWritten :6};_d [256]=code {Code :55<<(1+8),BitsWritten :7};_d [320]=code {Code :54<<8,BitsWritten :8};_d [384]=code {Code :55<<8,BitsWritten :8};_d [448]=code {Code :100<<8,BitsWritten :8};_d [512]=code {Code :101<<8,BitsWritten :8};_d [576]=code {Code :104<<8,BitsWritten :8};_d [640]=code {Code :103<<8,BitsWritten :8};_d [704]=code {Code :102<<8,BitsWritten :9};_d [768]=code {Code :102<<8|1<<7,BitsWritten :9};_d [832]=code {Code :105<<8,BitsWritten :9};_d [896]=code {Code :105<<8|1<<7,BitsWritten :9};_d [960]=code {Code :106<<8,BitsWritten :9};_d [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_d [1088]=code {Code :107<<8,BitsWritten :9};_d [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_d [1216]=code {Code :108<<8,BitsWritten :9};_d [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_d [1344]=code {Code :109<<8,BitsWritten :9};_d [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_d [1472]=code {Code :76<<8,BitsWritten :9};_d [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_d [1600]=code {Code :77<<8,BitsWritten :9};_d [1664]=code {Code :24<<(2+8),BitsWritten :6};_d [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_dd =make (map[int ]code );_dd [1792]=code {Code :1<<8,BitsWritten :11};_dd [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_dd [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_dd [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_dd [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_dd [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_dd [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_dd [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_dd [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_dd [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_dd [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_dd [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_dd [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_aa =make (map[int ]byte );_aa [0]=0xFF;_aa [1]=0xFE;_aa [2]=0xFC;_aa [3]=0xF8;_aa [4]=0xF0;_aa [5]=0xE0;_aa [6]=0xC0;_aa [7]=0x80;_aa [8]=0x00;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _fbc (_cfd []byte ,_aea int ,_feb bool )(int ,int ){var (_gcc uint16 ;_dbd int ;_abaa int ;);_abaa =_aea ;_gcc ,_dbd ,_ =_efe (_cfd ,_aea );_dad ,_ffc :=_eff (_gcc ,_dbd ,_feb );if _dad ==-1{return -1,_abaa ;};return _dad ,_abaa +_ffc .BitsWritten ;};func init (){for _gec ,_fb :=range _f {_gcca (_ab ,_fb ,0,_gec );};for _ag ,_ce :=range _d {_gcca (_ab ,_ce ,0,_ag );};for _ee ,_db :=range _e {_gcca (_aaa ,_db ,0,_ee );};for _ddf ,_gcg :=range _c {_gcca (_aaa ,_gcg ,0,_ddf );};for _ceg ,_bg :=range _dd {_gcca (_ab ,_bg ,0,_ceg );_gcca (_aaa ,_bg ,0,_ceg );};_gcca (_dg ,_ac ,0,0);_gcca (_dg ,_aae ,0,0);_gcca (_dg ,_ge ,0,0);_gcca (_dg ,_gg ,0,0);_gcca (_dg ,_gea ,0,0);_gcca (_dg ,_ba ,0,0);_gcca (_dg ,_ddc ,0,0);_gcca (_dg ,_bb ,0,0);_gcca (_dg ,_ec ,0,0);};func _fee (_ggbf []byte ,_deg int )int {if _deg >=len (_ggbf ){return _deg ;};if _deg < -1{_deg =-1;};var _egcc byte ;if _deg > -1{_egcc =_ggbf [_deg ];}else {_egcc =_bfed ;};_gffb :=_deg +1;for _gffb < len (_ggbf ){if _ggbf [_gffb ]!=_egcc {break ;};_gffb ++;};return _gffb ;};func _ccgb (_cgg int )([]byte ,int ){var _adc []byte ;for _fef :=0;_fef < 6;_fef ++{_adc ,_cgg =_dfd (_adc ,_cgg ,_eg );};return _adc ,_cgg %8;};type code struct{Code uint16 ;BitsWritten int ;};var (_bfed byte =1;_df byte =0;);func _gaga (_gff int ,_cae bool )(code ,int ,bool ){if _gff < 64{if _cae {return _f [_gff ],0,true ;};return _e [_gff ],0,true ;};_afa :=_gff /64;if _afa > 40{return _dd [2560],_gff -2560,false ;};if _afa > 27{return _dd [_afa *64],_gff -_afa *64,false ;};if _cae {return _d [_afa *64],_gff -_afa *64,false ;};return _c [_afa *64],_gff -_afa *64,false ;};func _eccb (_dace [][]byte )[][]byte {_beea :=make ([]byte ,len (_dace [0]));for _dgf :=range _beea {_beea [_dgf ]=_bfed ;};_dace =append (_dace ,[]byte {});for _bba :=len (_dace )-1;_bba > 0;_bba --{_dace [_bba ]=_dace [_bba -1];};_dace [0]=_beea ;return _dace ;};var (_fa =_a .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_gc =_a .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_ecd =_a .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_bd =_a .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_be =_a .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_gd =_a .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _abg (_ddac []byte ,_ecc int )([]byte ,int ){return _dfd (_ddac ,_ecc ,_ac )};func _fdg (_agb ,_bcg int )code {var _ade code ;switch _bcg -_agb {case -1:_ade =_gg ;case -2:_ade =_gea ;case -3:_ade =_ba ;case 0:_ade =_ge ;case 1:_ade =_ddc ;case 2:_ade =_bb ;case 3:_ade =_ec ;};return _ade ;};func _dfd (_cgfb []byte ,_gaf int ,_gdc code )([]byte ,int ){_cege :=0;for _cege < _gdc .BitsWritten {_eage :=_gaf /8;_geca :=_gaf %8;if _eage >=len (_cgfb ){_cgfb =append (_cgfb ,0);};_bfag :=8-_geca ;_egff :=_gdc .BitsWritten -_cege ;if _bfag > _egff {_bfag =_egff ;};if _cege < 8{_cgfb [_eage ]=_cgfb [_eage ]|byte (_gdc .Code >>uint (8+_geca -_cege ))&_aa [8-_bfag -_geca ];}else {_cgfb [_eage ]=_cgfb [_eage ]|(byte (_gdc .Code <<uint (_cege -8))&_aa [8-_bfag ])>>uint (_geca );};_gaf +=_bfag ;_cege +=_bfag ;};return _cgfb ,_gaf ;};func (_caa *Encoder )appendEncodedRow (_edc ,_ccdg []byte ,_cgga int )[]byte {if len (_edc )> 0&&_cgga !=0&&!_caa .EncodedByteAlign {_edc [len (_edc )-1]=_edc [len (_edc )-1]|_ccdg [0];_edc =append (_edc ,_ccdg [1:]...);}else {_edc =append (_edc ,_ccdg ...);};return _edc ;};func _def (_eed []byte ,_cag int ,_cfag int ,_eag bool )([]byte ,int ){var (_afgd code ;_cddb bool ;);for !_cddb {_afgd ,_cfag ,_cddb =_gaga (_cfag ,_eag );_eed ,_cag =_dfd (_eed ,_cag ,_afgd );};return _eed ,_cag ;};func (_aed *Encoder )decodeG31D (_aaf []byte )([][]byte ,error ){var _agf [][]byte ;var _eb int ;for (_eb /8)< len (_aaf ){var _af bool ;_af ,_eb =_gbdb (_aaf ,_eb );if !_af {if _aed .EndOfLine {return nil ,_bd ;};}else {for _aaaa :=0;_aaaa < 5;_aaaa ++{_af ,_eb =_gbdb (_aaf ,_eb );if !_af {if _aaaa ==0{break ;};return nil ,_be ;};};if _af {break ;};};var _age []byte ;_age ,_eb =_aed .decodeRow1D (_aaf ,_eb );if _aed .EncodedByteAlign &&_eb %8!=0{_eb +=8-_eb %8;};_agf =append (_agf ,_age );if _aed .Rows > 0&&!_aed .EndOfBlock &&len (_agf )>=_aed .Rows {break ;};};return _agf ,nil ;};func _bfc (_agd [][]byte ,_gfc []byte ,_ggg bool ,_ff ,_cac int )([]byte ,int ){_bdb :=_caed (_gfc ,_agd [len (_agd )-1],_ff ,_ggg );_bed :=_bdb +_cac ;if _ff ==-1{_gfc =_aca (_gfc ,_ggg ,_bed -_ff -1);}else {_gfc =_aca (_gfc ,_ggg ,_bed -_ff );};_ff =_bed ;return _gfc ,_ff ;};func _cbd (_gbf ,_efd []byte ,_fcf ,_eccf ,_bcd int )([]byte ,int ,int ){_faa :=_fee (_gbf ,_bcd );_bgc :=_eccf >=0&&_gbf [_eccf ]==_bfed ||_eccf ==-1;_efd ,_fcf =_dfd (_efd ,_fcf ,_aae );var _ddb int ;if _eccf > -1{_ddb =_bcd -_eccf ;}else {_ddb =_bcd -_eccf -1;};_efd ,_fcf =_def (_efd ,_fcf ,_ddb ,_bgc );_bgc =!_bgc ;_fdde :=_faa -_bcd ;_efd ,_fcf =_def (_efd ,_fcf ,_fdde ,_bgc );_eccf =_faa ;return _efd ,_fcf ,_eccf ;};func (_cc *Encoder )Decode (encoded []byte )([][]byte ,error ){if _cc .BlackIs1 {_bfed =0;_df =1;}else {_bfed =1;_df =0;};if _cc .K ==0{return _cc .decodeG31D (encoded );};if _cc .K > 0{return _cc .decodeG32D (encoded );};if _cc .K < 4{return _cc .decodeG4 (encoded );};return nil ,nil ;};func _caed (_cge ,_accg []byte ,_eef int ,_gcgf bool )int {_acdc :=_fee (_accg ,_eef );if _acdc < len (_accg )&&(_eef ==-1&&_accg [_acdc ]==_bfed ||_eef >=0&&_eef < len (_cge )&&_cge [_eef ]==_accg [_acdc ]||_eef >=len (_cge )&&_gcgf &&_accg [_acdc ]==_bfed ||_eef >=len (_cge )&&!_gcgf &&_accg [_acdc ]==_df ){_acdc =_fee (_accg ,_acdc );};return _acdc ;};func _efe (_abd []byte ,_bgd int )(uint16 ,int ,int ){_add :=_bgd ;_bffg :=_bgd /8;_bgd %=8;if _bffg >=len (_abd ){return 0,16,_add ;};_ccd :=byte (0xFF>>uint (_bgd ));_aeaf :=uint16 ((_abd [_bffg ]&_ccd )<<uint (_bgd ))<<8;_dac :=8-_bgd ;_bffg ++;_bgd =0;if _bffg >=len (_abd ){return _aeaf >>(16-uint (_dac )),16-_dac ,_add +_dac ;};_aeaf |=uint16 (_abd [_bffg ])<<(8-uint (_dac ));_dac +=8;_bffg ++;_bgd =0;if _bffg >=len (_abd ){return _aeaf >>(16-uint (_dac )),16-_dac ,_add +_dac ;};if _dac ==16{return _aeaf ,0,_add +_dac ;};_bffb :=16-_dac ;_aeaf |=uint16 (_abd [_bffg ]>>(8-uint (_bffb )));return _aeaf ,0,_add +16;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _fg (_aba ,_ebb []byte ,_gde int ,_fbg bool )([]byte ,int ,error ){_egg :=_gde ;var _cea int ;for _cea ,_gde =_fbc (_aba ,_gde ,_fbg );_cea !=-1;_cea ,_gde =_fbc (_aba ,_gde ,_fbg ){_ebb =_aca (_ebb ,_fbg ,_cea );if _cea < 64{break ;};};if _cea ==-1{return _ebb ,_egg ,_ecd ;};return _ebb ,_gde ,nil ;};var (_e map[int ]code ;_f map[int ]code ;_c map[int ]code ;_d map[int ]code ;_dd map[int ]code ;_aa map[int ]byte ;_ga =code {Code :1<<4,BitsWritten :12};_eg =code {Code :3<<3,BitsWritten :13};_b =code {Code :2<<3,BitsWritten :13};_ac =code {Code :1<<12,BitsWritten :4};_aae =code {Code :1<<13,BitsWritten :3};_ge =code {Code :1<<15,BitsWritten :1};_gg =code {Code :3<<13,BitsWritten :3};_gea =code {Code :3<<10,BitsWritten :6};_ba =code {Code :3<<9,BitsWritten :7};_ddc =code {Code :2<<13,BitsWritten :3};_bb =code {Code :2<<10,BitsWritten :6};_ec =code {Code :2<<9,BitsWritten :7};);func _edde (_gecc int )([]byte ,int ){var _gga []byte ;for _dgde :=0;_dgde < 2;_dgde ++{_gga ,_gecc =_dfd (_gga ,_gecc ,_ga );};return _gga ,_gecc %8;};func _aebf (_bad *decodingTreeNode ,_gag uint16 ,_bfa int )(*int ,*code ){if _bad ==nil {return nil ,nil ;};if _bfa ==16{return _bad .RunLen ,_bad .Code ;};_cce :=_gfa (_gag ,_bfa );_bfa ++;var _fgc *int ;var _bge *code ;if _cce ==1{_fgc ,_bge =_aebf (_bad .Right ,_gag ,_bfa );}else {_fgc ,_bge =_aebf (_bad .Left ,_gag ,_bfa );};if _fgc ==nil {_fgc =_bad .RunLen ;_bge =_bad .Code ;};return _fgc ,_bge ;};func _afg (_eafb []byte ,_cca int )(bool ,int ,error ){_cegd :=_cca ;var _ffd bool ;_ffd ,_cca =_gbdb (_eafb ,_cca );if _ffd {_ffd ,_cca =_gbdb (_eafb ,_cca );if _ffd {return true ,_cca ,nil ;};return false ,_cegd ,_fa ;};return false ,_cegd ,nil ;};func _afcd (_fdf []byte ,_cdcd int )(bool ,int ){return _fgg (_fdf ,_cdcd ,_eg )};func _fad (_fffe ,_cggg []byte ,_fgca int )int {_bae :=_fee (_cggg ,_fgca );if _bae < len (_cggg )&&(_fgca ==-1&&_cggg [_bae ]==_bfed ||_fgca >=0&&_fgca < len (_fffe )&&_fffe [_fgca ]==_cggg [_bae ]||_fgca >=len (_fffe )&&_fffe [_fgca -1]!=_cggg [_bae ]){_bae =_fee (_cggg ,_bae );};return _bae ;};func _gcca (_acd *decodingTreeNode ,_gdf code ,_fff int ,_dge int ){_aafd :=_gfa (_gdf .Code ,_fff );_fff ++;if _aafd ==1{if _acd .Right ==nil {_acd .Right =&decodingTreeNode {Val :_aafd };};if _fff ==_gdf .BitsWritten {_acd .Right .RunLen =&_dge ;_acd .Right .Code =&_gdf ;}else {_gcca (_acd .Right ,_gdf ,_fff ,_dge );};}else {if _acd .Left ==nil {_acd .Left =&decodingTreeNode {Val :_aafd };};if _fff ==_gdf .BitsWritten {_acd .Left .RunLen =&_dge ;_acd .Left .Code =&_gdf ;}else {_gcca (_acd .Left ,_gdf ,_fff ,_dge );};};};var (_ab =&decodingTreeNode {Val :255};_aaa =&decodingTreeNode {Val :255};_dg =&decodingTreeNode {Val :255};);func _adg (_fge int )([]byte ,int ){var _bfce []byte ;for _ffcg :=0;_ffcg < 6;_ffcg ++{_bfce ,_fge =_dfd (_bfce ,_fge ,_ga );};return _bfce ,_fge %8;};func (_fd *Encoder )decodeG32D (_ebg []byte )([][]byte ,error ){var (_abf [][]byte ;_da int ;_fe error ;);_aeb :for (_da /8)< len (_ebg ){var _ef bool ;_ef ,_da ,_fe =_gge (_ebg ,_da );if _fe !=nil {return nil ,_fe ;};if _ef {break ;};_ef ,_da =_afcd (_ebg ,_da );if !_ef {if _fd .EndOfLine {return nil ,_bd ;};};var _afd []byte ;_afd ,_da =_fd .decodeRow1D (_ebg ,_da );if _fd .EncodedByteAlign &&_da %8!=0{_da +=8-_da %8;};if _afd !=nil {_abf =append (_abf ,_afd );};if _fd .Rows > 0&&!_fd .EndOfBlock &&len (_abf )>=_fd .Rows {break ;};for _gb :=1;_gb < _fd .K &&(_da /8)< len (_ebg );_gb ++{_ef ,_da =_ggce (_ebg ,_da );if !_ef {_ef ,_da ,_fe =_gge (_ebg ,_da );if _fe !=nil {return nil ,_fe ;};if _ef {break _aeb ;}else {if _fd .EndOfLine {return nil ,_bd ;};};};var (_cg code ;_bde bool ;);_cfa :=true ;var _eaf []byte ;_dgd :=-1;for _cg ,_da ,_bde =_cacg (_ebg ,_da );_bde ;_cg ,_da ,_bde =_cacg (_ebg ,_da ){switch _cg {case _ac :_eaf ,_dgd =_ece (_abf ,_eaf ,_cfa ,_dgd );case _aae :_eaf ,_da ,_dgd ,_fe =_bdbg (_ebg ,_eaf ,_da ,_cfa ,_dgd );if _fe !=nil {return nil ,_fe ;};case _ge :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,0);_cfa =!_cfa ;case _gg :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,1);_cfa =!_cfa ;case _gea :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,2);_cfa =!_cfa ;case _ba :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,3);_cfa =!_cfa ;case _ddc :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,-1);_cfa =!_cfa ;case _bb :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,-2);_cfa =!_cfa ;case _ec :_eaf ,_dgd =_bfc (_abf ,_eaf ,_cfa ,_dgd ,-3);_cfa =!_cfa ;};if len (_eaf )>=_fd .Columns {break ;};};if _fd .EncodedByteAlign &&_da %8!=0{_da +=8-_da %8;};if _eaf !=nil {_abf =append (_abf ,_eaf );};if _fd .Rows > 0&&!_fd .EndOfBlock &&len (_abf )>=_fd .Rows {break _aeb ;};};};return _abf ,nil ;};func _abfb (_gdac []byte ,_fgd int ,_egca code )([]byte ,int ){_adcg :=true ;var _cdd []byte ;_cdd ,_fgd =_dfd (nil ,_fgd ,_egca );_dbcb :=0;var _dbca int ;for _dbcb < len (_gdac ){_dbca ,_dbcb =_edbb (_gdac ,_adcg ,_dbcb );_cdd ,_fgd =_def (_cdd ,_fgd ,_dbca ,_adcg );_adcg =!_adcg ;};return _cdd ,_fgd %8;};func (_fdda *Encoder )encodeG32D (_afb [][]byte )[]byte {var _dcad []byte ;var _cbg int ;for _eda :=0;_eda < len (_afb );_eda +=_fdda .K {if _fdda .Rows > 0&&!_fdda .EndOfBlock &&_eda ==_fdda .Rows {break ;};_eab ,_cgf :=_abfb (_afb [_eda ],_cbg ,_eg );_dcad =_fdda .appendEncodedRow (_dcad ,_eab ,_cbg );if _fdda .EncodedByteAlign {_cgf =0;};_cbg =_cgf ;for _dgb :=_eda +1;_dgb < (_eda +_fdda .K )&&_dgb < len (_afb );_dgb ++{if _fdda .Rows > 0&&!_fdda .EndOfBlock &&_dgb ==_fdda .Rows {break ;};_fbcd ,_bfg :=_dfd (nil ,_cbg ,_b );var _gcd ,_bee ,_agde int ;_gda :=-1;for _gda < len (_afb [_dgb ]){_gcd =_fee (_afb [_dgb ],_gda );_bee =_fad (_afb [_dgb ],_afb [_dgb -1],_gda );_agde =_fee (_afb [_dgb -1],_bee );if _agde < _gcd {_fbcd ,_bfg =_abg (_fbcd ,_bfg );_gda =_agde ;}else {if _ae .Abs (float64 (_bee -_gcd ))> 3{_fbcd ,_bfg ,_gda =_cbd (_afb [_dgb ],_fbcd ,_bfg ,_gda ,_gcd );}else {_fbcd ,_bfg =_abgb (_fbcd ,_bfg ,_gcd ,_bee );_gda =_gcd ;};};};_dcad =_fdda .appendEncodedRow (_dcad ,_fbcd ,_cbg );if _fdda .EncodedByteAlign {_bfg =0;};_cbg =_bfg %8;};};if _fdda .EndOfBlock {_badc ,_ :=_ccgb (_cbg );_dcad =_fdda .appendEncodedRow (_dcad ,_badc ,_cbg );};return _dcad ;};func _ggce (_ccg []byte ,_eac int )(bool ,int ){return _fgg (_ccg ,_eac ,_b )};func (_fcc *Encoder )encodeG4 (_febe [][]byte )[]byte {_eaa :=make ([][]byte ,len (_febe ));copy (_eaa ,_febe );_eaa =_eccb (_eaa );var _cec []byte ;var _dbc int ;for _cdcb :=1;_cdcb < len (_eaa );_cdcb ++{if _fcc .Rows > 0&&!_fcc .EndOfBlock &&_cdcb ==(_fcc .Rows +1){break ;};var _dgbf []byte ;var _gbb ,_edb ,_dbg int ;_fac :=_dbc ;_fbcc :=-1;for _fbcc < len (_eaa [_cdcb ]){_gbb =_fee (_eaa [_cdcb ],_fbcc );_edb =_fad (_eaa [_cdcb ],_eaa [_cdcb -1],_fbcc );_dbg =_fee (_eaa [_cdcb -1],_edb );if _dbg < _gbb {_dgbf ,_fac =_dfd (_dgbf ,_fac ,_ac );_fbcc =_dbg ;}else {if _ae .Abs (float64 (_edb -_gbb ))> 3{_dgbf ,_fac ,_fbcc =_cbd (_eaa [_cdcb ],_dgbf ,_fac ,_fbcc ,_gbb );}else {_dgbf ,_fac =_abgb (_dgbf ,_fac ,_gbb ,_edb );_fbcc =_gbb ;};};};_cec =_fcc .appendEncodedRow (_cec ,_dgbf ,_dbc );if _fcc .EncodedByteAlign {_fac =0;};_dbc =_fac %8;};if _fcc .EndOfBlock {_bbf ,_ :=_edde (_dbc );_cec =_fcc .appendEncodedRow (_cec ,_bbf ,_dbc );};return _cec ;};func _gbdb (_egc []byte ,_ceed int )(bool ,int ){_gcf :=_ceed ;var (_fc uint16 ;_faf int ;);_fc ,_faf ,_ceed =_efe (_egc ,_ceed );if _faf > 4{return false ,_gcf ;};_fc >>=uint (4-_faf );_fc <<=4;if _fc !=_ga .Code {return false ,_gcf ;};return true ,_ceed -4+_faf ;};func _bdbg (_cd ,_cgc []byte ,_agfa int ,_gce bool ,_cdc int )([]byte ,int ,int ,error ){_dae :=_agfa ;var _cgde error ;_cgc ,_agfa ,_cgde =_fg (_cd ,_cgc ,_agfa ,_gce );if _cgde !=nil {return _cgc ,_dae ,_cdc ,_cgde ;};_gce =!_gce ;_cgc ,_agfa ,_cgde =_fg (_cd ,_cgc ,_agfa ,_gce );if _cgde !=nil {return _cgc ,_dae ,_cdc ,_cgde ;};_cdc =len (_cgc );return _cgc ,_agfa ,_cdc ,nil ;};func _edbb (_edab []byte ,_daeb bool ,_gdea int )(int ,int ){_cfdc :=0;for _gdea < len (_edab ){if _daeb {if _edab [_gdea ]!=_bfed {break ;};}else {if _edab [_gdea ]!=_df {break ;};};_cfdc ++;_gdea ++;};return _cfdc ,_gdea ;};func (_cgd *Encoder )decodeG4 (_fed []byte )([][]byte ,error ){_bf :=make ([]byte ,_cgd .Columns );for _gf :=range _bf {_bf [_gf ]=_bfed ;};_bag :=make ([][]byte ,1);_bag [0]=_bf ;var (_ca bool ;_ggb error ;_dab int ;);for (_dab /8)< len (_fed ){_ca ,_dab ,_ggb =_afg (_fed ,_dab );if _ggb !=nil {return nil ,_ggb ;};if _ca {break ;};var (_cb code ;_dc bool ;);_ad :=true ;var _cbf []byte ;_ccf :=-1;for _ccf < _cgd .Columns {_cb ,_dab ,_dc =_cacg (_fed ,_dab );if !_dc {return nil ,_gd ;};switch _cb {case _ac :_cbf ,_ccf =_ece (_bag ,_cbf ,_ad ,_ccf );case _aae :_cbf ,_dab ,_ccf ,_ggb =_bdbg (_fed ,_cbf ,_dab ,_ad ,_ccf );if _ggb !=nil {return nil ,_ggb ;};case _ge :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,0);_ad =!_ad ;case _gg :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,1);_ad =!_ad ;case _gea :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,2);_ad =!_ad ;case _ba :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,3);_ad =!_ad ;case _ddc :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,-1);_ad =!_ad ;case _bb :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,-2);_ad =!_ad ;case _ec :_cbf ,_ccf =_bfc (_bag ,_cbf ,_ad ,_ccf ,-3);_ad =!_ad ;};if len (_cbf )>=_cgd .Columns {break ;};};if _cgd .EncodedByteAlign &&_dab %8!=0{_dab +=8-_dab %8;};_bag =append (_bag ,_cbf );if _cgd .Rows > 0&&!_cgd .EndOfBlock &&len (_bag )>=(_cgd .Rows +1){break ;};};_bag =_bag [1:];return _bag ,nil ;};func (_dbad *Encoder )encodeG31D (_ggbe [][]byte )[]byte {var _bffgg []byte ;_ffa :=0;for _ggcf :=range _ggbe {if _dbad .Rows > 0&&!_dbad .EndOfBlock &&_ggcf ==_dbad .Rows {break ;};_aeab ,_bgf :=_abfb (_ggbe [_ggcf ],_ffa ,_ga );_bffgg =_dbad .appendEncodedRow (_bffgg ,_aeab ,_ffa );if _dbad .EncodedByteAlign {_bgf =0;};_ffa =_bgf ;};if _dbad .EndOfBlock {_acf ,_ :=_adg (_ffa );_bffgg =_dbad .appendEncodedRow (_bffgg ,_acf ,_ffa );};return _bffgg ;};func (_dde *Encoder )decodeRow1D (_cee []byte ,_ecb int )([]byte ,int ){var _dca []byte ;_acce :=true ;var _abfc int ;_abfc ,_ecb =_fbc (_cee ,_ecb ,_acce );for _abfc !=-1{_dca =_aca (_dca ,_acce ,_abfc );if _abfc < 64{if len (_dca )>=_dde .Columns {break ;};_acce =!_acce ;};_abfc ,_ecb =_fbc (_cee ,_ecb ,_acce );};return _dca ,_ecb ;};func (_acg *Encoder )Encode (pixels [][]byte )[]byte {if _acg .BlackIs1 {_bfed =0;_df =1;}else {_bfed =1;_df =0;};if _acg .K ==0{return _acg .encodeG31D (pixels );};if _acg .K > 0{return _acg .encodeG32D (pixels );};if _acg .K < 0{return _acg .encodeG4 (pixels );};return nil ;};func _fgg (_egcf []byte ,_aad int ,_cace code )(bool ,int ){_edd :=_aad ;var (_cfaf uint16 ;_efc int ;);_cfaf ,_efc ,_aad =_efe (_egcf ,_aad );if _efc > 3{return false ,_edd ;};_cfaf >>=uint (3-_efc );_cfaf <<=3;if _cfaf !=_cace .Code {return false ,_edd ;};return true ,_aad -3+_efc ;};func _aca (_efb []byte ,_fec bool ,_fdd int )[]byte {if _fdd < 0{return _efb ;};_cbb :=make ([]byte ,_fdd );if _fec {for _fea :=0;_fea < len (_cbb );_fea ++{_cbb [_fea ]=_bfed ;};}else {for _ddcd :=0;_ddcd < len (_cbb );_ddcd ++{_cbb [_ddcd ]=_df ;};};_efb =append (_efb ,_cbb ...);return _efb ;};func _cacg (_fbf []byte ,_bfe int )(code ,int ,bool ){var (_gbd uint16 ;_bbd int ;_de int ;);_de =_bfe ;_gbd ,_bbd ,_ =_efe (_fbf ,_bfe );_ggc ,_cfg :=_ebf (_gbd ,_bbd );if !_cfg {return code {},_de ,false ;};return _ggc ,_de +_ggc .BitsWritten ,true ;};func _gfa (_caf uint16 ,_bgb int )byte {if _bgb < 8{_caf >>=8;};_bgb %=8;_daf :=byte (0x01<<(7-uint (_bgb )));return (byte (_caf )&_daf )>>(7-uint (_bgb ));};func _abgb (_aadd []byte ,_facf ,_gdg ,_ecba int )([]byte ,int ){_gbbg :=_fdg (_gdg ,_ecba );_aadd ,_facf =_dfd (_aadd ,_facf ,_gbbg );return _aadd ,_facf ;};func _ece (_bc [][]byte ,_dcd []byte ,_ffg bool ,_gfd int )([]byte ,int ){_ed :=_caed (_dcd ,_bc [len (_bc )-1],_gfd ,_ffg );_cacd :=_fee (_bc [len (_bc )-1],_ed );if _gfd ==-1{_dcd =_aca (_dcd ,_ffg ,_cacd -_gfd -1);}else {_dcd =_aca (_dcd ,_ffg ,_cacd -_gfd );};_gfd =_cacd ;return _dcd ,_gfd ;};func _ebf (_dba uint16 ,_fbd int )(code ,bool ){_ ,_egf :=_aebf (_dg ,_dba ,_fbd );if _egf ==nil {return code {},false ;};return *_egf ,true ;};