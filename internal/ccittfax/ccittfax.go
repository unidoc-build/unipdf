//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_d "errors";_b "github.com/unidoc/unipdf/v3/common";_e "math";);func _agefd (_dgfc ,_cacf []byte ,_afde int )int {_afc :=_ebb (_cacf ,_afde );if _afc < len (_cacf )&&(_afde ==-1&&_cacf [_afc ]==_cef ||_afde >=0&&_afde < len (_dgfc )&&_dgfc [_afde ]==_cacf [_afc ]||_afde >=len (_dgfc )&&_dgfc [_afde -1]!=_cacf [_afc ]){_afc =_ebb (_cacf ,_afc );
};return _afc ;};func _cc (_aef uint16 ,_ffgf int )(code ,bool ){_ ,_adb :=_dac (_ag ,_aef ,_ffgf );if _adb ==nil {return code {},false ;};return *_adb ,true ;};func init (){_fb =make (map[int ]code );_fb [0]=code {Code :13<<8|3<<6,BitsWritten :10};_fb [1]=code {Code :2<<(5+8),BitsWritten :3};
_fb [2]=code {Code :3<<(6+8),BitsWritten :2};_fb [3]=code {Code :2<<(6+8),BitsWritten :2};_fb [4]=code {Code :3<<(5+8),BitsWritten :3};_fb [5]=code {Code :3<<(4+8),BitsWritten :4};_fb [6]=code {Code :2<<(4+8),BitsWritten :4};_fb [7]=code {Code :3<<(3+8),BitsWritten :5};
_fb [8]=code {Code :5<<(2+8),BitsWritten :6};_fb [9]=code {Code :4<<(2+8),BitsWritten :6};_fb [10]=code {Code :4<<(1+8),BitsWritten :7};_fb [11]=code {Code :5<<(1+8),BitsWritten :7};_fb [12]=code {Code :7<<(1+8),BitsWritten :7};_fb [13]=code {Code :4<<8,BitsWritten :8};
_fb [14]=code {Code :7<<8,BitsWritten :8};_fb [15]=code {Code :12<<8,BitsWritten :9};_fb [16]=code {Code :5<<8|3<<6,BitsWritten :10};_fb [17]=code {Code :6<<8,BitsWritten :10};_fb [18]=code {Code :2<<8,BitsWritten :10};_fb [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_fb [20]=code {Code :13<<8,BitsWritten :11};_fb [21]=code {Code :13<<8|4<<5,BitsWritten :11};_fb [22]=code {Code :6<<8|7<<5,BitsWritten :11};_fb [23]=code {Code :5<<8,BitsWritten :11};_fb [24]=code {Code :2<<8|7<<5,BitsWritten :11};_fb [25]=code {Code :3<<8,BitsWritten :11};
_fb [26]=code {Code :12<<8|10<<4,BitsWritten :12};_fb [27]=code {Code :12<<8|11<<4,BitsWritten :12};_fb [28]=code {Code :12<<8|12<<4,BitsWritten :12};_fb [29]=code {Code :12<<8|13<<4,BitsWritten :12};_fb [30]=code {Code :6<<8|8<<4,BitsWritten :12};_fb [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_fb [32]=code {Code :6<<8|10<<4,BitsWritten :12};_fb [33]=code {Code :6<<8|11<<4,BitsWritten :12};_fb [34]=code {Code :13<<8|2<<4,BitsWritten :12};_fb [35]=code {Code :13<<8|3<<4,BitsWritten :12};_fb [36]=code {Code :13<<8|4<<4,BitsWritten :12};_fb [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_fb [38]=code {Code :13<<8|6<<4,BitsWritten :12};_fb [39]=code {Code :13<<8|7<<4,BitsWritten :12};_fb [40]=code {Code :6<<8|12<<4,BitsWritten :12};_fb [41]=code {Code :6<<8|13<<4,BitsWritten :12};_fb [42]=code {Code :13<<8|10<<4,BitsWritten :12};_fb [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_fb [44]=code {Code :5<<8|4<<4,BitsWritten :12};_fb [45]=code {Code :5<<8|5<<4,BitsWritten :12};_fb [46]=code {Code :5<<8|6<<4,BitsWritten :12};_fb [47]=code {Code :5<<8|7<<4,BitsWritten :12};_fb [48]=code {Code :6<<8|4<<4,BitsWritten :12};_fb [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_fb [50]=code {Code :5<<8|2<<4,BitsWritten :12};_fb [51]=code {Code :5<<8|3<<4,BitsWritten :12};_fb [52]=code {Code :2<<8|4<<4,BitsWritten :12};_fb [53]=code {Code :3<<8|7<<4,BitsWritten :12};_fb [54]=code {Code :3<<8|8<<4,BitsWritten :12};_fb [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_fb [56]=code {Code :2<<8|8<<4,BitsWritten :12};_fb [57]=code {Code :5<<8|8<<4,BitsWritten :12};_fb [58]=code {Code :5<<8|9<<4,BitsWritten :12};_fb [59]=code {Code :2<<8|11<<4,BitsWritten :12};_fb [60]=code {Code :2<<8|12<<4,BitsWritten :12};_fb [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_fb [62]=code {Code :6<<8|6<<4,BitsWritten :12};_fb [63]=code {Code :6<<8|7<<4,BitsWritten :12};_ec =make (map[int ]code );_ec [0]=code {Code :53<<8,BitsWritten :8};_ec [1]=code {Code :7<<(2+8),BitsWritten :6};_ec [2]=code {Code :7<<(4+8),BitsWritten :4};
_ec [3]=code {Code :8<<(4+8),BitsWritten :4};_ec [4]=code {Code :11<<(4+8),BitsWritten :4};_ec [5]=code {Code :12<<(4+8),BitsWritten :4};_ec [6]=code {Code :14<<(4+8),BitsWritten :4};_ec [7]=code {Code :15<<(4+8),BitsWritten :4};_ec [8]=code {Code :19<<(3+8),BitsWritten :5};
_ec [9]=code {Code :20<<(3+8),BitsWritten :5};_ec [10]=code {Code :7<<(3+8),BitsWritten :5};_ec [11]=code {Code :8<<(3+8),BitsWritten :5};_ec [12]=code {Code :8<<(2+8),BitsWritten :6};_ec [13]=code {Code :3<<(2+8),BitsWritten :6};_ec [14]=code {Code :52<<(2+8),BitsWritten :6};
_ec [15]=code {Code :53<<(2+8),BitsWritten :6};_ec [16]=code {Code :42<<(2+8),BitsWritten :6};_ec [17]=code {Code :43<<(2+8),BitsWritten :6};_ec [18]=code {Code :39<<(1+8),BitsWritten :7};_ec [19]=code {Code :12<<(1+8),BitsWritten :7};_ec [20]=code {Code :8<<(1+8),BitsWritten :7};
_ec [21]=code {Code :23<<(1+8),BitsWritten :7};_ec [22]=code {Code :3<<(1+8),BitsWritten :7};_ec [23]=code {Code :4<<(1+8),BitsWritten :7};_ec [24]=code {Code :40<<(1+8),BitsWritten :7};_ec [25]=code {Code :43<<(1+8),BitsWritten :7};_ec [26]=code {Code :19<<(1+8),BitsWritten :7};
_ec [27]=code {Code :36<<(1+8),BitsWritten :7};_ec [28]=code {Code :24<<(1+8),BitsWritten :7};_ec [29]=code {Code :2<<8,BitsWritten :8};_ec [30]=code {Code :3<<8,BitsWritten :8};_ec [31]=code {Code :26<<8,BitsWritten :8};_ec [32]=code {Code :27<<8,BitsWritten :8};
_ec [33]=code {Code :18<<8,BitsWritten :8};_ec [34]=code {Code :19<<8,BitsWritten :8};_ec [35]=code {Code :20<<8,BitsWritten :8};_ec [36]=code {Code :21<<8,BitsWritten :8};_ec [37]=code {Code :22<<8,BitsWritten :8};_ec [38]=code {Code :23<<8,BitsWritten :8};
_ec [39]=code {Code :40<<8,BitsWritten :8};_ec [40]=code {Code :41<<8,BitsWritten :8};_ec [41]=code {Code :42<<8,BitsWritten :8};_ec [42]=code {Code :43<<8,BitsWritten :8};_ec [43]=code {Code :44<<8,BitsWritten :8};_ec [44]=code {Code :45<<8,BitsWritten :8};
_ec [45]=code {Code :4<<8,BitsWritten :8};_ec [46]=code {Code :5<<8,BitsWritten :8};_ec [47]=code {Code :10<<8,BitsWritten :8};_ec [48]=code {Code :11<<8,BitsWritten :8};_ec [49]=code {Code :82<<8,BitsWritten :8};_ec [50]=code {Code :83<<8,BitsWritten :8};
_ec [51]=code {Code :84<<8,BitsWritten :8};_ec [52]=code {Code :85<<8,BitsWritten :8};_ec [53]=code {Code :36<<8,BitsWritten :8};_ec [54]=code {Code :37<<8,BitsWritten :8};_ec [55]=code {Code :88<<8,BitsWritten :8};_ec [56]=code {Code :89<<8,BitsWritten :8};
_ec [57]=code {Code :90<<8,BitsWritten :8};_ec [58]=code {Code :91<<8,BitsWritten :8};_ec [59]=code {Code :74<<8,BitsWritten :8};_ec [60]=code {Code :75<<8,BitsWritten :8};_ec [61]=code {Code :50<<8,BitsWritten :8};_ec [62]=code {Code :51<<8,BitsWritten :8};
_ec [63]=code {Code :52<<8,BitsWritten :8};_c =make (map[int ]code );_c [64]=code {Code :3<<8|3<<6,BitsWritten :10};_c [128]=code {Code :12<<8|8<<4,BitsWritten :12};_c [192]=code {Code :12<<8|9<<4,BitsWritten :12};_c [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_c [320]=code {Code :3<<8|3<<4,BitsWritten :12};_c [384]=code {Code :3<<8|4<<4,BitsWritten :12};_c [448]=code {Code :3<<8|5<<4,BitsWritten :12};_c [512]=code {Code :3<<8|12<<3,BitsWritten :13};_c [576]=code {Code :3<<8|13<<3,BitsWritten :13};_c [640]=code {Code :2<<8|10<<3,BitsWritten :13};
_c [704]=code {Code :2<<8|11<<3,BitsWritten :13};_c [768]=code {Code :2<<8|12<<3,BitsWritten :13};_c [832]=code {Code :2<<8|13<<3,BitsWritten :13};_c [896]=code {Code :3<<8|18<<3,BitsWritten :13};_c [960]=code {Code :3<<8|19<<3,BitsWritten :13};_c [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_c [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_c [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_c [1216]=code {Code :119<<3,BitsWritten :13};_c [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_c [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_c [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_c [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_c [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_c [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_c [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_c [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fa =make (map[int ]code );
_fa [64]=code {Code :27<<(3+8),BitsWritten :5};_fa [128]=code {Code :18<<(3+8),BitsWritten :5};_fa [192]=code {Code :23<<(2+8),BitsWritten :6};_fa [256]=code {Code :55<<(1+8),BitsWritten :7};_fa [320]=code {Code :54<<8,BitsWritten :8};_fa [384]=code {Code :55<<8,BitsWritten :8};
_fa [448]=code {Code :100<<8,BitsWritten :8};_fa [512]=code {Code :101<<8,BitsWritten :8};_fa [576]=code {Code :104<<8,BitsWritten :8};_fa [640]=code {Code :103<<8,BitsWritten :8};_fa [704]=code {Code :102<<8,BitsWritten :9};_fa [768]=code {Code :102<<8|1<<7,BitsWritten :9};
_fa [832]=code {Code :105<<8,BitsWritten :9};_fa [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fa [960]=code {Code :106<<8,BitsWritten :9};_fa [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fa [1088]=code {Code :107<<8,BitsWritten :9};_fa [1152]=code {Code :107<<8|1<<7,BitsWritten :9};
_fa [1216]=code {Code :108<<8,BitsWritten :9};_fa [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fa [1344]=code {Code :109<<8,BitsWritten :9};_fa [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fa [1472]=code {Code :76<<8,BitsWritten :9};_fa [1536]=code {Code :76<<8|1<<7,BitsWritten :9};
_fa [1600]=code {Code :77<<8,BitsWritten :9};_fa [1664]=code {Code :24<<(2+8),BitsWritten :6};_fa [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_eg =make (map[int ]code );_eg [1792]=code {Code :1<<8,BitsWritten :11};_eg [1856]=code {Code :1<<8|4<<5,BitsWritten :11};
_eg [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_eg [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_eg [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_eg [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_eg [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_eg [2240]=code {Code :1<<8|6<<4,BitsWritten :12};
_eg [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_eg [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_eg [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_eg [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_eg [2560]=code {Code :1<<8|15<<4,BitsWritten :12};
_fd =make (map[int ]byte );_fd [0]=0xFF;_fd [1]=0xFE;_fd [2]=0xFC;_fd [3]=0xF8;_fd [4]=0xF0;_fd [5]=0xE0;_fd [6]=0xC0;_fd [7]=0x80;_fd [8]=0x00;};func _cgf (_dad []byte ,_egg int )(bool ,int ,error ){_fbaf :=_egg ;var _bga bool ;_bga ,_egg =_ffb (_dad ,_egg );
if _bga {_bga ,_egg =_ffb (_dad ,_egg );if _bga {return true ,_egg ,nil ;};return false ,_fbaf ,_bb ;};return false ,_fbaf ,nil ;};func _age (_fcda ,_fgc []byte ,_ddeb int ,_efg bool ,_fcc int )([]byte ,int ,int ,error ){_ebe :=_ddeb ;var _da error ;_fgc ,_ddeb ,_da =_aegb (_fcda ,_fgc ,_ddeb ,_efg );
if _da !=nil {return _fgc ,_ebe ,_fcc ,_da ;};_efg =!_efg ;_fgc ,_ddeb ,_da =_aegb (_fcda ,_fgc ,_ddeb ,_efg );if _da !=nil {return _fgc ,_ebe ,_fcc ,_da ;};_fcc =len (_fgc );return _fgc ,_ddeb ,_fcc ,nil ;};func init (){for _ab ,_gaa :=range _ec {_bcea (_gb ,_gaa ,0,_ab );
};for _eb ,_bd :=range _fa {_bcea (_gb ,_bd ,0,_eb );};for _ecf ,_gc :=range _fb {_bcea (_cf ,_gc ,0,_ecf );};for _cbe ,_af :=range _c {_bcea (_cf ,_af ,0,_cbe );};for _dc ,_ge :=range _eg {_bcea (_gb ,_ge ,0,_dc );_bcea (_cf ,_ge ,0,_dc );};_bcea (_ag ,_fda ,0,0);
_bcea (_ag ,_fag ,0,0);_bcea (_ag ,_ae ,0,0);_bcea (_ag ,_bf ,0,0);_bcea (_ag ,_dg ,0,0);_bcea (_ag ,_fba ,0,0);_bcea (_ag ,_egd ,0,0);_bcea (_ag ,_ac ,0,0);_bcea (_ag ,_g ,0,0);};func _egaf (_bdag int )([]byte ,int ){var _ddf []byte ;for _cbae :=0;_cbae < 6;
_cbae ++{_ddf ,_bdag =_fegb (_ddf ,_bdag ,_fdb );};return _ddf ,_bdag %8;};func _bdg (_cbag []byte ,_aebb int ,_cdcg int ,_efb bool )([]byte ,int ){var (_bee code ;_cbc bool ;);for !_cbc {_bee ,_cdcg ,_cbc =_dea (_cdcg ,_efb );_cbag ,_aebb =_fegb (_cbag ,_aebb ,_bee );
};return _cbag ,_aebb ;};func _gga (_edd []byte ,_cgfe int ,_gcg code )([]byte ,int ){_fagc :=true ;var _dega []byte ;_dega ,_cgfe =_fegb (nil ,_cgfe ,_gcg );_ade :=0;var _caga int ;for _ade < len (_edd ){_caga ,_ade =_afb (_edd ,_fagc ,_ade );_dega ,_cgfe =_bdg (_dega ,_cgfe ,_caga ,_fagc );
_fagc =!_fagc ;};return _dega ,_cgfe %8;};func _efc (_ad []byte ,_cbea int )(bool ,int ,error ){_agg :=_cbea ;var _bed =false ;for _fga :=0;_fga < 6;_fga ++{_bed ,_cbea =_ggfg (_ad ,_cbea );if !_bed {if _fga > 1{return false ,_agg ,_bg ;};_cbea =_agg ;
break ;};};return _bed ,_cbea ,nil ;};func (_gf *Encoder )decodeG32D (_ce []byte )([][]byte ,error ){var (_fg [][]byte ;_fe int ;_dd error ;);_aaf :for (_fe /8)< len (_ce ){var _df bool ;_df ,_fe ,_dd =_efc (_ce ,_fe );if _dd !=nil {return nil ,_dd ;};
if _df {break ;};_df ,_fe =_ggfg (_ce ,_fe );if !_df {if _gf .EndOfLine {return nil ,_dgd ;};};var _db []byte ;_db ,_fe =_gf .decodeRow1D (_ce ,_fe );if _gf .EncodedByteAlign &&_fe %8!=0{_fe +=8-_fe %8;};if _db !=nil {_fg =append (_fg ,_db );};if _gf .Rows > 0&&!_gf .EndOfBlock &&len (_fg )>=_gf .Rows {break ;
};for _feg :=1;_feg < _gf .K &&(_fe /8)< len (_ce );_feg ++{_df ,_fe =_fgd (_ce ,_fe );if !_df {_df ,_fe ,_dd =_efc (_ce ,_fe );if _dd !=nil {return nil ,_dd ;};if _df {break _aaf ;}else {if _gf .EndOfLine {return nil ,_dgd ;};};};var (_gfe code ;_ecd bool ;
);_bfa :=true ;var _bbe []byte ;_cba :=-1;for _gfe ,_fe ,_ecd =_bgd (_ce ,_fe );_ecd ;_gfe ,_fe ,_ecd =_bgd (_ce ,_fe ){switch _gfe {case _fda :_bbe ,_cba =_dff (_fg ,_bbe ,_bfa ,_cba );case _fag :_bbe ,_fe ,_cba ,_dd =_age (_ce ,_bbe ,_fe ,_bfa ,_cba );
if _dd !=nil {return nil ,_dd ;};case _ae :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,0);_bfa =!_bfa ;case _bf :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,1);_bfa =!_bfa ;case _dg :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,2);_bfa =!_bfa ;case _fba :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,3);
_bfa =!_bfa ;case _egd :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,-1);_bfa =!_bfa ;case _ac :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,-2);_bfa =!_bfa ;case _g :_bbe ,_cba =_gge (_fg ,_bbe ,_bfa ,_cba ,-3);_bfa =!_bfa ;};if len (_bbe )>=_gf .Columns {break ;
};};if _gf .EncodedByteAlign &&_fe %8!=0{_fe +=8-_fe %8;};if _bbe !=nil {_fg =append (_fg ,_bbe );};if _gf .Rows > 0&&!_gf .EndOfBlock &&len (_fg )>=_gf .Rows {break _aaf ;};};};return _fg ,nil ;};func _fce (_dbb uint16 ,_cag int ,_dfd bool )(int ,code ){var _dab *int ;
var _ffga *code ;if _dfd {_dab ,_ffga =_dac (_gb ,_dbb ,_cag );}else {_dab ,_ffga =_dac (_cf ,_dbb ,_cag );};if _dab ==nil {return -1,code {};};return *_dab ,*_ffga ;};func _fgca (_gde []byte ,_gdg bool ,_cce int )[]byte {if _cce < 0{return _gde ;};_bfg :=make ([]byte ,_cce );
if _gdg {for _dag :=0;_dag < len (_bfg );_dag ++{_bfg [_dag ]=_cef ;};}else {for _cfa :=0;_cfa < len (_bfg );_cfa ++{_bfg [_cfa ]=_fca ;};};_gde =append (_gde ,_bfg ...);return _gde ;};var (_cef byte =1;_fca byte =0;);func _gge (_ef [][]byte ,_de []byte ,_fcd bool ,_eafd ,_egb int )([]byte ,int ){_ee :=_fab (_de ,_ef [len (_ef )-1],_eafd ,_fcd );
_ggf :=_ee +_egb ;if _eafd ==-1{_de =_fgca (_de ,_fcd ,_ggf -_eafd -1);}else {_de =_fgca (_de ,_fcd ,_ggf -_eafd );};_eafd =_ggf ;return _de ,_eafd ;};func _cagf (_ead [][]byte )[][]byte {_ccf :=make ([]byte ,len (_ead [0]));for _aega :=range _ccf {_ccf [_aega ]=_cef ;
};_ead =append (_ead ,[]byte {});for _dgfe :=len (_ead )-1;_dgfe > 0;_dgfe --{_ead [_dgfe ]=_ead [_dgfe -1];};_ead [0]=_ccf ;return _ead ;};func _dff (_ddb [][]byte ,_dbc []byte ,_aae bool ,_dca int )([]byte ,int ){_fdc :=_fab (_dbc ,_ddb [len (_ddb )-1],_dca ,_aae );
_ddd :=_ebb (_ddb [len (_ddb )-1],_fdc );if _dca ==-1{_dbc =_fgca (_dbc ,_aae ,_ddd -_dca -1);}else {_dbc =_fgca (_dbc ,_aae ,_ddd -_dca );};_dca =_ddd ;return _dbc ,_dca ;};func _dac (_fbb *decodingTreeNode ,_adbc uint16 ,_dfba int )(*int ,*code ){if _fbb ==nil {return nil ,nil ;
};if _dfba ==16{return _fbb .RunLen ,_fbb .Code ;};_gfg :=_adf (_adbc ,_dfba );_dfba ++;var _gegd *int ;var _eee *code ;if _gfg ==1{_gegd ,_eee =_dac (_fbb .Right ,_adbc ,_dfba );}else {_gegd ,_eee =_dac (_fbb .Left ,_adbc ,_dfba );};if _gegd ==nil {_gegd =_fbb .RunLen ;
_eee =_fbb .Code ;};return _gegd ,_eee ;};func (_bec *Encoder )appendEncodedRow (_fadc ,_eggd []byte ,_dffb int )[]byte {if len (_fadc )> 0&&_dffb !=0&&!_bec .EncodedByteAlign {_fadc [len (_fadc )-1]=_fadc [len (_fadc )-1]|_eggd [0];_fadc =append (_fadc ,_eggd [1:]...);
}else {_fadc =append (_fadc ,_eggd ...);};return _fadc ;};var (_bb =_d .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_bg =_d .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");
_ga =_d .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_dgd =_d .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");
_acg =_d .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_fc =_d .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _fgd (_cec []byte ,_fgfb int )(bool ,int ){return _fdd (_cec ,_fgfb ,_a )};
func _dce (_cfc []byte ,_ebd int )(uint16 ,int ,int ){_agef :=_ebd ;_acf :=_ebd /8;_ebd %=8;if _acf >=len (_cfc ){return 0,16,_agef ;};_eea :=byte (0xFF>>uint (_ebd ));_fed :=uint16 ((_cfc [_acf ]&_eea )<<uint (_ebd ))<<8;_gdd :=8-_ebd ;_acf ++;_ebd =0;
if _acf >=len (_cfc ){return _fed >>(16-uint (_gdd )),16-_gdd ,_agef +_gdd ;};_fed |=uint16 (_cfc [_acf ])<<(8-uint (_gdd ));_gdd +=8;_acf ++;_ebd =0;if _acf >=len (_cfc ){return _fed >>(16-uint (_gdd )),16-_gdd ,_agef +_gdd ;};if _gdd ==16{return _fed ,0,_agef +_gdd ;
};_gfd :=16-_gdd ;_fed |=uint16 (_cfc [_acf ]>>(8-uint (_gfd )));return _fed ,0,_agef +16;};func (_aaec *Encoder )decodeRow1D (_gdc []byte ,_cge int )([]byte ,int ){var _caae []byte ;_ega :=true ;var _gfdb int ;_gfdb ,_cge =_bba (_gdc ,_cge ,_ega );for _gfdb !=-1{_caae =_fgca (_caae ,_ega ,_gfdb );
if _gfdb < 64{if len (_caae )>=_aaec .Columns {break ;};_ega =!_ega ;};_gfdb ,_cge =_bba (_gdc ,_cge ,_ega );};return _caae ,_cge ;};func (_edf *Encoder )encodeG31D (_abe [][]byte )[]byte {var _dgf []byte ;_eed :=0;for _bbc :=range _abe {if _edf .Rows > 0&&!_edf .EndOfBlock &&_bbc ==_edf .Rows {break ;
};_ecg ,_ede :=_gga (_abe [_bbc ],_eed ,_bc );_dgf =_edf .appendEncodedRow (_dgf ,_ecg ,_eed );if _edf .EncodedByteAlign {_ede =0;};_eed =_ede ;};if _edf .EndOfBlock {_degc ,_ :=_bggg (_eed );_dgf =_edf .appendEncodedRow (_dgf ,_degc ,_eed );};return _dgf ;
};func _ffb (_ege []byte ,_dfde int )(bool ,int ){_gdga :=_dfde ;var (_bfgg uint16 ;_eeb int ;);_bfgg ,_eeb ,_dfde =_dce (_ege ,_dfde );if _eeb > 4{return false ,_gdga ;};_bfgg >>=uint (4-_eeb );_bfgg <<=4;if _bfgg !=_bc .Code {return false ,_gdga ;};return true ,_dfde -4+_eeb ;
};func _bdae (_gbc int )([]byte ,int ){var _gfgd []byte ;for _ba :=0;_ba < 2;_ba ++{_gfgd ,_gbc =_fegb (_gfgd ,_gbc ,_bc );};return _gfgd ,_gbc %8;};func (_cd *Encoder )decodeG31D (_aeg []byte )([][]byte ,error ){var _geb [][]byte ;var _gd int ;for (_gd /8)< len (_aeg ){var _gg bool ;
_gg ,_gd =_ffb (_aeg ,_gd );if !_gg {if _cd .EndOfLine {return nil ,_dgd ;};}else {for _ca :=0;_ca < 5;_ca ++{_gg ,_gd =_ffb (_aeg ,_gd );if !_gg {if _ca ==0{break ;};return nil ,_acg ;};};if _gg {break ;};};var _aa []byte ;_aa ,_gd =_cd .decodeRow1D (_aeg ,_gd );
if _cd .EncodedByteAlign &&_gd %8!=0{_gd +=8-_gd %8;};_geb =append (_geb ,_aa );if _cd .Rows > 0&&!_cd .EndOfBlock &&len (_geb )>=_cd .Rows {break ;};};return _geb ,nil ;};func _aegb (_fcdd ,_cg []byte ,_deg int ,_edg bool )([]byte ,int ,error ){_caa :=_deg ;
var _fcg int ;for _fcg ,_deg =_bba (_fcdd ,_deg ,_edg );_fcg !=-1;_fcg ,_deg =_bba (_fcdd ,_deg ,_edg ){_cg =_fgca (_cg ,_edg ,_fcg );if _fcg < 64{break ;};};if _fcg ==-1{return _cg ,_caa ,_ga ;};return _cg ,_deg ,nil ;};type code struct{Code uint16 ;BitsWritten int ;
};func _ebb (_bbda []byte ,_ffc int )int {if _ffc >=len (_bbda ){return _ffc ;};if _ffc < -1{_ffc =-1;};var _gec byte ;if _ffc > -1{_gec =_bbda [_ffc ];}else {_gec =_cef ;};_fgfc :=_ffc +1;for _fgfc < len (_bbda ){if _bbda [_fgfc ]!=_gec {break ;};_fgfc ++;
};return _fgfc ;};func _caca (_fec ,_gbg []byte ,_ffgfa ,_eca ,_gcdd int )([]byte ,int ,int ){_dffc :=_ebb (_fec ,_gcdd );_ffbd :=_eca >=0&&_fec [_eca ]==_cef ||_eca ==-1;_gbg ,_ffgfa =_fegb (_gbg ,_ffgfa ,_fag );var _faac int ;if _eca > -1{_faac =_gcdd -_eca ;
}else {_faac =_gcdd -_eca -1;};_gbg ,_ffgfa =_bdg (_gbg ,_ffgfa ,_faac ,_ffbd );_ffbd =!_ffbd ;_gdea :=_dffc -_gcdd ;_gbg ,_ffgfa =_bdg (_gbg ,_ffgfa ,_gdea ,_ffbd );_eca =_dffc ;return _gbg ,_ffgfa ,_eca ;};var (_fb map[int ]code ;_ec map[int ]code ;_c map[int ]code ;
_fa map[int ]code ;_eg map[int ]code ;_fd map[int ]byte ;_bc =code {Code :1<<4,BitsWritten :12};_fdb =code {Code :3<<3,BitsWritten :13};_a =code {Code :2<<3,BitsWritten :13};_fda =code {Code :1<<12,BitsWritten :4};_fag =code {Code :1<<13,BitsWritten :3};
_ae =code {Code :1<<15,BitsWritten :1};_bf =code {Code :3<<13,BitsWritten :3};_dg =code {Code :3<<10,BitsWritten :6};_fba =code {Code :3<<9,BitsWritten :7};_egd =code {Code :2<<13,BitsWritten :3};_ac =code {Code :2<<10,BitsWritten :6};_g =code {Code :2<<9,BitsWritten :7};
);var (_gb =&decodingTreeNode {Val :255};_cf =&decodingTreeNode {Val :255};_ag =&decodingTreeNode {Val :255};);func _fdd (_ecfa []byte ,_fgf int ,_dbbc code )(bool ,int ){_dfbd :=_fgf ;var (_gebg uint16 ;_aff int ;);_gebg ,_aff ,_fgf =_dce (_ecfa ,_fgf );
if _aff > 3{return false ,_dfbd ;};_gebg >>=uint (3-_aff );_gebg <<=3;if _gebg !=_dbbc .Code {return false ,_dfbd ;};return true ,_fgf -3+_aff ;};func _bggg (_gbe int )([]byte ,int ){var _aebe []byte ;for _efda :=0;_efda < 6;_efda ++{_aebe ,_gbe =_fegb (_aebe ,_gbe ,_bc );
};return _aebe ,_gbe %8;};func _fegb (_cgfea []byte ,_cefc int ,_fcgb code )([]byte ,int ){_bae :=0;for _bae < _fcgb .BitsWritten {_fcee :=_cefc /8;_ffgb :=_cefc %8;if _fcee >=len (_cgfea ){_cgfea =append (_cgfea ,0);};_edfb :=8-_ffgb ;_eef :=_fcgb .BitsWritten -_bae ;
if _edfb > _eef {_edfb =_eef ;};if _bae < 8{_cgfea [_fcee ]=_cgfea [_fcee ]|byte (_fcgb .Code >>uint (8+_ffgb -_bae ))&_fd [8-_edfb -_ffgb ];}else {_cgfea [_fcee ]=_cgfea [_fcee ]|(byte (_fcgb .Code <<uint (_bae -8))&_fd [8-_edfb ])>>uint (_ffgb );};_cefc +=_edfb ;
_bae +=_edfb ;};return _cgfea ,_cefc ;};func _fdac (_cbaf []byte ,_fdbg int )([]byte ,int ){return _fegb (_cbaf ,_fdbg ,_fda )};func _acb (_gaf ,_agd int )code {var _dadb code ;switch _agd -_gaf {case -1:_dadb =_bf ;case -2:_dadb =_dg ;case -3:_dadb =_fba ;
case 0:_dadb =_ae ;case 1:_dadb =_egd ;case 2:_dadb =_ac ;case 3:_dadb =_g ;};return _dadb ;};func _bba (_eaef []byte ,_bce int ,_cffb bool )(int ,int ){var (_fac uint16 ;_fdf int ;_gca int ;);_gca =_bce ;_fac ,_fdf ,_ =_dce (_eaef ,_bce );_gbff ,_cdb :=_fce (_fac ,_fdf ,_cffb );
if _gbff ==-1{return -1,_gca ;};return _gbff ,_gca +_cdb .BitsWritten ;};func (_afe *Encoder )Decode (encoded []byte )([][]byte ,error ){if _afe .BlackIs1 {_cef =0;_fca =1;}else {_cef =1;_fca =0;};if _afe .K ==0{return _afe .decodeG31D (encoded );};if _afe .K > 0{return _afe .decodeG32D (encoded );
};if _afe .K < 4{return _afe .decodeG4 (encoded );};return nil ,nil ;};func _adf (_bfb uint16 ,_ddbf int )byte {if _ddbf < 8{_bfb >>=8;};_ddbf %=8;_bcf :=byte (0x01<<(7-uint (_ddbf )));return (byte (_bfb )&_bcf )>>(7-uint (_ddbf ));};func _bcea (_geg *decodingTreeNode ,_cage code ,_cgb int ,_ccg int ){_fad :=_adf (_cage .Code ,_cgb );
_cgb ++;if _fad ==1{if _geg .Right ==nil {_geg .Right =&decodingTreeNode {Val :_fad };};if _cgb ==_cage .BitsWritten {_geg .Right .RunLen =&_ccg ;_geg .Right .Code =&_cage ;}else {_bcea (_geg .Right ,_cage ,_cgb ,_ccg );};}else {if _geg .Left ==nil {_geg .Left =&decodingTreeNode {Val :_fad };
};if _cgb ==_cage .BitsWritten {_geg .Left .RunLen =&_ccg ;_geg .Left .Code =&_cage ;}else {_bcea (_geg .Left ,_cage ,_cgb ,_ccg );};};};func _afb (_dfc []byte ,_bbea bool ,_eba int )(int ,int ){_cgeb :=0;for _eba < len (_dfc ){if _bbea {if _dfc [_eba ]!=_cef {break ;
};}else {if _dfc [_eba ]!=_fca {break ;};};_cgeb ++;_eba ++;};return _cgeb ,_eba ;};func _bfc (_dcb []byte ,_ceg ,_affd ,_gcgb int )([]byte ,int ){_egc :=_acb (_affd ,_gcgb );_dcb ,_ceg =_fegb (_dcb ,_ceg ,_egc );return _dcb ,_ceg ;};func (_gcd *Encoder )encodeG4 (_abc [][]byte )[]byte {_efd :=make ([][]byte ,len (_abc ));
copy (_efd ,_abc );_efd =_cagf (_efd );var _bda []byte ;var _degd int ;for _egbb :=1;_egbb < len (_efd );_egbb ++{if _gcd .Rows > 0&&!_gcd .EndOfBlock &&_egbb ==(_gcd .Rows +1){break ;};var _cdc []byte ;var _aeb ,_ecdc ,_gbb int ;_fgda :=_degd ;_dge :=-1;
for _dge < len (_efd [_egbb ]){_aeb =_ebb (_efd [_egbb ],_dge );_ecdc =_agefd (_efd [_egbb ],_efd [_egbb -1],_dge );_gbb =_ebb (_efd [_egbb -1],_ecdc );if _gbb < _aeb {_cdc ,_fgda =_fegb (_cdc ,_fgda ,_fda );_dge =_gbb ;}else {if _e .Abs (float64 (_ecdc -_aeb ))> 3{_cdc ,_fgda ,_dge =_caca (_efd [_egbb ],_cdc ,_fgda ,_dge ,_aeb );
}else {_cdc ,_fgda =_bfc (_cdc ,_fgda ,_aeb ,_ecdc );_dge =_aeb ;};};};_bda =_gcd .appendEncodedRow (_bda ,_cdc ,_degd );if _gcd .EncodedByteAlign {_fgda =0;};_degd =_fgda %8;};if _gcd .EndOfBlock {_cdd ,_ :=_bdae (_degd );_bda =_gcd .appendEncodedRow (_bda ,_cdd ,_degd );
};return _bda ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_dfbac *Encoder )encodeG32D (_bbd [][]byte )[]byte {var _cffe []byte ;var _cfcf int ;
for _ged :=0;_ged < len (_bbd );_ged +=_dfbac .K {if _dfbac .Rows > 0&&!_dfbac .EndOfBlock &&_ged ==_dfbac .Rows {break ;};_fcdb ,_adc :=_gga (_bbd [_ged ],_cfcf ,_fdb );_cffe =_dfbac .appendEncodedRow (_cffe ,_fcdb ,_cfcf );if _dfbac .EncodedByteAlign {_adc =0;
};_cfcf =_adc ;for _fgag :=_ged +1;_fgag < (_ged +_dfbac .K )&&_fgag < len (_bbd );_fgag ++{if _dfbac .Rows > 0&&!_dfbac .EndOfBlock &&_fgag ==_dfbac .Rows {break ;};_daa ,_degb :=_fegb (nil ,_cfcf ,_a );var _ecc ,_fcgd ,_faa int ;_dada :=-1;for _dada < len (_bbd [_fgag ]){_ecc =_ebb (_bbd [_fgag ],_dada );
_fcgd =_agefd (_bbd [_fgag ],_bbd [_fgag -1],_dada );_faa =_ebb (_bbd [_fgag -1],_fcgd );if _faa < _ecc {_daa ,_degb =_fdac (_daa ,_degb );_dada =_faa ;}else {if _e .Abs (float64 (_fcgd -_ecc ))> 3{_daa ,_degb ,_dada =_caca (_bbd [_fgag ],_daa ,_degb ,_dada ,_ecc );
}else {_daa ,_degb =_bfc (_daa ,_degb ,_ecc ,_fcgd );_dada =_ecc ;};};};_cffe =_dfbac .appendEncodedRow (_cffe ,_daa ,_cfcf );if _dfbac .EncodedByteAlign {_degb =0;};_cfcf =_degb %8;};};if _dfbac .EndOfBlock {_bgdg ,_ :=_egaf (_cfcf );_cffe =_dfbac .appendEncodedRow (_cffe ,_bgdg ,_cfcf );
};return _cffe ;};func _bgd (_ffg []byte ,_cfg int )(code ,int ,bool ){var (_gab uint16 ;_dfe int ;_fdbe int ;);_fdbe =_cfg ;_gab ,_dfe ,_ =_dce (_ffg ,_cfg );_ecfc ,_gce :=_cc (_gab ,_dfe );if !_gce {return code {},_fdbe ,false ;};return _ecfc ,_fdbe +_ecfc .BitsWritten ,true ;
};func (_ea *Encoder )decodeG4 (_cff []byte )([][]byte ,error ){_aab :=make ([]byte ,_ea .Columns );for _bgg :=range _aab {_aab [_bgg ]=_cef ;};_eaf :=make ([][]byte ,1);_eaf [0]=_aab ;var (_eae bool ;_ff error ;_bggc int ;);for (_bggc /8)< len (_cff ){_eae ,_bggc ,_ff =_cgf (_cff ,_bggc );
if _ff !=nil {return nil ,_ff ;};if _eae {break ;};var (_egda code ;_dde bool ;);_ed :=true ;var _dfg []byte ;_afd :=-1;_gbf :=true ;for _afd < _ea .Columns {_egda ,_bggc ,_dde =_bgd (_cff ,_bggc );if !_dde {_b .Log .Warning ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u0063i\u0074\u0074\u0066a\u0078:\u0020\u0025\u0076",_fc );
_gbf =false ;break ;};switch _egda {case _fda :_dfg ,_afd =_dff (_eaf ,_dfg ,_ed ,_afd );case _fag :_dfg ,_bggc ,_afd ,_ff =_age (_cff ,_dfg ,_bggc ,_ed ,_afd );if _ff !=nil {_b .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064i\u006e\u0067\u0020\u0063c\u0069\u0074\u0074\u0066\u0061\u0078\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020\u006d\u006f\u0064\u0065\u003a\u0020\u0025\u0076",_ff );
_gbf =false ;break ;};case _ae :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,0);_ed =!_ed ;case _bf :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,1);_ed =!_ed ;case _dg :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,2);_ed =!_ed ;case _fba :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,3);
_ed =!_ed ;case _egd :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,-1);_ed =!_ed ;case _ac :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,-2);_ed =!_ed ;case _g :_dfg ,_afd =_gge (_eaf ,_dfg ,_ed ,_afd ,-3);_ed =!_ed ;};if len (_dfg )>=_ea .Columns {break ;};};
if !_gbf {_bggc +=8-_bggc %8;continue ;};if _ea .EncodedByteAlign &&_bggc %8!=0{_bggc +=8-_bggc %8;};_eaf =append (_eaf ,_dfg );if _ea .Rows > 0&&!_ea .EndOfBlock &&len (_eaf )>=(_ea .Rows +1){break ;};};_eaf =_eaf [1:];return _eaf ,nil ;};func _ggfg (_ffa []byte ,_bcee int )(bool ,int ){return _fdd (_ffa ,_bcee ,_fdb )};
func (_gcf *Encoder )Encode (pixels [][]byte )[]byte {if _gcf .BlackIs1 {_cef =0;_fca =1;}else {_cef =1;_fca =0;};if _gcf .K ==0{return _gcf .encodeG31D (pixels );};if _gcf .K > 0{return _gcf .encodeG32D (pixels );};if _gcf .K < 0{return _gcf .encodeG4 (pixels );
};return nil ;};type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _dea (_gdeg int ,_cac bool )(code ,int ,bool ){if _gdeg < 64{if _cac {return _ec [_gdeg ],0,true ;};return _fb [_gdeg ],0,true ;
};_adfe :=_gdeg /64;if _adfe > 40{return _eg [2560],_gdeg -2560,false ;};if _adfe > 27{return _eg [_adfe *64],_gdeg -_adfe *64,false ;};if _cac {return _fa [_adfe *64],_gdeg -_adfe *64,false ;};return _c [_adfe *64],_gdeg -_adfe *64,false ;};func _fab (_fgcg ,_ada []byte ,_cacd int ,_gdgc bool )int {_gcc :=_ebb (_ada ,_cacd );
if _gcc < len (_ada )&&(_cacd ==-1&&_ada [_gcc ]==_cef ||_cacd >=0&&_cacd < len (_fgcg )&&_fgcg [_cacd ]==_ada [_gcc ]||_cacd >=len (_fgcg )&&_gdgc &&_ada [_gcc ]==_cef ||_cacd >=len (_fgcg )&&!_gdgc &&_ada [_gcc ]==_fca ){_gcc =_ebb (_ada ,_gcc );};return _gcc ;
};