//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sampling ;import (_f "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/imageutil";_a "io";);func (_gd *Reader )ReadSamples (samples []uint32 )(_eg error ){for _dd :=0;_dd < len (samples );_dd ++{samples [_dd ],_eg =_gd .ReadSample ();if _eg !=nil {return _eg ;};};return nil ;};func (_ggg *Reader )ReadSample ()(uint32 ,error ){if _ggg ._ac ==_ggg ._bc .Height {return 0,_a .EOF ;};_db ,_geb :=_ggg ._gg .ReadBits (byte (_ggg ._bc .BitsPerComponent ));if _geb !=nil {return 0,_geb ;};_ggg ._d --;if _ggg ._d ==0{_ggg ._d =_ggg ._bc .ColorComponents ;_ggg ._e ++;};if _ggg ._e ==_ggg ._bc .Width {if _ggg ._gc {_ggg ._gg .ConsumeRemainingBits ();};_ggg ._e =0;_ggg ._ac ++;};return uint32 (_db ),nil ;};type SampleWriter interface{WriteSample (_acb uint32 )error ;WriteSamples (_ba []uint32 )error ;};type SampleReader interface{ReadSample ()(uint32 ,error );ReadSamples (_ge []uint32 )error ;};func (_fbg *Writer )WriteSample (sample uint32 )error {if _ ,_gbg :=_fbg ._bdb .WriteBits (uint64 (sample ),_fbg ._dg .BitsPerComponent );_gbg !=nil {return _gbg ;};_fbg ._acc --;if _fbg ._acc ==0{_fbg ._acc =_fbg ._dg .ColorComponents ;_fbg ._bfb ++;};if _fbg ._bfb ==_fbg ._dg .Width {if _fbg ._be {_fbg ._bdb .FinishByte ();};_fbg ._bfb =0;};return nil ;};func ResampleUint32 (data []uint32 ,bitsPerInputSample int ,bitsPerOutputSample int )[]uint32 {var _aaa []uint32 ;_ccb :=bitsPerOutputSample ;var _fe uint32 ;var _ec uint32 ;_gb :=0;_gbb :=0;_ag :=0;for _ag < len (data ){if _gb > 0{_eca :=_gb ;if _ccb < _eca {_eca =_ccb ;};_fe =(_fe <<uint (_eca ))|(_ec >>uint (bitsPerInputSample -_eca ));_gb -=_eca ;if _gb > 0{_ec =_ec <<uint (_eca );}else {_ec =0;};_ccb -=_eca ;if _ccb ==0{_aaa =append (_aaa ,_fe );_ccb =bitsPerOutputSample ;_fe =0;_gbb ++;};}else {_ef :=data [_ag ];_ag ++;_bfa :=bitsPerInputSample ;if _ccb < _bfa {_bfa =_ccb ;};_gb =bitsPerInputSample -_bfa ;_fe =(_fe <<uint (_bfa ))|(_ef >>uint (_gb ));if _bfa < bitsPerInputSample {_ec =_ef <<uint (_bfa );};_ccb -=_bfa ;if _ccb ==0{_aaa =append (_aaa ,_fe );_ccb =bitsPerOutputSample ;_fe =0;_gbb ++;};};};for _gb >=bitsPerOutputSample {_ecb :=_gb ;if _ccb < _ecb {_ecb =_ccb ;};_fe =(_fe <<uint (_ecb ))|(_ec >>uint (bitsPerInputSample -_ecb ));_gb -=_ecb ;if _gb > 0{_ec =_ec <<uint (_ecb );}else {_ec =0;};_ccb -=_ecb ;if _ccb ==0{_aaa =append (_aaa ,_fe );_ccb =bitsPerOutputSample ;_fe =0;_gbb ++;};};if _ccb > 0&&_ccb < bitsPerOutputSample {_fe <<=uint (_ccb );_aaa =append (_aaa ,_fe );};return _aaa ;};func NewWriter (img _b .ImageBase )*Writer {return &Writer {_bdb :_f .NewWriterMSB (img .Data ),_dg :img ,_acc :img .ColorComponents ,_be :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};func NewReader (img _b .ImageBase )*Reader {return &Reader {_gg :_f .NewReader (img .Data ),_bc :img ,_d :img .ColorComponents ,_gc :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};func ResampleBytes (data []byte ,bitsPerSample int )[]uint32 {var _ad []uint32 ;_bf :=bitsPerSample ;var _gdb uint32 ;var _dc byte ;_aa :=0;_c :=0;_fg :=0;for _fg < len (data ){if _aa > 0{_bd :=_aa ;if _bf < _bd {_bd =_bf ;};_gdb =(_gdb <<uint (_bd ))|uint32 (_dc >>uint (8-_bd ));_aa -=_bd ;if _aa > 0{_dc =_dc <<uint (_bd );}else {_dc =0;};_bf -=_bd ;if _bf ==0{_ad =append (_ad ,_gdb );_bf =bitsPerSample ;_gdb =0;_c ++;};}else {_fb :=data [_fg ];_fg ++;_acg :=8;if _bf < _acg {_acg =_bf ;};_aa =8-_acg ;_gdb =(_gdb <<uint (_acg ))|uint32 (_fb >>uint (_aa ));if _acg < 8{_dc =_fb <<uint (_acg );};_bf -=_acg ;if _bf ==0{_ad =append (_ad ,_gdb );_bf =bitsPerSample ;_gdb =0;_c ++;};};};for _aa >=bitsPerSample {_cc :=_aa ;if _bf < _cc {_cc =_bf ;};_gdb =(_gdb <<uint (_cc ))|uint32 (_dc >>uint (8-_cc ));_aa -=_cc ;if _aa > 0{_dc =_dc <<uint (_cc );}else {_dc =0;};_bf -=_cc ;if _bf ==0{_ad =append (_ad ,_gdb );_bf =bitsPerSample ;_gdb =0;_c ++;};};return _ad ;};func (_fbe *Writer )WriteSamples (samples []uint32 )error {for _ddb :=0;_ddb < len (samples );_ddb ++{if _efd :=_fbe .WriteSample (samples [_ddb ]);_efd !=nil {return _efd ;};};return nil ;};type Reader struct{_bc _b .ImageBase ;_gg *_f .Reader ;_e ,_ac ,_d int ;_gc bool ;};type Writer struct{_dg _b .ImageBase ;_bdb *_f .Writer ;_bfb ,_acc int ;_be bool ;};