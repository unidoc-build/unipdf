//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitwise ;import (_c "encoding/binary";_d "errors";_b "github.com/unidoc/unipdf/v3/common";_ag "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "io";);func (_acb *SubstreamReader )fillBuffer ()error {if uint64 (_acb ._aeag .StreamPosition ())!=_acb ._bgb +_acb ._cae {_ ,_bgf :=_acb ._aeag .Seek (int64 (_acb ._bgb +_acb ._cae ),_a .SeekStart );if _bgf !=nil {return _bgf ;};};_acb ._ef =_acb ._bgb ;_edea :=_eba (uint64 (len (_acb ._gff )),_acb ._add -_acb ._bgb );_efc :=make ([]byte ,_edea );_cga ,_fgd :=_acb ._aeag .Read (_efc );if _fgd !=nil {return _fgd ;};for _begf :=uint64 (0);_begf < _edea ;_begf ++{_acb ._gff [_begf ]=_efc [_begf ];};_acb ._ffb =_acb ._ef +uint64 (_cga );return nil ;};func NewSubstreamReader (r StreamReader ,offset ,length uint64 )(*SubstreamReader ,error ){if r ==nil {return nil ,_d .New ("\u0072o\u006ft\u0020\u0072\u0065\u0061\u0064e\u0072\u0020i\u0073\u0020\u006e\u0069\u006c");};_b .Log .Trace ("\u004e\u0065\u0077\u0053\u0075\u0062\u0073\u0074r\u0065\u0061\u006dRe\u0061\u0064\u0065\u0072\u0020\u0061t\u0020\u006f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0064\u0020\u0077\u0069\u0074h\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064",offset ,length );return &SubstreamReader {_aeag :r ,_cae :offset ,_add :length ,_gff :make ([]byte ,length )},nil ;};func (_fe *BufferedWriter )byteCapacity ()int {_fg :=len (_fe ._e )-_fe ._cd ;if _fe ._eb !=0{_fg --;};return _fg ;};type BufferedWriter struct{_e []byte ;_eb uint8 ;_cd int ;_dd bool ;};var _ _a .Writer =&BufferedWriter {};func (_dfd *Reader )ReadBit ()(_fea int ,_ffa error ){_dfdd ,_ffa :=_dfd .readBool ();if _ffa !=nil {return 0,_ffa ;};if _dfdd {_fea =1;};return _fea ,nil ;};func (_gdg *Reader )Length ()uint64 {return uint64 (len (_gdg ._gcg ))};func (_dge *Writer )byteCapacity ()int {_bdb :=len (_dge ._ccce )-_dge ._egd ;if _dge ._dcbf !=0{_bdb --;};return _bdb ;};func (_fdb *Reader )readBool ()(_gdgd bool ,_gdd error ){if _fdb ._bg ==0{_fdb ._abe ,_gdd =_fdb .readBufferByte ();if _gdd !=nil {return false ,_gdd ;};_gdgd =(_fdb ._abe &0x80)!=0;_fdb ._abe ,_fdb ._bg =_fdb ._abe &0x7f,7;return _gdgd ,nil ;};_fdb ._bg --;_gdgd =(_fdb ._abe &(1<<_fdb ._bg ))!=0;_fdb ._abe &=1<<_fdb ._bg -1;return _gdgd ,nil ;};func (_fgb *Writer )WriteByte (c byte )error {return _fgb .writeByte (c )};func (_gcgg *Reader )ReadUint32 ()(uint32 ,error ){_eae :=make ([]byte ,4);_ ,_agbb :=_gcgg .Read (_eae );if _agbb !=nil {return 0,_agbb ;};return _c .BigEndian .Uint32 (_eae ),nil ;};func (_bc *BufferedWriter )Reset (){_bc ._e =_bc ._e [:0];_bc ._cd =0;_bc ._eb =0};func (_fec *BufferedWriter )grow (_ac int ){if _fec ._e ==nil &&_ac < _cc {_fec ._e =make ([]byte ,_ac ,_cc );return ;};_ce :=len (_fec ._e );if _fec ._eb !=0{_ce ++;};_agf :=cap (_fec ._e );switch {case _ac <=_agf /2-_ce :_b .Log .Trace ("\u005b\u0042\u0075\u0066\u0066\u0065r\u0065\u0064\u0057\u0072\u0069t\u0065\u0072\u005d\u0020\u0067\u0072o\u0077\u0020\u002d\u0020\u0072e\u0073\u006c\u0069\u0063\u0065\u0020\u006f\u006e\u006c\u0079\u002e\u0020L\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0043\u0061\u0070\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u006e\u003a\u0020'\u0025\u0064\u0027",len (_fec ._e ),cap (_fec ._e ),_ac );_b .Log .Trace ("\u0020\u006e\u0020\u003c\u003d\u0020\u0063\u0020\u002f\u0020\u0032\u0020\u002d\u006d\u002e \u0043:\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u006d\u003a\u0020\u0027\u0025\u0064\u0027",_agf ,_ce );copy (_fec ._e ,_fec ._e [_fec .fullOffset ():]);case _agf > _db -_agf -_ac :_b .Log .Error ("\u0042\u0055F\u0046\u0045\u0052 \u0074\u006f\u006f\u0020\u006c\u0061\u0072\u0067\u0065");return ;default:_fbd :=make ([]byte ,2*_agf +_ac );copy (_fbd ,_fec ._e );_fec ._e =_fbd ;};_fec ._e =_fec ._e [:_ce +_ac ];};func (_gdec *Reader )read (_ec []byte )(int ,error ){if _gdec ._cea >=int64 (len (_gdec ._gcg )){return 0,_a .EOF ;};_gdec ._gde =-1;_edg :=copy (_ec ,_gdec ._gcg [_gdec ._cea :]);_gdec ._cea +=int64 (_edg );return _edg ,nil ;};func (_faf *Writer )UseMSB ()bool {return _faf ._ebeb };type Reader struct{_gcg []byte ;_abe byte ;_bg byte ;_cea int64 ;_gb int ;_gde int ;_dgc int64 ;_cg byte ;};var _ _a .ByteWriter =&BufferedWriter {};func (_gc *BufferedWriter )writeFullBytes (_fa []byte )int {_cfa :=copy (_gc ._e [_gc .fullOffset ():],_fa );_gc ._cd +=_cfa ;return _cfa ;};func (_cgde *Writer )writeBit (_bdd uint8 )error {if len (_cgde ._ccce )-1< _cgde ._egd {return _a .EOF ;};_cdc :=_cgde ._dcbf ;if _cgde ._ebeb {_cdc =7-_cgde ._dcbf ;};_cgde ._ccce [_cgde ._egd ]|=byte (uint16 (_bdd <<_cdc )&0xff);_cgde ._dcbf ++;if _cgde ._dcbf ==8{_cgde ._egd ++;_cgde ._dcbf =0;};return nil ;};func (_fbe *Reader )ReadBits (n byte )(_acef uint64 ,_ge error ){if n < _fbe ._bg {_cgb :=_fbe ._bg -n ;_acef =uint64 (_fbe ._abe >>_cgb );_fbe ._abe &=1<<_cgb -1;_fbe ._bg =_cgb ;return _acef ,nil ;};if n > _fbe ._bg {if _fbe ._bg > 0{_acef =uint64 (_fbe ._abe );n -=_fbe ._bg ;};for n >=8{_fag ,_eee :=_fbe .readBufferByte ();if _eee !=nil {return 0,_eee ;};_acef =_acef <<8+uint64 (_fag );n -=8;};if n > 0{if _fbe ._abe ,_ge =_fbe .readBufferByte ();_ge !=nil {return 0,_ge ;};_bd :=8-n ;_acef =_acef <<n +uint64 (_fbe ._abe >>_bd );_fbe ._abe &=1<<_bd -1;_fbe ._bg =_bd ;}else {_fbe ._bg =0;};return _acef ,nil ;};_fbe ._bg =0;return uint64 (_fbe ._abe ),nil ;};func (_bgff *Writer )FinishByte (){if _bgff ._dcbf ==0{return ;};_bgff ._dcbf =0;_bgff ._egd ++;};func (_dg *BufferedWriter )Data ()[]byte {return _dg ._e };func (_dfa *SubstreamReader )Mark (){_dfa ._edee =_dfa ._bgb ;_dfa ._adb =_dfa ._gge };type StreamReader interface{_a .Reader ;_a .ByteReader ;_a .Seeker ;Align ()byte ;BitPosition ()int ;Mark ();Length ()uint64 ;ReadBit ()(int ,error );ReadBits (_aef byte )(uint64 ,error );ReadBool ()(bool ,error );ReadUint32 ()(uint32 ,error );Reset ();StreamPosition ()int64 ;};func (_fbb *SubstreamReader )BitPosition ()int {return int (_fbb ._gge )};type SubstreamReader struct{_bgb uint64 ;_aeag StreamReader ;_cae uint64 ;_add uint64 ;_gff []byte ;_ef uint64 ;_ffb uint64 ;_fga byte ;_gge byte ;_edee uint64 ;_adb byte ;};func (_bde *SubstreamReader )readUnalignedByte ()(_fcg byte ,_eaf error ){_dbab :=_bde ._gge ;_fcg =_bde ._fga <<(8-_dbab );_bde ._fga ,_eaf =_bde .readBufferByte ();if _eaf !=nil {return 0,_eaf ;};_fcg |=_bde ._fga >>_dbab ;_bde ._fga &=1<<_dbab -1;return _fcg ,nil ;};func (_df *BufferedWriter )fullOffset ()int {_bfb :=_df ._cd ;if _df ._eb !=0{_bfb ++;};return _bfb ;};func (_fcdd *Writer )WriteBit (bit int )error {switch bit {case 0,1:return _fcdd .writeBit (uint8 (bit ));};return _ag .Error ("\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0062\u0069\u0074\u0020v\u0061\u006c\u0075\u0065");};func (_eg *BufferedWriter )WriteBits (bits uint64 ,number int )(_ccg int ,_agb error ){const _cfe ="\u0042u\u0066\u0066\u0065\u0072e\u0064\u0057\u0072\u0069\u0074e\u0072.\u0057r\u0069\u0074\u0065\u0072\u0042\u0069\u0074s";if number < 0||number > 64{return 0,_ag .Errorf (_cfe ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};_ccd :=number /8;if _ccd > 0{_aa :=number -_ccd *8;for _bcd :=_ccd -1;_bcd >=0;_bcd --{_dgb :=byte ((bits >>uint (_bcd *8+_aa ))&0xff);if _agb =_eg .WriteByte (_dgb );_agb !=nil {return _ccg ,_ag .Wrapf (_agb ,_cfe ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_ccd -_bcd +1);};};number -=_ccd *8;if number ==0{return _ccd ,nil ;};};var _gd int ;for _bcc :=0;_bcc < number ;_bcc ++{if _eg ._dd {_gd =int ((bits >>uint (number -1-_bcc ))&0x1);}else {_gd =int (bits &0x1);bits >>=1;};if _agb =_eg .WriteBit (_gd );_agb !=nil {return _ccg ,_ag .Wrapf (_agb ,_cfe ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_bcc );};};return _ccd ,nil ;};func (_gfg *SubstreamReader )StreamPosition ()int64 {return int64 (_gfg ._bgb )};func (_agc *BufferedWriter )tryGrowByReslice (_ede int )bool {if _ace :=len (_agc ._e );_ede <=cap (_agc ._e )-_ace {_agc ._e =_agc ._e [:_ace +_ede ];return true ;};return false ;};func (_cgbb *SubstreamReader )ReadBit ()(_gba int ,_efa error ){_dfdb ,_efa :=_cgbb .readBool ();if _efa !=nil {return 0,_efa ;};if _dfdb {_gba =1;};return _gba ,nil ;};var (_ _a .Reader =&Reader {};_ _a .ByteReader =&Reader {};_ _a .Seeker =&Reader {};_ StreamReader =&Reader {};);func (_ffd *Writer )SkipBits (skip int )error {const _acf ="\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073";if skip ==0{return nil ;};_adeg :=int (_ffd ._dcbf )+skip ;if _adeg >=0&&_adeg < 8{_ffd ._dcbf =uint8 (_adeg );return nil ;};_adeg =int (_ffd ._dcbf )+_ffd ._egd *8+skip ;if _adeg < 0{return _ag .Errorf (_acf ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fecc :=_adeg /8;_acaa :=_adeg %8;_b .Log .Trace ("\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073");_b .Log .Trace ("\u0042\u0069\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0042\u0079\u0074\u0065\u0049n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0046\u0075\u006c\u006c\u0042\u0069\u0074\u0073\u003a\u0020'\u0025\u0064\u0027\u002c\u0020\u004c\u0065\u006e\u003a\u0020\u0027\u0025\u0064\u0027,\u0020\u0043\u0061p\u003a\u0020\u0027\u0025\u0064\u0027",_ffd ._dcbf ,_ffd ._egd ,int (_ffd ._dcbf )+(_ffd ._egd )*8,len (_ffd ._ccce ),cap (_ffd ._ccce ));_b .Log .Trace ("S\u006b\u0069\u0070\u003a\u0020\u0027%\u0064\u0027\u002c\u0020\u0064\u003a \u0027\u0025\u0064\u0027\u002c\u0020\u0062i\u0074\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025d\u0027",skip ,_adeg ,_acaa );_ffd ._dcbf =uint8 (_acaa );if _fcd :=_fecc -_ffd ._egd ;_fcd > 0&&len (_ffd ._ccce )-1< _fecc {_b .Log .Trace ("\u0042\u0079\u0074e\u0044\u0069\u0066\u0066\u003a\u0020\u0025\u0064",_fcd );return _ag .Errorf (_acf ,"\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ffd ._egd =_fecc ;_b .Log .Trace ("\u0042\u0069\u0074I\u006e\u0064\u0065\u0078:\u0020\u0027\u0025\u0064\u0027\u002c\u0020B\u0079\u0074\u0065\u0049\u006e\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027",_ffd ._dcbf ,_ffd ._egd );return nil ;};func (_begb *Reader )Seek (offset int64 ,whence int )(int64 ,error ){_begb ._gde =-1;var _bfcb int64 ;switch whence {case _a .SeekStart :_bfcb =offset ;case _a .SeekCurrent :_bfcb =_begb ._cea +offset ;case _a .SeekEnd :_bfcb =int64 (len (_begb ._gcg ))+offset ;default:return 0,_d .New ("\u0072\u0065\u0061de\u0072\u002e\u0052\u0065\u0061\u0064\u0065\u0072\u002eS\u0065e\u006b:\u0020i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};if _bfcb < 0{return 0,_d .New ("\u0072\u0065a\u0064\u0065\u0072\u002eR\u0065\u0061d\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u003a \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u006f\u006e");};_begb ._cea =_bfcb ;_begb ._bg =0;return _bfcb ,nil ;};func (_aeaa *Writer )Write (p []byte )(int ,error ){if len (p )> _aeaa .byteCapacity (){return 0,_a .EOF ;};for _ ,_fgf :=range p {if _age :=_aeaa .writeByte (_fgf );_age !=nil {return 0,_age ;};};return len (p ),nil ;};type Writer struct{_ccce []byte ;_dcbf uint8 ;_egd int ;_ebeb bool ;};var _ BinaryWriter =&BufferedWriter {};func NewWriter (data []byte )*Writer {return &Writer {_ccce :data }};func (_aea *Reader )Align ()(_ee byte ){_ee =_aea ._bg ;_aea ._bg =0;return _ee };func (_aca *Reader )BitPosition ()int {return int (_aca ._bg )};type BinaryWriter interface{BitWriter ;_a .Writer ;_a .ByteWriter ;Data ()[]byte ;};func (_dbg *BufferedWriter )ResetBitIndex (){_dbg ._eb =0};func (_gf *BufferedWriter )writeByte (_ga byte ){switch {case _gf ._eb ==0:_gf ._e [_gf ._cd ]=_ga ;_gf ._cd ++;case _gf ._dd :_gf ._e [_gf ._cd ]|=_ga >>_gf ._eb ;_gf ._cd ++;_gf ._e [_gf ._cd ]=byte (uint16 (_ga )<<(8-_gf ._eb )&0xff);default:_gf ._e [_gf ._cd ]|=byte (uint16 (_ga )<<_gf ._eb &0xff);_gf ._cd ++;_gf ._e [_gf ._cd ]=_ga >>(8-_gf ._eb );};};func (_dba *Reader )Mark (){_dba ._dgc =_dba ._cea ;_dba ._cg =_dba ._bg };func (_ccc *SubstreamReader )ReadUint32 ()(uint32 ,error ){_ebe :=make ([]byte ,4);_ ,_gfb :=_ccc .Read (_ebe );if _gfb !=nil {return 0,_gfb ;};return _c .BigEndian .Uint32 (_ebe ),nil ;};func NewReader (data []byte )*Reader {return &Reader {_gcg :data }};func (_ggf *SubstreamReader )ReadBool ()(bool ,error ){return _ggf .readBool ()};func (_dea *Reader )StreamPosition ()int64 {return _dea ._cea };func (_ae *BufferedWriter )Len ()int {return _ae .byteCapacity ()};func (_eef *Reader )ReadByte ()(byte ,error ){if _eef ._bg ==0{return _eef .readBufferByte ();};return _eef .readUnalignedByte ();};func (_cf *BufferedWriter )WriteByte (bt byte )error {if _cf ._cd > len (_cf ._e )-1||(_cf ._cd ==len (_cf ._e )-1&&_cf ._eb !=0){_cf .expandIfNeeded (1);};_cf .writeByte (bt );return nil ;};func (_begc *Reader )readBufferByte ()(byte ,error ){if _begc ._cea >=int64 (len (_begc ._gcg )){return 0,_a .EOF ;};_begc ._gde =-1;_ecc :=_begc ._gcg [_begc ._cea ];_begc ._cea ++;_begc ._gb =int (_ecc );return _ecc ,nil ;};func (_ade *SubstreamReader )ReadByte ()(byte ,error ){if _ade ._gge ==0{return _ade .readBufferByte ();};return _ade .readUnalignedByte ();};func (_dce *SubstreamReader )Seek (offset int64 ,whence int )(int64 ,error ){switch whence {case _a .SeekStart :_dce ._bgb =uint64 (offset );case _a .SeekCurrent :_dce ._bgb +=uint64 (offset );case _a .SeekEnd :_dce ._bgb =_dce ._add +uint64 (offset );default:return 0,_d .New ("\u0072\u0065\u0061d\u0065\u0072\u002e\u0053\u0075\u0062\u0073\u0074\u0072\u0065\u0061\u006d\u0052\u0065\u0061\u0064\u0065\u0072\u002e\u0053\u0065\u0065\u006b\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0077\u0068\u0065\u006e\u0063\u0065");};_dce ._gge =0;return int64 (_dce ._bgb ),nil ;};const (_cc =64;_db =int (^uint (0)>>1););func (_ad *BufferedWriter )WriteBit (bit int )error {if bit !=1&&bit !=0{return _ag .Errorf ("\u0042\u0075\u0066fe\u0072\u0065\u0064\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065\u0042\u0069\u0074","\u0062\u0069\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u006du\u0073\u0074\u0020\u0062e\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u007d\u0020\u0062\u0075\u0074\u0020\u0069\u0073\u003a\u0020\u0025\u0064",bit );};if len (_ad ._e )-1< _ad ._cd {_ad .expandIfNeeded (1);};_g :=_ad ._eb ;if _ad ._dd {_g =7-_ad ._eb ;};_ad ._e [_ad ._cd ]|=byte (uint16 (bit <<_g )&0xff);_ad ._eb ++;if _ad ._eb ==8{_ad ._cd ++;_ad ._eb =0;};return nil ;};func (_dff *SubstreamReader )Read (b []byte )(_abea int ,_ecd error ){if _dff ._bgb >=_dff ._add {_b .Log .Trace ("\u0053\u0074\u0072e\u0061\u006d\u0050\u006fs\u003a\u0020\u0027\u0025\u0064\u0027\u0020>\u003d\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027",_dff ._bgb ,_dff ._add );return 0,_a .EOF ;};for ;_abea < len (b );_abea ++{if b [_abea ],_ecd =_dff .readUnalignedByte ();_ecd !=nil {if _ecd ==_a .EOF {return _abea ,nil ;};return 0,_ecd ;};};return _abea ,nil ;};func (_gdc *SubstreamReader )Align ()(_feg byte ){_feg =_gdc ._gge ;_gdc ._gge =0;return _feg };func (_ed *BufferedWriter )SkipBits (skip int )error {if skip ==0{return nil ;};_cb :=int (_ed ._eb )+skip ;if _cb >=0&&_cb < 8{_ed ._eb =uint8 (_cb );return nil ;};_cb =int (_ed ._eb )+_ed ._cd *8+skip ;if _cb < 0{return _ag .Errorf ("\u0057r\u0069t\u0065\u0072\u002e\u0053\u006b\u0069\u0070\u0042\u0069\u0074\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ea :=_cb /8;_eag :=_cb %8;_ed ._eb =uint8 (_eag );if _bfc :=_ea -_ed ._cd ;_bfc > 0&&len (_ed ._e )-1< _ea {if _ed ._eb !=0{_bfc ++;};_ed .expandIfNeeded (_bfc );};_ed ._cd =_ea ;return nil ;};func (_gcf *Reader )ReadBool ()(bool ,error ){return _gcf .readBool ()};var _ BinaryWriter =&Writer {};func (_de *BufferedWriter )expandIfNeeded (_be int ){if !_de .tryGrowByReslice (_be ){_de .grow (_be );};};func (_ebc *Writer )WriteBits (bits uint64 ,number int )(_aee int ,_fbf error ){const _acag ="\u0057\u0072\u0069\u0074\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065r\u0042\u0069\u0074\u0073";if number < 0||number > 64{return 0,_ag .Errorf (_acag ,"\u0062i\u0074\u0073 \u006e\u0075\u006db\u0065\u0072\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020r\u0061\u006e\u0067\u0065\u0020\u003c\u0030\u002c\u0036\u0034\u003e,\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",number );};if number ==0{return 0,nil ;};_geb :=number /8;if _geb > 0{_afd :=number -_geb *8;for _fcdb :=_geb -1;_fcdb >=0;_fcdb --{_egdc :=byte ((bits >>uint (_fcdb *8+_afd ))&0xff);if _fbf =_ebc .WriteByte (_egdc );_fbf !=nil {return _aee ,_ag .Wrapf (_fbf ,_acag ,"\u0062\u0079\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027",_geb -_fcdb +1);};};number -=_geb *8;if number ==0{return _geb ,nil ;};};var _gfa int ;for _gca :=0;_gca < number ;_gca ++{if _ebc ._ebeb {_gfa =int ((bits >>uint (number -1-_gca ))&0x1);}else {_gfa =int (bits &0x1);bits >>=1;};if _fbf =_ebc .WriteBit (_gfa );_fbf !=nil {return _aee ,_ag .Wrapf (_fbf ,_acag ,"\u0062i\u0074\u003a\u0020\u0025\u0064",_gca );};};return _geb ,nil ;};func (_bb *SubstreamReader )Offset ()uint64 {return _bb ._cae };func (_ebf *SubstreamReader )Reset (){_ebf ._bgb =_ebf ._edee ;_ebf ._gge =_ebf ._adb };func (_dde *Writer )Data ()[]byte {return _dde ._ccce };func (_beg *Reader )ConsumeRemainingBits (){if _beg ._bg !=0{_ ,_dbc :=_beg .ReadBits (_beg ._bg );if _dbc !=nil {_b .Log .Debug ("\u0043\u006f\u006e\u0073\u0075\u006d\u0065\u0052\u0065\u006da\u0069\u006e\u0069\u0067\u0042\u0069\u0074s\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dbc );};};};func (_ada *Reader )Read (p []byte )(_fca int ,_cac error ){if _ada ._bg ==0{return _ada .read (p );};for ;_fca < len (p );_fca ++{if p [_fca ],_cac =_ada .readUnalignedByte ();_cac !=nil {return 0,_cac ;};};return _fca ,nil ;};func (_eac *BufferedWriter )Write (d []byte )(int ,error ){_eac .expandIfNeeded (len (d ));if _eac ._eb ==0{return _eac .writeFullBytes (d ),nil ;};return _eac .writeShiftedBytes (d ),nil ;};func (_egg *SubstreamReader )Length ()uint64 {return _egg ._add };func (_fdf *SubstreamReader )readBufferByte ()(byte ,error ){if _fdf ._bgb >=_fdf ._add {return 0,_a .EOF ;};if _fdf ._bgb >=_fdf ._ffb ||_fdf ._bgb < _fdf ._ef {if _agg :=_fdf .fillBuffer ();_agg !=nil {return 0,_agg ;};};_dcb :=_fdf ._gff [_fdf ._bgb -_fdf ._ef ];_fdf ._bgb ++;return _dcb ,nil ;};func (_ggg *Reader )readUnalignedByte ()(_fdg byte ,_eeg error ){_cgd :=_ggg ._bg ;_fdg =_ggg ._abe <<(8-_cgd );_ggg ._abe ,_eeg =_ggg .readBufferByte ();if _eeg !=nil {return 0,_eeg ;};_fdg |=_ggg ._abe >>_cgd ;_ggg ._abe &=1<<_cgd -1;return _fdg ,nil ;};func BufferedMSB ()*BufferedWriter {return &BufferedWriter {_dd :true }};func (_fda *SubstreamReader )readBool ()(_ebd bool ,_eed error ){if _fda ._gge ==0{_fda ._fga ,_eed =_fda .readBufferByte ();if _eed !=nil {return false ,_eed ;};_ebd =(_fda ._fga &0x80)!=0;_fda ._fga ,_fda ._gge =_fda ._fga &0x7f,7;return _ebd ,nil ;};_fda ._gge --;_ebd =(_fda ._fga &(1<<_fda ._gge ))!=0;_fda ._fga &=1<<_fda ._gge -1;return _ebd ,nil ;};func (_abg *SubstreamReader )ReadBits (n byte )(_bgd uint64 ,_dc error ){if n < _abg ._gge {_gcd :=_abg ._gge -n ;_bgd =uint64 (_abg ._fga >>_gcd );_abg ._fga &=1<<_gcd -1;_abg ._gge =_gcd ;return _bgd ,nil ;};if n > _abg ._gge {if _abg ._gge > 0{_bgd =uint64 (_abg ._fga );n -=_abg ._gge ;};var _dbf byte ;for n >=8{_dbf ,_dc =_abg .readBufferByte ();if _dc !=nil {return 0,_dc ;};_bgd =_bgd <<8+uint64 (_dbf );n -=8;};if n > 0{if _abg ._fga ,_dc =_abg .readBufferByte ();_dc !=nil {return 0,_dc ;};_aeg :=8-n ;_bgd =_bgd <<n +uint64 (_abg ._fga >>_aeg );_abg ._fga &=1<<_aeg -1;_abg ._gge =_aeg ;}else {_abg ._gge =0;};return _bgd ,nil ;};_abg ._gge =0;return uint64 (_abg ._fga ),nil ;};func (_bce *Reader )Reset (){_bce ._cea =_bce ._dgc ;_bce ._bg =_bce ._cg };type BitWriter interface{WriteBit (_dgbd int )error ;WriteBits (_ca uint64 ,_ff int )(_aed int ,_aaf error );FinishByte ();SkipBits (_aab int )error ;};func NewWriterMSB (data []byte )*Writer {return &Writer {_ccce :data ,_ebeb :true }};func (_bf *BufferedWriter )FinishByte (){if _bf ._eb ==0{return ;};_bf ._eb =0;_bf ._cd ++;};func (_ega *Writer )writeByte (_bbf byte )error {if _ega ._egd > len (_ega ._ccce )-1{return _a .EOF ;};if _ega ._egd ==len (_ega ._ccce )-1&&_ega ._dcbf !=0{return _a .EOF ;};if _ega ._dcbf ==0{_ega ._ccce [_ega ._egd ]=_bbf ;_ega ._egd ++;return nil ;};if _ega ._ebeb {_ega ._ccce [_ega ._egd ]|=_bbf >>_ega ._dcbf ;_ega ._egd ++;_ega ._ccce [_ega ._egd ]=byte (uint16 (_bbf )<<(8-_ega ._dcbf )&0xff);}else {_ega ._ccce [_ega ._egd ]|=byte (uint16 (_bbf )<<_ega ._dcbf &0xff);_ega ._egd ++;_ega ._ccce [_ega ._egd ]=_bbf >>(8-_ega ._dcbf );};return nil ;};func _eba (_af ,_dgbdg uint64 )uint64 {if _af < _dgbdg {return _af ;};return _dgbdg ;};func (_gdf *BufferedWriter )writeShiftedBytes (_da []byte )int {for _ ,_ab :=range _da {_gdf .writeByte (_ab );};return len (_da );};func (_ccgg *Writer )ResetBit (){_ccgg ._dcbf =0};