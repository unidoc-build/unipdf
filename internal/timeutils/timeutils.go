//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_d "errors";_gg "fmt";_a "regexp";_g "strconv";_f "time";);func FormatPdfTime (in _f .Time )string {_ed :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_de ,_ :=_g .ParseInt (_ed [1:3],10,32);_ad ,_ :=_g .ParseInt (_ed [4:6],10,32);
_degc :=int64 (in .Year ());_dg :=int64 (in .Month ());_b :=int64 (in .Day ());_dc :=int64 (in .Hour ());_bd :=int64 (in .Minute ());_ba :=int64 (in .Second ());_be :=_ed [0];return _gg .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_degc ,_dg ,_b ,_dc ,_bd ,_ba ,_be ,_de ,_ad );
};var _ade =_a .MustCompile ("\u005c\u0073\u002a\u0044\u005c\u0073\u002a:\u005c\u0073\u002a\u0028\u005c\u0064\u007b\u0034\u007d\u0029\u0028\u005c\u0064\u007b2\u007d)\u0028\u005c\u0064\u007b\u0032\u007d)\u0028\u005c\u0064\u007b\u0032\u007d\u0029(\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005b\u002b\u002d\u005a\u005d\u0029\u003f\u0028\u005cd\u007b\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032\u007d)\u003f");
func ParsePdfTime (pdfTime string )(_f .Time ,error ){_bdb :=_ade .FindAllStringSubmatch (pdfTime ,1);if len (_bdb )< 1{return _f .Time {},_gg .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_bdb [0])!=10{return _f .Time {},_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_eb ,_ :=_g .ParseInt (_bdb [0][1],10,32);_db ,_ :=_g .ParseInt (_bdb [0][2],10,32);_fg ,_ :=_g .ParseInt (_bdb [0][3],10,32);_c ,_ :=_g .ParseInt (_bdb [0][4],10,32);_dbf ,_ :=_g .ParseInt (_bdb [0][5],10,32);_cf ,_ :=_g .ParseInt (_bdb [0][6],10,32);
var (_cfc byte ;_dca int64 ;_eg int64 ;);if len (_bdb [0][7])> 0{_cfc =_bdb [0][7][0];}else {_cfc ='+';};if len (_bdb [0][8])> 0{_dca ,_ =_g .ParseInt (_bdb [0][8],10,32);}else {_dca =0;};if len (_bdb [0][9])> 0{_eg ,_ =_g .ParseInt (_bdb [0][9],10,32);
}else {_eg =0;};_baa :=int (_dca *60*60+_eg *60);switch _cfc {case '-':_baa =-_baa ;case 'Z':_baa =0;};_bg :=_gg .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_cfc ,_dca ,_eg );_bc :=_f .FixedZone (_bg ,_baa );
return _f .Date (int (_eb ),_f .Month (_db ),int (_fg ),int (_c ),int (_dbf ),int (_cf ),0,_bc ),nil ;};