//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package timeutils ;import (_g "errors";_d "fmt";_f "regexp";_bd "strconv";_c "time";);var _cdd =_f .MustCompile ("\u005c\u0073\u002a\u0044\u005c\u0073\u002a:\u005c\u0073\u002a\u0028\u005c\u0064\u007b\u0034\u007d\u0029\u0028\u005c\u0064\u007b2\u007d)\u0028\u005c\u0064\u007b\u0032\u007d)\u0028\u005c\u0064\u007b\u0032\u007d\u0029(\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005c\u0064\u007b\u0032\u007d\u0029\u0028\u005b\u002b\u002d\u005a\u005d\u0029\u003f\u0028\u005cd\u007b\u0032\u007d\u0029\u003f\u0027\u003f\u0028\u005c\u0064\u007b\u0032\u007d)\u003f");
func ParsePdfTime (pdfTime string )(_c .Time ,error ){_fa :=_cdd .FindAllStringSubmatch (pdfTime ,1);if len (_fa )< 1{return _c .Time {},_d .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0065\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0028\u0025\u0073\u0029",pdfTime );
};if len (_fa [0])!=10{return _c .Time {},_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0067\u0065\u0078p\u0020\u0067\u0072\u006f\u0075\u0070 \u006d\u0061\u0074\u0063\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020!\u003d\u0020\u0031\u0030");
};_de ,_ :=_bd .ParseInt (_fa [0][1],10,32);_bf ,_ :=_bd .ParseInt (_fa [0][2],10,32);_da ,_ :=_bd .ParseInt (_fa [0][3],10,32);_fba ,_ :=_bd .ParseInt (_fa [0][4],10,32);_ga ,_ :=_bd .ParseInt (_fa [0][5],10,32);_db ,_ :=_bd .ParseInt (_fa [0][6],10,32);
var (_fc byte ;_dac int64 ;_bga int64 ;);if len (_fa [0][7])> 0{_fc =_fa [0][7][0];}else {_fc ='+';};if len (_fa [0][8])> 0{_dac ,_ =_bd .ParseInt (_fa [0][8],10,32);}else {_dac =0;};if len (_fa [0][9])> 0{_bga ,_ =_bd .ParseInt (_fa [0][9],10,32);}else {_bga =0;
};_ea :=int (_dac *60*60+_bga *60);switch _fc {case '-':_ea =-_ea ;case 'Z':_ea =0;};_fe :=_d .Sprintf ("\u0055\u0054\u0043\u0025\u0063\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064",_fc ,_dac ,_bga );_bbd :=_c .FixedZone (_fe ,_ea );return _c .Date (int (_de ),_c .Month (_bf ),int (_da ),int (_fba ),int (_ga ),int (_db ),0,_bbd ),nil ;
};func FormatPdfTime (in _c .Time )string {_bg :=in .Format ("\u002d\u0030\u0037\u003a\u0030\u0030");_e ,_ :=_bd .ParseInt (_bg [1:3],10,32);_a ,_ :=_bd .ParseInt (_bg [4:6],10,32);_dg :=int64 (in .Year ());_gg :=int64 (in .Month ());_aa :=int64 (in .Day ());
_fb :=int64 (in .Hour ());_bb :=int64 (in .Minute ());_ae :=int64 (in .Second ());_bdg :=_bg [0];return _d .Sprintf ("\u0044\u003a\u0025\u002e\u0034\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e\u0032\u0064\u0025\u002e2\u0064\u0025\u0063\u0025\u002e2\u0064\u0027%\u002e\u0032\u0064\u0027",_dg ,_gg ,_aa ,_fb ,_bb ,_ae ,_bdg ,_e ,_a );
};