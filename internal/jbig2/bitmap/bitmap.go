//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ag "encoding/binary";_f "github.com/stretchr/testify/require";_afe "github.com/unidoc/unipdf/v3/common";_afa "github.com/unidoc/unipdf/v3/internal/bitwise";_be "github.com/unidoc/unipdf/v3/internal/imageutil";_b "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";_fa "math";_af "sort";_gf "strings";_ac "testing";);func TstPSymbol (t *_ac .T )*Bitmap {t .Helper ();_baddg :=New (5,8);_f .NoError (t ,_baddg .SetPixel (0,0,1));_f .NoError (t ,_baddg .SetPixel (1,0,1));_f .NoError (t ,_baddg .SetPixel (2,0,1));_f .NoError (t ,_baddg .SetPixel (3,0,1));_f .NoError (t ,_baddg .SetPixel (4,1,1));_f .NoError (t ,_baddg .SetPixel (0,1,1));_f .NoError (t ,_baddg .SetPixel (4,2,1));_f .NoError (t ,_baddg .SetPixel (0,2,1));_f .NoError (t ,_baddg .SetPixel (4,3,1));_f .NoError (t ,_baddg .SetPixel (0,3,1));_f .NoError (t ,_baddg .SetPixel (0,4,1));_f .NoError (t ,_baddg .SetPixel (1,4,1));_f .NoError (t ,_baddg .SetPixel (2,4,1));_f .NoError (t ,_baddg .SetPixel (3,4,1));_f .NoError (t ,_baddg .SetPixel (0,5,1));_f .NoError (t ,_baddg .SetPixel (0,6,1));_f .NoError (t ,_baddg .SetPixel (0,7,1));return _baddg ;};func (_cfdc *Bitmap )clipRectangle (_afafc ,_faad *_c .Rectangle )(_edg *Bitmap ,_fgga error ){const _bfdc ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _afafc ==nil {return nil ,_g .Error (_bfdc ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_bbcg ,_aaec :=_cfdc .Width ,_cfdc .Height ;_cega ,_fgga :=ClipBoxToRectangle (_afafc ,_bbcg ,_aaec );if _fgga !=nil {_afe .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_fgga );return nil ,nil ;};_bfg ,_gaeb :=_cega .Min .X ,_cega .Min .Y ;_fbge ,_egf :=_cega .Max .X -_cega .Min .X ,_cega .Max .Y -_cega .Min .Y ;_edg =New (_fbge ,_egf );_edg .Text =_cfdc .Text ;if _fgga =_edg .RasterOperation (0,0,_fbge ,_egf ,PixSrc ,_cfdc ,_bfg ,_gaeb );_fgga !=nil {return nil ,_g .Wrap (_fgga ,_bfdc ,"");};if _faad !=nil {*_faad =*_cega ;};return _edg ,nil ;};func _adc (_cca *Bitmap ,_dgg int )(*Bitmap ,error ){const _cd ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _cca ==nil {return nil ,_g .Error (_cd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dgg ==1{return _fcad (nil ,_cca );};if _dgg !=2&&_dgg !=4&&_dgg !=8{return nil ,_g .Error (_cd ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_ccc :=_dgg *_cca .Width ;_bb :=_dgg *_cca .Height ;_eba :=New (_ccc ,_bb );var _cfg error ;switch _dgg {case 2:_cfg =_fb (_eba ,_cca );case 4:_cfg =_ea (_eba ,_cca );case 8:_cfg =_fe (_eba ,_cca );};if _cfg !=nil {return nil ,_g .Wrap (_cfg ,_cd ,"");};return _eba ,nil ;};func (_fbaa *Bitmap )countPixels ()int {var (_fgde int ;_age uint8 ;_cae byte ;_eeeb int ;);_cafc :=_fbaa .RowStride ;_gbc :=uint (_fbaa .Width &0x07);if _gbc !=0{_age =uint8 ((0xff<<(8-_gbc ))&0xff);_cafc --;};for _gfef :=0;_gfef < _fbaa .Height ;_gfef ++{for _eeeb =0;_eeeb < _cafc ;_eeeb ++{_cae =_fbaa .Data [_gfef *_fbaa .RowStride +_eeeb ];_fgde +=int (_bfd [_cae ]);};if _gbc !=0{_fgde +=int (_bfd [_fbaa .Data [_gfef *_fbaa .RowStride +_eeeb ]&_age ]);};};return _fgde ;};func _bbbd (_fbfcf ,_bebg int )int {if _fbfcf < _bebg {return _fbfcf ;};return _bebg ;};type RasterOperator int ;func (_ebf *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_gfb bool ,_cbcg error ){const _ebdg ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_ggeb ();};_egcb :=_ebf .Width >>3;_gae :=_ebf .Width &7;_ggc :=byte (0xff<<uint (8-_gae ));var (_ebac ,_cba ,_faag ,_ebde int ;_dad byte ;);for _ebac =0;_ebac < _ebf .Height ;_ebac ++{_faag =_ebf .RowStride *_ebac ;for _cba =0;_cba < _egcb ;_cba ++{_dad ,_cbcg =_ebf .GetByte (_faag +_cba );if _cbcg !=nil {return false ,_g .Wrap (_cbcg ,_ebdg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_ebde +=tab8 [_dad ];};if _gae !=0{_dad ,_cbcg =_ebf .GetByte (_faag +_cba );if _cbcg !=nil {return false ,_g .Wrap (_cbcg ,_ebdg ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_dad &=_ggc ;_ebde +=tab8 [_dad ];};if _ebde > thresh {return true ,nil ;};};return _gfb ,nil ;};func _fafe (_cfcb *Bitmap ,_bede ,_ccgc ,_cbdd ,_efcb int ,_efac RasterOperator ,_ccdgcf *Bitmap ,_gcg ,_bfge int )error {var (_dgfad bool ;_cedf bool ;_bbcfb int ;_afbda int ;_eddb int ;_aeag bool ;_gddb byte ;_dfac int ;_gacb int ;_gdgae int ;_dfda ,_cga int ;);_aceb :=8-(_bede &7);_gageg :=_bbeg [_aceb ];_cgdd :=_cfcb .RowStride *_ccgc +(_bede >>3);_dbedb :=_ccdgcf .RowStride *_bfge +(_gcg >>3);if _cbdd < _aceb {_dgfad =true ;_gageg &=_gfcf [8-_aceb +_cbdd ];};if !_dgfad {_bbcfb =(_cbdd -_aceb )>>3;if _bbcfb > 0{_cedf =true ;_afbda =_cgdd +1;_eddb =_dbedb +1;};};_dfac =(_bede +_cbdd )&7;if !(_dgfad ||_dfac ==0){_aeag =true ;_gddb =_gfcf [_dfac ];_gacb =_cgdd +1+_bbcfb ;_gdgae =_dbedb +1+_bbcfb ;};switch _efac {case PixSrc :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],_ccdgcf .Data [_dbedb ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=_ccdgcf .Data [_eddb +_cga ];};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],_ccdgcf .Data [_gdgae ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixNotSrc :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],^_ccdgcf .Data [_dbedb ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=^_ccdgcf .Data [_eddb +_cga ];};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],^_ccdgcf .Data [_gdgae ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixSrcOrDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],_ccdgcf .Data [_dbedb ]|_cfcb .Data [_cgdd ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]|=_ccdgcf .Data [_eddb +_cga ];};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],_ccdgcf .Data [_gdgae ]|_cfcb .Data [_gacb ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixSrcAndDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],_ccdgcf .Data [_dbedb ]&_cfcb .Data [_cgdd ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]&=_ccdgcf .Data [_eddb +_cga ];};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],_ccdgcf .Data [_gdgae ]&_cfcb .Data [_gacb ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixSrcXorDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],_ccdgcf .Data [_dbedb ]^_cfcb .Data [_cgdd ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]^=_ccdgcf .Data [_eddb +_cga ];};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],_ccdgcf .Data [_gdgae ]^_cfcb .Data [_gacb ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixNotSrcOrDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],^(_ccdgcf .Data [_dbedb ])|_cfcb .Data [_cgdd ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]|=^(_ccdgcf .Data [_eddb +_cga ]);};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],^(_ccdgcf .Data [_gdgae ])|_cfcb .Data [_gacb ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixNotSrcAndDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],^(_ccdgcf .Data [_dbedb ])&_cfcb .Data [_cgdd ],_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]&=^_ccdgcf .Data [_eddb +_cga ];};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],^(_ccdgcf .Data [_gdgae ])&_cfcb .Data [_gacb ],_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixSrcOrNotDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],_ccdgcf .Data [_dbedb ]|^(_cfcb .Data [_cgdd ]),_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=_ccdgcf .Data [_eddb +_cga ]|^(_cfcb .Data [_afbda +_cga ]);};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],_ccdgcf .Data [_gdgae ]|^(_cfcb .Data [_gacb ]),_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixSrcAndNotDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],_ccdgcf .Data [_dbedb ]&^(_cfcb .Data [_cgdd ]),_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=_ccdgcf .Data [_eddb +_cga ]&^(_cfcb .Data [_afbda +_cga ]);};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],_ccdgcf .Data [_gdgae ]&^(_cfcb .Data [_gacb ]),_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixNotPixSrcOrDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],^(_ccdgcf .Data [_dbedb ]|_cfcb .Data [_cgdd ]),_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=^(_ccdgcf .Data [_eddb +_cga ]|_cfcb .Data [_afbda +_cga ]);};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],^(_ccdgcf .Data [_gdgae ]|_cfcb .Data [_gacb ]),_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixNotPixSrcAndDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],^(_ccdgcf .Data [_dbedb ]&_cfcb .Data [_cgdd ]),_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=^(_ccdgcf .Data [_eddb +_cga ]&_cfcb .Data [_afbda +_cga ]);};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],^(_ccdgcf .Data [_gdgae ]&_cfcb .Data [_gacb ]),_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};case PixNotPixSrcXorDst :for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_cgdd ]=_gagf (_cfcb .Data [_cgdd ],^(_ccdgcf .Data [_dbedb ]^_cfcb .Data [_cgdd ]),_gageg );_cgdd +=_cfcb .RowStride ;_dbedb +=_ccdgcf .RowStride ;};if _cedf {for _dfda =0;_dfda < _efcb ;_dfda ++{for _cga =0;_cga < _bbcfb ;_cga ++{_cfcb .Data [_afbda +_cga ]=^(_ccdgcf .Data [_eddb +_cga ]^_cfcb .Data [_afbda +_cga ]);};_afbda +=_cfcb .RowStride ;_eddb +=_ccdgcf .RowStride ;};};if _aeag {for _dfda =0;_dfda < _efcb ;_dfda ++{_cfcb .Data [_gacb ]=_gagf (_cfcb .Data [_gacb ],^(_ccdgcf .Data [_gdgae ]^_cfcb .Data [_gacb ]),_gddb );_gacb +=_cfcb .RowStride ;_gdgae +=_ccdgcf .RowStride ;};};default:_afe .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_efac );return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_eede *Bitmap )Equivalent (s *Bitmap )bool {return _eede .equivalent (s )};func _bfeg (_fdaa *Bitmap ,_bcac *Bitmap ,_dfea *Selection ,_ggde **Bitmap )(*Bitmap ,error ){const _fggb ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _bcac ==nil {return nil ,_g .Error (_fggb ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _dfea ==nil {return nil ,_g .Error (_fggb ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_fbef ,_ageb :=_dfea .Height ,_dfea .Width ;if _fbef ==0||_ageb ==0{return nil ,_g .Error (_fggb ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fdaa ==nil {_fdaa =_bcac .createTemplate ();*_ggde =_bcac ;return _fdaa ,nil ;};_fdaa .Width =_bcac .Width ;_fdaa .Height =_bcac .Height ;_fdaa .RowStride =_bcac .RowStride ;_fdaa .Color =_bcac .Color ;_fdaa .Data =make ([]byte ,_bcac .RowStride *_bcac .Height );if _fdaa ==_bcac {*_ggde =_bcac .Copy ();}else {*_ggde =_bcac ;};return _fdaa ,nil ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _ddce (_egfa int )int {if _egfa < 0{return -_egfa ;};return _egfa ;};type SelectionValue int ;func (_faab *Bitmap )SetByte (index int ,v byte )error {if index > len (_faab .Data )-1||index < 0{return _g .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_faab .Data [index ]=v ;return nil ;};func (_baebe *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _cbdc ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _baebe ==nil {return nil ,_g .Error (_cbdc ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_g .Error (_cbdc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_bbfdb :=len (_baebe .Values );_dafbf :=&Bitmaps {Values :make ([]*Bitmap ,_bbfdb ),Boxes :make ([]*_c .Rectangle ,_bbfdb )};var (_fggg ,_bbbb *Bitmap ;_aedb *_c .Rectangle ;_ffgd error ;);for _edcf :=0;_edcf < _bbfdb ;_edcf ++{if _fggg ,_ffgd =_baebe .GetBitmap (_edcf );_ffgd !=nil {return nil ,_g .Wrap (_ffgd ,_cbdc ,"");};if _aedb ,_ffgd =_baebe .GetBox (_edcf );_ffgd !=nil {return nil ,_g .Wrap (_ffgd ,_cbdc ,"");};if _bbbb ,_ffgd =s .clipRectangle (_aedb ,nil );_ffgd !=nil {return nil ,_g .Wrap (_ffgd ,_cbdc ,"");};if _bbbb ,_ffgd =_bbbb .And (_fggg );_ffgd !=nil {return nil ,_g .Wrap (_ffgd ,_cbdc ,"");};_dafbf .Values [_edcf ]=_bbbb ;_dafbf .Boxes [_edcf ]=_aedb ;};return _dafbf ,nil ;};func (_fgcg *Bitmap )thresholdPixelSum (_ecc int )bool {var (_bca int ;_fcag uint8 ;_ebbg byte ;_ccd int ;);_eddg :=_fgcg .RowStride ;_gfc :=uint (_fgcg .Width &0x07);if _gfc !=0{_fcag =uint8 ((0xff<<(8-_gfc ))&0xff);_eddg --;};for _gff :=0;_gff < _fgcg .Height ;_gff ++{for _ccd =0;_ccd < _eddg ;_ccd ++{_ebbg =_fgcg .Data [_gff *_fgcg .RowStride +_ccd ];_bca +=int (_bfd [_ebbg ]);};if _gfc !=0{_ebbg =_fgcg .Data [_gff *_fgcg .RowStride +_ccd ]&_fcag ;_bca +=int (_bfd [_ebbg ]);};if _bca > _ecc {return true ;};};return false ;};func init (){for _cef :=0;_cef < 256;_cef ++{_bfd [_cef ]=uint8 (_cef &0x1)+(uint8 (_cef >>1)&0x1)+(uint8 (_cef >>2)&0x1)+(uint8 (_cef >>3)&0x1)+(uint8 (_cef >>4)&0x1)+(uint8 (_cef >>5)&0x1)+(uint8 (_cef >>6)&0x1)+(uint8 (_cef >>7)&0x1);};};func _dcge (_becc *Bitmap ,_ebfb *Bitmap ,_agga *Selection )(*Bitmap ,error ){var (_egdf *Bitmap ;_cfgad error ;);_becc ,_cfgad =_bfeg (_becc ,_ebfb ,_agga ,&_egdf );if _cfgad !=nil {return nil ,_cfgad ;};if _cfgad =_becc .clearAll ();_cfgad !=nil {return nil ,_cfgad ;};var _acbd SelectionValue ;for _dgfa :=0;_dgfa < _agga .Height ;_dgfa ++{for _bdbd :=0;_bdbd < _agga .Width ;_bdbd ++{_acbd =_agga .Data [_dgfa ][_bdbd ];if _acbd ==SelHit {if _cfgad =_becc .RasterOperation (_bdbd -_agga .Cx ,_dgfa -_agga .Cy ,_ebfb .Width ,_ebfb .Height ,PixSrcOrDst ,_egdf ,0,0);_cfgad !=nil {return nil ,_cfgad ;};};};};return _becc ,nil ;};func _egc (_fed *Bitmap ,_fbd ,_fdc int )(*Bitmap ,error ){const _ebc ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _fed ==nil {return nil ,_g .Error (_ebc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fbd <=0||_fdc <=0{return nil ,_g .Error (_ebc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _fbd ==_fdc {if _fbd ==1{_ebg ,_aed :=_fcad (nil ,_fed );if _aed !=nil {return nil ,_g .Wrap (_aed ,_ebc ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ebg ,nil ;};if _fbd ==2||_fbd ==4||_fbd ==8{_eac ,_egg :=_adc (_fed ,_fbd );if _egg !=nil {return nil ,_g .Wrap (_egg ,_ebc ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _eac ,nil ;};};_ba :=_fbd *_fed .Width ;_dgd :=_fdc *_fed .Height ;_abe :=New (_ba ,_dgd );_bc :=_abe .RowStride ;var (_ead ,_bgd ,_gc ,_cg ,_ef int ;_eff byte ;_bdb error ;);for _bgd =0;_bgd < _fed .Height ;_bgd ++{_ead =_fdc *_bgd *_bc ;for _gc =0;_gc < _fed .Width ;_gc ++{if _bdg :=_fed .GetPixel (_gc ,_bgd );_bdg {_ef =_fbd *_gc ;for _cg =0;_cg < _fbd ;_cg ++{_abe .setBit (_ead *8+_ef +_cg );};};};for _cg =1;_cg < _fdc ;_cg ++{_gdf :=_ead +_cg *_bc ;for _befa :=0;_befa < _bc ;_befa ++{if _eff ,_bdb =_abe .GetByte (_ead +_befa );_bdb !=nil {return nil ,_g .Wrapf (_bdb ,_ebc ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_cg );};if _bdb =_abe .SetByte (_gdf +_befa ,_eff );_bdb !=nil {return nil ,_g .Wrap (_bdb ,_ebc ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _abe ,nil ;};func _ecae (_fdfb *_b .Stack ,_adag ,_eefe ,_dfcc ,_gedfe ,_fdea int ,_gccg *_c .Rectangle )(_bfdf error ){const _efgbc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _fdfb ==nil {return _g .Error (_efgbc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _gccg ==nil {return _g .Error (_efgbc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_gccg .Min .X =_b .Min (_gccg .Min .X ,_adag );_gccg .Max .X =_b .Max (_gccg .Max .X ,_eefe );_gccg .Min .Y =_b .Min (_gccg .Min .Y ,_dfcc );_gccg .Max .Y =_b .Max (_gccg .Max .Y ,_dfcc );if !(_dfcc +_gedfe >=0&&_dfcc +_gedfe <=_fdea ){return nil ;};if _fdfb .Aux ==nil {return _g .Error (_efgbc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _aafc *fillSegment ;_ggdec ,_dddbb :=_fdfb .Aux .Pop ();if _dddbb {if _aafc ,_dddbb =_ggdec .(*fillSegment );!_dddbb {return _g .Error (_efgbc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_aafc =&fillSegment {};};_aafc ._gcaa =_adag ;_aafc ._acgd =_eefe ;_aafc ._edgg =_dfcc ;_aafc ._bcfec =_gedfe ;_fdfb .Push (_aafc );return nil ;};type CombinationOperator int ;func _fgba (_bfdce ,_cgdb *Bitmap ,_cbe ,_dcgc int )(*Bitmap ,error ){const _dcdc ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _cgdb ==nil {_afe .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_g .Error (_dcdc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cbe < 1||_dcgc < 1{return nil ,_g .Error (_dcdc ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _cbe ==1&&_dcgc ==1{_fagc ,_cafcb :=_fcad (_bfdce ,_cgdb );if _cafcb !=nil {return nil ,_g .Wrap (_cafcb ,_dcdc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fagc ,nil ;};if _cbe ==1||_dcgc ==1{_faaa :=SelCreateBrick (_dcgc ,_cbe ,_dcgc /2,_cbe /2,SelHit );_ggec ,_afc :=_dcge (_bfdce ,_cgdb ,_faaa );if _afc !=nil {return nil ,_g .Wrap (_afc ,_dcdc ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ggec ,nil ;};_ccea :=SelCreateBrick (1,_cbe ,0,_cbe /2,SelHit );_eaeg :=SelCreateBrick (_dcgc ,1,_dcgc /2,0,SelHit );_deab ,_dadfc :=_dcge (nil ,_cgdb ,_ccea );if _dadfc !=nil {return nil ,_g .Wrap (_dadfc ,_dcdc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_bfdce ,_dadfc =_dcge (_bfdce ,_deab ,_eaeg );if _dadfc !=nil {return nil ,_g .Wrap (_dadfc ,_dcdc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bfdce ,nil ;};func _gaa (_bf ,_bdbgg *Bitmap ,_gac int ,_bgc []byte ,_gfa int )(_ggd error ){const _dc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_agc ,_eda ,_fea ,_fde ,_aga ,_ada ,_cgc ,_dca int ;_cee ,_dgc uint32 ;_ebgg ,_eaf byte ;_dcf uint16 ;);_aggd :=make ([]byte ,4);_gca :=make ([]byte ,4);for _fea =0;_fea < _bf .Height -1;_fea ,_fde =_fea +2,_fde +1{_agc =_fea *_bf .RowStride ;_eda =_fde *_bdbgg .RowStride ;for _aga ,_ada =0,0;_aga < _gfa ;_aga ,_ada =_aga +4,_ada +1{for _cgc =0;_cgc < 4;_cgc ++{_dca =_agc +_aga +_cgc ;if _dca <=len (_bf .Data )-1&&_dca < _agc +_bf .RowStride {_aggd [_cgc ]=_bf .Data [_dca ];}else {_aggd [_cgc ]=0x00;};_dca =_agc +_bf .RowStride +_aga +_cgc ;if _dca <=len (_bf .Data )-1&&_dca < _agc +(2*_bf .RowStride ){_gca [_cgc ]=_bf .Data [_dca ];}else {_gca [_cgc ]=0x00;};};_cee =_ag .BigEndian .Uint32 (_aggd );_dgc =_ag .BigEndian .Uint32 (_gca );_dgc |=_cee ;_dgc |=_dgc <<1;_dgc &=0xaaaaaaaa;_cee =_dgc |(_dgc <<7);_ebgg =byte (_cee >>24);_eaf =byte ((_cee >>8)&0xff);_dca =_eda +_ada ;if _dca +1==len (_bdbgg .Data )-1||_dca +1>=_eda +_bdbgg .RowStride {_bdbgg .Data [_dca ]=_bgc [_ebgg ];}else {_dcf =(uint16 (_bgc [_ebgg ])<<8)|uint16 (_bgc [_eaf ]);if _ggd =_bdbgg .setTwoBytes (_dca ,_dcf );_ggd !=nil {return _g .Wrapf (_ggd ,_dc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dca );};_ada ++;};};};return nil ;};func (_bdfe *byWidth )Swap (i ,j int ){_bdfe .Values [i ],_bdfe .Values [j ]=_bdfe .Values [j ],_bdfe .Values [i ];if _bdfe .Boxes !=nil {_bdfe .Boxes [i ],_bdfe .Boxes [j ]=_bdfe .Boxes [j ],_bdfe .Boxes [i ];};};func (_bdd *Bitmap )addBorderGeneral (_cfd ,_ddeb ,_ebdd ,_cdf int ,_aeba int )(*Bitmap ,error ){const _bcfa ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _cfd < 0||_ddeb < 0||_ebdd < 0||_cdf < 0{return nil ,_g .Error (_bcfa ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_ffd ,_acb :=_bdd .Width ,_bdd .Height ;_gfe :=_ffd +_cfd +_ddeb ;_bbf :=_acb +_ebdd +_cdf ;_fecd :=New (_gfe ,_bbf );_fecd .Color =_bdd .Color ;_cce :=PixClr ;if _aeba > 0{_cce =PixSet ;};_egcd :=_fecd .RasterOperation (0,0,_cfd ,_bbf ,_cce ,nil ,0,0);if _egcd !=nil {return nil ,_g .Wrap (_egcd ,_bcfa ,"\u006c\u0065\u0066\u0074");};_egcd =_fecd .RasterOperation (_gfe -_ddeb ,0,_ddeb ,_bbf ,_cce ,nil ,0,0);if _egcd !=nil {return nil ,_g .Wrap (_egcd ,_bcfa ,"\u0072\u0069\u0067h\u0074");};_egcd =_fecd .RasterOperation (0,0,_gfe ,_ebdd ,_cce ,nil ,0,0);if _egcd !=nil {return nil ,_g .Wrap (_egcd ,_bcfa ,"\u0074\u006f\u0070");};_egcd =_fecd .RasterOperation (0,_bbf -_cdf ,_gfe ,_cdf ,_cce ,nil ,0,0);if _egcd !=nil {return nil ,_g .Wrap (_egcd ,_bcfa ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_egcd =_fecd .RasterOperation (_cfd ,_ebdd ,_ffd ,_acb ,PixSrc ,_bdd ,0,0);if _egcd !=nil {return nil ,_g .Wrap (_egcd ,_bcfa ,"\u0063\u006f\u0070\u0079");};return _fecd ,nil ;};func (_gef *Bitmap )And (s *Bitmap )(_eada *Bitmap ,_cbb error ){const _geba ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _gef ==nil {return nil ,_g .Error (_geba ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_g .Error (_geba ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_gef .SizesEqual (s ){_afe .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_geba );};if _eada ,_cbb =_fcad (_eada ,_gef );_cbb !=nil {return nil ,_g .Wrap (_cbb ,_geba ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cbb =_eada .RasterOperation (0,0,_eada .Width ,_eada .Height ,PixSrcAndDst ,s ,0,0);_cbb !=nil {return nil ,_g .Wrap (_cbb ,_geba ,"");};return _eada ,nil ;};func _dfab (_ffec ,_bdc *Bitmap ,_cfgg ,_fgfg int )(*Bitmap ,error ){const _ebfgc ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _bdc ==nil {return nil ,_g .Error (_ebfgc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cfgg < 1||_fgfg < 1{return nil ,_g .Error (_ebfgc ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _cfgg ==1&&_fgfg ==1{return _bdc .Copy (),nil ;};if _cfgg ==1||_fgfg ==1{_ffaba :=SelCreateBrick (_fgfg ,_cfgg ,_fgfg /2,_cfgg /2,SelHit );var _ebab error ;_ffec ,_ebab =_fffa (_ffec ,_bdc ,_ffaba );if _ebab !=nil {return nil ,_g .Wrap (_ebab ,_ebfgc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ffec ,nil ;};_adaa :=SelCreateBrick (1,_cfgg ,0,_cfgg /2,SelHit );_ebba :=SelCreateBrick (_fgfg ,1,_fgfg /2,0,SelHit );_bfbd ,_cddb :=_dcge (nil ,_bdc ,_adaa );if _cddb !=nil {return nil ,_g .Wrap (_cddb ,_ebfgc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ffec ,_cddb =_dcge (_ffec ,_bfbd ,_ebba );_cddb !=nil {return nil ,_g .Wrap (_cddb ,_ebfgc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_cddb =_edda (_bfbd ,_ffec ,_adaa );_cddb !=nil {return nil ,_g .Wrap (_cddb ,_ebfgc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_cddb =_edda (_ffec ,_bfbd ,_ebba );_cddb !=nil {return nil ,_g .Wrap (_cddb ,_ebfgc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ffec ,nil ;};func TstWordBitmapWithSpaces (t *_ac .T ,scale ...int )*Bitmap {_bdaab :=1;if len (scale )> 0{_bdaab =scale [0];};_bffc :=3;_gecfc :=9+7+15+2*_bffc +2*_bffc ;_bbgd :=5+_bffc +5+2*_bffc ;_cefae :=New (_gecfc *_bdaab ,_bbgd *_bdaab );_aaea :=&Bitmaps {};var _gddg *int ;_bffc *=_bdaab ;_caabg :=_bffc ;_gddg =&_caabg ;_ccca :=_bffc ;_adde :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,_bffc );_adde =TstISymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,_bffc );_adde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,0);*_gddg =_bffc ;_ccca =5*_bdaab +_bffc ;_adde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,_bffc );_adde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,1*_bdaab );_adde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_aaea ,_adde ,_gddg ,_ccca ,0);TstWriteSymbols (t ,_aaea ,_cefae );return _cefae ;};func _gba (_bcca ,_cfda *Bitmap ,_cfgd ,_aeae ,_efgb uint ,_bbbf ,_ddgd int ,_dada bool ,_fbad ,_gfgag int )error {for _cda :=_bbbf ;_cda < _ddgd ;_cda ++{if _fbad +1< len (_bcca .Data ){_bccb :=_cda +1==_ddgd ;_gedbg ,_bfce :=_bcca .GetByte (_fbad );if _bfce !=nil {return _bfce ;};_fbad ++;_gedbg <<=_cfgd ;_gag ,_bfce :=_bcca .GetByte (_fbad );if _bfce !=nil {return _bfce ;};_gag >>=_aeae ;_bfff :=_gedbg |_gag ;if _bccb &&!_dada {_bfff =_ffe (_efgb ,_bfff );};_bfce =_cfda .SetByte (_gfgag ,_bfff );if _bfce !=nil {return _bfce ;};_gfgag ++;if _bccb &&_dada {_gbcd ,_eeae :=_bcca .GetByte (_fbad );if _eeae !=nil {return _eeae ;};_gbcd <<=_cfgd ;_bfff =_ffe (_efgb ,_gbcd );if _eeae =_cfda .SetByte (_gfgag ,_bfff );_eeae !=nil {return _eeae ;};};continue ;};_ccfa ,_def :=_bcca .GetByte (_fbad );if _def !=nil {_afe .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_fbad ,_def );return _def ;};_ccfa <<=_cfgd ;_fbad ++;_def =_cfda .SetByte (_gfgag ,_ccfa );if _def !=nil {return _def ;};_gfgag ++;};return nil ;};func TstGetScaledSymbol (t *_ac .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_gbge ,_cgae :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_f .NoError (t ,_cgae );return _gbge ;};func (_dfe *Bitmap )equivalent (_edb *Bitmap )bool {if _dfe ==_edb {return true ;};if !_dfe .SizesEqual (_edb ){return false ;};_facg :=_fgad (_dfe ,_edb ,CmbOpXor );_fcaf :=_dfe .countPixels ();_fad :=int (0.25*float32 (_fcaf ));if _facg .thresholdPixelSum (_fad ){return false ;};var (_fafc [9][9]int ;_dfd [18][9]int ;_afgd [9][18]int ;_fbfd int ;_eaed int ;);_dfa :=9;_daba :=_dfe .Height /_dfa ;_eeg :=_dfe .Width /_dfa ;_egde ,_edaf :=_daba /2,_eeg /2;if _daba < _eeg {_egde =_eeg /2;_edaf =_daba /2;};_aac :=float64 (_egde )*float64 (_edaf )*_fa .Pi ;_cfa :=int (float64 (_daba *_eeg /2)*0.9);_aee :=int (float64 (_eeg *_daba /2)*0.9);for _egcdg :=0;_egcdg < _dfa ;_egcdg ++{_gaad :=_eeg *_egcdg +_fbfd ;var _adg int ;if _egcdg ==_dfa -1{_fbfd =0;_adg =_dfe .Width ;}else {_adg =_gaad +_eeg ;if ((_dfe .Width -_fbfd )%_dfa )> 0{_fbfd ++;_adg ++;};};for _cgbb :=0;_cgbb < _dfa ;_cgbb ++{_daee :=_daba *_cgbb +_eaed ;var _bbcf int ;if _cgbb ==_dfa -1{_eaed =0;_bbcf =_dfe .Height ;}else {_bbcf =_daee +_daba ;if (_dfe .Height -_eaed )%_dfa > 0{_eaed ++;_bbcf ++;};};var _efbe ,_bfga ,_cedb ,_dcee int ;_abb :=(_gaad +_adg )/2;_agdb :=(_daee +_bbcf )/2;for _fbaad :=_gaad ;_fbaad < _adg ;_fbaad ++{for _ceed :=_daee ;_ceed < _bbcf ;_ceed ++{if _facg .GetPixel (_fbaad ,_ceed ){if _fbaad < _abb {_efbe ++;}else {_bfga ++;};if _ceed < _agdb {_dcee ++;}else {_cedb ++;};};};};_fafc [_egcdg ][_cgbb ]=_efbe +_bfga ;_dfd [_egcdg *2][_cgbb ]=_efbe ;_dfd [_egcdg *2+1][_cgbb ]=_bfga ;_afgd [_egcdg ][_cgbb *2]=_dcee ;_afgd [_egcdg ][_cgbb *2+1]=_cedb ;};};for _ddef :=0;_ddef < _dfa *2-1;_ddef ++{for _gdeb :=0;_gdeb < (_dfa -1);_gdeb ++{var _dag int ;for _cac :=0;_cac < 2;_cac ++{for _ebb :=0;_ebb < 2;_ebb ++{_dag +=_dfd [_ddef +_cac ][_gdeb +_ebb ];};};if _dag > _aee {return false ;};};};for _bag :=0;_bag < (_dfa -1);_bag ++{for _fbee :=0;_fbee < ((_dfa *2)-1);_fbee ++{var _fcf int ;for _cdfe :=0;_cdfe < 2;_cdfe ++{for _facf :=0;_facf < 2;_facf ++{_fcf +=_afgd [_bag +_cdfe ][_fbee +_facf ];};};if _fcf > _cfa {return false ;};};};for _adfd :=0;_adfd < (_dfa -2);_adfd ++{for _bfc :=0;_bfc < (_dfa -2);_bfc ++{var _dadf ,_bff int ;for _cfab :=0;_cfab < 3;_cfab ++{for _ece :=0;_ece < 3;_ece ++{if _cfab ==_ece {_dadf +=_fafc [_adfd +_cfab ][_bfc +_ece ];};if (2-_cfab )==_ece {_bff +=_fafc [_adfd +_cfab ][_bfc +_ece ];};};};if _dadf > _aee ||_bff > _aee {return false ;};};};for _efff :=0;_efff < (_dfa -1);_efff ++{for _bee :=0;_bee < (_dfa -1);_bee ++{var _egfe int ;for _feb :=0;_feb < 2;_feb ++{for _daga :=0;_daga < 2;_daga ++{_egfe +=_fafc [_efff +_feb ][_bee +_daga ];};};if float64 (_egfe )> _aac {return false ;};};};return true ;};func (_ggae *Bitmaps )selectByIndexes (_edaa []int )(*Bitmaps ,error ){_cafe :=&Bitmaps {};for _ ,_eead :=range _edaa {_begb ,_gbbfb :=_ggae .GetBitmap (_eead );if _gbbfb !=nil {return nil ,_g .Wrap (_gbbfb ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_cafe .AddBitmap (_begb );};return _cafe ,nil ;};func (_eegbf *ClassedPoints )YAtIndex (i int )float32 {return (*_eegbf .Points )[_eegbf .IntSlice [i ]].Y };func (_adafe *Bitmap )centroid (_dccd ,_aadc []int )(Point ,error ){_fabg :=Point {};_adafe .setPadBits (0);if len (_dccd )==0{_dccd =_bbdb ();};if len (_aadc )==0{_aadc =_ggeb ();};var _addce ,_dgcc ,_cgbe ,_dgab ,_bdad ,_cbda int ;var _cbbg byte ;for _bdad =0;_bdad < _adafe .Height ;_bdad ++{_fbbe :=_adafe .RowStride *_bdad ;_dgab =0;for _cbda =0;_cbda < _adafe .RowStride ;_cbda ++{_cbbg =_adafe .Data [_fbbe +_cbda ];if _cbbg !=0{_dgab +=_aadc [_cbbg ];_addce +=_dccd [_cbbg ]+_cbda *8*_aadc [_cbbg ];};};_cgbe +=_dgab ;_dgcc +=_dgab *_bdad ;};if _cgbe !=0{_fabg .X =float32 (_addce )/float32 (_cgbe );_fabg .Y =float32 (_dgcc )/float32 (_cgbe );};return _fabg ,nil ;};func (_deae *Boxes )Get (i int )(*_c .Rectangle ,error ){const _daeef ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _deae ==nil {return nil ,_g .Error (_daeef ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_deae )-1{return nil ,_g .Errorf (_daeef ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_deae )[i ],nil ;};func _ecdd (_deed ,_dbac *Bitmap ,_eaba ,_fce ,_dbf ,_bbbdb ,_efd ,_gfca ,_gaceb ,_bed int ,_cgfed CombinationOperator )error {var _fdb int ;_egb :=func (){_fdb ++;_dbf +=_dbac .RowStride ;_bbbdb +=_deed .RowStride ;_efd +=_deed .RowStride };for _fdb =_eaba ;_fdb < _fce ;_egb (){var _abca uint16 ;_feea :=_dbf ;for _bec :=_bbbdb ;_bec <=_efd ;_bec ++{_agbe ,_eeea :=_dbac .GetByte (_feea );if _eeea !=nil {return _eeea ;};_fgda ,_eeea :=_deed .GetByte (_bec );if _eeea !=nil {return _eeea ;};_abca =(_abca |uint16 (_fgda ))<<uint (_bed );_fgda =byte (_abca >>8);if _bec ==_efd {_fgda =_ffe (uint (_gfca ),_fgda );};if _eeea =_dbac .SetByte (_feea ,_ddea (_agbe ,_fgda ,_cgfed ));_eeea !=nil {return _eeea ;};_feea ++;_abca <<=uint (_gaceb );};};return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _fecf ,_gebf int ;_gdc :=src .RowStride -1;if x < 0{_gebf =-x ;x =0;}else if x +src .Width > dst .Width {_gdc -=src .Width +x -dst .Width ;};if y < 0{_fecf =-y ;y =0;_gebf +=src .RowStride ;_gdc +=src .RowStride ;}else if y +src .Height > dst .Height {_fecf =src .Height +y -dst .Height ;};var (_dddb int ;_eceb error ;);_abba :=x &0x07;_dbcf :=8-_abba ;_gbbf :=src .Width &0x07;_bcgdc :=_dbcf -_gbbf ;_dea :=_dbcf &0x07!=0;_gace :=src .Width <=((_gdc -_gebf )<<3)+_dbcf ;_fdce :=dst .GetByteIndex (x ,y );_bbba :=_fecf +dst .Height ;if src .Height > _bbba {_dddb =_bbba ;}else {_dddb =src .Height ;};switch {case !_dea :_eceb =_fbdf (src ,dst ,_fecf ,_dddb ,_fdce ,_gebf ,_gdc ,op );case _gace :_eceb =_ecdd (src ,dst ,_fecf ,_dddb ,_fdce ,_gebf ,_gdc ,_bcgdc ,_abba ,_dbcf ,op );default:_eceb =_fage (src ,dst ,_fecf ,_dddb ,_fdce ,_gebf ,_gdc ,_bcgdc ,_abba ,_dbcf ,op ,_gbbf );};return _eceb ;};func (_dce *Bitmap )GetUnpaddedData ()([]byte ,error ){_ccac :=uint (_dce .Width &0x07);if _ccac ==0{return _dce .Data ,nil ;};_cgfc :=_dce .Width *_dce .Height ;if _cgfc %8!=0{_cgfc >>=3;_cgfc ++;}else {_cgfc >>=3;};_fgg :=make ([]byte ,_cgfc );_ecd :=_afa .NewWriterMSB (_fgg );const _cbbf ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _ebcg :=0;_ebcg < _dce .Height ;_ebcg ++{for _dcc :=0;_dcc < _dce .RowStride ;_dcc ++{_efgg :=_dce .Data [_ebcg *_dce .RowStride +_dcc ];if _dcc !=_dce .RowStride -1{_accg :=_ecd .WriteByte (_efgg );if _accg !=nil {return nil ,_g .Wrap (_accg ,_cbbf ,"");};continue ;};for _bebe :=uint (0);_bebe < _ccac ;_bebe ++{_fbfc :=_ecd .WriteBit (int (_efgg >>(7-_bebe )&0x01));if _fbfc !=nil {return nil ,_g .Wrap (_fbfc ,_cbbf ,"");};};};};return _fgg ,nil ;};type ClassedPoints struct{*Points ;_b .IntSlice ;_fedd func (_bcad ,_babd int )bool ;};func (_ccg *Bitmap )GetByteIndex (x ,y int )int {return y *_ccg .RowStride +(x >>3)};func (_babe *Points )Add (pt *Points )error {const _cbbc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _babe ==nil {return _g .Error (_cbbc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _g .Error (_cbbc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_babe =append (*_babe ,*pt ...);return nil ;};func (_ace *Bitmap )SetDefaultPixel (){for _eacc :=range _ace .Data {_ace .Data [_eacc ]=byte (0xff);};};func _fdbg (_cgfb *Bitmap ,_bbbg ,_ggccb ,_gdfe ,_gbffe int ,_eacd RasterOperator ,_babg *Bitmap ,_abd ,_edgb int )error {var (_fdaae byte ;_gbgd int ;_bgfeg int ;_dgae ,_fefeb int ;_beee ,_adbd int ;);_abcaf :=_gdfe >>3;_bdeg :=_gdfe &7;if _bdeg > 0{_fdaae =_gfcf [_bdeg ];};_gbgd =_babg .RowStride *_edgb +(_abd >>3);_bgfeg =_cgfb .RowStride *_ggccb +(_bbbg >>3);switch _eacd {case PixSrc :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=_babg .Data [_dgae ];_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],_babg .Data [_dgae ],_fdaae );};};case PixNotSrc :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=^(_babg .Data [_dgae ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],^_babg .Data [_dgae ],_fdaae );};};case PixSrcOrDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]|=_babg .Data [_dgae ];_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],_babg .Data [_dgae ]|_cgfb .Data [_fefeb ],_fdaae );};};case PixSrcAndDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]&=_babg .Data [_dgae ];_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],_babg .Data [_dgae ]&_cgfb .Data [_fefeb ],_fdaae );};};case PixSrcXorDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]^=_babg .Data [_dgae ];_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],_babg .Data [_dgae ]^_cgfb .Data [_fefeb ],_fdaae );};};case PixNotSrcOrDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]|=^(_babg .Data [_dgae ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],^(_babg .Data [_dgae ])|_cgfb .Data [_fefeb ],_fdaae );};};case PixNotSrcAndDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]&=^(_babg .Data [_dgae ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],^(_babg .Data [_dgae ])&_cgfb .Data [_fefeb ],_fdaae );};};case PixSrcOrNotDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=_babg .Data [_dgae ]|^(_cgfb .Data [_fefeb ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],_babg .Data [_dgae ]|^(_cgfb .Data [_fefeb ]),_fdaae );};};case PixSrcAndNotDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=_babg .Data [_dgae ]&^(_cgfb .Data [_fefeb ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],_babg .Data [_dgae ]&^(_cgfb .Data [_fefeb ]),_fdaae );};};case PixNotPixSrcOrDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=^(_babg .Data [_dgae ]|_cgfb .Data [_fefeb ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],^(_babg .Data [_dgae ]|_cgfb .Data [_fefeb ]),_fdaae );};};case PixNotPixSrcAndDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=^(_babg .Data [_dgae ]&_cgfb .Data [_fefeb ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],^(_babg .Data [_dgae ]&_cgfb .Data [_fefeb ]),_fdaae );};};case PixNotPixSrcXorDst :for _beee =0;_beee < _gbffe ;_beee ++{_dgae =_gbgd +_beee *_babg .RowStride ;_fefeb =_bgfeg +_beee *_cgfb .RowStride ;for _adbd =0;_adbd < _abcaf ;_adbd ++{_cgfb .Data [_fefeb ]=^(_babg .Data [_dgae ]^_cgfb .Data [_fefeb ]);_fefeb ++;_dgae ++;};if _bdeg > 0{_cgfb .Data [_fefeb ]=_gagf (_cgfb .Data [_fefeb ],^(_babg .Data [_dgae ]^_cgfb .Data [_fefeb ]),_fdaae );};};default:_afe .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_eacd );return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};type LocationFilter int ;func _fb (_e ,_ab *Bitmap )(_cf error ){const _d ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_agg :=_ab .RowStride ;_ga :=_e .RowStride ;var (_aa byte ;_gb uint16 ;_bd ,_ca ,_bg ,_gg ,_bef int ;);for _bg =0;_bg < _ab .Height ;_bg ++{_bd =_bg *_agg ;_ca =2*_bg *_ga ;for _gg =0;_gg < _agg ;_gg ++{_aa =_ab .Data [_bd +_gg ];_gb =_gdd [_aa ];_bef =_ca +_gg *2;if _e .RowStride !=_ab .RowStride *2&&(_gg +1)*2> _e .RowStride {_cf =_e .SetByte (_bef ,byte (_gb >>8));}else {_cf =_e .setTwoBytes (_bef ,_gb );};if _cf !=nil {return _g .Wrap (_cf ,_d ,"");};};for _gg =0;_gg < _ga ;_gg ++{_bef =_ca +_ga +_gg ;_aa =_e .Data [_ca +_gg ];if _cf =_e .SetByte (_bef ,_aa );_cf !=nil {return _g .Wrapf (_cf ,_d ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ca +_gg ,_ca +_ga +_gg );};};};return nil ;};type Points []Point ;func _bbdb ()[]int {_aaede :=make ([]int ,256);_aaede [0]=0;_aaede [1]=7;var _fgdf int ;for _fgdf =2;_fgdf < 4;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -2]+6;};for _fgdf =4;_fgdf < 8;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -4]+5;};for _fgdf =8;_fgdf < 16;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -8]+4;};for _fgdf =16;_fgdf < 32;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -16]+3;};for _fgdf =32;_fgdf < 64;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -32]+2;};for _fgdf =64;_fgdf < 128;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -64]+1;};for _fgdf =128;_fgdf < 256;_fgdf ++{_aaede [_fgdf ]=_aaede [_fgdf -128];};return _aaede ;};func (_baca *ClassedPoints )xSortFunction ()func (_dcde int ,_fbeb int )bool {return func (_fgdag ,_ecdf int )bool {return _baca .XAtIndex (_fgdag )< _baca .XAtIndex (_ecdf )};};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _cbge (src ,sequence ...);};func _fgad (_abf ,_cceb *Bitmap ,_bgcd CombinationOperator )*Bitmap {_bge :=New (_abf .Width ,_abf .Height );for _aege :=0;_aege < len (_bge .Data );_aege ++{_bge .Data [_aege ]=_ddea (_abf .Data [_aege ],_cceb .Data [_aege ],_bgcd );};return _bge ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _abfeg (_aead *Bitmap ,_gcef ,_ceadf ,_gaef ,_cece int ,_bgge RasterOperator ,_acde *Bitmap ,_geab ,_bcee int )error {var (_ffgg bool ;_ggge bool ;_aebed byte ;_gbdd int ;_fgbg int ;_ecag int ;_ega int ;_eadac bool ;_fagac int ;_caae int ;_eedg int ;_aaeb bool ;_aadf byte ;_eafb int ;_fece int ;_dbbd int ;_gbed byte ;_gabeg int ;_eggg int ;_beeac uint ;_fdaf uint ;_ccbfd byte ;_ege shift ;_eeed bool ;_baef bool ;_bggf ,_beddb int ;);if _geab &7!=0{_eggg =8-(_geab &7);};if _gcef &7!=0{_fgbg =8-(_gcef &7);};if _eggg ==0&&_fgbg ==0{_ccbfd =_bbeg [0];}else {if _fgbg > _eggg {_beeac =uint (_fgbg -_eggg );}else {_beeac =uint (8-(_eggg -_fgbg ));};_fdaf =8-_beeac ;_ccbfd =_bbeg [_beeac ];};if (_gcef &7)!=0{_ffgg =true ;_gbdd =8-(_gcef &7);_aebed =_bbeg [_gbdd ];_ecag =_aead .RowStride *_ceadf +(_gcef >>3);_ega =_acde .RowStride *_bcee +(_geab >>3);_gabeg =8-(_geab &7);if _gbdd > _gabeg {_ege =_bgfa ;if _gaef >=_eggg {_eeed =true ;};}else {_ege =_agdg ;};};if _gaef < _gbdd {_ggge =true ;_aebed &=_gfcf [8-_gbdd +_gaef ];};if !_ggge {_fagac =(_gaef -_gbdd )>>3;if _fagac !=0{_eadac =true ;_caae =_aead .RowStride *_ceadf +((_gcef +_fgbg )>>3);_eedg =_acde .RowStride *_bcee +((_geab +_fgbg )>>3);};};_eafb =(_gcef +_gaef )&7;if !(_ggge ||_eafb ==0){_aaeb =true ;_aadf =_gfcf [_eafb ];_fece =_aead .RowStride *_ceadf +((_gcef +_fgbg )>>3)+_fagac ;_dbbd =_acde .RowStride *_bcee +((_geab +_fgbg )>>3)+_fagac ;if _eafb > int (_fdaf ){_baef =true ;};};switch _bgge {case PixSrc :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],_gbed ,_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],_gbed ,_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixNotSrc :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],^_gbed ,_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=^_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],^_gbed ,_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixSrcOrDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],_gbed |_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]|=_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],_gbed |_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixSrcAndDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],_gbed &_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]&=_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],_gbed &_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixSrcXorDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],_gbed ^_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]^=_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],_gbed ^_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixNotSrcOrDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],^_gbed |_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]|=^_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],^_gbed |_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixNotSrcAndDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],^_gbed &_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]&=^_gbed ;};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],^_gbed &_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixSrcOrNotDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],_gbed |^_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=_gbed |^_aead .Data [_caae +_beddb ];};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],_gbed |^_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixSrcAndNotDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],_gbed &^_aead .Data [_ecag ],_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=_gbed &^_aead .Data [_caae +_beddb ];};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],_gbed &^_aead .Data [_fece ],_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixNotPixSrcOrDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],^(_gbed |_aead .Data [_ecag ]),_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=^(_gbed |_aead .Data [_caae +_beddb ]);};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],^(_gbed |_aead .Data [_fece ]),_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixNotPixSrcAndDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],^(_gbed &_aead .Data [_ecag ]),_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=^(_gbed &_aead .Data [_caae +_beddb ]);};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],^(_gbed &_aead .Data [_fece ]),_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};case PixNotPixSrcXorDst :if _ffgg {for _bggf =0;_bggf < _cece ;_bggf ++{if _ege ==_bgfa {_gbed =_acde .Data [_ega ]<<_beeac ;if _eeed {_gbed =_gagf (_gbed ,_acde .Data [_ega +1]>>_fdaf ,_ccbfd );};}else {_gbed =_acde .Data [_ega ]>>_fdaf ;};_aead .Data [_ecag ]=_gagf (_aead .Data [_ecag ],^(_gbed ^_aead .Data [_ecag ]),_aebed );_ecag +=_aead .RowStride ;_ega +=_acde .RowStride ;};};if _eadac {for _bggf =0;_bggf < _cece ;_bggf ++{for _beddb =0;_beddb < _fagac ;_beddb ++{_gbed =_gagf (_acde .Data [_eedg +_beddb ]<<_beeac ,_acde .Data [_eedg +_beddb +1]>>_fdaf ,_ccbfd );_aead .Data [_caae +_beddb ]=^(_gbed ^_aead .Data [_caae +_beddb ]);};_caae +=_aead .RowStride ;_eedg +=_acde .RowStride ;};};if _aaeb {for _bggf =0;_bggf < _cece ;_bggf ++{_gbed =_acde .Data [_dbbd ]<<_beeac ;if _baef {_gbed =_gagf (_gbed ,_acde .Data [_dbbd +1]>>_fdaf ,_ccbfd );};_aead .Data [_fece ]=_gagf (_aead .Data [_fece ],^(_gbed ^_aead .Data [_fece ]),_aadf );_fece +=_aead .RowStride ;_dbbd +=_acde .RowStride ;};};default:_afe .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_bgge );return _g .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_c .Rectangle ;};func (_effaf *ClassedPoints )XAtIndex (i int )float32 {return (*_effaf .Points )[_effaf .IntSlice [i ]].X };func _aeb ()(_effg [256]uint32 ){for _cb :=0;_cb < 256;_cb ++{if _cb &0x01!=0{_effg [_cb ]|=0xf;};if _cb &0x02!=0{_effg [_cb ]|=0xf0;};if _cb &0x04!=0{_effg [_cb ]|=0xf00;};if _cb &0x08!=0{_effg [_cb ]|=0xf000;};if _cb &0x10!=0{_effg [_cb ]|=0xf0000;};if _cb &0x20!=0{_effg [_cb ]|=0xf00000;};if _cb &0x40!=0{_effg [_cb ]|=0xf000000;};if _cb &0x80!=0{_effg [_cb ]|=0xf0000000;};};return _effg ;};func _efbg (_fffd *Bitmap ,_ggbd ,_gead int ,_eafd ,_adcc int ,_agca RasterOperator ,_abbf *Bitmap ,_acf ,_ebae int )error {var _deff ,_abcg ,_ddcgg ,_befg int ;if _ggbd < 0{_acf -=_ggbd ;_eafd +=_ggbd ;_ggbd =0;};if _acf < 0{_ggbd -=_acf ;_eafd +=_acf ;_acf =0;};_deff =_ggbd +_eafd -_fffd .Width ;if _deff > 0{_eafd -=_deff ;};_abcg =_acf +_eafd -_abbf .Width ;if _abcg > 0{_eafd -=_abcg ;};if _gead < 0{_ebae -=_gead ;_adcc +=_gead ;_gead =0;};if _ebae < 0{_gead -=_ebae ;_adcc +=_ebae ;_ebae =0;};_ddcgg =_gead +_adcc -_fffd .Height ;if _ddcgg > 0{_adcc -=_ddcgg ;};_befg =_ebae +_adcc -_abbf .Height ;if _befg > 0{_adcc -=_befg ;};if _eafd <=0||_adcc <=0{return nil ;};var _gbfa error ;switch {case _ggbd &7==0&&_acf &7==0:_gbfa =_fdbg (_fffd ,_ggbd ,_gead ,_eafd ,_adcc ,_agca ,_abbf ,_acf ,_ebae );case _ggbd &7==_acf &7:_gbfa =_fafe (_fffd ,_ggbd ,_gead ,_eafd ,_adcc ,_agca ,_abbf ,_acf ,_ebae );default:_gbfa =_abfeg (_fffd ,_ggbd ,_gead ,_eafd ,_adcc ,_agca ,_abbf ,_acf ,_ebae );};if _gbfa !=nil {return _g .Wrap (_gbfa ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};type Boxes []*_c .Rectangle ;type fillSegment struct{_gcaa int ;_acgd int ;_edgg int ;_bcfec int ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_gedb *Bitmap )Copy ()*Bitmap {_feda :=make ([]byte ,len (_gedb .Data ));copy (_feda ,_gedb .Data );return &Bitmap {Width :_gedb .Width ,Height :_gedb .Height ,RowStride :_gedb .RowStride ,Data :_feda ,Color :_gedb .Color ,Text :_gedb .Text ,BitmapNumber :_gedb .BitmapNumber ,Special :_gedb .Special };};func (_ceec *BitmapsArray )AddBox (box *_c .Rectangle ){_ceec .Boxes =append (_ceec .Boxes ,box )};func (_cdg *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cdg .Copy (),nil ;};_fca ,_cgf :=_cdg .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _cgf !=nil {return nil ,_g .Wrap (_cgf ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _fca ,nil ;};func _fdd (_bcg ,_dcd *Bitmap ,_gga int ,_bcf []byte ,_db int )(_caa error ){const _fdcf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_bbb ,_acc ,_adf ,_bbc ,_aeg ,_ebga ,_fec ,_deb int ;_adad ,_gde ,_dbe ,_ggfd uint32 ;_bgac ,_beb byte ;_abc uint16 ;);_fbea :=make ([]byte ,4);_afdc :=make ([]byte ,4);for _adf =0;_adf < _bcg .Height -1;_adf ,_bbc =_adf +2,_bbc +1{_bbb =_adf *_bcg .RowStride ;_acc =_bbc *_dcd .RowStride ;for _aeg ,_ebga =0,0;_aeg < _db ;_aeg ,_ebga =_aeg +4,_ebga +1{for _fec =0;_fec < 4;_fec ++{_deb =_bbb +_aeg +_fec ;if _deb <=len (_bcg .Data )-1&&_deb < _bbb +_bcg .RowStride {_fbea [_fec ]=_bcg .Data [_deb ];}else {_fbea [_fec ]=0x00;};_deb =_bbb +_bcg .RowStride +_aeg +_fec ;if _deb <=len (_bcg .Data )-1&&_deb < _bbb +(2*_bcg .RowStride ){_afdc [_fec ]=_bcg .Data [_deb ];}else {_afdc [_fec ]=0x00;};};_adad =_ag .BigEndian .Uint32 (_fbea );_gde =_ag .BigEndian .Uint32 (_afdc );_dbe =_adad &_gde ;_dbe |=_dbe <<1;_ggfd =_adad |_gde ;_ggfd &=_ggfd <<1;_gde =_dbe &_ggfd ;_gde &=0xaaaaaaaa;_adad =_gde |(_gde <<7);_bgac =byte (_adad >>24);_beb =byte ((_adad >>8)&0xff);_deb =_acc +_ebga ;if _deb +1==len (_dcd .Data )-1||_deb +1>=_acc +_dcd .RowStride {if _caa =_dcd .SetByte (_deb ,_bcf [_bgac ]);_caa !=nil {return _g .Wrapf (_caa ,_fdcf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_deb );};}else {_abc =(uint16 (_bcf [_bgac ])<<8)|uint16 (_bcf [_beb ]);if _caa =_dcd .setTwoBytes (_deb ,_abc );_caa !=nil {return _g .Wrapf (_caa ,_fdcf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_deb );};_ebga ++;};};};return nil ;};func (_efdd Points )YSorter ()func (_gffd ,_edf int )bool {return func (_cddbe ,_agfg int )bool {return _efdd [_cddbe ].Y < _efdd [_agfg ].Y };};func (_eaca *Bitmap )Zero ()bool {_adae :=_eaca .Width /8;_bada :=_eaca .Width &7;var _ccad byte ;if _bada !=0{_ccad =byte (0xff<<uint (8-_bada ));};var _fbgf ,_fgf ,_gcf int ;for _fgf =0;_fgf < _eaca .Height ;_fgf ++{_fbgf =_eaca .RowStride *_fgf ;for _gcf =0;_gcf < _adae ;_gcf ,_fbgf =_gcf +1,_fbgf +1{if _eaca .Data [_fbgf ]!=0{return false ;};};if _bada > 0{if _eaca .Data [_fbgf ]&_ccad !=0{return false ;};};};return true ;};func _bcbe (_deef ,_aeca ,_ddafd *Bitmap ,_gcefe int )(*Bitmap ,error ){const _fcde ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _aeca ==nil {return nil ,_g .Error (_fcde ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ddafd ==nil {return nil ,_g .Error (_fcde ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gcefe !=4&&_gcefe !=8{return nil ,_g .Error (_fcde ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _feddg error ;_deef ,_feddg =_fcad (_deef ,_aeca );if _feddg !=nil {return nil ,_g .Wrap (_feddg ,_fcde ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_bcccd :=_aeca .createTemplate ();_ddafd .setPadBits (0);for _aafg :=0;_aafg < _dffe ;_aafg ++{_bcccd ,_feddg =_fcad (_bcccd ,_deef );if _feddg !=nil {return nil ,_g .Wrapf (_feddg ,_fcde ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aafg );};if _feddg =_abce (_deef ,_ddafd ,_gcefe );_feddg !=nil {return nil ,_g .Wrapf (_feddg ,_fcde ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_aafg );};if _bcccd .Equals (_deef ){break ;};};return _deef ,nil ;};func _fead (_edae *Bitmap ,_deedd *_b .Stack ,_fdebc ,_ebca int )(_cbaf *_c .Rectangle ,_gbag error ){const _ccbe ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _edae ==nil {return nil ,_g .Error (_ccbe ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _deedd ==nil {return nil ,_g .Error (_ccbe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_dgbf ,_eacaa :=_edae .Width ,_edae .Height ;_dcged :=_dgbf -1;_dfebe :=_eacaa -1;if _fdebc < 0||_fdebc > _dcged ||_ebca < 0||_ebca > _dfebe ||!_edae .GetPixel (_fdebc ,_ebca ){return nil ,nil ;};_begg :=_c .Rect (100000,100000,0,0);if _gbag =_ecae (_deedd ,_fdebc ,_fdebc ,_ebca ,1,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gbag =_ecae (_deedd ,_fdebc ,_fdebc ,_ebca +1,-1,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_begg .Min .X ,_begg .Max .X =_fdebc ,_fdebc ;_begg .Min .Y ,_begg .Max .Y =_ebca ,_ebca ;var (_bbgc *fillSegment ;_abcdf int ;);for _deedd .Len ()> 0{if _bbgc ,_gbag =_eaaa (_deedd );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"");};_ebca =_bbgc ._edgg ;for _fdebc =_bbgc ._gcaa -1;_fdebc >=0&&_edae .GetPixel (_fdebc ,_ebca );_fdebc --{if _gbag =_edae .SetPixel (_fdebc ,_ebca ,0);_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _fdebc >=_bbgc ._gcaa -1{for {for _fdebc ++;_fdebc <=_bbgc ._acgd +1&&_fdebc <=_dcged &&!_edae .GetPixel (_fdebc ,_ebca );_fdebc ++{};_abcdf =_fdebc ;if !(_fdebc <=_bbgc ._acgd +1&&_fdebc <=_dcged ){break ;};for ;_fdebc <=_dcged &&_edae .GetPixel (_fdebc ,_ebca );_fdebc ++{if _gbag =_edae .SetPixel (_fdebc ,_ebca ,0);_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gbag =_ecae (_deedd ,_abcdf ,_fdebc -1,_bbgc ._edgg ,_bbgc ._bcfec ,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fdebc > _bbgc ._acgd {if _gbag =_ecae (_deedd ,_bbgc ._acgd +1,_fdebc -1,_bbgc ._edgg ,-_bbgc ._bcfec ,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_abcdf =_fdebc +1;if _abcdf < _bbgc ._gcaa {if _gbag =_ecae (_deedd ,_abcdf ,_bbgc ._gcaa -1,_bbgc ._edgg ,-_bbgc ._bcfec ,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_fdebc =_bbgc ._gcaa ;for {for ;_fdebc <=_dcged &&_edae .GetPixel (_fdebc ,_ebca );_fdebc ++{if _gbag =_edae .SetPixel (_fdebc ,_ebca ,0);_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gbag =_ecae (_deedd ,_abcdf ,_fdebc -1,_bbgc ._edgg ,_bbgc ._bcfec ,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fdebc > _bbgc ._acgd {if _gbag =_ecae (_deedd ,_bbgc ._acgd +1,_fdebc -1,_bbgc ._edgg ,-_bbgc ._bcfec ,_dfebe ,&_begg );_gbag !=nil {return nil ,_g .Wrap (_gbag ,_ccbe ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _fdebc ++;_fdebc <=_bbgc ._acgd +1&&_fdebc <=_dcged &&!_edae .GetPixel (_fdebc ,_ebca );_fdebc ++{};_abcdf =_fdebc ;if !(_fdebc <=_bbgc ._acgd +1&&_fdebc <=_dcged ){break ;};};};_begg .Max .X ++;_begg .Max .Y ++;return &_begg ,nil ;};type byWidth Bitmaps ;type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_baeb *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _bbca ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_baeb .IntSlice .Size (){return 0,_g .Errorf (_bbca ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_baeb .XAtIndex (i )),nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_eeaee bool ,_eega error ){const _bcb ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_bfgae ,_addc :=p1 .Width ,p1 .Height ;_gcfb ,_cfee :=p3 .Width ,p3 .Height ;if _b .Abs (_bfgae -_gcfb )> maxDiffW {return false ,nil ;};if _b .Abs (_addc -_cfee )> maxDiffH {return false ,nil ;};_cgfa :=int (float32 (area1 )*(1.0-rank )+0.5);_dabgf :=int (float32 (area3 )*(1.0-rank )+0.5);var _gfee ,_dgfb int ;if delX >=0{_gfee =int (delX +0.5);}else {_gfee =int (delX -0.5);};if delY >=0{_dgfb =int (delY +0.5);}else {_dgfb =int (delY -0.5);};_fcac :=p1 .CreateTemplate ();if _eega =_fcac .RasterOperation (0,0,_bfgae ,_addc ,PixSrc ,p1 ,0,0);_eega !=nil {return false ,_g .Wrap (_eega ,_bcb ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eega =_fcac .RasterOperation (_gfee ,_dgfb ,_bfgae ,_addc ,PixNotSrcAndDst ,p4 ,0,0);_eega !=nil {return false ,_g .Wrap (_eega ,_bcb ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_eeaee ,_eega =_fcac .ThresholdPixelSum (_cgfa ,tab8 );if _eega !=nil {return false ,_g .Wrap (_eega ,_bcb ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _eeaee {return false ,nil ;};if _eega =_fcac .RasterOperation (_gfee ,_dgfb ,_gcfb ,_cfee ,PixSrc ,p3 ,0,0);_eega !=nil {return false ,_g .Wrap (_eega ,_bcb ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eega =_fcac .RasterOperation (0,0,_gcfb ,_cfee ,PixNotSrcAndDst ,p2 ,0,0);_eega !=nil {return false ,_g .Wrap (_eega ,_bcb ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_eeaee ,_eega =_fcac .ThresholdPixelSum (_dabgf ,tab8 );if _eega !=nil {return false ,_g .Wrap (_eega ,_bcb ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_eeaee ,nil ;};func (_cbfg *Bitmap )GetByte (index int )(byte ,error ){if index > len (_cbfg .Data )-1||index < 0{return 0,_g .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _cbfg .Data [index ],nil ;};func _abce (_caec *Bitmap ,_dffa *Bitmap ,_eagbg int )(_cgac error ){const _adaff ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_agae :=_bbbd (_caec .Height ,_dffa .Height );_cabf :=_bbbd (_caec .RowStride ,_dffa .RowStride );switch _eagbg {case 4:_cgac =_edfe (_caec ,_dffa ,_agae ,_cabf );case 8:_cgac =_bbag (_caec ,_dffa ,_agae ,_cabf );default:return _g .Errorf (_adaff ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_eagbg );};if _cgac !=nil {return _g .Wrap (_cgac ,_adaff ,"");};return nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_c .Rectangle ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _fgba (d ,s ,hSize ,vSize )};func (_ggdd *Bitmap )ToImage ()_c .Image {_feeg ,_ecg :=_be .NewImage (_ggdd .Width ,_ggdd .Height ,1,1,_ggdd .Data ,nil ,nil );if _ecg !=nil {_afe .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ecg );};return _feeg ;};func TstASymbol (t *_ac .T )*Bitmap {t .Helper ();_ecdb :=New (6,6);_f .NoError (t ,_ecdb .SetPixel (1,0,1));_f .NoError (t ,_ecdb .SetPixel (2,0,1));_f .NoError (t ,_ecdb .SetPixel (3,0,1));_f .NoError (t ,_ecdb .SetPixel (4,0,1));_f .NoError (t ,_ecdb .SetPixel (5,1,1));_f .NoError (t ,_ecdb .SetPixel (1,2,1));_f .NoError (t ,_ecdb .SetPixel (2,2,1));_f .NoError (t ,_ecdb .SetPixel (3,2,1));_f .NoError (t ,_ecdb .SetPixel (4,2,1));_f .NoError (t ,_ecdb .SetPixel (5,2,1));_f .NoError (t ,_ecdb .SetPixel (0,3,1));_f .NoError (t ,_ecdb .SetPixel (5,3,1));_f .NoError (t ,_ecdb .SetPixel (0,4,1));_f .NoError (t ,_ecdb .SetPixel (5,4,1));_f .NoError (t ,_ecdb .SetPixel (1,5,1));_f .NoError (t ,_ecdb .SetPixel (2,5,1));_f .NoError (t ,_ecdb .SetPixel (3,5,1));_f .NoError (t ,_ecdb .SetPixel (4,5,1));_f .NoError (t ,_ecdb .SetPixel (5,5,1));return _ecdb ;};func _gcce (_dged ,_efg *Bitmap ,_aea int ,_edad []byte ,_efc int )(_aef error ){const _deg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_fbe ,_ddd ,_agd ,_bga ,_gdg ,_eefc ,_fbb ,_fab int ;_df ,_aefb ,_gec ,_ecab uint32 ;_fag ,_fga byte ;_cgd uint16 ;);_bdbgf :=make ([]byte ,4);_egd :=make ([]byte ,4);for _agd =0;_agd < _dged .Height -1;_agd ,_bga =_agd +2,_bga +1{_fbe =_agd *_dged .RowStride ;_ddd =_bga *_efg .RowStride ;for _gdg ,_eefc =0,0;_gdg < _efc ;_gdg ,_eefc =_gdg +4,_eefc +1{for _fbb =0;_fbb < 4;_fbb ++{_fab =_fbe +_gdg +_fbb ;if _fab <=len (_dged .Data )-1&&_fab < _fbe +_dged .RowStride {_bdbgf [_fbb ]=_dged .Data [_fab ];}else {_bdbgf [_fbb ]=0x00;};_fab =_fbe +_dged .RowStride +_gdg +_fbb ;if _fab <=len (_dged .Data )-1&&_fab < _fbe +(2*_dged .RowStride ){_egd [_fbb ]=_dged .Data [_fab ];}else {_egd [_fbb ]=0x00;};};_df =_ag .BigEndian .Uint32 (_bdbgf );_aefb =_ag .BigEndian .Uint32 (_egd );_gec =_df &_aefb ;_gec |=_gec <<1;_ecab =_df |_aefb ;_ecab &=_ecab <<1;_aefb =_gec |_ecab ;_aefb &=0xaaaaaaaa;_df =_aefb |(_aefb <<7);_fag =byte (_df >>24);_fga =byte ((_df >>8)&0xff);_fab =_ddd +_eefc ;if _fab +1==len (_efg .Data )-1||_fab +1>=_ddd +_efg .RowStride {if _aef =_efg .SetByte (_fab ,_edad [_fag ]);_aef !=nil {return _g .Wrapf (_aef ,_deg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fab );};}else {_cgd =(uint16 (_edad [_fag ])<<8)|uint16 (_edad [_fga ]);if _aef =_efg .setTwoBytes (_fab ,_cgd );_aef !=nil {return _g .Wrapf (_aef ,_deg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fab );};_eefc ++;};};};return nil ;};func _ea (_cc ,_fc *Bitmap )(_gd error ){const _ce ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_dd :=_fc .RowStride ;_ae :=_cc .RowStride ;_bgb :=_fc .RowStride *4-_cc .RowStride ;var (_fg ,_da byte ;_eb uint32 ;_eae ,_acg ,_ee ,_fgd ,_ad ,_dg ,_fd int ;);for _ee =0;_ee < _fc .Height ;_ee ++{_eae =_ee *_dd ;_acg =4*_ee *_ae ;for _fgd =0;_fgd < _dd ;_fgd ++{_fg =_fc .Data [_eae +_fgd ];_eb =_bfed [_fg ];_dg =_acg +_fgd *4;if _bgb !=0&&(_fgd +1)*4> _cc .RowStride {for _ad =_bgb ;_ad > 0;_ad --{_da =byte ((_eb >>uint (_ad *8))&0xff);_fd =_dg +(_bgb -_ad );if _gd =_cc .SetByte (_fd ,_da );_gd !=nil {return _g .Wrapf (_gd ,_ce ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ad );};};}else if _gd =_cc .setFourBytes (_dg ,_eb );_gd !=nil {return _g .Wrap (_gd ,_ce ,"");};if _gd =_cc .setFourBytes (_acg +_fgd *4,_bfed [_fc .Data [_eae +_fgd ]]);_gd !=nil {return _g .Wrap (_gd ,_ce ,"");};};for _ad =1;_ad < 4;_ad ++{for _fgd =0;_fgd < _ae ;_fgd ++{if _gd =_cc .SetByte (_acg +_ad *_ae +_fgd ,_cc .Data [_acg +_fgd ]);_gd !=nil {return _g .Wrapf (_gd ,_ce ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ad ,_fgd );};};};};return nil ;};func (_ggb *Bitmap )addPadBits ()(_eefa error ){const _cgcg ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_caab :=_ggb .Width %8;if _caab ==0{return nil ;};_ecge :=_ggb .Width /8;_fcca :=_afa .NewReader (_ggb .Data );_faf :=make ([]byte ,_ggb .Height *_ggb .RowStride );_dfg :=_afa .NewWriterMSB (_faf );_cgba :=make ([]byte ,_ecge );var (_bfb int ;_bddd uint64 ;);for _bfb =0;_bfb < _ggb .Height ;_bfb ++{if _ ,_eefa =_fcca .Read (_cgba );_eefa !=nil {return _g .Wrap (_eefa ,_cgcg ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_eefa =_dfg .Write (_cgba );_eefa !=nil {return _g .Wrap (_eefa ,_cgcg ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _bddd ,_eefa =_fcca .ReadBits (byte (_caab ));_eefa !=nil {return _g .Wrap (_eefa ,_cgcg ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _eefa =_dfg .WriteByte (byte (_bddd )<<uint (8-_caab ));_eefa !=nil {return _g .Wrap (_eefa ,_cgcg ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_ggb .Data =_dfg .Data ();return nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ddcd float64 ,_dbbb error ){const _ccacb ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _ddcd ,_g .Error (_ccacb ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _ddcd ,_g .Error (_ccacb ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _ddcd ,_g .Error (_ccacb ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_fgbf ,_bacc :=bm1 .Width ,bm1 .Height ;_aage ,_faac :=bm2 .Width ,bm2 .Height ;if _ddce (_fgbf -_aage )> maxDiffW {return 0,nil ;};if _ddce (_bacc -_faac )> maxDiffH {return 0,nil ;};var _ggfgc ,_feef int ;if delX >=0{_ggfgc =int (delX +0.5);}else {_ggfgc =int (delX -0.5);};if delY >=0{_feef =int (delY +0.5);}else {_feef =int (delY -0.5);};_adadg :=bm1 .createTemplate ();if _dbbb =_adadg .RasterOperation (_ggfgc ,_feef ,_aage ,_faac ,PixSrc ,bm2 ,0,0);_dbbb !=nil {return _ddcd ,_g .Wrap (_dbbb ,_ccacb ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _dbbb =_adadg .RasterOperation (0,0,_fgbf ,_bacc ,PixSrcAndDst ,bm1 ,0,0);_dbbb !=nil {return _ddcd ,_g .Wrap (_dbbb ,_ccacb ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_dccgg :=_adadg .countPixels ();_ddcd =float64 (_dccgg )*float64 (_dccgg )/(float64 (area1 )*float64 (area2 ));return _ddcd ,nil ;};func TstVSymbol (t *_ac .T ,scale ...int )*Bitmap {_fedcb ,_eedc :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_f .NoError (t ,_eedc );return TstGetScaledSymbol (t ,_fedcb ,scale ...);};func (_fbeg *Bitmap )setTwoBytes (_ccaf int ,_cade uint16 )error {if _ccaf +1> len (_fbeg .Data )-1{return _g .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ccaf );};_fbeg .Data [_ccaf ]=byte ((_cade &0xff00)>>8);_fbeg .Data [_ccaf +1]=byte (_cade &0xff);return nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_ddff :=make ([]Point ,len (bms ));_agfe :=_bbdb ();_caee :=_ggeb ();var _eafg error ;for _eeddc ,_bba :=range bms {_ddff [_eeddc ],_eafg =_bba .centroid (_agfe ,_caee );if _eafg !=nil {return nil ,_eafg ;};};_gbeb :=Points (_ddff );return &_gbeb ,nil ;};func _gaaf (_fbag ,_bccc int )*Bitmap {return &Bitmap {Width :_fbag ,Height :_bccc ,RowStride :(_fbag +7)>>3};};func (_aebg *Bitmap )ClipRectangle (box *_c .Rectangle )(_aggb *Bitmap ,_bcd *_c .Rectangle ,_fefe error ){const _ff ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_g .Error (_ff ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_dae ,_eee :=_aebg .Width ,_aebg .Height ;_fbagc :=_c .Rect (0,0,_dae ,_eee );if !box .Overlaps (_fbagc ){return nil ,nil ,_g .Error (_ff ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_cad :=box .Intersect (_fbagc );_gecf ,_ggeg :=_cad .Min .X ,_cad .Min .Y ;_gbg ,_bae :=_cad .Dx (),_cad .Dy ();_aggb =New (_gbg ,_bae );_aggb .Text =_aebg .Text ;if _fefe =_aggb .RasterOperation (0,0,_gbg ,_bae ,PixSrc ,_aebg ,_gecf ,_ggeg );_fefe !=nil {return nil ,nil ,_g .Wrap (_fefe ,_ff ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_bcd =&_cad ;return _aggb ,_bcd ,nil ;};func (_ebfae *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _eefd ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_ebfae .Values )==0{return nil ,_g .Error (_eefd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_egfea :=&BitmapsArray {};_ebfae .SortByWidth ();_cabg :=-1;_fbcb :=-1;for _ade :=0;_ade < len (_ebfae .Values );_ade ++{_gggea :=_ebfae .Values [_ade ].Width ;if _gggea > _cabg {_cabg =_gggea ;_fbcb ++;_egfea .Values =append (_egfea .Values ,&Bitmaps {});};_egfea .Values [_fbcb ].AddBitmap (_ebfae .Values [_ade ]);};return _egfea ,nil ;};func _fgac ()(_gdeg []byte ){_gdeg =make ([]byte ,256);for _fda :=0;_fda < 256;_fda ++{_ggg :=byte (_fda );_gdeg [_ggg ]=(_ggg &0x01)|((_ggg &0x04)>>1)|((_ggg &0x10)>>2)|((_ggg &0x40)>>3)|((_ggg &0x02)<<3)|((_ggg &0x08)<<2)|((_ggg &0x20)<<1)|(_ggg &0x80);};return _gdeg ;};func (_dbb *Bitmap )CreateTemplate ()*Bitmap {return _dbb .createTemplate ()};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_badagc :=_agbf (h ,w ,"");_badagc .setOrigin (cy ,cx );var _gabcf ,_efef int ;for _gabcf =0;_gabcf < h ;_gabcf ++{for _efef =0;_efef < w ;_efef ++{_badagc .Data [_gabcf ][_efef ]=tp ;};};return _badagc ;};func (_bgg *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _bgg .addBorderGeneral (left ,right ,top ,bot ,val );};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_dfbg *Bitmaps )GetBox (i int )(*_c .Rectangle ,error ){const _bcbgf ="\u0047\u0065\u0074\u0042\u006f\u0078";if _dfbg ==nil {return nil ,_g .Error (_bcbgf ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_dfbg .Boxes )-1{return nil ,_g .Errorf (_bcbgf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dfbg .Boxes [i ],nil ;};func _fffa (_ecged ,_dffb *Bitmap ,_bafd *Selection )(*Bitmap ,error ){const _gadg ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _ffab error ;if _ecged ,_ffab =_fged (_ecged ,_dffb ,_bafd );_ffab !=nil {return nil ,_ffab ;};_ccada ,_ffab :=_dcge (nil ,_dffb ,_bafd );if _ffab !=nil {return nil ,_g .Wrap (_ffab ,_gadg ,"");};if _ ,_ffab =_edda (_ecged ,_ccada ,_bafd );_ffab !=nil {return nil ,_g .Wrap (_ffab ,_gadg ,"");};return _ecged ,nil ;};func (_ddebc *Bitmap )setEightFullBytes (_gcbb int ,_gabe uint64 )error {if _gcbb +7> len (_ddebc .Data )-1{return _g .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_ddebc .Data [_gcbb ]=byte ((_gabe &0xff00000000000000)>>56);_ddebc .Data [_gcbb +1]=byte ((_gabe &0xff000000000000)>>48);_ddebc .Data [_gcbb +2]=byte ((_gabe &0xff0000000000)>>40);_ddebc .Data [_gcbb +3]=byte ((_gabe &0xff00000000)>>32);_ddebc .Data [_gcbb +4]=byte ((_gabe &0xff000000)>>24);_ddebc .Data [_gcbb +5]=byte ((_gabe &0xff0000)>>16);_ddebc .Data [_gcbb +6]=byte ((_gabe &0xff00)>>8);_ddebc .Data [_gcbb +7]=byte (_gabe &0xff);return nil ;};func _fbcd (_fabd *Bitmap ,_daeb *_b .Stack ,_gaeg ,_eadc int )(_babb *_c .Rectangle ,_bfef error ){const _bcada ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _fabd ==nil {return nil ,_g .Error (_bcada ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _daeb ==nil {return nil ,_g .Error (_bcada ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_bbeb ,_baed :=_fabd .Width ,_fabd .Height ;_becd :=_bbeb -1;_ddecf :=_baed -1;if _gaeg < 0||_gaeg > _becd ||_eadc < 0||_eadc > _ddecf ||!_fabd .GetPixel (_gaeg ,_eadc ){return nil ,nil ;};var _bcbg *_c .Rectangle ;_bcbg ,_bfef =Rect (100000,100000,0,0);if _bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"");};if _bfef =_ecae (_daeb ,_gaeg ,_gaeg ,_eadc ,1,_ddecf ,_bcbg );_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bfef =_ecae (_daeb ,_gaeg ,_gaeg ,_eadc +1,-1,_ddecf ,_bcbg );_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bcbg .Min .X ,_bcbg .Max .X =_gaeg ,_gaeg ;_bcbg .Min .Y ,_bcbg .Max .Y =_eadc ,_eadc ;var (_cfaf *fillSegment ;_caffa int ;);for _daeb .Len ()> 0{if _cfaf ,_bfef =_eaaa (_daeb );_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"");};_eadc =_cfaf ._edgg ;for _gaeg =_cfaf ._gcaa ;_gaeg >=0&&_fabd .GetPixel (_gaeg ,_eadc );_gaeg --{if _bfef =_fabd .SetPixel (_gaeg ,_eadc ,0);_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"");};};if _gaeg >=_cfaf ._gcaa {for _gaeg ++;_gaeg <=_cfaf ._acgd &&_gaeg <=_becd &&!_fabd .GetPixel (_gaeg ,_eadc );_gaeg ++{};_caffa =_gaeg ;if !(_gaeg <=_cfaf ._acgd &&_gaeg <=_becd ){continue ;};}else {_caffa =_gaeg +1;if _caffa < _cfaf ._gcaa -1{if _bfef =_ecae (_daeb ,_caffa ,_cfaf ._gcaa -1,_cfaf ._edgg ,-_cfaf ._bcfec ,_ddecf ,_bcbg );_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gaeg =_cfaf ._gcaa +1;};for {for ;_gaeg <=_becd &&_fabd .GetPixel (_gaeg ,_eadc );_gaeg ++{if _bfef =_fabd .SetPixel (_gaeg ,_eadc ,0);_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bfef =_ecae (_daeb ,_caffa ,_gaeg -1,_cfaf ._edgg ,_cfaf ._bcfec ,_ddecf ,_bcbg );_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gaeg > _cfaf ._acgd +1{if _bfef =_ecae (_daeb ,_cfaf ._acgd +1,_gaeg -1,_cfaf ._edgg ,-_cfaf ._bcfec ,_ddecf ,_bcbg );_bfef !=nil {return nil ,_g .Wrap (_bfef ,_bcada ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gaeg ++;_gaeg <=_cfaf ._acgd &&_gaeg <=_becd &&!_fabd .GetPixel (_gaeg ,_eadc );_gaeg ++{};_caffa =_gaeg ;if !(_gaeg <=_cfaf ._acgd &&_gaeg <=_becd ){break ;};};};_bcbg .Max .X ++;_bcbg .Max .Y ++;return _bcbg ,nil ;};func _fged (_cdcg ,_gadcc *Bitmap ,_cdfd *Selection )(*Bitmap ,error ){const _ceae ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _cdae ,_agfd int ;if _gadcc ==nil {return nil ,_g .Error (_ceae ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cdfd ==nil {return nil ,_g .Error (_ceae ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_cdae =_cdfd .Width ;_agfd =_cdfd .Height ;if _cdae ==0||_agfd ==0{return nil ,_g .Error (_ceae ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _cdcg ==nil {return _gadcc .createTemplate (),nil ;};if _ecbg :=_cdcg .resizeImageData (_gadcc );_ecbg !=nil {return nil ,_ecbg ;};return _cdcg ,nil ;};func _gggc (_efdf ,_cebc *Bitmap ,_ffag ,_gbaa int )(*Bitmap ,error ){const _eeebb ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _cebc ==nil {return nil ,_g .Error (_eeebb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ffag < 1&&_gbaa < 1{return nil ,_g .Error (_eeebb ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _ffag ==1&&_gbaa ==1{return _cebc .Copy (),nil ;};if _ffag ==1||_gbaa ==1{var _cgcc error ;_faca :=SelCreateBrick (_gbaa ,_ffag ,_gbaa /2,_ffag /2,SelHit );_efdf ,_cgcc =_cfge (_efdf ,_cebc ,_faca );if _cgcc !=nil {return nil ,_g .Wrap (_cgcc ,_eeebb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _efdf ,nil ;};_effbe :=SelCreateBrick (1,_ffag ,0,_ffag /2,SelHit );_gaed :=SelCreateBrick (_gbaa ,1,_gbaa /2,0,SelHit );_ebacb ,_gdggg :=_edda (nil ,_cebc ,_effbe );if _gdggg !=nil {return nil ,_g .Wrap (_gdggg ,_eeebb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_efdf ,_gdggg =_edda (_efdf ,_ebacb ,_gaed );if _gdggg !=nil {return nil ,_g .Wrap (_gdggg ,_eeebb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_gdggg =_dcge (_ebacb ,_efdf ,_effbe );if _gdggg !=nil {return nil ,_g .Wrap (_gdggg ,_eeebb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_gdggg =_dcge (_efdf ,_ebacb ,_gaed );if _gdggg !=nil {return nil ,_g .Wrap (_gdggg ,_eeebb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _efdf ,nil ;};func (_cfc *Boxes )makeSizeIndicator (_affe ,_bbfd int ,_efab LocationFilter ,_ebgf SizeComparison )*_b .NumSlice {_ebfg :=&_b .NumSlice {};var _cgbbg ,_dgf ,_bbe int ;for _ ,_bfde :=range *_cfc {_cgbbg =0;_dgf ,_bbe =_bfde .Dx (),_bfde .Dy ();switch _efab {case LocSelectWidth :if (_ebgf ==SizeSelectIfLT &&_dgf < _affe )||(_ebgf ==SizeSelectIfGT &&_dgf > _affe )||(_ebgf ==SizeSelectIfLTE &&_dgf <=_affe )||(_ebgf ==SizeSelectIfGTE &&_dgf >=_affe ){_cgbbg =1;};case LocSelectHeight :if (_ebgf ==SizeSelectIfLT &&_bbe < _bbfd )||(_ebgf ==SizeSelectIfGT &&_bbe > _bbfd )||(_ebgf ==SizeSelectIfLTE &&_bbe <=_bbfd )||(_ebgf ==SizeSelectIfGTE &&_bbe >=_bbfd ){_cgbbg =1;};case LocSelectIfEither :if (_ebgf ==SizeSelectIfLT &&(_bbe < _bbfd ||_dgf < _affe ))||(_ebgf ==SizeSelectIfGT &&(_bbe > _bbfd ||_dgf > _affe ))||(_ebgf ==SizeSelectIfLTE &&(_bbe <=_bbfd ||_dgf <=_affe ))||(_ebgf ==SizeSelectIfGTE &&(_bbe >=_bbfd ||_dgf >=_affe )){_cgbbg =1;};case LocSelectIfBoth :if (_ebgf ==SizeSelectIfLT &&(_bbe < _bbfd &&_dgf < _affe ))||(_ebgf ==SizeSelectIfGT &&(_bbe > _bbfd &&_dgf > _affe ))||(_ebgf ==SizeSelectIfLTE &&(_bbe <=_bbfd &&_dgf <=_affe ))||(_ebgf ==SizeSelectIfGTE &&(_bbe >=_bbfd &&_dgf >=_affe )){_cgbbg =1;};};_ebfg .AddInt (_cgbbg );};return _ebfg ;};func _dabb (_ggfaf *Bitmap ,_efggb ,_babdd int ,_edfb ,_egef int ,_bfceg RasterOperator ){var (_bccfd int ;_ebgaa byte ;_bfgee ,_cfeb int ;_badd int ;);_bdfb :=_edfb >>3;_gbbd :=_edfb &7;if _gbbd > 0{_ebgaa =_gfcf [_gbbd ];};_bccfd =_ggfaf .RowStride *_babdd +(_efggb >>3);switch _bfceg {case PixClr :for _bfgee =0;_bfgee < _egef ;_bfgee ++{_badd =_bccfd +_bfgee *_ggfaf .RowStride ;for _cfeb =0;_cfeb < _bdfb ;_cfeb ++{_ggfaf .Data [_badd ]=0x0;_badd ++;};if _gbbd > 0{_ggfaf .Data [_badd ]=_gagf (_ggfaf .Data [_badd ],0x0,_ebgaa );};};case PixSet :for _bfgee =0;_bfgee < _egef ;_bfgee ++{_badd =_bccfd +_bfgee *_ggfaf .RowStride ;for _cfeb =0;_cfeb < _bdfb ;_cfeb ++{_ggfaf .Data [_badd ]=0xff;_badd ++;};if _gbbd > 0{_ggfaf .Data [_badd ]=_gagf (_ggfaf .Data [_badd ],0xff,_ebgaa );};};case PixNotDst :for _bfgee =0;_bfgee < _egef ;_bfgee ++{_badd =_bccfd +_bfgee *_ggfaf .RowStride ;for _cfeb =0;_cfeb < _bdfb ;_cfeb ++{_ggfaf .Data [_badd ]=^_ggfaf .Data [_badd ];_badd ++;};if _gbbd > 0{_ggfaf .Data [_badd ]=_gagf (_ggfaf .Data [_badd ],^_ggfaf .Data [_badd ],_ebgaa );};};};};const (_bgfa shift =iota ;_agdg ;);func (_aggf *Bitmap )SetPadBits (value int ){_aggf .setPadBits (value )};func MakePixelSumTab8 ()[]int {return _ggeb ()};func TstESymbol (t *_ac .T ,scale ...int )*Bitmap {_gdbg ,_deggd :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_f .NoError (t ,_deggd );return TstGetScaledSymbol (t ,_gdbg ,scale ...);};func _fbdf (_aace ,_bbbe *Bitmap ,_ceb ,_bab ,_fafcb ,_cecb ,_gada int ,_ccbf CombinationOperator )error {var _aad int ;_eeee :=func (){_aad ++;_fafcb +=_bbbe .RowStride ;_cecb +=_aace .RowStride ;_gada +=_aace .RowStride };for _aad =_ceb ;_aad < _bab ;_eeee (){_egcg :=_fafcb ;for _ecb :=_cecb ;_ecb <=_gada ;_ecb ++{_dagg ,_ggca :=_bbbe .GetByte (_egcg );if _ggca !=nil {return _ggca ;};_bcdf ,_ggca :=_aace .GetByte (_ecb );if _ggca !=nil {return _ggca ;};if _ggca =_bbbe .SetByte (_egcg ,_ddea (_dagg ,_bcdf ,_ccbf ));_ggca !=nil {return _ggca ;};_egcg ++;};};return nil ;};func (_dfc *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _dfc .Copy (),nil ;};_fdcg ,_bebd :=_dfc .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _bebd !=nil {return nil ,_g .Wrap (_bebd ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fdcg ,nil ;};func (_ebd *Bitmap )Equals (s *Bitmap )bool {if len (_ebd .Data )!=len (s .Data )||_ebd .Width !=s .Width ||_ebd .Height !=s .Height {return false ;};for _gbbc :=0;_gbbc < _ebd .Height ;_gbbc ++{_fbg :=_gbbc *_ebd .RowStride ;for _fae :=0;_fae < _ebd .RowStride ;_fae ++{if _ebd .Data [_fbg +_fae ]!=s .Data [_fbg +_fae ]{return false ;};};};return true ;};func (_geef CombinationOperator )String ()string {var _cffb string ;switch _geef {case CmbOpOr :_cffb ="\u004f\u0052";case CmbOpAnd :_cffb ="\u0041\u004e\u0044";case CmbOpXor :_cffb ="\u0058\u004f\u0052";case CmbOpXNor :_cffb ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_cffb ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_cffb ="\u004e\u004f\u0054";};return _cffb ;};func _bcgd (_adaeb ,_aebf ,_accb *Bitmap )(*Bitmap ,error ){const _cdgd ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _aebf ==nil {return nil ,_g .Error (_cdgd ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _accb ==nil {return nil ,_g .Error (_cdgd ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _gdfb error ;switch {case _adaeb ==_aebf :if _gdfb =_adaeb .RasterOperation (0,0,_aebf .Width ,_aebf .Height ,PixNotSrcAndDst ,_accb ,0,0);_gdfb !=nil {return nil ,_g .Wrap (_gdfb ,_cdgd ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _adaeb ==_accb :if _gdfb =_adaeb .RasterOperation (0,0,_aebf .Width ,_aebf .Height ,PixNotSrcAndDst ,_aebf ,0,0);_gdfb !=nil {return nil ,_g .Wrap (_gdfb ,_cdgd ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_adaeb ,_gdfb =_fcad (_adaeb ,_aebf );if _gdfb !=nil {return nil ,_g .Wrap (_gdfb ,_cdgd ,"");};if _gdfb =_adaeb .RasterOperation (0,0,_aebf .Width ,_aebf .Height ,PixNotSrcAndDst ,_accb ,0,0);_gdfb !=nil {return nil ,_g .Wrap (_gdfb ,_cdgd ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _adaeb ,nil ;};const _dffe =5000;func (_aebaa *ClassedPoints )SortByX (){_aebaa ._fedd =_aebaa .xSortFunction ();_af .Sort (_aebaa )};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func _fe (_afd ,_afaf *Bitmap )(_ge error ){const _dab ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_ggf :=_afaf .RowStride ;_eg :=_afd .RowStride ;var _gfg ,_faa ,_fee ,_dge ,_fbf int ;for _fee =0;_fee < _afaf .Height ;_fee ++{_gfg =_fee *_ggf ;_faa =8*_fee *_eg ;for _dge =0;_dge < _ggf ;_dge ++{if _ge =_afd .setEightBytes (_faa +_dge *8,_eebg [_afaf .Data [_gfg +_dge ]]);_ge !=nil {return _g .Wrap (_ge ,_dab ,"");};};for _fbf =1;_fbf < 8;_fbf ++{for _dge =0;_dge < _eg ;_dge ++{if _ge =_afd .SetByte (_faa +_fbf *_eg +_dge ,_afd .Data [_faa +_dge ]);_ge !=nil {return _g .Wrap (_ge ,_dab ,"");};};};};return nil ;};func TstAddSymbol (t *_ac .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_fbcba :=_c .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_fbcba );*x +=sym .Width +space ;};func _aeefc (_caaa ,_cefa *Bitmap ,_ebcgb ,_gbga int )(*Bitmap ,error ){const _gbcc ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _cefa ==nil {return nil ,_g .Error (_gbcc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ebcgb < 1||_gbga < 1{return nil ,_g .Error (_gbcc ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _ebcgb ==1&&_gbga ==1{return _fcad (_caaa ,_cefa );};if MorphBC ==SymmetricMorphBC {_fgdc ,_cbbef :=_dfab (_caaa ,_cefa ,_ebcgb ,_gbga );if _cbbef !=nil {return nil ,_g .Wrap (_cbbef ,_gbcc ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _fgdc ,nil ;};_fgfe :=_ffa (_ebcgb /2,_gbga /2);_aadcc :=8*((_fgfe +7)/8);_aecc ,_aefbb :=_cefa .AddBorder (_aadcc ,0);if _aefbb !=nil {return nil ,_g .Wrapf (_aefbb ,_gbcc ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_aadcc );};var _cegec ,_eegb *Bitmap ;if _ebcgb ==1||_gbga ==1{_fecg :=SelCreateBrick (_gbga ,_ebcgb ,_gbga /2,_ebcgb /2,SelHit );_cegec ,_aefbb =_fffa (nil ,_aecc ,_fecg );if _aefbb !=nil {return nil ,_g .Wrap (_aefbb ,_gbcc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_bafb :=SelCreateBrick (1,_ebcgb ,0,_ebcgb /2,SelHit );_fffg ,_eaa :=_dcge (nil ,_aecc ,_bafb );if _eaa !=nil {return nil ,_g .Wrap (_eaa ,_gbcc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_cgfd :=SelCreateBrick (_gbga ,1,_gbga /2,0,SelHit );_cegec ,_eaa =_dcge (nil ,_fffg ,_cgfd );if _eaa !=nil {return nil ,_g .Wrap (_eaa ,_gbcc ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_eaa =_edda (_fffg ,_cegec ,_bafb );_eaa !=nil {return nil ,_g .Wrap (_eaa ,_gbcc ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_eaa =_edda (_cegec ,_fffg ,_cgfd );_eaa !=nil {return nil ,_g .Wrap (_eaa ,_gbcc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _eegb ,_aefbb =_cegec .RemoveBorder (_aadcc );_aefbb !=nil {return nil ,_g .Wrap (_aefbb ,_gbcc ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _caaa ==nil {return _eegb ,nil ;};if _ ,_aefbb =_fcad (_caaa ,_eegb );_aefbb !=nil {return nil ,_aefbb ;};return _caaa ,nil ;};type Component int ;func (_bda *Bitmap )GetPixel (x ,y int )bool {_gfgg :=_bda .GetByteIndex (x ,y );_afb :=_bda .GetBitOffset (x );_afda :=uint (7-_afb );if _gfgg > len (_bda .Data )-1{_afe .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_bda );return false ;};if (_bda .Data [_gfgg ]>>_afda )&0x01>=1{return true ;};return false ;};func (_ggdf Points )GetGeometry (i int )(_cgca ,_cgbae float32 ,_bfcg error ){if i > len (_ggdf )-1{return 0,0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_daefa :=_ggdf [i ];return _daefa .X ,_daefa .Y ,nil ;};func (_fddb *Boxes )Add (box *_c .Rectangle )error {if _fddb ==nil {return _g .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_fddb =append (*_fddb ,box );return nil ;};func (_ebggf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _abdf ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_ebggf .Values )==0{return nil ,_g .Error (_abdf ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cdb :=&BitmapsArray {};_ebggf .SortByHeight ();_gacaf :=-1;_ffdd :=-1;for _cced :=0;_cced < len (_ebggf .Values );_cced ++{_fbde :=_ebggf .Values [_cced ].Height ;if _fbde > _gacaf {_gacaf =_fbde ;_ffdd ++;_cdb .Values =append (_cdb .Values ,&Bitmaps {});};_cdb .Values [_ffdd ].AddBitmap (_ebggf .Values [_cced ]);};return _cdb ,nil ;};func (_bceb *Bitmap )nextOnPixelLow (_gbbe ,_gbff ,_dac ,_ggbc ,_fdgf int )(_ddc _c .Point ,_geg bool ,_dee error ){const _adgc ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_cbcf int ;_dfb byte ;);_abed :=_fdgf *_dac ;_bfad :=_abed +(_ggbc /8);if _dfb ,_dee =_bceb .GetByte (_bfad );_dee !=nil {return _ddc ,false ,_g .Wrap (_dee ,_adgc ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _dfb !=0{_ebcb :=_ggbc -(_ggbc %8)+7;for _cbcf =_ggbc ;_cbcf <=_ebcb &&_cbcf < _gbbe ;_cbcf ++{if _bceb .GetPixel (_cbcf ,_fdgf ){_ddc .X =_cbcf ;_ddc .Y =_fdgf ;return _ddc ,true ,nil ;};};};_acef :=(_ggbc /8)+1;_cbcf =8*_acef ;var _dec int ;for _bfad =_abed +_acef ;_cbcf < _gbbe ;_bfad ,_cbcf =_bfad +1,_cbcf +8{if _dfb ,_dee =_bceb .GetByte (_bfad );_dee !=nil {return _ddc ,false ,_g .Wrap (_dee ,_adgc ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _dfb ==0{continue ;};for _dec =0;_dec < 8&&_cbcf < _gbbe ;_dec ,_cbcf =_dec +1,_cbcf +1{if _bceb .GetPixel (_cbcf ,_fdgf ){_ddc .X =_cbcf ;_ddc .Y =_fdgf ;return _ddc ,true ,nil ;};};};for _fgfc :=_fdgf +1;_fgfc < _gbff ;_fgfc ++{_abed =_fgfc *_dac ;for _bfad ,_cbcf =_abed ,0;_cbcf < _gbbe ;_bfad ,_cbcf =_bfad +1,_cbcf +8{if _dfb ,_dee =_bceb .GetByte (_bfad );_dee !=nil {return _ddc ,false ,_g .Wrap (_dee ,_adgc ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _dfb ==0{continue ;};for _dec =0;_dec < 8&&_cbcf < _gbbe ;_dec ,_cbcf =_dec +1,_cbcf +1{if _bceb .GetPixel (_cbcf ,_fgfc ){_ddc .X =_cbcf ;_ddc .Y =_fgfc ;return _ddc ,true ,nil ;};};};};return _ddc ,false ,nil ;};func (_dfdc *byHeight )Len ()int {return len (_dfdc .Values )};func _ccf (_cfb *Bitmap ,_acd ...int )(_gcc *Bitmap ,_geb error ){const _gab ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _cfb ==nil {return nil ,_g .Error (_gab ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_acd )==0||len (_acd )> 4{return nil ,_g .Error (_gab ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _acd [0]<=0{_afe .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_gcc ,_geb =_fcad (nil ,_cfb );if _geb !=nil {return nil ,_g .Wrap (_geb ,_gab ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _gcc ,nil ;};_caf :=_fgac ();_gcc =_cfb ;for _cfga ,_fgc :=range _acd {if _fgc <=0{break ;};_gcc ,_geb =_acga (_gcc ,_fgc ,_caf );if _geb !=nil {return nil ,_g .Wrapf (_geb ,_gab ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_cfga );};};return _gcc ,nil ;};func (_fbdb *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gdcc *Bitmaps ,_abgg *Boxes ,_eccdd error ){const _geac ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _fbdb ==nil {return nil ,nil ,_g .Error (_geac ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_g .Error (_geac ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _fbdb .Zero (){_abgg =&Boxes {};_gdcc =&Bitmaps {};return _gdcc ,_abgg ,nil ;};switch components {case ComponentConn :_gdcc =&Bitmaps {};if _abgg ,_eccdd =_fbdb .ConnComponents (_gdcc ,8);_eccdd !=nil {return nil ,nil ,_g .Wrap (_eccdd ,_geac ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_daa ,_abcc :=MorphSequence (_fbdb ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _abcc !=nil {return nil ,nil ,_g .Wrap (_abcc ,_geac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _afe .Log .IsLogLevel (_afe .LogLevelTrace ){_afe .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_daa .String ());};_effb :=&Bitmaps {};_abgg ,_abcc =_daa .ConnComponents (_effb ,8);if _abcc !=nil {return nil ,nil ,_g .Wrap (_abcc ,_geac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _afe .Log .IsLogLevel (_afe .LogLevelTrace ){_afe .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_effb .String ());};if _gdcc ,_abcc =_effb .ClipToBitmap (_fbdb );_abcc !=nil {return nil ,nil ,_g .Wrap (_abcc ,_geac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_bcgg :=1;var _dgff *Bitmap ;switch {case _fbdb .XResolution <=200:_dgff =_fbdb ;case _fbdb .XResolution <=400:_bcgg =2;_dgff ,_eccdd =_ccf (_fbdb ,1,0,0,0);if _eccdd !=nil {return nil ,nil ,_g .Wrap (_eccdd ,_geac ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_bcgg =4;_dgff ,_eccdd =_ccf (_fbdb ,1,1,0,0);if _eccdd !=nil {return nil ,nil ,_g .Wrap (_eccdd ,_geac ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_ddgc ,_ ,_dcfa :=_bgef (_dgff );if _dcfa !=nil {return nil ,nil ,_g .Wrap (_dcfa ,_geac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_ddf ,_dcfa :=_fabgg (_ddgc ,_bcgg );if _dcfa !=nil {return nil ,nil ,_g .Wrap (_dcfa ,_geac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_fced :=&Bitmaps {};if _abgg ,_dcfa =_ddf .ConnComponents (_fced ,4);_dcfa !=nil {return nil ,nil ,_g .Wrap (_dcfa ,_geac ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _gdcc ,_dcfa =_fced .ClipToBitmap (_fbdb );_dcfa !=nil {return nil ,nil ,_g .Wrap (_dcfa ,_geac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gdcc ,_eccdd =_gdcc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _eccdd !=nil {return nil ,nil ,_g .Wrap (_eccdd ,_geac ,"");};_abgg ,_eccdd =_abgg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _eccdd !=nil {return nil ,nil ,_g .Wrap (_eccdd ,_geac ,"");};return _gdcc ,_abgg ,nil ;};func (_fbff *Bitmap )CountPixels ()int {return _fbff .countPixels ()};func _agbf (_gbbg ,_bfeaa int ,_aebgd string )*Selection {_gaca :=&Selection {Height :_gbbg ,Width :_bfeaa ,Name :_aebgd };_gaca .Data =make ([][]SelectionValue ,_gbbg );for _fccab :=0;_fccab < _gbbg ;_fccab ++{_gaca .Data [_fccab ]=make ([]SelectionValue ,_bfeaa );};return _gaca ;};var (_gdd =_ec ();_bfed =_aeb ();_eebg =_bdbg (););func (_gfacc *ClassedPoints )Less (i ,j int )bool {return _gfacc ._fedd (i ,j )};func (_fcg *Bitmap )GetVanillaData ()[]byte {if _fcg .Color ==Chocolate {_fcg .inverseData ();};return _fcg .Data ;};func TstFrameBitmapData ()[]byte {return _aecf .Data };type Getter interface{GetBitmap ()*Bitmap ;};func _gdca (_cbba ...MorphProcess )(_fcd error ){const _cebce ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _fbcc ,_beg int ;for _aebb ,_dgge :=range _cbba {if _fcd =_dgge .verify (_aebb ,&_fbcc ,&_beg );_fcd !=nil {return _g .Wrap (_fcd ,_cebce ,"");};};if _beg !=0&&_fbcc !=0{return _g .Error (_cebce ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func (_dcdcb *Selection )setOrigin (_bgba ,_aefaa int ){_dcdcb .Cy ,_dcdcb .Cx =_bgba ,_aefaa };type SizeComparison int ;func (_cebd *Bitmap )connComponentsBitmapsBB (_ggab *Bitmaps ,_fddd int )(_ffg *Boxes ,_deac error ){const _gdfa ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _fddd !=4&&_fddd !=8{return nil ,_g .Error (_gdfa ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ggab ==nil {return nil ,_g .Error (_gdfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_ggab .Values )> 0{return nil ,_g .Error (_gdfa ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _cebd .Zero (){return &Boxes {},nil ;};var (_cege ,_bde ,_gacf ,_bfcf *Bitmap ;);_cebd .setPadBits (0);if _cege ,_deac =_fcad (nil ,_cebd );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"\u0062\u006d\u0031");};if _bde ,_deac =_fcad (nil ,_cebd );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"\u0062\u006d\u0032");};_gedc :=&_b .Stack {};_gedc .Aux =&_b .Stack {};_ffg =&Boxes {};var (_gabed ,_cefd int ;_cag _c .Point ;_agad bool ;_feg *_c .Rectangle ;);for {if _cag ,_agad ,_deac =_cege .nextOnPixel (_gabed ,_cefd );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"");};if !_agad {break ;};if _feg ,_deac =_fccbb (_cege ,_gedc ,_cag .X ,_cag .Y ,_fddd );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"");};if _deac =_ffg .Add (_feg );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"");};if _gacf ,_deac =_cege .clipRectangle (_feg ,nil );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"\u0062\u006d\u0033");};if _bfcf ,_deac =_bde .clipRectangle (_feg ,nil );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"\u0062\u006d\u0034");};if _ ,_deac =_gdfg (_gacf ,_gacf ,_bfcf );_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _deac =_bde .RasterOperation (_feg .Min .X ,_feg .Min .Y ,_feg .Dx (),_feg .Dy (),PixSrcXorDst ,_gacf ,0,0);_deac !=nil {return nil ,_g .Wrap (_deac ,_gdfa ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_ggab .AddBitmap (_gacf );_gabed =_cag .X ;_cefd =_cag .Y ;};_ggab .Boxes =*_ffg ;return _ffg ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bfe ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_ebaa :=_gaaf (width ,height );_ebaa .Data =data ;if len (data )< height *_ebaa .RowStride {return nil ,_g .Errorf (_bfe ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_ebaa .RowStride );};return _ebaa ,nil ;};func (_bfagf *ClassedPoints )ySortFunction ()func (_bgdcd int ,_dcab int )bool {return func (_bbed ,_gddea int )bool {return _bfagf .YAtIndex (_bbed )< _bfagf .YAtIndex (_gddea )};};type shift int ;func _fcad (_acbg ,_dded *Bitmap )(*Bitmap ,error ){if _dded ==nil {return nil ,_g .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dded ==_acbg {return _acbg ,nil ;};if _acbg ==nil {_acbg =_dded .createTemplate ();copy (_acbg .Data ,_dded .Data );return _acbg ,nil ;};_accd :=_acbg .resizeImageData (_dded );if _accd !=nil {return nil ,_g .Wrap (_accd ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_acbg .Text =_dded .Text ;copy (_acbg .Data ,_dded .Data );return _acbg ,nil ;};func _ffe (_bac uint ,_gbbea byte )byte {return _gbbea >>_bac <<_bac };func (_dde *Bitmap )InverseData (){_dde .inverseData ()};func (_bce *Bitmap )SetPixel (x ,y int ,pixel byte )error {_fac :=_bce .GetByteIndex (x ,y );if _fac > len (_bce .Data )-1{return _g .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_fac );};_cgb :=_bce .GetBitOffset (x );_dcg :=uint (7-_cgb );_faec :=_bce .Data [_fac ];var _ceg byte ;if pixel ==1{_ceg =_faec |(pixel &0x01<<_dcg );}else {_ceg =_faec &^(1<<_dcg );};_bce .Data [_fac ]=_ceg ;return nil ;};func _ddea (_decd ,_cfae byte ,_bace CombinationOperator )byte {switch _bace {case CmbOpOr :return _cfae |_decd ;case CmbOpAnd :return _cfae &_decd ;case CmbOpXor :return _cfae ^_decd ;case CmbOpXNor :return ^(_cfae ^_decd );case CmbOpNot :return ^(_cfae );default:return _cfae ;};};func (_fge *Bitmap )inverseData (){if _dcae :=_fge .RasterOperation (0,0,_fge .Width ,_fge .Height ,PixNotDst ,nil ,0,0);_dcae !=nil {_afe .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_dcae );};if _fge .Color ==Chocolate {_fge .Color =Vanilla ;}else {_fge .Color =Chocolate ;};};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _aefa ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_gdga ,_fedc :=p1 .Width ,p1 .Height ;_afdf ,_fcgg :=p3 .Width ,p3 .Height ;if _b .Abs (_gdga -_afdf )> maxDiffW {return false ,nil ;};if _b .Abs (_fedc -_fcgg )> maxDiffH {return false ,nil ;};_ddee :=int (delX +_b .Sign (delX )*0.5);_agf :=int (delY +_b .Sign (delY )*0.5);var _gacd error ;_cdag :=p1 .CreateTemplate ();if _gacd =_cdag .RasterOperation (0,0,_gdga ,_fedc ,PixSrc ,p1 ,0,0);_gacd !=nil {return false ,_g .Wrap (_gacd ,_aefa ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gacd =_cdag .RasterOperation (_ddee ,_agf ,_gdga ,_fedc ,PixNotSrcAndDst ,p4 ,0,0);_gacd !=nil {return false ,_g .Wrap (_gacd ,_aefa ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _cdag .Zero (){return false ,nil ;};if _gacd =_cdag .RasterOperation (_ddee ,_agf ,_afdf ,_fcgg ,PixSrc ,p3 ,0,0);_gacd !=nil {return false ,_g .Wrap (_gacd ,_aefa ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gacd =_cdag .RasterOperation (0,0,_afdf ,_fcgg ,PixNotSrcAndDst ,p2 ,0,0);_gacd !=nil {return false ,_g .Wrap (_gacd ,_aefa ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _cdag .Zero (),nil ;};func TstImageBitmapData ()[]byte {return _dgfd .Data };type BoundaryCondition int ;func NewClassedPoints (points *Points ,classes _b .IntSlice )(*ClassedPoints ,error ){const _gcaca ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_g .Error (_gcaca ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_g .Error (_gcaca ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_acgcf :=&ClassedPoints {Points :points ,IntSlice :classes };if _daag :=_acgcf .validateIntSlice ();_daag !=nil {return nil ,_g .Wrap (_daag ,_gcaca ,"");};return _acgcf ,nil ;};func (_cbca *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ffgc (_cbca ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_abae MorphProcess )getWidthHeight ()(_bdaf ,_gfac int ){return _abae .Arguments [0],_abae .Arguments [1];};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _dcge (d ,s ,sel )};func (_edbfe *Bitmaps )WidthSorter ()func (_ccga ,_aacgg int )bool {return func (_dedf ,_ebfab int )bool {return _edbfe .Values [_dedf ].Width < _edbfe .Values [_ebfab ].Width };};func (_gdbc *Selection )findMaxTranslations ()(_gdcb ,_gcaae ,_degb ,_gfbf int ){for _ddb :=0;_ddb < _gdbc .Height ;_ddb ++{for _ddae :=0;_ddae < _gdbc .Width ;_ddae ++{if _gdbc .Data [_ddb ][_ddae ]==SelHit {_gdcb =_ffa (_gdcb ,_gdbc .Cx -_ddae );_gcaae =_ffa (_gcaae ,_gdbc .Cy -_ddb );_degb =_ffa (_degb ,_ddae -_gdbc .Cx );_gfbf =_ffa (_gfbf ,_ddb -_gdbc .Cy );};};};return _gdcb ,_gcaae ,_degb ,_gfbf ;};func _ec ()(_ced [256]uint16 ){for _gad :=0;_gad < 256;_gad ++{if _gad &0x01!=0{_ced [_gad ]|=0x3;};if _gad &0x02!=0{_ced [_gad ]|=0xc;};if _gad &0x04!=0{_ced [_gad ]|=0x30;};if _gad &0x08!=0{_ced [_gad ]|=0xc0;};if _gad &0x10!=0{_ced [_gad ]|=0x300;};if _gad &0x20!=0{_ced [_gad ]|=0xc00;};if _gad &0x40!=0{_ced [_gad ]|=0x3000;};if _gad &0x80!=0{_ced [_gad ]|=0xc000;};};return _ced ;};func (_gfad *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _gcge ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _gfad ==nil {return nil ,_g .Error (_gcge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_gfad .Values )-1{return nil ,_g .Errorf (_gcge ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gfad .Values [i ],nil ;};func _acga (_cgg *Bitmap ,_fba int ,_bcc []byte )(_gfgc *Bitmap ,_fcb error ){const _ed ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _cgg ==nil {return nil ,_g .Error (_ed ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _fba < 1||_fba > 4{return nil ,_g .Error (_ed ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cgg .Height <=1{return nil ,_g .Errorf (_ed ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_cgg .Height );};_gfgc =New (_cgg .Width /2,_cgg .Height /2);if _bcc ==nil {_bcc =_fgac ();};_de :=_bbbd (_cgg .RowStride ,2*_gfgc .RowStride );switch _fba {case 1:_fcb =_gaa (_cgg ,_gfgc ,_fba ,_bcc ,_de );case 2:_fcb =_gcce (_cgg ,_gfgc ,_fba ,_bcc ,_de );case 3:_fcb =_fdd (_cgg ,_gfgc ,_fba ,_bcc ,_de );case 4:_fcb =_cea (_cgg ,_gfgc ,_fba ,_bcc ,_de );};if _fcb !=nil {return nil ,_fcb ;};return _gfgc ,nil ;};func (_aeff *Bitmap )setFourBytes (_gcb int ,_fdf uint32 )error {if _gcb +3> len (_aeff .Data )-1{return _g .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_gcb );};_aeff .Data [_gcb ]=byte ((_fdf &0xff000000)>>24);_aeff .Data [_gcb +1]=byte ((_fdf &0xff0000)>>16);_aeff .Data [_gcb +2]=byte ((_fdf &0xff00)>>8);_aeff .Data [_gcb +3]=byte (_fdf &0xff);return nil ;};func _eaaa (_aecd *_b .Stack )(_cbfc *fillSegment ,_aceg error ){const _feaa ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _aecd ==nil {return nil ,_g .Error (_feaa ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _aecd .Aux ==nil {return nil ,_g .Error (_feaa ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_bdgb ,_dfbbc :=_aecd .Pop ();if !_dfbbc {return nil ,nil ;};_dfeg ,_dfbbc :=_bdgb .(*fillSegment );if !_dfbbc {return nil ,_g .Error (_feaa ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_cbfc =&fillSegment {_dfeg ._gcaa ,_dfeg ._acgd ,_dfeg ._edgg +_dfeg ._bcfec ,_dfeg ._bcfec };_aecd .Aux .Push (_dfeg );return _cbfc ,nil ;};func Rect (x ,y ,w ,h int )(*_c .Rectangle ,error ){const _gdbd ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_g .Errorf (_gdbd ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_g .Error (_gdbd ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_fgb :=_c .Rect (x ,y ,x +w ,y +h );return &_fgb ,nil ;};func (_baa *Bitmap )connComponentsBB (_agbd int )(_adge *Boxes ,_bfbe error ){const _dcfd ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _agbd !=4&&_agbd !=8{return nil ,_g .Error (_dcfd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _baa .Zero (){return &Boxes {},nil ;};_baa .setPadBits (0);_bfbg ,_bfbe :=_fcad (nil ,_baa );if _bfbe !=nil {return nil ,_g .Wrap (_bfbe ,_dcfd ,"\u0062\u006d\u0031");};_bgda :=&_b .Stack {};_bgda .Aux =&_b .Stack {};_adge =&Boxes {};var (_cebb ,_bbbdc int ;_efe _c .Point ;_feeag bool ;_cbd *_c .Rectangle ;);for {if _efe ,_feeag ,_bfbe =_bfbg .nextOnPixel (_bbbdc ,_cebb );_bfbe !=nil {return nil ,_g .Wrap (_bfbe ,_dcfd ,"");};if !_feeag {break ;};if _cbd ,_bfbe =_fccbb (_bfbg ,_bgda ,_efe .X ,_efe .Y ,_agbd );_bfbe !=nil {return nil ,_g .Wrap (_bfbe ,_dcfd ,"");};if _bfbe =_adge .Add (_cbd );_bfbe !=nil {return nil ,_g .Wrap (_bfbe ,_dcfd ,"");};_bbbdc =_efe .X ;_cebb =_efe .Y ;};return _adge ,nil ;};func (_eaab *Bitmaps )AddBitmap (bm *Bitmap ){_eaab .Values =append (_eaab .Values ,bm )};func (_aff *Bitmap )setPadBits (_dff int ){_dabg :=8-_aff .Width %8;if _dabg ==8{return ;};_eea :=_aff .Width /8;_agbc :=_bbeg [_dabg ];if _dff ==0{_agbc ^=_agbc ;};var _efa int ;for _ddec :=0;_ddec < _aff .Height ;_ddec ++{_efa =_ddec *_aff .RowStride +_eea ;if _dff ==0{_aff .Data [_efa ]&=_agbc ;}else {_aff .Data [_efa ]|=_agbc ;};};};func (_cdcec *byHeight )Swap (i ,j int ){_cdcec .Values [i ],_cdcec .Values [j ]=_cdcec .Values [j ],_cdcec .Values [i ];if _cdcec .Boxes !=nil {_cdcec .Boxes [i ],_cdcec .Boxes [j ]=_cdcec .Boxes [j ],_cdcec .Boxes [i ];};};func (_bddb *byHeight )Less (i ,j int )bool {return _bddb .Values [i ].Height < _bddb .Values [j ].Height };func (_caga *Bitmaps )Size ()int {return len (_caga .Values )};func (_abcd *Bitmap )GetBitOffset (x int )int {return x &0x07};type Point struct{X ,Y float32 ;};func (_fefc *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _fdgb ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _fefc ==nil {return nil ,_g .Error (_fdgb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fefc .Values )-1{return nil ,_g .Errorf (_fdgb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fefc .Values [i ],nil ;};func _bdbg ()(_eca [256]uint64 ){for _fcc :=0;_fcc < 256;_fcc ++{if _fcc &0x01!=0{_eca [_fcc ]|=0xff;};if _fcc &0x02!=0{_eca [_fcc ]|=0xff00;};if _fcc &0x04!=0{_eca [_fcc ]|=0xff0000;};if _fcc &0x08!=0{_eca [_fcc ]|=0xff000000;};if _fcc &0x10!=0{_eca [_fcc ]|=0xff00000000;};if _fcc &0x20!=0{_eca [_fcc ]|=0xff0000000000;};if _fcc &0x40!=0{_eca [_fcc ]|=0xff000000000000;};if _fcc &0x80!=0{_eca [_fcc ]|=0xff00000000000000;};};return _eca ;};func (_edgd MorphProcess )verify (_egdc int ,_aacg ,_gefb *int )error {const _acgf ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _edgd .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_edgd .Arguments )!=2{return _g .Error (_acgf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_acge ,_ggfgg :=_edgd .getWidthHeight ();if _acge <=0||_ggfgg <=0{return _g .Error (_acgf ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_baba :=len (_edgd .Arguments );*_aacg +=_baba ;if _baba < 1||_baba > 4{return _g .Error (_acgf ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _gbffgb :=0;_gbffgb < _baba ;_gbffgb ++{if _edgd .Arguments [_gbffgb ]< 1||_edgd .Arguments [_gbffgb ]> 4{return _g .Error (_acgf ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_edgd .Arguments )==0{return _g .Error (_acgf ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dbba :=_edgd .Arguments [0];if _dbba !=2&&_dbba !=4&&_dbba !=8{return _g .Error (_acgf ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_aacg -=_eaebb [_dbba /4];case MopAddBorder :if len (_edgd .Arguments )==0{return _g .Error (_acgf ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeef :=_edgd .Arguments [0];if _egdc > 0{return _g .Error (_acgf ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _aeef < 1{return _g .Error (_acgf ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_gefb =_aeef ;};return nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_bagfg *Bitmaps )AddBox (box *_c .Rectangle ){_bagfg .Boxes =append (_bagfg .Boxes ,box )};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dgfe float64 ,_eec error ){const _add ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_g .Error (_add ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_g .Error (_add ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_g .Error (_add ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_ebded ,_ecgec :=bm1 .Width ,bm1 .Height ;_afbdf ,_bgfe :=bm2 .Width ,bm2 .Height ;_afadd :=_ddce (_ebded -_afbdf );if _afadd > maxDiffW {return 0,nil ;};_aabg :=_ddce (_ecgec -_bgfe );if _aabg > maxDiffH {return 0,nil ;};var _bdgf ,_bbcc int ;if delX >=0{_bdgf =int (delX +0.5);}else {_bdgf =int (delX -0.5);};if delY >=0{_bbcc =int (delY +0.5);}else {_bbcc =int (delY -0.5);};_aaf :=_ffa (_bbcc ,0);_adcg :=_bbbd (_bgfe +_bbcc ,_ecgec );_aced :=bm1 .RowStride *_aaf ;_eeb :=bm2 .RowStride *(_aaf -_bbcc );_dgede :=_ffa (_bdgf ,0);_afade :=_bbbd (_afbdf +_bdgf ,_ebded );_aec :=bm2 .RowStride ;var _gadf ,_fbffe int ;if _bdgf >=8{_gadf =_bdgf >>3;_aced +=_gadf ;_dgede -=_gadf <<3;_afade -=_gadf <<3;_bdgf &=7;}else if _bdgf <=-8{_fbffe =-((_bdgf +7)>>3);_eeb +=_fbffe ;_aec -=_fbffe ;_bdgf +=_fbffe <<3;};if _dgede >=_afade ||_aaf >=_adcg {return 0,nil ;};_eag :=(_afade +7)>>3;var (_bccad ,_degg ,_cge byte ;_adcf ,_cfdg ,_aaeg int ;);switch {case _bdgf ==0:for _aaeg =_aaf ;_aaeg < _adcg ;_aaeg ,_aced ,_eeb =_aaeg +1,_aced +bm1 .RowStride ,_eeb +bm2 .RowStride {for _cfdg =0;_cfdg < _eag ;_cfdg ++{_cge =bm1 .Data [_aced +_cfdg ]&bm2 .Data [_eeb +_cfdg ];_adcf +=tab [_cge ];};};case _bdgf > 0:if _aec < _eag {for _aaeg =_aaf ;_aaeg < _adcg ;_aaeg ,_aced ,_eeb =_aaeg +1,_aced +bm1 .RowStride ,_eeb +bm2 .RowStride {_bccad ,_degg =bm1 .Data [_aced ],bm2 .Data [_eeb ]>>uint (_bdgf );_cge =_bccad &_degg ;_adcf +=tab [_cge ];for _cfdg =1;_cfdg < _aec ;_cfdg ++{_bccad ,_degg =bm1 .Data [_aced +_cfdg ],(bm2 .Data [_eeb +_cfdg ]>>uint (_bdgf ))|(bm2 .Data [_eeb +_cfdg -1]<<uint (8-_bdgf ));_cge =_bccad &_degg ;_adcf +=tab [_cge ];};_bccad =bm1 .Data [_aced +_cfdg ];_degg =bm2 .Data [_eeb +_cfdg -1]<<uint (8-_bdgf );_cge =_bccad &_degg ;_adcf +=tab [_cge ];};}else {for _aaeg =_aaf ;_aaeg < _adcg ;_aaeg ,_aced ,_eeb =_aaeg +1,_aced +bm1 .RowStride ,_eeb +bm2 .RowStride {_bccad ,_degg =bm1 .Data [_aced ],bm2 .Data [_eeb ]>>uint (_bdgf );_cge =_bccad &_degg ;_adcf +=tab [_cge ];for _cfdg =1;_cfdg < _eag ;_cfdg ++{_bccad =bm1 .Data [_aced +_cfdg ];_degg =(bm2 .Data [_eeb +_cfdg ]>>uint (_bdgf ))|(bm2 .Data [_eeb +_cfdg -1]<<uint (8-_bdgf ));_cge =_bccad &_degg ;_adcf +=tab [_cge ];};};};default:if _eag < _aec {for _aaeg =_aaf ;_aaeg < _adcg ;_aaeg ,_aced ,_eeb =_aaeg +1,_aced +bm1 .RowStride ,_eeb +bm2 .RowStride {for _cfdg =0;_cfdg < _eag ;_cfdg ++{_bccad =bm1 .Data [_aced +_cfdg ];_degg =bm2 .Data [_eeb +_cfdg ]<<uint (-_bdgf );_degg |=bm2 .Data [_eeb +_cfdg +1]>>uint (8+_bdgf );_cge =_bccad &_degg ;_adcf +=tab [_cge ];};};}else {for _aaeg =_aaf ;_aaeg < _adcg ;_aaeg ,_aced ,_eeb =_aaeg +1,_aced +bm1 .RowStride ,_eeb +bm2 .RowStride {for _cfdg =0;_cfdg < _eag -1;_cfdg ++{_bccad =bm1 .Data [_aced +_cfdg ];_degg =bm2 .Data [_eeb +_cfdg ]<<uint (-_bdgf );_degg |=bm2 .Data [_eeb +_cfdg +1]>>uint (8+_bdgf );_cge =_bccad &_degg ;_adcf +=tab [_cge ];};_bccad =bm1 .Data [_aced +_cfdg ];_degg =bm2 .Data [_eeb +_cfdg ]<<uint (-_bdgf );_cge =_bccad &_degg ;_adcf +=tab [_cge ];};};};_dgfe =float64 (_adcf )*float64 (_adcf )/(float64 (area1 )*float64 (area2 ));return _dgfe ,nil ;};func (_bccf *ClassedPoints )SortByY (){_bccf ._fedd =_bccf .ySortFunction ();_af .Sort (_bccf )};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _fcad (d ,s )};var (_gfcf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_bbeg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _ggeb ()[]int {_efbd :=make ([]int ,256);for _bgag :=0;_bgag <=0xff;_bgag ++{_bgbd :=byte (_bgag );_efbd [_bgbd ]=int (_bgbd &0x1)+(int (_bgbd >>1)&0x1)+(int (_bgbd >>2)&0x1)+(int (_bgbd >>3)&0x1)+(int (_bgbd >>4)&0x1)+(int (_bgbd >>5)&0x1)+(int (_bgbd >>6)&0x1)+(int (_bgbd >>7)&0x1);};return _efbd ;};func TstFrameBitmap ()*Bitmap {return _aecf .Copy ()};func (_efad *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_cebe *Boxes ,_gbcg error ){const _dbae ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _efad ==nil {return nil ,_g .Error (_dbae ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_g .Error (_dbae ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _cebe ,_gbcg =_efad .connComponentsBB (connectivity );_gbcg !=nil {return nil ,_g .Wrap (_gbcg ,_dbae ,"");};}else {if _cebe ,_gbcg =_efad .connComponentsBitmapsBB (bms ,connectivity );_gbcg !=nil {return nil ,_g .Wrap (_gbcg ,_dbae ,"");};};return _cebe ,nil ;};func _ffa (_aba ,_dbcd int )int {if _aba > _dbcd {return _aba ;};return _dbcd ;};func (_eadec *Bitmaps )CountPixels ()*_b .NumSlice {_bacb :=&_b .NumSlice {};for _ ,_bgca :=range _eadec .Values {_bacb .AddInt (_bgca .CountPixels ());};return _bacb ;};func _gage (_fcfg ,_bcbd *Bitmap ,_cgcf ,_gaafa int )(*Bitmap ,error ){const _fbbf ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _bcbd ==nil {return nil ,_g .Error (_fbbf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cgcf < 1||_gaafa < 1{return nil ,_g .Error (_fbbf ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _cgcf ==1&&_gaafa ==1{_fccb ,_eagc :=_fcad (_fcfg ,_bcbd );if _eagc !=nil {return nil ,_g .Wrap (_eagc ,_fbbf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fccb ,nil ;};if _cgcf ==1||_gaafa ==1{_eaef :=SelCreateBrick (_gaafa ,_cgcf ,_gaafa /2,_cgcf /2,SelHit );_ffdgd ,_cead :=_edda (_fcfg ,_bcbd ,_eaef );if _cead !=nil {return nil ,_g .Wrap (_cead ,_fbbf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ffdgd ,nil ;};_fgef :=SelCreateBrick (1,_cgcf ,0,_cgcf /2,SelHit );_effa :=SelCreateBrick (_gaafa ,1,_gaafa /2,0,SelHit );_eade ,_gdde :=_edda (nil ,_bcbd ,_fgef );if _gdde !=nil {return nil ,_g .Wrap (_gdde ,_fbbf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_fcfg ,_gdde =_edda (_fcfg ,_eade ,_effa );if _gdde !=nil {return nil ,_g .Wrap (_gdde ,_fbbf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fcfg ,nil ;};func (_bgdef *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cdff *Boxes ,_ceca error ){const _aegd ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _bgdef ==nil {return nil ,_g .Error (_aegd ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_bgdef )==0{return _bgdef ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_aegd ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_g .Errorf (_aegd ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_gfbg :=_bgdef .makeSizeIndicator (width ,height ,tp ,relation );_ggfa ,_ceca :=_bgdef .selectWithIndicator (_gfbg );if _ceca !=nil {return nil ,_g .Wrap (_ceca ,_aegd ,"");};return _ggfa ,nil ;};func (_gbd *Bitmap )String ()string {var _acdb ="\u000a";for _bbd :=0;_bbd < _gbd .Height ;_bbd ++{var _gce string ;for _afdg :=0;_afdg < _gbd .Width ;_afdg ++{_ebge :=_gbd .GetPixel (_afdg ,_bbd );if _ebge {_gce +="\u0031";}else {_gce +="\u0030";};};_acdb +=_gce +"\u000a";};return _acdb ;};func _badg (_fdceb *Bitmap ,_bdca ,_fbaae ,_ffcd ,_dfcg int ,_bgga RasterOperator ){if _bdca < 0{_ffcd +=_bdca ;_bdca =0;};_fbga :=_bdca +_ffcd -_fdceb .Width ;if _fbga > 0{_ffcd -=_fbga ;};if _fbaae < 0{_dfcg +=_fbaae ;_fbaae =0;};_bead :=_fbaae +_dfcg -_fdceb .Height ;if _bead > 0{_dfcg -=_bead ;};if _ffcd <=0||_dfcg <=0{return ;};if (_bdca &7)==0{_dabb (_fdceb ,_bdca ,_fbaae ,_ffcd ,_dfcg ,_bgga );}else {_abbe (_fdceb ,_bdca ,_fbaae ,_ffcd ,_dfcg ,_bgga );};};func (_eagb *ClassedPoints )validateIntSlice ()error {const _dadfd ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_abfe :=range _eagb .IntSlice {if _abfe >=(_eagb .Points .Size ()){return _g .Errorf (_dadfd ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_abfe ,_eagb .Points .Size ());};};return nil ;};var _ _af .Interface =&ClassedPoints {};func TstWSymbol (t *_ac .T ,scale ...int )*Bitmap {_ccgaa ,_bcbdb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_bcbdb );return TstGetScaledSymbol (t ,_ccgaa ,scale ...);};const (Vanilla Color =iota ;Chocolate ;);func (_bcgb *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _ggdc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_bcgb .IntSlice .Size (){return 0,_g .Errorf (_ggdc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_bcgb .YAtIndex (i )),nil ;};func (_ecea *ClassedPoints )Len ()int {return _ecea .IntSlice .Size ()};var _eaebb =[5]int {1,2,3,0,4};func (_agcf *Bitmaps )selectByIndicator (_bbgge *_b .NumSlice )(_geag *Bitmaps ,_babc error ){const _bcde ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _agcf ==nil {return nil ,_g .Error (_bcde ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _bbgge ==nil {return nil ,_g .Error (_bcde ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_agcf .Values )==0{return _agcf ,nil ;};if len (*_bbgge )!=len (_agcf .Values ){return nil ,_g .Errorf (_bcde ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_bbgge ),len (_agcf .Values ));};var _dadb ,_gbfe ,_ffcf int ;for _gbfe =0;_gbfe < len (*_bbgge );_gbfe ++{if _dadb ,_babc =_bbgge .GetInt (_gbfe );_babc !=nil {return nil ,_g .Wrap (_babc ,_bcde ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _dadb ==1{_ffcf ++;};};if _ffcf ==len (_agcf .Values ){return _agcf ,nil ;};_geag =&Bitmaps {};_gbgfa :=len (_agcf .Values )==len (_agcf .Boxes );for _gbfe =0;_gbfe < len (*_bbgge );_gbfe ++{if _dadb =int ((*_bbgge )[_gbfe ]);_dadb ==0{continue ;};_geag .Values =append (_geag .Values ,_agcf .Values [_gbfe ]);if _gbgfa {_geag .Boxes =append (_geag .Boxes ,_agcf .Boxes [_gbfe ]);};};return _geag ,nil ;};func (_gbf *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gbf .Width ,Height :_gbf .Height ,RowStride :_gbf .RowStride ,Color :_gbf .Color ,Text :_gbf .Text ,BitmapNumber :_gbf .BitmapNumber ,Special :_gbf .Special ,Data :make ([]byte ,len (_gbf .Data ))};};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _ddea (oldByte ,newByte ,op );};func TstNSymbol (t *_ac .T ,scale ...int )*Bitmap {_egdg ,_bbgea :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_f .NoError (t ,_bbgea );return TstGetScaledSymbol (t ,_egdg ,scale ...);};func (_cgfcd *Bitmaps )SortByWidth (){_cgga :=(*byWidth )(_cgfcd );_af .Sort (_cgga )};func (_cbgcc *Bitmaps )String ()string {_cbce :=_gf .Builder {};for _ ,_fcge :=range _cbgcc .Values {_cbce .WriteString (_fcge .String ());_cbce .WriteRune ('\n');};return _cbce .String ();};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ffgc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _cfge (_cadeb ,_abfd *Bitmap ,_fdef *Selection )(*Bitmap ,error ){const _dgdc ="\u006f\u0070\u0065\u006e";var _ffc error ;_cadeb ,_ffc =_fged (_cadeb ,_abfd ,_fdef );if _ffc !=nil {return nil ,_g .Wrap (_ffc ,_dgdc ,"");};_dgb ,_ffc :=_edda (nil ,_abfd ,_fdef );if _ffc !=nil {return nil ,_g .Wrap (_ffc ,_dgdc ,"");};_ ,_ffc =_dcge (_cadeb ,_dgb ,_fdef );if _ffc !=nil {return nil ,_g .Wrap (_ffc ,_dgdc ,"");};return _cadeb ,nil ;};type SizeSelection int ;func (_ecgeg *Bitmap )setBit (_ebbd int ){_ecgeg .Data [(_ebbd >>3)]|=0x80>>uint (_ebbd &7)};func (_dabe *Bitmaps )HeightSorter ()func (_gfgb ,_gdgb int )bool {return func (_fgbdf ,_efag int )bool {_dgdb :=_dabe .Values [_fgbdf ].Height < _dabe .Values [_efag ].Height ;_afe .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_dabe .Values [_fgbdf ].Height ,_dabe .Values [_efag ].Height ,_dgdb );return _dgdb ;};};var (_aecf *Bitmap ;_dgfd *Bitmap ;);func _edda (_daec ,_ffff *Bitmap ,_fbgc *Selection )(*Bitmap ,error ){const _afce ="\u0065\u0072\u006fd\u0065";var (_gfaca error ;_bbab *Bitmap ;);_daec ,_gfaca =_bfeg (_daec ,_ffff ,_fbgc ,&_bbab );if _gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"");};if _gfaca =_daec .setAll ();_gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"");};var _feec SelectionValue ;for _ccdb :=0;_ccdb < _fbgc .Height ;_ccdb ++{for _cbab :=0;_cbab < _fbgc .Width ;_cbab ++{_feec =_fbgc .Data [_ccdb ][_cbab ];if _feec ==SelHit {_gfaca =_ffgc (_daec ,_fbgc .Cx -_cbab ,_fbgc .Cy -_ccdb ,_ffff .Width ,_ffff .Height ,PixSrcAndDst ,_bbab ,0,0);if _gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"");};};};};if MorphBC ==SymmetricMorphBC {return _daec ,nil ;};_gcdg ,_ecga ,_abfb ,_dfeb :=_fbgc .findMaxTranslations ();if _gcdg > 0{if _gfaca =_daec .RasterOperation (0,0,_gcdg ,_ffff .Height ,PixClr ,nil ,0,0);_gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _abfb > 0{if _gfaca =_daec .RasterOperation (_ffff .Width -_abfb ,0,_abfb ,_ffff .Height ,PixClr ,nil ,0,0);_gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _ecga > 0{if _gfaca =_daec .RasterOperation (0,0,_ffff .Width ,_ecga ,PixClr ,nil ,0,0);_gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _dfeb > 0{if _gfaca =_daec .RasterOperation (0,_ffff .Height -_dfeb ,_ffff .Width ,_dfeb ,PixClr ,nil ,0,0);_gfaca !=nil {return nil ,_g .Wrap (_gfaca ,_afce ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _daec ,nil ;};func TstDSymbol (t *_ac .T ,scale ...int )*Bitmap {_ebbaa ,_cccb :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_f .NoError (t ,_cccb );return TstGetScaledSymbol (t ,_ebbaa ,scale ...);};func (_geff *BitmapsArray )AddBitmaps (bm *Bitmaps ){_geff .Values =append (_geff .Values ,bm )};func _cbge (_cbgc *Bitmap ,_facgc ...MorphProcess )(_bfcb *Bitmap ,_baee error ){const _bdba ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _cbgc ==nil {return nil ,_g .Error (_bdba ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_facgc )==0{return nil ,_g .Error (_bdba ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _baee =_gdca (_facgc ...);_baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};var _dddg ,_acefa ,_cgcgg int ;_bfcb =_cbgc .Copy ();for _ ,_ffaf :=range _facgc {switch _ffaf .Operation {case MopDilation :_dddg ,_acefa =_ffaf .getWidthHeight ();_bfcb ,_baee =DilateBrick (nil ,_bfcb ,_dddg ,_acefa );if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};case MopErosion :_dddg ,_acefa =_ffaf .getWidthHeight ();_bfcb ,_baee =_gage (nil ,_bfcb ,_dddg ,_acefa );if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};case MopOpening :_dddg ,_acefa =_ffaf .getWidthHeight ();_bfcb ,_baee =_gggc (nil ,_bfcb ,_dddg ,_acefa );if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};case MopClosing :_dddg ,_acefa =_ffaf .getWidthHeight ();_bfcb ,_baee =_aeefc (nil ,_bfcb ,_dddg ,_acefa );if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};case MopRankBinaryReduction :_bfcb ,_baee =_ccf (_bfcb ,_ffaf .Arguments ...);if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};case MopReplicativeBinaryExpansion :_bfcb ,_baee =_fabgg (_bfcb ,_ffaf .Arguments [0]);if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};case MopAddBorder :_cgcgg =_ffaf .Arguments [0];_bfcb ,_baee =_bfcb .AddBorder (_cgcgg ,0);if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"");};default:return nil ,_g .Error (_bdba ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _cgcgg > 0{_bfcb ,_baee =_bfcb .RemoveBorder (_cgcgg );if _baee !=nil {return nil ,_g .Wrap (_baee ,_bdba ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _bfcb ,nil ;};func (_fdec Points )Get (i int )(Point ,error ){if i > len (_fdec )-1{return Point {},_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fdec [i ],nil ;};func (_gggg *byWidth )Len ()int {return len (_gggg .Values )};func TstImageBitmap ()*Bitmap {return _dgfd .Copy ()};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _gbb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_aedc :=_gaaf (width ,height );_aedc .Data =data ;if _agb :=((width *height )+7)>>3;len (data )< _agb {return nil ,_g .Errorf (_gbb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_agb );};if _cfe :=_aedc .addPadBits ();_cfe !=nil {return nil ,_g .Wrap (_cfe ,_gbb ,"");};return _aedc ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _aaff ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_g .Error (_aaff ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_g .Error (_aaff ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_g .Error (_aaff ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_g .Error (_aaff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_g .Error (_aaff ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_edbf ,_ebe :=bm1 .Width ,bm1 .Height ;_fbae ,_fgbd :=bm2 .Width ,bm2 .Height ;if _b .Abs (_edbf -_fbae )> maxDiffW {return false ,nil ;};if _b .Abs (_ebe -_fgbd )> maxDiffH {return false ,nil ;};_afab :=int (delX +_b .Sign (delX )*0.5);_dbcfa :=int (delY +_b .Sign (delY )*0.5);_dgdd :=int (_fa .Ceil (_fa .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_aebe :=bm2 .RowStride ;_cgfeb :=_ffa (_dbcfa ,0);_fcee :=_bbbd (_fgbd +_dbcfa ,_ebe );_gbgf :=bm1 .RowStride *_cgfeb ;_bbfda :=bm2 .RowStride *(_cgfeb -_dbcfa );var _affb int ;if _fcee <=_ebe {_affb =downcount [_fcee -1];};_edbb :=_ffa (_afab ,0);_gedf :=_bbbd (_fbae +_afab ,_edbf );var _aeeg ,_bbgg int ;if _afab >=8{_aeeg =_afab >>3;_gbgf +=_aeeg ;_edbb -=_aeeg <<3;_gedf -=_aeeg <<3;_afab &=7;}else if _afab <=-8{_bbgg =-((_afab +7)>>3);_bbfda +=_bbgg ;_aebe -=_bbgg ;_afab +=_bbgg <<3;};var (_baac ,_bedc ,_dagfb int ;_cdce ,_bfgg ,_eaeb byte ;);if _edbb >=_gedf ||_cgfeb >=_fcee {return false ,nil ;};_fgdee :=(_gedf +7)>>3;switch {case _afab ==0:for _bedc =_cgfeb ;_bedc < _fcee ;_bedc ,_gbgf ,_bbfda =_bedc +1,_gbgf +bm1 .RowStride ,_bbfda +bm2 .RowStride {for _dagfb =0;_dagfb < _fgdee ;_dagfb ++{_cdce =bm1 .Data [_gbgf +_dagfb ]&bm2 .Data [_bbfda +_dagfb ];_baac +=tab [_cdce ];};if _baac >=_dgdd {return true ,nil ;};if _gdgc :=_baac +downcount [_bedc ]-_affb ;_gdgc < _dgdd {return false ,nil ;};};case _afab > 0&&_aebe < _fgdee :for _bedc =_cgfeb ;_bedc < _fcee ;_bedc ,_gbgf ,_bbfda =_bedc +1,_gbgf +bm1 .RowStride ,_bbfda +bm2 .RowStride {_bfgg =bm1 .Data [_gbgf ];_eaeb =bm2 .Data [_bbfda ]>>uint (_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];for _dagfb =1;_dagfb < _aebe ;_dagfb ++{_bfgg =bm1 .Data [_gbgf +_dagfb ];_eaeb =bm2 .Data [_bbfda +_dagfb ]>>uint (_afab )|bm2 .Data [_bbfda +_dagfb -1]<<uint (8-_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];};_bfgg =bm1 .Data [_gbgf +_dagfb ];_eaeb =bm2 .Data [_bbfda +_dagfb -1]<<uint (8-_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];if _baac >=_dgdd {return true ,nil ;}else if _baac +downcount [_bedc ]-_affb < _dgdd {return false ,nil ;};};case _afab > 0&&_aebe >=_fgdee :for _bedc =_cgfeb ;_bedc < _fcee ;_bedc ,_gbgf ,_bbfda =_bedc +1,_gbgf +bm1 .RowStride ,_bbfda +bm2 .RowStride {_bfgg =bm1 .Data [_gbgf ];_eaeb =bm2 .Data [_bbfda ]>>uint (_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];for _dagfb =1;_dagfb < _fgdee ;_dagfb ++{_bfgg =bm1 .Data [_gbgf +_dagfb ];_eaeb =bm2 .Data [_bbfda +_dagfb ]>>uint (_afab );_eaeb |=bm2 .Data [_bbfda +_dagfb -1]<<uint (8-_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];};if _baac >=_dgdd {return true ,nil ;}else if _baac +downcount [_bedc ]-_affb < _dgdd {return false ,nil ;};};case _fgdee < _aebe :for _bedc =_cgfeb ;_bedc < _fcee ;_bedc ,_gbgf ,_bbfda =_bedc +1,_gbgf +bm1 .RowStride ,_bbfda +bm2 .RowStride {for _dagfb =0;_dagfb < _fgdee ;_dagfb ++{_bfgg =bm1 .Data [_gbgf +_dagfb ];_eaeb =bm2 .Data [_bbfda +_dagfb ]<<uint (-_afab );_eaeb |=bm2 .Data [_bbfda +_dagfb +1]>>uint (8+_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];};if _baac >=_dgdd {return true ,nil ;}else if _ddebf :=_baac +downcount [_bedc ]-_affb ;_ddebf < _dgdd {return false ,nil ;};};case _aebe >=_fgdee :for _bedc =_cgfeb ;_bedc < _fcee ;_bedc ,_gbgf ,_bbfda =_bedc +1,_gbgf +bm1 .RowStride ,_bbfda +bm2 .RowStride {for _dagfb =0;_dagfb < _fgdee ;_dagfb ++{_bfgg =bm1 .Data [_gbgf +_dagfb ];_eaeb =bm2 .Data [_bbfda +_dagfb ]<<uint (-_afab );_eaeb |=bm2 .Data [_bbfda +_dagfb +1]>>uint (8+_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];};_bfgg =bm1 .Data [_gbgf +_dagfb ];_eaeb =bm2 .Data [_bbfda +_dagfb ]<<uint (-_afab );_cdce =_bfgg &_eaeb ;_baac +=tab [_cdce ];if _baac >=_dgdd {return true ,nil ;}else if _baac +downcount [_bedc ]-_affb < _dgdd {return false ,nil ;};};};_gbgc :=float32 (_baac )*float32 (_baac )/(float32 (area1 )*float32 (area2 ));if _gbgc >=scoreThreshold {_afe .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_baac ,_dgdd ,_gbgc ,scoreThreshold );};return false ,nil ;};type byHeight Bitmaps ;func ClipBoxToRectangle (box *_c .Rectangle ,wi ,hi int )(_gcfff *_c .Rectangle ,_dgdg error ){const _fefg ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_g .Error (_fefg ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_g .Error (_fefg ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_cdgf :=*box ;_gcfff =&_cdgf ;if _gcfff .Min .X < 0{_gcfff .Max .X +=_gcfff .Min .X ;_gcfff .Min .X =0;};if _gcfff .Min .Y < 0{_gcfff .Max .Y +=_gcfff .Min .Y ;_gcfff .Min .Y =0;};if _gcfff .Max .X > wi {_gcfff .Max .X =wi ;};if _gcfff .Max .Y > hi {_gcfff .Max .Y =hi ;};return _gcfff ,nil ;};func (_bced *Bitmaps )makeSizeIndicator (_adadf ,_gfaa int ,_abge LocationFilter ,_fdae SizeComparison )(_gbbgg *_b .NumSlice ,_fggc error ){const _bggdb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bced ==nil {return nil ,_g .Error (_bggdb ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _abge {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_bggdb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_abge );};switch _fdae {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_bggdb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_fdae );};_gbbgg =&_b .NumSlice {};var (_accf ,_cfac ,_cedd int ;_dfec *Bitmap ;);for _ ,_dfec =range _bced .Values {_accf =0;_cfac ,_cedd =_dfec .Width ,_dfec .Height ;switch _abge {case LocSelectWidth :if (_fdae ==SizeSelectIfLT &&_cfac < _adadf )||(_fdae ==SizeSelectIfGT &&_cfac > _adadf )||(_fdae ==SizeSelectIfLTE &&_cfac <=_adadf )||(_fdae ==SizeSelectIfGTE &&_cfac >=_adadf )||(_fdae ==SizeSelectIfEQ &&_cfac ==_adadf ){_accf =1;};case LocSelectHeight :if (_fdae ==SizeSelectIfLT &&_cedd < _gfaa )||(_fdae ==SizeSelectIfGT &&_cedd > _gfaa )||(_fdae ==SizeSelectIfLTE &&_cedd <=_gfaa )||(_fdae ==SizeSelectIfGTE &&_cedd >=_gfaa )||(_fdae ==SizeSelectIfEQ &&_cedd ==_gfaa ){_accf =1;};case LocSelectIfEither :if (_fdae ==SizeSelectIfLT &&(_cfac < _adadf ||_cedd < _gfaa ))||(_fdae ==SizeSelectIfGT &&(_cfac > _adadf ||_cedd > _gfaa ))||(_fdae ==SizeSelectIfLTE &&(_cfac <=_adadf ||_cedd <=_gfaa ))||(_fdae ==SizeSelectIfGTE &&(_cfac >=_adadf ||_cedd >=_gfaa ))||(_fdae ==SizeSelectIfEQ &&(_cfac ==_adadf ||_cedd ==_gfaa )){_accf =1;};case LocSelectIfBoth :if (_fdae ==SizeSelectIfLT &&(_cfac < _adadf &&_cedd < _gfaa ))||(_fdae ==SizeSelectIfGT &&(_cfac > _adadf &&_cedd > _gfaa ))||(_fdae ==SizeSelectIfLTE &&(_cfac <=_adadf &&_cedd <=_gfaa ))||(_fdae ==SizeSelectIfGTE &&(_cfac >=_adadf &&_cedd >=_gfaa ))||(_fdae ==SizeSelectIfEQ &&(_cfac ==_adadf &&_cedd ==_gfaa )){_accf =1;};};_gbbgg .AddInt (_accf );};return _gbbgg ,nil ;};func _bbag (_ebabf ,_cefe *Bitmap ,_eefb ,_dbd int )(_eeeed error ){const _edafb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_gaba ,_ceba ,_agec ,_feag int ;_gdbb ,_fbda ,_dagab ,_bgaf ,_edafbg ,_dbbe ,_beeg ,_bgbe byte ;);for _gaba =0;_gaba < _eefb ;_gaba ++{_agec =_gaba *_ebabf .RowStride ;_feag =_gaba *_cefe .RowStride ;for _ceba =0;_ceba < _dbd ;_ceba ++{if _gdbb ,_eeeed =_ebabf .GetByte (_agec +_ceba );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _fbda ,_eeeed =_cefe .GetByte (_feag +_ceba );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _gaba > 0{if _dagab ,_eeeed =_ebabf .GetByte (_agec -_ebabf .RowStride +_ceba );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gdbb |=_dagab |(_dagab <<1)|(_dagab >>1);if _ceba > 0{if _bgbe ,_eeeed =_ebabf .GetByte (_agec -_ebabf .RowStride +_ceba -1);_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_gdbb |=_bgbe <<7;};if _ceba < _dbd -1{if _bgbe ,_eeeed =_ebabf .GetByte (_agec -_ebabf .RowStride +_ceba +1);_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_gdbb |=_bgbe >>7;};};if _ceba > 0{if _bgaf ,_eeeed =_ebabf .GetByte (_agec +_ceba -1);_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u006a\u0020\u003e \u0030");};_gdbb |=_bgaf <<7;};_gdbb &=_fbda ;if _gdbb ==0||^_gdbb ==0{if _eeeed =_ebabf .SetByte (_agec +_ceba ,_gdbb );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_beeg =_gdbb ;_gdbb =(_gdbb |(_gdbb >>1)|(_gdbb <<1))&_fbda ;if (_gdbb ^_beeg )==0{if _eeeed =_ebabf .SetByte (_agec +_ceba ,_gdbb );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _gaba =_eefb -1;_gaba >=0;_gaba --{_agec =_gaba *_ebabf .RowStride ;_feag =_gaba *_cefe .RowStride ;for _ceba =_dbd -1;_ceba >=0;_ceba --{if _gdbb ,_eeeed =_ebabf .GetByte (_agec +_ceba );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _fbda ,_eeeed =_cefe .GetByte (_feag +_ceba );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _gaba < _eefb -1{if _edafbg ,_eeeed =_ebabf .GetByte (_agec +_ebabf .RowStride +_ceba );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_gdbb |=_edafbg |(_edafbg <<1)|_edafbg >>1;if _ceba > 0{if _bgbe ,_eeeed =_ebabf .GetByte (_agec +_ebabf .RowStride +_ceba -1);_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_gdbb |=_bgbe <<7;};if _ceba < _dbd -1{if _bgbe ,_eeeed =_ebabf .GetByte (_agec +_ebabf .RowStride +_ceba +1);_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_gdbb |=_bgbe >>7;};};if _ceba < _dbd -1{if _dbbe ,_eeeed =_ebabf .GetByte (_agec +_ceba +1);_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_gdbb |=_dbbe >>7;};_gdbb &=_fbda ;if _gdbb ==0||(^_gdbb )==0{if _eeeed =_ebabf .SetByte (_agec +_ceba ,_gdbb );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_beeg =_gdbb ;_gdbb =(_gdbb |(_gdbb >>1)|(_gdbb <<1))&_fbda ;if (_gdbb ^_beeg )==0{if _eeeed =_ebabf .SetByte (_agec +_ceba ,_gdbb );_eeeed !=nil {return _g .Wrap (_eeeed ,_edafb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func TstCSymbol (t *_ac .T )*Bitmap {t .Helper ();_bgbaf :=New (6,6);_f .NoError (t ,_bgbaf .SetPixel (1,0,1));_f .NoError (t ,_bgbaf .SetPixel (2,0,1));_f .NoError (t ,_bgbaf .SetPixel (3,0,1));_f .NoError (t ,_bgbaf .SetPixel (4,0,1));_f .NoError (t ,_bgbaf .SetPixel (0,1,1));_f .NoError (t ,_bgbaf .SetPixel (5,1,1));_f .NoError (t ,_bgbaf .SetPixel (0,2,1));_f .NoError (t ,_bgbaf .SetPixel (0,3,1));_f .NoError (t ,_bgbaf .SetPixel (0,4,1));_f .NoError (t ,_bgbaf .SetPixel (5,4,1));_f .NoError (t ,_bgbaf .SetPixel (1,5,1));_f .NoError (t ,_bgbaf .SetPixel (2,5,1));_f .NoError (t ,_bgbaf .SetPixel (3,5,1));_f .NoError (t ,_bgbaf .SetPixel (4,5,1));return _bgbaf ;};func TstWriteSymbols (t *_ac .T ,bms *Bitmaps ,src *Bitmap ){for _cbddb :=0;_cbddb < bms .Size ();_cbddb ++{_eadb :=bms .Values [_cbddb ];_dabd :=bms .Boxes [_cbddb ];_babf :=src .RasterOperation (_dabd .Min .X ,_dabd .Min .Y ,_eadb .Width ,_eadb .Height ,PixSrc ,_eadb ,0,0);_f .NoError (t ,_babf );};};func (_cab Points )Size ()int {return len (_cab )};func (_gefe *Bitmap )removeBorderGeneral (_efca ,_gbffg ,_faed ,_bdaa int )(*Bitmap ,error ){const _ddgf ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _efca < 0||_gbffg < 0||_faed < 0||_bdaa < 0{return nil ,_g .Error (_ddgf ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_gee ,_cec :=_gefe .Width ,_gefe .Height ;_dba :=_gee -_efca -_gbffg ;_bdgd :=_cec -_faed -_bdaa ;if _dba <=0{return nil ,_g .Errorf (_ddgf ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_dba );};if _bdgd <=0{return nil ,_g .Errorf (_ddgf ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_bdgd );};_cdgg :=New (_dba ,_bdgd );_cdgg .Color =_gefe .Color ;_afge :=_cdgg .RasterOperation (0,0,_dba ,_bdgd ,PixSrc ,_gefe ,_efca ,_faed );if _afge !=nil {return nil ,_g .Wrap (_afge ,_ddgf ,"");};return _cdgg ,nil ;};func _ffgc (_cagd *Bitmap ,_bcdfc ,_gda ,_gfcb ,_faecc int ,_bbaf RasterOperator ,_dfde *Bitmap ,_ddgde ,_afag int )error {const _efga ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _cagd ==nil {return _g .Error (_efga ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _bbaf ==PixDst {return nil ;};switch _bbaf {case PixClr ,PixSet ,PixNotDst :_badg (_cagd ,_bcdfc ,_gda ,_gfcb ,_faecc ,_bbaf );return nil ;};if _dfde ==nil {_afe .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _g .Error (_efga ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gdab :=_efbg (_cagd ,_bcdfc ,_gda ,_gfcb ,_faecc ,_bbaf ,_dfde ,_ddgde ,_afag );_gdab !=nil {return _g .Wrap (_gdab ,_efga ,"");};return nil ;};func (_fbc *Bitmap )setAll ()error {_effe :=_ffgc (_fbc ,0,0,_fbc .Width ,_fbc .Height ,PixSet ,nil ,0,0);if _effe !=nil {return _g .Wrap (_effe ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);var _bfd [256]uint8 ;func (_eadga *ClassedPoints )Swap (i ,j int ){_eadga .IntSlice [i ],_eadga .IntSlice [j ]=_eadga .IntSlice [j ],_eadga .IntSlice [i ];};func (_eccdc *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _cbbefd ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_gfag ,_eaae :=_eccdc .selectByIndexes (idx );if _eaae !=nil {return nil ,_g .Wrap (_eaae ,_cbbefd ,"");};return _gfag ,nil ;};func _gdfg (_ebcgd ,_eedd ,_cfdb *Bitmap )(*Bitmap ,error ){const _cbbfg ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _eedd ==nil {return nil ,_g .Error (_cbbfg ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cfdb ==nil {return nil ,_g .Error (_cbbfg ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ebcgd ==_cfdb {return nil ,_g .Error (_cbbfg ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_eedd .SizesEqual (_cfdb ){_afe .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cbbfg );};var _fff error ;if _ebcgd ,_fff =_fcad (_ebcgd ,_eedd );_fff !=nil {return nil ,_g .Wrap (_fff ,_cbbfg ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _fff =_ebcgd .RasterOperation (0,0,_ebcgd .Width ,_ebcgd .Height ,PixSrcXorDst ,_cfdb ,0,0);_fff !=nil {return nil ,_g .Wrap (_fff ,_cbbfg ,"");};return _ebcgd ,nil ;};func (_dga *Bitmap )GetChocolateData ()[]byte {if _dga .Color ==Vanilla {_dga .inverseData ();};return _dga .Data ;};func New (width ,height int )*Bitmap {_dbc :=_gaaf (width ,height );_dbc .Data =make ([]byte ,height *_dbc .RowStride );return _dbc ;};func (_ggfc *Points )AddPoint (x ,y float32 ){*_ggfc =append (*_ggfc ,Point {x ,y })};func (_afbb *Bitmaps )SortByHeight (){_fddc :=(*byHeight )(_afbb );_af .Sort (_fddc )};type MorphOperation int ;func (_ddgb *Bitmap )setEightBytes (_gbe int ,_dbce uint64 )error {_cbbe :=_ddgb .RowStride -(_gbe %_ddgb .RowStride );if _ddgb .RowStride !=_ddgb .Width >>3{_cbbe --;};if _cbbe >=8{return _ddgb .setEightFullBytes (_gbe ,_dbce );};return _ddgb .setEightPartlyBytes (_gbe ,_cbbe ,_dbce );};func MakePixelCentroidTab8 ()[]int {return _bbdb ()};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_eaedc *BitmapsArray )GetBox (i int )(*_c .Rectangle ,error ){const _cbfb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _eaedc ==nil {return nil ,_g .Error (_cbfb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eaedc .Boxes )-1{return nil ,_g .Errorf (_cbfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eaedc .Boxes [i ],nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_bggd *Bitmap )nextOnPixel (_ffdg ,_efgc int )(_dcb _c .Point ,_afbd bool ,_bfa error ){const _eab ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_dcb ,_afbd ,_bfa =_bggd .nextOnPixelLow (_bggd .Width ,_bggd .Height ,_bggd .RowStride ,_ffdg ,_efgc );if _bfa !=nil {return _dcb ,false ,_g .Wrap (_bfa ,_eab ,"");};return _dcb ,_afbd ,nil ;};func TstISymbol (t *_ac .T ,scale ...int )*Bitmap {_dbfb ,_dabaa :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_f .NoError (t ,_dabaa );return TstGetScaledSymbol (t ,_dbfb ,scale ...);};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);type Color int ;func (_fdg *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fdg .removeBorderGeneral (left ,right ,top ,bot );};func (_ddag *Bitmap )setEightPartlyBytes (_gcff ,_ccb int ,_dggg uint64 )(_gfga error ){var (_gdb byte ;_dfad int ;);const _abg ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _bea :=1;_bea <=_ccb ;_bea ++{_dfad =64-_bea *8;_gdb =byte (_dggg >>uint (_dfad )&0xff);_afe .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_gdb ,_gcff ,_gcff +_bea -1,_ccb ,_dfad );if _gfga =_ddag .SetByte (_gcff +_bea -1,_gdb );_gfga !=nil {return _g .Wrap (_gfga ,_abg ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_caff :=_ddag .RowStride *8-_ddag .Width ;if _caff ==0{return nil ;};_dfad -=8;_gdb =byte (_dggg >>uint (_dfad )&0xff)<<uint (_caff );if _gfga =_ddag .SetByte (_gcff +_ccb ,_gdb );_gfga !=nil {return _g .Wrap (_gfga ,_abg ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func _fccbb (_efeg *Bitmap ,_eeef *_b .Stack ,_cace ,_gbea ,_feee int )(_bcfd *_c .Rectangle ,_adcd error ){const _fgbfa ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _efeg ==nil {return nil ,_g .Error (_fgbfa ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _eeef ==nil {return nil ,_g .Error (_fgbfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _feee {case 4:if _bcfd ,_adcd =_fbcd (_efeg ,_eeef ,_cace ,_gbea );_adcd !=nil {return nil ,_g .Wrap (_adcd ,_fgbfa ,"");};return _bcfd ,nil ;case 8:if _bcfd ,_adcd =_fead (_efeg ,_eeef ,_cace ,_gbea );_adcd !=nil {return nil ,_g .Wrap (_adcd ,_fgbfa ,"");};return _bcfd ,nil ;default:return nil ,_g .Errorf (_fgbfa ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_feee );};};func (_dddgf *byWidth )Less (i ,j int )bool {return _dddgf .Values [i ].Width < _dddgf .Values [j ].Width };var MorphBC BoundaryCondition ;func _gagf (_aade ,_cde ,_dbfe byte )byte {return (_aade &^(_dbfe ))|(_cde &_dbfe )};func (_gadc *Bitmap )resizeImageData (_daef *Bitmap )error {if _daef ==nil {return _g .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gadc .SizesEqual (_daef ){return nil ;};_gadc .Data =make ([]byte ,len (_daef .Data ));_gadc .Width =_daef .Width ;_gadc .Height =_daef .Height ;_gadc .RowStride =_daef .RowStride ;return nil ;};func init (){const _afae ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_aecf =New (50,40);var _gbagb error ;_aecf ,_gbagb =_aecf .AddBorder (2,1);if _gbagb !=nil {panic (_g .Wrap (_gbagb ,_afae ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_dgfd ,_gbagb =NewWithData (50,22,_fbcda );if _gbagb !=nil {panic (_g .Wrap (_gbagb ,_afae ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func _edfe (_fecb ,_edfd *Bitmap ,_afefa ,_fgbe int )(_gdda error ){const _eedb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dgbc ,_fccc ,_fbccd ,_gfbc int ;_gfaf ,_beda ,_fdgg ,_bdgfg ,_gegd ,_fedcf ,_dcbf byte ;);for _dgbc =0;_dgbc < _afefa ;_dgbc ++{_fbccd =_dgbc *_fecb .RowStride ;_gfbc =_dgbc *_edfd .RowStride ;for _fccc =0;_fccc < _fgbe ;_fccc ++{_gfaf ,_gdda =_fecb .GetByte (_fbccd +_fccc );if _gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_beda ,_gdda =_edfd .GetByte (_gfbc +_fccc );if _gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _dgbc > 0{_fdgg ,_gdda =_fecb .GetByte (_fbccd -_fecb .RowStride +_fccc );if _gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0069\u0020\u003e \u0030");};_gfaf |=_fdgg ;};if _fccc > 0{_bdgfg ,_gdda =_fecb .GetByte (_fbccd +_fccc -1);if _gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u006a\u0020\u003e \u0030");};_gfaf |=_bdgfg <<7;};_gfaf &=_beda ;if _gfaf ==0||(^_gfaf )==0{if _gdda =_fecb .SetByte (_fbccd +_fccc ,_gfaf );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_dcbf =_gfaf ;_gfaf =(_gfaf |(_gfaf >>1)|(_gfaf <<1))&_beda ;if (_gfaf ^_dcbf )==0{if _gdda =_fecb .SetByte (_fbccd +_fccc ,_gfaf );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dgbc =_afefa -1;_dgbc >=0;_dgbc --{_fbccd =_dgbc *_fecb .RowStride ;_gfbc =_dgbc *_edfd .RowStride ;for _fccc =_fgbe -1;_fccc >=0;_fccc --{if _gfaf ,_gdda =_fecb .GetByte (_fbccd +_fccc );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _beda ,_gdda =_edfd .GetByte (_gfbc +_fccc );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dgbc < _afefa -1{if _gegd ,_gdda =_fecb .GetByte (_fbccd +_fecb .RowStride +_fccc );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_gfaf |=_gegd ;};if _fccc < _fgbe -1{if _fedcf ,_gdda =_fecb .GetByte (_fbccd +_fccc +1);_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_gfaf |=_fedcf >>7;};_gfaf &=_beda ;if _gfaf ==0||(^_gfaf )==0{if _gdda =_fecb .SetByte (_fbccd +_fccc ,_gfaf );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_dcbf =_gfaf ;_gfaf =(_gfaf |(_gfaf >>1)|(_gfaf <<1))&_beda ;if (_gfaf ^_dcbf )==0{if _gdda =_fecb .SetByte (_fbccd +_fccc ,_gfaf );_gdda !=nil {return _g .Wrap (_gdda ,_eedb ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func _fage (_adaf ,_bddc *Bitmap ,_cgbc ,_gced ,_afde ,_bdf ,_gcd ,_gdgg ,_fbfcfg ,_cfbb int ,_befc CombinationOperator ,_cgfe int )error {var _bgf int ;_bgde :=func (){_bgf ++;_afde +=_bddc .RowStride ;_bdf +=_adaf .RowStride ;_gcd +=_adaf .RowStride };for _bgf =_cgbc ;_bgf < _gced ;_bgde (){var _afad uint16 ;_dbab :=_afde ;for _dddf :=_bdf ;_dddf <=_gcd ;_dddf ++{_eggc ,_dfge :=_bddc .GetByte (_dbab );if _dfge !=nil {return _dfge ;};_cff ,_dfge :=_adaf .GetByte (_dddf );if _dfge !=nil {return _dfge ;};_afad =(_afad |(uint16 (_cff )&0xff))<<uint (_cfbb );_cff =byte (_afad >>8);if _dfge =_bddc .SetByte (_dbab ,_ddea (_eggc ,_cff ,_befc ));_dfge !=nil {return _dfge ;};_dbab ++;_afad <<=uint (_fbfcfg );if _dddf ==_gcd {_cff =byte (_afad >>(8-uint8 (_cfbb )));if _cgfe !=0{_cff =_ffe (uint (8+_gdgg ),_cff );};_eggc ,_dfge =_bddc .GetByte (_dbab );if _dfge !=nil {return _dfge ;};if _dfge =_bddc .SetByte (_dbab ,_ddea (_eggc ,_cff ,_befc ));_dfge !=nil {return _dfge ;};};};};return nil ;};func (_bcag Points )XSorter ()func (_gecc ,_facd int )bool {return func (_fcga ,_bgfc int )bool {return _bcag [_fcga ].X < _bcag [_bgfc ].X };};func TstWordBitmap (t *_ac .T ,scale ...int )*Bitmap {_abgb :=1;if len (scale )> 0{_abgb =scale [0];};_ffdf :=3;_geaf :=9+7+15+2*_ffdf ;_gfbca :=5+_ffdf +5;_fbba :=New (_geaf *_abgb ,_gfbca *_abgb );_bdbb :=&Bitmaps {};var _decda *int ;_ffdf *=_abgb ;_acae :=0;_decda =&_acae ;_adbdd :=0;_cdaf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,_ffdf );_cdaf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,_ffdf );_cdaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,0);*_decda =0;_adbdd =5*_abgb +_ffdf ;_cdaf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,_ffdf );_cdaf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,1*_abgb );_cdaf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bdbb ,_cdaf ,_decda ,_adbdd ,0);TstWriteSymbols (t ,_bdbb ,_fbba );return _fbba ;};func TstOSymbol (t *_ac .T ,scale ...int )*Bitmap {_daaa ,_gegf :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_f .NoError (t ,_gegf );return TstGetScaledSymbol (t ,_daaa ,scale ...);};func _cea (_aaed ,_fbab *Bitmap ,_ggfg int ,_afg []byte ,_gge int )(_gdgd error ){const _eed ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_cbc ,_aca ,_eacf ,_cccf ,_cbf ,_efb ,_cdc ,_ede int ;_edd ,_dgca uint32 ;_cdd ,_aab byte ;_daf uint16 ;);_bad :=make ([]byte ,4);_fef :=make ([]byte ,4);for _eacf =0;_eacf < _aaed .Height -1;_eacf ,_cccf =_eacf +2,_cccf +1{_cbc =_eacf *_aaed .RowStride ;_aca =_cccf *_fbab .RowStride ;for _cbf ,_efb =0,0;_cbf < _gge ;_cbf ,_efb =_cbf +4,_efb +1{for _cdc =0;_cdc < 4;_cdc ++{_ede =_cbc +_cbf +_cdc ;if _ede <=len (_aaed .Data )-1&&_ede < _cbc +_aaed .RowStride {_bad [_cdc ]=_aaed .Data [_ede ];}else {_bad [_cdc ]=0x00;};_ede =_cbc +_aaed .RowStride +_cbf +_cdc ;if _ede <=len (_aaed .Data )-1&&_ede < _cbc +(2*_aaed .RowStride ){_fef [_cdc ]=_aaed .Data [_ede ];}else {_fef [_cdc ]=0x00;};};_edd =_ag .BigEndian .Uint32 (_bad );_dgca =_ag .BigEndian .Uint32 (_fef );_dgca &=_edd ;_dgca &=_dgca <<1;_dgca &=0xaaaaaaaa;_edd =_dgca |(_dgca <<7);_cdd =byte (_edd >>24);_aab =byte ((_edd >>8)&0xff);_ede =_aca +_efb ;if _ede +1==len (_fbab .Data )-1||_ede +1>=_aca +_fbab .RowStride {_fbab .Data [_ede ]=_afg [_cdd ];if _gdgd =_fbab .SetByte (_ede ,_afg [_cdd ]);_gdgd !=nil {return _g .Wrapf (_gdgd ,_eed ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ede );};}else {_daf =(uint16 (_afg [_cdd ])<<8)|uint16 (_afg [_aab ]);if _gdgd =_fbab .setTwoBytes (_ede ,_daf );_gdgd !=nil {return _g .Wrapf (_gdgd ,_eed ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ede );};_efb ++;};};};return nil ;};func (_fcagf *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _dgaf ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _bbga :=_fcagf .validateIntSlice ();_bbga !=nil {return nil ,_g .Wrap (_bbga ,_dgaf ,"");};if _fcagf .IntSlice .Size ()==0{return nil ,_g .Error (_dgaf ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fcagf .SortByY ();var (_gcbbc []*ClassedPoints ;_efgga int ;);_dbed :=-1;var _cbbcc *ClassedPoints ;for _adbb :=0;_adbb < len (_fcagf .IntSlice );_adbb ++{_efgga =int (_fcagf .YAtIndex (_adbb ));if _efgga !=_dbed {_cbbcc =&ClassedPoints {Points :_fcagf .Points };_dbed =_efgga ;_gcbbc =append (_gcbbc ,_cbbcc );};_cbbcc .IntSlice =append (_cbbcc .IntSlice ,_fcagf .IntSlice [_adbb ]);};for _ ,_bfag :=range _gcbbc {_bfag .SortByX ();};return _gcbbc ,nil ;};var _fbcda =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func (_edge Points )GetIntY (i int )(int ,error ){if i >=len (_edge ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_edge [i ].Y ),nil ;};func _eef (_ddg *Bitmap ,_ged *Bitmap ,_gea int )(_bbg error ){const _aae ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _gea {case 2:_bbg =_fb (_ddg ,_ged );case 4:_bbg =_ea (_ddg ,_ged );case 8:_bbg =_fe (_ddg ,_ged );default:return _g .Error (_aae ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _bbg !=nil {_bbg =_g .Wrap (_bbg ,_aae ,"");};return _bbg ;};func TstTSymbol (t *_ac .T ,scale ...int )*Bitmap {_dddd ,_bbge :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_bbge );return TstGetScaledSymbol (t ,_dddd ,scale ...);};func _bgef (_bbce *Bitmap )(_fdeg *Bitmap ,_aag int ,_gcdf error ){const _fcaa ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _bbce ==nil {return nil ,0,_g .Errorf (_fcaa ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _beea ,_ccdg *Bitmap ;if _beea ,_gcdf =_fcad (nil ,_bbce );_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_cbg [13]int ;_cdaa ,_fdgd int ;);_fgge :=12;_cecae :=_b .NewNumSlice (_fgge +1);_cfbbc :=_b .NewNumSlice (_fgge +1);var _febf *Boxes ;for _egfd :=0;_egfd <=_fgge ;_egfd ++{if _egfd ==0{if _ccdg ,_gcdf =_fcad (nil ,_beea );_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ccdg ,_gcdf =_cbge (_beea ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _febf ,_gcdf =_ccdg .connComponentsBB (4);_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"");};_cbg [_egfd ]=len (*_febf );_cecae .AddInt (_cbg [_egfd ]);switch _egfd {case 0:_cdaa =_cbg [0];default:_fdgd =_cbg [_egfd -1]-_cbg [_egfd ];_cfbbc .AddInt (_fdgd );};_beea =_ccdg ;};_cbgd :=true ;_cdac :=2;var _bcfb ,_bcdd int ;for _acgc :=1;_acgc < len (*_cfbbc );_acgc ++{if _bcfb ,_gcdf =_cecae .GetInt (_acgc );_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _cbgd &&_bcfb < int (0.3*float32 (_cdaa )){_cdac =_acgc +1;_cbgd =false ;};if _fdgd ,_gcdf =_cfbbc .GetInt (_acgc );_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _fdgd > _bcdd {_bcdd =_fdgd ;};};_cdfa :=_bbce .XResolution ;if _cdfa ==0{_cdfa =150;};if _cdfa > 110{_cdac ++;};if _cdac < 2{_afe .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_cdac =2;};_aag =_cdac +1;if _fdeg ,_gcdf =_dfab (nil ,_bbce ,_cdac +1,1);_gcdf !=nil {return nil ,0,_g .Wrap (_gcdf ,_fcaa ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _fdeg ,_aag ,nil ;};func (_aefbf *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_egcc *Bitmaps ,_faeca error ){const _bbgf ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _aefbf ==nil {return nil ,_g .Error (_bbgf ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_bbgf ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_bbgf ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_bbgcd ,_faeca :=_aefbf .makeSizeIndicator (width ,height ,tp ,relation );if _faeca !=nil {return nil ,_g .Wrap (_faeca ,_bbgf ,"");};_egcc ,_faeca =_aefbf .selectByIndicator (_bbgcd );if _faeca !=nil {return nil ,_g .Wrap (_faeca ,_bbgf ,"");};return _egcc ,nil ;};func (_dfgc Points )GetIntX (i int )(int ,error ){if i >=len (_dfgc ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_dfgc [i ].X ),nil ;};func Extract (roi _c .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ggdde :=New (roi .Dx (),roi .Dy ());_ggcc :=roi .Min .X &0x07;_eadg :=8-_ggcc ;_bgdc :=uint (8-_ggdde .Width &0x07);_acaf :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_ddcg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_dafb :=_ggdde .RowStride ==_ddcg +1-_acaf ;var _dccg int ;for _dcbd :=roi .Min .Y ;_dcbd < roi .Max .Y ;_dcbd ++{_ccfc :=_acaf ;_bagf :=_dccg ;switch {case _acaf ==_ddcg :_dagf ,_ddga :=src .GetByte (_ccfc );if _ddga !=nil {return nil ,_ddga ;};_dagf <<=uint (_ggcc );_ddga =_ggdde .SetByte (_bagf ,_ffe (_bgdc ,_dagf ));if _ddga !=nil {return nil ,_ddga ;};case _ggcc ==0:for _adfe :=_acaf ;_adfe <=_ddcg ;_adfe ++{_edc ,_eccd :=src .GetByte (_ccfc );if _eccd !=nil {return nil ,_eccd ;};_ccfc ++;if _adfe ==_ddcg &&_dafb {_edc =_ffe (_bgdc ,_edc );};_eccd =_ggdde .SetByte (_bagf ,_edc );if _eccd !=nil {return nil ,_eccd ;};_bagf ++;};default:_gcbd :=_gba (src ,_ggdde ,uint (_ggcc ),uint (_eadg ),_bgdc ,_acaf ,_ddcg ,_dafb ,_ccfc ,_bagf );if _gcbd !=nil {return nil ,_gcbd ;};};_acaf +=src .RowStride ;_ddcg +=src .RowStride ;_dccg +=_ggdde .RowStride ;};return _ggdde ,nil ;};func TstRSymbol (t *_ac .T ,scale ...int )*Bitmap {_cbddbg ,_aaa :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_aaa );return TstGetScaledSymbol (t ,_cbddbg ,scale ...);};func _abbe (_bacaf *Bitmap ,_cagdd ,_ddaf int ,_dcdb ,_defe int ,_daeff RasterOperator ){var (_gbgfe bool ;_beef bool ;_fbffb int ;_aagec int ;_bfea int ;_ccafe int ;_fgca bool ;_edee byte ;);_dfbb :=8-(_cagdd &7);_ded :=_bbeg [_dfbb ];_fcafa :=_bacaf .RowStride *_ddaf +(_cagdd >>3);if _dcdb < _dfbb {_gbgfe =true ;_ded &=_gfcf [8-_dfbb +_dcdb ];};if !_gbgfe {_fbffb =(_dcdb -_dfbb )>>3;if _fbffb !=0{_beef =true ;_aagec =_fcafa +1;};};_bfea =(_cagdd +_dcdb )&7;if !(_gbgfe ||_bfea ==0){_fgca =true ;_edee =_gfcf [_bfea ];_ccafe =_fcafa +1+_fbffb ;};var _dage ,_bfeb int ;switch _daeff {case PixClr :for _dage =0;_dage < _defe ;_dage ++{_bacaf .Data [_fcafa ]=_gagf (_bacaf .Data [_fcafa ],0x0,_ded );_fcafa +=_bacaf .RowStride ;};if _beef {for _dage =0;_dage < _defe ;_dage ++{for _bfeb =0;_bfeb < _fbffb ;_bfeb ++{_bacaf .Data [_aagec +_bfeb ]=0x0;};_aagec +=_bacaf .RowStride ;};};if _fgca {for _dage =0;_dage < _defe ;_dage ++{_bacaf .Data [_ccafe ]=_gagf (_bacaf .Data [_ccafe ],0x0,_edee );_ccafe +=_bacaf .RowStride ;};};case PixSet :for _dage =0;_dage < _defe ;_dage ++{_bacaf .Data [_fcafa ]=_gagf (_bacaf .Data [_fcafa ],0xff,_ded );_fcafa +=_bacaf .RowStride ;};if _beef {for _dage =0;_dage < _defe ;_dage ++{for _bfeb =0;_bfeb < _fbffb ;_bfeb ++{_bacaf .Data [_aagec +_bfeb ]=0xff;};_aagec +=_bacaf .RowStride ;};};if _fgca {for _dage =0;_dage < _defe ;_dage ++{_bacaf .Data [_ccafe ]=_gagf (_bacaf .Data [_ccafe ],0xff,_edee );_ccafe +=_bacaf .RowStride ;};};case PixNotDst :for _dage =0;_dage < _defe ;_dage ++{_bacaf .Data [_fcafa ]=_gagf (_bacaf .Data [_fcafa ],^_bacaf .Data [_fcafa ],_ded );_fcafa +=_bacaf .RowStride ;};if _beef {for _dage =0;_dage < _defe ;_dage ++{for _bfeb =0;_bfeb < _fbffb ;_bfeb ++{_bacaf .Data [_aagec +_bfeb ]=^(_bacaf .Data [_aagec +_bfeb ]);};_aagec +=_bacaf .RowStride ;};};if _fgca {for _dage =0;_dage < _defe ;_dage ++{_bacaf .Data [_ccafe ]=_gagf (_bacaf .Data [_ccafe ],^_bacaf .Data [_ccafe ],_edee );_ccafe +=_bacaf .RowStride ;};};};};func (_fdeb *Bitmap )SizesEqual (s *Bitmap )bool {if _fdeb ==s {return true ;};if _fdeb .Width !=s .Width ||_fdeb .Height !=s .Height {return false ;};return true ;};func (_dcea *Boxes )selectWithIndicator (_gbda *_b .NumSlice )(_bbfa *Boxes ,_faga error ){const _gaf ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dcea ==nil {return nil ,_g .Error (_gaf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _gbda ==nil {return nil ,_g .Error (_gaf ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_gbda )!=len (*_dcea ){return nil ,_g .Error (_gaf ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _bddg ,_afef int ;for _badag :=0;_badag < len (*_gbda );_badag ++{if _bddg ,_faga =_gbda .GetInt (_badag );_faga !=nil {return nil ,_g .Wrap (_faga ,_gaf ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _bddg ==1{_afef ++;};};if _afef ==len (*_dcea ){return _dcea ,nil ;};_dgac :=Boxes {};for _baf :=0;_baf < len (*_gbda );_baf ++{_bddg =int ((*_gbda )[_baf ]);if _bddg ==0{continue ;};_dgac =append (_dgac ,(*_dcea )[_baf ]);};_bbfa =&_dgac ;return _bbfa ,nil ;};func _fabgg (_bbcfd *Bitmap ,_eaefg int )(*Bitmap ,error ){const _cfbba ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _bbcfd ==nil {return nil ,_g .Error (_cfbba ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eaefg <=0{return nil ,_g .Error (_cfbba ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _eaefg ==1{_fcbg ,_fdfg :=_fcad (nil ,_bbcfd );if _fdfg !=nil {return nil ,_g .Wrap (_fdfg ,_cfbba ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _fcbg ,nil ;};_egfaf ,_ccdgc :=_egc (_bbcfd ,_eaefg ,_eaefg );if _ccdgc !=nil {return nil ,_g .Wrap (_ccdgc ,_cfbba ,"");};return _egfaf ,nil ;};func (_dcac *Bitmap )clearAll ()error {return _dcac .RasterOperation (0,0,_dcac .Width ,_dcac .Height ,PixClr ,nil ,0,0);};