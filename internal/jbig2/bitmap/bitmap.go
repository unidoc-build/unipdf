//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ac "encoding/binary";_a "github.com/stretchr/testify/require";_b "github.com/unidoc/unipdf/v3/common";_ce "github.com/unidoc/unipdf/v3/internal/bitwise";_eg "github.com/unidoc/unipdf/v3/internal/imageutil";_dgb "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";_g "math";_ea "sort";_dg "strings";_c "testing";);func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_caag float64 ,_ggc error ){const _cbgg ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_d .Error (_cbgg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_d .Error (_cbgg ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_d .Error (_cbgg ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_baag ,_ddec :=bm1 .Width ,bm1 .Height ;_afed ,_adbga :=bm2 .Width ,bm2 .Height ;
_abf :=_afa (_baag -_afed );if _abf > maxDiffW {return 0,nil ;};_cbbd :=_afa (_ddec -_adbga );if _cbbd > maxDiffH {return 0,nil ;};var _adeg ,_agcd int ;if delX >=0{_adeg =int (delX +0.5);}else {_adeg =int (delX -0.5);};if delY >=0{_agcd =int (delY +0.5);
}else {_agcd =int (delY -0.5);};_dcca :=_cbb (_agcd ,0);_ecbe :=_adg (_adbga +_agcd ,_ddec );_acbe :=bm1 .RowStride *_dcca ;_addad :=bm2 .RowStride *(_dcca -_agcd );_baff :=_cbb (_adeg ,0);_faae :=_adg (_afed +_adeg ,_baag );_fgbc :=bm2 .RowStride ;var _dece ,_bcea int ;
if _adeg >=8{_dece =_adeg >>3;_acbe +=_dece ;_baff -=_dece <<3;_faae -=_dece <<3;_adeg &=7;}else if _adeg <=-8{_bcea =-((_adeg +7)>>3);_addad +=_bcea ;_fgbc -=_bcea ;_adeg +=_bcea <<3;};if _baff >=_faae ||_dcca >=_ecbe {return 0,nil ;};_cgada :=(_faae +7)>>3;
var (_bedbd ,_fgbb ,_baeg byte ;_adeb ,_fccd ,_cbde int ;);switch {case _adeg ==0:for _cbde =_dcca ;_cbde < _ecbe ;_cbde ,_acbe ,_addad =_cbde +1,_acbe +bm1 .RowStride ,_addad +bm2 .RowStride {for _fccd =0;_fccd < _cgada ;_fccd ++{_baeg =bm1 .Data [_acbe +_fccd ]&bm2 .Data [_addad +_fccd ];
_adeb +=tab [_baeg ];};};case _adeg > 0:if _fgbc < _cgada {for _cbde =_dcca ;_cbde < _ecbe ;_cbde ,_acbe ,_addad =_cbde +1,_acbe +bm1 .RowStride ,_addad +bm2 .RowStride {_bedbd ,_fgbb =bm1 .Data [_acbe ],bm2 .Data [_addad ]>>uint (_adeg );_baeg =_bedbd &_fgbb ;
_adeb +=tab [_baeg ];for _fccd =1;_fccd < _fgbc ;_fccd ++{_bedbd ,_fgbb =bm1 .Data [_acbe +_fccd ],(bm2 .Data [_addad +_fccd ]>>uint (_adeg ))|(bm2 .Data [_addad +_fccd -1]<<uint (8-_adeg ));_baeg =_bedbd &_fgbb ;_adeb +=tab [_baeg ];};_bedbd =bm1 .Data [_acbe +_fccd ];
_fgbb =bm2 .Data [_addad +_fccd -1]<<uint (8-_adeg );_baeg =_bedbd &_fgbb ;_adeb +=tab [_baeg ];};}else {for _cbde =_dcca ;_cbde < _ecbe ;_cbde ,_acbe ,_addad =_cbde +1,_acbe +bm1 .RowStride ,_addad +bm2 .RowStride {_bedbd ,_fgbb =bm1 .Data [_acbe ],bm2 .Data [_addad ]>>uint (_adeg );
_baeg =_bedbd &_fgbb ;_adeb +=tab [_baeg ];for _fccd =1;_fccd < _cgada ;_fccd ++{_bedbd =bm1 .Data [_acbe +_fccd ];_fgbb =(bm2 .Data [_addad +_fccd ]>>uint (_adeg ))|(bm2 .Data [_addad +_fccd -1]<<uint (8-_adeg ));_baeg =_bedbd &_fgbb ;_adeb +=tab [_baeg ];
};};};default:if _cgada < _fgbc {for _cbde =_dcca ;_cbde < _ecbe ;_cbde ,_acbe ,_addad =_cbde +1,_acbe +bm1 .RowStride ,_addad +bm2 .RowStride {for _fccd =0;_fccd < _cgada ;_fccd ++{_bedbd =bm1 .Data [_acbe +_fccd ];_fgbb =bm2 .Data [_addad +_fccd ]<<uint (-_adeg );
_fgbb |=bm2 .Data [_addad +_fccd +1]>>uint (8+_adeg );_baeg =_bedbd &_fgbb ;_adeb +=tab [_baeg ];};};}else {for _cbde =_dcca ;_cbde < _ecbe ;_cbde ,_acbe ,_addad =_cbde +1,_acbe +bm1 .RowStride ,_addad +bm2 .RowStride {for _fccd =0;_fccd < _cgada -1;_fccd ++{_bedbd =bm1 .Data [_acbe +_fccd ];
_fgbb =bm2 .Data [_addad +_fccd ]<<uint (-_adeg );_fgbb |=bm2 .Data [_addad +_fccd +1]>>uint (8+_adeg );_baeg =_bedbd &_fgbb ;_adeb +=tab [_baeg ];};_bedbd =bm1 .Data [_acbe +_fccd ];_fgbb =bm2 .Data [_addad +_fccd ]<<uint (-_adeg );_baeg =_bedbd &_fgbb ;
_adeb +=tab [_baeg ];};};};_caag =float64 (_adeb )*float64 (_adeb )/(float64 (area1 )*float64 (area2 ));return _caag ,nil ;};func TstFrameBitmap ()*Bitmap {return _bddc .Copy ()};func (_ggfa *BitmapsArray )AddBox (box *_f .Rectangle ){_ggfa .Boxes =append (_ggfa .Boxes ,box )};
func _gdad (_fdgc *Bitmap ,_badd ,_dbde int ,_cdbf ,_fgfba int ,_eddg RasterOperator ,_fgbbf *Bitmap ,_fadfa ,_accea int )error {var _ededd ,_fffaf ,_efbfe ,_agad int ;if _badd < 0{_fadfa -=_badd ;_cdbf +=_badd ;_badd =0;};if _fadfa < 0{_badd -=_fadfa ;
_cdbf +=_fadfa ;_fadfa =0;};_ededd =_badd +_cdbf -_fdgc .Width ;if _ededd > 0{_cdbf -=_ededd ;};_fffaf =_fadfa +_cdbf -_fgbbf .Width ;if _fffaf > 0{_cdbf -=_fffaf ;};if _dbde < 0{_accea -=_dbde ;_fgfba +=_dbde ;_dbde =0;};if _accea < 0{_dbde -=_accea ;
_fgfba +=_accea ;_accea =0;};_efbfe =_dbde +_fgfba -_fdgc .Height ;if _efbfe > 0{_fgfba -=_efbfe ;};_agad =_accea +_fgfba -_fgbbf .Height ;if _agad > 0{_fgfba -=_agad ;};if _cdbf <=0||_fgfba <=0{return nil ;};var _cfed error ;switch {case _badd &7==0&&_fadfa &7==0:_cfed =_fcac (_fdgc ,_badd ,_dbde ,_cdbf ,_fgfba ,_eddg ,_fgbbf ,_fadfa ,_accea );
case _badd &7==_fadfa &7:_cfed =_gcfc (_fdgc ,_badd ,_dbde ,_cdbf ,_fgfba ,_eddg ,_fgbbf ,_fadfa ,_accea );default:_cfed =_aabe (_fdgc ,_badd ,_dbde ,_cdbf ,_fgfba ,_eddg ,_fgbbf ,_fadfa ,_accea );};if _cfed !=nil {return _d .Wrap (_cfed ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func (_ebd *Bitmap )addBorderGeneral (_ccc ,_bcgc ,_cca ,_cgb int ,_gae int )(*Bitmap ,error ){const _deba ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ccc < 0||_bcgc < 0||_cca < 0||_cgb < 0{return nil ,_d .Error (_deba ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_dadc ,_dace :=_ebd .Width ,_ebd .Height ;_accf :=_dadc +_ccc +_bcgc ;_aeg :=_dace +_cca +_cgb ;_gcde :=New (_accf ,_aeg );_gcde .Color =_ebd .Color ;_gbfe :=PixClr ;if _gae > 0{_gbfe =PixSet ;};_beff :=_gcde .RasterOperation (0,0,_ccc ,_aeg ,_gbfe ,nil ,0,0);
if _beff !=nil {return nil ,_d .Wrap (_beff ,_deba ,"\u006c\u0065\u0066\u0074");};_beff =_gcde .RasterOperation (_accf -_bcgc ,0,_bcgc ,_aeg ,_gbfe ,nil ,0,0);if _beff !=nil {return nil ,_d .Wrap (_beff ,_deba ,"\u0072\u0069\u0067h\u0074");};_beff =_gcde .RasterOperation (0,0,_accf ,_cca ,_gbfe ,nil ,0,0);
if _beff !=nil {return nil ,_d .Wrap (_beff ,_deba ,"\u0074\u006f\u0070");};_beff =_gcde .RasterOperation (0,_aeg -_cgb ,_accf ,_cgb ,_gbfe ,nil ,0,0);if _beff !=nil {return nil ,_d .Wrap (_beff ,_deba ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_beff =_gcde .RasterOperation (_ccc ,_cca ,_dadc ,_dace ,PixSrc ,_ebd ,0,0);
if _beff !=nil {return nil ,_d .Wrap (_beff ,_deba ,"\u0063\u006f\u0070\u0079");};return _gcde ,nil ;};func _ggbc (_eced *_dgb .Stack ,_bgcb ,_geaca ,_eggbb ,_bgfda ,_bffg int ,_cgadg *_f .Rectangle )(_fgcc error ){const _cbcac ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _eced ==nil {return _d .Error (_cbcac ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cgadg ==nil {return _d .Error (_cbcac ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_cgadg .Min .X =_dgb .Min (_cgadg .Min .X ,_bgcb );_cgadg .Max .X =_dgb .Max (_cgadg .Max .X ,_geaca );_cgadg .Min .Y =_dgb .Min (_cgadg .Min .Y ,_eggbb );_cgadg .Max .Y =_dgb .Max (_cgadg .Max .Y ,_eggbb );if !(_eggbb +_bgfda >=0&&_eggbb +_bgfda <=_bffg ){return nil ;
};if _eced .Aux ==nil {return _d .Error (_cbcac ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _cabc *fillSegment ;_cee ,_bdae :=_eced .Aux .Pop ();if _bdae {if _cabc ,_bdae =_cee .(*fillSegment );
!_bdae {return _d .Error (_cbcac ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_cabc =&fillSegment {};
};_cabc ._edfg =_bgcb ;_cabc ._fdce =_geaca ;_cabc ._aeec =_eggbb ;_cabc ._cacc =_bgfda ;_eced .Push (_cabc );return nil ;};func _aegg (_cecge *Bitmap ,_geee *Bitmap ,_cebd *Selection )(*Bitmap ,error ){var (_edaa *Bitmap ;_bfaf error ;);_cecge ,_bfaf =_fdbg (_cecge ,_geee ,_cebd ,&_edaa );
if _bfaf !=nil {return nil ,_bfaf ;};if _bfaf =_cecge .clearAll ();_bfaf !=nil {return nil ,_bfaf ;};var _cgce SelectionValue ;for _adbc :=0;_adbc < _cebd .Height ;_adbc ++{for _efd :=0;_efd < _cebd .Width ;_efd ++{_cgce =_cebd .Data [_adbc ][_efd ];if _cgce ==SelHit {if _bfaf =_cecge .RasterOperation (_efd -_cebd .Cx ,_adbc -_cebd .Cy ,_geee .Width ,_geee .Height ,PixSrcOrDst ,_edaa ,0,0);
_bfaf !=nil {return nil ,_bfaf ;};};};};return _cecge ,nil ;};func (_acb *Bitmap )GetBitOffset (x int )int {return x &0x07};func _acd (_caee *Bitmap ,_af ...int )(_bfce *Bitmap ,_cdf error ){const _cbg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _caee ==nil {return nil ,_d .Error (_cbg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_af )==0||len (_af )> 4{return nil ,_d .Error (_cbg ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _af [0]<=0{_b .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_bfce ,_cdf =_bafb (nil ,_caee );if _cdf !=nil {return nil ,_d .Wrap (_cdf ,_cbg ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _bfce ,nil ;};_aeb :=_ddc ();_bfce =_caee ;for _ced ,_bda :=range _af {if _bda <=0{break ;};_bfce ,_cdf =_ggd (_bfce ,_bda ,_aeb );if _cdf !=nil {return nil ,_d .Wrapf (_cdf ,_cbg ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_ced );
};};return _bfce ,nil ;};func (_dgbcd Points )YSorter ()func (_cgdg ,_bgfe int )bool {return func (_cdcdg ,_gbad int )bool {return _dgbcd [_cdcdg ].Y < _dgbcd [_gbad ].Y };};func (_eggb *Bitmap )inverseData (){if _fcg :=_eggb .RasterOperation (0,0,_eggb .Width ,_eggb .Height ,PixNotDst ,nil ,0,0);
_fcg !=nil {_b .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_fcg );};if _eggb .Color ==Chocolate {_eggb .Color =Vanilla ;}else {_eggb .Color =Chocolate ;};};func _cfdc (_gfec uint ,_gfgfc byte )byte {return _gfgfc >>_gfec <<_gfec };
func TstISymbol (t *_c .T ,scale ...int )*Bitmap {_aggf ,_bcadb :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_a .NoError (t ,_bcadb );return TstGetScaledSymbol (t ,_aggf ,scale ...);};func _bcf (_acg *Bitmap ,_bbc *Bitmap ,_bd int )(_fea error ){const _gacb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _bd {case 2:_fea =_bg (_acg ,_bbc );case 4:_fea =_ddg (_acg ,_bbc );case 8:_fea =_dbd (_acg ,_bbc );default:return _d .Error (_gacb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _fea !=nil {_fea =_d .Wrap (_fea ,_gacb ,"");};return _fea ;};func (_egaf *Bitmap )Equals (s *Bitmap )bool {if len (_egaf .Data )!=len (s .Data )||_egaf .Width !=s .Width ||_egaf .Height !=s .Height {return false ;};for _bbce :=0;_bbce < _egaf .Height ;
_bbce ++{_cadg :=_bbce *_egaf .RowStride ;for _fdbb :=0;_fdbb < _egaf .RowStride ;_fdbb ++{if _egaf .Data [_cadg +_fdbb ]!=s .Data [_cadg +_fdbb ]{return false ;};};};return true ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;
};func (_bbcd *ClassedPoints )Less (i ,j int )bool {return _bbcd ._cbcd (i ,j )};func init (){for _dcf :=0;_dcf < 256;_dcf ++{_babc [_dcf ]=uint8 (_dcf &0x1)+(uint8 (_dcf >>1)&0x1)+(uint8 (_dcf >>2)&0x1)+(uint8 (_dcf >>3)&0x1)+(uint8 (_dcf >>4)&0x1)+(uint8 (_dcf >>5)&0x1)+(uint8 (_dcf >>6)&0x1)+(uint8 (_dcf >>7)&0x1);
};};func (_eabd *Bitmaps )selectByIndicator (_aded *_dgb .NumSlice )(_dfad *Bitmaps ,_cfab error ){const _fccgg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _eabd ==nil {return nil ,_d .Error (_fccgg ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _aded ==nil {return nil ,_d .Error (_fccgg ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_eabd .Values )==0{return _eabd ,nil ;};if len (*_aded )!=len (_eabd .Values ){return nil ,_d .Errorf (_fccgg ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_aded ),len (_eabd .Values ));
};var _bgag ,_affb ,_cagc int ;for _affb =0;_affb < len (*_aded );_affb ++{if _bgag ,_cfab =_aded .GetInt (_affb );_cfab !=nil {return nil ,_d .Wrap (_cfab ,_fccgg ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _bgag ==1{_cagc ++;
};};if _cagc ==len (_eabd .Values ){return _eabd ,nil ;};_dfad =&Bitmaps {};_eaaa :=len (_eabd .Values )==len (_eabd .Boxes );for _affb =0;_affb < len (*_aded );_affb ++{if _bgag =int ((*_aded )[_affb ]);_bgag ==0{continue ;};_dfad .Values =append (_dfad .Values ,_eabd .Values [_affb ]);
if _eaaa {_dfad .Boxes =append (_dfad .Boxes ,_eabd .Boxes [_affb ]);};};return _dfad ,nil ;};func (_fef *Bitmap )CreateTemplate ()*Bitmap {return _fef .createTemplate ()};func (_dbfd *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ebdga (_dbfd ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _ebdga (_dfeb *Bitmap ,_bcecf ,_efde ,_bbae ,_cbdgb int ,_cbeb RasterOperator ,_gcgb *Bitmap ,_ccae ,_bagd int )error {const _gbgf ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _dfeb ==nil {return _d .Error (_gbgf ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _cbeb ==PixDst {return nil ;};switch _cbeb {case PixClr ,PixSet ,PixNotDst :_ddbb (_dfeb ,_bcecf ,_efde ,_bbae ,_cbdgb ,_cbeb );return nil ;};if _gcgb ==nil {_b .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _d .Error (_gbgf ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _agag :=_gdad (_dfeb ,_bcecf ,_efde ,_bbae ,_cbdgb ,_cbeb ,_gcgb ,_ccae ,_bagd );_agag !=nil {return _d .Wrap (_agag ,_gbgf ,"");};return nil ;
};const _ffag =5000;func (_dgce *Boxes )selectWithIndicator (_eabg *_dgb .NumSlice )(_ceff *Boxes ,_ded error ){const _abae ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dgce ==nil {return nil ,_d .Error (_abae ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _eabg ==nil {return nil ,_d .Error (_abae ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_eabg )!=len (*_dgce ){return nil ,_d .Error (_abae ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _geaf ,_babb int ;for _ccfc :=0;_ccfc < len (*_eabg );_ccfc ++{if _geaf ,_ded =_eabg .GetInt (_ccfc );_ded !=nil {return nil ,_d .Wrap (_ded ,_abae ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _geaf ==1{_babb ++;
};};if _babb ==len (*_dgce ){return _dgce ,nil ;};_gfdcc :=Boxes {};for _efcg :=0;_efcg < len (*_eabg );_efcg ++{_geaf =int ((*_eabg )[_efcg ]);if _geaf ==0{continue ;};_gfdcc =append (_gfdcc ,(*_dgce )[_efcg ]);};_ceff =&_gfdcc ;return _ceff ,nil ;};func (_baf *Bitmap )GetByteIndex (x ,y int )int {return y *_baf .RowStride +(x >>3)};
var _ _ea .Interface =&ClassedPoints {};func TstWordBitmapWithSpaces (t *_c .T ,scale ...int )*Bitmap {_dgde :=1;if len (scale )> 0{_dgde =scale [0];};_aebcf :=3;_bfdf :=9+7+15+2*_aebcf +2*_aebcf ;_acef :=5+_aebcf +5+2*_aebcf ;_bgfa :=New (_bfdf *_dgde ,_acef *_dgde );
_efeg :=&Bitmaps {};var _cabda *int ;_aebcf *=_dgde ;_abcb :=_aebcf ;_cabda =&_abcb ;_dfdbg :=_aebcf ;_bdgg :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );_bdgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,_aebcf );
_bdgg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );_bdgg =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,_aebcf );_bdgg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );
_bdgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );_bdgg =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,0);*_cabda =_aebcf ;_dfdbg =5*_dgde +_aebcf ;_bdgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );
_bdgg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,_aebcf );_bdgg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );_bdgg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );
_bdgg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );_bdgg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,1*_dgde );_bdgg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efeg ,_bdgg ,_cabda ,_dfdbg ,0);
TstWriteSymbols (t ,_efeg ,_bgfa );return _bgfa ;};func _ggd (_cbd *Bitmap ,_gff int ,_cad []byte )(_acc *Bitmap ,_ge error ){const _ffb ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _cbd ==nil {return nil ,_d .Error (_ffb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _gff < 1||_gff > 4{return nil ,_d .Error (_ffb ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cbd .Height <=1{return nil ,_d .Errorf (_ffb ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_cbd .Height );
};_acc =New (_cbd .Width /2,_cbd .Height /2);if _cad ==nil {_cad =_ddc ();};_bgd :=_adg (_cbd .RowStride ,2*_acc .RowStride );switch _gff {case 1:_ge =_bab (_cbd ,_acc ,_gff ,_cad ,_bgd );case 2:_ge =_fgb (_cbd ,_acc ,_gff ,_cad ,_bgd );case 3:_ge =_egc (_cbd ,_acc ,_gff ,_cad ,_bgd );
case 4:_ge =_ccb (_cbd ,_acc ,_gff ,_cad ,_bgd );};if _ge !=nil {return nil ,_ge ;};return _acc ,nil ;};func _fd (_dfd *Bitmap ,_dgd ,_bce int )(*Bitmap ,error ){const _egae ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _dfd ==nil {return nil ,_d .Error (_egae ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dgd <=0||_bce <=0{return nil ,_d .Error (_egae ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _dgd ==_bce {if _dgd ==1{_cd ,_eac :=_bafb (nil ,_dfd );if _eac !=nil {return nil ,_d .Wrap (_eac ,_egae ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _cd ,nil ;};if _dgd ==2||_dgd ==4||_dgd ==8{_bbf ,_be :=_bbbb (_dfd ,_dgd );
if _be !=nil {return nil ,_d .Wrap (_be ,_egae ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _bbf ,nil ;};};_cae :=_dgd *_dfd .Width ;_dce :=_bce *_dfd .Height ;_bga :=New (_cae ,_dce );_de :=_bga .RowStride ;
var (_fdd ,_ef ,_dbc ,_da ,_eaa int ;_fb byte ;_eef error ;);for _ef =0;_ef < _dfd .Height ;_ef ++{_fdd =_bce *_ef *_de ;for _dbc =0;_dbc < _dfd .Width ;_dbc ++{if _dgc :=_dfd .GetPixel (_dbc ,_ef );_dgc {_eaa =_dgd *_dbc ;for _da =0;_da < _dgd ;_da ++{_bga .setBit (_fdd *8+_eaa +_da );
};};};for _da =1;_da < _bce ;_da ++{_cbc :=_fdd +_da *_de ;for _dfde :=0;_dfde < _de ;_dfde ++{if _fb ,_eef =_bga .GetByte (_fdd +_dfde );_eef !=nil {return nil ,_d .Wrapf (_eef ,_egae ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_da );
};if _eef =_bga .SetByte (_cbc +_dfde ,_fb );_eef !=nil {return nil ,_d .Wrap (_eef ,_egae ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _bga ,nil ;};func (_adff CombinationOperator )String ()string {var _fdffe string ;
switch _adff {case CmbOpOr :_fdffe ="\u004f\u0052";case CmbOpAnd :_fdffe ="\u0041\u004e\u0044";case CmbOpXor :_fdffe ="\u0058\u004f\u0052";case CmbOpXNor :_fdffe ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_fdffe ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_fdffe ="\u004e\u004f\u0054";};return _fdffe ;};func (_degff *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _edcda ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _degff ==nil {return nil ,_d .Error (_edcda ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_d .Error (_edcda ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_gbgc :=len (_degff .Values );_cgfb :=&Bitmaps {Values :make ([]*Bitmap ,_gbgc ),Boxes :make ([]*_f .Rectangle ,_gbgc )};
var (_cbebe ,_bacc *Bitmap ;_acgb *_f .Rectangle ;_dbeaf error ;);for _fgeg :=0;_fgeg < _gbgc ;_fgeg ++{if _cbebe ,_dbeaf =_degff .GetBitmap (_fgeg );_dbeaf !=nil {return nil ,_d .Wrap (_dbeaf ,_edcda ,"");};if _acgb ,_dbeaf =_degff .GetBox (_fgeg );_dbeaf !=nil {return nil ,_d .Wrap (_dbeaf ,_edcda ,"");
};if _bacc ,_dbeaf =s .clipRectangle (_acgb ,nil );_dbeaf !=nil {return nil ,_d .Wrap (_dbeaf ,_edcda ,"");};if _bacc ,_dbeaf =_bacc .And (_cbebe );_dbeaf !=nil {return nil ,_d .Wrap (_dbeaf ,_edcda ,"");};_cgfb .Values [_fgeg ]=_bacc ;_cgfb .Boxes [_fgeg ]=_acgb ;
};return _cgfb ,nil ;};const (Vanilla Color =iota ;Chocolate ;);func Rect (x ,y ,w ,h int )(*_f .Rectangle ,error ){const _cfec ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_d .Errorf (_cfec ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_d .Error (_cfec ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_gfce :=_f .Rect (x ,y ,x +w ,y +h );return &_gfce ,nil ;
};type byWidth Bitmaps ;func (_fgaa *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _fgee ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fgaa .IntSlice .Size (){return 0,_d .Errorf (_fgee ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fgaa .XAtIndex (i )),nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func _cbb (_edeb ,_fbee int )int {if _edeb > _fbee {return _edeb ;};return _fbee ;};type CombinationOperator int ;func (_gbab *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _cdea ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_bafa ,_gcbag :=_gbab .selectByIndexes (idx );if _gcbag !=nil {return nil ,_d .Wrap (_gcbag ,_cdea ,"");};return _bafa ,nil ;};func (_egacc *ClassedPoints )Len ()int {return _egacc .IntSlice .Size ()};func _ddbb (_aebd *Bitmap ,_bfede ,_ffdf ,_egaeaf ,_begda int ,_ecbc RasterOperator ){if _bfede < 0{_egaeaf +=_bfede ;
_bfede =0;};_aefge :=_bfede +_egaeaf -_aebd .Width ;if _aefge > 0{_egaeaf -=_aefge ;};if _ffdf < 0{_begda +=_ffdf ;_ffdf =0;};_fgdd :=_ffdf +_begda -_aebd .Height ;if _fgdd > 0{_begda -=_fgdd ;};if _egaeaf <=0||_begda <=0{return ;};if (_bfede &7)==0{_cfbea (_aebd ,_bfede ,_ffdf ,_egaeaf ,_begda ,_ecbc );
}else {_bafeg (_aebd ,_bfede ,_ffdf ,_egaeaf ,_begda ,_ecbc );};};func _bebd (_gbe *Bitmap )(_bfdb *Bitmap ,_fbbc int ,_edfbf error ){const _eafd ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _gbe ==nil {return nil ,0,_d .Errorf (_eafd ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _faec ,_gbcca *Bitmap ;if _faec ,_edfbf =_bafb (nil ,_gbe );_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_cbag [13]int ;_dgda ,_gfdcg int ;);_ecb :=12;_gegg :=_dgb .NewNumSlice (_ecb +1);_dgdab :=_dgb .NewNumSlice (_ecb +1);var _feba *Boxes ;for _ffdd :=0;_ffdd <=_ecb ;_ffdd ++{if _ffdd ==0{if _gbcca ,_edfbf =_bafb (nil ,_faec );_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _gbcca ,_edfbf =_agcb (_faec ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _feba ,_edfbf =_gbcca .connComponentsBB (4);
_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"");};_cbag [_ffdd ]=len (*_feba );_gegg .AddInt (_cbag [_ffdd ]);switch _ffdd {case 0:_dgda =_cbag [0];default:_gfdcg =_cbag [_ffdd -1]-_cbag [_ffdd ];_dgdab .AddInt (_gfdcg );};_faec =_gbcca ;};_bccea :=true ;
_ddggd :=2;var _acgcd ,_gccb int ;for _eacb :=1;_eacb < len (*_dgdab );_eacb ++{if _acgcd ,_edfbf =_gegg .GetInt (_eacb );_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _bccea &&_acgcd < int (0.3*float32 (_dgda )){_ddggd =_eacb +1;_bccea =false ;};if _gfdcg ,_edfbf =_dgdab .GetInt (_eacb );_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _gfdcg > _gccb {_gccb =_gfdcg ;};};_eecb :=_gbe .XResolution ;if _eecb ==0{_eecb =150;};if _eecb > 110{_ddggd ++;};if _ddggd < 2{_b .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_ddggd =2;};_fbbc =_ddggd +1;if _bfdb ,_edfbf =_dded (nil ,_gbe ,_ddggd +1,1);_edfbf !=nil {return nil ,0,_d .Wrap (_edfbf ,_eafd ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _bfdb ,_fbbc ,nil ;
};func (_cefca *Selection )setOrigin (_fcd ,_egacf int ){_cefca .Cy ,_cefca .Cx =_fcd ,_egacf };func (_bggd *Bitmaps )AddBitmap (bm *Bitmap ){_bggd .Values =append (_bggd .Values ,bm )};func (_cba *Bitmap )SetDefaultPixel (){for _egd :=range _cba .Data {_cba .Data [_egd ]=byte (0xff);
};};func (_acgc *Bitmap )setTwoBytes (_fgf int ,_gcdg uint16 )error {if _fgf +1> len (_acgc .Data )-1{return _d .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fgf );
};_acgc .Data [_fgf ]=byte ((_gcdg &0xff00)>>8);_acgc .Data [_fgf +1]=byte (_gcdg &0xff);return nil ;};func (_eddb *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_dgag *Bitmaps ,_cadfc *Boxes ,_eege error ){const _aabc ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _eddb ==nil {return nil ,nil ,_d .Error (_aabc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_d .Error (_aabc ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _eddb .Zero (){_cadfc =&Boxes {};_dgag =&Bitmaps {};return _dgag ,_cadfc ,nil ;};switch components {case ComponentConn :_dgag =&Bitmaps {};if _cadfc ,_eege =_eddb .ConnComponents (_dgag ,8);_eege !=nil {return nil ,nil ,_d .Wrap (_eege ,_aabc ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_gbac ,_eabc :=MorphSequence (_eddb ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _eabc !=nil {return nil ,nil ,_d .Wrap (_eabc ,_aabc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _b .Log .IsLogLevel (_b .LogLevelTrace ){_b .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_gbac .String ());
};_dfdb :=&Bitmaps {};_cadfc ,_eabc =_gbac .ConnComponents (_dfdb ,8);if _eabc !=nil {return nil ,nil ,_d .Wrap (_eabc ,_aabc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _b .Log .IsLogLevel (_b .LogLevelTrace ){_b .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_dfdb .String ());
};if _dgag ,_eabc =_dfdb .ClipToBitmap (_eddb );_eabc !=nil {return nil ,nil ,_d .Wrap (_eabc ,_aabc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_gebb :=1;
var _ggb *Bitmap ;switch {case _eddb .XResolution <=200:_ggb =_eddb ;case _eddb .XResolution <=400:_gebb =2;_ggb ,_eege =_acd (_eddb ,1,0,0,0);if _eege !=nil {return nil ,nil ,_d .Wrap (_eege ,_aabc ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_gebb =4;_ggb ,_eege =_acd (_eddb ,1,1,0,0);if _eege !=nil {return nil ,nil ,_d .Wrap (_eege ,_aabc ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_ebdg ,_ ,_acfbf :=_bebd (_ggb );if _acfbf !=nil {return nil ,nil ,_d .Wrap (_acfbf ,_aabc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_aaag ,_acfbf :=_fbd (_ebdg ,_gebb );if _acfbf !=nil {return nil ,nil ,_d .Wrap (_acfbf ,_aabc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_cabg :=&Bitmaps {};if _cadfc ,_acfbf =_aaag .ConnComponents (_cabg ,4);_acfbf !=nil {return nil ,nil ,_d .Wrap (_acfbf ,_aabc ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _dgag ,_acfbf =_cabg .ClipToBitmap (_eddb );_acfbf !=nil {return nil ,nil ,_d .Wrap (_acfbf ,_aabc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_dgag ,_eege =_dgag .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _eege !=nil {return nil ,nil ,_d .Wrap (_eege ,_aabc ,"");};_cadfc ,_eege =_cadfc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _eege !=nil {return nil ,nil ,_d .Wrap (_eege ,_aabc ,"");};return _dgag ,_cadfc ,nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_egfc :=_ddgc (h ,w ,"");
_egfc .setOrigin (cy ,cx );var _afdd ,_gbdf int ;for _afdd =0;_afdd < h ;_afdd ++{for _gbdf =0;_gbdf < w ;_gbdf ++{_egfc .Data [_afdd ][_gbdf ]=tp ;};};return _egfc ;};type LocationFilter int ;type ClassedPoints struct{*Points ;_dgb .IntSlice ;_cbcd func (_bbdf ,_aabb int )bool ;
};func TstOSymbol (t *_c .T ,scale ...int )*Bitmap {_ebagg ,_feda :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_a .NoError (t ,_feda );return TstGetScaledSymbol (t ,_ebagg ,scale ...);};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func _bafb (_ccf ,_cff *Bitmap )(*Bitmap ,error ){if _cff ==nil {return nil ,_d .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cff ==_ccf {return _ccf ,nil ;
};if _ccf ==nil {_ccf =_cff .createTemplate ();copy (_ccf .Data ,_cff .Data );return _ccf ,nil ;};_fca :=_ccf .resizeImageData (_cff );if _fca !=nil {return nil ,_d .Wrap (_fca ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_ccf .Text =_cff .Text ;
copy (_ccf .Data ,_cff .Data );return _ccf ,nil ;};func (_gfgf *Bitmap )nextOnPixelLow (_dec ,_egbc ,_ddgdb ,_ecce ,_bede int )(_bbda _f .Point ,_cgba bool ,_bde error ){const _bgbg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_fega int ;_bbbg byte ;);_facd :=_bede *_ddgdb ;_gge :=_facd +(_ecce /8);if _bbbg ,_bde =_gfgf .GetByte (_gge );_bde !=nil {return _bbda ,false ,_d .Wrap (_bde ,_bgbg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _bbbg !=0{_debd :=_ecce -(_ecce %8)+7;for _fega =_ecce ;_fega <=_debd &&_fega < _dec ;_fega ++{if _gfgf .GetPixel (_fega ,_bede ){_bbda .X =_fega ;_bbda .Y =_bede ;return _bbda ,true ,nil ;};};};_eefe :=(_ecce /8)+1;_fega =8*_eefe ;var _aedb int ;
for _gge =_facd +_eefe ;_fega < _dec ;_gge ,_fega =_gge +1,_fega +8{if _bbbg ,_bde =_gfgf .GetByte (_gge );_bde !=nil {return _bbda ,false ,_d .Wrap (_bde ,_bgbg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _bbbg ==0{continue ;};for _aedb =0;_aedb < 8&&_fega < _dec ;_aedb ,_fega =_aedb +1,_fega +1{if _gfgf .GetPixel (_fega ,_bede ){_bbda .X =_fega ;_bbda .Y =_bede ;return _bbda ,true ,nil ;};};};for _gfc :=_bede +1;_gfc < _egbc ;_gfc ++{_facd =_gfc *_ddgdb ;
for _gge ,_fega =_facd ,0;_fega < _dec ;_gge ,_fega =_gge +1,_fega +8{if _bbbg ,_bde =_gfgf .GetByte (_gge );_bde !=nil {return _bbda ,false ,_d .Wrap (_bde ,_bgbg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _bbbg ==0{continue ;
};for _aedb =0;_aedb < 8&&_fega < _dec ;_aedb ,_fega =_aedb +1,_fega +1{if _gfgf .GetPixel (_fega ,_gfc ){_bbda .X =_fega ;_bbda .Y =_gfc ;return _bbda ,true ,nil ;};};};};return _bbda ,false ,nil ;};func (_efc *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _efc .Copy (),nil ;
};_cab ,_gbce :=_efc .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gbce !=nil {return nil ,_d .Wrap (_gbce ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _cab ,nil ;};func _fec ()(_dea [256]uint32 ){for _fbc :=0;
_fbc < 256;_fbc ++{if _fbc &0x01!=0{_dea [_fbc ]|=0xf;};if _fbc &0x02!=0{_dea [_fbc ]|=0xf0;};if _fbc &0x04!=0{_dea [_fbc ]|=0xf00;};if _fbc &0x08!=0{_dea [_fbc ]|=0xf000;};if _fbc &0x10!=0{_dea [_fbc ]|=0xf0000;};if _fbc &0x20!=0{_dea [_fbc ]|=0xf00000;
};if _fbc &0x40!=0{_dea [_fbc ]|=0xf000000;};if _fbc &0x80!=0{_dea [_fbc ]|=0xf0000000;};};return _dea ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _eded ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_cggc ,_gaef :=p1 .Width ,p1 .Height ;_edeg ,_dgdg :=p3 .Width ,p3 .Height ;if _dgb .Abs (_cggc -_edeg )> maxDiffW {return false ,nil ;};if _dgb .Abs (_gaef -_dgdg )> maxDiffH {return false ,nil ;};_gbbb :=int (delX +_dgb .Sign (delX )*0.5);_gacd :=int (delY +_dgb .Sign (delY )*0.5);
var _eacad error ;_fbbd :=p1 .CreateTemplate ();if _eacad =_fbbd .RasterOperation (0,0,_cggc ,_gaef ,PixSrc ,p1 ,0,0);_eacad !=nil {return false ,_d .Wrap (_eacad ,_eded ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _eacad =_fbbd .RasterOperation (_gbbb ,_gacd ,_cggc ,_gaef ,PixNotSrcAndDst ,p4 ,0,0);
_eacad !=nil {return false ,_d .Wrap (_eacad ,_eded ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fbbd .Zero (){return false ,nil ;};if _eacad =_fbbd .RasterOperation (_gbbb ,_gacd ,_edeg ,_dgdg ,PixSrc ,p3 ,0,0);_eacad !=nil {return false ,_d .Wrap (_eacad ,_eded ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _eacad =_fbbd .RasterOperation (0,0,_edeg ,_dgdg ,PixNotSrcAndDst ,p2 ,0,0);_eacad !=nil {return false ,_d .Wrap (_eacad ,_eded ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fbbd .Zero (),nil ;};func (_gda *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bedb *Boxes ,_gdd error ){const _fbece ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _gda ==nil {return nil ,_d .Error (_fbece ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_d .Error (_fbece ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _bedb ,_gdd =_gda .connComponentsBB (connectivity );_gdd !=nil {return nil ,_d .Wrap (_gdd ,_fbece ,"");};}else {if _bedb ,_gdd =_gda .connComponentsBitmapsBB (bms ,connectivity );_gdd !=nil {return nil ,_d .Wrap (_gdd ,_fbece ,"");};
};return _bedb ,nil ;};func _cbdg (_gfagf ,_deaf *Bitmap ,_ggab CombinationOperator )*Bitmap {_dbba :=New (_gfagf .Width ,_gfagf .Height );for _cccc :=0;_cccc < len (_dbba .Data );_cccc ++{_dbba .Data [_cccc ]=_gffb (_gfagf .Data [_cccc ],_deaf .Data [_cccc ],_ggab );
};return _dbba ;};func (_aba *Boxes )makeSizeIndicator (_gca ,_gfge int ,_fecb LocationFilter ,_eebab SizeComparison )*_dgb .NumSlice {_febe :=&_dgb .NumSlice {};var _gceg ,_eacc ,_cbfd int ;for _ ,_efag :=range *_aba {_gceg =0;_eacc ,_cbfd =_efag .Dx (),_efag .Dy ();
switch _fecb {case LocSelectWidth :if (_eebab ==SizeSelectIfLT &&_eacc < _gca )||(_eebab ==SizeSelectIfGT &&_eacc > _gca )||(_eebab ==SizeSelectIfLTE &&_eacc <=_gca )||(_eebab ==SizeSelectIfGTE &&_eacc >=_gca ){_gceg =1;};case LocSelectHeight :if (_eebab ==SizeSelectIfLT &&_cbfd < _gfge )||(_eebab ==SizeSelectIfGT &&_cbfd > _gfge )||(_eebab ==SizeSelectIfLTE &&_cbfd <=_gfge )||(_eebab ==SizeSelectIfGTE &&_cbfd >=_gfge ){_gceg =1;
};case LocSelectIfEither :if (_eebab ==SizeSelectIfLT &&(_cbfd < _gfge ||_eacc < _gca ))||(_eebab ==SizeSelectIfGT &&(_cbfd > _gfge ||_eacc > _gca ))||(_eebab ==SizeSelectIfLTE &&(_cbfd <=_gfge ||_eacc <=_gca ))||(_eebab ==SizeSelectIfGTE &&(_cbfd >=_gfge ||_eacc >=_gca )){_gceg =1;
};case LocSelectIfBoth :if (_eebab ==SizeSelectIfLT &&(_cbfd < _gfge &&_eacc < _gca ))||(_eebab ==SizeSelectIfGT &&(_cbfd > _gfge &&_eacc > _gca ))||(_eebab ==SizeSelectIfLTE &&(_cbfd <=_gfge &&_eacc <=_gca ))||(_eebab ==SizeSelectIfGTE &&(_cbfd >=_gfge &&_eacc >=_gca )){_gceg =1;
};};_febe .AddInt (_gceg );};return _febe ;};func _ccef (_bcad *Bitmap ,_feca *_dgb .Stack ,_abge ,_eaed ,_aaga int )(_baad *_f .Rectangle ,_dgcc error ){const _begdg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _bcad ==nil {return nil ,_d .Error (_begdg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _feca ==nil {return nil ,_d .Error (_begdg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _aaga {case 4:if _baad ,_dgcc =_fadff (_bcad ,_feca ,_abge ,_eaed );_dgcc !=nil {return nil ,_d .Wrap (_dgcc ,_begdg ,"");
};return _baad ,nil ;case 8:if _baad ,_dgcc =_ddab (_bcad ,_feca ,_abge ,_eaed );_dgcc !=nil {return nil ,_d .Wrap (_dgcc ,_begdg ,"");};return _baad ,nil ;default:return nil ,_d .Errorf (_begdg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_aaga );
};};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _dege (d ,s ,hSize ,vSize )};func (_dafg *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _eca ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_dafg .Values )==0{return nil ,_d .Error (_eca ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cfbc :=&BitmapsArray {};_dafg .SortByHeight ();_bcafg :=-1;_dbcd :=-1;for _agbb :=0;_agbb < len (_dafg .Values );
_agbb ++{_afdff :=_dafg .Values [_agbb ].Height ;if _afdff > _bcafg {_bcafg =_afdff ;_dbcd ++;_cfbc .Values =append (_cfbc .Values ,&Bitmaps {});};_cfbc .Values [_dbcd ].AddBitmap (_dafg .Values [_agbb ]);};return _cfbc ,nil ;};func (_faf *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_faf .Width ,Height :_faf .Height ,RowStride :_faf .RowStride ,Color :_faf .Color ,Text :_faf .Text ,BitmapNumber :_faf .BitmapNumber ,Special :_faf .Special ,Data :make ([]byte ,len (_faf .Data ))};
};func (_cfd *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cfd .addBorderGeneral (left ,right ,top ,bot ,val );};func (_dbfbb *Bitmaps )HeightSorter ()func (_ecba ,_dgbe int )bool {return func (_fcecff ,_ecee int )bool {_fbafg :=_dbfbb .Values [_fcecff ].Height < _dbfbb .Values [_ecee ].Height ;
_b .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_dbfbb .Values [_fcecff ].Height ,_dbfbb .Values [_ecee ].Height ,_fbafg );return _fbafg ;};};type Boxes []*_f .Rectangle ;func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _gffb (oldByte ,newByte ,op );
};func (_feec *Bitmaps )String ()string {_gcbf :=_dg .Builder {};for _ ,_dabd :=range _feec .Values {_gcbf .WriteString (_dabd .String ());_gcbf .WriteRune ('\n');};return _gcbf .String ();};func TstESymbol (t *_c .T ,scale ...int )*Bitmap {_agcf ,_dgbf :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_a .NoError (t ,_dgbf );return TstGetScaledSymbol (t ,_agcf ,scale ...);};func (_gege *Bitmap )Zero ()bool {_ddaff :=_gege .Width /8;_bdac :=_gege .Width &7;var _abg byte ;if _bdac !=0{_abg =byte (0xff<<uint (8-_bdac ));};var _gec ,_acbg ,_dcfc int ;for _acbg =0;
_acbg < _gege .Height ;_acbg ++{_gec =_gege .RowStride *_acbg ;for _dcfc =0;_dcfc < _ddaff ;_dcfc ,_gec =_dcfc +1,_gec +1{if _gege .Data [_gec ]!=0{return false ;};};if _bdac > 0{if _gege .Data [_gec ]&_abg !=0{return false ;};};};return true ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ebdga (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_bddb *Bitmap )resizeImageData (_ccd *Bitmap )error {if _ccd ==nil {return _d .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bddb .SizesEqual (_ccd ){return nil ;};_bddb .Data =make ([]byte ,len (_ccd .Data ));_bddb .Width =_ccd .Width ;_bddb .Height =_ccd .Height ;_bddb .RowStride =_ccd .RowStride ;return nil ;};func _fadff (_bfbec *Bitmap ,_defda *_dgb .Stack ,_dcdb ,_bebe int )(_fbfe *_f .Rectangle ,_edddb error ){const _efee ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bfbec ==nil {return nil ,_d .Error (_efee ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _defda ==nil {return nil ,_d .Error (_efee ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_dffgb ,_cbdd :=_bfbec .Width ,_bfbec .Height ;_bgfd :=_dffgb -1;_egbd :=_cbdd -1;if _dcdb < 0||_dcdb > _bgfd ||_bebe < 0||_bebe > _egbd ||!_bfbec .GetPixel (_dcdb ,_bebe ){return nil ,nil ;};var _bdef *_f .Rectangle ;_bdef ,_edddb =Rect (100000,100000,0,0);
if _edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"");};if _edddb =_ggbc (_defda ,_dcdb ,_dcdb ,_bebe ,1,_egbd ,_bdef );_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _edddb =_ggbc (_defda ,_dcdb ,_dcdb ,_bebe +1,-1,_egbd ,_bdef );
_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bdef .Min .X ,_bdef .Max .X =_dcdb ,_dcdb ;_bdef .Min .Y ,_bdef .Max .Y =_bebe ,_bebe ;var (_ddfc *fillSegment ;
_ddcac int ;);for _defda .Len ()> 0{if _ddfc ,_edddb =_ffcd (_defda );_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"");};_bebe =_ddfc ._aeec ;for _dcdb =_ddfc ._edfg ;_dcdb >=0&&_bfbec .GetPixel (_dcdb ,_bebe );_dcdb --{if _edddb =_bfbec .SetPixel (_dcdb ,_bebe ,0);
_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"");};};if _dcdb >=_ddfc ._edfg {for _dcdb ++;_dcdb <=_ddfc ._fdce &&_dcdb <=_bgfd &&!_bfbec .GetPixel (_dcdb ,_bebe );_dcdb ++{};_ddcac =_dcdb ;if !(_dcdb <=_ddfc ._fdce &&_dcdb <=_bgfd ){continue ;};
}else {_ddcac =_dcdb +1;if _ddcac < _ddfc ._edfg -1{if _edddb =_ggbc (_defda ,_ddcac ,_ddfc ._edfg -1,_ddfc ._aeec ,-_ddfc ._cacc ,_egbd ,_bdef );_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_dcdb =_ddfc ._edfg +1;};for {for ;_dcdb <=_bgfd &&_bfbec .GetPixel (_dcdb ,_bebe );_dcdb ++{if _edddb =_bfbec .SetPixel (_dcdb ,_bebe ,0);_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _edddb =_ggbc (_defda ,_ddcac ,_dcdb -1,_ddfc ._aeec ,_ddfc ._cacc ,_egbd ,_bdef );
_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dcdb > _ddfc ._fdce +1{if _edddb =_ggbc (_defda ,_ddfc ._fdce +1,_dcdb -1,_ddfc ._aeec ,-_ddfc ._cacc ,_egbd ,_bdef );_edddb !=nil {return nil ,_d .Wrap (_edddb ,_efee ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _dcdb ++;_dcdb <=_ddfc ._fdce &&_dcdb <=_bgfd &&!_bfbec .GetPixel (_dcdb ,_bebe );_dcdb ++{};_ddcac =_dcdb ;if !(_dcdb <=_ddfc ._fdce &&_dcdb <=_bgfd ){break ;};};};_bdef .Max .X ++;_bdef .Max .Y ++;return _bdef ,nil ;};func TstWordBitmap (t *_c .T ,scale ...int )*Bitmap {_gaed :=1;
if len (scale )> 0{_gaed =scale [0];};_gegb :=3;_dega :=9+7+15+2*_gegb ;_fffbc :=5+_gegb +5;_fgfc :=New (_dega *_gaed ,_fffbc *_gaed );_feeg :=&Bitmaps {};var _cfaf *int ;_gegb *=_gaed ;_baaa :=0;_cfaf =&_baaa ;_aedd :=0;_ebfe :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,_gegb );_ebfe =TstISymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,_gegb );_ebfe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,0);*_cfaf =0;_aedd =5*_gaed +_gegb ;_ebfe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,_gegb );
_ebfe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );
_ebfe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,1*_gaed );_ebfe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_feeg ,_ebfe ,_cfaf ,_aedd ,0);TstWriteSymbols (t ,_feeg ,_fgfc );return _fgfc ;};type Color int ;func (_dcd *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ffbc *Boxes ,_abga error ){const _fed ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _dcd ==nil {return nil ,_d .Error (_fed ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_dcd )==0{return _dcd ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_fed ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_d .Errorf (_fed ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_bgee :=_dcd .makeSizeIndicator (width ,height ,tp ,relation );_cffc ,_abga :=_dcd .selectWithIndicator (_bgee );if _abga !=nil {return nil ,_d .Wrap (_abga ,_fed ,"");};return _cffc ,nil ;};func (_ccdee *Points )Add (pt *Points )error {const _cgcc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _ccdee ==nil {return _d .Error (_cgcc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _d .Error (_cgcc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_ccdee =append (*_ccdee ,*pt ...);return nil ;};func (_ggf *Bitmap )setEightBytes (_egcf int ,_eea uint64 )error {_defe :=_ggf .RowStride -(_egcf %_ggf .RowStride );if _ggf .RowStride !=_ggf .Width >>3{_defe --;};if _defe >=8{return _ggf .setEightFullBytes (_egcf ,_eea );
};return _ggf .setEightPartlyBytes (_egcf ,_defe ,_eea );};func _fgb (_eb ,_bcd *Bitmap ,_aed int ,_fgbd []byte ,_bcee int )(_gee error ){const _gbc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_gad ,_fgd ,_aaf ,_fgbdf ,_afd ,_cea ,_cga ,_add int ;_dbb ,_cfe ,_aeaa ,_gea uint32 ;_fee ,_fge byte ;_cc uint16 ;);_gaa :=make ([]byte ,4);_agaa :=make ([]byte ,4);for _aaf =0;_aaf < _eb .Height -1;_aaf ,_fgbdf =_aaf +2,_fgbdf +1{_gad =_aaf *_eb .RowStride ;
_fgd =_fgbdf *_bcd .RowStride ;for _afd ,_cea =0,0;_afd < _bcee ;_afd ,_cea =_afd +4,_cea +1{for _cga =0;_cga < 4;_cga ++{_add =_gad +_afd +_cga ;if _add <=len (_eb .Data )-1&&_add < _gad +_eb .RowStride {_gaa [_cga ]=_eb .Data [_add ];}else {_gaa [_cga ]=0x00;
};_add =_gad +_eb .RowStride +_afd +_cga ;if _add <=len (_eb .Data )-1&&_add < _gad +(2*_eb .RowStride ){_agaa [_cga ]=_eb .Data [_add ];}else {_agaa [_cga ]=0x00;};};_dbb =_ac .BigEndian .Uint32 (_gaa );_cfe =_ac .BigEndian .Uint32 (_agaa );_aeaa =_dbb &_cfe ;
_aeaa |=_aeaa <<1;_gea =_dbb |_cfe ;_gea &=_gea <<1;_cfe =_aeaa |_gea ;_cfe &=0xaaaaaaaa;_dbb =_cfe |(_cfe <<7);_fee =byte (_dbb >>24);_fge =byte ((_dbb >>8)&0xff);_add =_fgd +_cea ;if _add +1==len (_bcd .Data )-1||_add +1>=_fgd +_bcd .RowStride {if _gee =_bcd .SetByte (_add ,_fgbd [_fee ]);
_gee !=nil {return _d .Wrapf (_gee ,_gbc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_add );};}else {_cc =(uint16 (_fgbd [_fee ])<<8)|uint16 (_fgbd [_fge ]);if _gee =_bcd .setTwoBytes (_add ,_cc );_gee !=nil {return _d .Wrapf (_gee ,_gbc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_add );
};_cea ++;};};};return nil ;};type shift int ;const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _bdb ()(_gg [256]uint16 ){for _fda :=0;_fda < 256;_fda ++{if _fda &0x01!=0{_gg [_fda ]|=0x3;
};if _fda &0x02!=0{_gg [_fda ]|=0xc;};if _fda &0x04!=0{_gg [_fda ]|=0x30;};if _fda &0x08!=0{_gg [_fda ]|=0xc0;};if _fda &0x10!=0{_gg [_fda ]|=0x300;};if _fda &0x20!=0{_gg [_fda ]|=0xc00;};if _fda &0x40!=0{_gg [_fda ]|=0x3000;};if _fda &0x80!=0{_gg [_fda ]|=0xc000;
};};return _gg ;};func _ggaed (_egdf ,_dfdf *Bitmap ,_dccaf *Selection )(*Bitmap ,error ){const _acfa ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _fba ,_gbeb int ;if _dfdf ==nil {return nil ,_d .Error (_acfa ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dccaf ==nil {return nil ,_d .Error (_acfa ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_fba =_dccaf .Width ;_gbeb =_dccaf .Height ;if _fba ==0||_gbeb ==0{return nil ,_d .Error (_acfa ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _egdf ==nil {return _dfdf .createTemplate (),nil ;};if _edge :=_egdf .resizeImageData (_dfdf );_edge !=nil {return nil ,_edge ;};return _egdf ,nil ;};type BoundaryCondition int ;func _cfaa ()[]int {_cdb :=make ([]int ,256);_cdb [0]=0;_cdb [1]=7;var _bebb int ;
for _bebb =2;_bebb < 4;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -2]+6;};for _bebb =4;_bebb < 8;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -4]+5;};for _bebb =8;_bebb < 16;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -8]+4;};for _bebb =16;_bebb < 32;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -16]+3;
};for _bebb =32;_bebb < 64;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -32]+2;};for _bebb =64;_bebb < 128;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -64]+1;};for _bebb =128;_bebb < 256;_bebb ++{_cdb [_bebb ]=_cdb [_bebb -128];};return _cdb ;};func (_adbg *Bitmap )countPixels ()int {var (_ffce int ;
_dga uint8 ;_bcce byte ;_ccca int ;);_ecec :=_adbg .RowStride ;_ade :=uint (_adbg .Width &0x07);if _ade !=0{_dga =uint8 ((0xff<<(8-_ade ))&0xff);_ecec --;};for _cag :=0;_cag < _adbg .Height ;_cag ++{for _ccca =0;_ccca < _ecec ;_ccca ++{_bcce =_adbg .Data [_cag *_adbg .RowStride +_ccca ];
_ffce +=int (_babc [_bcce ]);};if _ade !=0{_ffce +=int (_babc [_adbg .Data [_cag *_adbg .RowStride +_ccca ]&_dga ]);};};return _ffce ;};func (_cef *Bitmap )setBit (_cbcf int ){_cef .Data [(_cbcf >>3)]|=0x80>>uint (_cbcf &7)};func _bbbb (_edf *Bitmap ,_aea int )(*Bitmap ,error ){const _ega ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _edf ==nil {return nil ,_d .Error (_ega ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aea ==1{return _bafb (nil ,_edf );};if _aea !=2&&_aea !=4&&_aea !=8{return nil ,_d .Error (_ega ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_gac :=_aea *_edf .Width ;_gc :=_aea *_edf .Height ;_dda :=New (_gac ,_gc );var _aga error ;switch _aea {case 2:_aga =_bg (_dda ,_edf );case 4:_aga =_ddg (_dda ,_edf );case 8:_aga =_dbd (_dda ,_edf );};if _aga !=nil {return nil ,_d .Wrap (_aga ,_ega ,"");
};return _dda ,nil ;};func _deaa (_cbbb ,_deffg *Bitmap ,_ffbb ,_ffaa int )(_fedb error ){const _efgb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dbgf ,_aaafg ,_afee ,_faga int ;_fagc ,_fagbe ,_cgef ,_dbbaf ,_beebb ,_fage ,_gafg byte ;
);for _dbgf =0;_dbgf < _ffbb ;_dbgf ++{_afee =_dbgf *_cbbb .RowStride ;_faga =_dbgf *_deffg .RowStride ;for _aaafg =0;_aaafg < _ffaa ;_aaafg ++{_fagc ,_fedb =_cbbb .GetByte (_afee +_aaafg );if _fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_fagbe ,_fedb =_deffg .GetByte (_faga +_aaafg );if _fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _dbgf > 0{_cgef ,_fedb =_cbbb .GetByte (_afee -_cbbb .RowStride +_aaafg );if _fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0069\u0020\u003e \u0030");
};_fagc |=_cgef ;};if _aaafg > 0{_dbbaf ,_fedb =_cbbb .GetByte (_afee +_aaafg -1);if _fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u006a\u0020\u003e \u0030");};_fagc |=_dbbaf <<7;};_fagc &=_fagbe ;if _fagc ==0||(^_fagc )==0{if _fedb =_cbbb .SetByte (_afee +_aaafg ,_fagc );
_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_gafg =_fagc ;_fagc =(_fagc |(_fagc >>1)|(_fagc <<1))&_fagbe ;if (_fagc ^_gafg )==0{if _fedb =_cbbb .SetByte (_afee +_aaafg ,_fagc );
_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dbgf =_ffbb -1;_dbgf >=0;_dbgf --{_afee =_dbgf *_cbbb .RowStride ;_faga =_dbgf *_deffg .RowStride ;
for _aaafg =_ffaa -1;_aaafg >=0;_aaafg --{if _fagc ,_fedb =_cbbb .GetByte (_afee +_aaafg );_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _fagbe ,_fedb =_deffg .GetByte (_faga +_aaafg );
_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dbgf < _ffbb -1{if _beebb ,_fedb =_cbbb .GetByte (_afee +_cbbb .RowStride +_aaafg );_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_fagc |=_beebb ;};if _aaafg < _ffaa -1{if _fage ,_fedb =_cbbb .GetByte (_afee +_aaafg +1);_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_fagc |=_fage >>7;
};_fagc &=_fagbe ;if _fagc ==0||(^_fagc )==0{if _fedb =_cbbb .SetByte (_afee +_aaafg ,_fagc );_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_gafg =_fagc ;_fagc =(_fagc |(_fagc >>1)|(_fagc <<1))&_fagbe ;if (_fagc ^_gafg )==0{if _fedb =_cbbb .SetByte (_afee +_aaafg ,_fagc );_fedb !=nil {return _d .Wrap (_fedb ,_efgb ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_bgaa *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dgeb *Bitmaps ,_cbfe error ){const _aeba ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _bgaa ==nil {return nil ,_d .Error (_aeba ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_aeba ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_aeba ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_gbge ,_cbfe :=_bgaa .makeSizeIndicator (width ,height ,tp ,relation );if _cbfe !=nil {return nil ,_d .Wrap (_cbfe ,_aeba ,"");};_dgeb ,_cbfe =_bgaa .selectByIndicator (_gbge );if _cbfe !=nil {return nil ,_d .Wrap (_cbfe ,_aeba ,"");};return _dgeb ,nil ;
};func (_cgae *Bitmap )connComponentsBitmapsBB (_fcffe *Bitmaps ,_bfg int )(_gccc *Boxes ,_dffg error ){const _fffgd ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _bfg !=4&&_bfg !=8{return nil ,_d .Error (_fffgd ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _fcffe ==nil {return nil ,_d .Error (_fffgd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_fcffe .Values )> 0{return nil ,_d .Error (_fffgd ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");
};if _cgae .Zero (){return &Boxes {},nil ;};var (_efga ,_faea ,_degfd ,_gdae *Bitmap ;);_cgae .setPadBits (0);if _efga ,_dffg =_bafb (nil ,_cgae );_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"\u0062\u006d\u0031");};if _faea ,_dffg =_bafb (nil ,_cgae );
_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"\u0062\u006d\u0032");};_fgdab :=&_dgb .Stack {};_fgdab .Aux =&_dgb .Stack {};_gccc =&Boxes {};var (_cafc ,_ddd int ;_afc _f .Point ;_afcb bool ;_agec *_f .Rectangle ;);for {if _afc ,_afcb ,_dffg =_efga .nextOnPixel (_cafc ,_ddd );
_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"");};if !_afcb {break ;};if _agec ,_dffg =_ccef (_efga ,_fgdab ,_afc .X ,_afc .Y ,_bfg );_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"");};if _dffg =_gccc .Add (_agec );_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"");
};if _degfd ,_dffg =_efga .clipRectangle (_agec ,nil );_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"\u0062\u006d\u0033");};if _gdae ,_dffg =_faea .clipRectangle (_agec ,nil );_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"\u0062\u006d\u0034");
};if _ ,_dffg =_fadb (_degfd ,_degfd ,_gdae );_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _dffg =_faea .RasterOperation (_agec .Min .X ,_agec .Min .Y ,_agec .Dx (),_agec .Dy (),PixSrcXorDst ,_degfd ,0,0);
_dffg !=nil {return nil ,_d .Wrap (_dffg ,_fffgd ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_fcffe .AddBitmap (_degfd );_cafc =_afc .X ;_ddd =_afc .Y ;};_fcffe .Boxes =*_gccc ;return _gccc ,nil ;};func _ffca (_dbbeg ,_baagb *Bitmap ,_gcbc *Selection )(*Bitmap ,error ){const _abgg ="\u006f\u0070\u0065\u006e";
var _dbcae error ;_dbbeg ,_dbcae =_ggaed (_dbbeg ,_baagb ,_gcbc );if _dbcae !=nil {return nil ,_d .Wrap (_dbcae ,_abgg ,"");};_ecgdb ,_dbcae :=_edca (nil ,_baagb ,_gcbc );if _dbcae !=nil {return nil ,_d .Wrap (_dbcae ,_abgg ,"");};_ ,_dbcae =_aegg (_dbbeg ,_ecgdb ,_gcbc );
if _dbcae !=nil {return nil ,_d .Wrap (_dbcae ,_abgg ,"");};return _dbbeg ,nil ;};func (_efab *ClassedPoints )Swap (i ,j int ){_efab .IntSlice [i ],_efab .IntSlice [j ]=_efab .IntSlice [j ],_efab .IntSlice [i ];};type Component int ;func (_gfgc *Bitmap )addPadBits ()(_efbf error ){const _gbb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_aee :=_gfgc .Width %8;if _aee ==0{return nil ;};_ddgd :=_gfgc .Width /8;_dee :=_ce .NewReader (_gfgc .Data );_dbbb :=make ([]byte ,_gfgc .Height *_gfgc .RowStride );_gcf :=_ce .NewWriterMSB (_dbbb );_adf :=make ([]byte ,_ddgd );var (_fgg int ;_cada uint64 ;
);for _fgg =0;_fgg < _gfgc .Height ;_fgg ++{if _ ,_efbf =_dee .Read (_adf );_efbf !=nil {return _d .Wrap (_efbf ,_gbb ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_efbf =_gcf .Write (_adf );_efbf !=nil {return _d .Wrap (_efbf ,_gbb ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _cada ,_efbf =_dee .ReadBits (byte (_aee ));_efbf !=nil {return _d .Wrap (_efbf ,_gbb ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _efbf =_gcf .WriteByte (byte (_cada )<<uint (8-_aee ));_efbf !=nil {return _d .Wrap (_efbf ,_gbb ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_gfgc .Data =_gcf .Data ();return nil ;};func (_ddgf *byHeight )Less (i ,j int )bool {return _ddgf .Values [i ].Height < _ddgf .Values [j ].Height };func _cfbea (_fbag *Bitmap ,_eada ,_efcga int ,_eaac ,_bcaf int ,_ecdc RasterOperator ){var (_decc int ;
_acdb byte ;_eacbb ,_ccgg int ;_acbed int ;);_ccge :=_eaac >>3;_aafd :=_eaac &7;if _aafd > 0{_acdb =_becd [_aafd ];};_decc =_fbag .RowStride *_efcga +(_eada >>3);switch _ecdc {case PixClr :for _eacbb =0;_eacbb < _bcaf ;_eacbb ++{_acbed =_decc +_eacbb *_fbag .RowStride ;
for _ccgg =0;_ccgg < _ccge ;_ccgg ++{_fbag .Data [_acbed ]=0x0;_acbed ++;};if _aafd > 0{_fbag .Data [_acbed ]=_cbcdc (_fbag .Data [_acbed ],0x0,_acdb );};};case PixSet :for _eacbb =0;_eacbb < _bcaf ;_eacbb ++{_acbed =_decc +_eacbb *_fbag .RowStride ;for _ccgg =0;
_ccgg < _ccge ;_ccgg ++{_fbag .Data [_acbed ]=0xff;_acbed ++;};if _aafd > 0{_fbag .Data [_acbed ]=_cbcdc (_fbag .Data [_acbed ],0xff,_acdb );};};case PixNotDst :for _eacbb =0;_eacbb < _bcaf ;_eacbb ++{_acbed =_decc +_eacbb *_fbag .RowStride ;for _ccgg =0;
_ccgg < _ccge ;_ccgg ++{_fbag .Data [_acbed ]=^_fbag .Data [_acbed ];_acbed ++;};if _aafd > 0{_fbag .Data [_acbed ]=_cbcdc (_fbag .Data [_acbed ],^_fbag .Data [_acbed ],_acdb );};};};};type Point struct{X ,Y float32 ;};type fillSegment struct{_edfg int ;
_fdce int ;_aeec int ;_cacc int ;};func (_fece *Bitmap )CountPixels ()int {return _fece .countPixels ()};type Points []Point ;func (_beef Points )GetIntY (i int )(int ,error ){if i >=len (_beef ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_beef [i ].Y ),nil ;};var _babc [256]uint8 ;func Extract (roi _f .Rectangle ,src *Bitmap )(*Bitmap ,error ){_gadcd :=New (roi .Dx (),roi .Dy ());_eece :=roi .Min .X &0x07;_daa :=8-_eece ;_beeb :=uint (8-_gadcd .Width &0x07);_dcg :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );
_bgcd :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_gfdd :=_gadcd .RowStride ==_bgcd +1-_dcg ;var _gdfd int ;for _aaec :=roi .Min .Y ;_aaec < roi .Max .Y ;_aaec ++{_geed :=_dcg ;_ddca :=_gdfd ;switch {case _dcg ==_bgcd :_eaccc ,_affa :=src .GetByte (_geed );
if _affa !=nil {return nil ,_affa ;};_eaccc <<=uint (_eece );_affa =_gadcd .SetByte (_ddca ,_cfdc (_beeb ,_eaccc ));if _affa !=nil {return nil ,_affa ;};case _eece ==0:for _aec :=_dcg ;_aec <=_bgcd ;_aec ++{_bcbb ,_bfcg :=src .GetByte (_geed );if _bfcg !=nil {return nil ,_bfcg ;
};_geed ++;if _aec ==_bgcd &&_gfdd {_bcbb =_cfdc (_beeb ,_bcbb );};_bfcg =_gadcd .SetByte (_ddca ,_bcbb );if _bfcg !=nil {return nil ,_bfcg ;};_ddca ++;};default:_bdff :=_egf (src ,_gadcd ,uint (_eece ),uint (_daa ),_beeb ,_dcg ,_bgcd ,_gfdd ,_geed ,_ddca );
if _bdff !=nil {return nil ,_bdff ;};};_dcg +=src .RowStride ;_bgcd +=src .RowStride ;_gdfd +=_gadcd .RowStride ;};return _gadcd ,nil ;};func _ffcd (_cgff *_dgb .Stack )(_adbba *fillSegment ,_dfdfa error ){const _affab ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _cgff ==nil {return nil ,_d .Error (_affab ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cgff .Aux ==nil {return nil ,_d .Error (_affab ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_gdgce ,_afef :=_cgff .Pop ();if !_afef {return nil ,nil ;};_fagbf ,_afef :=_gdgce .(*fillSegment );if !_afef {return nil ,_d .Error (_affab ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_adbba =&fillSegment {_fagbf ._edfg ,_fagbf ._fdce ,_fagbf ._aeec +_fagbf ._cacc ,_fagbf ._cacc };_cgff .Aux .Push (_fagbf );return _adbba ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_ecdf bool ,_gadb error ){const _acaa ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_ceca ,_acgg :=p1 .Width ,p1 .Height ;_aade ,_ddbag :=p3 .Width ,p3 .Height ;if _dgb .Abs (_ceca -_aade )> maxDiffW {return false ,nil ;};if _dgb .Abs (_acgg -_ddbag )> maxDiffH {return false ,nil ;};_bbfe :=int (float32 (area1 )*(1.0-rank )+0.5);_afcbf :=int (float32 (area3 )*(1.0-rank )+0.5);
var _bgdgd ,_ebaa int ;if delX >=0{_bgdgd =int (delX +0.5);}else {_bgdgd =int (delX -0.5);};if delY >=0{_ebaa =int (delY +0.5);}else {_ebaa =int (delY -0.5);};_fadf :=p1 .CreateTemplate ();if _gadb =_fadf .RasterOperation (0,0,_ceca ,_acgg ,PixSrc ,p1 ,0,0);
_gadb !=nil {return false ,_d .Wrap (_gadb ,_acaa ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gadb =_fadf .RasterOperation (_bgdgd ,_ebaa ,_ceca ,_acgg ,PixNotSrcAndDst ,p4 ,0,0);_gadb !=nil {return false ,_d .Wrap (_gadb ,_acaa ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_ecdf ,_gadb =_fadf .ThresholdPixelSum (_bbfe ,tab8 );if _gadb !=nil {return false ,_d .Wrap (_gadb ,_acaa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _ecdf {return false ,nil ;};if _gadb =_fadf .RasterOperation (_bgdgd ,_ebaa ,_aade ,_ddbag ,PixSrc ,p3 ,0,0);
_gadb !=nil {return false ,_d .Wrap (_gadb ,_acaa ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gadb =_fadf .RasterOperation (0,0,_aade ,_ddbag ,PixNotSrcAndDst ,p2 ,0,0);_gadb !=nil {return false ,_d .Wrap (_gadb ,_acaa ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_ecdf ,_gadb =_fadf .ThresholdPixelSum (_afcbf ,tab8 );if _gadb !=nil {return false ,_d .Wrap (_gadb ,_acaa ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_ecdf ,nil ;};func _dded (_bac ,_ebc *Bitmap ,_gcab ,_aacb int )(*Bitmap ,error ){const _gbcd ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _ebc ==nil {return nil ,_d .Error (_gbcd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gcab < 1||_aacb < 1{return nil ,_d .Error (_gbcd ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _gcab ==1&&_aacb ==1{return _ebc .Copy (),nil ;};if _gcab ==1||_aacb ==1{_aega :=SelCreateBrick (_aacb ,_gcab ,_aacb /2,_gcab /2,SelHit );var _ccdeb error ;_bac ,_ccdeb =_fdga (_bac ,_ebc ,_aega );if _ccdeb !=nil {return nil ,_d .Wrap (_ccdeb ,_gbcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bac ,nil ;};_dgcf :=SelCreateBrick (1,_gcab ,0,_gcab /2,SelHit );_bebc :=SelCreateBrick (_aacb ,1,_aacb /2,0,SelHit );_cbe ,_fbbdf :=_aegg (nil ,_ebc ,_dgcf );if _fbbdf !=nil {return nil ,_d .Wrap (_fbbdf ,_gbcd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _bac ,_fbbdf =_aegg (_bac ,_cbe ,_bebc );_fbbdf !=nil {return nil ,_d .Wrap (_fbbdf ,_gbcd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fbbdf =_edca (_cbe ,_bac ,_dgcf );_fbbdf !=nil {return nil ,_d .Wrap (_fbbdf ,_gbcd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fbbdf =_edca (_bac ,_cbe ,_bebc );_fbbdf !=nil {return nil ,_d .Wrap (_fbbdf ,_gbcd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bac ,nil ;};func TstAddSymbol (t *_c .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_cbgab :=_f .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_cbgab );*x +=sym .Width +space ;};func _ggfd (_efec ,_gbba *Bitmap ,_gcabc ,_bgead int )(*Bitmap ,error ){const _ddafd ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _gbba ==nil {return nil ,_d .Error (_ddafd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _gcabc < 1&&_bgead < 1{return nil ,_d .Error (_ddafd ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _gcabc ==1&&_bgead ==1{return _gbba .Copy (),nil ;};if _gcabc ==1||_bgead ==1{var _eacgf error ;
_egac :=SelCreateBrick (_bgead ,_gcabc ,_bgead /2,_gcabc /2,SelHit );_efec ,_eacgf =_ffca (_efec ,_gbba ,_egac );if _eacgf !=nil {return nil ,_d .Wrap (_eacgf ,_ddafd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _efec ,nil ;};_gccdbd :=SelCreateBrick (1,_gcabc ,0,_gcabc /2,SelHit );_fdfc :=SelCreateBrick (_bgead ,1,_bgead /2,0,SelHit );_daga ,_edgf :=_edca (nil ,_gbba ,_gccdbd );if _edgf !=nil {return nil ,_d .Wrap (_edgf ,_ddafd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_efec ,_edgf =_edca (_efec ,_daga ,_fdfc );if _edgf !=nil {return nil ,_d .Wrap (_edgf ,_ddafd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_edgf =_aegg (_daga ,_efec ,_gccdbd );if _edgf !=nil {return nil ,_d .Wrap (_edgf ,_ddafd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_edgf =_aegg (_efec ,_daga ,_fdfc );if _edgf !=nil {return nil ,_d .Wrap (_edgf ,_ddafd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _efec ,nil ;};func _eee (_fgda ,_dgcb *Bitmap ,_fcecf ,_cbbc ,_dca ,_gfaf ,_cfba ,_cceg ,_gbfeb ,_gcdc int ,_bge CombinationOperator ,_ebad int )error {var _bag int ;
_bdc :=func (){_bag ++;_dca +=_dgcb .RowStride ;_gfaf +=_fgda .RowStride ;_cfba +=_fgda .RowStride };for _bag =_fcecf ;_bag < _cbbc ;_bdc (){var _dbf uint16 ;_daf :=_dca ;for _gffd :=_gfaf ;_gffd <=_cfba ;_gffd ++{_ggdd ,_dbcg :=_dgcb .GetByte (_daf );
if _dbcg !=nil {return _dbcg ;};_cggg ,_dbcg :=_fgda .GetByte (_gffd );if _dbcg !=nil {return _dbcg ;};_dbf =(_dbf |(uint16 (_cggg )&0xff))<<uint (_gcdc );_cggg =byte (_dbf >>8);if _dbcg =_dgcb .SetByte (_daf ,_gffb (_ggdd ,_cggg ,_bge ));_dbcg !=nil {return _dbcg ;
};_daf ++;_dbf <<=uint (_gbfeb );if _gffd ==_cfba {_cggg =byte (_dbf >>(8-uint8 (_gcdc )));if _ebad !=0{_cggg =_cfdc (uint (8+_cceg ),_cggg );};_ggdd ,_dbcg =_dgcb .GetByte (_daf );if _dbcg !=nil {return _dbcg ;};if _dbcg =_dgcb .SetByte (_daf ,_gffb (_ggdd ,_cggg ,_bge ));
_dbcg !=nil {return _dbcg ;};};};};return nil ;};func (_edbaa Points )XSorter ()func (_efca ,_fdbbb int )bool {return func (_ccaa ,_gcec int )bool {return _edbaa [_ccaa ].X < _edbaa [_gcec ].X };};func _agcb (_ceaf *Bitmap ,_edebe ...MorphProcess )(_gcdca *Bitmap ,_bgec error ){const _gfdee ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _ceaf ==nil {return nil ,_d .Error (_gfdee ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_edebe )==0{return nil ,_d .Error (_gfdee ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bgec =_bddg (_edebe ...);
_bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");};var _eeaag ,_cfgb ,_cbfa int ;_gcdca =_ceaf .Copy ();for _ ,_fgaf :=range _edebe {switch _fgaf .Operation {case MopDilation :_eeaag ,_cfgb =_fgaf .getWidthHeight ();_gcdca ,_bgec =DilateBrick (nil ,_gcdca ,_eeaag ,_cfgb );
if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");};case MopErosion :_eeaag ,_cfgb =_fgaf .getWidthHeight ();_gcdca ,_bgec =_bgea (nil ,_gcdca ,_eeaag ,_cfgb );if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");};case MopOpening :_eeaag ,_cfgb =_fgaf .getWidthHeight ();
_gcdca ,_bgec =_ggfd (nil ,_gcdca ,_eeaag ,_cfgb );if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");};case MopClosing :_eeaag ,_cfgb =_fgaf .getWidthHeight ();_gcdca ,_bgec =_fgeb (nil ,_gcdca ,_eeaag ,_cfgb );if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");
};case MopRankBinaryReduction :_gcdca ,_bgec =_acd (_gcdca ,_fgaf .Arguments ...);if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");};case MopReplicativeBinaryExpansion :_gcdca ,_bgec =_fbd (_gcdca ,_fgaf .Arguments [0]);if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");
};case MopAddBorder :_cbfa =_fgaf .Arguments [0];_gcdca ,_bgec =_gcdca .AddBorder (_cbfa ,0);if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"");};default:return nil ,_d .Error (_gfdee ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _cbfa > 0{_gcdca ,_bgec =_gcdca .RemoveBorder (_cbfa );if _bgec !=nil {return nil ,_d .Wrap (_bgec ,_gfdee ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _gcdca ,nil ;};func (_fcea *Bitmap )nextOnPixel (_ccag ,_feb int )(_gfa _f .Point ,_cfbe bool ,_fcec error ){const _agdc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_gfa ,_cfbe ,_fcec =_fcea .nextOnPixelLow (_fcea .Width ,_fcea .Height ,_fcea .RowStride ,_ccag ,_feb );if _fcec !=nil {return _gfa ,false ,_d .Wrap (_fcec ,_agdc ,"");};return _gfa ,_cfbe ,nil ;};func (_ddba *Bitmap )setFourBytes (_bddf int ,_defa uint32 )error {if _bddf +3> len (_ddba .Data )-1{return _d .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bddf );
};_ddba .Data [_bddf ]=byte ((_defa &0xff000000)>>24);_ddba .Data [_bddf +1]=byte ((_defa &0xff0000)>>16);_ddba .Data [_bddf +2]=byte ((_defa &0xff00)>>8);_ddba .Data [_bddf +3]=byte (_defa &0xff);return nil ;};func (_gbbaa Points )Get (i int )(Point ,error ){if i > len (_gbbaa )-1{return Point {},_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gbbaa [i ],nil ;};func New (width ,height int )*Bitmap {_fdf :=_bee (width ,height );_fdf .Data =make ([]byte ,height *_fdf .RowStride );return _fdf ;};func TstRSymbol (t *_c .T ,scale ...int )*Bitmap {_bgdf ,_fdee :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_a .NoError (t ,_fdee );return TstGetScaledSymbol (t ,_bgdf ,scale ...);};func (_ceb *Bitmap )SetPadBits (value int ){_ceb .setPadBits (value )};func (_fcga *Boxes )Get (i int )(*_f .Rectangle ,error ){const _gaea ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _fcga ==nil {return nil ,_d .Error (_gaea ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fcga )-1{return nil ,_d .Errorf (_gaea ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_fcga )[i ],nil ;};func TstDSymbol (t *_c .T ,scale ...int )*Bitmap {_fcffa ,_bcfd :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_a .NoError (t ,_bcfd );return TstGetScaledSymbol (t ,_fcffa ,scale ...);};func _dege (_abccf ,_afdf *Bitmap ,_gbd ,_gdcb int )(*Bitmap ,error ){const _geea ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";
if _afdf ==nil {_b .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_d .Error (_geea ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _gbd < 1||_gdcb < 1{return nil ,_d .Error (_geea ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _gbd ==1&&_gdcb ==1{_fbebb ,_bbbaa :=_bafb (_abccf ,_afdf );if _bbbaa !=nil {return nil ,_d .Wrap (_bbbaa ,_geea ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fbebb ,nil ;};if _gbd ==1||_gdcb ==1{_efcb :=SelCreateBrick (_gdcb ,_gbd ,_gdcb /2,_gbd /2,SelHit );_ffebd ,_gfgea :=_aegg (_abccf ,_afdf ,_efcb );if _gfgea !=nil {return nil ,_d .Wrap (_gfgea ,_geea ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ffebd ,nil ;};_fdbbf :=SelCreateBrick (1,_gbd ,0,_gbd /2,SelHit );_gfde :=SelCreateBrick (_gdcb ,1,_gdcb /2,0,SelHit );_fddaa ,_egcff :=_aegg (nil ,_afdf ,_fdbbf );if _egcff !=nil {return nil ,_d .Wrap (_egcff ,_geea ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_abccf ,_egcff =_aegg (_abccf ,_fddaa ,_gfde );if _egcff !=nil {return nil ,_d .Wrap (_egcff ,_geea ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _abccf ,nil ;};func TstPSymbol (t *_c .T )*Bitmap {t .Helper ();_dfebe :=New (5,8);
_a .NoError (t ,_dfebe .SetPixel (0,0,1));_a .NoError (t ,_dfebe .SetPixel (1,0,1));_a .NoError (t ,_dfebe .SetPixel (2,0,1));_a .NoError (t ,_dfebe .SetPixel (3,0,1));_a .NoError (t ,_dfebe .SetPixel (4,1,1));_a .NoError (t ,_dfebe .SetPixel (0,1,1));
_a .NoError (t ,_dfebe .SetPixel (4,2,1));_a .NoError (t ,_dfebe .SetPixel (0,2,1));_a .NoError (t ,_dfebe .SetPixel (4,3,1));_a .NoError (t ,_dfebe .SetPixel (0,3,1));_a .NoError (t ,_dfebe .SetPixel (0,4,1));_a .NoError (t ,_dfebe .SetPixel (1,4,1));
_a .NoError (t ,_dfebe .SetPixel (2,4,1));_a .NoError (t ,_dfebe .SetPixel (3,4,1));_a .NoError (t ,_dfebe .SetPixel (0,5,1));_a .NoError (t ,_dfebe .SetPixel (0,6,1));_a .NoError (t ,_dfebe .SetPixel (0,7,1));return _dfebe ;};type SelectionValue int ;
func _fgeb (_dgbg ,_abfg *Bitmap ,_bdec ,_fefb int )(*Bitmap ,error ){const _dcgf ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _abfg ==nil {return nil ,_d .Error (_dcgf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bdec < 1||_fefb < 1{return nil ,_d .Error (_dcgf ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bdec ==1&&_fefb ==1{return _bafb (_dgbg ,_abfg );};if MorphBC ==SymmetricMorphBC {_fbeb ,_gffc :=_dded (_dgbg ,_abfg ,_bdec ,_fefb );
if _gffc !=nil {return nil ,_d .Wrap (_gffc ,_dcgf ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _fbeb ,nil ;};_dffbf :=_cbb (_bdec /2,_fefb /2);_acace :=8*((_dffbf +7)/8);_fgfd ,_bced :=_abfg .AddBorder (_acace ,0);
if _bced !=nil {return nil ,_d .Wrapf (_bced ,_dcgf ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_acace );};var _bbef ,_bgbeb *Bitmap ;if _bdec ==1||_fefb ==1{_eaaf :=SelCreateBrick (_fefb ,_bdec ,_fefb /2,_bdec /2,SelHit );
_bbef ,_bced =_fdga (nil ,_fgfd ,_eaaf );if _bced !=nil {return nil ,_d .Wrap (_bced ,_dcgf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_aedc :=SelCreateBrick (1,_bdec ,0,_bdec /2,SelHit );
_efbd ,_cgbdc :=_aegg (nil ,_fgfd ,_aedc );if _cgbdc !=nil {return nil ,_d .Wrap (_cgbdc ,_dcgf ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_bcgf :=SelCreateBrick (_fefb ,1,_fefb /2,0,SelHit );
_bbef ,_cgbdc =_aegg (nil ,_efbd ,_bcgf );if _cgbdc !=nil {return nil ,_d .Wrap (_cgbdc ,_dcgf ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_cgbdc =_edca (_efbd ,_bbef ,_aedc );
_cgbdc !=nil {return nil ,_d .Wrap (_cgbdc ,_dcgf ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_cgbdc =_edca (_bbef ,_efbd ,_bcgf );_cgbdc !=nil {return nil ,_d .Wrap (_cgbdc ,_dcgf ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _bgbeb ,_bced =_bbef .RemoveBorder (_acace );_bced !=nil {return nil ,_d .Wrap (_bced ,_dcgf ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _dgbg ==nil {return _bgbeb ,nil ;};if _ ,_bced =_bafb (_dgbg ,_bgbeb );_bced !=nil {return nil ,_bced ;};
return _dgbg ,nil ;};func _eag ()(_edff [256]uint64 ){for _def :=0;_def < 256;_def ++{if _def &0x01!=0{_edff [_def ]|=0xff;};if _def &0x02!=0{_edff [_def ]|=0xff00;};if _def &0x04!=0{_edff [_def ]|=0xff0000;};if _def &0x08!=0{_edff [_def ]|=0xff000000;
};if _def &0x10!=0{_edff [_def ]|=0xff00000000;};if _def &0x20!=0{_edff [_def ]|=0xff0000000000;};if _def &0x40!=0{_edff [_def ]|=0xff000000000000;};if _def &0x80!=0{_edff [_def ]|=0xff00000000000000;};};return _edff ;};func (_fgea *Bitmap )ToImage ()_f .Image {_fcf ,_bfda :=_eg .NewImage (_fgea .Width ,_fgea .Height ,1,1,_fgea .Data ,nil ,nil );
if _bfda !=nil {_b .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bfda );
};return _fcf ;};func TstGetScaledSymbol (t *_c .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_bcdb ,_aegc :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_a .NoError (t ,_aegc );return _bcdb ;};var MorphBC BoundaryCondition ;func _bddg (_bafe ...MorphProcess )(_ccdf error ){const _dgga ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _aafc ,_bca int ;
for _gabf ,_cdcd :=range _bafe {if _ccdf =_cdcd .verify (_gabf ,&_aafc ,&_bca );_ccdf !=nil {return _d .Wrap (_ccdf ,_dgga ,"");};};if _bca !=0&&_aafc !=0{return _d .Error (_dgga ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_dfafg *BitmapsArray )GetBox (i int )(*_f .Rectangle ,error ){const _dgffc ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _dfafg ==nil {return nil ,_d .Error (_dgffc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_dfafg .Boxes )-1{return nil ,_d .Errorf (_dgffc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dfafg .Boxes [i ],nil ;};func _afgf (_accfg ,_ebca *Bitmap ,_abbc ,_addc int )(_gaca error ){const _eddd ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_fbgf ,_gbadc ,_fbeeb ,_fadg int ;_affac ,_accec ,_bbbd ,_bddgc ,_afca ,_dbgd ,_dcba ,_cbfcf byte ;);for _fbgf =0;_fbgf < _abbc ;_fbgf ++{_fbeeb =_fbgf *_accfg .RowStride ;_fadg =_fbgf *_ebca .RowStride ;for _gbadc =0;_gbadc < _addc ;_gbadc ++{if _affac ,_gaca =_accfg .GetByte (_fbeeb +_gbadc );
_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _accec ,_gaca =_ebca .GetByte (_fadg +_gbadc );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _fbgf > 0{if _bbbd ,_gaca =_accfg .GetByte (_fbeeb -_accfg .RowStride +_gbadc );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_affac |=_bbbd |(_bbbd <<1)|(_bbbd >>1);if _gbadc > 0{if _cbfcf ,_gaca =_accfg .GetByte (_fbeeb -_accfg .RowStride +_gbadc -1);
_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_affac |=_cbfcf <<7;};if _gbadc < _addc -1{if _cbfcf ,_gaca =_accfg .GetByte (_fbeeb -_accfg .RowStride +_gbadc +1);
_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_affac |=_cbfcf >>7;};};if _gbadc > 0{if _bddgc ,_gaca =_accfg .GetByte (_fbeeb +_gbadc -1);_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u006a\u0020\u003e \u0030");
};_affac |=_bddgc <<7;};_affac &=_accec ;if _affac ==0||^_affac ==0{if _gaca =_accfg .SetByte (_fbeeb +_gbadc ,_affac );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");
};};for {_dcba =_affac ;_affac =(_affac |(_affac >>1)|(_affac <<1))&_accec ;if (_affac ^_dcba )==0{if _gaca =_accfg .SetByte (_fbeeb +_gbadc ,_affac );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _fbgf =_abbc -1;_fbgf >=0;_fbgf --{_fbeeb =_fbgf *_accfg .RowStride ;_fadg =_fbgf *_ebca .RowStride ;for _gbadc =_addc -1;_gbadc >=0;_gbadc --{if _affac ,_gaca =_accfg .GetByte (_fbeeb +_gbadc );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _accec ,_gaca =_ebca .GetByte (_fadg +_gbadc );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fbgf < _abbc -1{if _afca ,_gaca =_accfg .GetByte (_fbeeb +_accfg .RowStride +_gbadc );
_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_affac |=_afca |(_afca <<1)|_afca >>1;if _gbadc > 0{if _cbfcf ,_gaca =_accfg .GetByte (_fbeeb +_accfg .RowStride +_gbadc -1);
_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_affac |=_cbfcf <<7;};if _gbadc < _addc -1{if _cbfcf ,_gaca =_accfg .GetByte (_fbeeb +_accfg .RowStride +_gbadc +1);
_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_affac |=_cbfcf >>7;};};if _gbadc < _addc -1{if _dbgd ,_gaca =_accfg .GetByte (_fbeeb +_gbadc +1);_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_affac |=_dbgd >>7;};_affac &=_accec ;if _affac ==0||(^_affac )==0{if _gaca =_accfg .SetByte (_fbeeb +_gbadc ,_affac );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};
for {_dcba =_affac ;_affac =(_affac |(_affac >>1)|(_affac <<1))&_accec ;if (_affac ^_dcba )==0{if _gaca =_accfg .SetByte (_fbeeb +_gbadc ,_affac );_gaca !=nil {return _d .Wrap (_gaca ,_eddd ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_fadc *Bitmap )SetPixel (x ,y int ,pixel byte )error {_cfbf :=_fadc .GetByteIndex (x ,y );if _cfbf > len (_fadc .Data )-1{return _d .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_cfbf );
};_eaca :=_fadc .GetBitOffset (x );_deb :=uint (7-_eaca );_gcg :=_fadc .Data [_cfbf ];var _bba byte ;if pixel ==1{_bba =_gcg |(pixel &0x01<<_deb );}else {_bba =_gcg &^(1<<_deb );};_fadc .Data [_cfbf ]=_bba ;return nil ;};func _adg (_aaa ,_ggae int )int {if _aaa < _ggae {return _aaa ;
};return _ggae ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_daed MorphProcess )getWidthHeight ()(_dgfad ,_bbdd int ){return _daed .Arguments [0],_daed .Arguments [1];};func _ccb (_fff ,_cec *Bitmap ,_cfg int ,_babd []byte ,_cecd int )(_bfd error ){const _cadf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_dbee ,_ffg ,_cfc ,_dde ,_dfe ,_bef ,_bdf ,_fbe int ;_caa ,_bbba uint32 ;_bfa ,_eeb byte ;_ace uint16 ;);_ccg :=make ([]byte ,4);_degc :=make ([]byte ,4);for _cfc =0;_cfc < _fff .Height -1;_cfc ,_dde =_cfc +2,_dde +1{_dbee =_cfc *_fff .RowStride ;
_ffg =_dde *_cec .RowStride ;for _dfe ,_bef =0,0;_dfe < _cecd ;_dfe ,_bef =_dfe +4,_bef +1{for _bdf =0;_bdf < 4;_bdf ++{_fbe =_dbee +_dfe +_bdf ;if _fbe <=len (_fff .Data )-1&&_fbe < _dbee +_fff .RowStride {_ccg [_bdf ]=_fff .Data [_fbe ];}else {_ccg [_bdf ]=0x00;
};_fbe =_dbee +_fff .RowStride +_dfe +_bdf ;if _fbe <=len (_fff .Data )-1&&_fbe < _dbee +(2*_fff .RowStride ){_degc [_bdf ]=_fff .Data [_fbe ];}else {_degc [_bdf ]=0x00;};};_caa =_ac .BigEndian .Uint32 (_ccg );_bbba =_ac .BigEndian .Uint32 (_degc );_bbba &=_caa ;
_bbba &=_bbba <<1;_bbba &=0xaaaaaaaa;_caa =_bbba |(_bbba <<7);_bfa =byte (_caa >>24);_eeb =byte ((_caa >>8)&0xff);_fbe =_ffg +_bef ;if _fbe +1==len (_cec .Data )-1||_fbe +1>=_ffg +_cec .RowStride {_cec .Data [_fbe ]=_babd [_bfa ];if _bfd =_cec .SetByte (_fbe ,_babd [_bfa ]);
_bfd !=nil {return _d .Wrapf (_bfd ,_cadf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fbe );};}else {_ace =(uint16 (_babd [_bfa ])<<8)|uint16 (_babd [_eeb ]);if _bfd =_cec .setTwoBytes (_fbe ,_ace );_bfd !=nil {return _d .Wrapf (_bfd ,_cadf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fbe );
};_bef ++;};};};return nil ;};func (_ffgb *ClassedPoints )XAtIndex (i int )float32 {return (*_ffgb .Points )[_ffgb .IntSlice [i ]].X };func (_bcec *Bitmap )clearAll ()error {return _bcec .RasterOperation (0,0,_bcec .Width ,_bcec .Height ,PixClr ,nil ,0,0);
};func (_dbbac *byHeight )Len ()int {return len (_dbbac .Values )};func TstImageBitmapInverseData ()[]byte {_cfbgg :=_efgfe .Copy ();_cfbgg .InverseData ();return _cfbgg .Data ;};func _bab (_gef ,_caea *Bitmap ,_ggdg int ,_egb []byte ,_dab int )(_aff error ){const _gcc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_abc ,_aca ,_abe ,_fag ,_aebb ,_ede ,_efg ,_bdbg int ;_gccd ,_eec uint32 ;_ad ,_gbg byte ;_fad uint16 ;);_cdfb :=make ([]byte ,4);_cg :=make ([]byte ,4);for _abe =0;_abe < _gef .Height -1;_abe ,_fag =_abe +2,_fag +1{_abc =_abe *_gef .RowStride ;_aca =_fag *_caea .RowStride ;
for _aebb ,_ede =0,0;_aebb < _dab ;_aebb ,_ede =_aebb +4,_ede +1{for _efg =0;_efg < 4;_efg ++{_bdbg =_abc +_aebb +_efg ;if _bdbg <=len (_gef .Data )-1&&_bdbg < _abc +_gef .RowStride {_cdfb [_efg ]=_gef .Data [_bdbg ];}else {_cdfb [_efg ]=0x00;};_bdbg =_abc +_gef .RowStride +_aebb +_efg ;
if _bdbg <=len (_gef .Data )-1&&_bdbg < _abc +(2*_gef .RowStride ){_cg [_efg ]=_gef .Data [_bdbg ];}else {_cg [_efg ]=0x00;};};_gccd =_ac .BigEndian .Uint32 (_cdfb );_eec =_ac .BigEndian .Uint32 (_cg );_eec |=_gccd ;_eec |=_eec <<1;_eec &=0xaaaaaaaa;_gccd =_eec |(_eec <<7);
_ad =byte (_gccd >>24);_gbg =byte ((_gccd >>8)&0xff);_bdbg =_aca +_ede ;if _bdbg +1==len (_caea .Data )-1||_bdbg +1>=_aca +_caea .RowStride {_caea .Data [_bdbg ]=_egb [_ad ];}else {_fad =(uint16 (_egb [_ad ])<<8)|uint16 (_egb [_gbg ]);if _aff =_caea .setTwoBytes (_bdbg ,_fad );
_aff !=nil {return _d .Wrapf (_aff ,_gcc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bdbg );};_ede ++;};};
};return nil ;};func _egf (_fcee ,_dfdg *Bitmap ,_aaaf ,_gfcd ,_eega uint ,_egff ,_dbeef int ,_gfeb bool ,_fffg ,_acfb int )error {for _fgc :=_egff ;_fgc < _dbeef ;_fgc ++{if _fffg +1< len (_fcee .Data ){_ddaa :=_fgc +1==_dbeef ;_ffeg ,_edfb :=_fcee .GetByte (_fffg );
if _edfb !=nil {return _edfb ;};_fffg ++;_ffeg <<=_aaaf ;_fddg ,_edfb :=_fcee .GetByte (_fffg );if _edfb !=nil {return _edfb ;};_fddg >>=_gfcd ;_bbdae :=_ffeg |_fddg ;if _ddaa &&!_gfeb {_bbdae =_cfdc (_eega ,_bbdae );};_edfb =_dfdg .SetByte (_acfb ,_bbdae );
if _edfb !=nil {return _edfb ;};_acfb ++;if _ddaa &&_gfeb {_aefa ,_efac :=_fcee .GetByte (_fffg );if _efac !=nil {return _efac ;};_aefa <<=_aaaf ;_bbdae =_cfdc (_eega ,_aefa );if _efac =_dfdg .SetByte (_acfb ,_bbdae );_efac !=nil {return _efac ;};};continue ;
};_gaae ,_age :=_fcee .GetByte (_fffg );if _age !=nil {_b .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_fffg ,_age );
return _age ;};_gaae <<=_aaaf ;_fffg ++;_age =_dfdg .SetByte (_acfb ,_gaae );if _age !=nil {return _age ;};_acfb ++;};return nil ;};func (_dae *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dae .Data )-1||index < 0{return 0,_d .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _dae .Data [index ],nil ;};func (_abcg *Bitmap )setEightPartlyBytes (_bcba ,_ebb int ,_ccdc uint64 )(_fdda error ){var (_adde byte ;_dgdd int ;);const _cfad ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _bfdc :=1;_bfdc <=_ebb ;_bfdc ++{_dgdd =64-_bfdc *8;_adde =byte (_ccdc >>uint (_dgdd )&0xff);_b .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_adde ,_bcba ,_bcba +_bfdc -1,_ebb ,_dgdd );
if _fdda =_abcg .SetByte (_bcba +_bfdc -1,_adde );_fdda !=nil {return _d .Wrap (_fdda ,_cfad ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_cfef :=_abcg .RowStride *8-_abcg .Width ;if _cfef ==0{return nil ;};_dgdd -=8;_adde =byte (_ccdc >>uint (_dgdd )&0xff)<<uint (_cfef );
if _fdda =_abcg .SetByte (_bcba +_ebb ,_adde );_fdda !=nil {return _d .Wrap (_fdda ,_cfad ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_eeab *Bitmap )setEightFullBytes (_edec int ,_gfag uint64 )error {if _edec +7> len (_eeab .Data )-1{return _d .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_eeab .Data [_edec ]=byte ((_gfag &0xff00000000000000)>>56);_eeab .Data [_edec +1]=byte ((_gfag &0xff000000000000)>>48);_eeab .Data [_edec +2]=byte ((_gfag &0xff0000000000)>>40);_eeab .Data [_edec +3]=byte ((_gfag &0xff00000000)>>32);_eeab .Data [_edec +4]=byte ((_gfag &0xff000000)>>24);
_eeab .Data [_edec +5]=byte ((_gfag &0xff0000)>>16);_eeab .Data [_edec +6]=byte ((_gfag &0xff00)>>8);_eeab .Data [_edec +7]=byte (_gfag &0xff);return nil ;};func (_ecac *byWidth )Less (i ,j int )bool {return _ecac .Values [i ].Width < _ecac .Values [j ].Width };
func (_ffgbg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _dcfe ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _ffgbg ==nil {return nil ,_d .Error (_dcfe ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ffgbg .Values )-1{return nil ,_d .Errorf (_dcfe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ffgbg .Values [i ],nil ;};func _dbd (_fa ,_gb *Bitmap )(_fe error ){const _dbe ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_dc :=_gb .RowStride ;_gaf :=_fa .RowStride ;var _ec ,_ae ,_ba ,_gf ,_ddgg int ;for _ba =0;_ba < _gb .Height ;_ba ++{_ec =_ba *_dc ;_ae =8*_ba *_gaf ;for _gf =0;_gf < _dc ;_gf ++{if _fe =_fa .setEightBytes (_ae +_gf *8,_bdfa [_gb .Data [_ec +_gf ]]);_fe !=nil {return _d .Wrap (_fe ,_dbe ,"");
};};for _ddgg =1;_ddgg < 8;_ddgg ++{for _gf =0;_gf < _gaf ;_gf ++{if _fe =_fa .SetByte (_ae +_ddgg *_gaf +_gf ,_fa .Data [_ae +_gf ]);_fe !=nil {return _d .Wrap (_fe ,_dbe ,"");};};};};return nil ;};func (_cedd *Bitmaps )WidthSorter ()func (_gafc ,_adad int )bool {return func (_abdc ,_bfgg int )bool {return _cedd .Values [_abdc ].Width < _cedd .Values [_bfgg ].Width };
};func (_gag *Bitmap )connComponentsBB (_gcb int )(_dbbe *Boxes ,_ccdg error ){const _dcag ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _gcb !=4&&_gcb !=8{return nil ,_d .Error (_dcag ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _gag .Zero (){return &Boxes {},nil ;};_gag .setPadBits (0);_affda ,_ccdg :=_bafb (nil ,_gag );if _ccdg !=nil {return nil ,_d .Wrap (_ccdg ,_dcag ,"\u0062\u006d\u0031");};_cdd :=&_dgb .Stack {};_cdd .Aux =&_dgb .Stack {};_dbbe =&Boxes {};var (_eeaa ,_bbdad int ;
_bdbb _f .Point ;_gcgd bool ;_eagg *_f .Rectangle ;);for {if _bdbb ,_gcgd ,_ccdg =_affda .nextOnPixel (_bbdad ,_eeaa );_ccdg !=nil {return nil ,_d .Wrap (_ccdg ,_dcag ,"");};if !_gcgd {break ;};if _eagg ,_ccdg =_ccef (_affda ,_cdd ,_bdbb .X ,_bdbb .Y ,_gcb );
_ccdg !=nil {return nil ,_d .Wrap (_ccdg ,_dcag ,"");};if _ccdg =_dbbe .Add (_eagg );_ccdg !=nil {return nil ,_d .Wrap (_ccdg ,_dcag ,"");};_bbdad =_bdbb .X ;_eeaa =_bdbb .Y ;};return _dbbe ,nil ;};func _fbd (_accg *Bitmap ,_ecgc int )(*Bitmap ,error ){const _gbea ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _accg ==nil {return nil ,_d .Error (_gbea ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ecgc <=0{return nil ,_d .Error (_gbea ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _ecgc ==1{_gded ,_fgfb :=_bafb (nil ,_accg );if _fgfb !=nil {return nil ,_d .Wrap (_fgfb ,_gbea ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _gded ,nil ;};_fffb ,_eccb :=_fd (_accg ,_ecgc ,_ecgc );if _eccb !=nil {return nil ,_d .Wrap (_eccb ,_gbea ,"");
};return _fffb ,nil ;};func (_ddbd Points )Size ()int {return len (_ddbd )};func _fdga (_aac ,_bafd *Bitmap ,_defc *Selection )(*Bitmap ,error ){const _bbbaf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _ege error ;if _aac ,_ege =_ggaed (_aac ,_bafd ,_defc );
_ege !=nil {return nil ,_ege ;};_ddbaa ,_ege :=_aegg (nil ,_bafd ,_defc );if _ege !=nil {return nil ,_d .Wrap (_ege ,_bbbaf ,"");};if _ ,_ege =_edca (_aac ,_ddbaa ,_defc );_ege !=nil {return nil ,_d .Wrap (_ege ,_bbbaf ,"");};return _aac ,nil ;};type RasterOperator int ;
type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_f .Rectangle ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _agcb (src ,sequence ...);};type MorphOperation int ;func _ddg (_db ,_bbb *Bitmap )(_gd error ){const _bfc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_bfb :=_bbb .RowStride ;_eeg :=_db .RowStride ;_ed :=_bbb .RowStride *4-_db .RowStride ;var (_ga ,_ab byte ;_ff uint32 ;_bbg ,_aae ,_cf ,_ddb ,_ca ,_ffe ,_fc int ;);for _cf =0;_cf < _bbb .Height ;_cf ++{_bbg =_cf *_bfb ;_aae =4*_cf *_eeg ;for _ddb =0;_ddb < _bfb ;
_ddb ++{_ga =_bbb .Data [_bbg +_ddb ];_ff =_edba [_ga ];_ffe =_aae +_ddb *4;if _ed !=0&&(_ddb +1)*4> _db .RowStride {for _ca =_ed ;_ca > 0;_ca --{_ab =byte ((_ff >>uint (_ca *8))&0xff);_fc =_ffe +(_ed -_ca );if _gd =_db .SetByte (_fc ,_ab );_gd !=nil {return _d .Wrapf (_gd ,_bfc ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ca );
};};}else if _gd =_db .setFourBytes (_ffe ,_ff );_gd !=nil {return _d .Wrap (_gd ,_bfc ,"");};if _gd =_db .setFourBytes (_aae +_ddb *4,_edba [_bbb .Data [_bbg +_ddb ]]);_gd !=nil {return _d .Wrap (_gd ,_bfc ,"");};};for _ca =1;_ca < 4;_ca ++{for _ddb =0;
_ddb < _eeg ;_ddb ++{if _gd =_db .SetByte (_aae +_ca *_eeg +_ddb ,_db .Data [_aae +_ddb ]);_gd !=nil {return _d .Wrapf (_gd ,_bfc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ca ,_ddb );
};};};};return nil ;};func (_ecca *Selection )findMaxTranslations ()(_gffg ,_cfgce ,_bceda ,_cdaa int ){for _dbda :=0;_dbda < _ecca .Height ;_dbda ++{for _fgca :=0;_fgca < _ecca .Width ;_fgca ++{if _ecca .Data [_dbda ][_fgca ]==SelHit {_gffg =_cbb (_gffg ,_ecca .Cx -_fgca );
_cfgce =_cbb (_cfgce ,_ecca .Cy -_dbda );_bceda =_cbb (_bceda ,_fgca -_ecca .Cx );_cdaa =_cbb (_cdaa ,_dbda -_ecca .Cy );};};};return _gffg ,_cfgce ,_bceda ,_cdaa ;};func TstTSymbol (t *_c .T ,scale ...int )*Bitmap {_fcgf ,_gfcc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_a .NoError (t ,_gfcc );return TstGetScaledSymbol (t ,_fcgf ,scale ...);};func (_fbdb *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bebda ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _fbdb ==nil {return nil ,_d .Error (_bebda ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_fbdb .Values )-1{return nil ,_d .Errorf (_bebda ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fbdb .Values [i ],nil ;};func TstImageBitmapData ()[]byte {return _efgfe .Data };
func (_ece *Bitmap )ClipRectangle (box *_f .Rectangle )(_dfa *Bitmap ,_agbd *_f .Rectangle ,_beg error ){const _fegd ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_d .Error (_fegd ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};_bdg ,_adddd :=_ece .Width ,_ece .Height ;_gccdf :=_f .Rect (0,0,_bdg ,_adddd );if !box .Overlaps (_gccdf ){return nil ,nil ,_d .Error (_fegd ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};
_eaad :=box .Intersect (_gccdf );_gfg ,_cgga :=_eaad .Min .X ,_eaad .Min .Y ;_bgg ,_bfad :=_eaad .Dx (),_eaad .Dy ();_dfa =New (_bgg ,_bfad );_dfa .Text =_ece .Text ;if _beg =_dfa .RasterOperation (0,0,_bgg ,_bfad ,PixSrc ,_ece ,_gfg ,_cgga );_beg !=nil {return nil ,nil ,_d .Wrap (_beg ,_fegd ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_agbd =&_eaad ;return _dfa ,_agbd ,nil ;};func (_ebda *Bitmaps )SortByWidth (){_bfcaa :=(*byWidth )(_ebda );_ea .Sort (_bfcaa )};func (_gebg *Bitmaps )AddBox (box *_f .Rectangle ){_gebg .Boxes =append (_gebg .Boxes ,box )};const (_ LocationFilter =iota ;
LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _bafeg (_geaa *Bitmap ,_ggfg ,_cbfc int ,_dbfb ,_bcafb int ,_efea RasterOperator ){var (_bbeb bool ;_dgfe bool ;_eggbe int ;_bgcc int ;_cfbg int ;
_aedg int ;_bbcc bool ;_ecga byte ;);_bdecd :=8-(_ggfg &7);_dfbb :=_gebba [_bdecd ];_fagf :=_geaa .RowStride *_cbfc +(_ggfg >>3);if _dbfb < _bdecd {_bbeb =true ;_dfbb &=_becd [8-_bdecd +_dbfb ];};if !_bbeb {_eggbe =(_dbfb -_bdecd )>>3;if _eggbe !=0{_dgfe =true ;
_bgcc =_fagf +1;};};_cfbg =(_ggfg +_dbfb )&7;if !(_bbeb ||_cfbg ==0){_bbcc =true ;_ecga =_becd [_cfbg ];_aedg =_fagf +1+_eggbe ;};var _ddbed ,_gefd int ;switch _efea {case PixClr :for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{_geaa .Data [_fagf ]=_cbcdc (_geaa .Data [_fagf ],0x0,_dfbb );
_fagf +=_geaa .RowStride ;};if _dgfe {for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{for _gefd =0;_gefd < _eggbe ;_gefd ++{_geaa .Data [_bgcc +_gefd ]=0x0;};_bgcc +=_geaa .RowStride ;};};if _bbcc {for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{_geaa .Data [_aedg ]=_cbcdc (_geaa .Data [_aedg ],0x0,_ecga );
_aedg +=_geaa .RowStride ;};};case PixSet :for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{_geaa .Data [_fagf ]=_cbcdc (_geaa .Data [_fagf ],0xff,_dfbb );_fagf +=_geaa .RowStride ;};if _dgfe {for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{for _gefd =0;_gefd < _eggbe ;
_gefd ++{_geaa .Data [_bgcc +_gefd ]=0xff;};_bgcc +=_geaa .RowStride ;};};if _bbcc {for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{_geaa .Data [_aedg ]=_cbcdc (_geaa .Data [_aedg ],0xff,_ecga );_aedg +=_geaa .RowStride ;};};case PixNotDst :for _ddbed =0;_ddbed < _bcafb ;
_ddbed ++{_geaa .Data [_fagf ]=_cbcdc (_geaa .Data [_fagf ],^_geaa .Data [_fagf ],_dfbb );_fagf +=_geaa .RowStride ;};if _dgfe {for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{for _gefd =0;_gefd < _eggbe ;_gefd ++{_geaa .Data [_bgcc +_gefd ]=^(_geaa .Data [_bgcc +_gefd ]);
};_bgcc +=_geaa .RowStride ;};};if _bbcc {for _ddbed =0;_ddbed < _bcafb ;_ddbed ++{_geaa .Data [_aedg ]=_cbcdc (_geaa .Data [_aedg ],^_geaa .Data [_aedg ],_ecga );_aedg +=_geaa .RowStride ;};};};};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _aegg (d ,s ,sel )};
func (_beae *ClassedPoints )SortByX (){_beae ._cbcd =_beae .xSortFunction ();_ea .Sort (_beae )};func TstWSymbol (t *_c .T ,scale ...int )*Bitmap {_eceac ,_gfcb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_a .NoError (t ,_gfcb );return TstGetScaledSymbol (t ,_eceac ,scale ...);
};func (_dcc *Bitmap )InverseData (){_dcc .inverseData ()};func _ddgc (_ebgg ,_ffabb int ,_fgcf string )*Selection {_agac :=&Selection {Height :_ebgg ,Width :_ffabb ,Name :_fgcf };_agac .Data =make ([][]SelectionValue ,_ebgg );for _ebac :=0;_ebac < _ebgg ;
_ebac ++{_agac .Data [_ebac ]=make ([]SelectionValue ,_ffabb );};return _agac ;};func _fbgd (_cgcg ,_geede ,_efaf *Bitmap ,_dgeg int )(*Bitmap ,error ){const _agge ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _geede ==nil {return nil ,_d .Error (_agge ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _efaf ==nil {return nil ,_d .Error (_agge ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _dgeg !=4&&_dgeg !=8{return nil ,_d .Error (_agge ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _cgge error ;_cgcg ,_cgge =_bafb (_cgcg ,_geede );if _cgge !=nil {return nil ,_d .Wrap (_cgge ,_agge ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_edabe :=_geede .createTemplate ();_efaf .setPadBits (0);
for _ged :=0;_ged < _ffag ;_ged ++{_edabe ,_cgge =_bafb (_edabe ,_cgcg );if _cgge !=nil {return nil ,_d .Wrapf (_cgge ,_agge ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ged );};if _cgge =_fcacg (_cgcg ,_efaf ,_dgeg );
_cgge !=nil {return nil ,_d .Wrapf (_cgge ,_agge ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ged );};if _edabe .Equals (_cgcg ){break ;};};return _cgcg ,nil ;};func (_fdde *Bitmap )clipRectangle (_beb ,_cafg *_f .Rectangle )(_bff *Bitmap ,_cde error ){const _fae ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _beb ==nil {return nil ,_d .Error (_fae ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_efcf ,_cecg :=_fdde .Width ,_fdde .Height ;_gfbd ,_cde :=ClipBoxToRectangle (_beb ,_efcf ,_cecg );if _cde !=nil {_b .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_cde );
return nil ,nil ;};_fecf ,_aag :=_gfbd .Min .X ,_gfbd .Min .Y ;_bfca ,_degf :=_gfbd .Max .X -_gfbd .Min .X ,_gfbd .Max .Y -_gfbd .Min .Y ;_bff =New (_bfca ,_degf );_bff .Text =_fdde .Text ;if _cde =_bff .RasterOperation (0,0,_bfca ,_degf ,PixSrc ,_fdde ,_fecf ,_aag );
_cde !=nil {return nil ,_d .Wrap (_cde ,_fae ,"");};if _cafg !=nil {*_cafg =*_gfbd ;};return _bff ,nil ;};func (_dgbbf *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _agae ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _edad :=_dgbbf .validateIntSlice ();_edad !=nil {return nil ,_d .Wrap (_edad ,_agae ,"");};if _dgbbf .IntSlice .Size ()==0{return nil ,_d .Error (_agae ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_dgbbf .SortByY ();var (_dfed []*ClassedPoints ;_gabc int ;);_abd :=-1;var _bcga *ClassedPoints ;for _deafg :=0;_deafg < len (_dgbbf .IntSlice );_deafg ++{_gabc =int (_dgbbf .YAtIndex (_deafg ));if _gabc !=_abd {_bcga =&ClassedPoints {Points :_dgbbf .Points };
_abd =_gabc ;_dfed =append (_dfed ,_bcga );};_bcga .IntSlice =append (_bcga .IntSlice ,_dgbbf .IntSlice [_deafg ]);};for _ ,_beec :=range _dfed {_beec .SortByX ();};return _dfed ,nil ;};func (_bea *Bitmap )Copy ()*Bitmap {_dbca :=make ([]byte ,len (_bea .Data ));
copy (_dbca ,_bea .Data );return &Bitmap {Width :_bea .Width ,Height :_bea .Height ,RowStride :_bea .RowStride ,Data :_dbca ,Color :_bea .Color ,Text :_bea .Text ,BitmapNumber :_bea .BitmapNumber ,Special :_bea .Special };};func _ddab (_febae *Bitmap ,_cgfa *_dgb .Stack ,_eddc ,_afdg int )(_afae *_f .Rectangle ,_egbe error ){const _cefc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _febae ==nil {return nil ,_d .Error (_cefc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _cgfa ==nil {return nil ,_d .Error (_cefc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_facf ,_bbdb :=_febae .Width ,_febae .Height ;_agdg :=_facf -1;_fdcc :=_bbdb -1;if _eddc < 0||_eddc > _agdg ||_afdg < 0||_afdg > _fdcc ||!_febae .GetPixel (_eddc ,_afdg ){return nil ,nil ;};_cfdg :=_f .Rect (100000,100000,0,0);if _egbe =_ggbc (_cgfa ,_eddc ,_eddc ,_afdg ,1,_fdcc ,&_cfdg );
_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _egbe =_ggbc (_cgfa ,_eddc ,_eddc ,_afdg +1,-1,_fdcc ,&_cfdg );_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_cfdg .Min .X ,_cfdg .Max .X =_eddc ,_eddc ;_cfdg .Min .Y ,_cfdg .Max .Y =_afdg ,_afdg ;var (_ffdfg *fillSegment ;_bfafe int ;);for _cgfa .Len ()> 0{if _ffdfg ,_egbe =_ffcd (_cgfa );_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"");};_afdg =_ffdfg ._aeec ;
for _eddc =_ffdfg ._edfg -1;_eddc >=0&&_febae .GetPixel (_eddc ,_afdg );_eddc --{if _egbe =_febae .SetPixel (_eddc ,_afdg ,0);_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _eddc >=_ffdfg ._edfg -1{for {for _eddc ++;
_eddc <=_ffdfg ._fdce +1&&_eddc <=_agdg &&!_febae .GetPixel (_eddc ,_afdg );_eddc ++{};_bfafe =_eddc ;if !(_eddc <=_ffdfg ._fdce +1&&_eddc <=_agdg ){break ;};for ;_eddc <=_agdg &&_febae .GetPixel (_eddc ,_afdg );_eddc ++{if _egbe =_febae .SetPixel (_eddc ,_afdg ,0);
_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _egbe =_ggbc (_cgfa ,_bfafe ,_eddc -1,_ffdfg ._aeec ,_ffdfg ._cacc ,_fdcc ,&_cfdg );_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _eddc > _ffdfg ._fdce {if _egbe =_ggbc (_cgfa ,_ffdfg ._fdce +1,_eddc -1,_ffdfg ._aeec ,-_ffdfg ._cacc ,_fdcc ,&_cfdg );_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_bfafe =_eddc +1;if _bfafe < _ffdfg ._edfg {if _egbe =_ggbc (_cgfa ,_bfafe ,_ffdfg ._edfg -1,_ffdfg ._aeec ,-_ffdfg ._cacc ,_fdcc ,&_cfdg );_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_eddc =_ffdfg ._edfg ;for {for ;_eddc <=_agdg &&_febae .GetPixel (_eddc ,_afdg );_eddc ++{if _egbe =_febae .SetPixel (_eddc ,_afdg ,0);_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _egbe =_ggbc (_cgfa ,_bfafe ,_eddc -1,_ffdfg ._aeec ,_ffdfg ._cacc ,_fdcc ,&_cfdg );
_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eddc > _ffdfg ._fdce {if _egbe =_ggbc (_cgfa ,_ffdfg ._fdce +1,_eddc -1,_ffdfg ._aeec ,-_ffdfg ._cacc ,_fdcc ,&_cfdg );_egbe !=nil {return nil ,_d .Wrap (_egbe ,_cefc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _eddc ++;_eddc <=_ffdfg ._fdce +1&&_eddc <=_agdg &&!_febae .GetPixel (_eddc ,_afdg );_eddc ++{};_bfafe =_eddc ;if !(_eddc <=_ffdfg ._fdce +1&&_eddc <=_agdg ){break ;};};};_cfdg .Max .X ++;_cfdg .Max .Y ++;return &_cfdg ,nil ;};func (_aadf *Points )AddPoint (x ,y float32 ){*_aadf =append (*_aadf ,Point {x ,y })};
func _aad (_ffff ,_bfbe *Bitmap ,_dbcf ,_edg ,_bfcb ,_gdee ,_bdbe ,_ebag ,_adge ,_gefe int ,_gcef CombinationOperator )error {var _acga int ;_begd :=func (){_acga ++;_bfcb +=_bfbe .RowStride ;_gdee +=_ffff .RowStride ;_bdbe +=_ffff .RowStride };for _acga =_dbcf ;
_acga < _edg ;_begd (){var _faca uint16 ;_dgbc :=_bfcb ;for _bfba :=_gdee ;_bfba <=_bdbe ;_bfba ++{_cgc ,_ebdd :=_bfbe .GetByte (_dgbc );if _ebdd !=nil {return _ebdd ;};_dbg ,_ebdd :=_ffff .GetByte (_bfba );if _ebdd !=nil {return _ebdd ;};_faca =(_faca |uint16 (_dbg ))<<uint (_gefe );
_dbg =byte (_faca >>8);if _bfba ==_bdbe {_dbg =_cfdc (uint (_ebag ),_dbg );};if _ebdd =_bfbe .SetByte (_dgbc ,_gffb (_cgc ,_dbg ,_gcef ));_ebdd !=nil {return _ebdd ;};_dgbc ++;_faca <<=uint (_adge );};};return nil ;};func ClipBoxToRectangle (box *_f .Rectangle ,wi ,hi int )(_gdef *_f .Rectangle ,_fegg error ){const _abcc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_d .Error (_abcc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_d .Error (_abcc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_fceg :=*box ;_gdef =&_fceg ;if _gdef .Min .X < 0{_gdef .Max .X +=_gdef .Min .X ;_gdef .Min .X =0;};if _gdef .Min .Y < 0{_gdef .Max .Y +=_gdef .Min .Y ;_gdef .Min .Y =0;};if _gdef .Max .X > wi {_gdef .Max .X =wi ;};if _gdef .Max .Y > hi {_gdef .Max .Y =hi ;
};return _gdef ,nil ;};func (_eacga *byHeight )Swap (i ,j int ){_eacga .Values [i ],_eacga .Values [j ]=_eacga .Values [j ],_eacga .Values [i ];if _eacga .Boxes !=nil {_eacga .Boxes [i ],_eacga .Boxes [j ]=_eacga .Boxes [j ],_eacga .Boxes [i ];};};const (CmbOpOr CombinationOperator =iota ;
CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_begf *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_efa bool ,_geg error ){const _bbe ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_debdd ();};_ecc :=_begf .Width >>3;_dcb :=_begf .Width &7;_gba :=byte (0xff<<uint (8-_dcb ));var (_dgbb ,_cbce ,_gadc ,_bcb int ;_ddcd byte ;);for _dgbb =0;_dgbb < _begf .Height ;_dgbb ++{_gadc =_begf .RowStride *_dgbb ;for _cbce =0;
_cbce < _ecc ;_cbce ++{_ddcd ,_geg =_begf .GetByte (_gadc +_cbce );if _geg !=nil {return false ,_d .Wrap (_geg ,_bbe ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_bcb +=tab8 [_ddcd ];};if _dcb !=0{_ddcd ,_geg =_begf .GetByte (_gadc +_cbce );if _geg !=nil {return false ,_d .Wrap (_geg ,_bbe ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_ddcd &=_gba ;_bcb +=tab8 [_ddcd ];};if _bcb > thresh {return true ,nil ;};};return _efa ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);type SizeSelection int ;func TstNSymbol (t *_c .T ,scale ...int )*Bitmap {_bebbg ,_fddb :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_a .NoError (t ,_fddb );return TstGetScaledSymbol (t ,_bebbg ,scale ...);};func _fdbg (_egef *Bitmap ,_bbfeg *Bitmap ,_ffab *Selection ,_gfdg **Bitmap )(*Bitmap ,error ){const _daec ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _bbfeg ==nil {return nil ,_d .Error (_daec ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _ffab ==nil {return nil ,_d .Error (_daec ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_faaa ,_ceab :=_ffab .Height ,_ffab .Width ;if _faaa ==0||_ceab ==0{return nil ,_d .Error (_daec ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _egef ==nil {_egef =_bbfeg .createTemplate ();
*_gfdg =_bbfeg ;return _egef ,nil ;};_egef .Width =_bbfeg .Width ;_egef .Height =_bbfeg .Height ;_egef .RowStride =_bbfeg .RowStride ;_egef .Color =_bbfeg .Color ;_egef .Data =make ([]byte ,_bbfeg .RowStride *_bbfeg .Height );if _egef ==_bbfeg {*_gfdg =_bbfeg .Copy ();
}else {*_gfdg =_bbfeg ;};return _egef ,nil ;};func NewClassedPoints (points *Points ,classes _dgb .IntSlice )(*ClassedPoints ,error ){const _eacbg ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_d .Error (_eacbg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_d .Error (_eacbg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_acda :=&ClassedPoints {Points :points ,IntSlice :classes };if _ebe :=_acda .validateIntSlice ();_ebe !=nil {return nil ,_d .Wrap (_ebe ,_eacbg ,"");
};return _acda ,nil ;};func _afa (_ecdd int )int {if _ecdd < 0{return -_ecdd ;};return _ecdd ;};func (_gffe *Bitmap )centroid (_aebc ,_eaecd []int )(Point ,error ){_efgf :=Point {};_gffe .setPadBits (0);if len (_aebc )==0{_aebc =_cfaa ();};if len (_eaecd )==0{_eaecd =_debdd ();
};var _cfecb ,_dagc ,_gcegf ,_dffc ,_ceba ,_beaa int ;var _defd byte ;for _ceba =0;_ceba < _gffe .Height ;_ceba ++{_acac :=_gffe .RowStride *_ceba ;_dffc =0;for _beaa =0;_beaa < _gffe .RowStride ;_beaa ++{_defd =_gffe .Data [_acac +_beaa ];if _defd !=0{_dffc +=_eaecd [_defd ];
_cfecb +=_aebc [_defd ]+_beaa *8*_eaecd [_defd ];};};_gcegf +=_dffc ;_dagc +=_dffc *_ceba ;};if _gcegf !=0{_efgf .X =float32 (_cfecb )/float32 (_gcegf );_efgf .Y =float32 (_dagc )/float32 (_gcegf );};return _efgf ,nil ;};func (_beac MorphProcess )verify (_acee int ,_eaba ,_eggdc *int )error {const _eade ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _beac .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_beac .Arguments )!=2{return _d .Error (_eade ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_bcgd ,_egaea :=_beac .getWidthHeight ();if _bcgd <=0||_egaea <=0{return _d .Error (_eade ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_adbgb :=len (_beac .Arguments );*_eaba +=_adbgb ;if _adbgb < 1||_adbgb > 4{return _d .Error (_eade ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fgad :=0;_fgad < _adbgb ;_fgad ++{if _beac .Arguments [_fgad ]< 1||_beac .Arguments [_fgad ]> 4{return _d .Error (_eade ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_beac .Arguments )==0{return _d .Error (_eade ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_eed :=_beac .Arguments [0];if _eed !=2&&_eed !=4&&_eed !=8{return _d .Error (_eade ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_eaba -=_dafa [_eed /4];case MopAddBorder :if len (_beac .Arguments )==0{return _d .Error (_eade ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecde :=_beac .Arguments [0];if _acee > 0{return _d .Error (_eade ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _ecde < 1{return _d .Error (_eade ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_eggdc =_ecde ;};return nil ;};const (MopDilation MorphOperation =iota ;
MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func _egc (_dgg ,_dbdb *Bitmap ,_gde int ,_eda []byte ,_addd int )(_ecd error ){const _deg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_eae ,_cgg ,_dfdea ,_bae ,_ddaf ,_edc ,_ggg ,_fga int ;_ffed ,_defg ,_geb ,_agg uint32 ;_gbf ,_fdb byte ;_eacg uint16 ;);_feg :=make ([]byte ,4);_eaf :=make ([]byte ,4);for _dfdea =0;_dfdea < _dgg .Height -1;_dfdea ,_bae =_dfdea +2,_bae +1{_eae =_dfdea *_dgg .RowStride ;
_cgg =_bae *_dbdb .RowStride ;for _ddaf ,_edc =0,0;_ddaf < _addd ;_ddaf ,_edc =_ddaf +4,_edc +1{for _ggg =0;_ggg < 4;_ggg ++{_fga =_eae +_ddaf +_ggg ;if _fga <=len (_dgg .Data )-1&&_fga < _eae +_dgg .RowStride {_feg [_ggg ]=_dgg .Data [_fga ];}else {_feg [_ggg ]=0x00;
};_fga =_eae +_dgg .RowStride +_ddaf +_ggg ;if _fga <=len (_dgg .Data )-1&&_fga < _eae +(2*_dgg .RowStride ){_eaf [_ggg ]=_dgg .Data [_fga ];}else {_eaf [_ggg ]=0x00;};};_ffed =_ac .BigEndian .Uint32 (_feg );_defg =_ac .BigEndian .Uint32 (_eaf );_geb =_ffed &_defg ;
_geb |=_geb <<1;_agg =_ffed |_defg ;_agg &=_agg <<1;_defg =_geb &_agg ;_defg &=0xaaaaaaaa;_ffed =_defg |(_defg <<7);_gbf =byte (_ffed >>24);_fdb =byte ((_ffed >>8)&0xff);_fga =_cgg +_edc ;if _fga +1==len (_dbdb .Data )-1||_fga +1>=_cgg +_dbdb .RowStride {if _ecd =_dbdb .SetByte (_fga ,_eda [_gbf ]);
_ecd !=nil {return _d .Wrapf (_ecd ,_deg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fga );};}else {_eacg =(uint16 (_eda [_gbf ])<<8)|uint16 (_eda [_fdb ]);if _ecd =_dbdb .setTwoBytes (_fga ,_eacg );_ecd !=nil {return _d .Wrapf (_ecd ,_deg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fga );
};_edc ++;};};};return nil ;};func MakePixelSumTab8 ()[]int {return _debdd ()};func (_bbeg *byWidth )Len ()int {return len (_bbeg .Values )};func (_baba *Bitmap )String ()string {var _eba ="\u000a";for _edcb :=0;_edcb < _baba .Height ;_edcb ++{var _ffc string ;
for _dgfa :=0;_dgfa < _baba .Width ;_dgfa ++{_dgfc :=_baba .GetPixel (_dgfa ,_edcb );if _dgfc {_ffc +="\u0031";}else {_ffc +="\u0030";};};_eba +=_ffc +"\u000a";};return _eba ;};func (_bbgg *Bitmap )thresholdPixelSum (_gfdc int )bool {var (_edd int ;_agcc uint8 ;
_ddea byte ;_fcge int ;);_fdbc :=_bbgg .RowStride ;_aefg :=uint (_bbgg .Width &0x07);if _aefg !=0{_agcc =uint8 ((0xff<<(8-_aefg ))&0xff);_fdbc --;};for _gdgf :=0;_gdgf < _bbgg .Height ;_gdgf ++{for _fcge =0;_fcge < _fdbc ;_fcge ++{_ddea =_bbgg .Data [_gdgf *_bbgg .RowStride +_fcge ];
_edd +=int (_babc [_ddea ]);};if _aefg !=0{_ddea =_bbgg .Data [_gdgf *_bbgg .RowStride +_fcge ]&_agcc ;_edd +=int (_babc [_ddea ]);};if _edd > _gfdc {return true ;};};return false ;};func (_agd *Bitmap )SetByte (index int ,v byte )error {if index > len (_agd .Data )-1||index < 0{return _d .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_agd .Data [index ]=v ;return nil ;};func (_eedf *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _dgbbe ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_eedf .IntSlice .Size (){return 0,_d .Errorf (_dgbbe ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_eedf .YAtIndex (i )),nil ;};func (_gga *Bitmap )GetPixel (x ,y int )bool {_bcc :=_gga .GetByteIndex (x ,y );_ecea :=_gga .GetBitOffset (x );_degd :=uint (7-_ecea );if _bcc > len (_gga .Data )-1{_b .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_gga );
return false ;};if (_gga .Data [_bcc ]>>_degd )&0x01>=1{return true ;};return false ;};func _bgea (_ggdf ,_gfeg *Bitmap ,_dbbeb ,_gffbe int )(*Bitmap ,error ){const _gaff ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _gfeg ==nil {return nil ,_d .Error (_gaff ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dbbeb < 1||_gffbe < 1{return nil ,_d .Error (_gaff ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dbbeb ==1&&_gffbe ==1{_aedca ,_begfg :=_bafb (_ggdf ,_gfeg );if _begfg !=nil {return nil ,_d .Wrap (_begfg ,_gaff ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _aedca ,nil ;};if _dbbeb ==1||_gffbe ==1{_deff :=SelCreateBrick (_gffbe ,_dbbeb ,_gffbe /2,_dbbeb /2,SelHit );_daca ,_fbed :=_edca (_ggdf ,_gfeg ,_deff );if _fbed !=nil {return nil ,_d .Wrap (_fbed ,_gaff ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _daca ,nil ;};_cdda :=SelCreateBrick (1,_dbbeb ,0,_dbbeb /2,SelHit );_gaeff :=SelCreateBrick (_gffbe ,1,_gffbe /2,0,SelHit );_afdb ,_debc :=_edca (nil ,_gfeg ,_cdda );if _debc !=nil {return nil ,_d .Wrap (_debc ,_gaff ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_ggdf ,_debc =_edca (_ggdf ,_afdb ,_gaeff );if _debc !=nil {return nil ,_d .Wrap (_debc ,_gaff ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ggdf ,nil ;};func TstWriteSymbols (t *_c .T ,bms *Bitmaps ,src *Bitmap ){for _baab :=0;_baab < bms .Size ();
_baab ++{_ebed :=bms .Values [_baab ];_bebbb :=bms .Boxes [_baab ];_gbbf :=src .RasterOperation (_bebbb .Min .X ,_bebbb .Min .Y ,_ebed .Width ,_ebed .Height ,PixSrc ,_ebed ,0,0);_a .NoError (t ,_gbbf );};};func (_ggad *ClassedPoints )xSortFunction ()func (_acag int ,_dcaf int )bool {return func (_aegb ,_eeea int )bool {return _ggad .XAtIndex (_aegb )< _ggad .XAtIndex (_eeea )};
};func (_agc *Bitmap )Equivalent (s *Bitmap )bool {return _agc .equivalent (s )};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};var _efgfb =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_efef *Bitmaps )selectByIndexes (_ffdb []int )(*Bitmaps ,error ){_gced :=&Bitmaps {};for _ ,_faef :=range _ffdb {_cbad ,_bfdd :=_efef .GetBitmap (_faef );if _bfdd !=nil {return nil ,_d .Wrap (_bfdd ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_gced .AddBitmap (_cbad );};return _gced ,nil ;};func (_fgab *Bitmaps )CountPixels ()*_dgb .NumSlice {_gdb :=&_dgb .NumSlice {};for _ ,_bbfd :=range _fgab .Values {_gdb .AddInt (_bbfd .CountPixels ());};return _gdb ;};func _gffb (_dba ,_gfcec byte ,_aeed CombinationOperator )byte {switch _aeed {case CmbOpOr :return _gfcec |_dba ;
case CmbOpAnd :return _gfcec &_dba ;case CmbOpXor :return _gfcec ^_dba ;case CmbOpXNor :return ^(_gfcec ^_dba );case CmbOpNot :return ^(_gfcec );default:return _gfcec ;};};func (_cabd *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _fgge ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_cabd .Values )==0{return nil ,_d .Error (_fgge ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_gbfaf :=&BitmapsArray {};_cabd .SortByWidth ();_eebc :=-1;_defb :=-1;for _ddcf :=0;_ddcf < len (_cabd .Values );
_ddcf ++{_fgbbg :=_cabd .Values [_ddcf ].Width ;if _fgbbg > _eebc {_eebc =_fgbbg ;_defb ++;_gbfaf .Values =append (_gbfaf .Values ,&Bitmaps {});};_gbfaf .Values [_defb ].AddBitmap (_cabd .Values [_ddcf ]);};return _gbfaf ,nil ;};var (_becd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};
_gebba =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_eafdb *ClassedPoints )SortByY (){_eafdb ._cbcd =_eafdb .ySortFunction ();_ea .Sort (_eafdb )};func (_cgee *ClassedPoints )validateIntSlice ()error {const _ggfdd ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_bacg :=range _cgee .IntSlice {if _bacg >=(_cgee .Points .Size ()){return _d .Errorf (_ggfdd ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_bacg ,_cgee .Points .Size ());
};};return nil ;};type SizeComparison int ;func (_dff *Bitmap )GetUnpaddedData ()([]byte ,error ){_cbcc :=uint (_dff .Width &0x07);if _cbcc ==0{return _dff .Data ,nil ;};_dgf :=_dff .Width *_dff .Height ;if _dgf %8!=0{_dgf >>=3;_dgf ++;}else {_dgf >>=3;
};_dad :=make ([]byte ,_dgf );_gfb :=_ce .NewWriterMSB (_dad );const _dag ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _edb :=0;_edb < _dff .Height ;_edb ++{for _aef :=0;_aef < _dff .RowStride ;_aef ++{_egbg :=_dff .Data [_edb *_dff .RowStride +_aef ];
if _aef !=_dff .RowStride -1{_gfe :=_gfb .WriteByte (_egbg );if _gfe !=nil {return nil ,_d .Wrap (_gfe ,_dag ,"");};continue ;};for _dfc :=uint (0);_dfc < _cbcc ;_dfc ++{_cgad :=_gfb .WriteBit (int (_egbg >>(7-_dfc )&0x01));if _cgad !=nil {return nil ,_d .Wrap (_cgad ,_dag ,"");
};};};};return _dad ,nil ;};func _edca (_ceaa ,_fdc *Bitmap ,_ceaeb *Selection )(*Bitmap ,error ){const _edce ="\u0065\u0072\u006fd\u0065";var (_dccf error ;_acce *Bitmap ;);_ceaa ,_dccf =_fdbg (_ceaa ,_fdc ,_ceaeb ,&_acce );if _dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"");
};if _dccf =_ceaa .setAll ();_dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"");};var _bagf SelectionValue ;for _bdeb :=0;_bdeb < _ceaeb .Height ;_bdeb ++{for _bgff :=0;_bgff < _ceaeb .Width ;_bgff ++{_bagf =_ceaeb .Data [_bdeb ][_bgff ];if _bagf ==SelHit {_dccf =_ebdga (_ceaa ,_ceaeb .Cx -_bgff ,_ceaeb .Cy -_bdeb ,_fdc .Width ,_fdc .Height ,PixSrcAndDst ,_acce ,0,0);
if _dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"");};};};};if MorphBC ==SymmetricMorphBC {return _ceaa ,nil ;};_cebe ,_bfcc ,_efce ,_adaa :=_ceaeb .findMaxTranslations ();if _cebe > 0{if _dccf =_ceaa .RasterOperation (0,0,_cebe ,_fdc .Height ,PixClr ,nil ,0,0);
_dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _efce > 0{if _dccf =_ceaa .RasterOperation (_fdc .Width -_efce ,0,_efce ,_fdc .Height ,PixClr ,nil ,0,0);_dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _bfcc > 0{if _dccf =_ceaa .RasterOperation (0,0,_fdc .Width ,_bfcc ,PixClr ,nil ,0,0);_dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _adaa > 0{if _dccf =_ceaa .RasterOperation (0,_fdc .Height -_adaa ,_fdc .Width ,_adaa ,PixClr ,nil ,0,0);
_dccf !=nil {return nil ,_d .Wrap (_dccf ,_edce ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _ceaa ,nil ;};func (_faa *Bitmap )equivalent (_fcb *Bitmap )bool {if _faa ==_fcb {return true ;};if !_faa .SizesEqual (_fcb ){return false ;};_ada :=_cbdg (_faa ,_fcb ,CmbOpXor );
_egdc :=_faa .countPixels ();_baa :=int (0.25*float32 (_egdc ));if _ada .thresholdPixelSum (_baa ){return false ;};var (_eeba [9][9]int ;_ffbg [18][9]int ;_egdg [9][18]int ;_dgac int ;_dcfa int ;);_egg :=9;_dgcg :=_faa .Height /_egg ;_ffge :=_faa .Width /_egg ;
_ceae ,_gbfa :=_dgcg /2,_ffge /2;if _dgcg < _ffge {_ceae =_ffge /2;_gbfa =_dgcg /2;};_bbec :=float64 (_ceae )*float64 (_gbfa )*_g .Pi ;_eabe :=int (float64 (_dgcg *_ffge /2)*0.9);_aeeg :=int (float64 (_ffge *_dgcg /2)*0.9);for _fac :=0;_fac < _egg ;_fac ++{_bgb :=_ffge *_fac +_dgac ;
var _bdfb int ;if _fac ==_egg -1{_dgac =0;_bdfb =_faa .Width ;}else {_bdfb =_bgb +_ffge ;if ((_faa .Width -_dgac )%_egg )> 0{_dgac ++;_bdfb ++;};};for _degdg :=0;_degdg < _egg ;_degdg ++{_ffd :=_dgcg *_degdg +_dcfa ;var _fcff int ;if _degdg ==_egg -1{_dcfa =0;
_fcff =_faa .Height ;}else {_fcff =_ffd +_dgcg ;if (_faa .Height -_dcfa )%_egg > 0{_dcfa ++;_fcff ++;};};var _ebde ,_acdc ,_fce ,_bed int ;_fbg :=(_bgb +_bdfb )/2;_fdag :=(_ffd +_fcff )/2;for _ebg :=_bgb ;_ebg < _bdfb ;_ebg ++{for _aaeb :=_ffd ;_aaeb < _fcff ;
_aaeb ++{if _ada .GetPixel (_ebg ,_aaeb ){if _ebg < _fbg {_ebde ++;}else {_acdc ++;};if _aaeb < _fdag {_bed ++;}else {_fce ++;};};};};_eeba [_fac ][_degdg ]=_ebde +_acdc ;_ffbg [_fac *2][_degdg ]=_ebde ;_ffbg [_fac *2+1][_degdg ]=_acdc ;_egdg [_fac ][_degdg *2]=_bed ;
_egdg [_fac ][_degdg *2+1]=_fce ;};};for _ebf :=0;_ebf < _egg *2-1;_ebf ++{for _ceg :=0;_ceg < (_egg -1);_ceg ++{var _ffec int ;for _gbfg :=0;_gbfg < 2;_gbfg ++{for _bgae :=0;_bgae < 2;_bgae ++{_ffec +=_ffbg [_ebf +_gbfg ][_ceg +_bgae ];};};if _ffec > _aeeg {return false ;
};};};for _gdc :=0;_gdc < (_egg -1);_gdc ++{for _gdf :=0;_gdf < ((_egg *2)-1);_gdf ++{var _cgd int ;for _edab :=0;_edab < 2;_edab ++{for _fdg :=0;_fdg < 2;_fdg ++{_cgd +=_egdg [_gdc +_edab ][_gdf +_fdg ];};};if _cgd > _eabe {return false ;};};};for _daef :=0;
_daef < (_egg -2);_daef ++{for _cfa :=0;_cfa < (_egg -2);_cfa ++{var _bbbc ,_bceec int ;for _bcfg :=0;_bcfg < 3;_bcfg ++{for _dacb :=0;_dacb < 3;_dacb ++{if _bcfg ==_dacb {_bbbc +=_eeba [_daef +_bcfg ][_cfa +_dacb ];};if (2-_bcfg )==_dacb {_bceec +=_eeba [_daef +_bcfg ][_cfa +_dacb ];
};};};if _bbbc > _aeeg ||_bceec > _aeeg {return false ;};};};for _aab :=0;_aab < (_egg -1);_aab ++{for _efe :=0;_efe < (_egg -1);_efe ++{var _ecg int ;for _bgbe :=0;_bgbe < 2;_bgbe ++{for _cebb :=0;_cebb < 2;_cebb ++{_ecg +=_eeba [_aab +_bgbe ][_efe +_cebb ];
};};if float64 (_ecg )> _bbec {return false ;};};};return true ;};func TstImageBitmap ()*Bitmap {return _efgfe .Copy ()};func (_cbca *Bitmap )SizesEqual (s *Bitmap )bool {if _cbca ==s {return true ;};if _cbca .Width !=s .Width ||_cbca .Height !=s .Height {return false ;
};return true ;};func TstCSymbol (t *_c .T )*Bitmap {t .Helper ();_cgcge :=New (6,6);_a .NoError (t ,_cgcge .SetPixel (1,0,1));_a .NoError (t ,_cgcge .SetPixel (2,0,1));_a .NoError (t ,_cgcge .SetPixel (3,0,1));_a .NoError (t ,_cgcge .SetPixel (4,0,1));
_a .NoError (t ,_cgcge .SetPixel (0,1,1));_a .NoError (t ,_cgcge .SetPixel (5,1,1));_a .NoError (t ,_cgcge .SetPixel (0,2,1));_a .NoError (t ,_cgcge .SetPixel (0,3,1));_a .NoError (t ,_cgcge .SetPixel (0,4,1));_a .NoError (t ,_cgcge .SetPixel (5,4,1));
_a .NoError (t ,_cgcge .SetPixel (1,5,1));_a .NoError (t ,_cgcge .SetPixel (2,5,1));_a .NoError (t ,_cgcge .SetPixel (3,5,1));_a .NoError (t ,_cgcge .SetPixel (4,5,1));return _cgcge ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bfe ,_bec int ;
_befaf :=src .RowStride -1;if x < 0{_bec =-x ;x =0;}else if x +src .Width > dst .Width {_befaf -=src .Width +x -dst .Width ;};if y < 0{_bfe =-y ;y =0;_bec +=src .RowStride ;_befaf +=src .RowStride ;}else if y +src .Height > dst .Height {_bfe =src .Height +y -dst .Height ;
};var (_dge int ;_caed error ;);_adgd :=x &0x07;_bbge :=8-_adgd ;_fab :=src .Width &0x07;_aebf :=_bbge -_fab ;_bbed :=_bbge &0x07!=0;_dfb :=src .Width <=((_befaf -_bec )<<3)+_bbge ;_gab :=dst .GetByteIndex (x ,y );_acf :=_bfe +dst .Height ;if src .Height > _acf {_dge =_acf ;
}else {_dge =src .Height ;};switch {case !_bbed :_caed =_ccde (src ,dst ,_bfe ,_dge ,_gab ,_bec ,_befaf ,op );case _dfb :_caed =_aad (src ,dst ,_bfe ,_dge ,_gab ,_bec ,_befaf ,_aebf ,_adgd ,_bbge ,op );default:_caed =_eee (src ,dst ,_bfe ,_dge ,_gab ,_bec ,_befaf ,_aebf ,_adgd ,_bbge ,op ,_fab );
};return _caed ;};func _ccde (_eaff ,_fbf *Bitmap ,_fagb ,_bad ,_acgcc ,_fdeb ,_deee int ,_eaag CombinationOperator )error {var _fdffa int ;_afe :=func (){_fdffa ++;_acgcc +=_fbf .RowStride ;_fdeb +=_eaff .RowStride ;_deee +=_eaff .RowStride };for _fdffa =_fagb ;
_fdffa < _bad ;_afe (){_cbae :=_acgcc ;for _cac :=_fdeb ;_cac <=_deee ;_cac ++{_cdc ,_fecee :=_fbf .GetByte (_cbae );if _fecee !=nil {return _fecee ;};_ddbe ,_fecee :=_eaff .GetByte (_cac );if _fecee !=nil {return _fecee ;};if _fecee =_fbf .SetByte (_cbae ,_gffb (_cdc ,_ddbe ,_eaag ));
_fecee !=nil {return _fecee ;};_cbae ++;};};return nil ;};func _ddc ()(_bgdb []byte ){_bgdb =make ([]byte ,256);for _gfd :=0;_gfd < 256;_gfd ++{_bbd :=byte (_gfd );_bgdb [_bbd ]=(_bbd &0x01)|((_bbd &0x04)>>1)|((_bbd &0x10)>>2)|((_bbd &0x40)>>3)|((_bbd &0x02)<<3)|((_bbd &0x08)<<2)|((_bbd &0x20)<<1)|(_bbd &0x80);
};return _bgdb ;};const (_deged shift =iota ;_abb ;);func (_gbbg *byWidth )Swap (i ,j int ){_gbbg .Values [i ],_gbbg .Values [j ]=_gbbg .Values [j ],_gbbg .Values [i ];if _gbbg .Boxes !=nil {_gbbg .Boxes [i ],_gbbg .Boxes [j ]=_gbbg .Boxes [j ],_gbbg .Boxes [i ];
};};func TstVSymbol (t *_c .T ,scale ...int )*Bitmap {_eeaf ,_agga :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_a .NoError (t ,_agga );return TstGetScaledSymbol (t ,_eeaf ,scale ...);};func (_ffba *Bitmaps )Size ()int {return len (_ffba .Values )};
func _cbcdc (_ccegg ,_cccd ,_fbfc byte )byte {return (_ccegg &^(_fbfc ))|(_cccd &_fbfc )};func (_cfgc *Bitmap )GetVanillaData ()[]byte {if _cfgc .Color ==Chocolate {_cfgc .inverseData ();};return _cfgc .Data ;};type Bitmaps struct{Values []*Bitmap ;Boxes []*_f .Rectangle ;
};var (_aadef =_bdb ();_edba =_fec ();_bdfa =_eag (););var _dafa =[5]int {1,2,3,0,4};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _caf ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_efb :=_bee (width ,height );_efb .Data =data ;if _bceb :=((width *height )+7)>>3;len (data )< _bceb {return nil ,_d .Errorf (_caf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_bceb );
};if _adda :=_efb .addPadBits ();_adda !=nil {return nil ,_d .Wrap (_adda ,_caf ,"");};return _efb ,nil ;};func TstFrameBitmapData ()[]byte {return _bddc .Data };const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func _fcacg (_fcbg *Bitmap ,_eabb *Bitmap ,_ffffa int )(_cfae error ){const _gbed ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_ccgf :=_adg (_fcbg .Height ,_eabb .Height );_cfdd :=_adg (_fcbg .RowStride ,_eabb .RowStride );switch _ffffa {case 4:_cfae =_deaa (_fcbg ,_eabb ,_ccgf ,_cfdd );case 8:_cfae =_afgf (_fcbg ,_eabb ,_ccgf ,_cfdd );default:return _d .Errorf (_gbed ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ffffa );
};if _cfae !=nil {return _d .Wrap (_cfae ,_gbed ,"");};return nil ;};var (_bddc *Bitmap ;_efgfe *Bitmap ;);func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _dac ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_afff :=_bee (width ,height );
_afff .Data =data ;if len (data )< height *_afff .RowStride {return nil ,_d .Errorf (_dac ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_afff .RowStride );
};return _afff ,nil ;};func (_cadaf *Bitmaps )SortByHeight (){_ccbg :=(*byHeight )(_cadaf );_ea .Sort (_ccbg )};func (_agce *ClassedPoints )ySortFunction ()func (_daae int ,_ebcg int )bool {return func (_fadcc ,_bfag int )bool {return _agce .YAtIndex (_fadcc )< _agce .YAtIndex (_bfag )};
};type byHeight Bitmaps ;func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _eff ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_d .Error (_eff ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_d .Error (_eff ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_d .Error (_eff ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_d .Error (_eff ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_d .Error (_eff ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gccdb ,_fgbg :=bm1 .Width ,bm1 .Height ;_ecgd ,_acdf :=bm2 .Width ,bm2 .Height ;if _dgb .Abs (_gccdb -_ecgd )> maxDiffW {return false ,nil ;};if _dgb .Abs (_fgbg -_acdf )> maxDiffH {return false ,nil ;};_bbaa :=int (delX +_dgb .Sign (delX )*0.5);_aebbb :=int (delY +_dgb .Sign (delY )*0.5);
_agbg :=int (_g .Ceil (_g .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_caff :=bm2 .RowStride ;_bgdg :=_cbb (_aebbb ,0);_bdad :=_adg (_acdf +_aebbb ,_fgbg );_gddf :=bm1 .RowStride *_bgdg ;_egaff :=bm2 .RowStride *(_bgdg -_aebbb );
var _cgbd int ;if _bdad <=_fgbg {_cgbd =downcount [_bdad -1];};_ebgd :=_cbb (_bbaa ,0);_afcbe :=_adg (_ecgd +_bbaa ,_gccdb );var _ggabd ,_bedg int ;if _bbaa >=8{_ggabd =_bbaa >>3;_gddf +=_ggabd ;_ebgd -=_ggabd <<3;_afcbe -=_ggabd <<3;_bbaa &=7;}else if _bbaa <=-8{_bedg =-((_bbaa +7)>>3);
_egaff +=_bedg ;_caff -=_bedg ;_bbaa +=_bedg <<3;};var (_bdaa ,_ecbb ,_fggd int ;_bfed ,_gegd ,_cgdd byte ;);if _ebgd >=_afcbe ||_bgdg >=_bdad {return false ,nil ;};_egca :=(_afcbe +7)>>3;switch {case _bbaa ==0:for _ecbb =_bgdg ;_ecbb < _bdad ;_ecbb ,_gddf ,_egaff =_ecbb +1,_gddf +bm1 .RowStride ,_egaff +bm2 .RowStride {for _fggd =0;
_fggd < _egca ;_fggd ++{_bfed =bm1 .Data [_gddf +_fggd ]&bm2 .Data [_egaff +_fggd ];_bdaa +=tab [_bfed ];};if _bdaa >=_agbg {return true ,nil ;};if _eegf :=_bdaa +downcount [_ecbb ]-_cgbd ;_eegf < _agbg {return false ,nil ;};};case _bbaa > 0&&_caff < _egca :for _ecbb =_bgdg ;
_ecbb < _bdad ;_ecbb ,_gddf ,_egaff =_ecbb +1,_gddf +bm1 .RowStride ,_egaff +bm2 .RowStride {_gegd =bm1 .Data [_gddf ];_cgdd =bm2 .Data [_egaff ]>>uint (_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];for _fggd =1;_fggd < _caff ;_fggd ++{_gegd =bm1 .Data [_gddf +_fggd ];
_cgdd =bm2 .Data [_egaff +_fggd ]>>uint (_bbaa )|bm2 .Data [_egaff +_fggd -1]<<uint (8-_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];};_gegd =bm1 .Data [_gddf +_fggd ];_cgdd =bm2 .Data [_egaff +_fggd -1]<<uint (8-_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];
if _bdaa >=_agbg {return true ,nil ;}else if _bdaa +downcount [_ecbb ]-_cgbd < _agbg {return false ,nil ;};};case _bbaa > 0&&_caff >=_egca :for _ecbb =_bgdg ;_ecbb < _bdad ;_ecbb ,_gddf ,_egaff =_ecbb +1,_gddf +bm1 .RowStride ,_egaff +bm2 .RowStride {_gegd =bm1 .Data [_gddf ];
_cgdd =bm2 .Data [_egaff ]>>uint (_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];for _fggd =1;_fggd < _egca ;_fggd ++{_gegd =bm1 .Data [_gddf +_fggd ];_cgdd =bm2 .Data [_egaff +_fggd ]>>uint (_bbaa );_cgdd |=bm2 .Data [_egaff +_fggd -1]<<uint (8-_bbaa );
_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];};if _bdaa >=_agbg {return true ,nil ;}else if _bdaa +downcount [_ecbb ]-_cgbd < _agbg {return false ,nil ;};};case _egca < _caff :for _ecbb =_bgdg ;_ecbb < _bdad ;_ecbb ,_gddf ,_egaff =_ecbb +1,_gddf +bm1 .RowStride ,_egaff +bm2 .RowStride {for _fggd =0;
_fggd < _egca ;_fggd ++{_gegd =bm1 .Data [_gddf +_fggd ];_cgdd =bm2 .Data [_egaff +_fggd ]<<uint (-_bbaa );_cgdd |=bm2 .Data [_egaff +_fggd +1]>>uint (8+_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];};if _bdaa >=_agbg {return true ,nil ;}else if _afg :=_bdaa +downcount [_ecbb ]-_cgbd ;
_afg < _agbg {return false ,nil ;};};case _caff >=_egca :for _ecbb =_bgdg ;_ecbb < _bdad ;_ecbb ,_gddf ,_egaff =_ecbb +1,_gddf +bm1 .RowStride ,_egaff +bm2 .RowStride {for _fggd =0;_fggd < _egca ;_fggd ++{_gegd =bm1 .Data [_gddf +_fggd ];_cgdd =bm2 .Data [_egaff +_fggd ]<<uint (-_bbaa );
_cgdd |=bm2 .Data [_egaff +_fggd +1]>>uint (8+_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];};_gegd =bm1 .Data [_gddf +_fggd ];_cgdd =bm2 .Data [_egaff +_fggd ]<<uint (-_bbaa );_bfed =_gegd &_cgdd ;_bdaa +=tab [_bfed ];if _bdaa >=_agbg {return true ,nil ;
}else if _bdaa +downcount [_ecbb ]-_cgbd < _agbg {return false ,nil ;};};};_gfdcf :=float32 (_bdaa )*float32 (_bdaa )/(float32 (area1 )*float32 (area2 ));if _gfdcf >=scoreThreshold {_b .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_bdaa ,_agbg ,_gfdcf ,scoreThreshold );
};return false ,nil ;};func _fcac (_eagd *Bitmap ,_bfdg ,_edgec ,_gbfb ,_cdg int ,_geged RasterOperator ,_fcae *Bitmap ,_aeab ,_dedb int )error {var (_aagc byte ;_acdg int ;_daefb int ;_bbff ,_aeae int ;_dcab ,_cecac int ;);_aaee :=_gbfb >>3;_baed :=_gbfb &7;
if _baed > 0{_aagc =_becd [_baed ];};_acdg =_fcae .RowStride *_dedb +(_aeab >>3);_daefb =_eagd .RowStride *_edgec +(_bfdg >>3);switch _geged {case PixSrc :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;
for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=_fcae .Data [_bbff ];_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],_fcae .Data [_bbff ],_aagc );};};case PixNotSrc :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;
_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=^(_fcae .Data [_bbff ]);_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],^_fcae .Data [_bbff ],_aagc );};};case PixSrcOrDst :for _dcab =0;
_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]|=_fcae .Data [_bbff ];_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],_fcae .Data [_bbff ]|_eagd .Data [_aeae ],_aagc );
};};case PixSrcAndDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]&=_fcae .Data [_bbff ];_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],_fcae .Data [_bbff ]&_eagd .Data [_aeae ],_aagc );
};};case PixSrcXorDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]^=_fcae .Data [_bbff ];_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],_fcae .Data [_bbff ]^_eagd .Data [_aeae ],_aagc );
};};case PixNotSrcOrDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]|=^(_fcae .Data [_bbff ]);_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],^(_fcae .Data [_bbff ])|_eagd .Data [_aeae ],_aagc );
};};case PixNotSrcAndDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]&=^(_fcae .Data [_bbff ]);_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],^(_fcae .Data [_bbff ])&_eagd .Data [_aeae ],_aagc );
};};case PixSrcOrNotDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=_fcae .Data [_bbff ]|^(_eagd .Data [_aeae ]);_aeae ++;
_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],_fcae .Data [_bbff ]|^(_eagd .Data [_aeae ]),_aagc );};};case PixSrcAndNotDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;
for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=_fcae .Data [_bbff ]&^(_eagd .Data [_aeae ]);_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],_fcae .Data [_bbff ]&^(_eagd .Data [_aeae ]),_aagc );};};case PixNotPixSrcOrDst :for _dcab =0;
_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=^(_fcae .Data [_bbff ]|_eagd .Data [_aeae ]);_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],^(_fcae .Data [_bbff ]|_eagd .Data [_aeae ]),_aagc );
};};case PixNotPixSrcAndDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=^(_fcae .Data [_bbff ]&_eagd .Data [_aeae ]);_aeae ++;
_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],^(_fcae .Data [_bbff ]&_eagd .Data [_aeae ]),_aagc );};};case PixNotPixSrcXorDst :for _dcab =0;_dcab < _cdg ;_dcab ++{_bbff =_acdg +_dcab *_fcae .RowStride ;_aeae =_daefb +_dcab *_eagd .RowStride ;
for _cecac =0;_cecac < _aaee ;_cecac ++{_eagd .Data [_aeae ]=^(_fcae .Data [_bbff ]^_eagd .Data [_aeae ]);_aeae ++;_bbff ++;};if _baed > 0{_eagd .Data [_aeae ]=_cbcdc (_eagd .Data [_aeae ],^(_fcae .Data [_bbff ]^_eagd .Data [_aeae ]),_aagc );};};default:_b .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_geged );
return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _fadb (_eafc ,_dgfg ,_abeb *Bitmap )(*Bitmap ,error ){const _dbdf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _dgfg ==nil {return nil ,_d .Error (_dbdf ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _abeb ==nil {return nil ,_d .Error (_dbdf ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eafc ==_abeb {return nil ,_d .Error (_dbdf ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_dgfg .SizesEqual (_abeb ){_b .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_dbdf );
};var _bccc error ;if _eafc ,_bccc =_bafb (_eafc ,_dgfg );_bccc !=nil {return nil ,_d .Wrap (_bccc ,_dbdf ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _bccc =_eafc .RasterOperation (0,0,_eafc .Width ,_eafc .Height ,PixSrcXorDst ,_abeb ,0,0);
_bccc !=nil {return nil ,_d .Wrap (_bccc ,_dbdf ,"");};return _eafc ,nil ;};func _cfeg (_dada ,_bcccf ,_gccg *Bitmap )(*Bitmap ,error ){const _dfdd ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _bcccf ==nil {return nil ,_d .Error (_dfdd ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _gccg ==nil {return nil ,_d .Error (_dfdd ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _fccb error ;switch {case _dada ==_bcccf :if _fccb =_dada .RasterOperation (0,0,_bcccf .Width ,_bcccf .Height ,PixNotSrcAndDst ,_gccg ,0,0);
_fccb !=nil {return nil ,_d .Wrap (_fccb ,_dfdd ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _dada ==_gccg :if _fccb =_dada .RasterOperation (0,0,_bcccf .Width ,_bcccf .Height ,PixNotSrcAndDst ,_bcccf ,0,0);_fccb !=nil {return nil ,_d .Wrap (_fccb ,_dfdd ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_dada ,_fccb =_bafb (_dada ,_bcccf );if _fccb !=nil {return nil ,_d .Wrap (_fccb ,_dfdd ,"");};if _fccb =_dada .RasterOperation (0,0,_bcccf .Width ,_bcccf .Height ,PixNotSrcAndDst ,_gccg ,0,0);_fccb !=nil {return nil ,_d .Wrap (_fccb ,_dfdd ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _dada ,nil ;};func _bg (_bc ,_cb *Bitmap )(_bb error ){const _ag ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_fg :=_cb .RowStride ;_bcg :=_bc .RowStride ;var (_bf byte ;_dd uint16 ;
_agf ,_ee ,_aa ,_df ,_eab int ;);for _aa =0;_aa < _cb .Height ;_aa ++{_agf =_aa *_fg ;_ee =2*_aa *_bcg ;for _df =0;_df < _fg ;_df ++{_bf =_cb .Data [_agf +_df ];_dd =_aadef [_bf ];_eab =_ee +_df *2;if _bc .RowStride !=_cb .RowStride *2&&(_df +1)*2> _bc .RowStride {_bb =_bc .SetByte (_eab ,byte (_dd >>8));
}else {_bb =_bc .setTwoBytes (_eab ,_dd );};if _bb !=nil {return _d .Wrap (_bb ,_ag ,"");};};for _df =0;_df < _bcg ;_df ++{_eab =_ee +_bcg +_df ;_bf =_bc .Data [_ee +_df ];if _bb =_bc .SetByte (_eab ,_bf );_bb !=nil {return _d .Wrapf (_bb ,_ag ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ee +_df ,_ee +_bcg +_df );
};};};return nil ;};func (_eadc *ClassedPoints )YAtIndex (i int )float32 {return (*_eadc .Points )[_eadc .IntSlice [i ]].Y };func (_affd *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _affd .removeBorderGeneral (left ,right ,top ,bot );
};func (_ccbe Points )GetGeometry (i int )(_ffcf ,_bcab float32 ,_gecf error ){if i > len (_ccbe )-1{return 0,0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_acfab :=_ccbe [i ];return _acfab .X ,_acfab .Y ,nil ;};func (_adb *Bitmap )GetChocolateData ()[]byte {if _adb .Color ==Vanilla {_adb .inverseData ();};return _adb .Data ;};func init (){const _aaab ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_bddc =New (50,40);var _aegd error ;_bddc ,_aegd =_bddc .AddBorder (2,1);if _aegd !=nil {panic (_d .Wrap (_aegd ,_aaab ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_efgfe ,_aegd =NewWithData (50,22,_efgfb );if _aegd !=nil {panic (_d .Wrap (_aegd ,_aaab ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func (_fbef *Bitmap )removeBorderGeneral (_ffa ,_ffbf ,_fcfe ,_ffeb int )(*Bitmap ,error ){const _ffgef ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ffa < 0||_ffbf < 0||_fcfe < 0||_ffeb < 0{return nil ,_d .Error (_ffgef ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_befa ,_eggd :=_fbef .Width ,_fbef .Height ;_fbb :=_befa -_ffa -_ffbf ;_cgda :=_eggd -_fcfe -_ffeb ;if _fbb <=0{return nil ,_d .Errorf (_ffgef ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fbb );
};if _cgda <=0{return nil ,_d .Errorf (_ffgef ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cgda );};_bcbe :=New (_fbb ,_cgda );_bcbe .Color =_fbef .Color ;_fde :=_bcbe .RasterOperation (0,0,_fbb ,_cgda ,PixSrc ,_fbef ,_ffa ,_fcfe );
if _fde !=nil {return nil ,_d .Wrap (_fde ,_ffgef ,"");};return _bcbe ,nil ;};func TstASymbol (t *_c .T )*Bitmap {t .Helper ();_dbce :=New (6,6);_a .NoError (t ,_dbce .SetPixel (1,0,1));_a .NoError (t ,_dbce .SetPixel (2,0,1));_a .NoError (t ,_dbce .SetPixel (3,0,1));
_a .NoError (t ,_dbce .SetPixel (4,0,1));_a .NoError (t ,_dbce .SetPixel (5,1,1));_a .NoError (t ,_dbce .SetPixel (1,2,1));_a .NoError (t ,_dbce .SetPixel (2,2,1));_a .NoError (t ,_dbce .SetPixel (3,2,1));_a .NoError (t ,_dbce .SetPixel (4,2,1));_a .NoError (t ,_dbce .SetPixel (5,2,1));
_a .NoError (t ,_dbce .SetPixel (0,3,1));_a .NoError (t ,_dbce .SetPixel (5,3,1));_a .NoError (t ,_dbce .SetPixel (0,4,1));_a .NoError (t ,_dbce .SetPixel (5,4,1));_a .NoError (t ,_dbce .SetPixel (1,5,1));_a .NoError (t ,_dbce .SetPixel (2,5,1));_a .NoError (t ,_dbce .SetPixel (3,5,1));
_a .NoError (t ,_dbce .SetPixel (4,5,1));_a .NoError (t ,_dbce .SetPixel (5,5,1));return _dbce ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cfea float64 ,_dffb error ){const _bffd ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _cfea ,_d .Error (_bffd ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _cfea ,_d .Error (_bffd ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _cfea ,_d .Error (_bffd ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_acec ,_cbfdg :=bm1 .Width ,bm1 .Height ;_gcgda ,_afbd :=bm2 .Width ,bm2 .Height ;
if _afa (_acec -_gcgda )> maxDiffW {return 0,nil ;};if _afa (_cbfdg -_afbd )> maxDiffH {return 0,nil ;};var _dgff ,_geab int ;if delX >=0{_dgff =int (delX +0.5);}else {_dgff =int (delX -0.5);};if delY >=0{_geab =int (delY +0.5);}else {_geab =int (delY -0.5);
};_daac :=bm1 .createTemplate ();if _dffb =_daac .RasterOperation (_dgff ,_geab ,_gcgda ,_afbd ,PixSrc ,bm2 ,0,0);_dffb !=nil {return _cfea ,_d .Wrap (_dffb ,_bffd ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _dffb =_daac .RasterOperation (0,0,_acec ,_cbfdg ,PixSrcAndDst ,bm1 ,0,0);
_dffb !=nil {return _cfea ,_d .Wrap (_dffb ,_bffd ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_gcda :=_daac .countPixels ();_cfea =float64 (_gcda )*float64 (_gcda )/(float64 (area1 )*float64 (area2 ));return _cfea ,nil ;};func (_ead *Bitmap )setPadBits (_ffee int ){_eaga :=8-_ead .Width %8;
if _eaga ==8{return ;};_fbec :=_ead .Width /8;_adbb :=_gebba [_eaga ];if _ffee ==0{_adbb ^=_adbb ;};var _bgc int ;for _fcc :=0;_fcc < _ead .Height ;_fcc ++{_bgc =_fcc *_ead .RowStride +_fbec ;if _ffee ==0{_ead .Data [_bgc ]&=_adbb ;}else {_ead .Data [_bgc ]|=_adbb ;
};};};func (_afb *Boxes )Add (box *_f .Rectangle )error {if _afb ==nil {return _d .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_afb =append (*_afb ,box );
return nil ;};func (_babe *BitmapsArray )AddBitmaps (bm *Bitmaps ){_babe .Values =append (_babe .Values ,bm )};func _debdd ()[]int {_cced :=make ([]int ,256);for _cge :=0;_cge <=0xff;_cge ++{_acbc :=byte (_cge );_cced [_acbc ]=int (_acbc &0x1)+(int (_acbc >>1)&0x1)+(int (_acbc >>2)&0x1)+(int (_acbc >>3)&0x1)+(int (_acbc >>4)&0x1)+(int (_acbc >>5)&0x1)+(int (_acbc >>6)&0x1)+(int (_acbc >>7)&0x1);
};return _cced ;};func _gcfc (_aeaaa *Bitmap ,_dcbg ,_dcafg ,_gdeea ,_gbgfg int ,_cgf RasterOperator ,_addb *Bitmap ,_gdcc ,_aaebf int )error {var (_edac bool ;_eagb bool ;_eagbg int ;_bege int ;_baef int ;_bade bool ;_dbea byte ;_gbaa int ;_ddedb int ;
_gcge int ;_beba ,_aagb int ;);_gdag :=8-(_dcbg &7);_ffffe :=_gebba [_gdag ];_aeff :=_aeaaa .RowStride *_dcafg +(_dcbg >>3);_edgfc :=_addb .RowStride *_aaebf +(_gdcc >>3);if _gdeea < _gdag {_edac =true ;_ffffe &=_becd [8-_gdag +_gdeea ];};if !_edac {_eagbg =(_gdeea -_gdag )>>3;
if _eagbg > 0{_eagb =true ;_bege =_aeff +1;_baef =_edgfc +1;};};_gbaa =(_dcbg +_gdeea )&7;if !(_edac ||_gbaa ==0){_bade =true ;_dbea =_becd [_gbaa ];_ddedb =_aeff +1+_eagbg ;_gcge =_edgfc +1+_eagbg ;};switch _cgf {case PixSrc :for _beba =0;_beba < _gbgfg ;
_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],_addb .Data [_edgfc ],_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]=_addb .Data [_baef +_aagb ];
};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],_addb .Data [_gcge ],_dbea );_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixNotSrc :for _beba =0;
_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],^_addb .Data [_edgfc ],_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]=^_addb .Data [_baef +_aagb ];
};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],^_addb .Data [_gcge ],_dbea );_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixSrcOrDst :for _beba =0;
_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],_addb .Data [_edgfc ]|_aeaaa .Data [_aeff ],_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;
_aagb ++{_aeaaa .Data [_bege +_aagb ]|=_addb .Data [_baef +_aagb ];};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],_addb .Data [_gcge ]|_aeaaa .Data [_ddedb ],_dbea );
_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixSrcAndDst :for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],_addb .Data [_edgfc ]&_aeaaa .Data [_aeff ],_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;
};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]&=_addb .Data [_baef +_aagb ];};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],_addb .Data [_gcge ]&_aeaaa .Data [_ddedb ],_dbea );
_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixSrcXorDst :for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],_addb .Data [_edgfc ]^_aeaaa .Data [_aeff ],_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;
};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]^=_addb .Data [_baef +_aagb ];};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],_addb .Data [_gcge ]^_aeaaa .Data [_ddedb ],_dbea );
_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixNotSrcOrDst :for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],^(_addb .Data [_edgfc ])|_aeaaa .Data [_aeff ],_ffffe );_aeff +=_aeaaa .RowStride ;
_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]|=^(_addb .Data [_baef +_aagb ]);};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;
_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],^(_addb .Data [_gcge ])|_aeaaa .Data [_ddedb ],_dbea );_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixNotSrcAndDst :for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],^(_addb .Data [_edgfc ])&_aeaaa .Data [_aeff ],_ffffe );
_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]&=^_addb .Data [_baef +_aagb ];};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;
};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],^(_addb .Data [_gcge ])&_aeaaa .Data [_ddedb ],_dbea );_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixSrcOrNotDst :for _beba =0;
_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],_addb .Data [_edgfc ]|^(_aeaaa .Data [_aeff ]),_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;
_aagb ++{_aeaaa .Data [_bege +_aagb ]=_addb .Data [_baef +_aagb ]|^(_aeaaa .Data [_bege +_aagb ]);};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],_addb .Data [_gcge ]|^(_aeaaa .Data [_ddedb ]),_dbea );
_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixSrcAndNotDst :for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],_addb .Data [_edgfc ]&^(_aeaaa .Data [_aeff ]),_ffffe );_aeff +=_aeaaa .RowStride ;
_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]=_addb .Data [_baef +_aagb ]&^(_aeaaa .Data [_bege +_aagb ]);};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;
};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],_addb .Data [_gcge ]&^(_aeaaa .Data [_ddedb ]),_dbea );_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixNotPixSrcOrDst :for _beba =0;
_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],^(_addb .Data [_edgfc ]|_aeaaa .Data [_aeff ]),_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;
_aagb ++{_aeaaa .Data [_bege +_aagb ]=^(_addb .Data [_baef +_aagb ]|_aeaaa .Data [_bege +_aagb ]);};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],^(_addb .Data [_gcge ]|_aeaaa .Data [_ddedb ]),_dbea );
_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixNotPixSrcAndDst :for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],^(_addb .Data [_edgfc ]&_aeaaa .Data [_aeff ]),_ffffe );_aeff +=_aeaaa .RowStride ;
_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;_aagb ++{_aeaaa .Data [_bege +_aagb ]=^(_addb .Data [_baef +_aagb ]&_aeaaa .Data [_bege +_aagb ]);};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;
};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],^(_addb .Data [_gcge ]&_aeaaa .Data [_ddedb ]),_dbea );_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};case PixNotPixSrcXorDst :for _beba =0;
_beba < _gbgfg ;_beba ++{_aeaaa .Data [_aeff ]=_cbcdc (_aeaaa .Data [_aeff ],^(_addb .Data [_edgfc ]^_aeaaa .Data [_aeff ]),_ffffe );_aeff +=_aeaaa .RowStride ;_edgfc +=_addb .RowStride ;};if _eagb {for _beba =0;_beba < _gbgfg ;_beba ++{for _aagb =0;_aagb < _eagbg ;
_aagb ++{_aeaaa .Data [_bege +_aagb ]=^(_addb .Data [_baef +_aagb ]^_aeaaa .Data [_bege +_aagb ]);};_bege +=_aeaaa .RowStride ;_baef +=_addb .RowStride ;};};if _bade {for _beba =0;_beba < _gbgfg ;_beba ++{_aeaaa .Data [_ddedb ]=_cbcdc (_aeaaa .Data [_ddedb ],^(_addb .Data [_gcge ]^_aeaaa .Data [_ddedb ]),_dbea );
_ddedb +=_aeaaa .RowStride ;_gcge +=_addb .RowStride ;};};default:_b .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_cgf );return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_cbf *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cbf .Copy (),nil ;};_cfb ,_fdff :=_cbf .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _fdff !=nil {return nil ,_d .Wrap (_fdff ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _cfb ,nil ;};func (_bacd *Bitmaps )makeSizeIndicator (_deca ,_fceee int ,_fecc LocationFilter ,_bgdc SizeComparison )(_bcdc *_dgb .NumSlice ,_gfdf error ){const _cgfag ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _bacd ==nil {return nil ,_d .Error (_cgfag ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _fecc {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_cgfag ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_fecc );
};switch _bgdc {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_cgfag ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_bgdc );
};_bcdc =&_dgb .NumSlice {};var (_effc ,_ffbaa ,_badb int ;_fadgd *Bitmap ;);for _ ,_fadgd =range _bacd .Values {_effc =0;_ffbaa ,_badb =_fadgd .Width ,_fadgd .Height ;switch _fecc {case LocSelectWidth :if (_bgdc ==SizeSelectIfLT &&_ffbaa < _deca )||(_bgdc ==SizeSelectIfGT &&_ffbaa > _deca )||(_bgdc ==SizeSelectIfLTE &&_ffbaa <=_deca )||(_bgdc ==SizeSelectIfGTE &&_ffbaa >=_deca )||(_bgdc ==SizeSelectIfEQ &&_ffbaa ==_deca ){_effc =1;
};case LocSelectHeight :if (_bgdc ==SizeSelectIfLT &&_badb < _fceee )||(_bgdc ==SizeSelectIfGT &&_badb > _fceee )||(_bgdc ==SizeSelectIfLTE &&_badb <=_fceee )||(_bgdc ==SizeSelectIfGTE &&_badb >=_fceee )||(_bgdc ==SizeSelectIfEQ &&_badb ==_fceee ){_effc =1;
};case LocSelectIfEither :if (_bgdc ==SizeSelectIfLT &&(_ffbaa < _deca ||_badb < _fceee ))||(_bgdc ==SizeSelectIfGT &&(_ffbaa > _deca ||_badb > _fceee ))||(_bgdc ==SizeSelectIfLTE &&(_ffbaa <=_deca ||_badb <=_fceee ))||(_bgdc ==SizeSelectIfGTE &&(_ffbaa >=_deca ||_badb >=_fceee ))||(_bgdc ==SizeSelectIfEQ &&(_ffbaa ==_deca ||_badb ==_fceee )){_effc =1;
};case LocSelectIfBoth :if (_bgdc ==SizeSelectIfLT &&(_ffbaa < _deca &&_badb < _fceee ))||(_bgdc ==SizeSelectIfGT &&(_ffbaa > _deca &&_badb > _fceee ))||(_bgdc ==SizeSelectIfLTE &&(_ffbaa <=_deca &&_badb <=_fceee ))||(_bgdc ==SizeSelectIfGTE &&(_ffbaa >=_deca &&_badb >=_fceee ))||(_bgdc ==SizeSelectIfEQ &&(_ffbaa ==_deca &&_badb ==_fceee )){_effc =1;
};};_bcdc .AddInt (_effc );};return _bcdc ,nil ;};func (_cefd *Bitmaps )GetBox (i int )(*_f .Rectangle ,error ){const _deffc ="\u0047\u0065\u0074\u0042\u006f\u0078";if _cefd ==nil {return nil ,_d .Error (_deffc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_cefd .Boxes )-1{return nil ,_d .Errorf (_deffc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cefd .Boxes [i ],nil ;};func _aabe (_gcefc *Bitmap ,_gdcd ,_bcfa ,_ecda ,_efdd int ,_feaf RasterOperator ,_ecf *Bitmap ,_ebfb ,_cfda int )error {var (_dceg bool ;
_bcfb bool ;_aadefg byte ;_dfaf int ;_defcd int ;_bdadf int ;_fadd int ;_gbca bool ;_eebg int ;_efcc int ;_fbbg int ;_bcbg bool ;_eadg byte ;_bgef int ;_cfde int ;_bagg int ;_gagb byte ;_fbaf int ;_cbbg int ;_aebbc uint ;_fddab uint ;_gdec byte ;_gdgc shift ;
_gcba bool ;_cbga bool ;_gcac ,_fefd int ;);if _ebfb &7!=0{_cbbg =8-(_ebfb &7);};if _gdcd &7!=0{_defcd =8-(_gdcd &7);};if _cbbg ==0&&_defcd ==0{_gdec =_gebba [0];}else {if _defcd > _cbbg {_aebbc =uint (_defcd -_cbbg );}else {_aebbc =uint (8-(_cbbg -_defcd ));
};_fddab =8-_aebbc ;_gdec =_gebba [_aebbc ];};if (_gdcd &7)!=0{_dceg =true ;_dfaf =8-(_gdcd &7);_aadefg =_gebba [_dfaf ];_bdadf =_gcefc .RowStride *_bcfa +(_gdcd >>3);_fadd =_ecf .RowStride *_cfda +(_ebfb >>3);_fbaf =8-(_ebfb &7);if _dfaf > _fbaf {_gdgc =_deged ;
if _ecda >=_cbbg {_gcba =true ;};}else {_gdgc =_abb ;};};if _ecda < _dfaf {_bcfb =true ;_aadefg &=_becd [8-_dfaf +_ecda ];};if !_bcfb {_eebg =(_ecda -_dfaf )>>3;if _eebg !=0{_gbca =true ;_efcc =_gcefc .RowStride *_bcfa +((_gdcd +_defcd )>>3);_fbbg =_ecf .RowStride *_cfda +((_ebfb +_defcd )>>3);
};};_bgef =(_gdcd +_ecda )&7;if !(_bcfb ||_bgef ==0){_bcbg =true ;_eadg =_becd [_bgef ];_cfde =_gcefc .RowStride *_bcfa +((_gdcd +_defcd )>>3)+_eebg ;_bagg =_ecf .RowStride *_cfda +((_ebfb +_defcd )>>3)+_eebg ;if _bgef > int (_fddab ){_cbga =true ;};};
switch _feaf {case PixSrc :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],_gagb ,_aadefg );
_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]=_gagb ;
};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],_gagb ,_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixNotSrc :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;
};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],^_gagb ,_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );
_gcefc .Data [_efcc +_fefd ]=^_gagb ;};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],^_gagb ,_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixSrcOrDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;
};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],_gagb |_gcefc .Data [_bdadf ],_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );
_gcefc .Data [_efcc +_fefd ]|=_gagb ;};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],_gagb |_gcefc .Data [_cfde ],_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixSrcAndDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;
};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],_gagb &_gcefc .Data [_bdadf ],_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );
_gcefc .Data [_efcc +_fefd ]&=_gagb ;};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],_gagb &_gcefc .Data [_cfde ],_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixSrcXorDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;
};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],_gagb ^_gcefc .Data [_bdadf ],_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );
_gcefc .Data [_efcc +_fefd ]^=_gagb ;};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],_gagb ^_gcefc .Data [_cfde ],_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixNotSrcOrDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};
}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],^_gagb |_gcefc .Data [_bdadf ],_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;
_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]|=^_gagb ;};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;
_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],^_gagb |_gcefc .Data [_cfde ],_eadg );_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;
};};case PixNotSrcAndDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],^_gagb &_gcefc .Data [_bdadf ],_aadefg );
_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]&=^_gagb ;
};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],^_gagb &_gcefc .Data [_cfde ],_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixSrcOrNotDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};
}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],_gagb |^_gcefc .Data [_bdadf ],_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;
_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]=_gagb |^_gcefc .Data [_efcc +_fefd ];};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;
_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],_gagb |^_gcefc .Data [_cfde ],_eadg );_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;
};};case PixSrcAndNotDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],_gagb &^_gcefc .Data [_bdadf ],_aadefg );
_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]=_gagb &^_gcefc .Data [_efcc +_fefd ];
};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],_gagb &^_gcefc .Data [_cfde ],_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixNotPixSrcOrDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );
};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],^(_gagb |_gcefc .Data [_bdadf ]),_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;
_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]=^(_gagb |_gcefc .Data [_efcc +_fefd ]);};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;
_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],^(_gagb |_gcefc .Data [_cfde ]),_eadg );_cfde +=_gcefc .RowStride ;
_bagg +=_ecf .RowStride ;};};case PixNotPixSrcAndDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;
};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],^(_gagb &_gcefc .Data [_bdadf ]),_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );
_gcefc .Data [_efcc +_fefd ]=^(_gagb &_gcefc .Data [_efcc +_fefd ]);};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );
};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],^(_gagb &_gcefc .Data [_cfde ]),_eadg );_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};case PixNotPixSrcXorDst :if _dceg {for _gcac =0;_gcac < _efdd ;_gcac ++{if _gdgc ==_deged {_gagb =_ecf .Data [_fadd ]<<_aebbc ;
if _gcba {_gagb =_cbcdc (_gagb ,_ecf .Data [_fadd +1]>>_fddab ,_gdec );};}else {_gagb =_ecf .Data [_fadd ]>>_fddab ;};_gcefc .Data [_bdadf ]=_cbcdc (_gcefc .Data [_bdadf ],^(_gagb ^_gcefc .Data [_bdadf ]),_aadefg );_bdadf +=_gcefc .RowStride ;_fadd +=_ecf .RowStride ;
};};if _gbca {for _gcac =0;_gcac < _efdd ;_gcac ++{for _fefd =0;_fefd < _eebg ;_fefd ++{_gagb =_cbcdc (_ecf .Data [_fbbg +_fefd ]<<_aebbc ,_ecf .Data [_fbbg +_fefd +1]>>_fddab ,_gdec );_gcefc .Data [_efcc +_fefd ]=^(_gagb ^_gcefc .Data [_efcc +_fefd ]);
};_efcc +=_gcefc .RowStride ;_fbbg +=_ecf .RowStride ;};};if _bcbg {for _gcac =0;_gcac < _efdd ;_gcac ++{_gagb =_ecf .Data [_bagg ]<<_aebbc ;if _cbga {_gagb =_cbcdc (_gagb ,_ecf .Data [_bagg +1]>>_fddab ,_gdec );};_gcefc .Data [_cfde ]=_cbcdc (_gcefc .Data [_cfde ],^(_gagb ^_gcefc .Data [_cfde ]),_eadg );
_cfde +=_gcefc .RowStride ;_bagg +=_ecf .RowStride ;};};default:_b .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_feaf );return _d .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_dbdd *Bitmap )setAll ()error {_gdg :=_ebdga (_dbdd ,0,0,_dbdd .Width ,_dbdd .Height ,PixSet ,nil ,0,0);if _gdg !=nil {return _d .Wrap (_gdg ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};const (ComponentConn Component =iota ;
ComponentCharacters ;ComponentWords ;);const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;
};func MakePixelCentroidTab8 ()[]int {return _cfaa ()};func (_gce *Bitmap )And (s *Bitmap )(_gcd *Bitmap ,_agb error ){const _ddf ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _gce ==nil {return nil ,_d .Error (_ddf ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_d .Error (_ddf ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_gce .SizesEqual (s ){_b .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_ddf );
};if _gcd ,_agb =_bafb (_gcd ,_gce );_agb !=nil {return nil ,_d .Wrap (_agb ,_ddf ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _agb =_gcd .RasterOperation (0,0,_gcd .Width ,_gcd .Height ,PixSrcAndDst ,s ,0,0);
_agb !=nil {return nil ,_d .Wrap (_agb ,_ddf ,"");};return _gcd ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _bafb (d ,s )};func Centroids (bms []*Bitmap )(*Points ,error ){_cda :=make ([]Point ,len (bms ));_abaa :=_cfaa ();_ebba :=_debdd ();
var _ddfe error ;for _edcd ,_fffa :=range bms {_cda [_edcd ],_ddfe =_fffa .centroid (_abaa ,_ebba );if _ddfe !=nil {return nil ,_ddfe ;};};_adc :=Points (_cda );return &_adc ,nil ;};func (_dcfcf Points )GetIntX (i int )(int ,error ){if i >=len (_dcfcf ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dcfcf [i ].X ),nil ;};func _bee (_bgf ,_eaec int )*Bitmap {return &Bitmap {Width :_bgf ,Height :_eaec ,RowStride :(_bgf +7)>>3};};