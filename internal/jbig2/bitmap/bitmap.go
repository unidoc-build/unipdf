//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_b "encoding/binary";_db "github.com/stretchr/testify/require";_eg "github.com/unidoc/unipdf/v3/common";_fd "github.com/unidoc/unipdf/v3/internal/bitwise";_ef "github.com/unidoc/unipdf/v3/internal/imageutil";_f "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_dd "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_eb "image";_ce "math";_c "sort";_e "strings";_g "testing";);func (_edff *Bitmap )GetVanillaData ()[]byte {if _edff .Color ==Chocolate {_edff .inverseData ();};return _edff .Data ;};func (_eacd *Bitmap )thresholdPixelSum (_eec int )bool {var (_gcaeg int ;
_dae uint8 ;_daga byte ;_aece int ;);_aced :=_eacd .RowStride ;_fbeg :=uint (_eacd .Width &0x07);if _fbeg !=0{_dae =uint8 ((0xff<<(8-_fbeg ))&0xff);_aced --;};for _ecag :=0;_ecag < _eacd .Height ;_ecag ++{for _aece =0;_aece < _aced ;_aece ++{_daga =_eacd .Data [_ecag *_eacd .RowStride +_aece ];
_gcaeg +=int (_cdfb [_daga ]);};if _fbeg !=0{_daga =_eacd .Data [_ecag *_eacd .RowStride +_aece ]&_dae ;_gcaeg +=int (_cdfb [_daga ]);};if _gcaeg > _eec {return true ;};};return false ;};func _edc (_bfda *Bitmap ,_ac ,_bd int )(*Bitmap ,error ){const _eee ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _bfda ==nil {return nil ,_dd .Error (_eee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ac <=0||_bd <=0{return nil ,_dd .Error (_eee ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _ac ==_bd {if _ac ==1{_gce ,_cc :=_ecb (nil ,_bfda );if _cc !=nil {return nil ,_dd .Wrap (_cc ,_eee ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _gce ,nil ;};if _ac ==2||_ac ==4||_ac ==8{_bdb ,_fg :=_aga (_bfda ,_ac );
if _fg !=nil {return nil ,_dd .Wrap (_fg ,_eee ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _bdb ,nil ;};};_cbd :=_ac *_bfda .Width ;_bdg :=_bd *_bfda .Height ;_eff :=New (_cbd ,_bdg );_dc :=_eff .RowStride ;
var (_gcg ,_egc ,_ge ,_ec ,_gg int ;_dag byte ;_fbd error ;);for _egc =0;_egc < _bfda .Height ;_egc ++{_gcg =_bd *_egc *_dc ;for _ge =0;_ge < _bfda .Width ;_ge ++{if _abc :=_bfda .GetPixel (_ge ,_egc );_abc {_gg =_ac *_ge ;for _ec =0;_ec < _ac ;_ec ++{_eff .setBit (_gcg *8+_gg +_ec );
};};};for _ec =1;_ec < _bd ;_ec ++{_gff :=_gcg +_ec *_dc ;for _gcc :=0;_gcc < _dc ;_gcc ++{if _dag ,_fbd =_eff .GetByte (_gcg +_gcc );_fbd !=nil {return nil ,_dd .Wrapf (_fbd ,_eee ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ec );
};if _fbd =_eff .SetByte (_gff +_gcc ,_dag );_fbd !=nil {return nil ,_dd .Wrap (_fbd ,_eee ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _eff ,nil ;};func _gggc (_abdef ,_bbad *Bitmap ,_baaf ,_egce int )(*Bitmap ,error ){const _adc ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _bbad ==nil {return nil ,_dd .Error (_adc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _baaf < 1||_egce < 1{return nil ,_dd .Error (_adc ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _baaf ==1&&_egce ==1{return _ecb (_abdef ,_bbad );};if MorphBC ==SymmetricMorphBC {_cbcf ,_ffbe :=_fgcfa (_abdef ,_bbad ,_baaf ,_egce );if _ffbe !=nil {return nil ,_dd .Wrap (_ffbe ,_adc ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _cbcf ,nil ;};_ebeg :=_gecc (_baaf /2,_egce /2);_abdc :=8*((_ebeg +7)/8);_cdgg ,_gbdd :=_bbad .AddBorder (_abdc ,0);if _gbdd !=nil {return nil ,_dd .Wrapf (_gbdd ,_adc ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_abdc );
};var _ddda ,_eaec *Bitmap ;if _baaf ==1||_egce ==1{_cfge :=SelCreateBrick (_egce ,_baaf ,_egce /2,_baaf /2,SelHit );_ddda ,_gbdd =_agcc (nil ,_cdgg ,_cfge );if _gbdd !=nil {return nil ,_dd .Wrap (_gbdd ,_adc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_cbedd :=SelCreateBrick (1,_baaf ,0,_baaf /2,SelHit );_dfad ,_dddb :=_gdfc (nil ,_cdgg ,_cbedd );if _dddb !=nil {return nil ,_dd .Wrap (_dddb ,_adc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_dged :=SelCreateBrick (_egce ,1,_egce /2,0,SelHit );_ddda ,_dddb =_gdfc (nil ,_dfad ,_dged );if _dddb !=nil {return nil ,_dd .Wrap (_dddb ,_adc ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_dddb =_aaae (_dfad ,_ddda ,_cbedd );_dddb !=nil {return nil ,_dd .Wrap (_dddb ,_adc ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_dddb =_aaae (_ddda ,_dfad ,_dged );_dddb !=nil {return nil ,_dd .Wrap (_dddb ,_adc ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _eaec ,_gbdd =_ddda .RemoveBorder (_abdc );_gbdd !=nil {return nil ,_dd .Wrap (_gbdd ,_adc ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _abdef ==nil {return _eaec ,nil ;};if _ ,_gbdd =_ecb (_abdef ,_eaec );_gbdd !=nil {return nil ,_gbdd ;};return _abdef ,nil ;
};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};var _gcebg =[5]int {1,2,3,0,4};func _facb (_feca *Bitmap ,_adda ...MorphProcess )(_fedf *Bitmap ,_aebb error ){const _cbee ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _feca ==nil {return nil ,_dd .Error (_cbee ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_adda )==0{return nil ,_dd .Error (_cbee ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _aebb =_ffade (_adda ...);
_aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");};var _gafc ,_fgead ,_bdgc int ;_fedf =_feca .Copy ();for _ ,_dacbg :=range _adda {switch _dacbg .Operation {case MopDilation :_gafc ,_fgead =_dacbg .getWidthHeight ();_fedf ,_aebb =DilateBrick (nil ,_fedf ,_gafc ,_fgead );
if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");};case MopErosion :_gafc ,_fgead =_dacbg .getWidthHeight ();_fedf ,_aebb =_ddebe (nil ,_fedf ,_gafc ,_fgead );if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");};case MopOpening :_gafc ,_fgead =_dacbg .getWidthHeight ();
_fedf ,_aebb =_cfdc (nil ,_fedf ,_gafc ,_fgead );if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");};case MopClosing :_gafc ,_fgead =_dacbg .getWidthHeight ();_fedf ,_aebb =_gggc (nil ,_fedf ,_gafc ,_fgead );if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");
};case MopRankBinaryReduction :_fedf ,_aebb =_aeg (_fedf ,_dacbg .Arguments ...);if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");};case MopReplicativeBinaryExpansion :_fedf ,_aebb =_gcdc (_fedf ,_dacbg .Arguments [0]);if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");
};case MopAddBorder :_bdgc =_dacbg .Arguments [0];_fedf ,_aebb =_fedf .AddBorder (_bdgc ,0);if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"");};default:return nil ,_dd .Error (_cbee ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _bdgc > 0{_fedf ,_aebb =_fedf .RemoveBorder (_bdgc );if _aebb !=nil {return nil ,_dd .Wrap (_aebb ,_cbee ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _fedf ,nil ;};func (_bega Points )GetIntY (i int )(int ,error ){if i >=len (_bega ){return 0,_dd .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_bega [i ].Y ),nil ;};func _fae (_ea *Bitmap ,_gf *Bitmap ,_dg int )(_be error ){const _bec ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _dg {case 2:_be =_cb (_ea ,_gf );case 4:_be =_aa (_ea ,_gf );
case 8:_be =_fa (_ea ,_gf );default:return _dd .Error (_bec ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _be !=nil {_be =_dd .Wrap (_be ,_bec ,"");};return _be ;};func (_gbeg CombinationOperator )String ()string {var _bfaa string ;switch _gbeg {case CmbOpOr :_bfaa ="\u004f\u0052";case CmbOpAnd :_bfaa ="\u0041\u004e\u0044";case CmbOpXor :_bfaa ="\u0058\u004f\u0052";
case CmbOpXNor :_bfaa ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_bfaa ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_bfaa ="\u004e\u004f\u0054";};return _bfaa ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_eb .Rectangle ;};func (_ebdf *Bitmap )centroid (_ccbc ,_baa []int )(Point ,error ){_ffad :=Point {};
_ebdf .setPadBits (0);if len (_ccbc )==0{_ccbc =_aff ();};if len (_baa )==0{_baa =_afg ();};var _cafb ,_dfa ,_cbfa ,_dffb ,_aadag ,_gagf int ;var _fagb byte ;for _aadag =0;_aadag < _ebdf .Height ;_aadag ++{_gcaed :=_ebdf .RowStride *_aadag ;_dffb =0;for _gagf =0;
_gagf < _ebdf .RowStride ;_gagf ++{_fagb =_ebdf .Data [_gcaed +_gagf ];if _fagb !=0{_dffb +=_baa [_fagb ];_cafb +=_ccbc [_fagb ]+_gagf *8*_baa [_fagb ];};};_cbfa +=_dffb ;_dfa +=_dffb *_aadag ;};if _cbfa !=0{_ffad .X =float32 (_cafb )/float32 (_cbfa );
_ffad .Y =float32 (_dfa )/float32 (_cbfa );};return _ffad ,nil ;};func (_abfb *Bitmap )connComponentsBB (_abgaf int )(_cabaf *Boxes ,_ddcc error ){const _eefb ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _abgaf !=4&&_abgaf !=8{return nil ,_dd .Error (_eefb ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _abfb .Zero (){return &Boxes {},nil ;
};_abfb .setPadBits (0);_bed ,_ddcc :=_ecb (nil ,_abfb );if _ddcc !=nil {return nil ,_dd .Wrap (_ddcc ,_eefb ,"\u0062\u006d\u0031");};_eebb :=&_f .Stack {};_eebb .Aux =&_f .Stack {};_cabaf =&Boxes {};var (_daf ,_bgaa int ;_fegb _eb .Point ;_ebe bool ;_afcf *_eb .Rectangle ;
);for {if _fegb ,_ebe ,_ddcc =_bed .nextOnPixel (_bgaa ,_daf );_ddcc !=nil {return nil ,_dd .Wrap (_ddcc ,_eefb ,"");};if !_ebe {break ;};if _afcf ,_ddcc =_aggf (_bed ,_eebb ,_fegb .X ,_fegb .Y ,_abgaf );_ddcc !=nil {return nil ,_dd .Wrap (_ddcc ,_eefb ,"");
};if _ddcc =_cabaf .Add (_afcf );_ddcc !=nil {return nil ,_dd .Wrap (_ddcc ,_eefb ,"");};_bgaa =_fegb .X ;_daf =_fegb .Y ;};return _cabaf ,nil ;};func (_gebea *BitmapsArray )AddBox (box *_eb .Rectangle ){_gebea .Boxes =append (_gebea .Boxes ,box )};func _ggga (_dccc ,_dggcc ,_bfbfc byte )byte {return (_dccc &^(_bfbfc ))|(_dggcc &_bfbfc )};
func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cdcb (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func init (){for _agab :=0;
_agab < 256;_agab ++{_cdfb [_agab ]=uint8 (_agab &0x1)+(uint8 (_agab >>1)&0x1)+(uint8 (_agab >>2)&0x1)+(uint8 (_agab >>3)&0x1)+(uint8 (_agab >>4)&0x1)+(uint8 (_agab >>5)&0x1)+(uint8 (_agab >>6)&0x1)+(uint8 (_agab >>7)&0x1);};};const (AsymmetricMorphBC BoundaryCondition =iota ;
SymmetricMorphBC ;);func _afbaa (_caggf *Bitmap )(_daaf *Bitmap ,_daac int ,_cbcdd error ){const _egff ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _caggf ==nil {return nil ,0,_dd .Errorf (_egff ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _cbf ,_dafa *Bitmap ;if _cbf ,_cbcdd =_ecb (nil ,_caggf );_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_ecaa [13]int ;_faca ,_addc int ;);_dace :=12;_gfe :=_f .NewNumSlice (_dace +1);
_cccd :=_f .NewNumSlice (_dace +1);var _efgf *Boxes ;for _aac :=0;_aac <=_dace ;_aac ++{if _aac ==0{if _dafa ,_cbcdd =_ecb (nil ,_cbf );_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _dafa ,_cbcdd =_facb (_cbf ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _efgf ,_cbcdd =_dafa .connComponentsBB (4);_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"");};_ecaa [_aac ]=len (*_efgf );
_gfe .AddInt (_ecaa [_aac ]);switch _aac {case 0:_faca =_ecaa [0];default:_addc =_ecaa [_aac -1]-_ecaa [_aac ];_cccd .AddInt (_addc );};_cbf =_dafa ;};_ddef :=true ;_aba :=2;var _eafa ,_bcbb int ;for _aceda :=1;_aceda < len (*_cccd );_aceda ++{if _eafa ,_cbcdd =_gfe .GetInt (_aceda );
_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _ddef &&_eafa < int (0.3*float32 (_faca )){_aba =_aceda +1;_ddef =false ;
};if _addc ,_cbcdd =_cccd .GetInt (_aceda );_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _addc > _bcbb {_bcbb =_addc ;};};_bbgd :=_caggf .XResolution ;if _bbgd ==0{_bbgd =150;
};if _bbgd > 110{_aba ++;};if _aba < 2{_eg .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_aba =2;};_daac =_aba +1;if _daaf ,_cbcdd =_fgcfa (nil ,_caggf ,_aba +1,1);_cbcdd !=nil {return nil ,0,_dd .Wrap (_cbcdd ,_egff ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _daaf ,_daac ,nil ;
};func _fgcfa (_ggad ,_cdbf *Bitmap ,_acde ,_bbbe int )(*Bitmap ,error ){const _febf ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _cdbf ==nil {return nil ,_dd .Error (_febf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _acde < 1||_bbbe < 1{return nil ,_dd .Error (_febf ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _acde ==1&&_bbbe ==1{return _cdbf .Copy (),nil ;};if _acde ==1||_bbbe ==1{_fgge :=SelCreateBrick (_bbbe ,_acde ,_bbbe /2,_acde /2,SelHit );
var _fdaf error ;_ggad ,_fdaf =_agcc (_ggad ,_cdbf ,_fgge );if _fdaf !=nil {return nil ,_dd .Wrap (_fdaf ,_febf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _ggad ,nil ;};_ffba :=SelCreateBrick (1,_acde ,0,_acde /2,SelHit );_dcfef :=SelCreateBrick (_bbbe ,1,_bbbe /2,0,SelHit );_bgea ,_fgad :=_gdfc (nil ,_cdbf ,_ffba );if _fgad !=nil {return nil ,_dd .Wrap (_fgad ,_febf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ggad ,_fgad =_gdfc (_ggad ,_bgea ,_dcfef );_fgad !=nil {return nil ,_dd .Wrap (_fgad ,_febf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fgad =_aaae (_bgea ,_ggad ,_ffba );_fgad !=nil {return nil ,_dd .Wrap (_fgad ,_febf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fgad =_aaae (_ggad ,_bgea ,_dcfef );_fgad !=nil {return nil ,_dd .Wrap (_fgad ,_febf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _ggad ,nil ;};func (_gee *Bitmap )equivalent (_fee *Bitmap )bool {if _gee ==_fee {return true ;};if !_gee .SizesEqual (_fee ){return false ;
};_fea :=_febd (_gee ,_fee ,CmbOpXor );_aea :=_gee .countPixels ();_fcfff :=int (0.25*float32 (_aea ));if _fea .thresholdPixelSum (_fcfff ){return false ;};var (_cggb [9][9]int ;_agff [18][9]int ;_bae [9][18]int ;_cffa int ;_fef int ;);_gdge :=9;_gcag :=_gee .Height /_gdge ;
_gga :=_gee .Width /_gdge ;_ggf ,_dde :=_gcag /2,_gga /2;if _gcag < _gga {_ggf =_gga /2;_dde =_gcag /2;};_bbdb :=float64 (_ggf )*float64 (_dde )*_ce .Pi ;_edag :=int (float64 (_gcag *_gga /2)*0.9);_bcda :=int (float64 (_gga *_gcag /2)*0.9);for _cfg :=0;
_cfg < _gdge ;_cfg ++{_feaf :=_gga *_cfg +_cffa ;var _cbef int ;if _cfg ==_gdge -1{_cffa =0;_cbef =_gee .Width ;}else {_cbef =_feaf +_gga ;if ((_gee .Width -_cffa )%_gdge )> 0{_cffa ++;_cbef ++;};};for _gfdg :=0;_gfdg < _gdge ;_gfdg ++{_fdbc :=_gcag *_gfdg +_fef ;
var _cgda int ;if _gfdg ==_gdge -1{_fef =0;_cgda =_gee .Height ;}else {_cgda =_fdbc +_gcag ;if (_gee .Height -_fef )%_gdge > 0{_fef ++;_cgda ++;};};var _gdbb ,_cdba ,_ggfg ,_gbc int ;_ffcd :=(_feaf +_cbef )/2;_gfb :=(_fdbc +_cgda )/2;for _feg :=_feaf ;
_feg < _cbef ;_feg ++{for _fgcb :=_fdbc ;_fgcb < _cgda ;_fgcb ++{if _fea .GetPixel (_feg ,_fgcb ){if _feg < _ffcd {_gdbb ++;}else {_cdba ++;};if _fgcb < _gfb {_gbc ++;}else {_ggfg ++;};};};};_cggb [_cfg ][_gfdg ]=_gdbb +_cdba ;_agff [_cfg *2][_gfdg ]=_gdbb ;
_agff [_cfg *2+1][_gfdg ]=_cdba ;_bae [_cfg ][_gfdg *2]=_gbc ;_bae [_cfg ][_gfdg *2+1]=_ggfg ;};};for _bgc :=0;_bgc < _gdge *2-1;_bgc ++{for _fcba :=0;_fcba < (_gdge -1);_fcba ++{var _gccb int ;for _edge :=0;_edge < 2;_edge ++{for _efbe :=0;_efbe < 2;_efbe ++{_gccb +=_agff [_bgc +_edge ][_fcba +_efbe ];
};};if _gccb > _bcda {return false ;};};};for _gafa :=0;_gafa < (_gdge -1);_gafa ++{for _eddf :=0;_eddf < ((_gdge *2)-1);_eddf ++{var _ade int ;for _bca :=0;_bca < 2;_bca ++{for _ecd :=0;_ecd < 2;_ecd ++{_ade +=_bae [_gafa +_bca ][_eddf +_ecd ];};};if _ade > _edag {return false ;
};};};for _gae :=0;_gae < (_gdge -2);_gae ++{for _dea :=0;_dea < (_gdge -2);_dea ++{var _becee ,_fdbf int ;for _fca :=0;_fca < 3;_fca ++{for _adg :=0;_adg < 3;_adg ++{if _fca ==_adg {_becee +=_cggb [_gae +_fca ][_dea +_adg ];};if (2-_fca )==_adg {_fdbf +=_cggb [_gae +_fca ][_dea +_adg ];
};};};if _becee > _bcda ||_fdbf > _bcda {return false ;};};};for _deb :=0;_deb < (_gdge -1);_deb ++{for _gcbf :=0;_gcbf < (_gdge -1);_gcbf ++{var _cebe int ;for _aeef :=0;_aeef < 2;_aeef ++{for _bce :=0;_bce < 2;_bce ++{_cebe +=_cggb [_deb +_aeef ][_gcbf +_bce ];
};};if float64 (_cebe )> _bbdb {return false ;};};};return true ;};type fillSegment struct{_gbega int ;_aafeg int ;_gcbd int ;_edfaa int ;};func (_gffc *Boxes )makeSizeIndicator (_acdb ,_ecagc int ,_agbb LocationFilter ,_cefe SizeComparison )*_f .NumSlice {_bcfc :=&_f .NumSlice {};
var _dcfd ,_gdad ,_bgb int ;for _ ,_efggc :=range *_gffc {_dcfd =0;_gdad ,_bgb =_efggc .Dx (),_efggc .Dy ();switch _agbb {case LocSelectWidth :if (_cefe ==SizeSelectIfLT &&_gdad < _acdb )||(_cefe ==SizeSelectIfGT &&_gdad > _acdb )||(_cefe ==SizeSelectIfLTE &&_gdad <=_acdb )||(_cefe ==SizeSelectIfGTE &&_gdad >=_acdb ){_dcfd =1;
};case LocSelectHeight :if (_cefe ==SizeSelectIfLT &&_bgb < _ecagc )||(_cefe ==SizeSelectIfGT &&_bgb > _ecagc )||(_cefe ==SizeSelectIfLTE &&_bgb <=_ecagc )||(_cefe ==SizeSelectIfGTE &&_bgb >=_ecagc ){_dcfd =1;};case LocSelectIfEither :if (_cefe ==SizeSelectIfLT &&(_bgb < _ecagc ||_gdad < _acdb ))||(_cefe ==SizeSelectIfGT &&(_bgb > _ecagc ||_gdad > _acdb ))||(_cefe ==SizeSelectIfLTE &&(_bgb <=_ecagc ||_gdad <=_acdb ))||(_cefe ==SizeSelectIfGTE &&(_bgb >=_ecagc ||_gdad >=_acdb )){_dcfd =1;
};case LocSelectIfBoth :if (_cefe ==SizeSelectIfLT &&(_bgb < _ecagc &&_gdad < _acdb ))||(_cefe ==SizeSelectIfGT &&(_bgb > _ecagc &&_gdad > _acdb ))||(_cefe ==SizeSelectIfLTE &&(_bgb <=_ecagc &&_gdad <=_acdb ))||(_cefe ==SizeSelectIfGTE &&(_bgb >=_ecagc &&_gdad >=_acdb )){_dcfd =1;
};};_bcfc .AddInt (_dcfd );};return _bcfc ;};var (_dad =_edec ();_dgfd =_gcb ();_gfgd =_fcf (););func _ecb (_ecc ,_afee *Bitmap )(*Bitmap ,error ){if _afee ==nil {return nil ,_dd .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _afee ==_ecc {return _ecc ,nil ;};if _ecc ==nil {_ecc =_afee .createTemplate ();copy (_ecc .Data ,_afee .Data );return _ecc ,nil ;};_ecbb :=_ecc .resizeImageData (_afee );if _ecbb !=nil {return nil ,_dd .Wrap (_ecbb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ecc .Text =_afee .Text ;copy (_ecc .Data ,_afee .Data );return _ecc ,nil ;};func (_cdec *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _cdec .Copy (),nil ;};_gdb ,_ada :=_cdec .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _ada !=nil {return nil ,_dd .Wrap (_ada ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gdb ,nil ;};func (_effd *Bitmap )ToImage ()_eb .Image {_ddbd ,_gddg :=_ef .NewImage (_effd .Width ,_effd .Height ,1,1,_effd .Data ,nil ,nil );if _gddg !=nil {_eg .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gddg );
};return _ddbd ;};func (_gced *Bitmaps )CountPixels ()*_f .NumSlice {_egccb :=&_f .NumSlice {};for _ ,_fafa :=range _gced .Values {_egccb .AddInt (_fafa .CountPixels ());};return _egccb ;};func (_bffe *Bitmaps )String ()string {_eeffg :=_e .Builder {};
for _ ,_efbbc :=range _bffe .Values {_eeffg .WriteString (_efbbc .String ());_eeffg .WriteRune ('\n');};return _eeffg .String ();};func (_eadb *Bitmap )setEightBytes (_dgd int ,_fbdd uint64 )error {_bcfa :=_eadb .RowStride -(_dgd %_eadb .RowStride );if _eadb .RowStride !=_eadb .Width >>3{_bcfa --;
};if _bcfa >=8{return _eadb .setEightFullBytes (_dgd ,_fbdd );};return _eadb .setEightPartlyBytes (_dgd ,_bcfa ,_fbdd );};type Color int ;func _aga (_cbed *Bitmap ,_ab int )(*Bitmap ,error ){const _fdg ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _cbed ==nil {return nil ,_dd .Error (_fdg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ab ==1{return _ecb (nil ,_cbed );};if _ab !=2&&_ab !=4&&_ab !=8{return nil ,_dd .Error (_fdg ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_cde :=_ab *_cbed .Width ;_gca :=_ab *_cbed .Height ;_dfd :=New (_cde ,_gca );var _bcd error ;switch _ab {case 2:_bcd =_cb (_dfd ,_cbed );case 4:_bcd =_aa (_dfd ,_cbed );case 8:_bcd =_fa (_dfd ,_cbed );};if _bcd !=nil {return nil ,_dd .Wrap (_bcd ,_fdg ,"");
};return _dfd ,nil ;};func (_adbc *byHeight )Len ()int {return len (_adbc .Values )};func (_ebeb *Bitmaps )SortByWidth (){_bcfab :=(*byWidth )(_ebeb );_c .Sort (_bcfab )};func _bbf (_ffaf ,_cbcg int )int {if _ffaf < _cbcg {return _ffaf ;};return _cbcg ;
};type ClassedPoints struct{*Points ;_f .IntSlice ;_edae func (_baaa ,_cadb int )bool ;};func _fadc (_bfgc ,_cefc ,_bbeb *Bitmap )(*Bitmap ,error ){const _bebb ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _cefc ==nil {return nil ,_dd .Error (_bebb ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bbeb ==nil {return nil ,_dd .Error (_bebb ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _agg error ;switch {case _bfgc ==_cefc :if _agg =_bfgc .RasterOperation (0,0,_cefc .Width ,_cefc .Height ,PixNotSrcAndDst ,_bbeb ,0,0);
_agg !=nil {return nil ,_dd .Wrap (_agg ,_bebb ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _bfgc ==_bbeb :if _agg =_bfgc .RasterOperation (0,0,_cefc .Width ,_cefc .Height ,PixNotSrcAndDst ,_cefc ,0,0);_agg !=nil {return nil ,_dd .Wrap (_agg ,_bebb ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_bfgc ,_agg =_ecb (_bfgc ,_cefc );if _agg !=nil {return nil ,_dd .Wrap (_agg ,_bebb ,"");};if _agg =_bfgc .RasterOperation (0,0,_cefc .Width ,_cefc .Height ,PixNotSrcAndDst ,_bbeb ,0,0);_agg !=nil {return nil ,_dd .Wrap (_agg ,_bebb ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _bfgc ,nil ;};func (_gfce *Bitmap )setBit (_decd int ){_gfce .Data [(_decd >>3)]|=0x80>>uint (_decd &7)};func TstImageBitmap ()*Bitmap {return _agbf .Copy ()};func TstPSymbol (t *_g .T )*Bitmap {t .Helper ();_bbebc :=New (5,8);_db .NoError (t ,_bbebc .SetPixel (0,0,1));
_db .NoError (t ,_bbebc .SetPixel (1,0,1));_db .NoError (t ,_bbebc .SetPixel (2,0,1));_db .NoError (t ,_bbebc .SetPixel (3,0,1));_db .NoError (t ,_bbebc .SetPixel (4,1,1));_db .NoError (t ,_bbebc .SetPixel (0,1,1));_db .NoError (t ,_bbebc .SetPixel (4,2,1));
_db .NoError (t ,_bbebc .SetPixel (0,2,1));_db .NoError (t ,_bbebc .SetPixel (4,3,1));_db .NoError (t ,_bbebc .SetPixel (0,3,1));_db .NoError (t ,_bbebc .SetPixel (0,4,1));_db .NoError (t ,_bbebc .SetPixel (1,4,1));_db .NoError (t ,_bbebc .SetPixel (2,4,1));
_db .NoError (t ,_bbebc .SetPixel (3,4,1));_db .NoError (t ,_bbebc .SetPixel (0,5,1));_db .NoError (t ,_bbebc .SetPixel (0,6,1));_db .NoError (t ,_bbebc .SetPixel (0,7,1));return _bbebc ;};func (_acaef *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _cagdf ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _acaef ==nil {return nil ,_dd .Error (_cagdf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_acaef .Values )-1{return nil ,_dd .Errorf (_cagdf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _acaef .Values [i ],nil ;};func (_dcad MorphProcess )getWidthHeight ()(_fgac ,_ecbc int ){return _dcad .Arguments [0],_dcad .Arguments [1];};func _afg ()[]int {_cagf :=make ([]int ,256);for _dgab :=0;_dgab <=0xff;_dgab ++{_gcec :=byte (_dgab );
_cagf [_gcec ]=int (_gcec &0x1)+(int (_gcec >>1)&0x1)+(int (_gcec >>2)&0x1)+(int (_gcec >>3)&0x1)+(int (_gcec >>4)&0x1)+(int (_gcec >>5)&0x1)+(int (_gcec >>6)&0x1)+(int (_gcec >>7)&0x1);};return _cagf ;};func _ddebe (_dgbg ,_bcaf *Bitmap ,_fafc ,_acda int )(*Bitmap ,error ){const _cegg ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";
if _bcaf ==nil {return nil ,_dd .Error (_cegg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fafc < 1||_acda < 1{return nil ,_dd .Error (_cegg ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _fafc ==1&&_acda ==1{_fdcf ,_ebade :=_ecb (_dgbg ,_bcaf );if _ebade !=nil {return nil ,_dd .Wrap (_ebade ,_cegg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fdcf ,nil ;};if _fafc ==1||_acda ==1{_cfb :=SelCreateBrick (_acda ,_fafc ,_acda /2,_fafc /2,SelHit );_ccaf ,_ecg :=_aaae (_dgbg ,_bcaf ,_cfb );if _ecg !=nil {return nil ,_dd .Wrap (_ecg ,_cegg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ccaf ,nil ;};_aaada :=SelCreateBrick (1,_fafc ,0,_fafc /2,SelHit );_dcca :=SelCreateBrick (_acda ,1,_acda /2,0,SelHit );_afbcb ,_aggc :=_aaae (nil ,_bcaf ,_aaada );if _aggc !=nil {return nil ,_dd .Wrap (_aggc ,_cegg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_dgbg ,_aggc =_aaae (_dgbg ,_afbcb ,_dcca );if _aggc !=nil {return nil ,_dd .Wrap (_aggc ,_cegg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dgbg ,nil ;};func (_dffg *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _daeb ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_dffg .IntSlice .Size (){return 0,_dd .Errorf (_daeb ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dffg .YAtIndex (i )),nil ;};func (_dbb *Bitmap )clipRectangle (_aagf ,_gabg *_eb .Rectangle )(_cabd *Bitmap ,_fede error ){const _dfc ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _aagf ==nil {return nil ,_dd .Error (_dfc ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_fdf ,_gbagc :=_dbb .Width ,_dbb .Height ;_facd ,_fede :=ClipBoxToRectangle (_aagf ,_fdf ,_gbagc );if _fede !=nil {_eg .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_fede );
return nil ,nil ;};_cbca ,_bag :=_facd .Min .X ,_facd .Min .Y ;_fbgd ,_befc :=_facd .Max .X -_facd .Min .X ,_facd .Max .Y -_facd .Min .Y ;_cabd =New (_fbgd ,_befc );_cabd .Text =_dbb .Text ;if _fede =_cabd .RasterOperation (0,0,_fbgd ,_befc ,PixSrc ,_dbb ,_cbca ,_bag );
_fede !=nil {return nil ,_dd .Wrap (_fede ,_dfc ,"");};if _gabg !=nil {*_gabg =*_facd ;};return _cabd ,nil ;};func _cb (_fda ,_bb *Bitmap )(_eba error ){const _de ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_a :=_bb .RowStride ;_ag :=_fda .RowStride ;var (_ed byte ;_bf uint16 ;_ad ,_ege ,_gd ,_ee ,_ba int ;);for _gd =0;_gd < _bb .Height ;_gd ++{_ad =_gd *_a ;_ege =2*_gd *_ag ;for _ee =0;_ee < _a ;_ee ++{_ed =_bb .Data [_ad +_ee ];_bf =_dad [_ed ];_ba =_ege +_ee *2;
if _fda .RowStride !=_bb .RowStride *2&&(_ee +1)*2> _fda .RowStride {_eba =_fda .SetByte (_ba ,byte (_bf >>8));}else {_eba =_fda .setTwoBytes (_ba ,_bf );};if _eba !=nil {return _dd .Wrap (_eba ,_de ,"");};};for _ee =0;_ee < _ag ;_ee ++{_ba =_ege +_ag +_ee ;
_ed =_fda .Data [_ege +_ee ];if _eba =_fda .SetByte (_ba ,_ed );_eba !=nil {return _dd .Wrapf (_eba ,_de ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ege +_ee ,_ege +_ag +_ee );
};};};return nil ;};func _gcdc (_cggc *Bitmap ,_caab int )(*Bitmap ,error ){const _gaee ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _cggc ==nil {return nil ,_dd .Error (_gaee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _caab <=0{return nil ,_dd .Error (_gaee ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _caab ==1{_aeac ,_eeca :=_ecb (nil ,_cggc );if _eeca !=nil {return nil ,_dd .Wrap (_eeca ,_gaee ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");
};return _aeac ,nil ;};_cdbg ,_gdec :=_edc (_cggc ,_caab ,_caab );if _gdec !=nil {return nil ,_dd .Wrap (_gdec ,_gaee ,"");};return _cdbg ,nil ;};func _adeg (_bcbf *Bitmap ,_fdca *_f .Stack ,_feea ,_ffag int )(_cbcgfc *_eb .Rectangle ,_efea error ){const _decc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bcbf ==nil {return nil ,_dd .Error (_decc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fdca ==nil {return nil ,_dd .Error (_decc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_eebfa ,_dgeg :=_bcbf .Width ,_bcbf .Height ;_gdcf :=_eebfa -1;_gfbb :=_dgeg -1;if _feea < 0||_feea > _gdcf ||_ffag < 0||_ffag > _gfbb ||!_bcbf .GetPixel (_feea ,_ffag ){return nil ,nil ;};var _acdbf *_eb .Rectangle ;_acdbf ,_efea =Rect (100000,100000,0,0);
if _efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"");};if _efea =_cdbba (_fdca ,_feea ,_feea ,_ffag ,1,_gfbb ,_acdbf );_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _efea =_cdbba (_fdca ,_feea ,_feea ,_ffag +1,-1,_gfbb ,_acdbf );
_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_acdbf .Min .X ,_acdbf .Max .X =_feea ,_feea ;_acdbf .Min .Y ,_acdbf .Max .Y =_ffag ,_ffag ;var (_dfgc *fillSegment ;
_afag int ;);for _fdca .Len ()> 0{if _dfgc ,_efea =_bdea (_fdca );_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"");};_ffag =_dfgc ._gcbd ;for _feea =_dfgc ._gbega ;_feea >=0&&_bcbf .GetPixel (_feea ,_ffag );_feea --{if _efea =_bcbf .SetPixel (_feea ,_ffag ,0);
_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"");};};if _feea >=_dfgc ._gbega {for _feea ++;_feea <=_dfgc ._aafeg &&_feea <=_gdcf &&!_bcbf .GetPixel (_feea ,_ffag );_feea ++{};_afag =_feea ;if !(_feea <=_dfgc ._aafeg &&_feea <=_gdcf ){continue ;};
}else {_afag =_feea +1;if _afag < _dfgc ._gbega -1{if _efea =_cdbba (_fdca ,_afag ,_dfgc ._gbega -1,_dfgc ._gcbd ,-_dfgc ._edfaa ,_gfbb ,_acdbf );_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_feea =_dfgc ._gbega +1;};for {for ;_feea <=_gdcf &&_bcbf .GetPixel (_feea ,_ffag );_feea ++{if _efea =_bcbf .SetPixel (_feea ,_ffag ,0);_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _efea =_cdbba (_fdca ,_afag ,_feea -1,_dfgc ._gcbd ,_dfgc ._edfaa ,_gfbb ,_acdbf );
_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _feea > _dfgc ._aafeg +1{if _efea =_cdbba (_fdca ,_dfgc ._aafeg +1,_feea -1,_dfgc ._gcbd ,-_dfgc ._edfaa ,_gfbb ,_acdbf );_efea !=nil {return nil ,_dd .Wrap (_efea ,_decc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _feea ++;_feea <=_dfgc ._aafeg &&_feea <=_gdcf &&!_bcbf .GetPixel (_feea ,_ffag );_feea ++{};_afag =_feea ;if !(_feea <=_dfgc ._aafeg &&_feea <=_gdcf ){break ;};};};_acdbf .Max .X ++;_acdbf .Max .Y ++;return _acdbf ,nil ;};func TstTSymbol (t *_g .T ,scale ...int )*Bitmap {_edfed ,_cfdcc :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_db .NoError (t ,_cfdcc );return TstGetScaledSymbol (t ,_edfed ,scale ...);};func New (width ,height int )*Bitmap {_fdbb :=_aage (width ,height );_fdbb .Data =make ([]byte ,height *_fdbb .RowStride );return _fdbb ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_fbc float64 ,_eadaf error ){const _cdadf ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _fbc ,_dd .Error (_cdadf ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _fbc ,_dd .Error (_cdadf ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _fbc ,_dd .Error (_cdadf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_caeg ,_geae :=bm1 .Width ,bm1 .Height ;_gaaa ,_ebgd :=bm2 .Width ,bm2 .Height ;
if _dgfe (_caeg -_gaaa )> maxDiffW {return 0,nil ;};if _dgfe (_geae -_ebgd )> maxDiffH {return 0,nil ;};var _ceec ,_bfcb int ;if delX >=0{_ceec =int (delX +0.5);}else {_ceec =int (delX -0.5);};if delY >=0{_bfcb =int (delY +0.5);}else {_bfcb =int (delY -0.5);
};_geea :=bm1 .createTemplate ();if _eadaf =_geea .RasterOperation (_ceec ,_bfcb ,_gaaa ,_ebgd ,PixSrc ,bm2 ,0,0);_eadaf !=nil {return _fbc ,_dd .Wrap (_eadaf ,_cdadf ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _eadaf =_geea .RasterOperation (0,0,_caeg ,_geae ,PixSrcAndDst ,bm1 ,0,0);_eadaf !=nil {return _fbc ,_dd .Wrap (_eadaf ,_cdadf ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_gbee :=_geea .countPixels ();_fbc =float64 (_gbee )*float64 (_gbee )/(float64 (area1 )*float64 (area2 ));
return _fbc ,nil ;};func _debc (_ebcc *Bitmap ,_cgag *Bitmap ,_ebcf int )(_egffd error ){const _eeec ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_caaba :=_bbf (_ebcc .Height ,_cgag .Height );_cbge :=_bbf (_ebcc .RowStride ,_cgag .RowStride );
switch _ebcf {case 4:_egffd =_gdbbd (_ebcc ,_cgag ,_caaba ,_cbge );case 8:_egffd =_aegd (_ebcc ,_cgag ,_caaba ,_cbge );default:return _dd .Errorf (_eeec ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ebcf );
};if _egffd !=nil {return _dd .Wrap (_egffd ,_eeec ,"");};return nil ;};func _ega (_bfe ,_aeeb *Bitmap ,_ccb int ,_dfb []byte ,_agc int )(_aaf error ){const _bfg ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_gaf ,_aef ,_edf ,_fgd ,_fce ,_dfg ,_gdg ,_aeb int ;_ageg ,_deg uint32 ;_ebg ,_gaaf byte ;_dbe uint16 ;);_effe :=make ([]byte ,4);_eag :=make ([]byte ,4);for _edf =0;_edf < _bfe .Height -1;_edf ,_fgd =_edf +2,_fgd +1{_gaf =_edf *_bfe .RowStride ;_aef =_fgd *_aeeb .RowStride ;
for _fce ,_dfg =0,0;_fce < _agc ;_fce ,_dfg =_fce +4,_dfg +1{for _gdg =0;_gdg < 4;_gdg ++{_aeb =_gaf +_fce +_gdg ;if _aeb <=len (_bfe .Data )-1&&_aeb < _gaf +_bfe .RowStride {_effe [_gdg ]=_bfe .Data [_aeb ];}else {_effe [_gdg ]=0x00;};_aeb =_gaf +_bfe .RowStride +_fce +_gdg ;
if _aeb <=len (_bfe .Data )-1&&_aeb < _gaf +(2*_bfe .RowStride ){_eag [_gdg ]=_bfe .Data [_aeb ];}else {_eag [_gdg ]=0x00;};};_ageg =_b .BigEndian .Uint32 (_effe );_deg =_b .BigEndian .Uint32 (_eag );_deg &=_ageg ;_deg &=_deg <<1;_deg &=0xaaaaaaaa;_ageg =_deg |(_deg <<7);
_ebg =byte (_ageg >>24);_gaaf =byte ((_ageg >>8)&0xff);_aeb =_aef +_dfg ;if _aeb +1==len (_aeeb .Data )-1||_aeb +1>=_aef +_aeeb .RowStride {_aeeb .Data [_aeb ]=_dfb [_ebg ];if _aaf =_aeeb .SetByte (_aeb ,_dfb [_ebg ]);_aaf !=nil {return _dd .Wrapf (_aaf ,_bfg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_aeb );
};}else {_dbe =(uint16 (_dfb [_ebg ])<<8)|uint16 (_dfb [_gaaf ]);if _aaf =_aeeb .setTwoBytes (_aeb ,_dbe );_aaf !=nil {return _dd .Wrapf (_aaf ,_bfg ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_aeb );
};_dfg ++;};};};return nil ;};var _ _c .Interface =&ClassedPoints {};func (_efafb *Bitmap )SetDefaultPixel (){for _acg :=range _efafb .Data {_efafb .Data [_acg ]=byte (0xff);};};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;
);func _fcf ()(_dcf [256]uint64 ){for _eda :=0;_eda < 256;_eda ++{if _eda &0x01!=0{_dcf [_eda ]|=0xff;};if _eda &0x02!=0{_dcf [_eda ]|=0xff00;};if _eda &0x04!=0{_dcf [_eda ]|=0xff0000;};if _eda &0x08!=0{_dcf [_eda ]|=0xff000000;};if _eda &0x10!=0{_dcf [_eda ]|=0xff00000000;
};if _eda &0x20!=0{_dcf [_eda ]|=0xff0000000000;};if _eda &0x40!=0{_dcf [_eda ]|=0xff000000000000;};if _eda &0x80!=0{_dcf [_eda ]|=0xff00000000000000;};};return _dcf ;};func (_fdecg Points )YSorter ()func (_gcdcb ,_cadf int )bool {return func (_ddga ,_afdg int )bool {return _fdecg [_ddga ].Y < _fdecg [_afdg ].Y };
};func _gdbbd (_bfba ,_agaa *Bitmap ,_aaac ,_accb int )(_ggda error ){const _bccae ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_fddd ,_bbdc ,_bacd ,_ccef int ;_bgef ,_bffb ,_beae ,_bbbd ,_ffbg ,_agega ,_aedb byte ;
);for _fddd =0;_fddd < _aaac ;_fddd ++{_bacd =_fddd *_bfba .RowStride ;_ccef =_fddd *_agaa .RowStride ;for _bbdc =0;_bbdc < _accb ;_bbdc ++{_bgef ,_ggda =_bfba .GetByte (_bacd +_bbdc );if _ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_bffb ,_ggda =_agaa .GetByte (_ccef +_bbdc );if _ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _fddd > 0{_beae ,_ggda =_bfba .GetByte (_bacd -_bfba .RowStride +_bbdc );if _ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0069\u0020\u003e \u0030");
};_bgef |=_beae ;};if _bbdc > 0{_bbbd ,_ggda =_bfba .GetByte (_bacd +_bbdc -1);if _ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u006a\u0020\u003e \u0030");};_bgef |=_bbbd <<7;};_bgef &=_bffb ;if _bgef ==0||(^_bgef )==0{if _ggda =_bfba .SetByte (_bacd +_bbdc ,_bgef );
_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_aedb =_bgef ;_bgef =(_bgef |(_bgef >>1)|(_bgef <<1))&_bffb ;if (_bgef ^_aedb )==0{if _ggda =_bfba .SetByte (_bacd +_bbdc ,_bgef );
_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _fddd =_aaac -1;_fddd >=0;_fddd --{_bacd =_fddd *_bfba .RowStride ;_ccef =_fddd *_agaa .RowStride ;
for _bbdc =_accb -1;_bbdc >=0;_bbdc --{if _bgef ,_ggda =_bfba .GetByte (_bacd +_bbdc );_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _bffb ,_ggda =_agaa .GetByte (_ccef +_bbdc );
_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fddd < _aaac -1{if _ffbg ,_ggda =_bfba .GetByte (_bacd +_bfba .RowStride +_bbdc );_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_bgef |=_ffbg ;};if _bbdc < _accb -1{if _agega ,_ggda =_bfba .GetByte (_bacd +_bbdc +1);_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_bgef |=_agega >>7;
};_bgef &=_bffb ;if _bgef ==0||(^_bgef )==0{if _ggda =_bfba .SetByte (_bacd +_bbdc ,_bgef );_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_aedb =_bgef ;_bgef =(_bgef |(_bgef >>1)|(_bgef <<1))&_bffb ;if (_bgef ^_aedb )==0{if _ggda =_bfba .SetByte (_bacd +_bbdc ,_bgef );_ggda !=nil {return _dd .Wrap (_ggda ,_bccae ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _bfcbd (_eadba *Bitmap ,_gaed ,_fabd ,_fbgf ,_bgcc int ,_gdfd RasterOperator ,_gfff *Bitmap ,_cgab ,_fcfa int )error {var (_gecaa byte ;_edbg int ;_gagd int ;_ecaag ,_gdfg int ;_agfg ,_dddc int ;);_fccf :=_fbgf >>3;_deeec :=_fbgf &7;
if _deeec > 0{_gecaa =_ecga [_deeec ];};_edbg =_gfff .RowStride *_fcfa +(_cgab >>3);_gagd =_eadba .RowStride *_fabd +(_gaed >>3);switch _gdfd {case PixSrc :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;
for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=_gfff .Data [_ecaag ];_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],_gfff .Data [_ecaag ],_gecaa );};};case PixNotSrc :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;
_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=^(_gfff .Data [_ecaag ]);_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],^_gfff .Data [_ecaag ],_gecaa );};};case PixSrcOrDst :for _agfg =0;
_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]|=_gfff .Data [_ecaag ];_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],_gfff .Data [_ecaag ]|_eadba .Data [_gdfg ],_gecaa );
};};case PixSrcAndDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]&=_gfff .Data [_ecaag ];_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],_gfff .Data [_ecaag ]&_eadba .Data [_gdfg ],_gecaa );
};};case PixSrcXorDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]^=_gfff .Data [_ecaag ];_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],_gfff .Data [_ecaag ]^_eadba .Data [_gdfg ],_gecaa );
};};case PixNotSrcOrDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]|=^(_gfff .Data [_ecaag ]);_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],^(_gfff .Data [_ecaag ])|_eadba .Data [_gdfg ],_gecaa );
};};case PixNotSrcAndDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]&=^(_gfff .Data [_ecaag ]);_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],^(_gfff .Data [_ecaag ])&_eadba .Data [_gdfg ],_gecaa );
};};case PixSrcOrNotDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=_gfff .Data [_ecaag ]|^(_eadba .Data [_gdfg ]);_gdfg ++;
_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],_gfff .Data [_ecaag ]|^(_eadba .Data [_gdfg ]),_gecaa );};};case PixSrcAndNotDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;
for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=_gfff .Data [_ecaag ]&^(_eadba .Data [_gdfg ]);_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],_gfff .Data [_ecaag ]&^(_eadba .Data [_gdfg ]),_gecaa );};};
case PixNotPixSrcOrDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=^(_gfff .Data [_ecaag ]|_eadba .Data [_gdfg ]);_gdfg ++;
_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],^(_gfff .Data [_ecaag ]|_eadba .Data [_gdfg ]),_gecaa );};};case PixNotPixSrcAndDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;
for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=^(_gfff .Data [_ecaag ]&_eadba .Data [_gdfg ]);_gdfg ++;_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],^(_gfff .Data [_ecaag ]&_eadba .Data [_gdfg ]),_gecaa );};};
case PixNotPixSrcXorDst :for _agfg =0;_agfg < _bgcc ;_agfg ++{_ecaag =_edbg +_agfg *_gfff .RowStride ;_gdfg =_gagd +_agfg *_eadba .RowStride ;for _dddc =0;_dddc < _fccf ;_dddc ++{_eadba .Data [_gdfg ]=^(_gfff .Data [_ecaag ]^_eadba .Data [_gdfg ]);_gdfg ++;
_ecaag ++;};if _deeec > 0{_eadba .Data [_gdfg ]=_ggga (_eadba .Data [_gdfg ],^(_gfff .Data [_ecaag ]^_eadba .Data [_gdfg ]),_gecaa );};};default:_eg .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_gdfd );
return _dd .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _facb (src ,sequence ...);};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;
MopAddBorder ;);func _ga (_cgf *Bitmap ,_fed int ,_ffd []byte )(_fgbd *Bitmap ,_bbd error ){const _cbc ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _cgf ==nil {return nil ,_dd .Error (_cbc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _fed < 1||_fed > 4{return nil ,_dd .Error (_cbc ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _cgf .Height <=1{return nil ,_dd .Errorf (_cbc ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_cgf .Height );
};_fgbd =New (_cgf .Width /2,_cgf .Height /2);if _ffd ==nil {_ffd =_cbb ();};_age :=_bbf (_cgf .RowStride ,2*_fgbd .RowStride );switch _fed {case 1:_bbd =_fbe (_cgf ,_fgbd ,_fed ,_ffd ,_age );case 2:_bbd =_ddc (_cgf ,_fgbd ,_fed ,_ffd ,_age );case 3:_bbd =_dff (_cgf ,_fgbd ,_fed ,_ffd ,_age );
case 4:_bbd =_ega (_cgf ,_fgbd ,_fed ,_ffd ,_age );};if _bbd !=nil {return nil ,_bbd ;};return _fgbd ,nil ;};func TstAddSymbol (t *_g .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_dage :=_eb .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );
bms .AddBox (&_dage );*x +=sym .Width +space ;};func (_gcdg *Bitmap )Equivalent (s *Bitmap )bool {return _gcdg .equivalent (s )};func (_bfa *Bitmap )resizeImageData (_ccec *Bitmap )error {if _ccec ==nil {return _dd .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bfa .SizesEqual (_ccec ){return nil ;};_bfa .Data =make ([]byte ,len (_ccec .Data ));_bfa .Width =_ccec .Width ;_bfa .Height =_ccec .Height ;_bfa .RowStride =_ccec .RowStride ;return nil ;};func (_dfbb Points )GetIntX (i int )(int ,error ){if i >=len (_dfbb ){return 0,_dd .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dfbb [i ].X ),nil ;};func _febd (_acada ,_aafde *Bitmap ,_fcfg CombinationOperator )*Bitmap {_acdg :=New (_acada .Width ,_acada .Height );for _fcee :=0;_fcee < len (_acdg .Data );_fcee ++{_acdg .Data [_fcee ]=_fadf (_acada .Data [_fcee ],_aafde .Data [_fcee ],_fcfg );
};return _acdg ;};func (_ccdc MorphProcess )verify (_bede int ,_gabge ,_ebbc *int )error {const _fbegc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _ccdc .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_ccdc .Arguments )!=2{return _dd .Error (_fbegc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_baged ,_caf :=_ccdc .getWidthHeight ();if _baged <=0||_caf <=0{return _dd .Error (_fbegc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_fefg :=len (_ccdc .Arguments );*_gabge +=_fefg ;if _fefg < 1||_fefg > 4{return _dd .Error (_fbegc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _cega :=0;_cega < _fefg ;_cega ++{if _ccdc .Arguments [_cega ]< 1||_ccdc .Arguments [_cega ]> 4{return _dd .Error (_fbegc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_ccdc .Arguments )==0{return _dd .Error (_fbegc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_dfbc :=_ccdc .Arguments [0];if _dfbc !=2&&_dfbc !=4&&_dfbc !=8{return _dd .Error (_fbegc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_gabge -=_gcebg [_dfbc /4];case MopAddBorder :if len (_ccdc .Arguments )==0{return _dd .Error (_fbegc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eefbb :=_ccdc .Arguments [0];if _bede > 0{return _dd .Error (_fbegc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _eefbb < 1{return _dd .Error (_fbegc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_ebbc =_eefbb ;};return nil ;};func (_bbde *Bitmap )countPixels ()int {var (_bdbg int ;
_eagf uint8 ;_acf byte ;_dgc int ;);_ffdb :=_bbde .RowStride ;_gcge :=uint (_bbde .Width &0x07);if _gcge !=0{_eagf =uint8 ((0xff<<(8-_gcge ))&0xff);_ffdb --;};for _bece :=0;_bece < _bbde .Height ;_bece ++{for _dgc =0;_dgc < _ffdb ;_dgc ++{_acf =_bbde .Data [_bece *_bbde .RowStride +_dgc ];
_bdbg +=int (_cdfb [_acf ]);};if _gcge !=0{_bdbg +=int (_cdfb [_bbde .Data [_bece *_bbde .RowStride +_dgc ]&_eagf ]);};};return _bdbg ;};func _edec ()(_ffg [256]uint16 ){for _gef :=0;_gef < 256;_gef ++{if _gef &0x01!=0{_ffg [_gef ]|=0x3;};if _gef &0x02!=0{_ffg [_gef ]|=0xc;
};if _gef &0x04!=0{_ffg [_gef ]|=0x30;};if _gef &0x08!=0{_ffg [_gef ]|=0xc0;};if _gef &0x10!=0{_ffg [_gef ]|=0x300;};if _gef &0x20!=0{_ffg [_gef ]|=0xc00;};if _gef &0x40!=0{_ffg [_gef ]|=0x3000;};if _gef &0x80!=0{_ffg [_gef ]|=0xc000;};};return _ffg ;};
func _agaf (_efca *Bitmap ,_gbbg *_f .Stack ,_eegf ,_agfc int )(_fbee *_eb .Rectangle ,_gggd error ){const _dbec ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _efca ==nil {return nil ,_dd .Error (_dbec ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _gbbg ==nil {return nil ,_dd .Error (_dbec ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_effdfc ,_fbeca :=_efca .Width ,_efca .Height ;_bbdf :=_effdfc -1;_gbfa :=_fbeca -1;if _eegf < 0||_eegf > _bbdf ||_agfc < 0||_agfc > _gbfa ||!_efca .GetPixel (_eegf ,_agfc ){return nil ,nil ;
};_gbad :=_eb .Rect (100000,100000,0,0);if _gggd =_cdbba (_gbbg ,_eegf ,_eegf ,_agfc ,1,_gbfa ,&_gbad );_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gggd =_cdbba (_gbbg ,_eegf ,_eegf ,_agfc +1,-1,_gbfa ,&_gbad );
_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_gbad .Min .X ,_gbad .Max .X =_eegf ,_eegf ;_gbad .Min .Y ,_gbad .Max .Y =_agfc ,_agfc ;var (_baba *fillSegment ;
_bcbgg int ;);for _gbbg .Len ()> 0{if _baba ,_gggd =_bdea (_gbbg );_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"");};_agfc =_baba ._gcbd ;for _eegf =_baba ._gbega -1;_eegf >=0&&_efca .GetPixel (_eegf ,_agfc );_eegf --{if _gggd =_efca .SetPixel (_eegf ,_agfc ,0);
_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _eegf >=_baba ._gbega -1{for {for _eegf ++;_eegf <=_baba ._aafeg +1&&_eegf <=_bbdf &&!_efca .GetPixel (_eegf ,_agfc );_eegf ++{};_bcbgg =_eegf ;if !(_eegf <=_baba ._aafeg +1&&_eegf <=_bbdf ){break ;
};for ;_eegf <=_bbdf &&_efca .GetPixel (_eegf ,_agfc );_eegf ++{if _gggd =_efca .SetPixel (_eegf ,_agfc ,0);_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gggd =_cdbba (_gbbg ,_bcbgg ,_eegf -1,_baba ._gcbd ,_baba ._edfaa ,_gbfa ,&_gbad );
_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eegf > _baba ._aafeg {if _gggd =_cdbba (_gbbg ,_baba ._aafeg +1,_eegf -1,_baba ._gcbd ,-_baba ._edfaa ,_gbfa ,&_gbad );_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_bcbgg =_eegf +1;if _bcbgg < _baba ._gbega {if _gggd =_cdbba (_gbbg ,_bcbgg ,_baba ._gbega -1,_baba ._gcbd ,-_baba ._edfaa ,_gbfa ,&_gbad );_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_eegf =_baba ._gbega ;for {for ;_eegf <=_bbdf &&_efca .GetPixel (_eegf ,_agfc );_eegf ++{if _gggd =_efca .SetPixel (_eegf ,_agfc ,0);_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gggd =_cdbba (_gbbg ,_bcbgg ,_eegf -1,_baba ._gcbd ,_baba ._edfaa ,_gbfa ,&_gbad );
_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eegf > _baba ._aafeg {if _gggd =_cdbba (_gbbg ,_baba ._aafeg +1,_eegf -1,_baba ._gcbd ,-_baba ._edfaa ,_gbfa ,&_gbad );_gggd !=nil {return nil ,_dd .Wrap (_gggd ,_dbec ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _eegf ++;_eegf <=_baba ._aafeg +1&&_eegf <=_bbdf &&!_efca .GetPixel (_eegf ,_agfc );_eegf ++{};_bcbgg =_eegf ;if !(_eegf <=_baba ._aafeg +1&&_eegf <=_bbdf ){break ;};};};_gbad .Max .X ++;_gbad .Max .Y ++;return &_gbad ,nil ;};func TstImageBitmapData ()[]byte {return _agbf .Data };
func _eabfg (_efcd *Bitmap ,_cfcd ,_aeace int ,_gefe ,_ddge int ,_babc RasterOperator ){var (_dgbgf bool ;_dedc bool ;_bbae int ;_efee int ;_gfcg int ;_fagda int ;_bcfg bool ;_daec byte ;);_cceg :=8-(_cfcd &7);_fgabe :=_dcgdg [_cceg ];_acae :=_efcd .RowStride *_aeace +(_cfcd >>3);
if _gefe < _cceg {_dgbgf =true ;_fgabe &=_ecga [8-_cceg +_gefe ];};if !_dgbgf {_bbae =(_gefe -_cceg )>>3;if _bbae !=0{_dedc =true ;_efee =_acae +1;};};_gfcg =(_cfcd +_gefe )&7;if !(_dgbgf ||_gfcg ==0){_bcfg =true ;_daec =_ecga [_gfcg ];_fagda =_acae +1+_bbae ;
};var _aebce ,_dege int ;switch _babc {case PixClr :for _aebce =0;_aebce < _ddge ;_aebce ++{_efcd .Data [_acae ]=_ggga (_efcd .Data [_acae ],0x0,_fgabe );_acae +=_efcd .RowStride ;};if _dedc {for _aebce =0;_aebce < _ddge ;_aebce ++{for _dege =0;_dege < _bbae ;
_dege ++{_efcd .Data [_efee +_dege ]=0x0;};_efee +=_efcd .RowStride ;};};if _bcfg {for _aebce =0;_aebce < _ddge ;_aebce ++{_efcd .Data [_fagda ]=_ggga (_efcd .Data [_fagda ],0x0,_daec );_fagda +=_efcd .RowStride ;};};case PixSet :for _aebce =0;_aebce < _ddge ;
_aebce ++{_efcd .Data [_acae ]=_ggga (_efcd .Data [_acae ],0xff,_fgabe );_acae +=_efcd .RowStride ;};if _dedc {for _aebce =0;_aebce < _ddge ;_aebce ++{for _dege =0;_dege < _bbae ;_dege ++{_efcd .Data [_efee +_dege ]=0xff;};_efee +=_efcd .RowStride ;};};
if _bcfg {for _aebce =0;_aebce < _ddge ;_aebce ++{_efcd .Data [_fagda ]=_ggga (_efcd .Data [_fagda ],0xff,_daec );_fagda +=_efcd .RowStride ;};};case PixNotDst :for _aebce =0;_aebce < _ddge ;_aebce ++{_efcd .Data [_acae ]=_ggga (_efcd .Data [_acae ],^_efcd .Data [_acae ],_fgabe );
_acae +=_efcd .RowStride ;};if _dedc {for _aebce =0;_aebce < _ddge ;_aebce ++{for _dege =0;_dege < _bbae ;_dege ++{_efcd .Data [_efee +_dege ]=^(_efcd .Data [_efee +_dege ]);};_efee +=_efcd .RowStride ;};};if _bcfg {for _aebce =0;_aebce < _ddge ;_aebce ++{_efcd .Data [_fagda ]=_ggga (_efcd .Data [_fagda ],^_efcd .Data [_fagda ],_daec );
_fagda +=_efcd .RowStride ;};};};};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);type Boxes []*_eb .Rectangle ;func MakePixelSumTab8 ()[]int {return _afg ()};func (_fgaf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_aaef *Bitmaps ,_dbee *Boxes ,_efbg error ){const _cdfa ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _fgaf ==nil {return nil ,nil ,_dd .Error (_cdfa ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_dd .Error (_cdfa ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fgaf .Zero (){_dbee =&Boxes {};_aaef =&Bitmaps {};return _aaef ,_dbee ,nil ;};switch components {case ComponentConn :_aaef =&Bitmaps {};if _dbee ,_efbg =_fgaf .ConnComponents (_aaef ,8);_efbg !=nil {return nil ,nil ,_dd .Wrap (_efbg ,_cdfa ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_dggc ,_ffec :=MorphSequence (_fgaf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _ffec !=nil {return nil ,nil ,_dd .Wrap (_ffec ,_cdfa ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _eg .Log .IsLogLevel (_eg .LogLevelTrace ){_eg .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_dggc .String ());
};_cdad :=&Bitmaps {};_dbee ,_ffec =_dggc .ConnComponents (_cdad ,8);if _ffec !=nil {return nil ,nil ,_dd .Wrap (_ffec ,_cdfa ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _eg .Log .IsLogLevel (_eg .LogLevelTrace ){_eg .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_cdad .String ());
};if _aaef ,_ffec =_cdad .ClipToBitmap (_fgaf );_ffec !=nil {return nil ,nil ,_dd .Wrap (_ffec ,_cdfa ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_fbega :=1;
var _abe *Bitmap ;switch {case _fgaf .XResolution <=200:_abe =_fgaf ;case _fgaf .XResolution <=400:_fbega =2;_abe ,_efbg =_aeg (_fgaf ,1,0,0,0);if _efbg !=nil {return nil ,nil ,_dd .Wrap (_efbg ,_cdfa ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_fbega =4;_abe ,_efbg =_aeg (_fgaf ,1,1,0,0);if _efbg !=nil {return nil ,nil ,_dd .Wrap (_efbg ,_cdfa ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_fedc ,_ ,_gbcf :=_afbaa (_abe );if _gbcf !=nil {return nil ,nil ,_dd .Wrap (_gbcf ,_cdfa ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_afba ,_gbcf :=_gcdc (_fedc ,_fbega );if _gbcf !=nil {return nil ,nil ,_dd .Wrap (_gbcf ,_cdfa ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_ecdf :=&Bitmaps {};if _dbee ,_gbcf =_afba .ConnComponents (_ecdf ,4);_gbcf !=nil {return nil ,nil ,_dd .Wrap (_gbcf ,_cdfa ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _aaef ,_gbcf =_ecdf .ClipToBitmap (_fgaf );_gbcf !=nil {return nil ,nil ,_dd .Wrap (_gbcf ,_cdfa ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_aaef ,_efbg =_aaef .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _efbg !=nil {return nil ,nil ,_dd .Wrap (_efbg ,_cdfa ,"");};_dbee ,_efbg =_dbee .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _efbg !=nil {return nil ,nil ,_dd .Wrap (_efbg ,_cdfa ,"");};return _aaef ,_dbee ,nil ;};func (_acad *Boxes )Get (i int )(*_eb .Rectangle ,error ){const _fdbfe ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _acad ==nil {return nil ,_dd .Error (_fdbfe ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_acad )-1{return nil ,_dd .Errorf (_fdbfe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_acad )[i ],nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _fdab ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_ffgf :=_aage (width ,height );_ffgf .Data =data ;if len (data )< height *_ffgf .RowStride {return nil ,_dd .Errorf (_fdab ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_ffgf .RowStride );
};return _ffgf ,nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_gbfe :=_bbdca (h ,w ,"");_gbfe .setOrigin (cy ,cx );var _ecda ,_bafa int ;for _ecda =0;_ecda < h ;_ecda ++{for _bafa =0;_bafa < w ;_bafa ++{_gbfe .Data [_ecda ][_bafa ]=tp ;
};};return _gbfe ;};type SizeComparison int ;type CombinationOperator int ;func _fbe (_ceb ,_ebb *Bitmap ,_af int ,_ece []byte ,_fbb int )(_fbdg error ){const _eaf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_bfb ,_ccc ,_caag ,_aec ,_cdd ,_cf ,_gde ,_dcb int ;_gfc ,_efec uint32 ;_eafc ,_fdb byte ;_efa uint16 ;);_aag :=make ([]byte ,4);_egf :=make ([]byte ,4);for _caag =0;_caag < _ceb .Height -1;_caag ,_aec =_caag +2,_aec +1{_bfb =_caag *_ceb .RowStride ;
_ccc =_aec *_ebb .RowStride ;for _cdd ,_cf =0,0;_cdd < _fbb ;_cdd ,_cf =_cdd +4,_cf +1{for _gde =0;_gde < 4;_gde ++{_dcb =_bfb +_cdd +_gde ;if _dcb <=len (_ceb .Data )-1&&_dcb < _bfb +_ceb .RowStride {_aag [_gde ]=_ceb .Data [_dcb ];}else {_aag [_gde ]=0x00;
};_dcb =_bfb +_ceb .RowStride +_cdd +_gde ;if _dcb <=len (_ceb .Data )-1&&_dcb < _bfb +(2*_ceb .RowStride ){_egf [_gde ]=_ceb .Data [_dcb ];}else {_egf [_gde ]=0x00;};};_gfc =_b .BigEndian .Uint32 (_aag );_efec =_b .BigEndian .Uint32 (_egf );_efec |=_gfc ;
_efec |=_efec <<1;_efec &=0xaaaaaaaa;_gfc =_efec |(_efec <<7);_eafc =byte (_gfc >>24);_fdb =byte ((_gfc >>8)&0xff);_dcb =_ccc +_cf ;if _dcb +1==len (_ebb .Data )-1||_dcb +1>=_ccc +_ebb .RowStride {_ebb .Data [_dcb ]=_ece [_eafc ];}else {_efa =(uint16 (_ece [_eafc ])<<8)|uint16 (_ece [_fdb ]);
if _fbdg =_ebb .setTwoBytes (_dcb ,_efa );_fbdg !=nil {return _dd .Wrapf (_fbdg ,_eaf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dcb );
};_cf ++;};};};return nil ;};func (_geb *Bitmap )setFourBytes (_bgdd int ,_gbf uint32 )error {if _bgdd +3> len (_geb .Data )-1{return _dd .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bgdd );
};_geb .Data [_bgdd ]=byte ((_gbf &0xff000000)>>24);_geb .Data [_bgdd +1]=byte ((_gbf &0xff0000)>>16);_geb .Data [_bgdd +2]=byte ((_gbf &0xff00)>>8);_geb .Data [_bgdd +3]=byte (_gbf &0xff);return nil ;};func (_gddge *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_abea *Bitmaps ,_afaf error ){const _ccdd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _gddge ==nil {return nil ,_dd .Error (_ccdd ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_dd .Errorf (_ccdd ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_dd .Errorf (_ccdd ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_eccce ,_afaf :=_gddge .makeSizeIndicator (width ,height ,tp ,relation );if _afaf !=nil {return nil ,_dd .Wrap (_afaf ,_ccdd ,"");};_abea ,_afaf =_gddge .selectByIndicator (_eccce );if _afaf !=nil {return nil ,_dd .Wrap (_afaf ,_ccdd ,"");};return _abea ,nil ;
};func (_ccbe *Bitmaps )SortByHeight (){_gfgeb :=(*byHeight )(_ccbe );_c .Sort (_gfgeb )};func (_dca *Bitmap )setEightFullBytes (_fbfb int ,_caad uint64 )error {if _fbfb +7> len (_dca .Data )-1{return _dd .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dca .Data [_fbfb ]=byte ((_caad &0xff00000000000000)>>56);_dca .Data [_fbfb +1]=byte ((_caad &0xff000000000000)>>48);_dca .Data [_fbfb +2]=byte ((_caad &0xff0000000000)>>40);_dca .Data [_fbfb +3]=byte ((_caad &0xff00000000)>>32);_dca .Data [_fbfb +4]=byte ((_caad &0xff000000)>>24);
_dca .Data [_fbfb +5]=byte ((_caad &0xff0000)>>16);_dca .Data [_fbfb +6]=byte ((_caad &0xff00)>>8);_dca .Data [_fbfb +7]=byte (_caad &0xff);return nil ;};func _eedf (_gfa ,_dbf *Bitmap ,_add ,_dgff ,_gggg ,_degc ,_feee ,_efgg ,_cebg ,_bbff int ,_abgf CombinationOperator )error {var _gbcc int ;
_eccc :=func (){_gbcc ++;_gggg +=_dbf .RowStride ;_degc +=_gfa .RowStride ;_feee +=_gfa .RowStride };for _gbcc =_add ;_gbcc < _dgff ;_eccc (){var _daab uint16 ;_bfbf :=_gggg ;for _gcea :=_degc ;_gcea <=_feee ;_gcea ++{_bebg ,_aad :=_dbf .GetByte (_bfbf );
if _aad !=nil {return _aad ;};_baf ,_aad :=_gfa .GetByte (_gcea );if _aad !=nil {return _aad ;};_daab =(_daab |uint16 (_baf ))<<uint (_bbff );_baf =byte (_daab >>8);if _gcea ==_feee {_baf =_cbda (uint (_efgg ),_baf );};if _aad =_dbf .SetByte (_bfbf ,_fadf (_bebg ,_baf ,_abgf ));
_aad !=nil {return _aad ;};_bfbf ++;_daab <<=uint (_cebg );};};return nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _dcd ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_dd .Error (_dcd ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_dd .Error (_dcd ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_dd .Error (_dcd ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_dd .Error (_dcd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_dd .Error (_dcd ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_fdag ,_ffdbd :=bm1 .Width ,bm1 .Height ;_eacb ,_eadd :=bm2 .Width ,bm2 .Height ;if _f .Abs (_fdag -_eacb )> maxDiffW {return false ,nil ;};if _f .Abs (_ffdbd -_eadd )> maxDiffH {return false ,nil ;};_fagd :=int (delX +_f .Sign (delX )*0.5);_dacb :=int (delY +_f .Sign (delY )*0.5);
_aeaf :=int (_ce .Ceil (_ce .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_beada :=bm2 .RowStride ;_gaafe :=_gecc (_dacb ,0);_egbb :=_bbf (_eadd +_dacb ,_ffdbd );_ebc :=bm1 .RowStride *_gaafe ;_aada :=bm2 .RowStride *(_gaafe -_dacb );
var _ddba int ;if _egbb <=_ffdbd {_ddba =downcount [_egbb -1];};_adee :=_gecc (_fagd ,0);_bggf :=_bbf (_eacb +_fagd ,_fdag );var _faae ,_bgbf int ;if _fagd >=8{_faae =_fagd >>3;_ebc +=_faae ;_adee -=_faae <<3;_bggf -=_faae <<3;_fagd &=7;}else if _fagd <=-8{_bgbf =-((_fagd +7)>>3);
_aada +=_bgbf ;_beada -=_bgbf ;_fagd +=_bgbf <<3;};var (_acfg ,_adbg ,_gdcc int ;_bfdd ,_dcbg ,_ebce byte ;);if _adee >=_bggf ||_gaafe >=_egbb {return false ,nil ;};_defd :=(_bggf +7)>>3;switch {case _fagd ==0:for _adbg =_gaafe ;_adbg < _egbb ;_adbg ,_ebc ,_aada =_adbg +1,_ebc +bm1 .RowStride ,_aada +bm2 .RowStride {for _gdcc =0;
_gdcc < _defd ;_gdcc ++{_bfdd =bm1 .Data [_ebc +_gdcc ]&bm2 .Data [_aada +_gdcc ];_acfg +=tab [_bfdd ];};if _acfg >=_aeaf {return true ,nil ;};if _gdca :=_acfg +downcount [_adbg ]-_ddba ;_gdca < _aeaf {return false ,nil ;};};case _fagd > 0&&_beada < _defd :for _adbg =_gaafe ;
_adbg < _egbb ;_adbg ,_ebc ,_aada =_adbg +1,_ebc +bm1 .RowStride ,_aada +bm2 .RowStride {_dcbg =bm1 .Data [_ebc ];_ebce =bm2 .Data [_aada ]>>uint (_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];for _gdcc =1;_gdcc < _beada ;_gdcc ++{_dcbg =bm1 .Data [_ebc +_gdcc ];
_ebce =bm2 .Data [_aada +_gdcc ]>>uint (_fagd )|bm2 .Data [_aada +_gdcc -1]<<uint (8-_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];};_dcbg =bm1 .Data [_ebc +_gdcc ];_ebce =bm2 .Data [_aada +_gdcc -1]<<uint (8-_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];
if _acfg >=_aeaf {return true ,nil ;}else if _acfg +downcount [_adbg ]-_ddba < _aeaf {return false ,nil ;};};case _fagd > 0&&_beada >=_defd :for _adbg =_gaafe ;_adbg < _egbb ;_adbg ,_ebc ,_aada =_adbg +1,_ebc +bm1 .RowStride ,_aada +bm2 .RowStride {_dcbg =bm1 .Data [_ebc ];
_ebce =bm2 .Data [_aada ]>>uint (_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];for _gdcc =1;_gdcc < _defd ;_gdcc ++{_dcbg =bm1 .Data [_ebc +_gdcc ];_ebce =bm2 .Data [_aada +_gdcc ]>>uint (_fagd );_ebce |=bm2 .Data [_aada +_gdcc -1]<<uint (8-_fagd );
_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];};if _acfg >=_aeaf {return true ,nil ;}else if _acfg +downcount [_adbg ]-_ddba < _aeaf {return false ,nil ;};};case _defd < _beada :for _adbg =_gaafe ;_adbg < _egbb ;_adbg ,_ebc ,_aada =_adbg +1,_ebc +bm1 .RowStride ,_aada +bm2 .RowStride {for _gdcc =0;
_gdcc < _defd ;_gdcc ++{_dcbg =bm1 .Data [_ebc +_gdcc ];_ebce =bm2 .Data [_aada +_gdcc ]<<uint (-_fagd );_ebce |=bm2 .Data [_aada +_gdcc +1]>>uint (8+_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];};if _acfg >=_aeaf {return true ,nil ;}else if _cagc :=_acfg +downcount [_adbg ]-_ddba ;
_cagc < _aeaf {return false ,nil ;};};case _beada >=_defd :for _adbg =_gaafe ;_adbg < _egbb ;_adbg ,_ebc ,_aada =_adbg +1,_ebc +bm1 .RowStride ,_aada +bm2 .RowStride {for _gdcc =0;_gdcc < _defd ;_gdcc ++{_dcbg =bm1 .Data [_ebc +_gdcc ];_ebce =bm2 .Data [_aada +_gdcc ]<<uint (-_fagd );
_ebce |=bm2 .Data [_aada +_gdcc +1]>>uint (8+_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];};_dcbg =bm1 .Data [_ebc +_gdcc ];_ebce =bm2 .Data [_aada +_gdcc ]<<uint (-_fagd );_bfdd =_dcbg &_ebce ;_acfg +=tab [_bfdd ];if _acfg >=_aeaf {return true ,nil ;
}else if _acfg +downcount [_adbg ]-_ddba < _aeaf {return false ,nil ;};};};_aabf :=float32 (_acfg )*float32 (_acfg )/(float32 (area1 )*float32 (area2 ));if _aabf >=scoreThreshold {_eg .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_acfg ,_aeaf ,_aabf ,scoreThreshold );
};return false ,nil ;};func (_defad *Points )AddPoint (x ,y float32 ){*_defad =append (*_defad ,Point {x ,y })};func _ddc (_gaa ,_afb *Bitmap ,_ddcg int ,_fgc []byte ,_cff int )(_dbd error ){const _dga ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_ebaa ,_gag ,_cdf ,_efaf ,_bg ,_cda ,_cee ,_cebb int ;_ead ,_fbg ,_bea ,_bdd uint32 ;_gcf ,_caac byte ;_dgaf uint16 ;);_ddd :=make ([]byte ,4);_gcff :=make ([]byte ,4);for _cdf =0;_cdf < _gaa .Height -1;_cdf ,_efaf =_cdf +2,_efaf +1{_ebaa =_cdf *_gaa .RowStride ;
_gag =_efaf *_afb .RowStride ;for _bg ,_cda =0,0;_bg < _cff ;_bg ,_cda =_bg +4,_cda +1{for _cee =0;_cee < 4;_cee ++{_cebb =_ebaa +_bg +_cee ;if _cebb <=len (_gaa .Data )-1&&_cebb < _ebaa +_gaa .RowStride {_ddd [_cee ]=_gaa .Data [_cebb ];}else {_ddd [_cee ]=0x00;
};_cebb =_ebaa +_gaa .RowStride +_bg +_cee ;if _cebb <=len (_gaa .Data )-1&&_cebb < _ebaa +(2*_gaa .RowStride ){_gcff [_cee ]=_gaa .Data [_cebb ];}else {_gcff [_cee ]=0x00;};};_ead =_b .BigEndian .Uint32 (_ddd );_fbg =_b .BigEndian .Uint32 (_gcff );_bea =_ead &_fbg ;
_bea |=_bea <<1;_bdd =_ead |_fbg ;_bdd &=_bdd <<1;_fbg =_bea |_bdd ;_fbg &=0xaaaaaaaa;_ead =_fbg |(_fbg <<7);_gcf =byte (_ead >>24);_caac =byte ((_ead >>8)&0xff);_cebb =_gag +_cda ;if _cebb +1==len (_afb .Data )-1||_cebb +1>=_gag +_afb .RowStride {if _dbd =_afb .SetByte (_cebb ,_fgc [_gcf ]);
_dbd !=nil {return _dd .Wrapf (_dbd ,_dga ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cebb );};}else {_dgaf =(uint16 (_fgc [_gcf ])<<8)|uint16 (_fgc [_caac ]);if _dbd =_afb .setTwoBytes (_cebb ,_dgaf );_dbd !=nil {return _dd .Wrapf (_dbd ,_dga ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cebb );
};_cda ++;};};};return nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_egba :=make ([]Point ,len (bms ));_caagd :=_aff ();_fdcb :=_afg ();var _aacg error ;for _ffed ,_acfde :=range bms {_egba [_ffed ],_aacg =_acfde .centroid (_caagd ,_fdcb );if _aacg !=nil {return nil ,_aacg ;
};};_gefd :=Points (_egba );return &_gefd ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_faac *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _aggg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_faac .IntSlice .Size (){return 0,_dd .Errorf (_aggg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_faac .XAtIndex (i )),nil ;};func (_cbdd *Bitmap )InverseData (){_cbdd .inverseData ()};func (_gfefa *ClassedPoints )SortByY (){_gfefa ._edae =_gfefa .ySortFunction ();_c .Sort (_gfefa )};func ClipBoxToRectangle (box *_eb .Rectangle ,wi ,hi int )(_agag *_eb .Rectangle ,_gfaa error ){const _bddg ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_dd .Error (_bddg ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_dd .Error (_bddg ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_agba :=*box ;_agag =&_agba ;if _agag .Min .X < 0{_agag .Max .X +=_agag .Min .X ;_agag .Min .X =0;};if _agag .Min .Y < 0{_agag .Max .Y +=_agag .Min .Y ;_agag .Min .Y =0;};if _agag .Max .X > wi {_agag .Max .X =wi ;};if _agag .Max .Y > hi {_agag .Max .Y =hi ;
};return _agag ,nil ;};type SelectionValue int ;type Getter interface{GetBitmap ()*Bitmap ;};func _gcb ()(_gba [256]uint32 ){for _acc :=0;_acc < 256;_acc ++{if _acc &0x01!=0{_gba [_acc ]|=0xf;};if _acc &0x02!=0{_gba [_acc ]|=0xf0;};if _acc &0x04!=0{_gba [_acc ]|=0xf00;
};if _acc &0x08!=0{_gba [_acc ]|=0xf000;};if _acc &0x10!=0{_gba [_acc ]|=0xf0000;};if _acc &0x20!=0{_gba [_acc ]|=0xf00000;};if _acc &0x40!=0{_gba [_acc ]|=0xf000000;};if _acc &0x80!=0{_gba [_acc ]|=0xf0000000;};};return _gba ;};func _bfbc (_ebde ,_fadfg *Bitmap ,_gcbe ,_bcb ,_ccab uint ,_fdfa ,_fagg int ,_egcb bool ,_cbg ,_cecb int )error {for _caacg :=_fdfa ;
_caacg < _fagg ;_caacg ++{if _cbg +1< len (_ebde .Data ){_ecac :=_caacg +1==_fagg ;_bgde ,_aadf :=_ebde .GetByte (_cbg );if _aadf !=nil {return _aadf ;};_cbg ++;_bgde <<=_gcbe ;_dbgg ,_aadf :=_ebde .GetByte (_cbg );if _aadf !=nil {return _aadf ;};_dbgg >>=_bcb ;
_fcdb :=_bgde |_dbgg ;if _ecac &&!_egcb {_fcdb =_cbda (_ccab ,_fcdb );};_aadf =_fadfg .SetByte (_cecb ,_fcdb );if _aadf !=nil {return _aadf ;};_cecb ++;if _ecac &&_egcb {_cdbb ,_dbgbg :=_ebde .GetByte (_cbg );if _dbgbg !=nil {return _dbgbg ;};_cdbb <<=_gcbe ;
_fcdb =_cbda (_ccab ,_cdbb );if _dbgbg =_fadfg .SetByte (_cecb ,_fcdb );_dbgbg !=nil {return _dbgbg ;};};continue ;};_eccb ,_fefa :=_ebde .GetByte (_cbg );if _fefa !=nil {_eg .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_cbg ,_fefa );
return _fefa ;};_eccb <<=_gcbe ;_cbg ++;_fefa =_fadfg .SetByte (_cecb ,_eccb );if _fefa !=nil {return _fefa ;};_cecb ++;};return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gcad float64 ,_ffb error ){const _dab ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_dd .Error (_dab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_dd .Error (_dab ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_dd .Error (_dab ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_bbcg ,_gaeb :=bm1 .Width ,bm1 .Height ;_fdga ,_egb :=bm2 .Width ,bm2 .Height ;
_aacf :=_dgfe (_bbcg -_fdga );if _aacf > maxDiffW {return 0,nil ;};_deff :=_dgfe (_gaeb -_egb );if _deff > maxDiffH {return 0,nil ;};var _gbafa ,_caacf int ;if delX >=0{_gbafa =int (delX +0.5);}else {_gbafa =int (delX -0.5);};if delY >=0{_caacf =int (delY +0.5);
}else {_caacf =int (delY -0.5);};_gbe :=_gecc (_caacf ,0);_ccdff :=_bbf (_egb +_caacf ,_gaeb );_bba :=bm1 .RowStride *_gbe ;_bcbg :=bm2 .RowStride *(_gbe -_caacf );_degg :=_gecc (_gbafa ,0);_cddb :=_bbf (_fdga +_gbafa ,_bbcg );_dfe :=bm2 .RowStride ;var _fadb ,_egfa int ;
if _gbafa >=8{_fadb =_gbafa >>3;_bba +=_fadb ;_degg -=_fadb <<3;_cddb -=_fadb <<3;_gbafa &=7;}else if _gbafa <=-8{_egfa =-((_gbafa +7)>>3);_bcbg +=_egfa ;_dfe -=_egfa ;_gbafa +=_egfa <<3;};if _degg >=_cddb ||_gbe >=_ccdff {return 0,nil ;};_bdc :=(_cddb +7)>>3;
var (_dgba ,_aed ,_ebec byte ;_afeg ,_gcced ,_bgba int ;);switch {case _gbafa ==0:for _bgba =_gbe ;_bgba < _ccdff ;_bgba ,_bba ,_bcbg =_bgba +1,_bba +bm1 .RowStride ,_bcbg +bm2 .RowStride {for _gcced =0;_gcced < _bdc ;_gcced ++{_ebec =bm1 .Data [_bba +_gcced ]&bm2 .Data [_bcbg +_gcced ];
_afeg +=tab [_ebec ];};};case _gbafa > 0:if _dfe < _bdc {for _bgba =_gbe ;_bgba < _ccdff ;_bgba ,_bba ,_bcbg =_bgba +1,_bba +bm1 .RowStride ,_bcbg +bm2 .RowStride {_dgba ,_aed =bm1 .Data [_bba ],bm2 .Data [_bcbg ]>>uint (_gbafa );_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];
for _gcced =1;_gcced < _dfe ;_gcced ++{_dgba ,_aed =bm1 .Data [_bba +_gcced ],(bm2 .Data [_bcbg +_gcced ]>>uint (_gbafa ))|(bm2 .Data [_bcbg +_gcced -1]<<uint (8-_gbafa ));_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];};_dgba =bm1 .Data [_bba +_gcced ];_aed =bm2 .Data [_bcbg +_gcced -1]<<uint (8-_gbafa );
_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];};}else {for _bgba =_gbe ;_bgba < _ccdff ;_bgba ,_bba ,_bcbg =_bgba +1,_bba +bm1 .RowStride ,_bcbg +bm2 .RowStride {_dgba ,_aed =bm1 .Data [_bba ],bm2 .Data [_bcbg ]>>uint (_gbafa );_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];
for _gcced =1;_gcced < _bdc ;_gcced ++{_dgba =bm1 .Data [_bba +_gcced ];_aed =(bm2 .Data [_bcbg +_gcced ]>>uint (_gbafa ))|(bm2 .Data [_bcbg +_gcced -1]<<uint (8-_gbafa ));_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];};};};default:if _bdc < _dfe {for _bgba =_gbe ;
_bgba < _ccdff ;_bgba ,_bba ,_bcbg =_bgba +1,_bba +bm1 .RowStride ,_bcbg +bm2 .RowStride {for _gcced =0;_gcced < _bdc ;_gcced ++{_dgba =bm1 .Data [_bba +_gcced ];_aed =bm2 .Data [_bcbg +_gcced ]<<uint (-_gbafa );_aed |=bm2 .Data [_bcbg +_gcced +1]>>uint (8+_gbafa );
_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];};};}else {for _bgba =_gbe ;_bgba < _ccdff ;_bgba ,_bba ,_bcbg =_bgba +1,_bba +bm1 .RowStride ,_bcbg +bm2 .RowStride {for _gcced =0;_gcced < _bdc -1;_gcced ++{_dgba =bm1 .Data [_bba +_gcced ];_aed =bm2 .Data [_bcbg +_gcced ]<<uint (-_gbafa );
_aed |=bm2 .Data [_bcbg +_gcced +1]>>uint (8+_gbafa );_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];};_dgba =bm1 .Data [_bba +_gcced ];_aed =bm2 .Data [_bcbg +_gcced ]<<uint (-_gbafa );_ebec =_dgba &_aed ;_afeg +=tab [_ebec ];};};};_gcad =float64 (_afeg )*float64 (_afeg )/(float64 (area1 )*float64 (area2 ));
return _gcad ,nil ;};func (_gcae *Bitmap )setAll ()error {_bcgb :=_cdcb (_gcae ,0,0,_gcae .Width ,_gcae .Height ,PixSet ,nil ,0,0);if _bcgb !=nil {return _dd .Wrap (_bcgb ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};const (CmbOpOr CombinationOperator =iota ;
CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _gdfc (d ,s ,sel )};func (_fdad *Selection )setOrigin (_aedf ,_fbcb int ){_fdad .Cy ,_fdad .Cx =_aedf ,_fbcb };func (_eebd *ClassedPoints )SortByX (){_eebd ._edae =_eebd .xSortFunction ();
_c .Sort (_eebd )};func TstNSymbol (t *_g .T ,scale ...int )*Bitmap {_bgga ,_fbbg :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_db .NoError (t ,_fbbg );return TstGetScaledSymbol (t ,_bgga ,scale ...);};func (_bace *ClassedPoints )Len ()int {return _bace .IntSlice .Size ()};
func _aa (_fc ,_bc *Bitmap )(_cg error ){const _ff ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_da :=_bc .RowStride ;_efb :=_fc .RowStride ;_efg :=_bc .RowStride *4-_fc .RowStride ;var (_egee ,_cbe byte ;
_cea uint32 ;_cge ,_ddg ,_gc ,_ede ,_ca ,_cd ,_fe int ;);for _gc =0;_gc < _bc .Height ;_gc ++{_cge =_gc *_da ;_ddg =4*_gc *_efb ;for _ede =0;_ede < _da ;_ede ++{_egee =_bc .Data [_cge +_ede ];_cea =_dgfd [_egee ];_cd =_ddg +_ede *4;if _efg !=0&&(_ede +1)*4> _fc .RowStride {for _ca =_efg ;
_ca > 0;_ca --{_cbe =byte ((_cea >>uint (_ca *8))&0xff);_fe =_cd +(_efg -_ca );if _cg =_fc .SetByte (_fe ,_cbe );_cg !=nil {return _dd .Wrapf (_cg ,_ff ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_ca );
};};}else if _cg =_fc .setFourBytes (_cd ,_cea );_cg !=nil {return _dd .Wrap (_cg ,_ff ,"");};if _cg =_fc .setFourBytes (_ddg +_ede *4,_dgfd [_bc .Data [_cge +_ede ]]);_cg !=nil {return _dd .Wrap (_cg ,_ff ,"");};};for _ca =1;_ca < 4;_ca ++{for _ede =0;
_ede < _efb ;_ede ++{if _cg =_fc .SetByte (_ddg +_ca *_efb +_ede ,_fc .Data [_ddg +_ede ]);_cg !=nil {return _dd .Wrapf (_cg ,_ff ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_ca ,_ede );
};};};};return nil ;};func (_addab *Selection )findMaxTranslations ()(_fecg ,_fdac ,_gedc ,_gdea int ){for _cdcf :=0;_cdcf < _addab .Height ;_cdcf ++{for _ccdg :=0;_ccdg < _addab .Width ;_ccdg ++{if _addab .Data [_cdcf ][_ccdg ]==SelHit {_fecg =_gecc (_fecg ,_addab .Cx -_ccdg );
_fdac =_gecc (_fdac ,_addab .Cy -_cdcf );_gedc =_gecc (_gedc ,_ccdg -_addab .Cx );_gdea =_gecc (_gdea ,_cdcf -_addab .Cy );};};};return _fecg ,_fdac ,_gedc ,_gdea ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;
PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;
PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;
);func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func _aff ()[]int {_adeee :=make ([]int ,256);_adeee [0]=0;_adeee [1]=7;var _aaefd int ;for _aaefd =2;_aaefd < 4;_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -2]+6;
};for _aaefd =4;_aaefd < 8;_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -4]+5;};for _aaefd =8;_aaefd < 16;_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -8]+4;};for _aaefd =16;_aaefd < 32;_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -16]+3;};for _aaefd =32;_aaefd < 64;
_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -32]+2;};for _aaefd =64;_aaefd < 128;_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -64]+1;};for _aaefd =128;_aaefd < 256;_aaefd ++{_adeee [_aaefd ]=_adeee [_aaefd -128];};return _adeee ;};func (_ffc *Bitmap )CreateTemplate ()*Bitmap {return _ffc .createTemplate ()};
func (_bead *Bitmap )SetPixel (x ,y int ,pixel byte )error {_dbc :=_bead .GetByteIndex (x ,y );if _dbc > len (_bead .Data )-1{return _dd .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_dbc );
};_ddff :=_bead .GetBitOffset (x );_cgd :=uint (7-_ddff );_dge :=_bead .Data [_dbc ];var _bffc byte ;if pixel ==1{_bffc =_dge |(pixel &0x01<<_cgd );}else {_bffc =_dge &^(1<<_cgd );};_bead .Data [_dbc ]=_bffc ;return nil ;};func _edcab (_cade ,_ffae *Bitmap ,_fdgc ,_cfc ,_eaga ,_cdfe ,_bdf int ,_ecec CombinationOperator )error {var _agd int ;
_cbdf :=func (){_agd ++;_eaga +=_ffae .RowStride ;_cdfe +=_cade .RowStride ;_bdf +=_cade .RowStride };for _agd =_fdgc ;_agd < _cfc ;_cbdf (){_cfcc :=_eaga ;for _effdf :=_cdfe ;_effdf <=_bdf ;_effdf ++{_edfe ,_bgg :=_ffae .GetByte (_cfcc );if _bgg !=nil {return _bgg ;
};_ded ,_bgg :=_cade .GetByte (_effdf );if _bgg !=nil {return _bgg ;};if _bgg =_ffae .SetByte (_cfcc ,_fadf (_edfe ,_ded ,_ecec ));_bgg !=nil {return _bgg ;};_cfcc ++;};};return nil ;};func (_dagc *byWidth )Swap (i ,j int ){_dagc .Values [i ],_dagc .Values [j ]=_dagc .Values [j ],_dagc .Values [i ];
if _dagc .Boxes !=nil {_dagc .Boxes [i ],_dagc .Boxes [j ]=_dagc .Boxes [j ],_dagc .Boxes [i ];};};func (_ebd *Bitmap )Equals (s *Bitmap )bool {if len (_ebd .Data )!=len (s .Data )||_ebd .Width !=s .Width ||_ebd .Height !=s .Height {return false ;};for _gffa :=0;
_gffa < _ebd .Height ;_gffa ++{_gec :=_gffa *_ebd .RowStride ;for _ccdf :=0;_ccdf < _ebd .RowStride ;_ccdf ++{if _ebd .Data [_gec +_ccdf ]!=s .Data [_gec +_ccdf ]{return false ;};};};return true ;};func _bbdca (_edee ,_eegb int ,_bgf string )*Selection {_ecfb :=&Selection {Height :_edee ,Width :_eegb ,Name :_bgf };
_ecfb .Data =make ([][]SelectionValue ,_edee );for _bbdg :=0;_bbdg < _edee ;_bbdg ++{_ecfb .Data [_bbdg ]=make ([]SelectionValue ,_eegb );};return _ecfb ;};func (_bbec *Bitmaps )selectByIndexes (_facdf []int )(*Bitmaps ,error ){_dfcd :=&Bitmaps {};for _ ,_ggfb :=range _facdf {_bfcf ,_ccaa :=_bbec .GetBitmap (_ggfb );
if _ccaa !=nil {return nil ,_dd .Wrap (_ccaa ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_dfcd .AddBitmap (_bfcf );};return _dfcd ,nil ;};func (_dffc *Bitmap )GetByteIndex (x ,y int )int {return y *_dffc .RowStride +(x >>3)};
func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _cagd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_cbgb ,_gfge :=p1 .Width ,p1 .Height ;_cgdf ,_dba :=p3 .Width ,p3 .Height ;if _f .Abs (_cbgb -_cgdf )> maxDiffW {return false ,nil ;
};if _f .Abs (_gfge -_dba )> maxDiffH {return false ,nil ;};_acdga :=int (delX +_f .Sign (delX )*0.5);_bdde :=int (delY +_f .Sign (delY )*0.5);var _ggd error ;_gcgf :=p1 .CreateTemplate ();if _ggd =_gcgf .RasterOperation (0,0,_cbgb ,_gfge ,PixSrc ,p1 ,0,0);
_ggd !=nil {return false ,_dd .Wrap (_ggd ,_cagd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ggd =_gcgf .RasterOperation (_acdga ,_bdde ,_cbgb ,_gfge ,PixNotSrcAndDst ,p4 ,0,0);_ggd !=nil {return false ,_dd .Wrap (_ggd ,_cagd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _gcgf .Zero (){return false ,nil ;};if _ggd =_gcgf .RasterOperation (_acdga ,_bdde ,_cgdf ,_dba ,PixSrc ,p3 ,0,0);_ggd !=nil {return false ,_dd .Wrap (_ggd ,_cagd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ggd =_gcgf .RasterOperation (0,0,_cgdf ,_dba ,PixNotSrcAndDst ,p2 ,0,0);
_ggd !=nil {return false ,_dd .Wrap (_ggd ,_cagd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _gcgf .Zero (),nil ;};func _bdea (_agfd *_f .Stack )(_gede *fillSegment ,_fdeg error ){const _ddbb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _agfd ==nil {return nil ,_dd .Error (_ddbb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _agfd .Aux ==nil {return nil ,_dd .Error (_ddbb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_ggcf ,_abfa :=_agfd .Pop ();if !_abfa {return nil ,nil ;};_fecf ,_abfa :=_ggcf .(*fillSegment );if !_abfa {return nil ,_dd .Error (_ddbb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_gede =&fillSegment {_fecf ._gbega ,_fecf ._aafeg ,_fecf ._gcbd +_fecf ._edfaa ,_fecf ._edfaa };_agfd .Aux .Push (_fecf );return _gede ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_cced bool ,_fccc error ){const _bcc ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_aagec ,_acfd :=p1 .Width ,p1 .Height ;_fgdb ,_bdec :=p3 .Width ,p3 .Height ;if _f .Abs (_aagec -_fgdb )> maxDiffW {return false ,nil ;};if _f .Abs (_acfd -_bdec )> maxDiffH {return false ,nil ;};_gfea :=int (float32 (area1 )*(1.0-rank )+0.5);_bfea :=int (float32 (area3 )*(1.0-rank )+0.5);
var _fcbd ,_cbeb int ;if delX >=0{_fcbd =int (delX +0.5);}else {_fcbd =int (delX -0.5);};if delY >=0{_cbeb =int (delY +0.5);}else {_cbeb =int (delY -0.5);};_ddgbb :=p1 .CreateTemplate ();if _fccc =_ddgbb .RasterOperation (0,0,_aagec ,_acfd ,PixSrc ,p1 ,0,0);
_fccc !=nil {return false ,_dd .Wrap (_fccc ,_bcc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fccc =_ddgbb .RasterOperation (_fcbd ,_cbeb ,_aagec ,_acfd ,PixNotSrcAndDst ,p4 ,0,0);_fccc !=nil {return false ,_dd .Wrap (_fccc ,_bcc ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_cced ,_fccc =_ddgbb .ThresholdPixelSum (_gfea ,tab8 );if _fccc !=nil {return false ,_dd .Wrap (_fccc ,_bcc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _cced {return false ,nil ;};if _fccc =_ddgbb .RasterOperation (_fcbd ,_cbeb ,_fgdb ,_bdec ,PixSrc ,p3 ,0,0);
_fccc !=nil {return false ,_dd .Wrap (_fccc ,_bcc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fccc =_ddgbb .RasterOperation (0,0,_fgdb ,_bdec ,PixNotSrcAndDst ,p2 ,0,0);_fccc !=nil {return false ,_dd .Wrap (_fccc ,_bcc ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_cced ,_fccc =_ddgbb .ThresholdPixelSum (_bfea ,tab8 );if _fccc !=nil {return false ,_dd .Wrap (_fccc ,_bcc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_cced ,nil ;};var _ebab =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_cfcb Points )Get (i int )(Point ,error ){if i > len (_cfcb )-1{return Point {},_dd .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cfcb [i ],nil ;};func _aage (_aca ,_gbag int )*Bitmap {return &Bitmap {Width :_aca ,Height :_gbag ,RowStride :(_aca +7)>>3};};type byWidth Bitmaps ;func (_eacde *ClassedPoints )YAtIndex (i int )float32 {return (*_eacde .Points )[_eacde .IntSlice [i ]].Y };
func TstWordBitmap (t *_g .T ,scale ...int )*Bitmap {_ebadf :=1;if len (scale )> 0{_ebadf =scale [0];};_eagcg :=3;_fbbf :=9+7+15+2*_eagcg ;_egd :=5+_eagcg +5;_ffef :=New (_fbbf *_ebadf ,_egd *_ebadf );_gfga :=&Bitmaps {};var _afeb *int ;_eagcg *=_ebadf ;
_acbg :=0;_afeb =&_acbg ;_dfga :=0;_bcde :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );_bcde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,_eagcg );_bcde =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );
_bcde =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,_eagcg );_bcde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );_bcde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );
_bcde =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,0);*_afeb =0;_dfga =5*_ebadf +_eagcg ;_bcde =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );_bcde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,_eagcg );
_bcde =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );_bcde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );_bcde =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );
_bcde =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,1*_ebadf );_bcde =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gfga ,_bcde ,_afeb ,_dfga ,0);TstWriteSymbols (t ,_gfga ,_ffef );return _ffef ;};var _cdfb [256]uint8 ;func (_bdfa *ClassedPoints )validateIntSlice ()error {const _gbec ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_fece :=range _bdfa .IntSlice {if _fece >=(_bdfa .Points .Size ()){return _dd .Errorf (_gbec ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_fece ,_bdfa .Points .Size ());
};};return nil ;};func (_bbadf *BitmapsArray )GetBox (i int )(*_eb .Rectangle ,error ){const _fecb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _bbadf ==nil {return nil ,_dd .Error (_fecb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_bbadf .Boxes )-1{return nil ,_dd .Errorf (_fecb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _bbadf .Boxes [i ],nil ;};func _dff (_eea ,_bde *Bitmap ,_fgbb int ,_edca []byte ,_fge int )(_bff error ){const _fcd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_bga ,_bcg ,_cdb ,_aee ,_eaa ,_bef ,_fcff ,_gcd int ;_fac ,_dec ,_gdc ,_eed uint32 ;_fbec ,_afbc byte ;_beff uint16 ;);_fag :=make ([]byte ,4);_ccd :=make ([]byte ,4);for _cdb =0;_cdb < _eea .Height -1;_cdb ,_aee =_cdb +2,_aee +1{_bga =_cdb *_eea .RowStride ;
_bcg =_aee *_bde .RowStride ;for _eaa ,_bef =0,0;_eaa < _fge ;_eaa ,_bef =_eaa +4,_bef +1{for _fcff =0;_fcff < 4;_fcff ++{_gcd =_bga +_eaa +_fcff ;if _gcd <=len (_eea .Data )-1&&_gcd < _bga +_eea .RowStride {_fag [_fcff ]=_eea .Data [_gcd ];}else {_fag [_fcff ]=0x00;
};_gcd =_bga +_eea .RowStride +_eaa +_fcff ;if _gcd <=len (_eea .Data )-1&&_gcd < _bga +(2*_eea .RowStride ){_ccd [_fcff ]=_eea .Data [_gcd ];}else {_ccd [_fcff ]=0x00;};};_fac =_b .BigEndian .Uint32 (_fag );_dec =_b .BigEndian .Uint32 (_ccd );_gdc =_fac &_dec ;
_gdc |=_gdc <<1;_eed =_fac |_dec ;_eed &=_eed <<1;_dec =_gdc &_eed ;_dec &=0xaaaaaaaa;_fac =_dec |(_dec <<7);_fbec =byte (_fac >>24);_afbc =byte ((_fac >>8)&0xff);_gcd =_bcg +_bef ;if _gcd +1==len (_bde .Data )-1||_gcd +1>=_bcg +_bde .RowStride {if _bff =_bde .SetByte (_gcd ,_edca [_fbec ]);
_bff !=nil {return _dd .Wrapf (_bff ,_fcd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gcd );};}else {_beff =(uint16 (_edca [_fbec ])<<8)|uint16 (_edca [_afbc ]);if _bff =_bde .setTwoBytes (_gcd ,_beff );_bff !=nil {return _dd .Wrapf (_bff ,_fcd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gcd );
};_bef ++;};};};return nil ;};func _cfdc (_fdbcd ,_edgc *Bitmap ,_bcbc ,_cgec int )(*Bitmap ,error ){const _bagb ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _edgc ==nil {return nil ,_dd .Error (_bagb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _bcbc < 1&&_cgec < 1{return nil ,_dd .Error (_bagb ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _bcbc ==1&&_cgec ==1{return _edgc .Copy (),nil ;};if _bcbc ==1||_cgec ==1{var _eggdg error ;
_ffbc :=SelCreateBrick (_cgec ,_bcbc ,_cgec /2,_bcbc /2,SelHit );_fdbcd ,_eggdg =_cdda (_fdbcd ,_edgc ,_ffbc );if _eggdg !=nil {return nil ,_dd .Wrap (_eggdg ,_bagb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fdbcd ,nil ;};_gdab :=SelCreateBrick (1,_bcbc ,0,_bcbc /2,SelHit );_ebaac :=SelCreateBrick (_cgec ,1,_cgec /2,0,SelHit );_fdbe ,_fdgca :=_aaae (nil ,_edgc ,_gdab );if _fdgca !=nil {return nil ,_dd .Wrap (_fdgca ,_bagb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fdbcd ,_fdgca =_aaae (_fdbcd ,_fdbe ,_ebaac );if _fdgca !=nil {return nil ,_dd .Wrap (_fdgca ,_bagb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_fdgca =_gdfc (_fdbe ,_fdbcd ,_gdab );if _fdgca !=nil {return nil ,_dd .Wrap (_fdgca ,_bagb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_fdgca =_gdfc (_fdbcd ,_fdbe ,_ebaac );if _fdgca !=nil {return nil ,_dd .Wrap (_fdgca ,_bagb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fdbcd ,nil ;};func (_eagc *byHeight )Less (i ,j int )bool {return _eagc .Values [i ].Height < _eagc .Values [j ].Height };
func (_bcaa *Bitmaps )AddBox (box *_eb .Rectangle ){_bcaa .Boxes =append (_bcaa .Boxes ,box )};func _cdcb (_bfae *Bitmap ,_gffd ,_acdgd ,_ddgbc ,_geab int ,_fcaa RasterOperator ,_bffce *Bitmap ,_gfcb ,_gaafc int )error {const _gebg ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _bfae ==nil {return _dd .Error (_gebg ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _fcaa ==PixDst {return nil ;};switch _fcaa {case PixClr ,PixSet ,PixNotDst :_fagc (_bfae ,_gffd ,_acdgd ,_ddgbc ,_geab ,_fcaa );
return nil ;};if _bffce ==nil {_eg .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _dd .Error (_gebg ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gcdga :=_gcaf (_bfae ,_gffd ,_acdgd ,_ddgbc ,_geab ,_fcaa ,_bffce ,_gfcb ,_gaafc );_gcdga !=nil {return _dd .Wrap (_gcdga ,_gebg ,"");
};return nil ;};func _gecc (_afc ,_ggaa int )int {if _afc > _ggaa {return _afc ;};return _ggaa ;};func (_feafe *Bitmap )setEightPartlyBytes (_cgge ,_bcdg int ,_agffe uint64 )(_gaad error ){var (_acec byte ;_ddcgg int ;);const _beb ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _fff :=1;_fff <=_bcdg ;_fff ++{_ddcgg =64-_fff *8;_acec =byte (_agffe >>uint (_ddcgg )&0xff);_eg .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_acec ,_cgge ,_cgge +_fff -1,_bcdg ,_ddcgg );
if _gaad =_feafe .SetByte (_cgge +_fff -1,_acec );_gaad !=nil {return _dd .Wrap (_gaad ,_beb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_beage :=_feafe .RowStride *8-_feafe .Width ;if _beage ==0{return nil ;};_ddcgg -=8;_acec =byte (_agffe >>uint (_ddcgg )&0xff)<<uint (_beage );
if _gaad =_feafe .SetByte (_cgge +_bcdg ,_acec );_gaad !=nil {return _dd .Wrap (_gaad ,_beb ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_geca *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_bda bool ,_abgab error ){const _gbb ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_afg ();};_def :=_geca .Width >>3;_gfcc :=_geca .Width &7;_gab :=byte (0xff<<uint (8-_gfcc ));var (_deea ,_ddgg ,_eef ,_gdf int ;_gdga byte ;);for _deea =0;_deea < _geca .Height ;_deea ++{_eef =_geca .RowStride *_deea ;for _ddgg =0;
_ddgg < _def ;_ddgg ++{_gdga ,_abgab =_geca .GetByte (_eef +_ddgg );if _abgab !=nil {return false ,_dd .Wrap (_abgab ,_gbb ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_gdf +=tab8 [_gdga ];};if _gfcc !=0{_gdga ,_abgab =_geca .GetByte (_eef +_ddgg );
if _abgab !=nil {return false ,_dd .Wrap (_abgab ,_gbb ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_gdga &=_gab ;_gdf +=tab8 [_gdga ];};if _gdf > thresh {return true ,nil ;};};return _bda ,nil ;};func TstRSymbol (t *_g .T ,scale ...int )*Bitmap {_faecd ,_afbfd :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_db .NoError (t ,_afbfd );return TstGetScaledSymbol (t ,_faecd ,scale ...);};func _aeg (_caa *Bitmap ,_efbf ...int )(_fgb *Bitmap ,_abb error ){const _ecf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _caa ==nil {return nil ,_dd .Error (_ecf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_efbf )==0||len (_efbf )> 4{return nil ,_dd .Error (_ecf ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _efbf [0]<=0{_eg .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_fgb ,_abb =_ecb (nil ,_caa );if _abb !=nil {return nil ,_dd .Wrap (_abb ,_ecf ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _fgb ,nil ;};_gda :=_cbb ();_fgb =_caa ;for _acb ,_cgb :=range _efbf {if _cgb <=0{break ;};_fgb ,_abb =_ga (_fgb ,_cgb ,_gda );if _abb !=nil {return nil ,_dd .Wrapf (_abb ,_ecf ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_acb );
};};return _fgb ,nil ;};func (_dfdb *Bitmap )Copy ()*Bitmap {_eddg :=make ([]byte ,len (_dfdb .Data ));copy (_eddg ,_dfdb .Data );return &Bitmap {Width :_dfdb .Width ,Height :_dfdb .Height ,RowStride :_dfdb .RowStride ,Data :_eddg ,Color :_dfdb .Color ,Text :_dfdb .Text ,BitmapNumber :_dfdb .BitmapNumber ,Special :_dfdb .Special };
};type byHeight Bitmaps ;func _aggf (_fcgf *Bitmap ,_bcgbd *_f .Stack ,_gdbbc ,_aedd ,_gfed int )(_cfbb *_eb .Rectangle ,_addac error ){const _dacf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _fcgf ==nil {return nil ,_dd .Error (_dacf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _bcgbd ==nil {return nil ,_dd .Error (_dacf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _gfed {case 4:if _cfbb ,_addac =_adeg (_fcgf ,_bcgbd ,_gdbbc ,_aedd );_addac !=nil {return nil ,_dd .Wrap (_addac ,_dacf ,"");
};return _cfbb ,nil ;case 8:if _cfbb ,_addac =_agaf (_fcgf ,_bcgbd ,_gdbbc ,_aedd );_addac !=nil {return nil ,_dd .Wrap (_addac ,_dacf ,"");};return _cfbb ,nil ;default:return nil ,_dd .Errorf (_dacf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_gfed );
};};func TstOSymbol (t *_g .T ,scale ...int )*Bitmap {_dgcf ,_fdgda :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_db .NoError (t ,_fdgda );return TstGetScaledSymbol (t ,_dgcf ,scale ...);};func (_eagg *Bitmap )setTwoBytes (_dcc int ,_ace uint16 )error {if _dcc +1> len (_eagg .Data )-1{return _dd .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_dcc );
};_eagg .Data [_dcc ]=byte ((_ace &0xff00)>>8);_eagg .Data [_dcc +1]=byte (_ace &0xff);return nil ;};func _gbcb (_dgaef *Bitmap ,_cbfe ,_gfdc ,_gebd ,_cbae int ,_ccabc RasterOperator ,_efeg *Bitmap ,_cgfg ,_agad int )error {var (_fcbb bool ;_egag bool ;
_dbcd byte ;_ecae int ;_cfa int ;_acbf int ;_cdca int ;_cdge bool ;_ceag int ;_fbdc int ;_ccg int ;_becea bool ;_aecd byte ;_edef int ;_agbbc int ;_eeef int ;_fcg byte ;_cgfa int ;_aabff int ;_egeg uint ;_gdde uint ;_ggaae byte ;_eaegc shift ;_efeb bool ;
_ddbdc bool ;_dffcd ,_gaef int ;);if _cgfg &7!=0{_aabff =8-(_cgfg &7);};if _cbfe &7!=0{_cfa =8-(_cbfe &7);};if _aabff ==0&&_cfa ==0{_ggaae =_dcgdg [0];}else {if _cfa > _aabff {_egeg =uint (_cfa -_aabff );}else {_egeg =uint (8-(_aabff -_cfa ));};_gdde =8-_egeg ;
_ggaae =_dcgdg [_egeg ];};if (_cbfe &7)!=0{_fcbb =true ;_ecae =8-(_cbfe &7);_dbcd =_dcgdg [_ecae ];_acbf =_dgaef .RowStride *_gfdc +(_cbfe >>3);_cdca =_efeg .RowStride *_agad +(_cgfg >>3);_cgfa =8-(_cgfg &7);if _ecae > _cgfa {_eaegc =_facg ;if _gebd >=_aabff {_efeb =true ;
};}else {_eaegc =_fdce ;};};if _gebd < _ecae {_egag =true ;_dbcd &=_ecga [8-_ecae +_gebd ];};if !_egag {_ceag =(_gebd -_ecae )>>3;if _ceag !=0{_cdge =true ;_fbdc =_dgaef .RowStride *_gfdc +((_cbfe +_cfa )>>3);_ccg =_efeg .RowStride *_agad +((_cgfg +_cfa )>>3);
};};_edef =(_cbfe +_gebd )&7;if !(_egag ||_edef ==0){_becea =true ;_aecd =_ecga [_edef ];_agbbc =_dgaef .RowStride *_gfdc +((_cbfe +_cfa )>>3)+_ceag ;_eeef =_efeg .RowStride *_agad +((_cgfg +_cfa )>>3)+_ceag ;if _edef > int (_gdde ){_ddbdc =true ;};};switch _ccabc {case PixSrc :if _fcbb {for _dffcd =0;
_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],_fcg ,_dbcd );
_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]=_fcg ;
};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],_fcg ,_aecd );
_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixNotSrc :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;
};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],^_fcg ,_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );
_dgaef .Data [_fbdc +_gaef ]=^_fcg ;};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};
_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],^_fcg ,_aecd );_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixSrcOrDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );
};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],_fcg |_dgaef .Data [_acbf ],_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;
_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]|=_fcg ;};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;
_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],_fcg |_dgaef .Data [_agbbc ],_aecd );_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;
};};case PixSrcAndDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],_fcg &_dgaef .Data [_acbf ],_dbcd );
_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]&=_fcg ;
};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],_fcg &_dgaef .Data [_agbbc ],_aecd );
_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixSrcXorDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};
}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],_fcg ^_dgaef .Data [_acbf ],_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;
_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]^=_fcg ;};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;
if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],_fcg ^_dgaef .Data [_agbbc ],_aecd );_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixNotSrcOrDst :if _fcbb {for _dffcd =0;
_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],^_fcg |_dgaef .Data [_acbf ],_dbcd );
_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]|=^_fcg ;
};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],^_fcg |_dgaef .Data [_agbbc ],_aecd );
_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixNotSrcAndDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );
};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],^_fcg &_dgaef .Data [_acbf ],_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;
_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]&=^_fcg ;};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;
_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],^_fcg &_dgaef .Data [_agbbc ],_aecd );_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;
};};case PixSrcOrNotDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],_fcg |^_dgaef .Data [_acbf ],_dbcd );
_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]=_fcg |^_dgaef .Data [_fbdc +_gaef ];
};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],_fcg |^_dgaef .Data [_agbbc ],_aecd );
_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixSrcAndNotDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );
};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],_fcg &^_dgaef .Data [_acbf ],_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;
_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]=_fcg &^_dgaef .Data [_fbdc +_gaef ];};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;
_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],_fcg &^_dgaef .Data [_agbbc ],_aecd );_agbbc +=_dgaef .RowStride ;
_eeef +=_efeg .RowStride ;};};case PixNotPixSrcOrDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;
};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],^(_fcg |_dgaef .Data [_acbf ]),_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );
_dgaef .Data [_fbdc +_gaef ]=^(_fcg |_dgaef .Data [_fbdc +_gaef ]);};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );
};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],^(_fcg |_dgaef .Data [_agbbc ]),_aecd );_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixNotPixSrcAndDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;
if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],^(_fcg &_dgaef .Data [_acbf ]),_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;
};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]=^(_fcg &_dgaef .Data [_fbdc +_gaef ]);
};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],^(_fcg &_dgaef .Data [_agbbc ]),_aecd );
_agbbc +=_dgaef .RowStride ;_eeef +=_efeg .RowStride ;};};case PixNotPixSrcXorDst :if _fcbb {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{if _eaegc ==_facg {_fcg =_efeg .Data [_cdca ]<<_egeg ;if _efeb {_fcg =_ggga (_fcg ,_efeg .Data [_cdca +1]>>_gdde ,_ggaae );
};}else {_fcg =_efeg .Data [_cdca ]>>_gdde ;};_dgaef .Data [_acbf ]=_ggga (_dgaef .Data [_acbf ],^(_fcg ^_dgaef .Data [_acbf ]),_dbcd );_acbf +=_dgaef .RowStride ;_cdca +=_efeg .RowStride ;};};if _cdge {for _dffcd =0;_dffcd < _cbae ;_dffcd ++{for _gaef =0;
_gaef < _ceag ;_gaef ++{_fcg =_ggga (_efeg .Data [_ccg +_gaef ]<<_egeg ,_efeg .Data [_ccg +_gaef +1]>>_gdde ,_ggaae );_dgaef .Data [_fbdc +_gaef ]=^(_fcg ^_dgaef .Data [_fbdc +_gaef ]);};_fbdc +=_dgaef .RowStride ;_ccg +=_efeg .RowStride ;};};if _becea {for _dffcd =0;
_dffcd < _cbae ;_dffcd ++{_fcg =_efeg .Data [_eeef ]<<_egeg ;if _ddbdc {_fcg =_ggga (_fcg ,_efeg .Data [_eeef +1]>>_gdde ,_ggaae );};_dgaef .Data [_agbbc ]=_ggga (_dgaef .Data [_agbbc ],^(_fcg ^_dgaef .Data [_agbbc ]),_aecd );_agbbc +=_dgaef .RowStride ;
_eeef +=_efeg .RowStride ;};};default:_eg .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ccabc );return _dd .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_dbgbb Points )Size ()int {return len (_dbgbb )};var (_ecga =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_dcgdg =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _fadf (_fdgd ,_agga byte ,_fab CombinationOperator )byte {switch _fab {case CmbOpOr :return _agga |_fdgd ;
case CmbOpAnd :return _agga &_fdgd ;case CmbOpXor :return _agga ^_fdgd ;case CmbOpXNor :return ^(_agga ^_fdgd );case CmbOpNot :return ^(_agga );default:return _agga ;};};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;
Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_ebcg Points )XSorter ()func (_dadc ,_cfca int )bool {return func (_febce ,_cggf int )bool {return _ebcg [_febce ].X < _ebcg [_cggf ].X };};func TstWSymbol (t *_g .T ,scale ...int )*Bitmap {_afea ,_bfbfe :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});
_db .NoError (t ,_bfbfe );return TstGetScaledSymbol (t ,_afea ,scale ...);};func (_faaec *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _bcfd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _faaec ==nil {return nil ,_dd .Error (_bcfd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_dd .Error (_bcfd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_ebcd :=len (_faaec .Values );_ecca :=&Bitmaps {Values :make ([]*Bitmap ,_ebcd ),Boxes :make ([]*_eb .Rectangle ,_ebcd )};var (_fcgfg ,_adcf *Bitmap ;_dcaac *_eb .Rectangle ;_geeg error ;);for _ecfge :=0;_ecfge < _ebcd ;_ecfge ++{if _fcgfg ,_geeg =_faaec .GetBitmap (_ecfge );
_geeg !=nil {return nil ,_dd .Wrap (_geeg ,_bcfd ,"");};if _dcaac ,_geeg =_faaec .GetBox (_ecfge );_geeg !=nil {return nil ,_dd .Wrap (_geeg ,_bcfd ,"");};if _adcf ,_geeg =s .clipRectangle (_dcaac ,nil );_geeg !=nil {return nil ,_dd .Wrap (_geeg ,_bcfd ,"");
};if _adcf ,_geeg =_adcf .And (_fcgfg );_geeg !=nil {return nil ,_dd .Wrap (_geeg ,_bcfd ,"");};_ecca .Values [_ecfge ]=_adcf ;_ecca .Boxes [_ecfge ]=_dcaac ;};return _ecca ,nil ;};func (_efc *ClassedPoints )Less (i ,j int )bool {return _efc ._edae (i ,j )};
func _bdag (_fegf ,_eabf ,_afd *Bitmap )(*Bitmap ,error ){const _cgc ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _eabf ==nil {return nil ,_dd .Error (_cgc ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _afd ==nil {return nil ,_dd .Error (_cgc ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _fegf ==_afd {return nil ,_dd .Error (_cgc ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_eabf .SizesEqual (_afd ){_eg .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cgc );
};var _ffca error ;if _fegf ,_ffca =_ecb (_fegf ,_eabf );_ffca !=nil {return nil ,_dd .Wrap (_ffca ,_cgc ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ffca =_fegf .RasterOperation (0,0,_fegf .Width ,_fegf .Height ,PixSrcXorDst ,_afd ,0,0);
_ffca !=nil {return nil ,_dd .Wrap (_ffca ,_cgc ,"");};return _fegf ,nil ;};func _cbfg (_bcge *Bitmap ,_caggg ,_fgfa int ,_ecagf ,_dgfa int ,_gge RasterOperator ){var (_ffeca int ;_dfcf byte ;_ecfc ,_ceeb int ;_ecfg int ;);_dcea :=_ecagf >>3;_cdcde :=_ecagf &7;
if _cdcde > 0{_dfcf =_ecga [_cdcde ];};_ffeca =_bcge .RowStride *_fgfa +(_caggg >>3);switch _gge {case PixClr :for _ecfc =0;_ecfc < _dgfa ;_ecfc ++{_ecfg =_ffeca +_ecfc *_bcge .RowStride ;for _ceeb =0;_ceeb < _dcea ;_ceeb ++{_bcge .Data [_ecfg ]=0x0;_ecfg ++;
};if _cdcde > 0{_bcge .Data [_ecfg ]=_ggga (_bcge .Data [_ecfg ],0x0,_dfcf );};};case PixSet :for _ecfc =0;_ecfc < _dgfa ;_ecfc ++{_ecfg =_ffeca +_ecfc *_bcge .RowStride ;for _ceeb =0;_ceeb < _dcea ;_ceeb ++{_bcge .Data [_ecfg ]=0xff;_ecfg ++;};if _cdcde > 0{_bcge .Data [_ecfg ]=_ggga (_bcge .Data [_ecfg ],0xff,_dfcf );
};};case PixNotDst :for _ecfc =0;_ecfc < _dgfa ;_ecfc ++{_ecfg =_ffeca +_ecfc *_bcge .RowStride ;for _ceeb =0;_ceeb < _dcea ;_ceeb ++{_bcge .Data [_ecfg ]=^_bcge .Data [_ecfg ];_ecfg ++;};if _cdcde > 0{_bcge .Data [_ecfg ]=_ggga (_bcge .Data [_ecfg ],^_bcge .Data [_ecfg ],_dfcf );
};};};};func TstFrameBitmap ()*Bitmap {return _fgabea .Copy ()};func _cbb ()(_gbaf []byte ){_gbaf =make ([]byte ,256);for _fad :=0;_fad < 256;_fad ++{_eca :=byte (_fad );_gbaf [_eca ]=(_eca &0x01)|((_eca &0x04)>>1)|((_eca &0x10)>>2)|((_eca &0x40)>>3)|((_eca &0x02)<<3)|((_eca &0x08)<<2)|((_eca &0x20)<<1)|(_eca &0x80);
};return _gbaf ;};func (_eac *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _eac .Copy (),nil ;};_fec ,_gdd :=_eac .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gdd !=nil {return nil ,_dd .Wrap (_gdd ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _fec ,nil ;};func _aaae (_fgea ,_fgab *Bitmap ,_gfef *Selection )(*Bitmap ,error ){const _eddb ="\u0065\u0072\u006fd\u0065";var (_debb error ;_eceac *Bitmap ;);_fgea ,_debb =_dbaff (_fgea ,_fgab ,_gfef ,&_eceac );if _debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"");
};if _debb =_fgea .setAll ();_debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"");};var _afdb SelectionValue ;for _acgc :=0;_acgc < _gfef .Height ;_acgc ++{for _bdcc :=0;_bdcc < _gfef .Width ;_bdcc ++{_afdb =_gfef .Data [_acgc ][_bdcc ];if _afdb ==SelHit {_debb =_cdcb (_fgea ,_gfef .Cx -_bdcc ,_gfef .Cy -_acgc ,_fgab .Width ,_fgab .Height ,PixSrcAndDst ,_eceac ,0,0);
if _debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fgea ,nil ;};_baag ,_afed ,_bcdaa ,_adeeb :=_gfef .findMaxTranslations ();if _baag > 0{if _debb =_fgea .RasterOperation (0,0,_baag ,_fgab .Height ,PixClr ,nil ,0,0);
_debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _bcdaa > 0{if _debb =_fgea .RasterOperation (_fgab .Width -_bcdaa ,0,_bcdaa ,_fgab .Height ,PixClr ,nil ,0,0);_debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _afed > 0{if _debb =_fgea .RasterOperation (0,0,_fgab .Width ,_afed ,PixClr ,nil ,0,0);_debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _adeeb > 0{if _debb =_fgea .RasterOperation (0,_fgab .Height -_adeeb ,_fgab .Width ,_adeeb ,PixClr ,nil ,0,0);
_debb !=nil {return nil ,_dd .Wrap (_debb ,_eddb ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fgea ,nil ;};func _aegd (_cbcgf ,_ceafa *Bitmap ,_dbcg ,_fdba int )(_fbea error ){const _dcccc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_ggba ,_gggb ,_eaag ,_fgdd int ;_beffc ,_abec ,_deac ,_gfee ,_faef ,_bface ,_fadbf ,_dacd byte ;);for _ggba =0;_ggba < _dbcg ;_ggba ++{_eaag =_ggba *_cbcgf .RowStride ;_fgdd =_ggba *_ceafa .RowStride ;for _gggb =0;_gggb < _fdba ;_gggb ++{if _beffc ,_fbea =_cbcgf .GetByte (_eaag +_gggb );
_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _abec ,_fbea =_ceafa .GetByte (_fgdd +_gggb );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _ggba > 0{if _deac ,_fbea =_cbcgf .GetByte (_eaag -_cbcgf .RowStride +_gggb );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_beffc |=_deac |(_deac <<1)|(_deac >>1);if _gggb > 0{if _dacd ,_fbea =_cbcgf .GetByte (_eaag -_cbcgf .RowStride +_gggb -1);
_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_beffc |=_dacd <<7;};if _gggb < _fdba -1{if _dacd ,_fbea =_cbcgf .GetByte (_eaag -_cbcgf .RowStride +_gggb +1);
_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_beffc |=_dacd >>7;};};if _gggb > 0{if _gfee ,_fbea =_cbcgf .GetByte (_eaag +_gggb -1);_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u006a\u0020\u003e \u0030");
};_beffc |=_gfee <<7;};_beffc &=_abec ;if _beffc ==0||^_beffc ==0{if _fbea =_cbcgf .SetByte (_eaag +_gggb ,_beffc );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");
};};for {_fadbf =_beffc ;_beffc =(_beffc |(_beffc >>1)|(_beffc <<1))&_abec ;if (_beffc ^_fadbf )==0{if _fbea =_cbcgf .SetByte (_eaag +_gggb ,_beffc );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _ggba =_dbcg -1;_ggba >=0;_ggba --{_eaag =_ggba *_cbcgf .RowStride ;_fgdd =_ggba *_ceafa .RowStride ;for _gggb =_fdba -1;_gggb >=0;_gggb --{if _beffc ,_fbea =_cbcgf .GetByte (_eaag +_gggb );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _abec ,_fbea =_ceafa .GetByte (_fgdd +_gggb );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ggba < _dbcg -1{if _faef ,_fbea =_cbcgf .GetByte (_eaag +_cbcgf .RowStride +_gggb );
_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_beffc |=_faef |(_faef <<1)|_faef >>1;if _gggb > 0{if _dacd ,_fbea =_cbcgf .GetByte (_eaag +_cbcgf .RowStride +_gggb -1);
_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_beffc |=_dacd <<7;};if _gggb < _fdba -1{if _dacd ,_fbea =_cbcgf .GetByte (_eaag +_cbcgf .RowStride +_gggb +1);
_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_beffc |=_dacd >>7;};};if _gggb < _fdba -1{if _bface ,_fbea =_cbcgf .GetByte (_eaag +_gggb +1);_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_beffc |=_bface >>7;};_beffc &=_abec ;if _beffc ==0||(^_beffc )==0{if _fbea =_cbcgf .SetByte (_eaag +_gggb ,_beffc );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};
for {_fadbf =_beffc ;_beffc =(_beffc |(_beffc >>1)|(_beffc <<1))&_abec ;if (_beffc ^_fadbf )==0{if _fbea =_cbcgf .SetByte (_eaag +_gggb ,_beffc );_fbea !=nil {return _dd .Wrap (_fbea ,_dcccc ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_bfgcf *Bitmap )connComponentsBitmapsBB (_bage *Bitmaps ,_febc int )(_dbfc *Boxes ,_fbdga error ){const _cbcc ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _febc !=4&&_febc !=8{return nil ,_dd .Error (_cbcc ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _bage ==nil {return nil ,_dd .Error (_cbcc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_bage .Values )> 0{return nil ,_dd .Error (_cbcc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _bfgcf .Zero (){return &Boxes {},nil ;
};var (_caadb ,_ebdd ,_aafc ,_bgbb *Bitmap ;);_bfgcf .setPadBits (0);if _caadb ,_fbdga =_ecb (nil ,_bfgcf );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"\u0062\u006d\u0031");};if _ebdd ,_fbdga =_ecb (nil ,_bfgcf );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"\u0062\u006d\u0032");
};_ebad :=&_f .Stack {};_ebad .Aux =&_f .Stack {};_dbfc =&Boxes {};var (_adgb ,_fbed int ;_dagd _eb .Point ;_bcdf bool ;_geec *_eb .Rectangle ;);for {if _dagd ,_bcdf ,_fbdga =_caadb .nextOnPixel (_adgb ,_fbed );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"");
};if !_bcdf {break ;};if _geec ,_fbdga =_aggf (_caadb ,_ebad ,_dagd .X ,_dagd .Y ,_febc );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"");};if _fbdga =_dbfc .Add (_geec );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"");};if _aafc ,_fbdga =_caadb .clipRectangle (_geec ,nil );
_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"\u0062\u006d\u0033");};if _bgbb ,_fbdga =_ebdd .clipRectangle (_geec ,nil );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"\u0062\u006d\u0034");};if _ ,_fbdga =_bdag (_aafc ,_aafc ,_bgbb );_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _fbdga =_ebdd .RasterOperation (_geec .Min .X ,_geec .Min .Y ,_geec .Dx (),_geec .Dy (),PixSrcXorDst ,_aafc ,0,0);_fbdga !=nil {return nil ,_dd .Wrap (_fbdga ,_cbcc ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_bage .AddBitmap (_aafc );_adgb =_dagd .X ;_fbed =_dagd .Y ;};_bage .Boxes =*_dbfc ;return _dbfc ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _ecb (d ,s )};func (_ddde *Bitmap )inverseData (){if _ffa :=_ddde .RasterOperation (0,0,_ddde .Width ,_ddde .Height ,PixNotDst ,nil ,0,0);
_ffa !=nil {_eg .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ffa );};if _ddde .Color ==Chocolate {_ddde .Color =Vanilla ;}else {_ddde .Color =Chocolate ;};};type MorphOperation int ;
func (_bcf *Bitmap )addBorderGeneral (_gddf ,_bbgb ,_geg ,_fcb int ,_eeff int )(*Bitmap ,error ){const _cdaa ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gddf < 0||_bbgb < 0||_geg < 0||_fcb < 0{return nil ,_dd .Error (_cdaa ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_fbda ,_afa :=_bcf .Width ,_bcf .Height ;_bab :=_fbda +_gddf +_bbgb ;_egg :=_afa +_geg +_fcb ;_fecd :=New (_bab ,_egg );_fecd .Color =_bcf .Color ;_fage :=PixClr ;if _eeff > 0{_fage =PixSet ;};_aae :=_fecd .RasterOperation (0,0,_gddf ,_egg ,_fage ,nil ,0,0);
if _aae !=nil {return nil ,_dd .Wrap (_aae ,_cdaa ,"\u006c\u0065\u0066\u0074");};_aae =_fecd .RasterOperation (_bab -_bbgb ,0,_bbgb ,_egg ,_fage ,nil ,0,0);if _aae !=nil {return nil ,_dd .Wrap (_aae ,_cdaa ,"\u0072\u0069\u0067h\u0074");};_aae =_fecd .RasterOperation (0,0,_bab ,_geg ,_fage ,nil ,0,0);
if _aae !=nil {return nil ,_dd .Wrap (_aae ,_cdaa ,"\u0074\u006f\u0070");};_aae =_fecd .RasterOperation (0,_egg -_fcb ,_bab ,_fcb ,_fage ,nil ,0,0);if _aae !=nil {return nil ,_dd .Wrap (_aae ,_cdaa ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_aae =_fecd .RasterOperation (_gddf ,_geg ,_fbda ,_afa ,PixSrc ,_bcf ,0,0);
if _aae !=nil {return nil ,_dd .Wrap (_aae ,_cdaa ,"\u0063\u006f\u0070\u0079");};return _fecd ,nil ;};func (_ccba *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _dgeb ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_ccba .Values )==0{return nil ,_dd .Error (_dgeb ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_eceb :=&BitmapsArray {};_ccba .SortByWidth ();_bceg :=-1;_acca :=-1;for _gccf :=0;_gccf < len (_ccba .Values );_gccf ++{_cdccb :=_ccba .Values [_gccf ].Width ;if _cdccb > _bceg {_bceg =_cdccb ;_acca ++;_eceb .Values =append (_eceb .Values ,&Bitmaps {});
};_eceb .Values [_acca ].AddBitmap (_ccba .Values [_gccf ]);};return _eceb ,nil ;};func (_eaae *BitmapsArray )AddBitmaps (bm *Bitmaps ){_eaae .Values =append (_eaae .Values ,bm )};func TstFrameBitmapData ()[]byte {return _fgabea .Data };func (_gaff *Bitmap )SetPadBits (value int ){_gaff .setPadBits (value )};
func (_accfd Points )GetGeometry (i int )(_eecc ,_gaga float32 ,_acga error ){if i > len (_accfd )-1{return 0,0,_dd .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_cbbc :=_accfd [i ];return _cbbc .X ,_cbbc .Y ,nil ;};func (_fgca *Bitmap )String ()string {var _abga ="\u000a";for _cfd :=0;_cfd < _fgca .Height ;_cfd ++{var _feb string ;for _fgba :=0;_fgba < _fgca .Width ;_fgba ++{_eab :=_fgca .GetPixel (_fgba ,_cfd );
if _eab {_feb +="\u0031";}else {_feb +="\u0030";};};_abga +=_feb +"\u000a";};return _abga ;};func (_gdbc *Bitmap )addPadBits ()(_dcg error ){const _bbge ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_beaf :=_gdbc .Width %8;if _beaf ==0{return nil ;};_babg :=_gdbc .Width /8;_gfda :=_fd .NewReader (_gdbc .Data );_eaaf :=make ([]byte ,_gdbc .Height *_gdbc .RowStride );_bbe :=_fd .NewWriterMSB (_eaaf );_egad :=make ([]byte ,_babg );var (_caba int ;_fdc uint64 ;
);for _caba =0;_caba < _gdbc .Height ;_caba ++{if _ ,_dcg =_gfda .Read (_egad );_dcg !=nil {return _dd .Wrap (_dcg ,_bbge ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_dcg =_bbe .Write (_egad );_dcg !=nil {return _dd .Wrap (_dcg ,_bbge ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _fdc ,_dcg =_gfda .ReadBits (byte (_beaf ));_dcg !=nil {return _dd .Wrap (_dcg ,_bbge ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _dcg =_bbe .WriteByte (byte (_fdc )<<uint (8-_beaf ));_dcg !=nil {return _dd .Wrap (_dcg ,_bbge ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_gdbc .Data =_bbe .Data ();return nil ;};var (_fgabea *Bitmap ;_agbf *Bitmap ;);func TstWriteSymbols (t *_g .T ,bms *Bitmaps ,src *Bitmap ){for _gbff :=0;_gbff < bms .Size ();_gbff ++{_bgded :=bms .Values [_gbff ];_efaa :=bms .Boxes [_gbff ];_cfec :=src .RasterOperation (_efaa .Min .X ,_efaa .Min .Y ,_bgded .Width ,_bgded .Height ,PixSrc ,_bgded ,0,0);
_db .NoError (t ,_cfec );};};func (_feba *ClassedPoints )XAtIndex (i int )float32 {return (*_feba .Points )[_feba .IntSlice [i ]].X };func (_afe *Bitmap )CountPixels ()int {return _afe .countPixels ()};func (_ccea *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _dfbcf ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_bbaea ,_bbfd :=_ccea .selectByIndexes (idx );if _bbfd !=nil {return nil ,_dd .Wrap (_bbfd ,_dfbcf ,"");};return _bbaea ,nil ;};func (_bfeg *ClassedPoints )xSortFunction ()func (_gggca int ,_fcfb int )bool {return func (_baab ,_aagg int )bool {return _bfeg .XAtIndex (_baab )< _bfeg .XAtIndex (_aagg )};
};func (_eafe *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _dcgdc ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_eafe .Values )==0{return nil ,_dd .Error (_dcgdc ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_gcbae :=&BitmapsArray {};_eafe .SortByHeight ();_bced :=-1;_aeged :=-1;for _ggdbb :=0;_ggdbb < len (_eafe .Values );_ggdbb ++{_cgcd :=_eafe .Values [_ggdbb ].Height ;if _cgcd > _bced {_bced =_cgcd ;_aeged ++;_gcbae .Values =append (_gcbae .Values ,&Bitmaps {});
};_gcbae .Values [_aeged ].AddBitmap (_eafe .Values [_ggdbb ]);};return _gcbae ,nil ;};func (_edd *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _edd .addBorderGeneral (left ,right ,top ,bot ,val );};type Points []Point ;
func (_ebda *Bitmap )GetBitOffset (x int )int {return x &0x07};func _dedd (_badb ,_ffde *Bitmap ,_egbc *Selection )(*Bitmap ,error ){const _dccf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _dgef ,_gcbg int ;
if _ffde ==nil {return nil ,_dd .Error (_dccf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _egbc ==nil {return nil ,_dd .Error (_dccf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_dgef =_egbc .Width ;_gcbg =_egbc .Height ;if _dgef ==0||_gcbg ==0{return nil ,_dd .Error (_dccf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _badb ==nil {return _ffde .createTemplate (),nil ;};if _aadfe :=_badb .resizeImageData (_ffde );
_aadfe !=nil {return nil ,_aadfe ;};return _badb ,nil ;};func (_bacab *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _cbbf ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _gcfc :=_bacab .validateIntSlice ();_gcfc !=nil {return nil ,_dd .Wrap (_gcfc ,_cbbf ,"");};if _bacab .IntSlice .Size ()==0{return nil ,_dd .Error (_cbbf ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_bacab .SortByY ();var (_dabe []*ClassedPoints ;_gfba int ;);_bfac :=-1;var _agcde *ClassedPoints ;for _dcce :=0;_dcce < len (_bacab .IntSlice );_dcce ++{_gfba =int (_bacab .YAtIndex (_dcce ));if _gfba !=_bfac {_agcde =&ClassedPoints {Points :_bacab .Points };
_bfac =_gfba ;_dabe =append (_dabe ,_agcde );};_agcde .IntSlice =append (_agcde .IntSlice ,_bacab .IntSlice [_dcce ]);};for _ ,_bcbce :=range _dabe {_bcbce .SortByX ();};return _dabe ,nil ;};func (_acgd *Bitmaps )WidthSorter ()func (_bdfg ,_afbf int )bool {return func (_ceafg ,_cdbfe int )bool {return _acgd .Values [_ceafg ].Width < _acgd .Values [_cdbfe ].Width };
};func (_ebcfe *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _agee ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _ebcfe ==nil {return nil ,_dd .Error (_agee ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_ebcfe .Values )-1{return nil ,_dd .Errorf (_agee ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ebcfe .Values [i ],nil ;};func _ecce (_gcce ,_fgg *Bitmap ,_bdbgf ,_abgc ,_afcc ,_fffa ,_beba ,_eeda ,_ggg ,_feag int ,_fgcf CombinationOperator ,_gbdb int )error {var _adfd int ;
_gdfb :=func (){_adfd ++;_afcc +=_fgg .RowStride ;_fffa +=_gcce .RowStride ;_beba +=_gcce .RowStride };for _adfd =_bdbgf ;_adfd < _abgc ;_gdfb (){var _cbcd uint16 ;_ecea :=_afcc ;for _gbfg :=_fffa ;_gbfg <=_beba ;_gbfg ++{_efgc ,_cdee :=_fgg .GetByte (_ecea );
if _cdee !=nil {return _cdee ;};_ddgb ,_cdee :=_gcce .GetByte (_gbfg );if _cdee !=nil {return _cdee ;};_cbcd =(_cbcd |(uint16 (_ddgb )&0xff))<<uint (_feag );_ddgb =byte (_cbcd >>8);if _cdee =_fgg .SetByte (_ecea ,_fadf (_efgc ,_ddgb ,_fgcf ));_cdee !=nil {return _cdee ;
};_ecea ++;_cbcd <<=uint (_ggg );if _gbfg ==_beba {_ddgb =byte (_cbcd >>(8-uint8 (_feag )));if _gbdb !=0{_ddgb =_cbda (uint (8+_eeda ),_ddgb );};_efgc ,_cdee =_fgg .GetByte (_ecea );if _cdee !=nil {return _cdee ;};if _cdee =_fgg .SetByte (_ecea ,_fadf (_efgc ,_ddgb ,_fgcf ));
_cdee !=nil {return _cdee ;};};};};return nil ;};func (_abf *Bitmap )clearAll ()error {return _abf .RasterOperation (0,0,_abf .Width ,_abf .Height ,PixClr ,nil ,0,0);};func (_gbegc *Bitmaps )AddBitmap (bm *Bitmap ){_gbegc .Values =append (_gbegc .Values ,bm )};
func (_ffaef *byWidth )Len ()int {return len (_ffaef .Values )};func (_ddb *Bitmap )GetChocolateData ()[]byte {if _ddb .Color ==Vanilla {_ddb .inverseData ();};return _ddb .Data ;};func _fa (_gb ,_bbg *Bitmap )(_ae error ){const _bfd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_fb :=_bbg .RowStride ;_df :=_gb .RowStride ;var _fbf ,_adf ,_ddf ,_fdae ,_efe int ;for _ddf =0;_ddf < _bbg .Height ;_ddf ++{_fbf =_ddf *_fb ;_adf =8*_ddf *_df ;for _fdae =0;_fdae < _fb ;_fdae ++{if _ae =_gb .setEightBytes (_adf +_fdae *8,_gfgd [_bbg .Data [_fbf +_fdae ]]);
_ae !=nil {return _dd .Wrap (_ae ,_bfd ,"");};};for _efe =1;_efe < 8;_efe ++{for _fdae =0;_fdae < _df ;_fdae ++{if _ae =_gb .SetByte (_adf +_efe *_df +_fdae ,_gb .Data [_adf +_fdae ]);_ae !=nil {return _dd .Wrap (_ae ,_bfd ,"");};};};};return nil ;};func (_gac *Bitmap )GetPixel (x ,y int )bool {_cgg :=_gac .GetByteIndex (x ,y );
_acbe :=_gac .GetBitOffset (x );_aab :=uint (7-_acbe );if _cgg > len (_gac .Data )-1{_eg .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_gac );
return false ;};if (_gac .Data [_cgg ]>>_aab )&0x01>=1{return true ;};return false ;};const (Vanilla Color =iota ;Chocolate ;);type shift int ;func _dcgc (_deag *Bitmap ,_dbcc ,_faggc ,_bgeb ,_gdcg int ,_eaed RasterOperator ,_egcc *Bitmap ,_gada ,_gbbc int )error {var (_fbef bool ;
_ceaf bool ;_dddbg int ;_cgee int ;_deeg int ;_dgae bool ;_bdfb byte ;_dadg int ;_dce int ;_bbdd int ;_effg ,_cdfg int ;);_cgef :=8-(_dbcc &7);_abgg :=_dcgdg [_cgef ];_eefe :=_deag .RowStride *_faggc +(_dbcc >>3);_bggb :=_egcc .RowStride *_gbbc +(_gada >>3);
if _bgeb < _cgef {_fbef =true ;_abgg &=_ecga [8-_cgef +_bgeb ];};if !_fbef {_dddbg =(_bgeb -_cgef )>>3;if _dddbg > 0{_ceaf =true ;_cgee =_eefe +1;_deeg =_bggb +1;};};_dadg =(_dbcc +_bgeb )&7;if !(_fbef ||_dadg ==0){_dgae =true ;_bdfb =_ecga [_dadg ];_dce =_eefe +1+_dddbg ;
_bbdd =_bggb +1+_dddbg ;};switch _eaed {case PixSrc :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],_egcc .Data [_bggb ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;};if _ceaf {for _effg =0;_effg < _gdcg ;
_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]=_egcc .Data [_deeg +_cdfg ];};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],_egcc .Data [_bbdd ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixNotSrc :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],^_egcc .Data [_bggb ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;};if _ceaf {for _effg =0;
_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]=^_egcc .Data [_deeg +_cdfg ];};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],^_egcc .Data [_bbdd ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixSrcOrDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],_egcc .Data [_bggb ]|_deag .Data [_eefe ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]|=_egcc .Data [_deeg +_cdfg ];};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],_egcc .Data [_bbdd ]|_deag .Data [_dce ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixSrcAndDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],_egcc .Data [_bggb ]&_deag .Data [_eefe ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]&=_egcc .Data [_deeg +_cdfg ];};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],_egcc .Data [_bbdd ]&_deag .Data [_dce ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixSrcXorDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],_egcc .Data [_bggb ]^_deag .Data [_eefe ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]^=_egcc .Data [_deeg +_cdfg ];};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],_egcc .Data [_bbdd ]^_deag .Data [_dce ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixNotSrcOrDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],^(_egcc .Data [_bggb ])|_deag .Data [_eefe ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]|=^(_egcc .Data [_deeg +_cdfg ]);};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],^(_egcc .Data [_bbdd ])|_deag .Data [_dce ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixNotSrcAndDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],^(_egcc .Data [_bggb ])&_deag .Data [_eefe ],_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]&=^_egcc .Data [_deeg +_cdfg ];};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],^(_egcc .Data [_bbdd ])&_deag .Data [_dce ],_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixSrcOrNotDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],_egcc .Data [_bggb ]|^(_deag .Data [_eefe ]),_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]=_egcc .Data [_deeg +_cdfg ]|^(_deag .Data [_cgee +_cdfg ]);};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;
_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],_egcc .Data [_bbdd ]|^(_deag .Data [_dce ]),_bdfb );_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixSrcAndNotDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],_egcc .Data [_bggb ]&^(_deag .Data [_eefe ]),_abgg );
_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]=_egcc .Data [_deeg +_cdfg ]&^(_deag .Data [_cgee +_cdfg ]);};_cgee +=_deag .RowStride ;
_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],_egcc .Data [_bbdd ]&^(_deag .Data [_dce ]),_bdfb );_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixNotPixSrcOrDst :for _effg =0;
_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],^(_egcc .Data [_bggb ]|_deag .Data [_eefe ]),_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;
_cdfg ++{_deag .Data [_cgee +_cdfg ]=^(_egcc .Data [_deeg +_cdfg ]|_deag .Data [_cgee +_cdfg ]);};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],^(_egcc .Data [_bbdd ]|_deag .Data [_dce ]),_bdfb );
_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixNotPixSrcAndDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],^(_egcc .Data [_bggb ]&_deag .Data [_eefe ]),_abgg );_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;
};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]=^(_egcc .Data [_deeg +_cdfg ]&_deag .Data [_cgee +_cdfg ]);};_cgee +=_deag .RowStride ;_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;
_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],^(_egcc .Data [_bbdd ]&_deag .Data [_dce ]),_bdfb );_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};case PixNotPixSrcXorDst :for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_eefe ]=_ggga (_deag .Data [_eefe ],^(_egcc .Data [_bggb ]^_deag .Data [_eefe ]),_abgg );
_eefe +=_deag .RowStride ;_bggb +=_egcc .RowStride ;};if _ceaf {for _effg =0;_effg < _gdcg ;_effg ++{for _cdfg =0;_cdfg < _dddbg ;_cdfg ++{_deag .Data [_cgee +_cdfg ]=^(_egcc .Data [_deeg +_cdfg ]^_deag .Data [_cgee +_cdfg ]);};_cgee +=_deag .RowStride ;
_deeg +=_egcc .RowStride ;};};if _dgae {for _effg =0;_effg < _gdcg ;_effg ++{_deag .Data [_dce ]=_ggga (_deag .Data [_dce ],^(_egcc .Data [_bbdd ]^_deag .Data [_dce ]),_bdfb );_dce +=_deag .RowStride ;_bbdd +=_egcc .RowStride ;};};default:_eg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_eaed );
return _dd .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};const _adca =5000;func (_aggad *byWidth )Less (i ,j int )bool {return _aggad .Values [i ].Width < _aggad .Values [j ].Width };func (_cba *Bitmap )nextOnPixelLow (_dcfe ,_fcbaf ,_fde ,_efecb ,_bbcb int )(_gcba _eb .Point ,_bgd bool ,_cdecf error ){const _egcd ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_fgcd int ;_dbg byte ;);_abgd :=_bbcb *_fde ;_gbca :=_abgd +(_efecb /8);if _dbg ,_cdecf =_cba .GetByte (_gbca );_cdecf !=nil {return _gcba ,false ,_dd .Wrap (_cdecf ,_egcd ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _dbg !=0{_beag :=_efecb -(_efecb %8)+7;for _fgcd =_efecb ;_fgcd <=_beag &&_fgcd < _dcfe ;_fgcd ++{if _cba .GetPixel (_fgcd ,_bbcb ){_gcba .X =_fgcd ;_gcba .Y =_bbcb ;return _gcba ,true ,nil ;};};};_ecff :=(_efecb /8)+1;_fgcd =8*_ecff ;var _aefe int ;
for _gbca =_abgd +_ecff ;_fgcd < _dcfe ;_gbca ,_fgcd =_gbca +1,_fgcd +8{if _dbg ,_cdecf =_cba .GetByte (_gbca );_cdecf !=nil {return _gcba ,false ,_dd .Wrap (_cdecf ,_egcd ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dbg ==0{continue ;};for _aefe =0;_aefe < 8&&_fgcd < _dcfe ;_aefe ,_fgcd =_aefe +1,_fgcd +1{if _cba .GetPixel (_fgcd ,_bbcb ){_gcba .X =_fgcd ;_gcba .Y =_bbcb ;return _gcba ,true ,nil ;};};};for _ddec :=_bbcb +1;_ddec < _fcbaf ;_ddec ++{_abgd =_ddec *_fde ;
for _gbca ,_fgcd =_abgd ,0;_fgcd < _dcfe ;_gbca ,_fgcd =_gbca +1,_fgcd +8{if _dbg ,_cdecf =_cba .GetByte (_gbca );_cdecf !=nil {return _gcba ,false ,_dd .Wrap (_cdecf ,_egcd ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");
};if _dbg ==0{continue ;};for _aefe =0;_aefe < 8&&_fgcd < _dcfe ;_aefe ,_fgcd =_aefe +1,_fgcd +1{if _cba .GetPixel (_fgcd ,_ddec ){_gcba .X =_fgcd ;_gcba .Y =_ddec ;return _gcba ,true ,nil ;};};};};return _gcba ,false ,nil ;};func TstWordBitmapWithSpaces (t *_g .T ,scale ...int )*Bitmap {_befffa :=1;
if len (scale )> 0{_befffa =scale [0];};_gacf :=3;_cfde :=9+7+15+2*_gacf +2*_gacf ;_aaefg :=5+_gacf +5+2*_gacf ;_dcec :=New (_cfde *_befffa ,_aaefg *_befffa );_bcee :=&Bitmaps {};var _gcdcc *int ;_gacf *=_befffa ;_gbadd :=_gacf ;_gcdcc =&_gbadd ;_fgeg :=_gacf ;
_cdfge :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,_gacf );_cdfge =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );
_cdfge =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,_gacf );_cdfge =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );
_cdfge =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,0);*_gcdcc =_gacf ;_fgeg =5*_befffa +_gacf ;_cdfge =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstRSymbol (t ,scale ...);
TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,_gacf );_cdfge =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstVSymbol (t ,scale ...);
TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,1*_befffa );_cdfge =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bcee ,_cdfge ,_gcdcc ,_fgeg ,0);TstWriteSymbols (t ,_bcee ,_dcec );
return _dcec ;};func _agcc (_cdcc ,_bgcf *Bitmap ,_ddeb *Selection )(*Bitmap ,error ){const _dbaf ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _gfdaa error ;if _cdcc ,_gfdaa =_dedd (_cdcc ,_bgcf ,_ddeb );_gfdaa !=nil {return nil ,_gfdaa ;
};_accf ,_gfdaa :=_gdfc (nil ,_bgcf ,_ddeb );if _gfdaa !=nil {return nil ,_dd .Wrap (_gfdaa ,_dbaf ,"");};if _ ,_gfdaa =_aaae (_cdcc ,_accf ,_ddeb );_gfdaa !=nil {return nil ,_dd .Wrap (_gfdaa ,_dbaf ,"");};return _cdcc ,nil ;};type Point struct{X ,Y float32 ;
};var MorphBC BoundaryCondition ;func TstVSymbol (t *_g .T ,scale ...int )*Bitmap {_bgcg ,_efbbcg :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_db .NoError (t ,_efbbcg );return TstGetScaledSymbol (t ,_bgcg ,scale ...);};func (_cce *Bitmap )GetByte (index int )(byte ,error ){if index > len (_cce .Data )-1||index < 0{return 0,_dd .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _cce .Data [index ],nil ;};func (_cfefd *Bitmaps )HeightSorter ()func (_cgfd ,_egfd int )bool {return func (_bfce ,_ffbgd int )bool {_beafg :=_cfefd .Values [_bfce ].Height < _cfefd .Values [_ffbgd ].Height ;_eg .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cfefd .Values [_bfce ].Height ,_cfefd .Values [_ffbgd ].Height ,_beafg );
return _beafg ;};};func (_afbe *Bitmap )GetUnpaddedData ()([]byte ,error ){_acd :=uint (_afbe .Width &0x07);if _acd ==0{return _afbe .Data ,nil ;};_dee :=_afbe .Width *_afbe .Height ;if _dee %8!=0{_dee >>=3;_dee ++;}else {_dee >>=3;};_cfe :=make ([]byte ,_dee );
_eeb :=_fd .NewWriterMSB (_cfe );const _abg ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _gfg :=0;_gfg < _afbe .Height ;_gfg ++{for _bfc :=0;_bfc < _afbe .RowStride ;_bfc ++{_gad :=_afbe .Data [_gfg *_afbe .RowStride +_bfc ];
if _bfc !=_afbe .RowStride -1{_adb :=_eeb .WriteByte (_gad );if _adb !=nil {return nil ,_dd .Wrap (_adb ,_abg ,"");};continue ;};for _gfd :=uint (0);_gfd < _acd ;_gfd ++{_dac :=_eeb .WriteBit (int (_gad >>(7-_gfd )&0x01));if _dac !=nil {return nil ,_dd .Wrap (_dac ,_abg ,"");
};};};};return _cfe ,nil ;};func TstImageBitmapInverseData ()[]byte {_faea :=_agbf .Copy ();_faea .InverseData ();return _faea .Data ;};func (_dgg *Bitmap )removeBorderGeneral (_gfdge ,_abfe ,_becf ,_faf int )(*Bitmap ,error ){const _eggd ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gfdge < 0||_abfe < 0||_becf < 0||_faf < 0{return nil ,_dd .Error (_eggd ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_feed ,_bbeg :=_dgg .Width ,_dgg .Height ;
_aefc :=_feed -_gfdge -_abfe ;_eebf :=_bbeg -_becf -_faf ;if _aefc <=0{return nil ,_dd .Errorf (_eggd ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_aefc );};if _eebf <=0{return nil ,_dd .Errorf (_eggd ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_eebf );
};_gffb :=New (_aefc ,_eebf );_gffb .Color =_dgg .Color ;_gacc :=_gffb .RasterOperation (0,0,_aefc ,_eebf ,PixSrc ,_dgg ,_gfdge ,_becf );if _gacc !=nil {return nil ,_dd .Wrap (_gacc ,_eggd ,"");};return _gffb ,nil ;};const (SelDontCare SelectionValue =iota ;
SelHit ;SelMiss ;);func TstGetScaledSymbol (t *_g .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_ceab ,_gcbge :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_db .NoError (t ,_gcbge );return _ceab ;};func (_dfbad *Bitmaps )Size ()int {return len (_dfbad .Values )};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _ddcd ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_dgf :=_aage (width ,height );_dgf .Data =data ;if _gcgc :=((width *height )+7)>>3;len (data )< _gcgc {return nil ,_dd .Errorf (_ddcd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_gcgc );
};if _fbde :=_dgf .addPadBits ();_fbde !=nil {return nil ,_dd .Wrap (_fbde ,_ddcd ,"");};return _dgf ,nil ;};func (_bbc *Bitmap )ClipRectangle (box *_eb .Rectangle )(_gdaf *Bitmap ,_cec *_eb .Rectangle ,_aafe error ){const _cffg ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_dd .Error (_cffg ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_gbd ,_gceb :=_bbc .Width ,_bbc .Height ;_aaa :=_eb .Rect (0,0,_gbd ,_gceb );if !box .Overlaps (_aaa ){return nil ,nil ,_dd .Error (_cffg ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_cab :=box .Intersect (_aaa );_dfdc ,_abbf :=_cab .Min .X ,_cab .Min .Y ;_daa ,_eeg :=_cab .Dx (),_cab .Dy ();_gdaf =New (_daa ,_eeg );_gdaf .Text =_bbc .Text ;if _aafe =_gdaf .RasterOperation (0,0,_daa ,_eeg ,PixSrc ,_bbc ,_dfdc ,_abbf );_aafe !=nil {return nil ,nil ,_dd .Wrap (_aafe ,_cffg ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_cec =&_cab ;return _gdaf ,_cec ,nil ;};func _gdfc (_gbg *Bitmap ,_eaff *Bitmap ,_gecg *Selection )(*Bitmap ,error ){var (_ebca *Bitmap ;_gffbf error ;);_gbg ,_gffbf =_dbaff (_gbg ,_eaff ,_gecg ,&_ebca );if _gffbf !=nil {return nil ,_gffbf ;};if _gffbf =_gbg .clearAll ();
_gffbf !=nil {return nil ,_gffbf ;};var _gffbg SelectionValue ;for _edcae :=0;_edcae < _gecg .Height ;_edcae ++{for _ggdb :=0;_ggdb < _gecg .Width ;_ggdb ++{_gffbg =_gecg .Data [_edcae ][_ggdb ];if _gffbg ==SelHit {if _gffbf =_gbg .RasterOperation (_ggdb -_gecg .Cx ,_edcae -_gecg .Cy ,_eaff .Width ,_eaff .Height ,PixSrcOrDst ,_ebca ,0,0);
_gffbf !=nil {return nil ,_gffbf ;};};};};return _gbg ,nil ;};func TstCSymbol (t *_g .T )*Bitmap {t .Helper ();_ggdc :=New (6,6);_db .NoError (t ,_ggdc .SetPixel (1,0,1));_db .NoError (t ,_ggdc .SetPixel (2,0,1));_db .NoError (t ,_ggdc .SetPixel (3,0,1));
_db .NoError (t ,_ggdc .SetPixel (4,0,1));_db .NoError (t ,_ggdc .SetPixel (0,1,1));_db .NoError (t ,_ggdc .SetPixel (5,1,1));_db .NoError (t ,_ggdc .SetPixel (0,2,1));_db .NoError (t ,_ggdc .SetPixel (0,3,1));_db .NoError (t ,_ggdc .SetPixel (0,4,1));
_db .NoError (t ,_ggdc .SetPixel (5,4,1));_db .NoError (t ,_ggdc .SetPixel (1,5,1));_db .NoError (t ,_ggdc .SetPixel (2,5,1));_db .NoError (t ,_ggdc .SetPixel (3,5,1));_db .NoError (t ,_ggdc .SetPixel (4,5,1));return _ggdc ;};type Bitmaps struct{Values []*Bitmap ;
Boxes []*_eb .Rectangle ;};func _cbda (_fegd uint ,_gea byte )byte {return _gea >>_fegd <<_fegd };func (_beg *Boxes )selectWithIndicator (_gaae *_f .NumSlice )(_dgfef *Boxes ,_fba error ){const _fcc ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _beg ==nil {return nil ,_dd .Error (_fcc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _gaae ==nil {return nil ,_dd .Error (_fcc ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_gaae )!=len (*_beg ){return nil ,_dd .Error (_fcc ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _gebc ,_fga int ;for _cbde :=0;_cbde < len (*_gaae );_cbde ++{if _gebc ,_fba =_gaae .GetInt (_cbde );_fba !=nil {return nil ,_dd .Wrap (_fba ,_fcc ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _gebc ==1{_fga ++;
};};if _fga ==len (*_beg ){return _beg ,nil ;};_bdbb :=Boxes {};for _bacb :=0;_bacb < len (*_gaae );_bacb ++{_gebc =int ((*_gaae )[_bacb ]);if _gebc ==0{continue ;};_bdbb =append (_bdbb ,(*_beg )[_bacb ]);};_dgfef =&_bdbb ;return _dgfef ,nil ;};type LocationFilter int ;
func (_fdfe *Bitmap )nextOnPixel (_bee ,_aaad int )(_faee _eb .Point ,_bfbe bool ,_efab error ){const _ggb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_faee ,_bfbe ,_efab =_fdfe .nextOnPixelLow (_fdfe .Width ,_fdfe .Height ,_fdfe .RowStride ,_bee ,_aaad );
if _efab !=nil {return _faee ,false ,_dd .Wrap (_efab ,_ggb ,"");};return _faee ,_bfbe ,nil ;};func (_bbb *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _bbb .removeBorderGeneral (left ,right ,top ,bot );};func (_ffab *Bitmaps )selectByIndicator (_fbdgc *_f .NumSlice )(_gfeg *Bitmaps ,_gdcb error ){const _gbea ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ffab ==nil {return nil ,_dd .Error (_gbea ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _fbdgc ==nil {return nil ,_dd .Error (_gbea ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_ffab .Values )==0{return _ffab ,nil ;};if len (*_fbdgc )!=len (_ffab .Values ){return nil ,_dd .Errorf (_gbea ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_fbdgc ),len (_ffab .Values ));
};var _bafb ,_agca ,_dbbb int ;for _agca =0;_agca < len (*_fbdgc );_agca ++{if _bafb ,_gdcb =_fbdgc .GetInt (_agca );_gdcb !=nil {return nil ,_dd .Wrap (_gdcb ,_gbea ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _bafb ==1{_dbbb ++;
};};if _dbbb ==len (_ffab .Values ){return _ffab ,nil ;};_gfeg =&Bitmaps {};_agaaa :=len (_ffab .Values )==len (_ffab .Boxes );for _agca =0;_agca < len (*_fbdgc );_agca ++{if _bafb =int ((*_fbdgc )[_agca ]);_bafb ==0{continue ;};_gfeg .Values =append (_gfeg .Values ,_ffab .Values [_agca ]);
if _agaaa {_gfeg .Boxes =append (_gfeg .Boxes ,_ffab .Boxes [_agca ]);};};return _gfeg ,nil ;};func _gcaf (_eagaa *Bitmap ,_dgecf ,_ecffe int ,_bbadg ,_ggadf int ,_fcfc RasterOperator ,_dfgg *Bitmap ,_faad ,_faeg int )error {var _eedgd ,_eeccd ,_gafcb ,_edb int ;
if _dgecf < 0{_faad -=_dgecf ;_bbadg +=_dgecf ;_dgecf =0;};if _faad < 0{_dgecf -=_faad ;_bbadg +=_faad ;_faad =0;};_eedgd =_dgecf +_bbadg -_eagaa .Width ;if _eedgd > 0{_bbadg -=_eedgd ;};_eeccd =_faad +_bbadg -_dfgg .Width ;if _eeccd > 0{_bbadg -=_eeccd ;
};if _ecffe < 0{_faeg -=_ecffe ;_ggadf +=_ecffe ;_ecffe =0;};if _faeg < 0{_ecffe -=_faeg ;_ggadf +=_faeg ;_faeg =0;};_gafcb =_ecffe +_ggadf -_eagaa .Height ;if _gafcb > 0{_ggadf -=_gafcb ;};_edb =_faeg +_ggadf -_dfgg .Height ;if _edb > 0{_ggadf -=_edb ;
};if _bbadg <=0||_ggadf <=0{return nil ;};var _cfef error ;switch {case _dgecf &7==0&&_faad &7==0:_cfef =_bfcbd (_eagaa ,_dgecf ,_ecffe ,_bbadg ,_ggadf ,_fcfc ,_dfgg ,_faad ,_faeg );case _dgecf &7==_faad &7:_cfef =_dcgc (_eagaa ,_dgecf ,_ecffe ,_bbadg ,_ggadf ,_fcfc ,_dfgg ,_faad ,_faeg );
default:_cfef =_gbcb (_eagaa ,_dgecf ,_ecffe ,_bbadg ,_ggadf ,_fcfc ,_dfgg ,_faad ,_faeg );};if _cfef !=nil {return _dd .Wrap (_cfef ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_gedg *Bitmaps )GetBox (i int )(*_eb .Rectangle ,error ){const _eadg ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _gedg ==nil {return nil ,_dd .Error (_eadg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_gedg .Boxes )-1{return nil ,_dd .Errorf (_eadg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gedg .Boxes [i ],nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _aeabc (d ,s ,hSize ,vSize )};func Rect (x ,y ,w ,h int )(*_eb .Rectangle ,error ){const _effff ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_dd .Errorf (_effff ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_dd .Error (_effff ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_fbeb :=_eb .Rect (x ,y ,x +w ,y +h );return &_fbeb ,nil ;};func (_edba *Bitmaps )makeSizeIndicator (_cbec ,_fffc int ,_adbca LocationFilter ,_cedg SizeComparison )(_bdded *_f .NumSlice ,_abbd error ){const _eaddg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _edba ==nil {return nil ,_dd .Error (_eaddg ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _adbca {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_dd .Errorf (_eaddg ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_adbca );
};switch _cedg {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_dd .Errorf (_eaddg ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cedg );
};_bdded =&_f .NumSlice {};var (_badf ,_beagg ,_dedg int ;_bfff *Bitmap ;);for _ ,_bfff =range _edba .Values {_badf =0;_beagg ,_dedg =_bfff .Width ,_bfff .Height ;switch _adbca {case LocSelectWidth :if (_cedg ==SizeSelectIfLT &&_beagg < _cbec )||(_cedg ==SizeSelectIfGT &&_beagg > _cbec )||(_cedg ==SizeSelectIfLTE &&_beagg <=_cbec )||(_cedg ==SizeSelectIfGTE &&_beagg >=_cbec )||(_cedg ==SizeSelectIfEQ &&_beagg ==_cbec ){_badf =1;
};case LocSelectHeight :if (_cedg ==SizeSelectIfLT &&_dedg < _fffc )||(_cedg ==SizeSelectIfGT &&_dedg > _fffc )||(_cedg ==SizeSelectIfLTE &&_dedg <=_fffc )||(_cedg ==SizeSelectIfGTE &&_dedg >=_fffc )||(_cedg ==SizeSelectIfEQ &&_dedg ==_fffc ){_badf =1;
};case LocSelectIfEither :if (_cedg ==SizeSelectIfLT &&(_beagg < _cbec ||_dedg < _fffc ))||(_cedg ==SizeSelectIfGT &&(_beagg > _cbec ||_dedg > _fffc ))||(_cedg ==SizeSelectIfLTE &&(_beagg <=_cbec ||_dedg <=_fffc ))||(_cedg ==SizeSelectIfGTE &&(_beagg >=_cbec ||_dedg >=_fffc ))||(_cedg ==SizeSelectIfEQ &&(_beagg ==_cbec ||_dedg ==_fffc )){_badf =1;
};case LocSelectIfBoth :if (_cedg ==SizeSelectIfLT &&(_beagg < _cbec &&_dedg < _fffc ))||(_cedg ==SizeSelectIfGT &&(_beagg > _cbec &&_dedg > _fffc ))||(_cedg ==SizeSelectIfLTE &&(_beagg <=_cbec &&_dedg <=_fffc ))||(_cedg ==SizeSelectIfGTE &&(_beagg >=_cbec &&_dedg >=_fffc ))||(_cedg ==SizeSelectIfEQ &&(_beagg ==_cbec &&_dedg ==_fffc )){_badf =1;
};};_bdded .AddInt (_badf );};return _bdded ,nil ;};func _fagc (_bedc *Bitmap ,_ccdcf ,_deef ,_eacdc ,_fdd int ,_ecffa RasterOperator ){if _ccdcf < 0{_eacdc +=_ccdcf ;_ccdcf =0;};_cadee :=_ccdcf +_eacdc -_bedc .Width ;if _cadee > 0{_eacdc -=_cadee ;};if _deef < 0{_fdd +=_deef ;
_deef =0;};_abda :=_deef +_fdd -_bedc .Height ;if _abda > 0{_fdd -=_abda ;};if _eacdc <=0||_fdd <=0{return ;};if (_ccdcf &7)==0{_cbfg (_bedc ,_ccdcf ,_deef ,_eacdc ,_fdd ,_ecffa );}else {_eabfg (_bedc ,_ccdcf ,_deef ,_eacdc ,_fdd ,_ecffa );};};func (_bac *Bitmap )SetByte (index int ,v byte )error {if index > len (_bac .Data )-1||index < 0{return _dd .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_bac .Data [index ]=v ;return nil ;};func (_ecfd *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ecfd .Width ,Height :_ecfd .Height ,RowStride :_ecfd .RowStride ,Color :_ecfd .Color ,Text :_ecfd .Text ,BitmapNumber :_ecfd .BitmapNumber ,Special :_ecfd .Special ,Data :make ([]byte ,len (_ecfd .Data ))};
};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bgeg ,_dcaa int ;_ceg :=src .RowStride -1;if x < 0{_dcaa =-x ;x =0;}else if x +src .Width > dst .Width {_ceg -=src .Width +x -dst .Width ;};if y < 0{_bgeg =-y ;y =0;_dcaa +=src .RowStride ;
_ceg +=src .RowStride ;}else if y +src .Height > dst .Height {_bgeg =src .Height +y -dst .Height ;};var (_faec int ;_bbfb error ;);_cadc :=x &0x07;_bcgbe :=8-_cadc ;_befff :=src .Width &0x07;_agb :=_bcgbe -_befff ;_aceb :=_bcgbe &0x07!=0;_ddfb :=src .Width <=((_ceg -_dcaa )<<3)+_bcgbe ;
_cdg :=dst .GetByteIndex (x ,y );_edfb :=_bgeg +dst .Height ;if src .Height > _edfb {_faec =_edfb ;}else {_faec =src .Height ;};switch {case !_aceb :_bbfb =_edcab (src ,dst ,_bgeg ,_faec ,_cdg ,_dcaa ,_ceg ,op );case _ddfb :_bbfb =_eedf (src ,dst ,_bgeg ,_faec ,_cdg ,_dcaa ,_ceg ,_agb ,_cadc ,_bcgbe ,op );
default:_bbfb =_ecce (src ,dst ,_bgeg ,_faec ,_cdg ,_dcaa ,_ceg ,_agb ,_cadc ,_bcgbe ,op ,_befff );};return _bbfb ;};func _dbaff (_ccf *Bitmap ,_edfa *Bitmap ,_dgde *Selection ,_ggcc **Bitmap )(*Bitmap ,error ){const _eedg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _edfa ==nil {return nil ,_dd .Error (_eedg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _dgde ==nil {return nil ,_dd .Error (_eedg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_ged ,_ebea :=_dgde .Height ,_dgde .Width ;if _ged ==0||_ebea ==0{return nil ,_dd .Error (_eedg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ccf ==nil {_ccf =_edfa .createTemplate ();
*_ggcc =_edfa ;return _ccf ,nil ;};_ccf .Width =_edfa .Width ;_ccf .Height =_edfa .Height ;_ccf .RowStride =_edfa .RowStride ;_ccf .Color =_edfa .Color ;_ccf .Data =make ([]byte ,_edfa .RowStride *_edfa .Height );if _ccf ==_edfa {*_ggcc =_edfa .Copy ();
}else {*_ggcc =_edfa ;};return _ccf ,nil ;};func MakePixelCentroidTab8 ()[]int {return _aff ()};func (_dbgb *Bitmap )setPadBits (_eae int ){_dcgd :=8-_dbgb .Width %8;if _dcgd ==8{return ;};_aegf :=_dbgb .Width /8;_cef :=_dcgdg [_dcgd ];if _eae ==0{_cef ^=_cef ;
};var _gdeb int ;for _aafd :=0;_aafd < _dbgb .Height ;_aafd ++{_gdeb =_aafd *_dbgb .RowStride +_aegf ;if _eae ==0{_dbgb .Data [_gdeb ]&=_cef ;}else {_dbgb .Data [_gdeb ]|=_cef ;};};};func Extract (roi _eb .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ggc :=New (roi .Dx (),roi .Dy ());
_acaa :=roi .Min .X &0x07;_beafd :=8-_acaa ;_adad :=uint (8-_ggc .Width &0x07);_ced :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_cagg :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_aebc :=_ggc .RowStride ==_cagg +1-_ced ;var _dgec int ;for _gbba :=roi .Min .Y ;
_gbba < roi .Max .Y ;_gbba ++{_baca :=_ced ;_dgb :=_dgec ;switch {case _ced ==_cagg :_faa ,_dddd :=src .GetByte (_baca );if _dddd !=nil {return nil ,_dddd ;};_faa <<=uint (_acaa );_dddd =_ggc .SetByte (_dgb ,_cbda (_adad ,_faa ));if _dddd !=nil {return nil ,_dddd ;
};case _acaa ==0:for _ggac :=_ced ;_ggac <=_cagg ;_ggac ++{_bbebd ,_abd :=src .GetByte (_baca );if _abd !=nil {return nil ,_abd ;};_baca ++;if _ggac ==_cagg &&_aebc {_bbebd =_cbda (_adad ,_bbebd );};_abd =_ggc .SetByte (_dgb ,_bbebd );if _abd !=nil {return nil ,_abd ;
};_dgb ++;};default:_cdcd :=_bfbc (src ,_ggc ,uint (_acaa ),uint (_beafd ),_adad ,_ced ,_cagg ,_aebc ,_baca ,_dgb );if _cdcd !=nil {return nil ,_cdcd ;};};_ced +=src .RowStride ;_cagg +=src .RowStride ;_dgec +=_ggc .RowStride ;};return _ggc ,nil ;};type SizeSelection int ;
func _cdda (_acce ,_ffdg *Bitmap ,_dbfd *Selection )(*Bitmap ,error ){const _dbgf ="\u006f\u0070\u0065\u006e";var _aggd error ;_acce ,_aggd =_dedd (_acce ,_ffdg ,_dbfd );if _aggd !=nil {return nil ,_dd .Wrap (_aggd ,_dbgf ,"");};_ccbd ,_aggd :=_aaae (nil ,_ffdg ,_dbfd );
if _aggd !=nil {return nil ,_dd .Wrap (_aggd ,_dbgf ,"");};_ ,_aggd =_gdfc (_acce ,_ccbd ,_dbfd );if _aggd !=nil {return nil ,_dd .Wrap (_aggd ,_dbgf ,"");};return _acce ,nil ;};func (_bgdb *Points )Add (pt *Points )error {const _defa ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _bgdb ==nil {return _dd .Error (_defa ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _dd .Error (_defa ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_bgdb =append (*_bgdb ,*pt ...);return nil ;};func _aeabc (_fcef ,_efgfg *Bitmap ,_cggbb ,_gagc int )(*Bitmap ,error ){const _fdec ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _efgfg ==nil {_eg .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_dd .Error (_fdec ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cggbb < 1||_gagc < 1{return nil ,_dd .Error (_fdec ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cggbb ==1&&_gagc ==1{_bad ,_deffb :=_ecb (_fcef ,_efgfg );if _deffb !=nil {return nil ,_dd .Wrap (_deffb ,_fdec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bad ,nil ;};if _cggbb ==1||_gagc ==1{_cadg :=SelCreateBrick (_gagc ,_cggbb ,_gagc /2,_cggbb /2,SelHit );_accc ,_eaeg :=_gdfc (_fcef ,_efgfg ,_cadg );if _eaeg !=nil {return nil ,_dd .Wrap (_eaeg ,_fdec ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _accc ,nil ;};_cga :=SelCreateBrick (1,_cggbb ,0,_cggbb /2,SelHit );_ggaab :=SelCreateBrick (_gagc ,1,_gagc /2,0,SelHit );_dffe ,_gcga :=_gdfc (nil ,_efgfg ,_cga );if _gcga !=nil {return nil ,_dd .Wrap (_gcga ,_fdec ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_fcef ,_gcga =_gdfc (_fcef ,_dffe ,_ggaab );if _gcga !=nil {return nil ,_dd .Wrap (_gcga ,_fdec ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fcef ,nil ;};func (_acge *ClassedPoints )ySortFunction ()func (_ecge int ,_cfga int )bool {return func (_bfdb ,_deee int )bool {return _acge .YAtIndex (_bfdb )< _acge .YAtIndex (_deee )};
};func (_ebf *byHeight )Swap (i ,j int ){_ebf .Values [i ],_ebf .Values [j ]=_ebf .Values [j ],_ebf .Values [i ];if _ebf .Boxes !=nil {_ebf .Boxes [i ],_ebf .Boxes [j ]=_ebf .Boxes [j ],_ebf .Boxes [i ];};};func init (){const _afgg ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_fgabea =New (50,40);var _eabd error ;_fgabea ,_eabd =_fgabea .AddBorder (2,1);if _eabd !=nil {panic (_dd .Wrap (_eabd ,_afgg ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_agbf ,_eabd =NewWithData (50,22,_ebab );if _eabd !=nil {panic (_dd .Wrap (_eabd ,_afgg ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _dgfe (_ffge int )int {if _ffge < 0{return -_ffge ;};return _ffge ;};func (_cag *Bitmap )And (s *Bitmap )(_cad *Bitmap ,_fgf error ){const _eagd ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _cag ==nil {return nil ,_dd .Error (_eagd ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_dd .Error (_eagd ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_cag .SizesEqual (s ){_eg .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_eagd );
};if _cad ,_fgf =_ecb (_cad ,_cag );_fgf !=nil {return nil ,_dd .Wrap (_fgf ,_eagd ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fgf =_cad .RasterOperation (0,0,_cad .Width ,_cad .Height ,PixSrcAndDst ,s ,0,0);
_fgf !=nil {return nil ,_dd .Wrap (_fgf ,_eagd ,"");};return _cad ,nil ;};func TstDSymbol (t *_g .T ,scale ...int )*Bitmap {_bcea ,_fffab :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_db .NoError (t ,_fffab );return TstGetScaledSymbol (t ,_bcea ,scale ...);
};type RasterOperator int ;func (_ffcac *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_cca *Boxes ,_cdc error ){const _eega ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _ffcac ==nil {return nil ,_dd .Error (_eega ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_ffcac )==0{return _ffcac ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_dd .Errorf (_eega ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_dd .Errorf (_eega ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_fafe :=_ffcac .makeSizeIndicator (width ,height ,tp ,relation );_eada ,_cdc :=_ffcac .selectWithIndicator (_fafe );if _cdc !=nil {return nil ,_dd .Wrap (_cdc ,_eega ,"");};return _eada ,nil ;};func (_fffg *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_abde *Boxes ,_aeab error ){const _ggaf ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _fffg ==nil {return nil ,_dd .Error (_ggaf ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_dd .Error (_ggaf ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _abde ,_aeab =_fffg .connComponentsBB (connectivity );_aeab !=nil {return nil ,_dd .Wrap (_aeab ,_ggaf ,"");};}else {if _abde ,_aeab =_fffg .connComponentsBitmapsBB (bms ,connectivity );_aeab !=nil {return nil ,_dd .Wrap (_aeab ,_ggaf ,"");
};};return _abde ,nil ;};func TstASymbol (t *_g .T )*Bitmap {t .Helper ();_dbca :=New (6,6);_db .NoError (t ,_dbca .SetPixel (1,0,1));_db .NoError (t ,_dbca .SetPixel (2,0,1));_db .NoError (t ,_dbca .SetPixel (3,0,1));_db .NoError (t ,_dbca .SetPixel (4,0,1));
_db .NoError (t ,_dbca .SetPixel (5,1,1));_db .NoError (t ,_dbca .SetPixel (1,2,1));_db .NoError (t ,_dbca .SetPixel (2,2,1));_db .NoError (t ,_dbca .SetPixel (3,2,1));_db .NoError (t ,_dbca .SetPixel (4,2,1));_db .NoError (t ,_dbca .SetPixel (5,2,1));
_db .NoError (t ,_dbca .SetPixel (0,3,1));_db .NoError (t ,_dbca .SetPixel (5,3,1));_db .NoError (t ,_dbca .SetPixel (0,4,1));_db .NoError (t ,_dbca .SetPixel (5,4,1));_db .NoError (t ,_dbca .SetPixel (1,5,1));_db .NoError (t ,_dbca .SetPixel (2,5,1));
_db .NoError (t ,_dbca .SetPixel (3,5,1));_db .NoError (t ,_dbca .SetPixel (4,5,1));_db .NoError (t ,_dbca .SetPixel (5,5,1));return _dbca ;};func (_aceg *ClassedPoints )Swap (i ,j int ){_aceg .IntSlice [i ],_aceg .IntSlice [j ]=_aceg .IntSlice [j ],_aceg .IntSlice [i ];
};func TstISymbol (t *_g .T ,scale ...int )*Bitmap {_abgac ,_gaefg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_db .NoError (t ,_gaefg );return TstGetScaledSymbol (t ,_abgac ,scale ...);};func NewClassedPoints (points *Points ,classes _f .IntSlice )(*ClassedPoints ,error ){const _gebe ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";
if points ==nil {return nil ,_dd .Error (_gebe ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_dd .Error (_gebe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");
};_adcg :=&ClassedPoints {Points :points ,IntSlice :classes };if _ddebb :=_adcg .validateIntSlice ();_ddebb !=nil {return nil ,_dd .Wrap (_ddebb ,_gebe ,"");};return _adcg ,nil ;};type BoundaryCondition int ;func _bccc (_afef ,_eddfe ,_edgf *Bitmap ,_ccdfe int )(*Bitmap ,error ){const _bcca ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";
if _eddfe ==nil {return nil ,_dd .Error (_bcca ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _edgf ==nil {return nil ,_dd .Error (_bcca ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _ccdfe !=4&&_ccdfe !=8{return nil ,_dd .Error (_bcca ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _aaefb error ;
_afef ,_aaefb =_ecb (_afef ,_eddfe );if _aaefb !=nil {return nil ,_dd .Wrap (_aaefb ,_bcca ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_gbfc :=_eddfe .createTemplate ();_edgf .setPadBits (0);for _cfbd :=0;
_cfbd < _adca ;_cfbd ++{_gbfc ,_aaefb =_ecb (_gbfc ,_afef );if _aaefb !=nil {return nil ,_dd .Wrapf (_aaefb ,_bcca ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_cfbd );};if _aaefb =_debc (_afef ,_edgf ,_ccdfe );_aaefb !=nil {return nil ,_dd .Wrapf (_aaefb ,_bcca ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_cfbd );
};if _gbfc .Equals (_afef ){break ;};};return _afef ,nil ;};func TstESymbol (t *_g .T ,scale ...int )*Bitmap {_fgeb ,_dced :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_db .NoError (t ,_dced );return TstGetScaledSymbol (t ,_fgeb ,scale ...);};
func _cdbba (_ddgea *_f .Stack ,_abgff ,_fbca ,_dabd ,_dbdb ,_dabg int ,_cccg *_eb .Rectangle )(_feeg error ){const _dfdcc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _ddgea ==nil {return _dd .Error (_dfdcc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cccg ==nil {return _dd .Error (_dfdcc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_cccg .Min .X =_f .Min (_cccg .Min .X ,_abgff );_cccg .Max .X =_f .Max (_cccg .Max .X ,_fbca );_cccg .Min .Y =_f .Min (_cccg .Min .Y ,_dabd );_cccg .Max .Y =_f .Max (_cccg .Max .Y ,_dabd );if !(_dabd +_dbdb >=0&&_dabd +_dbdb <=_dabg ){return nil ;};if _ddgea .Aux ==nil {return _dd .Error (_dfdcc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};var _dedf *fillSegment ;_fggb ,_dgbc :=_ddgea .Aux .Pop ();if _dgbc {if _dedf ,_dgbc =_fggb .(*fillSegment );!_dgbc {return _dd .Error (_dfdcc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");
};}else {_dedf =&fillSegment {};};_dedf ._gbega =_abgff ;_dedf ._aafeg =_fbca ;_dedf ._gcbd =_dabd ;_dedf ._edfaa =_dbdb ;_ddgea .Push (_dedf );return nil ;};func (_ebge *Bitmap )Zero ()bool {_edg :=_ebge .Width /8;_beab :=_ebge .Width &7;var _bge byte ;
if _beab !=0{_bge =byte (0xff<<uint (8-_beab ));};var _cae ,_agcd ,_gddga int ;for _agcd =0;_agcd < _ebge .Height ;_agcd ++{_cae =_ebge .RowStride *_agcd ;for _gddga =0;_gddga < _edg ;_gddga ,_cae =_gddga +1,_cae +1{if _ebge .Data [_cae ]!=0{return false ;
};};if _beab > 0{if _ebge .Data [_cae ]&_bge !=0{return false ;};};};return true ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _fadf (oldByte ,newByte ,op );};func (_edgd *Boxes )Add (box *_eb .Rectangle )error {if _edgd ==nil {return _dd .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_edgd =append (*_edgd ,box );return nil ;};type Component int ;func _ffade (_geff ...MorphProcess )(_fbfbe error ){const _dfef ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _dadf ,_gefb int ;for _bfgd ,_aeabg :=range _geff {if _fbfbe =_aeabg .verify (_bfgd ,&_dadf ,&_gefb );
_fbfbe !=nil {return _dd .Wrap (_fbfbe ,_dfef ,"");};};if _gefb !=0&&_dadf !=0{return _dd .Error (_dfef ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_ffe *Bitmap )SizesEqual (s *Bitmap )bool {if _ffe ==s {return true ;};if _ffe .Width !=s .Width ||_ffe .Height !=s .Height {return false ;};return true ;};func (_cdga *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _cdcb (_cdga ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};const (_facg shift =iota ;_fdce ;);