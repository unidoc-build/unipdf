//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ea "encoding/binary";_f "github.com/stretchr/testify/require";_bc "github.com/unidoc/unipdf/v3/common";_ae "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/imageutil";_ff "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_fe "image";_c "math";_d "sort";_b "strings";_fc "testing";);type Point struct{X ,Y float32 ;};func Extract (roi _fe .Rectangle ,src *Bitmap )(*Bitmap ,error ){_beee :=New (roi .Dx (),roi .Dy ());_efca :=roi .Min .X &0x07;
_bffef :=8-_efca ;_gbfca :=uint (8-_beee .Width &0x07);_gbfd :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_gcec :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_fcfb :=_beee .RowStride ==_gcec +1-_gbfd ;var _cfeg int ;for _deddb :=roi .Min .Y ;_deddb < roi .Max .Y ;
_deddb ++{_aabg :=_gbfd ;_addc :=_cfeg ;switch {case _gbfd ==_gcec :_dgfc ,_fcd :=src .GetByte (_aabg );if _fcd !=nil {return nil ,_fcd ;};_dgfc <<=uint (_efca );_fcd =_beee .SetByte (_addc ,_cbec (_gbfca ,_dgfc ));if _fcd !=nil {return nil ,_fcd ;};case _efca ==0:for _afc :=_gbfd ;
_afc <=_gcec ;_afc ++{_bag ,_adfe :=src .GetByte (_aabg );if _adfe !=nil {return nil ,_adfe ;};_aabg ++;if _afc ==_gcec &&_fcfb {_bag =_cbec (_gbfca ,_bag );};_adfe =_beee .SetByte (_addc ,_bag );if _adfe !=nil {return nil ,_adfe ;};_addc ++;};default:_gcfa :=_fcdf (src ,_beee ,uint (_efca ),uint (_bffef ),_gbfca ,_gbfd ,_gcec ,_fcfb ,_aabg ,_addc );
if _gcfa !=nil {return nil ,_gcfa ;};};_gbfd +=src .RowStride ;_gcec +=src .RowStride ;_cfeg +=_beee .RowStride ;};return _beee ,nil ;};func (_abag Points )XSorter ()func (_cbc ,_abga int )bool {return func (_ccge ,_aeff int )bool {return _abag [_ccge ].X < _abag [_aeff ].X };
};func (_gbade *Boxes )selectWithIndicator (_fdd *_ff .NumSlice )(_dgfab *Boxes ,_efgg error ){const _fdbe ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _gbade ==nil {return nil ,_g .Error (_fdbe ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");
};if _fdd ==nil {return nil ,_g .Error (_fdbe ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fdd )!=len (*_gbade ){return nil ,_g .Error (_fdbe ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _gfca ,_eabf int ;for _cegde :=0;_cegde < len (*_fdd );_cegde ++{if _gfca ,_efgg =_fdd .GetInt (_cegde );_efgg !=nil {return nil ,_g .Wrap (_efgg ,_fdbe ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _gfca ==1{_eabf ++;
};};if _eabf ==len (*_gbade ){return _gbade ,nil ;};_aacb :=Boxes {};for _afeg :=0;_afeg < len (*_fdd );_afeg ++{_gfca =int ((*_fdd )[_afeg ]);if _gfca ==0{continue ;};_aacb =append (_aacb ,(*_gbade )[_afeg ]);};_dgfab =&_aacb ;return _dgfab ,nil ;};func _ceff (_cdaeb ,_gbac *Bitmap ,_fae ,_bfeb ,_bfaga ,_cfbe ,_ffg ,_cgg ,_aeeg ,_fecb int ,_dgfd CombinationOperator ,_edada int )error {var _agfb int ;
_agge :=func (){_agfb ++;_bfaga +=_gbac .RowStride ;_cfbe +=_cdaeb .RowStride ;_ffg +=_cdaeb .RowStride };for _agfb =_fae ;_agfb < _bfeb ;_agge (){var _cdba uint16 ;_fdb :=_bfaga ;for _dgba :=_cfbe ;_dgba <=_ffg ;_dgba ++{_eab ,_dbca :=_gbac .GetByte (_fdb );
if _dbca !=nil {return _dbca ;};_aeeb ,_dbca :=_cdaeb .GetByte (_dgba );if _dbca !=nil {return _dbca ;};_cdba =(_cdba |(uint16 (_aeeb )&0xff))<<uint (_fecb );_aeeb =byte (_cdba >>8);if _dbca =_gbac .SetByte (_fdb ,_agfc (_eab ,_aeeb ,_dgfd ));_dbca !=nil {return _dbca ;
};_fdb ++;_cdba <<=uint (_aeeg );if _dgba ==_ffg {_aeeb =byte (_cdba >>(8-uint8 (_fecb )));if _edada !=0{_aeeb =_cbec (uint (8+_cgg ),_aeeb );};_eab ,_dbca =_gbac .GetByte (_fdb );if _dbca !=nil {return _dbca ;};if _dbca =_gbac .SetByte (_fdb ,_agfc (_eab ,_aeeb ,_dgfd ));
_dbca !=nil {return _dbca ;};};};};return nil ;};func (_dcc *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_eaeg *Bitmap )GetUnpaddedData ()([]byte ,error ){_adfa :=uint (_eaeg .Width &0x07);if _adfa ==0{return _eaeg .Data ,nil ;};_aeg :=_eaeg .Width *_eaeg .Height ;
if _aeg %8!=0{_aeg >>=3;_aeg ++;}else {_aeg >>=3;};_ccc :=make ([]byte ,_aeg );_feca :=_ae .NewWriterMSB (_ccc );const _bcag ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _bcc :=0;_bcc < _eaeg .Height ;_bcc ++{for _dbdg :=0;
_dbdg < _eaeg .RowStride ;_dbdg ++{_bgc :=_eaeg .Data [_bcc *_eaeg .RowStride +_dbdg ];if _dbdg !=_eaeg .RowStride -1{_bcaf :=_feca .WriteByte (_bgc );if _bcaf !=nil {return nil ,_g .Wrap (_bcaf ,_bcag ,"");};continue ;};for _dfc :=uint (0);_dfc < _adfa ;
_dfc ++{_fbba :=_feca .WriteBit (int (_bgc >>(7-_dfc )&0x01));if _fbba !=nil {return nil ,_g .Wrap (_fbba ,_bcag ,"");};};};};return _ccc ,nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_beca bool ,_bdae error ){const _abfc ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_aba ,_eggd :=p1 .Width ,p1 .Height ;_cea ,_dgcd :=p3 .Width ,p3 .Height ;if _ff .Abs (_aba -_cea )> maxDiffW {return false ,nil ;};if _ff .Abs (_eggd -_dgcd )> maxDiffH {return false ,nil ;};_gbec :=int (float32 (area1 )*(1.0-rank )+0.5);_aadg :=int (float32 (area3 )*(1.0-rank )+0.5);
var _dbbc ,_fccc int ;if delX >=0{_dbbc =int (delX +0.5);}else {_dbbc =int (delX -0.5);};if delY >=0{_fccc =int (delY +0.5);}else {_fccc =int (delY -0.5);};_bagb :=p1 .CreateTemplate ();if _bdae =_bagb .RasterOperation (0,0,_aba ,_eggd ,PixSrc ,p1 ,0,0);
_bdae !=nil {return false ,_g .Wrap (_bdae ,_abfc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdae =_bagb .RasterOperation (_dbbc ,_fccc ,_aba ,_eggd ,PixNotSrcAndDst ,p4 ,0,0);_bdae !=nil {return false ,_g .Wrap (_bdae ,_abfc ,"\u0074 \u0026\u0020\u0021\u0070\u0034");
};_beca ,_bdae =_bagb .ThresholdPixelSum (_gbec ,tab8 );if _bdae !=nil {return false ,_g .Wrap (_bdae ,_abfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _beca {return false ,nil ;};if _bdae =_bagb .RasterOperation (_dbbc ,_fccc ,_cea ,_dgcd ,PixSrc ,p3 ,0,0);
_bdae !=nil {return false ,_g .Wrap (_bdae ,_abfc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdae =_bagb .RasterOperation (0,0,_cea ,_dgcd ,PixNotSrcAndDst ,p2 ,0,0);_bdae !=nil {return false ,_g .Wrap (_bdae ,_abfc ,"\u0074 \u0026\u0020\u0021\u0070\u0032");
};_beca ,_bdae =_bagb .ThresholdPixelSum (_aadg ,tab8 );if _bdae !=nil {return false ,_g .Wrap (_bdae ,_abfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_beca ,nil ;};type RasterOperator int ;func (_gcdb *Bitmap )Zero ()bool {_ecbc :=_gcdb .Width /8;
_abff :=_gcdb .Width &7;var _efa byte ;if _abff !=0{_efa =byte (0xff<<uint (8-_abff ));};var _fdg ,_cdb ,_cfa int ;for _cdb =0;_cdb < _gcdb .Height ;_cdb ++{_fdg =_gcdb .RowStride *_cdb ;for _cfa =0;_cfa < _ecbc ;_cfa ,_fdg =_cfa +1,_fdg +1{if _gcdb .Data [_fdg ]!=0{return false ;
};};if _abff > 0{if _gcdb .Data [_fdg ]&_efa !=0{return false ;};};};return true ;};func (_fced *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _aggee ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fced .IntSlice .Size (){return 0,_g .Errorf (_aggee ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fced .YAtIndex (i )),nil ;};var _ _d .Interface =&ClassedPoints {};var _efcd =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_cafg *ClassedPoints )xSortFunction ()func (_dbce int ,_fedeb int )bool {return func (_edea ,_bafb int )bool {return _cafg .XAtIndex (_edea )< _cafg .XAtIndex (_bafb )};};func Rect (x ,y ,w ,h int )(*_fe .Rectangle ,error ){const _cdcf ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_g .Errorf (_cdcf ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_g .Error (_cdcf ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_bccb :=_fe .Rect (x ,y ,x +w ,y +h );return &_bccb ,nil ;};func (_cbea *ClassedPoints )Less (i ,j int )bool {return _cbea ._cgcbag (i ,j )};func init (){for _dee :=0;_dee < 256;_dee ++{_dbdb [_dee ]=uint8 (_dee &0x1)+(uint8 (_dee >>1)&0x1)+(uint8 (_dee >>2)&0x1)+(uint8 (_dee >>3)&0x1)+(uint8 (_dee >>4)&0x1)+(uint8 (_dee >>5)&0x1)+(uint8 (_dee >>6)&0x1)+(uint8 (_dee >>7)&0x1);
};};func _egfea (_daec ,_eaega ,_gegec *Bitmap ,_cfcb int )(*Bitmap ,error ){const _abdc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _eaega ==nil {return nil ,_g .Error (_abdc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _gegec ==nil {return nil ,_g .Error (_abdc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cfcb !=4&&_cfcb !=8{return nil ,_g .Error (_abdc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _afegg error ;_daec ,_afegg =_gcdf (_daec ,_eaega );if _afegg !=nil {return nil ,_g .Wrap (_afegg ,_abdc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cdbeg :=_eaega .createTemplate ();_gegec .setPadBits (0);
for _eabd :=0;_eabd < _ccfcc ;_eabd ++{_cdbeg ,_afegg =_gcdf (_cdbeg ,_daec );if _afegg !=nil {return nil ,_g .Wrapf (_afegg ,_abdc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_eabd );};if _afegg =_egde (_daec ,_gegec ,_cfcb );
_afegg !=nil {return nil ,_g .Wrapf (_afegg ,_abdc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_eabd );};if _cdbeg .Equals (_daec ){break ;};};return _daec ,nil ;};const (_cgcd shift =iota ;_deddd ;);func _gbc (_bf *Bitmap ,_ffd *Bitmap ,_bcab int )(_abgd error ){const _daa ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _bcab {case 2:_abgd =_gb (_bf ,_ffd );case 4:_abgd =_eg (_bf ,_ffd );case 8:_abgd =_fbg (_bf ,_ffd );default:return _g .Error (_daa ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _abgd !=nil {_abgd =_g .Wrap (_abgd ,_daa ,"");};return _abgd ;};func (_ace *Bitmap )String ()string {var _acfa ="\u000a";for _ebef :=0;_ebef < _ace .Height ;_ebef ++{var _adb string ;for _effc :=0;_effc < _ace .Width ;_effc ++{_gbd :=_ace .GetPixel (_effc ,_ebef );
if _gbd {_adb +="\u0031";}else {_adb +="\u0030";};};_acfa +=_adb +"\u000a";};return _acfa ;};func (_egb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_egb .Data )-1||index < 0{return 0,_g .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _egb .Data [index ],nil ;};func (_cage *BitmapsArray )GetBox (i int )(*_fe .Rectangle ,error ){const _bggaf ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _cage ==nil {return nil ,_g .Error (_bggaf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_cage .Boxes )-1{return nil ,_g .Errorf (_bggaf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cage .Boxes [i ],nil ;};type SizeComparison int ;
const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _cge (_bfe *Bitmap ,_gc int ,_eacb []byte )(_bb *Bitmap ,_cgee error ){const _fef ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _bfe ==nil {return nil ,_g .Error (_fef ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gc < 1||_gc > 4{return nil ,_g .Error (_fef ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _bfe .Height <=1{return nil ,_g .Errorf (_fef ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_bfe .Height );
};_bb =New (_bfe .Width /2,_bfe .Height /2);if _eacb ==nil {_eacb =_caf ();};_add :=_bgge (_bfe .RowStride ,2*_bb .RowStride );switch _gc {case 1:_cgee =_faf (_bfe ,_bb ,_gc ,_eacb ,_add );case 2:_cgee =_gdg (_bfe ,_bb ,_gc ,_eacb ,_add );case 3:_cgee =_fba (_bfe ,_bb ,_gc ,_eacb ,_add );
case 4:_cgee =_dfaa (_bfe ,_bb ,_gc ,_eacb ,_add );};if _cgee !=nil {return nil ,_cgee ;};return _bb ,nil ;};func (_aaab *Points )Add (pt *Points )error {const _gffc ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _aaab ==nil {return _g .Error (_gffc ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _g .Error (_gffc ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_aaab =append (*_aaab ,*pt ...);return nil ;};type Points []Point ;func (_ggc *Bitmap )inverseData (){if _ebbd :=_ggc .RasterOperation (0,0,_ggc .Width ,_ggc .Height ,PixNotDst ,nil ,0,0);
_ebbd !=nil {_bc .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ebbd );};if _ggc .Color ==Chocolate {_ggc .Color =Vanilla ;}else {_ggc .Color =Chocolate ;};};func _cdaef (_fcbe *Bitmap ,_eeaef *_ff .Stack ,_bcge ,_bbbd int )(_adae *_fe .Rectangle ,_caa error ){const _daad ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _fcbe ==nil {return nil ,_g .Error (_daad ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _eeaef ==nil {return nil ,_g .Error (_daad ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_bbda ,_dgbe :=_fcbe .Width ,_fcbe .Height ;_daagfb :=_bbda -1;_fcgcc :=_dgbe -1;if _bcge < 0||_bcge > _daagfb ||_bbbd < 0||_bbbd > _fcgcc ||!_fcbe .GetPixel (_bcge ,_bbbd ){return nil ,nil ;};_dfdc :=_fe .Rect (100000,100000,0,0);if _caa =_agdb (_eeaef ,_bcge ,_bcge ,_bbbd ,1,_fcgcc ,&_dfdc );
_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _caa =_agdb (_eeaef ,_bcge ,_bcge ,_bbbd +1,-1,_fcgcc ,&_dfdc );_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_dfdc .Min .X ,_dfdc .Max .X =_bcge ,_bcge ;_dfdc .Min .Y ,_dfdc .Max .Y =_bbbd ,_bbbd ;var (_ggcd *fillSegment ;_gfccc int ;);for _eeaef .Len ()> 0{if _ggcd ,_caa =_faeac (_eeaef );_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"");};_bbbd =_ggcd ._defe ;
for _bcge =_ggcd ._daeb -1;_bcge >=0&&_fcbe .GetPixel (_bcge ,_bbbd );_bcge --{if _caa =_fcbe .SetPixel (_bcge ,_bbbd ,0);_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _bcge >=_ggcd ._daeb -1{for {for _bcge ++;
_bcge <=_ggcd ._eafc +1&&_bcge <=_daagfb &&!_fcbe .GetPixel (_bcge ,_bbbd );_bcge ++{};_gfccc =_bcge ;if !(_bcge <=_ggcd ._eafc +1&&_bcge <=_daagfb ){break ;};for ;_bcge <=_daagfb &&_fcbe .GetPixel (_bcge ,_bbbd );_bcge ++{if _caa =_fcbe .SetPixel (_bcge ,_bbbd ,0);
_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _caa =_agdb (_eeaef ,_gfccc ,_bcge -1,_ggcd ._defe ,_ggcd ._dfdca ,_fcgcc ,&_dfdc );_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _bcge > _ggcd ._eafc {if _caa =_agdb (_eeaef ,_ggcd ._eafc +1,_bcge -1,_ggcd ._defe ,-_ggcd ._dfdca ,_fcgcc ,&_dfdc );_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_gfccc =_bcge +1;if _gfccc < _ggcd ._daeb {if _caa =_agdb (_eeaef ,_gfccc ,_ggcd ._daeb -1,_ggcd ._defe ,-_ggcd ._dfdca ,_fcgcc ,&_dfdc );_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bcge =_ggcd ._daeb ;for {for ;_bcge <=_daagfb &&_fcbe .GetPixel (_bcge ,_bbbd );_bcge ++{if _caa =_fcbe .SetPixel (_bcge ,_bbbd ,0);_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _caa =_agdb (_eeaef ,_gfccc ,_bcge -1,_ggcd ._defe ,_ggcd ._dfdca ,_fcgcc ,&_dfdc );
_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bcge > _ggcd ._eafc {if _caa =_agdb (_eeaef ,_ggcd ._eafc +1,_bcge -1,_ggcd ._defe ,-_ggcd ._dfdca ,_fcgcc ,&_dfdc );_caa !=nil {return nil ,_g .Wrap (_caa ,_daad ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bcge ++;_bcge <=_ggcd ._eafc +1&&_bcge <=_daagfb &&!_fcbe .GetPixel (_bcge ,_bbbd );_bcge ++{};_gfccc =_bcge ;if !(_bcge <=_ggcd ._eafc +1&&_bcge <=_daagfb ){break ;};};};_dfdc .Max .X ++;_dfdc .Max .Y ++;return &_dfdc ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cbb float64 ,_cdad error ){const _fbbaa ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_g .Error (_fbbaa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_g .Error (_fbbaa ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_g .Error (_fbbaa ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_bedgb ,_fbdd :=bm1 .Width ,bm1 .Height ;_cee ,_acead :=bm2 .Width ,bm2 .Height ;
_cbfb :=_eag (_bedgb -_cee );if _cbfb > maxDiffW {return 0,nil ;};_dae :=_eag (_fbdd -_acead );if _dae > maxDiffH {return 0,nil ;};var _ddfb ,_dfaeb int ;if delX >=0{_ddfb =int (delX +0.5);}else {_ddfb =int (delX -0.5);};if delY >=0{_dfaeb =int (delY +0.5);
}else {_dfaeb =int (delY -0.5);};_bcbe :=_bbg (_dfaeb ,0);_gdcf :=_bgge (_acead +_dfaeb ,_fbdd );_bba :=bm1 .RowStride *_bcbe ;_gdcg :=bm2 .RowStride *(_bcbe -_dfaeb );_dbac :=_bbg (_ddfb ,0);_fbbd :=_bgge (_cee +_ddfb ,_bedgb );_fegd :=bm2 .RowStride ;
var _afdd ,_gcac int ;if _ddfb >=8{_afdd =_ddfb >>3;_bba +=_afdd ;_dbac -=_afdd <<3;_fbbd -=_afdd <<3;_ddfb &=7;}else if _ddfb <=-8{_gcac =-((_ddfb +7)>>3);_gdcg +=_gcac ;_fegd -=_gcac ;_ddfb +=_gcac <<3;};if _dbac >=_fbbd ||_bcbe >=_gdcf {return 0,nil ;
};_cggf :=(_fbbd +7)>>3;var (_egdd ,_fcec ,_gfb byte ;_bdgc ,_ecfc ,_fbbf int ;);switch {case _ddfb ==0:for _fbbf =_bcbe ;_fbbf < _gdcf ;_fbbf ,_bba ,_gdcg =_fbbf +1,_bba +bm1 .RowStride ,_gdcg +bm2 .RowStride {for _ecfc =0;_ecfc < _cggf ;_ecfc ++{_gfb =bm1 .Data [_bba +_ecfc ]&bm2 .Data [_gdcg +_ecfc ];
_bdgc +=tab [_gfb ];};};case _ddfb > 0:if _fegd < _cggf {for _fbbf =_bcbe ;_fbbf < _gdcf ;_fbbf ,_bba ,_gdcg =_fbbf +1,_bba +bm1 .RowStride ,_gdcg +bm2 .RowStride {_egdd ,_fcec =bm1 .Data [_bba ],bm2 .Data [_gdcg ]>>uint (_ddfb );_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];
for _ecfc =1;_ecfc < _fegd ;_ecfc ++{_egdd ,_fcec =bm1 .Data [_bba +_ecfc ],(bm2 .Data [_gdcg +_ecfc ]>>uint (_ddfb ))|(bm2 .Data [_gdcg +_ecfc -1]<<uint (8-_ddfb ));_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];};_egdd =bm1 .Data [_bba +_ecfc ];_fcec =bm2 .Data [_gdcg +_ecfc -1]<<uint (8-_ddfb );
_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];};}else {for _fbbf =_bcbe ;_fbbf < _gdcf ;_fbbf ,_bba ,_gdcg =_fbbf +1,_bba +bm1 .RowStride ,_gdcg +bm2 .RowStride {_egdd ,_fcec =bm1 .Data [_bba ],bm2 .Data [_gdcg ]>>uint (_ddfb );_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];
for _ecfc =1;_ecfc < _cggf ;_ecfc ++{_egdd =bm1 .Data [_bba +_ecfc ];_fcec =(bm2 .Data [_gdcg +_ecfc ]>>uint (_ddfb ))|(bm2 .Data [_gdcg +_ecfc -1]<<uint (8-_ddfb ));_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];};};};default:if _cggf < _fegd {for _fbbf =_bcbe ;
_fbbf < _gdcf ;_fbbf ,_bba ,_gdcg =_fbbf +1,_bba +bm1 .RowStride ,_gdcg +bm2 .RowStride {for _ecfc =0;_ecfc < _cggf ;_ecfc ++{_egdd =bm1 .Data [_bba +_ecfc ];_fcec =bm2 .Data [_gdcg +_ecfc ]<<uint (-_ddfb );_fcec |=bm2 .Data [_gdcg +_ecfc +1]>>uint (8+_ddfb );
_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];};};}else {for _fbbf =_bcbe ;_fbbf < _gdcf ;_fbbf ,_bba ,_gdcg =_fbbf +1,_bba +bm1 .RowStride ,_gdcg +bm2 .RowStride {for _ecfc =0;_ecfc < _cggf -1;_ecfc ++{_egdd =bm1 .Data [_bba +_ecfc ];_fcec =bm2 .Data [_gdcg +_ecfc ]<<uint (-_ddfb );
_fcec |=bm2 .Data [_gdcg +_ecfc +1]>>uint (8+_ddfb );_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];};_egdd =bm1 .Data [_bba +_ecfc ];_fcec =bm2 .Data [_gdcg +_ecfc ]<<uint (-_ddfb );_gfb =_egdd &_fcec ;_bdgc +=tab [_gfb ];};};};_cbb =float64 (_bdgc )*float64 (_bdgc )/(float64 (area1 )*float64 (area2 ));
return _cbb ,nil ;};func (_faeg *Bitmaps )selectByIndicator (_fagf *_ff .NumSlice )(_deacd *Bitmaps ,_eegg error ){const _acba ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _faeg ==nil {return nil ,_g .Error (_acba ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if _fagf ==nil {return nil ,_g .Error (_acba ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_faeg .Values )==0{return _faeg ,nil ;};if len (*_fagf )!=len (_faeg .Values ){return nil ,_g .Errorf (_acba ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_fagf ),len (_faeg .Values ));
};var _eaae ,_bgcdc ,_fccdc int ;for _bgcdc =0;_bgcdc < len (*_fagf );_bgcdc ++{if _eaae ,_eegg =_fagf .GetInt (_bgcdc );_eegg !=nil {return nil ,_g .Wrap (_eegg ,_acba ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _eaae ==1{_fccdc ++;
};};if _fccdc ==len (_faeg .Values ){return _faeg ,nil ;};_deacd =&Bitmaps {};_dfgac :=len (_faeg .Values )==len (_faeg .Boxes );for _bgcdc =0;_bgcdc < len (*_fagf );_bgcdc ++{if _eaae =int ((*_fagf )[_bgcdc ]);_eaae ==0{continue ;};_deacd .Values =append (_deacd .Values ,_faeg .Values [_bgcdc ]);
if _dfgac {_deacd .Boxes =append (_deacd .Boxes ,_faeg .Boxes [_bgcdc ]);};};return _deacd ,nil ;};func (_abbf *Bitmap )setAll ()error {_cccd :=_eacba (_abbf ,0,0,_abbf .Width ,_abbf .Height ,PixSet ,nil ,0,0);if _cccd !=nil {return _g .Wrap (_cccd ,"\u0073\u0065\u0074\u0041\u006c\u006c","");
};return nil ;};func (_aeba *Bitmap )GetPixel (x ,y int )bool {_gbga :=_aeba .GetByteIndex (x ,y );_dgg :=_aeba .GetBitOffset (x );_abdb :=uint (7-_dgg );if _gbga > len (_aeba .Data )-1{_bc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_aeba );
return false ;};if (_aeba .Data [_gbga ]>>_abdb )&0x01>=1{return true ;};return false ;};func _fcdf (_fffc ,_dbb *Bitmap ,_bggb ,_egcb ,_edbf uint ,_afga ,_cdbee int ,_fcgd bool ,_badf ,_bedg int )error {for _dfae :=_afga ;_dfae < _cdbee ;_dfae ++{if _badf +1< len (_fffc .Data ){_cddg :=_dfae +1==_cdbee ;
_bdfc ,_effa :=_fffc .GetByte (_badf );if _effa !=nil {return _effa ;};_badf ++;_bdfc <<=_bggb ;_fcgb ,_effa :=_fffc .GetByte (_badf );if _effa !=nil {return _effa ;};_fcgb >>=_egcb ;_ggbc :=_bdfc |_fcgb ;if _cddg &&!_fcgd {_ggbc =_cbec (_edbf ,_ggbc );
};_effa =_dbb .SetByte (_bedg ,_ggbc );if _effa !=nil {return _effa ;};_bedg ++;if _cddg &&_fcgd {_daac ,_abda :=_fffc .GetByte (_badf );if _abda !=nil {return _abda ;};_daac <<=_bggb ;_ggbc =_cbec (_edbf ,_daac );if _abda =_dbb .SetByte (_bedg ,_ggbc );
_abda !=nil {return _abda ;};};continue ;};_bbb ,_fcde :=_fffc .GetByte (_badf );if _fcde !=nil {_bc .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_badf ,_fcde );
return _fcde ;};_bbb <<=_bggb ;_badf ++;_fcde =_dbb .SetByte (_bedg ,_bbb );if _fcde !=nil {return _fcde ;};_bedg ++;};return nil ;};func (_gdbac MorphProcess )getWidthHeight ()(_bcbf ,_gefge int ){return _gdbac .Arguments [0],_gdbac .Arguments [1];};type LocationFilter int ;
func (_ddg *Bitmap )clipRectangle (_faae ,_fegg *_fe .Rectangle )(_bdfa *Bitmap ,_bgbca error ){const _aebg ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _faae ==nil {return nil ,_g .Error (_aebg ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");
};_agbc ,_fagg :=_ddg .Width ,_ddg .Height ;_cbd ,_bgbca :=ClipBoxToRectangle (_faae ,_agbc ,_fagg );if _bgbca !=nil {_bc .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_bgbca );
return nil ,nil ;};_bgcd ,_adba :=_cbd .Min .X ,_cbd .Min .Y ;_facd ,_ggf :=_cbd .Max .X -_cbd .Min .X ,_cbd .Max .Y -_cbd .Min .Y ;_bdfa =New (_facd ,_ggf );_bdfa .Text =_ddg .Text ;if _bgbca =_bdfa .RasterOperation (0,0,_facd ,_ggf ,PixSrc ,_ddg ,_bgcd ,_adba );
_bgbca !=nil {return nil ,_g .Wrap (_bgbca ,_aebg ,"");};if _fegg !=nil {*_fegg =*_cbd ;};return _bdfa ,nil ;};func TstVSymbol (t *_fc .T ,scale ...int )*Bitmap {_fgbb ,_faade :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_f .NoError (t ,_faade );
return TstGetScaledSymbol (t ,_fgbb ,scale ...);};var (_aabd =_fa ();_aebf =_dad ();_fcgf =_feg (););type SelectionValue int ;func (_ecf *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _ecf .Copy (),nil ;};_edf ,_aefg :=_ecf .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );
if _aefg !=nil {return nil ,_g .Wrap (_aefg ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _edf ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_fe .Rectangle ;};func (_edb *Bitmap )setPadBits (_bgdg int ){_fce :=8-_edb .Width %8;
if _fce ==8{return ;};_gfac :=_edb .Width /8;_gaab :=_fgaf [_fce ];if _bgdg ==0{_gaab ^=_gaab ;};var _dfbg int ;for _bdab :=0;_bdab < _edb .Height ;_bdab ++{_dfbg =_bdab *_edb .RowStride +_gfac ;if _bgdg ==0{_edb .Data [_dfbg ]&=_gaab ;}else {_edb .Data [_dfbg ]|=_gaab ;
};};};func _bcccb ()[]int {_bddd :=make ([]int ,256);for _fdfcg :=0;_fdfcg <=0xff;_fdfcg ++{_dfge :=byte (_fdfcg );_bddd [_dfge ]=int (_dfge &0x1)+(int (_dfge >>1)&0x1)+(int (_dfge >>2)&0x1)+(int (_dfge >>3)&0x1)+(int (_dfge >>4)&0x1)+(int (_dfge >>5)&0x1)+(int (_dfge >>6)&0x1)+(int (_dfge >>7)&0x1);
};return _bddd ;};func (_dgfa *Bitmap )resizeImageData (_egcg *Bitmap )error {if _egcg ==nil {return _g .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _dgfa .SizesEqual (_egcg ){return nil ;};_dgfa .Data =make ([]byte ,len (_egcg .Data ));_dgfa .Width =_egcg .Width ;_dgfa .Height =_egcg .Height ;_dgfa .RowStride =_egcg .RowStride ;return nil ;};func (_adgg *Bitmap )nextOnPixel (_gdba ,_bfg int )(_fcfg _fe .Point ,_efg bool ,_agd error ){const _cdcg ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_fcfg ,_efg ,_agd =_adgg .nextOnPixelLow (_adgg .Width ,_adgg .Height ,_adgg .RowStride ,_gdba ,_bfg );if _agd !=nil {return _fcfg ,false ,_g .Wrap (_agd ,_cdcg ,"");};return _fcfg ,_efg ,nil ;};func _gedb (_cgbf ,_dccc *Bitmap ,_cceb ,_eccb int )(*Bitmap ,error ){const _eafe ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _dccc ==nil {return nil ,_g .Error (_eafe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cceb < 1&&_eccb < 1{return nil ,_g .Error (_eafe ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _cceb ==1&&_eccb ==1{return _dccc .Copy (),nil ;};if _cceb ==1||_eccb ==1{var _ccef error ;_dgbg :=SelCreateBrick (_eccb ,_cceb ,_eccb /2,_cceb /2,SelHit );_cgbf ,_ccef =_bebd (_cgbf ,_dccc ,_dgbg );if _ccef !=nil {return nil ,_g .Wrap (_ccef ,_eafe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cgbf ,nil ;};_bddf :=SelCreateBrick (1,_cceb ,0,_cceb /2,SelHit );_fcccb :=SelCreateBrick (_eccb ,1,_eccb /2,0,SelHit );_bgfbg ,_dbae :=_ebae (nil ,_dccc ,_bddf );if _dbae !=nil {return nil ,_g .Wrap (_dbae ,_eafe ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_cgbf ,_dbae =_ebae (_cgbf ,_bgfbg ,_fcccb );if _dbae !=nil {return nil ,_g .Wrap (_dbae ,_eafe ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_dbae =_eebf (_bgfbg ,_cgbf ,_bddf );if _dbae !=nil {return nil ,_g .Wrap (_dbae ,_eafe ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_dbae =_eebf (_cgbf ,_bgfbg ,_fcccb );if _dbae !=nil {return nil ,_g .Wrap (_dbae ,_eafe ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cgbf ,nil ;};type Component int ;func TstISymbol (t *_fc .T ,scale ...int )*Bitmap {_ecfd ,_affg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});
_f .NoError (t ,_affg );return TstGetScaledSymbol (t ,_ecfd ,scale ...);};func _fdfca (_dcgc ,_aacbe *Bitmap ,_fcgcf ,_cdg int )(*Bitmap ,error ){const _eddb ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _aacbe ==nil {return nil ,_g .Error (_eddb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fcgcf < 1||_cdg < 1{return nil ,_g .Error (_eddb ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _fcgcf ==1&&_cdg ==1{return _aacbe .Copy (),nil ;};if _fcgcf ==1||_cdg ==1{_gbea :=SelCreateBrick (_cdg ,_fcgcf ,_cdg /2,_fcgcf /2,SelHit );
var _cbeg error ;_dcgc ,_cbeg =_eeec (_dcgc ,_aacbe ,_gbea );if _cbeg !=nil {return nil ,_g .Wrap (_cbeg ,_eddb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};
return _dcgc ,nil ;};_bgfa :=SelCreateBrick (1,_fcgcf ,0,_fcgcf /2,SelHit );_gecb :=SelCreateBrick (_cdg ,1,_cdg /2,0,SelHit );_gebc ,_eace :=_eebf (nil ,_aacbe ,_bgfa );if _eace !=nil {return nil ,_g .Wrap (_eace ,_eddb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _dcgc ,_eace =_eebf (_dcgc ,_gebc ,_gecb );_eace !=nil {return nil ,_g .Wrap (_eace ,_eddb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_eace =_ebae (_gebc ,_dcgc ,_bgfa );_eace !=nil {return nil ,_g .Wrap (_eace ,_eddb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_eace =_ebae (_dcgc ,_gebc ,_gecb );_eace !=nil {return nil ,_g .Wrap (_eace ,_eddb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dcgc ,nil ;};func (_gee *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gee .Width ,Height :_gee .Height ,RowStride :_gee .RowStride ,Color :_gee .Color ,Text :_gee .Text ,BitmapNumber :_gee .BitmapNumber ,Special :_gee .Special ,Data :make ([]byte ,len (_gee .Data ))};
};func (_gbgb *Bitmap )SetPixel (x ,y int ,pixel byte )error {_ecg :=_gbgb .GetByteIndex (x ,y );if _ecg > len (_gbgb .Data )-1{return _g .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_ecg );
};_geab :=_gbgb .GetBitOffset (x );_bgbc :=uint (7-_geab );_ada :=_gbgb .Data [_ecg ];var _cefc byte ;if pixel ==1{_cefc =_ada |(pixel &0x01<<_bgbc );}else {_cefc =_ada &^(1<<_bgbc );};_gbgb .Data [_ecg ]=_cefc ;return nil ;};func (_addcg *Bitmap )connComponentsBB (_bcbg int )(_ccbc *Boxes ,_gacg error ){const _gbfg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _bcbg !=4&&_bcbg !=8{return nil ,_g .Error (_gbfg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _addcg .Zero (){return &Boxes {},nil ;
};_addcg .setPadBits (0);_bfbfb ,_gacg :=_gcdf (nil ,_addcg );if _gacg !=nil {return nil ,_g .Wrap (_gacg ,_gbfg ,"\u0062\u006d\u0031");};_dcba :=&_ff .Stack {};_dcba .Aux =&_ff .Stack {};_ccbc =&Boxes {};var (_cdef ,_aded int ;_ddga _fe .Point ;_egeg bool ;
_gcb *_fe .Rectangle ;);for {if _ddga ,_egeg ,_gacg =_bfbfb .nextOnPixel (_aded ,_cdef );_gacg !=nil {return nil ,_g .Wrap (_gacg ,_gbfg ,"");};if !_egeg {break ;};if _gcb ,_gacg =_bbag (_bfbfb ,_dcba ,_ddga .X ,_ddga .Y ,_bcbg );_gacg !=nil {return nil ,_g .Wrap (_gacg ,_gbfg ,"");
};if _gacg =_ccbc .Add (_gcb );_gacg !=nil {return nil ,_g .Wrap (_gacg ,_gbfg ,"");};_aded =_ddga .X ;_cdef =_ddga .Y ;};return _ccbc ,nil ;};func (_cece *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_aa bool ,_fag error ){const _cbab ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_bcccb ();};_abf :=_cece .Width >>3;_eefg :=_cece .Width &7;_fedb :=byte (0xff<<uint (8-_eefg ));var (_egae ,_ecab ,_cafa ,_abcb int ;_agbf byte ;);for _egae =0;_egae < _cece .Height ;_egae ++{_cafa =_cece .RowStride *_egae ;for _ecab =0;
_ecab < _abf ;_ecab ++{_agbf ,_fag =_cece .GetByte (_cafa +_ecab );if _fag !=nil {return false ,_g .Wrap (_fag ,_cbab ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_abcb +=tab8 [_agbf ];};if _eefg !=0{_agbf ,_fag =_cece .GetByte (_cafa +_ecab );
if _fag !=nil {return false ,_g .Wrap (_fag ,_cbab ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_agbf &=_fedb ;_abcb +=tab8 [_agbf ];};if _abcb > thresh {return true ,nil ;};};return _aa ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _fdac ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_gbad :=_dfb (width ,height );_gbad .Data =data ;if _aea :=((width *height )+7)>>3;len (data )< _aea {return nil ,_g .Errorf (_fdac ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_aea );
};if _fga :=_gbad .addPadBits ();_fga !=nil {return nil ,_g .Wrap (_fga ,_fdac ,"");};return _gbad ,nil ;};func _aece (_fdgf *Bitmap ,_ffde *Bitmap ,_eaee *Selection ,_accf **Bitmap )(*Bitmap ,error ){const _fcdg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _ffde ==nil {return nil ,_g .Error (_fcdg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _eaee ==nil {return nil ,_g .Error (_fcdg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_eaab ,_begg :=_eaee .Height ,_eaee .Width ;if _eaab ==0||_begg ==0{return nil ,_g .Error (_fcdg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fdgf ==nil {_fdgf =_ffde .createTemplate ();
*_accf =_ffde ;return _fdgf ,nil ;};_fdgf .Width =_ffde .Width ;_fdgf .Height =_ffde .Height ;_fdgf .RowStride =_ffde .RowStride ;_fdgf .Color =_ffde .Color ;_fdgf .Data =make ([]byte ,_ffde .RowStride *_ffde .Height );if _fdgf ==_ffde {*_accf =_ffde .Copy ();
}else {*_accf =_ffde ;};return _fdgf ,nil ;};func (_gae *Bitmap )setTwoBytes (_bdcd int ,_dabb uint16 )error {if _bdcd +1> len (_gae .Data )-1{return _g .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bdcd );
};_gae .Data [_bdcd ]=byte ((_dabb &0xff00)>>8);_gae .Data [_bdcd +1]=byte (_dabb &0xff);return nil ;};func _ebae (_ccac ,_gddg *Bitmap ,_acg *Selection )(*Bitmap ,error ){const _edec ="\u0065\u0072\u006fd\u0065";var (_bbba error ;_degde *Bitmap ;);_ccac ,_bbba =_aece (_ccac ,_gddg ,_acg ,&_degde );
if _bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"");};if _bbba =_ccac .setAll ();_bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"");};var _afac SelectionValue ;for _efcg :=0;_efcg < _acg .Height ;_efcg ++{for _ebgef :=0;_ebgef < _acg .Width ;_ebgef ++{_afac =_acg .Data [_efcg ][_ebgef ];
if _afac ==SelHit {_bbba =_eacba (_ccac ,_acg .Cx -_ebgef ,_acg .Cy -_efcg ,_gddg .Width ,_gddg .Height ,PixSrcAndDst ,_degde ,0,0);if _bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"");};};};};if MorphBC ==SymmetricMorphBC {return _ccac ,nil ;};_aacc ,_cefd ,_dcbc ,_cbeb :=_acg .findMaxTranslations ();
if _aacc > 0{if _bbba =_ccac .RasterOperation (0,0,_aacc ,_gddg .Height ,PixClr ,nil ,0,0);_bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _dcbc > 0{if _bbba =_ccac .RasterOperation (_gddg .Width -_dcbc ,0,_dcbc ,_gddg .Height ,PixClr ,nil ,0,0);
_bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _cefd > 0{if _bbba =_ccac .RasterOperation (0,0,_gddg .Width ,_cefd ,PixClr ,nil ,0,0);_bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"\u0079\u0070\u0020\u003e\u0020\u0030");
};};if _cbeb > 0{if _bbba =_ccac .RasterOperation (0,_gddg .Height -_cbeb ,_gddg .Width ,_cbeb ,PixClr ,nil ,0,0);_bbba !=nil {return nil ,_g .Wrap (_bbba ,_edec ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _ccac ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _eacba (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _fggcc (_afed ,_ecbb *Bitmap ,_dcd ,_cddb int )(*Bitmap ,error ){const _cbdd ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _ecbb ==nil {_bc .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_g .Error (_cbdd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _dcd < 1||_cddb < 1{return nil ,_g .Error (_cbdd ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _dcd ==1&&_cddb ==1{_adbf ,_dceea :=_gcdf (_afed ,_ecbb );if _dceea !=nil {return nil ,_g .Wrap (_dceea ,_cbdd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _adbf ,nil ;};if _dcd ==1||_cddb ==1{_gaee :=SelCreateBrick (_cddb ,_dcd ,_cddb /2,_dcd /2,SelHit );_bbac ,_gde :=_eebf (_afed ,_ecbb ,_gaee );if _gde !=nil {return nil ,_g .Wrap (_gde ,_cbdd ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bbac ,nil ;};_dbdf :=SelCreateBrick (1,_dcd ,0,_dcd /2,SelHit );_gaed :=SelCreateBrick (_cddb ,1,_cddb /2,0,SelHit );_accc ,_cgd :=_eebf (nil ,_ecbb ,_dbdf );if _cgd !=nil {return nil ,_g .Wrap (_cgd ,_cbdd ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_afed ,_cgd =_eebf (_afed ,_accc ,_gaed );if _cgd !=nil {return nil ,_g .Wrap (_cgd ,_cbdd ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _afed ,nil ;};func (_fcadbg *Boxes )Get (i int )(*_fe .Rectangle ,error ){const _aaba ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";
if _fcadbg ==nil {return nil ,_g .Error (_aaba ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fcadbg )-1{return nil ,_g .Errorf (_aaba ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return (*_fcadbg )[i ],nil ;};func _badcf (_bde *Bitmap ,_caga ,_bgaa int ,_bcdd ,_gfbad int ,_fge RasterOperator ){var (_adgb int ;_baeee byte ;_eccc ,_dffa int ;_fdgd int ;);_bfbfd :=_bcdd >>3;_dcea :=_bcdd &7;if _dcea > 0{_baeee =_bcdc [_dcea ];};
_adgb =_bde .RowStride *_bgaa +(_caga >>3);switch _fge {case PixClr :for _eccc =0;_eccc < _gfbad ;_eccc ++{_fdgd =_adgb +_eccc *_bde .RowStride ;for _dffa =0;_dffa < _bfbfd ;_dffa ++{_bde .Data [_fdgd ]=0x0;_fdgd ++;};if _dcea > 0{_bde .Data [_fdgd ]=_fbga (_bde .Data [_fdgd ],0x0,_baeee );
};};case PixSet :for _eccc =0;_eccc < _gfbad ;_eccc ++{_fdgd =_adgb +_eccc *_bde .RowStride ;for _dffa =0;_dffa < _bfbfd ;_dffa ++{_bde .Data [_fdgd ]=0xff;_fdgd ++;};if _dcea > 0{_bde .Data [_fdgd ]=_fbga (_bde .Data [_fdgd ],0xff,_baeee );};};case PixNotDst :for _eccc =0;
_eccc < _gfbad ;_eccc ++{_fdgd =_adgb +_eccc *_bde .RowStride ;for _dffa =0;_dffa < _bfbfd ;_dffa ++{_bde .Data [_fdgd ]=^_bde .Data [_fdgd ];_fdgd ++;};if _dcea > 0{_bde .Data [_fdgd ]=_fbga (_bde .Data [_fdgd ],^_bde .Data [_fdgd ],_baeee );};};};};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _gcdf (d ,s )};
func _gcdf (_bge ,_fedc *Bitmap )(*Bitmap ,error ){if _fedc ==nil {return nil ,_g .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fedc ==_bge {return _bge ,nil ;
};if _bge ==nil {_bge =_fedc .createTemplate ();copy (_bge .Data ,_fedc .Data );return _bge ,nil ;};_fcbb :=_bge .resizeImageData (_fedc );if _fcbb !=nil {return nil ,_g .Wrap (_fcbb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};
_bge .Text =_fedc .Text ;copy (_bge .Data ,_fedc .Data );return _bge ,nil ;};type BoundaryCondition int ;func ClipBoxToRectangle (box *_fe .Rectangle ,wi ,hi int )(_abbff *_fe .Rectangle ,_bfbd error ){const _dffe ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_g .Error (_dffe ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_g .Error (_dffe ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_cdf :=*box ;_abbff =&_cdf ;if _abbff .Min .X < 0{_abbff .Max .X +=_abbff .Min .X ;_abbff .Min .X =0;};if _abbff .Min .Y < 0{_abbff .Max .Y +=_abbff .Min .Y ;_abbff .Min .Y =0;};if _abbff .Max .X > wi {_abbff .Max .X =wi ;};if _abbff .Max .Y > hi {_abbff .Max .Y =hi ;
};return _abbff ,nil ;};func (_gecc *ClassedPoints )SortByX (){_gecc ._cgcbag =_gecc .xSortFunction ();_d .Sort (_gecc )};func _gcdea (_dgbbg *Bitmap ,_eggg ,_cfdc ,_cbfd ,_gcdd int ,_ccefc RasterOperator ,_bbga *Bitmap ,_bbae ,_gffb int )error {var (_gfgc byte ;
_eeagf int ;_gaeg int ;_gfacb ,_dcbe int ;_acd ,_bdde int ;);_cegc :=_cbfd >>3;_ebcf :=_cbfd &7;if _ebcf > 0{_gfgc =_bcdc [_ebcf ];};_eeagf =_bbga .RowStride *_gffb +(_bbae >>3);_gaeg =_dgbbg .RowStride *_cfdc +(_eggg >>3);switch _ccefc {case PixSrc :for _acd =0;
_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=_bbga .Data [_gfacb ];_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],_bbga .Data [_gfacb ],_gfgc );
};};case PixNotSrc :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=^(_bbga .Data [_gfacb ]);_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],^_bbga .Data [_gfacb ],_gfgc );
};};case PixSrcOrDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]|=_bbga .Data [_gfacb ];_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],_bbga .Data [_gfacb ]|_dgbbg .Data [_dcbe ],_gfgc );
};};case PixSrcAndDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]&=_bbga .Data [_gfacb ];_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],_bbga .Data [_gfacb ]&_dgbbg .Data [_dcbe ],_gfgc );
};};case PixSrcXorDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]^=_bbga .Data [_gfacb ];_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],_bbga .Data [_gfacb ]^_dgbbg .Data [_dcbe ],_gfgc );
};};case PixNotSrcOrDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]|=^(_bbga .Data [_gfacb ]);_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],^(_bbga .Data [_gfacb ])|_dgbbg .Data [_dcbe ],_gfgc );
};};case PixNotSrcAndDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]&=^(_bbga .Data [_gfacb ]);_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],^(_bbga .Data [_gfacb ])&_dgbbg .Data [_dcbe ],_gfgc );
};};case PixSrcOrNotDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=_bbga .Data [_gfacb ]|^(_dgbbg .Data [_dcbe ]);_dcbe ++;
_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],_bbga .Data [_gfacb ]|^(_dgbbg .Data [_dcbe ]),_gfgc );};};case PixSrcAndNotDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;
for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=_bbga .Data [_gfacb ]&^(_dgbbg .Data [_dcbe ]);_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],_bbga .Data [_gfacb ]&^(_dgbbg .Data [_dcbe ]),_gfgc );};};case PixNotPixSrcOrDst :for _acd =0;
_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=^(_bbga .Data [_gfacb ]|_dgbbg .Data [_dcbe ]);_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],^(_bbga .Data [_gfacb ]|_dgbbg .Data [_dcbe ]),_gfgc );
};};case PixNotPixSrcAndDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=^(_bbga .Data [_gfacb ]&_dgbbg .Data [_dcbe ]);_dcbe ++;
_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],^(_bbga .Data [_gfacb ]&_dgbbg .Data [_dcbe ]),_gfgc );};};case PixNotPixSrcXorDst :for _acd =0;_acd < _gcdd ;_acd ++{_gfacb =_eeagf +_acd *_bbga .RowStride ;_dcbe =_gaeg +_acd *_dgbbg .RowStride ;
for _bdde =0;_bdde < _cegc ;_bdde ++{_dgbbg .Data [_dcbe ]=^(_bbga .Data [_gfacb ]^_dgbbg .Data [_dcbe ]);_dcbe ++;_gfacb ++;};if _ebcf > 0{_dgbbg .Data [_dcbe ]=_fbga (_dgbbg .Data [_dcbe ],^(_bbga .Data [_gfacb ]^_dgbbg .Data [_dcbe ]),_gfgc );};};default:_bc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ccefc );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func TstImageBitmapData ()[]byte {return _ffad .Data };const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func _accg (_bebe ,_bcabf *Bitmap ,_afcf ,_ecda int )(*Bitmap ,error ){const _bggea ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _bcabf ==nil {return nil ,_g .Error (_bggea ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _afcf < 1||_ecda < 1{return nil ,_g .Error (_bggea ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _afcf ==1&&_ecda ==1{return _gcdf (_bebe ,_bcabf );};if MorphBC ==SymmetricMorphBC {_faed ,_ggcb :=_fdfca (_bebe ,_bcabf ,_afcf ,_ecda );if _ggcb !=nil {return nil ,_g .Wrap (_ggcb ,_bggea ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _faed ,nil ;};_daga :=_bbg (_afcf /2,_ecda /2);_gcfdc :=8*((_daga +7)/8);_ccfc ,_gbbe :=_bcabf .AddBorder (_gcfdc ,0);if _gbbe !=nil {return nil ,_g .Wrapf (_gbbe ,_bggea ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_gcfdc );
};var _eege ,_acac *Bitmap ;if _afcf ==1||_ecda ==1{_fade :=SelCreateBrick (_ecda ,_afcf ,_ecda /2,_afcf /2,SelHit );_eege ,_gbbe =_eeec (nil ,_ccfc ,_fade );if _gbbe !=nil {return nil ,_g .Wrap (_gbbe ,_bggea ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_fde :=SelCreateBrick (1,_afcf ,0,_afcf /2,SelHit );_degb ,_decg :=_eebf (nil ,_ccfc ,_fde );if _decg !=nil {return nil ,_g .Wrap (_decg ,_bggea ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_afdag :=SelCreateBrick (_ecda ,1,_ecda /2,0,SelHit );_eege ,_decg =_eebf (nil ,_degb ,_afdag );if _decg !=nil {return nil ,_g .Wrap (_decg ,_bggea ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_decg =_ebae (_degb ,_eege ,_fde );_decg !=nil {return nil ,_g .Wrap (_decg ,_bggea ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_decg =_ebae (_eege ,_degb ,_afdag );_decg !=nil {return nil ,_g .Wrap (_decg ,_bggea ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _acac ,_gbbe =_eege .RemoveBorder (_gcfdc );_gbbe !=nil {return nil ,_g .Wrap (_gbbe ,_bggea ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _bebe ==nil {return _acac ,nil ;};if _ ,_gbbe =_gcdf (_bebe ,_acac );_gbbe !=nil {return nil ,_gbbe ;};return _bebe ,nil ;
};func _geccg (_gedc ,_aaef *Bitmap ,_edcga ,_bgca int )(_dgbbga error ){const _fecd ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_afgg ,_cdbb ,_febbb ,_fgcg int ;_abbfa ,_dace ,_ecbeab ,_bbc ,_bbgc ,_ccdf ,_bdcbf byte ;
);for _afgg =0;_afgg < _edcga ;_afgg ++{_febbb =_afgg *_gedc .RowStride ;_fgcg =_afgg *_aaef .RowStride ;for _cdbb =0;_cdbb < _bgca ;_cdbb ++{_abbfa ,_dgbbga =_gedc .GetByte (_febbb +_cdbb );if _dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_dace ,_dgbbga =_aaef .GetByte (_fgcg +_cdbb );if _dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _afgg > 0{_ecbeab ,_dgbbga =_gedc .GetByte (_febbb -_gedc .RowStride +_cdbb );if _dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0069\u0020\u003e \u0030");
};_abbfa |=_ecbeab ;};if _cdbb > 0{_bbc ,_dgbbga =_gedc .GetByte (_febbb +_cdbb -1);if _dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u006a\u0020\u003e \u0030");};_abbfa |=_bbc <<7;};_abbfa &=_dace ;if _abbfa ==0||(^_abbfa )==0{if _dgbbga =_gedc .SetByte (_febbb +_cdbb ,_abbfa );
_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_bdcbf =_abbfa ;_abbfa =(_abbfa |(_abbfa >>1)|(_abbfa <<1))&_dace ;if (_abbfa ^_bdcbf )==0{if _dgbbga =_gedc .SetByte (_febbb +_cdbb ,_abbfa );
_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _afgg =_edcga -1;_afgg >=0;_afgg --{_febbb =_afgg *_gedc .RowStride ;_fgcg =_afgg *_aaef .RowStride ;
for _cdbb =_bgca -1;_cdbb >=0;_cdbb --{if _abbfa ,_dgbbga =_gedc .GetByte (_febbb +_cdbb );_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _dace ,_dgbbga =_aaef .GetByte (_fgcg +_cdbb );
_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _afgg < _edcga -1{if _bbgc ,_dgbbga =_gedc .GetByte (_febbb +_gedc .RowStride +_cdbb );_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_abbfa |=_bbgc ;};if _cdbb < _bgca -1{if _ccdf ,_dgbbga =_gedc .GetByte (_febbb +_cdbb +1);_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_abbfa |=_ccdf >>7;
};_abbfa &=_dace ;if _abbfa ==0||(^_abbfa )==0{if _dgbbga =_gedc .SetByte (_febbb +_cdbb ,_abbfa );_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_bdcbf =_abbfa ;_abbfa =(_abbfa |(_abbfa >>1)|(_abbfa <<1))&_dace ;if (_abbfa ^_bdcbf )==0{if _dgbbga =_gedc .SetByte (_febbb +_cdbb ,_abbfa );_dgbbga !=nil {return _g .Wrap (_dgbbga ,_fecd ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_gag *Bitmap )countPixels ()int {var (_gbfe int ;_afd uint8 ;_daf byte ;_dafa int ;);_eeeb :=_gag .RowStride ;_bddb :=uint (_gag .Width &0x07);if _bddb !=0{_afd =uint8 ((0xff<<(8-_bddb ))&0xff);_eeeb --;};for _aag :=0;
_aag < _gag .Height ;_aag ++{for _dafa =0;_dafa < _eeeb ;_dafa ++{_daf =_gag .Data [_aag *_gag .RowStride +_dafa ];_gbfe +=int (_dbdb [_daf ]);};if _bddb !=0{_gbfe +=int (_dbdb [_gag .Data [_aag *_gag .RowStride +_dafa ]&_afd ]);};};return _gbfe ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bbbc float64 ,_dcae error ){const _cbfe ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _bbbc ,_g .Error (_cbfe ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _bbbc ,_g .Error (_cbfe ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _bbbc ,_g .Error (_cbfe ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cab ,_ffed :=bm1 .Width ,bm1 .Height ;_egdf ,_acca :=bm2 .Width ,bm2 .Height ;
if _eag (_cab -_egdf )> maxDiffW {return 0,nil ;};if _eag (_ffed -_acca )> maxDiffH {return 0,nil ;};var _ccfb ,_agdd int ;if delX >=0{_ccfb =int (delX +0.5);}else {_ccfb =int (delX -0.5);};if delY >=0{_agdd =int (delY +0.5);}else {_agdd =int (delY -0.5);
};_egg :=bm1 .createTemplate ();if _dcae =_egg .RasterOperation (_ccfb ,_agdd ,_egdf ,_acca ,PixSrc ,bm2 ,0,0);_dcae !=nil {return _bbbc ,_g .Wrap (_dcae ,_cbfe ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _dcae =_egg .RasterOperation (0,0,_cab ,_ffed ,PixSrcAndDst ,bm1 ,0,0);
_dcae !=nil {return _bbbc ,_g .Wrap (_dcae ,_cbfe ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_abgeg :=_egg .countPixels ();_bbbc =float64 (_abgeg )*float64 (_abgeg )/(float64 (area1 )*float64 (area2 ));return _bbbc ,nil ;};func (_dcfe *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _cdge ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_dcfe .Values )==0{return nil ,_g .Error (_cdge ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_befe :=&BitmapsArray {};_dcfe .SortByWidth ();_cgcbe :=-1;_eegeg :=-1;for _eaegd :=0;_eaegd < len (_dcfe .Values );
_eaegd ++{_dcdad :=_dcfe .Values [_eaegd ].Width ;if _dcdad > _cgcbe {_cgcbe =_dcdad ;_eegeg ++;_befe .Values =append (_befe .Values ,&Bitmaps {});};_befe .Values [_eegeg ].AddBitmap (_dcfe .Values [_eaegd ]);};return _befe ,nil ;};func _caf ()(_aff []byte ){_aff =make ([]byte ,256);
for _afbf :=0;_afbf < 256;_afbf ++{_ebeb :=byte (_afbf );_aff [_ebeb ]=(_ebeb &0x01)|((_ebeb &0x04)>>1)|((_ebeb &0x10)>>2)|((_ebeb &0x40)>>3)|((_ebeb &0x02)<<3)|((_ebeb &0x08)<<2)|((_ebeb &0x20)<<1)|(_ebeb &0x80);};return _aff ;};func (_edaa *Bitmap )thresholdPixelSum (_aacg int )bool {var (_fece int ;
_eedc uint8 ;_bbdd byte ;_bef int ;);_deef :=_edaa .RowStride ;_bgga :=uint (_edaa .Width &0x07);if _bgga !=0{_eedc =uint8 ((0xff<<(8-_bgga ))&0xff);_deef --;};for _bfga :=0;_bfga < _edaa .Height ;_bfga ++{for _bef =0;_bef < _deef ;_bef ++{_bbdd =_edaa .Data [_bfga *_edaa .RowStride +_bef ];
_fece +=int (_dbdb [_bbdd ]);};if _bgga !=0{_bbdd =_edaa .Data [_bfga *_edaa .RowStride +_bef ]&_eedc ;_fece +=int (_dbdb [_bbdd ]);};if _fece > _aacg {return true ;};};return false ;};func New (width ,height int )*Bitmap {_bdb :=_dfb (width ,height );
_bdb .Data =make ([]byte ,height *_bdb .RowStride );return _bdb ;};type Boxes []*_fe .Rectangle ;func (_feeb Points )Get (i int )(Point ,error ){if i > len (_feeb )-1{return Point {},_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _feeb [i ],nil ;};func _eg (_gd ,_ca *Bitmap )(_dd error ){const _ab ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ed :=_ca .RowStride ;_fdf :=_gd .RowStride ;_cbg :=_ca .RowStride *4-_gd .RowStride ;
var (_da ,_aef byte ;_fg uint32 ;_de ,_ce ,_fbb ,_fda ,_abg ,_fed ,_eb int ;);for _fbb =0;_fbb < _ca .Height ;_fbb ++{_de =_fbb *_ed ;_ce =4*_fbb *_fdf ;for _fda =0;_fda < _ed ;_fda ++{_da =_ca .Data [_de +_fda ];_fg =_aebf [_da ];_fed =_ce +_fda *4;if _cbg !=0&&(_fda +1)*4> _gd .RowStride {for _abg =_cbg ;
_abg > 0;_abg --{_aef =byte ((_fg >>uint (_abg *8))&0xff);_eb =_fed +(_cbg -_abg );if _dd =_gd .SetByte (_eb ,_aef );_dd !=nil {return _g .Wrapf (_dd ,_ab ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_abg );
};};}else if _dd =_gd .setFourBytes (_fed ,_fg );_dd !=nil {return _g .Wrap (_dd ,_ab ,"");};if _dd =_gd .setFourBytes (_ce +_fda *4,_aebf [_ca .Data [_de +_fda ]]);_dd !=nil {return _g .Wrap (_dd ,_ab ,"");};};for _abg =1;_abg < 4;_abg ++{for _fda =0;
_fda < _fdf ;_fda ++{if _dd =_gd .SetByte (_ce +_abg *_fdf +_fda ,_gd .Data [_ce +_fda ]);_dd !=nil {return _g .Wrapf (_dd ,_ab ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_abg ,_fda );
};};};};return nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _fggcc (d ,s ,hSize ,vSize )};func (_ecfg Points )Size ()int {return len (_ecfg )};func TstGetScaledSymbol (t *_fc .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;
};if scale [0]==1{return sm ;};_dfbfc ,_abba :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_f .NoError (t ,_abba );return _dfbfc ;};func (_egac *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _bcgf ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";
if _ffedd :=_egac .validateIntSlice ();_ffedd !=nil {return nil ,_g .Wrap (_ffedd ,_bcgf ,"");};if _egac .IntSlice .Size ()==0{return nil ,_g .Error (_bcgf ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};_egac .SortByY ();var (_dcdb []*ClassedPoints ;_ddfg int ;);_gfcg :=-1;var _ebde *ClassedPoints ;for _fefa :=0;_fefa < len (_egac .IntSlice );_fefa ++{_ddfg =int (_egac .YAtIndex (_fefa ));if _ddfg !=_gfcg {_ebde =&ClassedPoints {Points :_egac .Points };
_gfcg =_ddfg ;_dcdb =append (_dcdb ,_ebde );};_ebde .IntSlice =append (_ebde .IntSlice ,_egac .IntSlice [_fefa ]);};for _ ,_fdag :=range _dcdb {_fdag .SortByX ();};return _dcdb ,nil ;};func (_dff *Bitmap )Copy ()*Bitmap {_baa :=make ([]byte ,len (_dff .Data ));
copy (_baa ,_dff .Data );return &Bitmap {Width :_dff .Width ,Height :_dff .Height ,RowStride :_dff .RowStride ,Data :_baa ,Color :_dff .Color ,Text :_dff .Text ,BitmapNumber :_dff .BitmapNumber ,Special :_dff .Special };};func TstNSymbol (t *_fc .T ,scale ...int )*Bitmap {_gbabg ,_dcge :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_f .NoError (t ,_dcge );return TstGetScaledSymbol (t ,_gbabg ,scale ...);};func _ffa (_gagf ,_feac *Bitmap ,_afg ,_befc ,_fdca ,_ged ,_ecc int ,_ebaf CombinationOperator )error {var _ebg int ;_gdbbb :=func (){_ebg ++;_fdca +=_feac .RowStride ;_ged +=_gagf .RowStride ;
_ecc +=_gagf .RowStride };for _ebg =_afg ;_ebg < _befc ;_gdbbb (){_gbag :=_fdca ;for _aebb :=_ged ;_aebb <=_ecc ;_aebb ++{_gfc ,_gdfab :=_feac .GetByte (_gbag );if _gdfab !=nil {return _gdfab ;};_bgde ,_gdfab :=_gagf .GetByte (_aebb );if _gdfab !=nil {return _gdfab ;
};if _gdfab =_feac .SetByte (_gbag ,_agfc (_gfc ,_bgde ,_ebaf ));_gdfab !=nil {return _gdfab ;};_gbag ++;};};return nil ;};func (_dega *Selection )setOrigin (_fccd ,_edba int ){_dega .Cy ,_dega .Cx =_fccd ,_edba };func (_cdc *Bitmap )SetDefaultPixel (){for _eebaa :=range _cdc .Data {_cdc .Data [_eebaa ]=byte (0xff);
};};func (_abccd *Selection )findMaxTranslations ()(_ccff ,_eadac ,_eebd ,_cddbb int ){for _ebfe :=0;_ebfe < _abccd .Height ;_ebfe ++{for _efe :=0;_efe < _abccd .Width ;_efe ++{if _abccd .Data [_ebfe ][_efe ]==SelHit {_ccff =_bbg (_ccff ,_abccd .Cx -_efe );
_eadac =_bbg (_eadac ,_abccd .Cy -_ebfe );_eebd =_bbg (_eebd ,_efe -_abccd .Cx );_cddbb =_bbg (_cddbb ,_ebfe -_abccd .Cy );};};};return _ccff ,_eadac ,_eebd ,_cddbb ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _fabg ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_g .Error (_fabg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_g .Error (_fabg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_g .Error (_fabg ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_g .Error (_fabg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_g .Error (_fabg ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_gdcfd ,_dafg :=bm1 .Width ,bm1 .Height ;_fcbf ,_cfdd :=bm2 .Width ,bm2 .Height ;if _ff .Abs (_gdcfd -_fcbf )> maxDiffW {return false ,nil ;};if _ff .Abs (_dafg -_cfdd )> maxDiffH {return false ,nil ;};_gbeeb :=int (delX +_ff .Sign (delX )*0.5);_adga :=int (delY +_ff .Sign (delY )*0.5);
_adeg :=int (_c .Ceil (_c .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fdde :=bm2 .RowStride ;_aegfg :=_bbg (_adga ,0);_ebc :=_bgge (_cfdd +_adga ,_dafg );_fage :=bm1 .RowStride *_aegfg ;_gefg :=bm2 .RowStride *(_aegfg -_adga );
var _cdee int ;if _ebc <=_dafg {_cdee =downcount [_ebc -1];};_bcfb :=_bbg (_gbeeb ,0);_dfaag :=_bgge (_fcbf +_gbeeb ,_gdcfd );var _dfce ,_fegf int ;if _gbeeb >=8{_dfce =_gbeeb >>3;_fage +=_dfce ;_bcfb -=_dfce <<3;_dfaag -=_dfce <<3;_gbeeb &=7;}else if _gbeeb <=-8{_fegf =-((_gbeeb +7)>>3);
_gefg +=_fegf ;_fdde -=_fegf ;_gbeeb +=_fegf <<3;};var (_gdcfe ,_ggec ,_cdaf int ;_fggg ,_aagf ,_gefb byte ;);if _bcfb >=_dfaag ||_aegfg >=_ebc {return false ,nil ;};_adcf :=(_dfaag +7)>>3;switch {case _gbeeb ==0:for _ggec =_aegfg ;_ggec < _ebc ;_ggec ,_fage ,_gefg =_ggec +1,_fage +bm1 .RowStride ,_gefg +bm2 .RowStride {for _cdaf =0;
_cdaf < _adcf ;_cdaf ++{_fggg =bm1 .Data [_fage +_cdaf ]&bm2 .Data [_gefg +_cdaf ];_gdcfe +=tab [_fggg ];};if _gdcfe >=_adeg {return true ,nil ;};if _gaec :=_gdcfe +downcount [_ggec ]-_cdee ;_gaec < _adeg {return false ,nil ;};};case _gbeeb > 0&&_fdde < _adcf :for _ggec =_aegfg ;
_ggec < _ebc ;_ggec ,_fage ,_gefg =_ggec +1,_fage +bm1 .RowStride ,_gefg +bm2 .RowStride {_aagf =bm1 .Data [_fage ];_gefb =bm2 .Data [_gefg ]>>uint (_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];for _cdaf =1;_cdaf < _fdde ;_cdaf ++{_aagf =bm1 .Data [_fage +_cdaf ];
_gefb =bm2 .Data [_gefg +_cdaf ]>>uint (_gbeeb )|bm2 .Data [_gefg +_cdaf -1]<<uint (8-_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];};_aagf =bm1 .Data [_fage +_cdaf ];_gefb =bm2 .Data [_gefg +_cdaf -1]<<uint (8-_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];
if _gdcfe >=_adeg {return true ,nil ;}else if _gdcfe +downcount [_ggec ]-_cdee < _adeg {return false ,nil ;};};case _gbeeb > 0&&_fdde >=_adcf :for _ggec =_aegfg ;_ggec < _ebc ;_ggec ,_fage ,_gefg =_ggec +1,_fage +bm1 .RowStride ,_gefg +bm2 .RowStride {_aagf =bm1 .Data [_fage ];
_gefb =bm2 .Data [_gefg ]>>uint (_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];for _cdaf =1;_cdaf < _adcf ;_cdaf ++{_aagf =bm1 .Data [_fage +_cdaf ];_gefb =bm2 .Data [_gefg +_cdaf ]>>uint (_gbeeb );_gefb |=bm2 .Data [_gefg +_cdaf -1]<<uint (8-_gbeeb );
_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];};if _gdcfe >=_adeg {return true ,nil ;}else if _gdcfe +downcount [_ggec ]-_cdee < _adeg {return false ,nil ;};};case _adcf < _fdde :for _ggec =_aegfg ;_ggec < _ebc ;_ggec ,_fage ,_gefg =_ggec +1,_fage +bm1 .RowStride ,_gefg +bm2 .RowStride {for _cdaf =0;
_cdaf < _adcf ;_cdaf ++{_aagf =bm1 .Data [_fage +_cdaf ];_gefb =bm2 .Data [_gefg +_cdaf ]<<uint (-_gbeeb );_gefb |=bm2 .Data [_gefg +_cdaf +1]>>uint (8+_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];};if _gdcfe >=_adeg {return true ,nil ;}else if _dedf :=_gdcfe +downcount [_ggec ]-_cdee ;
_dedf < _adeg {return false ,nil ;};};case _fdde >=_adcf :for _ggec =_aegfg ;_ggec < _ebc ;_ggec ,_fage ,_gefg =_ggec +1,_fage +bm1 .RowStride ,_gefg +bm2 .RowStride {for _cdaf =0;_cdaf < _adcf ;_cdaf ++{_aagf =bm1 .Data [_fage +_cdaf ];_gefb =bm2 .Data [_gefg +_cdaf ]<<uint (-_gbeeb );
_gefb |=bm2 .Data [_gefg +_cdaf +1]>>uint (8+_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];};_aagf =bm1 .Data [_fage +_cdaf ];_gefb =bm2 .Data [_gefg +_cdaf ]<<uint (-_gbeeb );_fggg =_aagf &_gefb ;_gdcfe +=tab [_fggg ];if _gdcfe >=_adeg {return true ,nil ;
}else if _gdcfe +downcount [_ggec ]-_cdee < _adeg {return false ,nil ;};};};_cabe :=float32 (_gdcfe )*float32 (_gdcfe )/(float32 (area1 )*float32 (area2 ));if _cabe >=scoreThreshold {_bc .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_gdcfe ,_adeg ,_cabe ,scoreThreshold );
};return false ,nil ;};func _gfgd (_dfade *Bitmap ,_fgc ,_fbeb ,_cegf ,_efdg int ,_fcbc RasterOperator ){if _fgc < 0{_cegf +=_fgc ;_fgc =0;};_eedf :=_fgc +_cegf -_dfade .Width ;if _eedf > 0{_cegf -=_eedf ;};if _fbeb < 0{_efdg +=_fbeb ;_fbeb =0;};_badff :=_fbeb +_efdg -_dfade .Height ;
if _badff > 0{_efdg -=_badff ;};if _cegf <=0||_efdg <=0{return ;};if (_fgc &7)==0{_badcf (_dfade ,_fgc ,_fbeb ,_cegf ,_efdg ,_fcbc );}else {_cefce (_dfade ,_fgc ,_fbeb ,_cegf ,_efdg ,_fcbc );};};func _dfb (_bcf ,_bbdb int )*Bitmap {return &Bitmap {Width :_bcf ,Height :_bbdb ,RowStride :(_bcf +7)>>3};
};func _eeec (_gbdce ,_gcfd *Bitmap ,_effb *Selection )(*Bitmap ,error ){const _fcbfe ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _bbdf error ;if _gbdce ,_bbdf =_gcfg (_gbdce ,_gcfd ,_effb );_bbdf !=nil {return nil ,_bbdf ;};_cagc ,_bbdf :=_eebf (nil ,_gcfd ,_effb );
if _bbdf !=nil {return nil ,_g .Wrap (_bbdf ,_fcbfe ,"");};if _ ,_bbdf =_ebae (_gbdce ,_cagc ,_effb );_bbdf !=nil {return nil ,_g .Wrap (_bbdf ,_fcbfe ,"");};return _gbdce ,nil ;};type fillSegment struct{_daeb int ;_eafc int ;_defe int ;_dfdca int ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_ffce :=_egggd (h ,w ,"");
_ffce .setOrigin (cy ,cx );var _dacb ,_ddbf int ;for _dacb =0;_dacb < h ;_dacb ++{for _ddbf =0;_ddbf < w ;_ddbf ++{_ffce .Data [_dacb ][_ddbf ]=tp ;};};return _ffce ;};func (_adbd *Bitmaps )makeSizeIndicator (_cccb ,_gfag int ,_cfcf LocationFilter ,_dfaef SizeComparison )(_gggd *_ff .NumSlice ,_ddbfe error ){const _dfggc ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _adbd ==nil {return nil ,_g .Error (_dfggc ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _cfcf {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_dfggc ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_cfcf );
};switch _dfaef {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_dfggc ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_dfaef );
};_gggd =&_ff .NumSlice {};var (_cddegd ,_fdab ,_dcaa int ;_bagc *Bitmap ;);for _ ,_bagc =range _adbd .Values {_cddegd =0;_fdab ,_dcaa =_bagc .Width ,_bagc .Height ;switch _cfcf {case LocSelectWidth :if (_dfaef ==SizeSelectIfLT &&_fdab < _cccb )||(_dfaef ==SizeSelectIfGT &&_fdab > _cccb )||(_dfaef ==SizeSelectIfLTE &&_fdab <=_cccb )||(_dfaef ==SizeSelectIfGTE &&_fdab >=_cccb )||(_dfaef ==SizeSelectIfEQ &&_fdab ==_cccb ){_cddegd =1;
};case LocSelectHeight :if (_dfaef ==SizeSelectIfLT &&_dcaa < _gfag )||(_dfaef ==SizeSelectIfGT &&_dcaa > _gfag )||(_dfaef ==SizeSelectIfLTE &&_dcaa <=_gfag )||(_dfaef ==SizeSelectIfGTE &&_dcaa >=_gfag )||(_dfaef ==SizeSelectIfEQ &&_dcaa ==_gfag ){_cddegd =1;
};case LocSelectIfEither :if (_dfaef ==SizeSelectIfLT &&(_fdab < _cccb ||_dcaa < _gfag ))||(_dfaef ==SizeSelectIfGT &&(_fdab > _cccb ||_dcaa > _gfag ))||(_dfaef ==SizeSelectIfLTE &&(_fdab <=_cccb ||_dcaa <=_gfag ))||(_dfaef ==SizeSelectIfGTE &&(_fdab >=_cccb ||_dcaa >=_gfag ))||(_dfaef ==SizeSelectIfEQ &&(_fdab ==_cccb ||_dcaa ==_gfag )){_cddegd =1;
};case LocSelectIfBoth :if (_dfaef ==SizeSelectIfLT &&(_fdab < _cccb &&_dcaa < _gfag ))||(_dfaef ==SizeSelectIfGT &&(_fdab > _cccb &&_dcaa > _gfag ))||(_dfaef ==SizeSelectIfLTE &&(_fdab <=_cccb &&_dcaa <=_gfag ))||(_dfaef ==SizeSelectIfGTE &&(_fdab >=_cccb &&_dcaa >=_gfag ))||(_dfaef ==SizeSelectIfEQ &&(_fdab ==_cccb &&_dcaa ==_gfag )){_cddegd =1;
};};_gggd .AddInt (_cddegd );};return _gggd ,nil ;};func (_bdgce *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _gaeba ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_bdgce .Values )==0{return nil ,_g .Error (_gaeba ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_acab :=&BitmapsArray {};_bdgce .SortByHeight ();_daae :=-1;_cdbfc :=-1;for _bcda :=0;_bcda < len (_bdgce .Values );_bcda ++{_aedb :=_bdgce .Values [_bcda ].Height ;if _aedb > _daae {_daae =_aedb ;_cdbfc ++;_acab .Values =append (_acab .Values ,&Bitmaps {});
};_acab .Values [_cdbfc ].AddBitmap (_bdgce .Values [_bcda ]);};return _acab ,nil ;};func _egde (_ebafe *Bitmap ,_eddce *Bitmap ,_badd int )(_deaa error ){const _cddf ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";
_dbcd :=_bgge (_ebafe .Height ,_eddce .Height );_gdgf :=_bgge (_ebafe .RowStride ,_eddce .RowStride );switch _badd {case 4:_deaa =_geccg (_ebafe ,_eddce ,_dbcd ,_gdgf );case 8:_deaa =_egbd (_ebafe ,_eddce ,_dbcd ,_gdgf );default:return _g .Errorf (_cddf ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_badd );
};if _deaa !=nil {return _g .Wrap (_deaa ,_cddf ,"");};return nil ;};func (_dfgf *ClassedPoints )YAtIndex (i int )float32 {return (*_dfgf .Points )[_dfgf .IntSlice [i ]].Y };func (_ebec *Bitmap )InverseData (){_ebec .inverseData ()};func MakePixelCentroidTab8 ()[]int {return _eadc ()};
func (_egfe *Points )AddPoint (x ,y float32 ){*_egfe =append (*_egfe ,Point {x ,y })};func _bfbga (_fgbf ,_geca *Bitmap ,_bdce ,_baab int )(*Bitmap ,error ){const _agcd ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _geca ==nil {return nil ,_g .Error (_agcd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _bdce < 1||_baab < 1{return nil ,_g .Error (_agcd ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bdce ==1&&_baab ==1{_daab ,_daeg :=_gcdf (_fgbf ,_geca );if _daeg !=nil {return nil ,_g .Wrap (_daeg ,_agcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _daab ,nil ;};if _bdce ==1||_baab ==1{_cgde :=SelCreateBrick (_baab ,_bdce ,_baab /2,_bdce /2,SelHit );_bbdbb ,_eafa :=_ebae (_fgbf ,_geca ,_cgde );if _eafa !=nil {return nil ,_g .Wrap (_eafa ,_agcd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bbdbb ,nil ;};_faadb :=SelCreateBrick (1,_bdce ,0,_bdce /2,SelHit );_bceb :=SelCreateBrick (_baab ,1,_baab /2,0,SelHit );_dgfdf ,_adfg :=_ebae (nil ,_geca ,_faadb );if _adfg !=nil {return nil ,_g .Wrap (_adfg ,_agcd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fgbf ,_adfg =_ebae (_fgbf ,_dgfdf ,_bceb );if _adfg !=nil {return nil ,_g .Wrap (_adfg ,_agcd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fgbf ,nil ;};func _gbef (_dec *Bitmap ,_ecd ...int )(_degd *Bitmap ,_adf error ){const _cc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _dec ==nil {return nil ,_g .Error (_cc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ecd )==0||len (_ecd )> 4{return nil ,_g .Error (_cc ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _ecd [0]<=0{_bc .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_degd ,_adf =_gcdf (nil ,_dec );if _adf !=nil {return nil ,_g .Wrap (_adf ,_cc ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _degd ,nil ;};_abcc :=_caf ();_degd =_dec ;for _gba ,_cdd :=range _ecd {if _cdd <=0{break ;};_degd ,_adf =_cge (_degd ,_cdd ,_abcc );if _adf !=nil {return nil ,_g .Wrapf (_adf ,_cc ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_gba );
};};return _degd ,nil ;};func (_egbf *byWidth )Len ()int {return len (_egbf .Values )};func TstASymbol (t *_fc .T )*Bitmap {t .Helper ();_degg :=New (6,6);_f .NoError (t ,_degg .SetPixel (1,0,1));_f .NoError (t ,_degg .SetPixel (2,0,1));_f .NoError (t ,_degg .SetPixel (3,0,1));
_f .NoError (t ,_degg .SetPixel (4,0,1));_f .NoError (t ,_degg .SetPixel (5,1,1));_f .NoError (t ,_degg .SetPixel (1,2,1));_f .NoError (t ,_degg .SetPixel (2,2,1));_f .NoError (t ,_degg .SetPixel (3,2,1));_f .NoError (t ,_degg .SetPixel (4,2,1));_f .NoError (t ,_degg .SetPixel (5,2,1));
_f .NoError (t ,_degg .SetPixel (0,3,1));_f .NoError (t ,_degg .SetPixel (5,3,1));_f .NoError (t ,_degg .SetPixel (0,4,1));_f .NoError (t ,_degg .SetPixel (5,4,1));_f .NoError (t ,_degg .SetPixel (1,5,1));_f .NoError (t ,_degg .SetPixel (2,5,1));_f .NoError (t ,_degg .SetPixel (3,5,1));
_f .NoError (t ,_degg .SetPixel (4,5,1));_f .NoError (t ,_degg .SetPixel (5,5,1));return _degg ;};func TstRSymbol (t *_fc .T ,scale ...int )*Bitmap {_agee ,_edbd :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_edbd );return TstGetScaledSymbol (t ,_agee ,scale ...);
};func (_bed *Bitmap )addBorderGeneral (_ccca ,_gga ,_cdbe ,_adg int ,_aad int )(*Bitmap ,error ){const _beg ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ccca < 0||_gga < 0||_cdbe < 0||_adg < 0{return nil ,_g .Error (_beg ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_fgd ,_fcf :=_bed .Width ,_bed .Height ;_bgd :=_fgd +_ccca +_gga ;_gbaa :=_fcf +_cdbe +_adg ;_cfc :=New (_bgd ,_gbaa );_cfc .Color =_bed .Color ;_egbe :=PixClr ;if _aad > 0{_egbe =PixSet ;};_aac :=_cfc .RasterOperation (0,0,_ccca ,_gbaa ,_egbe ,nil ,0,0);
if _aac !=nil {return nil ,_g .Wrap (_aac ,_beg ,"\u006c\u0065\u0066\u0074");};_aac =_cfc .RasterOperation (_bgd -_gga ,0,_gga ,_gbaa ,_egbe ,nil ,0,0);if _aac !=nil {return nil ,_g .Wrap (_aac ,_beg ,"\u0072\u0069\u0067h\u0074");};_aac =_cfc .RasterOperation (0,0,_bgd ,_cdbe ,_egbe ,nil ,0,0);
if _aac !=nil {return nil ,_g .Wrap (_aac ,_beg ,"\u0074\u006f\u0070");};_aac =_cfc .RasterOperation (0,_gbaa -_adg ,_bgd ,_adg ,_egbe ,nil ,0,0);if _aac !=nil {return nil ,_g .Wrap (_aac ,_beg ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_aac =_cfc .RasterOperation (_ccca ,_cdbe ,_fgd ,_fcf ,PixSrc ,_bed ,0,0);
if _aac !=nil {return nil ,_g .Wrap (_aac ,_beg ,"\u0063\u006f\u0070\u0079");};return _cfc ,nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_fgb :=make ([]Point ,len (bms ));_eccac :=_eadc ();_aaa :=_bcccb ();var _feed error ;for _agab ,_fddg :=range bms {_fgb [_agab ],_feed =_fddg .centroid (_eccac ,_aaa );
if _feed !=nil {return nil ,_feed ;};};_ebge :=Points (_fgb );return &_ebge ,nil ;};type SizeSelection int ;func (_ecff *Bitmap )CountPixels ()int {return _ecff .countPixels ()};func TstTSymbol (t *_fc .T ,scale ...int )*Bitmap {_deaae ,_aedf :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_f .NoError (t ,_aedf );return TstGetScaledSymbol (t ,_deaae ,scale ...);};func (_aefgd Points )YSorter ()func (_gfbg ,_daaa int )bool {return func (_edfc ,_eeed int )bool {return _aefgd [_edfc ].Y < _aefgd [_eeed ].Y };};func _eag (_cfb int )int {if _cfb < 0{return -_cfb ;
};return _cfb ;};func TstPSymbol (t *_fc .T )*Bitmap {t .Helper ();_cgda :=New (5,8);_f .NoError (t ,_cgda .SetPixel (0,0,1));_f .NoError (t ,_cgda .SetPixel (1,0,1));_f .NoError (t ,_cgda .SetPixel (2,0,1));_f .NoError (t ,_cgda .SetPixel (3,0,1));_f .NoError (t ,_cgda .SetPixel (4,1,1));
_f .NoError (t ,_cgda .SetPixel (0,1,1));_f .NoError (t ,_cgda .SetPixel (4,2,1));_f .NoError (t ,_cgda .SetPixel (0,2,1));_f .NoError (t ,_cgda .SetPixel (4,3,1));_f .NoError (t ,_cgda .SetPixel (0,3,1));_f .NoError (t ,_cgda .SetPixel (0,4,1));_f .NoError (t ,_cgda .SetPixel (1,4,1));
_f .NoError (t ,_cgda .SetPixel (2,4,1));_f .NoError (t ,_cgda .SetPixel (3,4,1));_f .NoError (t ,_cgda .SetPixel (0,5,1));_f .NoError (t ,_cgda .SetPixel (0,6,1));_f .NoError (t ,_cgda .SetPixel (0,7,1));return _cgda ;};func (_bfagg *ClassedPoints )XAtIndex (i int )float32 {return (*_bfagg .Points )[_bfagg .IntSlice [i ]].X };
func _bebd (_eagd ,_gaeb *Bitmap ,_afae *Selection )(*Bitmap ,error ){const _gcdg ="\u006f\u0070\u0065\u006e";var _bcbd error ;_eagd ,_bcbd =_gcfg (_eagd ,_gaeb ,_afae );if _bcbd !=nil {return nil ,_g .Wrap (_bcbd ,_gcdg ,"");};_edbg ,_bcbd :=_ebae (nil ,_gaeb ,_afae );
if _bcbd !=nil {return nil ,_g .Wrap (_bcbd ,_gcdg ,"");};_ ,_bcbd =_eebf (_eagd ,_edbg ,_afae );if _bcbd !=nil {return nil ,_g .Wrap (_bcbd ,_gcdg ,"");};return _eagd ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;
PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;
PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;
);func (_adcg *Bitmap )Equivalent (s *Bitmap )bool {return _adcg .equivalent (s )};func _fa ()(_abc [256]uint16 ){for _bcg :=0;_bcg < 256;_bcg ++{if _bcg &0x01!=0{_abc [_bcg ]|=0x3;};if _bcg &0x02!=0{_abc [_bcg ]|=0xc;};if _bcg &0x04!=0{_abc [_bcg ]|=0x30;
};if _bcg &0x08!=0{_abc [_bcg ]|=0xc0;};if _bcg &0x10!=0{_abc [_bcg ]|=0x300;};if _bcg &0x20!=0{_abc [_bcg ]|=0xc00;};if _bcg &0x40!=0{_abc [_bcg ]|=0x3000;};if _bcg &0x80!=0{_abc [_bcg ]|=0xc000;};};return _abc ;};func (_eefbc *byHeight )Less (i ,j int )bool {return _eefbc .Values [i ].Height < _eefbc .Values [j ].Height };
func (_agga *Bitmaps )AddBox (box *_fe .Rectangle ){_agga .Boxes =append (_agga .Boxes ,box )};func TstImageBitmap ()*Bitmap {return _ffad .Copy ()};func (_gaaa *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gdgae ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_ffgg ,_ebbc :=_gaaa .selectByIndexes (idx );if _ebbc !=nil {return nil ,_g .Wrap (_ebbc ,_gdgae ,"");};return _ffgg ,nil ;};func _fcgff (_cbda *Bitmap ,_bab int )(*Bitmap ,error ){const _adcb ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _cbda ==nil {return nil ,_g .Error (_adcb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bab <=0{return nil ,_g .Error (_adcb ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _bab ==1{_geae ,_fcgg :=_gcdf (nil ,_cbda );if _fcgg !=nil {return nil ,_g .Wrap (_fcgg ,_adcb ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _geae ,nil ;};_fggbg ,_dgd :=_deg (_cbda ,_bab ,_bab );if _dgd !=nil {return nil ,_g .Wrap (_dgd ,_adcb ,"");
};return _fggbg ,nil ;};func (_gab *Bitmap )equivalent (_dba *Bitmap )bool {if _gab ==_dba {return true ;};if !_gab .SizesEqual (_dba ){return false ;};_fcff :=_ccb (_gab ,_dba ,CmbOpXor );_bgcb :=_gab .countPixels ();_cae :=int (0.25*float32 (_bgcb ));
if _fcff .thresholdPixelSum (_cae ){return false ;};var (_fcad [9][9]int ;_fdfc [18][9]int ;_dcff [9][18]int ;_cag int ;_abge int ;);_adag :=9;_ecbg :=_gab .Height /_adag ;_cfe :=_gab .Width /_adag ;_gaa ,_gfde :=_ecbg /2,_cfe /2;if _ecbg < _cfe {_gaa =_cfe /2;
_gfde =_ecbg /2;};_fead :=float64 (_gaa )*float64 (_gfde )*_c .Pi ;_eed :=int (float64 (_ecbg *_cfe /2)*0.9);_dfgd :=int (float64 (_cfe *_ecbg /2)*0.9);for _ccdg :=0;_ccdg < _adag ;_ccdg ++{_ebb :=_cfe *_ccdg +_cag ;var _bede int ;if _ccdg ==_adag -1{_cag =0;
_bede =_gab .Width ;}else {_bede =_ebb +_cfe ;if ((_gab .Width -_cag )%_adag )> 0{_cag ++;_bede ++;};};for _effd :=0;_effd < _adag ;_effd ++{_gdgc :=_ecbg *_effd +_abge ;var _fad int ;if _effd ==_adag -1{_abge =0;_fad =_gab .Height ;}else {_fad =_gdgc +_ecbg ;
if (_gab .Height -_abge )%_adag > 0{_abge ++;_fad ++;};};var _ffb ,_bcd ,_badb ,_aaga int ;_bda :=(_ebb +_bede )/2;_fdc :=(_gdgc +_fad )/2;for _cgb :=_ebb ;_cgb < _bede ;_cgb ++{for _gbab :=_gdgc ;_gbab < _fad ;_gbab ++{if _fcff .GetPixel (_cgb ,_gbab ){if _cgb < _bda {_ffb ++;
}else {_bcd ++;};if _gbab < _fdc {_aaga ++;}else {_badb ++;};};};};_fcad [_ccdg ][_effd ]=_ffb +_bcd ;_fdfc [_ccdg *2][_effd ]=_ffb ;_fdfc [_ccdg *2+1][_effd ]=_bcd ;_dcff [_ccdg ][_effd *2]=_aaga ;_dcff [_ccdg ][_effd *2+1]=_badb ;};};for _geaa :=0;_geaa < _adag *2-1;
_geaa ++{for _dbc :=0;_dbc < (_adag -1);_dbc ++{var _edcc int ;for _baf :=0;_baf < 2;_baf ++{for _ggfg :=0;_ggfg < 2;_ggfg ++{_edcc +=_fdfc [_geaa +_baf ][_dbc +_ggfg ];};};if _edcc > _dfgd {return false ;};};};for _abdf :=0;_abdf < (_adag -1);_abdf ++{for _bggc :=0;
_bggc < ((_adag *2)-1);_bggc ++{var _dfbe int ;for _egc :=0;_egc < 2;_egc ++{for _cdbc :=0;_cdbc < 2;_cdbc ++{_dfbe +=_dcff [_abdf +_egc ][_bggc +_cdbc ];};};if _dfbe > _eed {return false ;};};};for _gdf :=0;_gdf < (_adag -2);_gdf ++{for _fff :=0;_fff < (_adag -2);
_fff ++{var _agf ,_fggc int ;for _bga :=0;_bga < 3;_bga ++{for _gefe :=0;_gefe < 3;_gefe ++{if _bga ==_gefe {_agf +=_fcad [_gdf +_bga ][_fff +_gefe ];};if (2-_bga )==_gefe {_fggc +=_fcad [_gdf +_bga ][_fff +_gefe ];};};};if _agf > _dfgd ||_fggc > _dfgd {return false ;
};};};for _dcffa :=0;_dcffa < (_adag -1);_dcffa ++{for _gdbb :=0;_gdbb < (_adag -1);_gdbb ++{var _cca int ;for _efag :=0;_efag < 2;_efag ++{for _bcdg :=0;_bcdg < 2;_bcdg ++{_cca +=_fcad [_dcffa +_efag ][_gdbb +_bcdg ];};};if float64 (_cca )> _fead {return false ;
};};};return true ;};func _eebf (_fgaa *Bitmap ,_afa *Bitmap ,_bfdg *Selection )(*Bitmap ,error ){var (_afgd *Bitmap ;_ggbd error ;);_fgaa ,_ggbd =_aece (_fgaa ,_afa ,_bfdg ,&_afgd );if _ggbd !=nil {return nil ,_ggbd ;};if _ggbd =_fgaa .clearAll ();_ggbd !=nil {return nil ,_ggbd ;
};var _gbfcd SelectionValue ;for _edff :=0;_edff < _bfdg .Height ;_edff ++{for _aeab :=0;_aeab < _bfdg .Width ;_aeab ++{_gbfcd =_bfdg .Data [_edff ][_aeab ];if _gbfcd ==SelHit {if _ggbd =_fgaa .RasterOperation (_aeab -_bfdg .Cx ,_edff -_bfdg .Cy ,_afa .Width ,_afa .Height ,PixSrcOrDst ,_afgd ,0,0);
_ggbd !=nil {return nil ,_ggbd ;};};};};return _fgaa ,nil ;};func _gabf (_eeef *Bitmap ,_dafgc ,_acee int ,_bafc ,_bebde int ,_dcda RasterOperator ,_bfefd *Bitmap ,_deb ,_eedcb int )error {var _ecdb ,_bcbgb ,_ageg ,_efb int ;if _dafgc < 0{_deb -=_dafgc ;
_bafc +=_dafgc ;_dafgc =0;};if _deb < 0{_dafgc -=_deb ;_bafc +=_deb ;_deb =0;};_ecdb =_dafgc +_bafc -_eeef .Width ;if _ecdb > 0{_bafc -=_ecdb ;};_bcbgb =_deb +_bafc -_bfefd .Width ;if _bcbgb > 0{_bafc -=_bcbgb ;};if _acee < 0{_eedcb -=_acee ;_bebde +=_acee ;
_acee =0;};if _eedcb < 0{_acee -=_eedcb ;_bebde +=_eedcb ;_eedcb =0;};_ageg =_acee +_bebde -_eeef .Height ;if _ageg > 0{_bebde -=_ageg ;};_efb =_eedcb +_bebde -_bfefd .Height ;if _efb > 0{_bebde -=_efb ;};if _bafc <=0||_bebde <=0{return nil ;};var _egeb error ;
switch {case _dafgc &7==0&&_deb &7==0:_egeb =_gcdea (_eeef ,_dafgc ,_acee ,_bafc ,_bebde ,_dcda ,_bfefd ,_deb ,_eedcb );case _dafgc &7==_deb &7:_egeb =_ceaa (_eeef ,_dafgc ,_acee ,_bafc ,_bebde ,_dcda ,_bfefd ,_deb ,_eedcb );default:_egeb =_cgbg (_eeef ,_dafgc ,_acee ,_bafc ,_bebde ,_dcda ,_bfefd ,_deb ,_eedcb );
};if _egeb !=nil {return _g .Wrap (_egeb ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func (_gbb *Bitmap )ToImage ()_fe .Image {_facf ,_cbf :=_a .NewImage (_gbb .Width ,_gbb .Height ,1,1,_gbb .Data ,nil ,nil );if _cbf !=nil {_bc .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cbf );
};return _facf ;};func (_ebd *Bitmap )Equals (s *Bitmap )bool {if len (_ebd .Data )!=len (s .Data )||_ebd .Width !=s .Width ||_ebd .Height !=s .Height {return false ;};for _dced :=0;_dced < _ebd .Height ;_dced ++{_fcc :=_dced *_ebd .RowStride ;for _dfad :=0;
_dfad < _ebd .RowStride ;_dfad ++{if _ebd .Data [_fcc +_dfad ]!=s .Data [_fcc +_dfad ]{return false ;};};};return true ;};func (_gfd *Bitmap )addPadBits ()(_aee error ){const _geff ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_egea :=_gfd .Width %8;if _egea ==0{return nil ;};_bfd :=_gfd .Width /8;_fede :=_ae .NewReader (_gfd .Data );_edc :=make ([]byte ,_gfd .Height *_gfd .RowStride );_dca :=_ae .NewWriterMSB (_edc );_ceg :=make ([]byte ,_bfd );var (_daaf int ;_cccf uint64 ;
);for _daaf =0;_daaf < _gfd .Height ;_daaf ++{if _ ,_aee =_fede .Read (_ceg );_aee !=nil {return _g .Wrap (_aee ,_geff ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_aee =_dca .Write (_ceg );_aee !=nil {return _g .Wrap (_aee ,_geff ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _cccf ,_aee =_fede .ReadBits (byte (_egea ));_aee !=nil {return _g .Wrap (_aee ,_geff ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _aee =_dca .WriteByte (byte (_cccf )<<uint (8-_egea ));_aee !=nil {return _g .Wrap (_aee ,_geff ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_gfd .Data =_dca .Data ();return nil ;};func (_dgbc *Bitmaps )SortByWidth (){_ebga :=(*byWidth )(_dgbc );_d .Sort (_ebga )};func (_cffc *ClassedPoints )Swap (i ,j int ){_cffc .IntSlice [i ],_cffc .IntSlice [j ]=_cffc .IntSlice [j ],_cffc .IntSlice [i ];
};func (_agc *Boxes )makeSizeIndicator (_gfcc ,_faea int ,_ccea LocationFilter ,_gbaab SizeComparison )*_ff .NumSlice {_aefgc :=&_ff .NumSlice {};var _edg ,_eedb ,_ccce int ;for _ ,_aecc :=range *_agc {_edg =0;_eedb ,_ccce =_aecc .Dx (),_aecc .Dy ();switch _ccea {case LocSelectWidth :if (_gbaab ==SizeSelectIfLT &&_eedb < _gfcc )||(_gbaab ==SizeSelectIfGT &&_eedb > _gfcc )||(_gbaab ==SizeSelectIfLTE &&_eedb <=_gfcc )||(_gbaab ==SizeSelectIfGTE &&_eedb >=_gfcc ){_edg =1;
};case LocSelectHeight :if (_gbaab ==SizeSelectIfLT &&_ccce < _faea )||(_gbaab ==SizeSelectIfGT &&_ccce > _faea )||(_gbaab ==SizeSelectIfLTE &&_ccce <=_faea )||(_gbaab ==SizeSelectIfGTE &&_ccce >=_faea ){_edg =1;};case LocSelectIfEither :if (_gbaab ==SizeSelectIfLT &&(_ccce < _faea ||_eedb < _gfcc ))||(_gbaab ==SizeSelectIfGT &&(_ccce > _faea ||_eedb > _gfcc ))||(_gbaab ==SizeSelectIfLTE &&(_ccce <=_faea ||_eedb <=_gfcc ))||(_gbaab ==SizeSelectIfGTE &&(_ccce >=_faea ||_eedb >=_gfcc )){_edg =1;
};case LocSelectIfBoth :if (_gbaab ==SizeSelectIfLT &&(_ccce < _faea &&_eedb < _gfcc ))||(_gbaab ==SizeSelectIfGT &&(_ccce > _faea &&_eedb > _gfcc ))||(_gbaab ==SizeSelectIfLTE &&(_ccce <=_faea &&_eedb <=_gfcc ))||(_gbaab ==SizeSelectIfGTE &&(_ccce >=_faea &&_eedb >=_gfcc )){_edg =1;
};};_aefgc .AddInt (_edg );};return _aefgc ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_fcaee *byHeight )Len ()int {return len (_fcaee .Values )};func TstESymbol (t *_fc .T ,scale ...int )*Bitmap {_becfg ,_bcbef :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});
_f .NoError (t ,_bcbef );return TstGetScaledSymbol (t ,_becfg ,scale ...);};func TstDSymbol (t *_fc .T ,scale ...int )*Bitmap {_fdcc ,_dfadf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_f .NoError (t ,_dfadf );return TstGetScaledSymbol (t ,_fdcc ,scale ...);
};func TstOSymbol (t *_fc .T ,scale ...int )*Bitmap {_cbcf ,_bdbb :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_f .NoError (t ,_bdbb );return TstGetScaledSymbol (t ,_cbcf ,scale ...);};func _dfaa (_eeba ,_ffc *Bitmap ,_aeb int ,_edad []byte ,_fcg int )(_bfbc error ){const _ebaa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_cdde ,_eff ,_bff ,_ffe ,_cbe ,_gdc ,_ccd ,_dbd int ;_dceb ,_dedd uint32 ;_bad ,_dfe byte ;_bgf uint16 ;);_gade :=make ([]byte ,4);_gdbe :=make ([]byte ,4);for _bff =0;_bff < _eeba .Height -1;_bff ,_ffe =_bff +2,_ffe +1{_cdde =_bff *_eeba .RowStride ;
_eff =_ffe *_ffc .RowStride ;for _cbe ,_gdc =0,0;_cbe < _fcg ;_cbe ,_gdc =_cbe +4,_gdc +1{for _ccd =0;_ccd < 4;_ccd ++{_dbd =_cdde +_cbe +_ccd ;if _dbd <=len (_eeba .Data )-1&&_dbd < _cdde +_eeba .RowStride {_gade [_ccd ]=_eeba .Data [_dbd ];}else {_gade [_ccd ]=0x00;
};_dbd =_cdde +_eeba .RowStride +_cbe +_ccd ;if _dbd <=len (_eeba .Data )-1&&_dbd < _cdde +(2*_eeba .RowStride ){_gdbe [_ccd ]=_eeba .Data [_dbd ];}else {_gdbe [_ccd ]=0x00;};};_dceb =_ea .BigEndian .Uint32 (_gade );_dedd =_ea .BigEndian .Uint32 (_gdbe );
_dedd &=_dceb ;_dedd &=_dedd <<1;_dedd &=0xaaaaaaaa;_dceb =_dedd |(_dedd <<7);_bad =byte (_dceb >>24);_dfe =byte ((_dceb >>8)&0xff);_dbd =_eff +_gdc ;if _dbd +1==len (_ffc .Data )-1||_dbd +1>=_eff +_ffc .RowStride {_ffc .Data [_dbd ]=_edad [_bad ];if _bfbc =_ffc .SetByte (_dbd ,_edad [_bad ]);
_bfbc !=nil {return _g .Wrapf (_bfbc ,_ebaa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dbd );};}else {_bgf =(uint16 (_edad [_bad ])<<8)|uint16 (_edad [_dfe ]);if _bfbc =_ffc .setTwoBytes (_dbd ,_bgf );_bfbc !=nil {return _g .Wrapf (_bfbc ,_ebaa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbd );
};_gdc ++;};};};return nil ;};func _gaaf (_ccgd ...MorphProcess )(_cgeef error ){const _cac ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _bddg ,_bfeff int ;for _gfdb ,_dedc :=range _ccgd {if _cgeef =_dedc .verify (_gfdb ,&_bddg ,&_bfeff );
_cgeef !=nil {return _g .Wrap (_cgeef ,_cac ,"");};};if _bfeff !=0&&_bddg !=0{return _g .Error (_cac ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};type byHeight Bitmaps ;func NewClassedPoints (points *Points ,classes _ff .IntSlice )(*ClassedPoints ,error ){const _afcb ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_g .Error (_afcb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_g .Error (_afcb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_gdaa :=&ClassedPoints {Points :points ,IntSlice :classes };if _bcba :=_gdaa .validateIntSlice ();_bcba !=nil {return nil ,_g .Wrap (_bcba ,_afcb ,"");
};return _gdaa ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _ccb (_bdfe ,_ecca *Bitmap ,_acb CombinationOperator )*Bitmap {_cgcba :=New (_bdfe .Width ,_bdfe .Height );
for _bfcg :=0;_bfcg < len (_cgcba .Data );_bfcg ++{_cgcba .Data [_bfcg ]=_agfc (_bdfe .Data [_bfcg ],_ecca .Data [_bfcg ],_acb );};return _cgcba ;};func (_aegf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_gcad *Boxes ,_cegb error ){const _cbdf ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _aegf ==nil {return nil ,_g .Error (_cbdf ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_g .Error (_cbdf ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _gcad ,_cegb =_aegf .connComponentsBB (connectivity );_cegb !=nil {return nil ,_g .Wrap (_cegb ,_cbdf ,"");};}else {if _gcad ,_cegb =_aegf .connComponentsBitmapsBB (bms ,connectivity );_cegb !=nil {return nil ,_g .Wrap (_cegb ,_cbdf ,"");
};};return _gcad ,nil ;};var MorphBC BoundaryCondition ;func _bbg (_facb ,_gce int )int {if _facb > _gce {return _facb ;};return _gce ;};func (_aegfa *Bitmaps )GetBox (i int )(*_fe .Rectangle ,error ){const _dcgcd ="\u0047\u0065\u0074\u0042\u006f\u0078";
if _aegfa ==nil {return nil ,_g .Error (_dcgcd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_aegfa .Boxes )-1{return nil ,_g .Errorf (_dcgcd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _aegfa .Boxes [i ],nil ;};func _ceaa (_ecdd *Bitmap ,_cebfg ,_dgdd ,_geba ,_gege int ,_dfgg RasterOperator ,_cddeg *Bitmap ,_ffag ,_dbgc int )error {var (_gebf bool ;_daacb bool ;_bdgf int ;_fgba int ;_dcef int ;_gdad bool ;_ggg byte ;_ceffg int ;
_gcda int ;_ffaa int ;_cgdf ,_eebg int ;);_dbfc :=8-(_cebfg &7);_cdca :=_fgaf [_dbfc ];_bdac :=_ecdd .RowStride *_dgdd +(_cebfg >>3);_ffbg :=_cddeg .RowStride *_dbgc +(_ffag >>3);if _geba < _dbfc {_gebf =true ;_cdca &=_bcdc [8-_dbfc +_geba ];};if !_gebf {_bdgf =(_geba -_dbfc )>>3;
if _bdgf > 0{_daacb =true ;_fgba =_bdac +1;_dcef =_ffbg +1;};};_ceffg =(_cebfg +_geba )&7;if !(_gebf ||_ceffg ==0){_gdad =true ;_ggg =_bcdc [_ceffg ];_gcda =_bdac +1+_bdgf ;_ffaa =_ffbg +1+_bdgf ;};switch _dfgg {case PixSrc :for _cgdf =0;_cgdf < _gege ;
_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],_cddeg .Data [_ffbg ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]=_cddeg .Data [_dcef +_eebg ];
};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],_cddeg .Data [_ffaa ],_ggg );_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixNotSrc :for _cgdf =0;
_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],^_cddeg .Data [_ffbg ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]=^_cddeg .Data [_dcef +_eebg ];
};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],^_cddeg .Data [_ffaa ],_ggg );_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixSrcOrDst :for _cgdf =0;
_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],_cddeg .Data [_ffbg ]|_ecdd .Data [_bdac ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;
_eebg ++{_ecdd .Data [_fgba +_eebg ]|=_cddeg .Data [_dcef +_eebg ];};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],_cddeg .Data [_ffaa ]|_ecdd .Data [_gcda ],_ggg );
_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixSrcAndDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],_cddeg .Data [_ffbg ]&_ecdd .Data [_bdac ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;
};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]&=_cddeg .Data [_dcef +_eebg ];};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],_cddeg .Data [_ffaa ]&_ecdd .Data [_gcda ],_ggg );
_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixSrcXorDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],_cddeg .Data [_ffbg ]^_ecdd .Data [_bdac ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;
};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]^=_cddeg .Data [_dcef +_eebg ];};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],_cddeg .Data [_ffaa ]^_ecdd .Data [_gcda ],_ggg );
_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixNotSrcOrDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],^(_cddeg .Data [_ffbg ])|_ecdd .Data [_bdac ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;
};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]|=^(_cddeg .Data [_dcef +_eebg ]);};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],^(_cddeg .Data [_ffaa ])|_ecdd .Data [_gcda ],_ggg );
_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixNotSrcAndDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],^(_cddeg .Data [_ffbg ])&_ecdd .Data [_bdac ],_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;
};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]&=^_cddeg .Data [_dcef +_eebg ];};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],^(_cddeg .Data [_ffaa ])&_ecdd .Data [_gcda ],_ggg );
_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixSrcOrNotDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],_cddeg .Data [_ffbg ]|^(_ecdd .Data [_bdac ]),_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;
};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]=_cddeg .Data [_dcef +_eebg ]|^(_ecdd .Data [_fgba +_eebg ]);};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;
_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],_cddeg .Data [_ffaa ]|^(_ecdd .Data [_gcda ]),_ggg );_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixSrcAndNotDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],_cddeg .Data [_ffbg ]&^(_ecdd .Data [_bdac ]),_cdca );
_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]=_cddeg .Data [_dcef +_eebg ]&^(_ecdd .Data [_fgba +_eebg ]);};_fgba +=_ecdd .RowStride ;
_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],_cddeg .Data [_ffaa ]&^(_ecdd .Data [_gcda ]),_ggg );_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixNotPixSrcOrDst :for _cgdf =0;
_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],^(_cddeg .Data [_ffbg ]|_ecdd .Data [_bdac ]),_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;
_eebg ++{_ecdd .Data [_fgba +_eebg ]=^(_cddeg .Data [_dcef +_eebg ]|_ecdd .Data [_fgba +_eebg ]);};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],^(_cddeg .Data [_ffaa ]|_ecdd .Data [_gcda ]),_ggg );
_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixNotPixSrcAndDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],^(_cddeg .Data [_ffbg ]&_ecdd .Data [_bdac ]),_cdca );_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;
};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]=^(_cddeg .Data [_dcef +_eebg ]&_ecdd .Data [_fgba +_eebg ]);};_fgba +=_ecdd .RowStride ;_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;
_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],^(_cddeg .Data [_ffaa ]&_ecdd .Data [_gcda ]),_ggg );_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};case PixNotPixSrcXorDst :for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_bdac ]=_fbga (_ecdd .Data [_bdac ],^(_cddeg .Data [_ffbg ]^_ecdd .Data [_bdac ]),_cdca );
_bdac +=_ecdd .RowStride ;_ffbg +=_cddeg .RowStride ;};if _daacb {for _cgdf =0;_cgdf < _gege ;_cgdf ++{for _eebg =0;_eebg < _bdgf ;_eebg ++{_ecdd .Data [_fgba +_eebg ]=^(_cddeg .Data [_dcef +_eebg ]^_ecdd .Data [_fgba +_eebg ]);};_fgba +=_ecdd .RowStride ;
_dcef +=_cddeg .RowStride ;};};if _gdad {for _cgdf =0;_cgdf < _gege ;_cgdf ++{_ecdd .Data [_gcda ]=_fbga (_ecdd .Data [_gcda ],^(_cddeg .Data [_ffaa ]^_ecdd .Data [_gcda ]),_ggg );_gcda +=_ecdd .RowStride ;_ffaa +=_cddeg .RowStride ;};};default:_bc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dfgg );
return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _faeac (_edgb *_ff .Stack )(_bbf *fillSegment ,_gfbc error ){const _gebac ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _edgb ==nil {return nil ,_g .Error (_gebac ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _edgb .Aux ==nil {return nil ,_g .Error (_gebac ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_gfcd ,_eeeg :=_edgb .Pop ();if !_eeeg {return nil ,nil ;};_eaeec ,_eeeg :=_gfcd .(*fillSegment );
if !_eeeg {return nil ,_g .Error (_gebac ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_bbf =&fillSegment {_eaeec ._daeb ,_eaeec ._eafc ,_eaeec ._defe +_eaeec ._dfdca ,_eaeec ._dfdca };
_edgb .Aux .Push (_eaeec );return _bbf ,nil ;};var (_bcdc =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_fgaf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func TstAddSymbol (t *_fc .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_becfb :=_fe .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_becfb );*x +=sym .Width +space ;};func _agdb (_agcc *_ff .Stack ,_acec ,_cdcab ,_ceffbb ,_addf ,_bea int ,_fbgg *_fe .Rectangle )(_fedd error ){const _cfbed ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _agcc ==nil {return _g .Error (_cfbed ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fbgg ==nil {return _g .Error (_cfbed ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_fbgg .Min .X =_ff .Min (_fbgg .Min .X ,_acec );_fbgg .Max .X =_ff .Max (_fbgg .Max .X ,_cdcab );_fbgg .Min .Y =_ff .Min (_fbgg .Min .Y ,_ceffbb );_fbgg .Max .Y =_ff .Max (_fbgg .Max .Y ,_ceffbb );if !(_ceffbb +_addf >=0&&_ceffbb +_addf <=_bea ){return nil ;
};if _agcc .Aux ==nil {return _g .Error (_cfbed ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _ggab *fillSegment ;_cdeb ,_eede :=_agcc .Aux .Pop ();if _eede {if _ggab ,_eede =_cdeb .(*fillSegment );
!_eede {return _g .Error (_cfbed ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_ggab =&fillSegment {};
};_ggab ._daeb =_acec ;_ggab ._eafc =_cdcab ;_ggab ._defe =_ceffbb ;_ggab ._dfdca =_addf ;_agcc .Push (_ggab );return nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _agfc (oldByte ,newByte ,op );};func (_ddbg *Bitmap )centroid (_bdbf ,_cdab []int )(Point ,error ){_aabc :=Point {};
_ddbg .setPadBits (0);if len (_bdbf )==0{_bdbf =_eadc ();};if len (_cdab )==0{_cdab =_bcccb ();};var _dac ,_bdga ,_fdfce ,_beef ,_ebebd ,_afda int ;var _gbage byte ;for _ebebd =0;_ebebd < _ddbg .Height ;_ebebd ++{_adfef :=_ddbg .RowStride *_ebebd ;_beef =0;
for _afda =0;_afda < _ddbg .RowStride ;_afda ++{_gbage =_ddbg .Data [_adfef +_afda ];if _gbage !=0{_beef +=_cdab [_gbage ];_dac +=_bdbf [_gbage ]+_afda *8*_cdab [_gbage ];};};_fdfce +=_beef ;_bdga +=_beef *_ebebd ;};if _fdfce !=0{_aabc .X =float32 (_dac )/float32 (_fdfce );
_aabc .Y =float32 (_bdga )/float32 (_fdfce );};return _aabc ,nil ;};func _gffe (_bfecb *Bitmap ,_cdccc *_ff .Stack ,_edfg ,_ddea int )(_cgec *_fe .Rectangle ,_afdef error ){const _acaa ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _bfecb ==nil {return nil ,_g .Error (_acaa ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _cdccc ==nil {return nil ,_g .Error (_acaa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_ccaea ,_bcbdg :=_bfecb .Width ,_bfecb .Height ;_eccg :=_ccaea -1;_eddg :=_bcbdg -1;if _edfg < 0||_edfg > _eccg ||_ddea < 0||_ddea > _eddg ||!_bfecb .GetPixel (_edfg ,_ddea ){return nil ,nil ;};var _efcc *_fe .Rectangle ;_efcc ,_afdef =Rect (100000,100000,0,0);
if _afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"");};if _afdef =_agdb (_cdccc ,_edfg ,_edfg ,_ddea ,1,_eddg ,_efcc );_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _afdef =_agdb (_cdccc ,_edfg ,_edfg ,_ddea +1,-1,_eddg ,_efcc );
_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_efcc .Min .X ,_efcc .Max .X =_edfg ,_edfg ;_efcc .Min .Y ,_efcc .Max .Y =_ddea ,_ddea ;var (_bdgcd *fillSegment ;
_fbec int ;);for _cdccc .Len ()> 0{if _bdgcd ,_afdef =_faeac (_cdccc );_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"");};_ddea =_bdgcd ._defe ;for _edfg =_bdgcd ._daeb ;_edfg >=0&&_bfecb .GetPixel (_edfg ,_ddea );_edfg --{if _afdef =_bfecb .SetPixel (_edfg ,_ddea ,0);
_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"");};};if _edfg >=_bdgcd ._daeb {for _edfg ++;_edfg <=_bdgcd ._eafc &&_edfg <=_eccg &&!_bfecb .GetPixel (_edfg ,_ddea );_edfg ++{};_fbec =_edfg ;if !(_edfg <=_bdgcd ._eafc &&_edfg <=_eccg ){continue ;
};}else {_fbec =_edfg +1;if _fbec < _bdgcd ._daeb -1{if _afdef =_agdb (_cdccc ,_fbec ,_bdgcd ._daeb -1,_bdgcd ._defe ,-_bdgcd ._dfdca ,_eddg ,_efcc );_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_edfg =_bdgcd ._daeb +1;};for {for ;_edfg <=_eccg &&_bfecb .GetPixel (_edfg ,_ddea );_edfg ++{if _afdef =_bfecb .SetPixel (_edfg ,_ddea ,0);_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _afdef =_agdb (_cdccc ,_fbec ,_edfg -1,_bdgcd ._defe ,_bdgcd ._dfdca ,_eddg ,_efcc );
_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _edfg > _bdgcd ._eafc +1{if _afdef =_agdb (_cdccc ,_bdgcd ._eafc +1,_edfg -1,_bdgcd ._defe ,-_bdgcd ._dfdca ,_eddg ,_efcc );_afdef !=nil {return nil ,_g .Wrap (_afdef ,_acaa ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _edfg ++;_edfg <=_bdgcd ._eafc &&_edfg <=_eccg &&!_bfecb .GetPixel (_edfg ,_ddea );_edfg ++{};_fbec =_edfg ;if !(_edfg <=_bdgcd ._eafc &&_edfg <=_eccg ){break ;};};};_efcc .Max .X ++;_efcc .Max .Y ++;return _efcc ,nil ;};func (_gbdc *Bitmap )setEightFullBytes (_aec int ,_cfdf uint64 )error {if _aec +7> len (_gbdc .Data )-1{return _g .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gbdc .Data [_aec ]=byte ((_cfdf &0xff00000000000000)>>56);_gbdc .Data [_aec +1]=byte ((_cfdf &0xff000000000000)>>48);_gbdc .Data [_aec +2]=byte ((_cfdf &0xff0000000000)>>40);_gbdc .Data [_aec +3]=byte ((_cfdf &0xff00000000)>>32);_gbdc .Data [_aec +4]=byte ((_cfdf &0xff000000)>>24);
_gbdc .Data [_aec +5]=byte ((_cfdf &0xff0000)>>16);_gbdc .Data [_aec +6]=byte ((_cfdf &0xff00)>>8);_gbdc .Data [_aec +7]=byte (_cfdf &0xff);return nil ;};func _bgfb (_gedg ,_eaac *Bitmap ,_cefg ,_ffcg ,_cff ,_gbacd ,_eeg ,_gdfb ,_dcad ,_gagg int ,_afdg CombinationOperator )error {var _aceb int ;
_dge :=func (){_aceb ++;_cff +=_eaac .RowStride ;_gbacd +=_gedg .RowStride ;_eeg +=_gedg .RowStride };for _aceb =_cefg ;_aceb < _ffcg ;_dge (){var _dbe uint16 ;_cfg :=_cff ;for _cecg :=_gbacd ;_cecg <=_eeg ;_cecg ++{_dfab ,_dbg :=_eaac .GetByte (_cfg );
if _dbg !=nil {return _dbg ;};_cced ,_dbg :=_gedg .GetByte (_cecg );if _dbg !=nil {return _dbg ;};_dbe =(_dbe |uint16 (_cced ))<<uint (_gagg );_cced =byte (_dbe >>8);if _cecg ==_eeg {_cced =_cbec (uint (_gdfb ),_cced );};if _dbg =_eaac .SetByte (_cfg ,_agfc (_dfab ,_cced ,_afdg ));
_dbg !=nil {return _dbg ;};_cfg ++;_dbe <<=uint (_dcad );};};return nil ;};func (_fcfff *ClassedPoints )ySortFunction ()func (_afde int ,_aebd int )bool {return func (_afad ,_eeae int )bool {return _fcfff .YAtIndex (_afad )< _fcfff .YAtIndex (_eeae )};
};func _feg ()(_dcb [256]uint64 ){for _ede :=0;_ede < 256;_ede ++{if _ede &0x01!=0{_dcb [_ede ]|=0xff;};if _ede &0x02!=0{_dcb [_ede ]|=0xff00;};if _ede &0x04!=0{_dcb [_ede ]|=0xff0000;};if _ede &0x08!=0{_dcb [_ede ]|=0xff000000;};if _ede &0x10!=0{_dcb [_ede ]|=0xff00000000;
};if _ede &0x20!=0{_dcb [_ede ]|=0xff0000000000;};if _ede &0x40!=0{_dcb [_ede ]|=0xff000000000000;};if _ede &0x80!=0{_dcb [_ede ]|=0xff00000000000000;};};return _dcb ;};func _dddf (_eefb *Bitmap ,_eabg ...MorphProcess )(_bfef *Bitmap ,_gefd error ){const _gbbf ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _eefb ==nil {return nil ,_g .Error (_gbbf ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_eabg )==0{return nil ,_g .Error (_gbbf ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _gefd =_gaaf (_eabg ...);
_gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");};var _gcbc ,_edffg ,_bffg int ;_bfef =_eefb .Copy ();for _ ,_cbee :=range _eabg {switch _cbee .Operation {case MopDilation :_gcbc ,_edffg =_cbee .getWidthHeight ();_bfef ,_gefd =DilateBrick (nil ,_bfef ,_gcbc ,_edffg );
if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");};case MopErosion :_gcbc ,_edffg =_cbee .getWidthHeight ();_bfef ,_gefd =_bfbga (nil ,_bfef ,_gcbc ,_edffg );if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");};case MopOpening :_gcbc ,_edffg =_cbee .getWidthHeight ();
_bfef ,_gefd =_gedb (nil ,_bfef ,_gcbc ,_edffg );if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");};case MopClosing :_gcbc ,_edffg =_cbee .getWidthHeight ();_bfef ,_gefd =_accg (nil ,_bfef ,_gcbc ,_edffg );if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");
};case MopRankBinaryReduction :_bfef ,_gefd =_gbef (_bfef ,_cbee .Arguments ...);if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");};case MopReplicativeBinaryExpansion :_bfef ,_gefd =_fcgff (_bfef ,_cbee .Arguments [0]);if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");
};case MopAddBorder :_bffg =_cbee .Arguments [0];_bfef ,_gefd =_bfef .AddBorder (_bffg ,0);if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"");};default:return nil ,_g .Error (_gbbf ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _bffg > 0{_bfef ,_gefd =_bfef .RemoveBorder (_bffg );if _gefd !=nil {return nil ,_g .Wrap (_gefd ,_gbbf ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _bfef ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
func (_fcea *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gbfb *Bitmaps ,_aae *Boxes ,_daba error ){const _dgbd ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _fcea ==nil {return nil ,nil ,_g .Error (_dgbd ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_g .Error (_dgbd ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _fcea .Zero (){_aae =&Boxes {};_gbfb =&Bitmaps {};return _gbfb ,_aae ,nil ;};switch components {case ComponentConn :_gbfb =&Bitmaps {};if _aae ,_daba =_fcea .ConnComponents (_gbfb ,8);_daba !=nil {return nil ,nil ,_g .Wrap (_daba ,_dgbd ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_cggg ,_gcce :=MorphSequence (_fcea ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _gcce !=nil {return nil ,nil ,_g .Wrap (_gcce ,_dgbd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _bc .Log .IsLogLevel (_bc .LogLevelTrace ){_bc .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_cggg .String ());
};_dda :=&Bitmaps {};_aae ,_gcce =_cggg .ConnComponents (_dda ,8);if _gcce !=nil {return nil ,nil ,_g .Wrap (_gcce ,_dgbd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _bc .Log .IsLogLevel (_bc .LogLevelTrace ){_bc .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_dda .String ());
};if _gbfb ,_gcce =_dda .ClipToBitmap (_fcea );_gcce !=nil {return nil ,nil ,_g .Wrap (_gcce ,_dgbd ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_dadd :=1;
var _bcfc *Bitmap ;switch {case _fcea .XResolution <=200:_bcfc =_fcea ;case _fcea .XResolution <=400:_dadd =2;_bcfc ,_daba =_gbef (_fcea ,1,0,0,0);if _daba !=nil {return nil ,nil ,_g .Wrap (_daba ,_dgbd ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_dadd =4;_bcfc ,_daba =_gbef (_fcea ,1,1,0,0);if _daba !=nil {return nil ,nil ,_g .Wrap (_daba ,_dgbd ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_bage ,_ ,_cagf :=_edcg (_bcfc );if _cagf !=nil {return nil ,nil ,_g .Wrap (_cagf ,_dgbd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_bdbga ,_cagf :=_fcgff (_bage ,_dadd );if _cagf !=nil {return nil ,nil ,_g .Wrap (_cagf ,_dgbd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_cdac :=&Bitmaps {};if _aae ,_cagf =_bdbga .ConnComponents (_cdac ,4);_cagf !=nil {return nil ,nil ,_g .Wrap (_cagf ,_dgbd ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _gbfb ,_cagf =_cdac .ClipToBitmap (_fcea );_cagf !=nil {return nil ,nil ,_g .Wrap (_cagf ,_dgbd ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gbfb ,_daba =_gbfb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _daba !=nil {return nil ,nil ,_g .Wrap (_daba ,_dgbd ,"");};_aae ,_daba =_aae .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _daba !=nil {return nil ,nil ,_g .Wrap (_daba ,_dgbd ,"");};return _gbfb ,_aae ,nil ;};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func _eacba (_eacef *Bitmap ,_dgfabd ,_cfbd ,_bafd ,_gfce int ,_defa RasterOperator ,_gbcd *Bitmap ,_dgbb ,_baac int )error {const _ggbcf ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";
if _eacef ==nil {return _g .Error (_ggbcf ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _defa ==PixDst {return nil ;};switch _defa {case PixClr ,PixSet ,PixNotDst :_gfgd (_eacef ,_dgfabd ,_cfbd ,_bafd ,_gfce ,_defa );
return nil ;};if _gbcd ==nil {_bc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _g .Error (_ggbcf ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _cbae :=_gabf (_eacef ,_dgfabd ,_cfbd ,_bafd ,_gfce ,_defa ,_gbcd ,_dgbb ,_baac );_cbae !=nil {return _g .Wrap (_cbae ,_ggbcf ,"");
};return nil ;};func (_dade *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _ccedc ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _dade ==nil {return nil ,_g .Error (_ccedc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_dade .Values )-1{return nil ,_g .Errorf (_ccedc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dade .Values [i ],nil ;};func TstWordBitmap (t *_fc .T ,scale ...int )*Bitmap {_ffaac :=1;
if len (scale )> 0{_ffaac =scale [0];};_daee :=3;_bbcd :=9+7+15+2*_daee ;_aacgb :=5+_daee +5;_ebdc :=New (_bbcd *_ffaac ,_aacgb *_ffaac );_ddad :=&Bitmaps {};var _dbff *int ;_daee *=_ffaac ;_fbgfg :=0;_dbff =&_fbgfg ;_dcccc :=0;_adaa :=TstDSymbol (t ,scale ...);
TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,_daee );_adaa =TstISymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstTSymbol (t ,scale ...);
TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,_daee );_adaa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstWSymbol (t ,scale ...);
TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,0);*_dbff =0;_dcccc =5*_ffaac +_daee ;_adaa =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,_daee );
_adaa =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );
_adaa =TstESymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,1*_ffaac );_adaa =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_ddad ,_adaa ,_dbff ,_dcccc ,0);TstWriteSymbols (t ,_ddad ,_ebdc );return _ebdc ;};func _deg (_eca *Bitmap ,_bcb ,_dc int )(*Bitmap ,error ){const _gbf ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _eca ==nil {return nil ,_g .Error (_gbf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bcb <=0||_dc <=0{return nil ,_g .Error (_gbf ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _bcb ==_dc {if _bcb ==1{_ge ,_ba :=_gcdf (nil ,_eca );if _ba !=nil {return nil ,_g .Wrap (_ba ,_gbf ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ge ,nil ;};if _bcb ==2||_bcb ==4||_bcb ==8{_ad ,_bfa :=_fbf (_eca ,_bcb );
if _bfa !=nil {return nil ,_g .Wrap (_bfa ,_gbf ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _ad ,nil ;};};_ded :=_bcb *_eca .Width ;_gf :=_dc *_eca .Height ;_ddfe :=New (_ded ,_gf );_cgf :=_ddfe .RowStride ;
var (_ef ,_afb ,_fca ,_ggb ,_bae int ;_gad byte ;_cd error ;);for _afb =0;_afb < _eca .Height ;_afb ++{_ef =_dc *_afb *_cgf ;for _fca =0;_fca < _eca .Width ;_fca ++{if _ag :=_eca .GetPixel (_fca ,_afb );_ag {_bae =_bcb *_fca ;for _ggb =0;_ggb < _bcb ;_ggb ++{_ddfe .setBit (_ef *8+_bae +_ggb );
};};};for _ggb =1;_ggb < _dc ;_ggb ++{_daag :=_ef +_ggb *_cgf ;for _agb :=0;_agb < _cgf ;_agb ++{if _gad ,_cd =_ddfe .GetByte (_ef +_agb );_cd !=nil {return nil ,_g .Wrapf (_cd ,_gbf ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ggb );
};if _cd =_ddfe .SetByte (_daag +_agb ,_gad );_cd !=nil {return nil ,_g .Wrap (_cd ,_gbf ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _ddfe ,nil ;};func (_dfba *ClassedPoints )Len ()int {return _dfba .IntSlice .Size ()};
func _faf (_agg ,_gbee *Bitmap ,_bdcb int ,_gef []byte ,_eaf int )(_bfb error ){const _efc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_gcc ,_dg ,_gfa ,_bce ,_gacb ,_ffdg ,_cda ,_addd int ;
_abb ,_cdae uint32 ;_fbbc ,_ac byte ;_fea uint16 ;);_ega :=make ([]byte ,4);_cad :=make ([]byte ,4);for _gfa =0;_gfa < _agg .Height -1;_gfa ,_bce =_gfa +2,_bce +1{_gcc =_gfa *_agg .RowStride ;_dg =_bce *_gbee .RowStride ;for _gacb ,_ffdg =0,0;_gacb < _eaf ;
_gacb ,_ffdg =_gacb +4,_ffdg +1{for _cda =0;_cda < 4;_cda ++{_addd =_gcc +_gacb +_cda ;if _addd <=len (_agg .Data )-1&&_addd < _gcc +_agg .RowStride {_ega [_cda ]=_agg .Data [_addd ];}else {_ega [_cda ]=0x00;};_addd =_gcc +_agg .RowStride +_gacb +_cda ;
if _addd <=len (_agg .Data )-1&&_addd < _gcc +(2*_agg .RowStride ){_cad [_cda ]=_agg .Data [_addd ];}else {_cad [_cda ]=0x00;};};_abb =_ea .BigEndian .Uint32 (_ega );_cdae =_ea .BigEndian .Uint32 (_cad );_cdae |=_abb ;_cdae |=_cdae <<1;_cdae &=0xaaaaaaaa;
_abb =_cdae |(_cdae <<7);_fbbc =byte (_abb >>24);_ac =byte ((_abb >>8)&0xff);_addd =_dg +_ffdg ;if _addd +1==len (_gbee .Data )-1||_addd +1>=_dg +_gbee .RowStride {_gbee .Data [_addd ]=_gef [_fbbc ];}else {_fea =(uint16 (_gef [_fbbc ])<<8)|uint16 (_gef [_ac ]);
if _bfb =_gbee .setTwoBytes (_addd ,_fea );_bfb !=nil {return _g .Wrapf (_bfb ,_efc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_addd );
};_ffdg ++;};};};return nil ;};func (_debf *Bitmaps )selectByIndexes (_dccd []int )(*Bitmaps ,error ){_edadag :=&Bitmaps {};for _ ,_dedb :=range _dccd {_fcdge ,_dbfd :=_debf .GetBitmap (_dedb );if _dbfd !=nil {return nil ,_g .Wrap (_dbfd ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_edadag .AddBitmap (_fcdge );};return _edadag ,nil ;};func _cefce (_cebg *Bitmap ,_ecbea ,_ffec int ,_dde ,_cdeeg int ,_eeeda RasterOperator ){var (_aadd bool ;_fbbbg bool ;_aede int ;_fegb int ;_gcg int ;_bedb int ;_gdgg bool ;_deag byte ;);_cfega :=8-(_ecbea &7);
_agbbd :=_fgaf [_cfega ];_dcce :=_cebg .RowStride *_ffec +(_ecbea >>3);if _dde < _cfega {_aadd =true ;_agbbd &=_bcdc [8-_cfega +_dde ];};if !_aadd {_aede =(_dde -_cfega )>>3;if _aede !=0{_fbbbg =true ;_fegb =_dcce +1;};};_gcg =(_ecbea +_dde )&7;if !(_aadd ||_gcg ==0){_gdgg =true ;
_deag =_bcdc [_gcg ];_bedb =_dcce +1+_aede ;};var _bfgaf ,_gdcb int ;switch _eeeda {case PixClr :for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{_cebg .Data [_dcce ]=_fbga (_cebg .Data [_dcce ],0x0,_agbbd );_dcce +=_cebg .RowStride ;};if _fbbbg {for _bfgaf =0;
_bfgaf < _cdeeg ;_bfgaf ++{for _gdcb =0;_gdcb < _aede ;_gdcb ++{_cebg .Data [_fegb +_gdcb ]=0x0;};_fegb +=_cebg .RowStride ;};};if _gdgg {for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{_cebg .Data [_bedb ]=_fbga (_cebg .Data [_bedb ],0x0,_deag );_bedb +=_cebg .RowStride ;
};};case PixSet :for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{_cebg .Data [_dcce ]=_fbga (_cebg .Data [_dcce ],0xff,_agbbd );_dcce +=_cebg .RowStride ;};if _fbbbg {for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{for _gdcb =0;_gdcb < _aede ;_gdcb ++{_cebg .Data [_fegb +_gdcb ]=0xff;
};_fegb +=_cebg .RowStride ;};};if _gdgg {for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{_cebg .Data [_bedb ]=_fbga (_cebg .Data [_bedb ],0xff,_deag );_bedb +=_cebg .RowStride ;};};case PixNotDst :for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{_cebg .Data [_dcce ]=_fbga (_cebg .Data [_dcce ],^_cebg .Data [_dcce ],_agbbd );
_dcce +=_cebg .RowStride ;};if _fbbbg {for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{for _gdcb =0;_gdcb < _aede ;_gdcb ++{_cebg .Data [_fegb +_gdcb ]=^(_cebg .Data [_fegb +_gdcb ]);};_fegb +=_cebg .RowStride ;};};if _gdgg {for _bfgaf =0;_bfgaf < _cdeeg ;_bfgaf ++{_cebg .Data [_bedb ]=_fbga (_cebg .Data [_bedb ],^_cebg .Data [_bedb ],_deag );
_bedb +=_cebg .RowStride ;};};};};func _fbf (_eac *Bitmap ,_cec int )(*Bitmap ,error ){const _ee ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _eac ==nil {return nil ,_g .Error (_ee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cec ==1{return _gcdf (nil ,_eac );};if _cec !=2&&_cec !=4&&_cec !=8{return nil ,_g .Error (_ee ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_fec :=_cec *_eac .Width ;_ddf :=_cec *_eac .Height ;_gg :=New (_fec ,_ddf );var _fgg error ;switch _cec {case 2:_fgg =_gb (_gg ,_eac );case 4:_fgg =_eg (_gg ,_eac );case 8:_fgg =_fbg (_gg ,_eac );};if _fgg !=nil {return nil ,_g .Wrap (_fgg ,_ee ,"");
};return _gg ,nil ;};func (_ece *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _ccefb ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _ece ==nil {return nil ,_g .Error (_ccefb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_ece .Values )-1{return nil ,_g .Errorf (_ccefb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ece .Values [i ],nil ;};func _fbga (_fafd ,_baag ,_dccf byte )byte {return (_fafd &^(_dccf ))|(_baag &_dccf )};
func (_dfeb *Bitmap )SetByte (index int ,v byte )error {if index > len (_dfeb .Data )-1||index < 0{return _g .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_dfeb .Data [index ]=v ;return nil ;};func (_bfbg *Bitmap )setBit (_degf int ){_bfbg .Data [(_degf >>3)]|=0x80>>uint (_degf &7)};func MakePixelSumTab8 ()[]int {return _bcccb ()};func _egbd (_aecf ,_ebac *Bitmap ,_bfebg ,_cbdc int )(_dcec error ){const _ffae ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_febf ,_eagc ,_afbb ,_cgge int ;_acgb ,_abdbc ,_bbab ,_afadg ,_bfbfba ,_eec ,_ffgb ,_eada byte ;);for _febf =0;_febf < _bfebg ;_febf ++{_afbb =_febf *_aecf .RowStride ;_cgge =_febf *_ebac .RowStride ;for _eagc =0;_eagc < _cbdc ;_eagc ++{if _acgb ,_dcec =_aecf .GetByte (_afbb +_eagc );
_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _abdbc ,_dcec =_ebac .GetByte (_cgge +_eagc );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _febf > 0{if _bbab ,_dcec =_aecf .GetByte (_afbb -_aecf .RowStride +_eagc );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_acgb |=_bbab |(_bbab <<1)|(_bbab >>1);if _eagc > 0{if _eada ,_dcec =_aecf .GetByte (_afbb -_aecf .RowStride +_eagc -1);
_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_acgb |=_eada <<7;};if _eagc < _cbdc -1{if _eada ,_dcec =_aecf .GetByte (_afbb -_aecf .RowStride +_eagc +1);
_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_acgb |=_eada >>7;};};if _eagc > 0{if _afadg ,_dcec =_aecf .GetByte (_afbb +_eagc -1);_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u006a\u0020\u003e \u0030");
};_acgb |=_afadg <<7;};_acgb &=_abdbc ;if _acgb ==0||^_acgb ==0{if _dcec =_aecf .SetByte (_afbb +_eagc ,_acgb );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};
for {_ffgb =_acgb ;_acgb =(_acgb |(_acgb >>1)|(_acgb <<1))&_abdbc ;if (_acgb ^_ffgb )==0{if _dcec =_aecf .SetByte (_afbb +_eagc ,_acgb );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _febf =_bfebg -1;_febf >=0;_febf --{_afbb =_febf *_aecf .RowStride ;_cgge =_febf *_ebac .RowStride ;for _eagc =_cbdc -1;_eagc >=0;_eagc --{if _acgb ,_dcec =_aecf .GetByte (_afbb +_eagc );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _abdbc ,_dcec =_ebac .GetByte (_cgge +_eagc );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _febf < _bfebg -1{if _bfbfba ,_dcec =_aecf .GetByte (_afbb +_aecf .RowStride +_eagc );
_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_acgb |=_bfbfba |(_bfbfba <<1)|_bfbfba >>1;if _eagc > 0{if _eada ,_dcec =_aecf .GetByte (_afbb +_aecf .RowStride +_eagc -1);
_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_acgb |=_eada <<7;};if _eagc < _cbdc -1{if _eada ,_dcec =_aecf .GetByte (_afbb +_aecf .RowStride +_eagc +1);
_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_acgb |=_eada >>7;};};if _eagc < _cbdc -1{if _eec ,_dcec =_aecf .GetByte (_afbb +_eagc +1);_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_acgb |=_eec >>7;};_acgb &=_abdbc ;if _acgb ==0||(^_acgb )==0{if _dcec =_aecf .SetByte (_afbb +_eagc ,_acgb );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_ffgb =_acgb ;
_acgb =(_acgb |(_acgb >>1)|(_acgb <<1))&_abdbc ;if (_acgb ^_ffgb )==0{if _dcec =_aecf .SetByte (_afbb +_eagc ,_acgb );_dcec !=nil {return _g .Wrap (_dcec ,_ffae ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func (_dgdb Points )GetIntX (i int )(int ,error ){if i >=len (_dgdb ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dgdb [i ].X ),nil ;};func (_ffcd *Bitmap )CreateTemplate ()*Bitmap {return _ffcd .createTemplate ()};func (_fgga *Bitmap )setEightPartlyBytes (_efaa ,_dbfe int ,_gfe uint64 )(_ebbda error ){var (_gca byte ;_gbeb int ;);const _fbgd ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _bfbf :=1;_bfbf <=_dbfe ;_bfbf ++{_gbeb =64-_bfbf *8;_gca =byte (_gfe >>uint (_gbeb )&0xff);_bc .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_gca ,_efaa ,_efaa +_bfbf -1,_dbfe ,_gbeb );
if _ebbda =_fgga .SetByte (_efaa +_bfbf -1,_gca );_ebbda !=nil {return _g .Wrap (_ebbda ,_fbgd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_ecbe :=_fgga .RowStride *8-_fgga .Width ;if _ecbe ==0{return nil ;};_gbeb -=8;_gca =byte (_gfe >>uint (_gbeb )&0xff)<<uint (_ecbe );
if _ebbda =_fgga .SetByte (_efaa +_dbfe ,_gca );_ebbda !=nil {return _g .Wrap (_ebbda ,_fbgd ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _cgcb ,_ebeda int ;_ggd :=src .RowStride -1;
if x < 0{_ebeda =-x ;x =0;}else if x +src .Width > dst .Width {_ggd -=src .Width +x -dst .Width ;};if y < 0{_cgcb =-y ;y =0;_ebeda +=src .RowStride ;_ggd +=src .RowStride ;}else if y +src .Height > dst .Height {_cgcb =src .Height +y -dst .Height ;};var (_dfbf int ;
_dabc error ;);_adcd :=x &0x07;_bdbg :=8-_adcd ;_gbfc :=src .Width &0x07;_fefc :=_bdbg -_gbfc ;_edab :=_bdbg &0x07!=0;_gace :=src .Width <=((_ggd -_ebeda )<<3)+_bdbg ;_ddgc :=dst .GetByteIndex (x ,y );_cegd :=_cgcb +dst .Height ;if src .Height > _cegd {_dfbf =_cegd ;
}else {_dfbf =src .Height ;};switch {case !_edab :_dabc =_ffa (src ,dst ,_cgcb ,_dfbf ,_ddgc ,_ebeda ,_ggd ,op );case _gace :_dabc =_bgfb (src ,dst ,_cgcb ,_dfbf ,_ddgc ,_ebeda ,_ggd ,_fefc ,_adcd ,_bdbg ,op );default:_dabc =_ceff (src ,dst ,_cgcb ,_dfbf ,_ddgc ,_ebeda ,_ggd ,_fefc ,_adcd ,_bdbg ,op ,_gbfc );
};return _dabc ;};func (_ecbf *Bitmap )nextOnPixelLow (_cdbf ,_aeed ,_dgga ,_gaf ,_cccfb int )(_gdga _fe .Point ,_eedg bool ,_eaa error ){const _eadf ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_bfec int ;_cgc byte ;);_baee :=_cccfb *_dgga ;_bddc :=_baee +(_gaf /8);if _cgc ,_eaa =_ecbf .GetByte (_bddc );_eaa !=nil {return _gdga ,false ,_g .Wrap (_eaa ,_eadf ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _cgc !=0{_gcf :=_gaf -(_gaf %8)+7;for _bfec =_gaf ;_bfec <=_gcf &&_bfec < _cdbf ;_bfec ++{if _ecbf .GetPixel (_bfec ,_cccfb ){_gdga .X =_bfec ;_gdga .Y =_cccfb ;return _gdga ,true ,nil ;};};};_bfag :=(_gaf /8)+1;_bfec =8*_bfag ;var _aab int ;for _bddc =_baee +_bfag ;
_bfec < _cdbf ;_bddc ,_bfec =_bddc +1,_bfec +8{if _cgc ,_eaa =_ecbf .GetByte (_bddc );_eaa !=nil {return _gdga ,false ,_g .Wrap (_eaa ,_eadf ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _cgc ==0{continue ;
};for _aab =0;_aab < 8&&_bfec < _cdbf ;_aab ,_bfec =_aab +1,_bfec +1{if _ecbf .GetPixel (_bfec ,_cccfb ){_gdga .X =_bfec ;_gdga .Y =_cccfb ;return _gdga ,true ,nil ;};};};for _gff :=_cccfb +1;_gff < _aeed ;_gff ++{_baee =_gff *_dgga ;for _bddc ,_bfec =_baee ,0;
_bfec < _cdbf ;_bddc ,_bfec =_bddc +1,_bfec +8{if _cgc ,_eaa =_ecbf .GetByte (_bddc );_eaa !=nil {return _gdga ,false ,_g .Wrap (_eaa ,_eadf ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _cgc ==0{continue ;};
for _aab =0;_aab < 8&&_bfec < _cdbf ;_aab ,_bfec =_aab +1,_bfec +1{if _ecbf .GetPixel (_bfec ,_gff ){_gdga .X =_bfec ;_gdga .Y =_gff ;return _gdga ,true ,nil ;};};};};return _gdga ,false ,nil ;};func TstWriteSymbols (t *_fc .T ,bms *Bitmaps ,src *Bitmap ){for _ddda :=0;
_ddda < bms .Size ();_ddda ++{_afadb :=bms .Values [_ddda ];_eadcc :=bms .Boxes [_ddda ];_dfdd :=src .RasterOperation (_eadcc .Min .X ,_eadcc .Min .Y ,_afadb .Width ,_afadb .Height ,PixSrc ,_afadb ,0,0);_f .NoError (t ,_dfdd );};};func (_cecb CombinationOperator )String ()string {var _cfef string ;
switch _cecb {case CmbOpOr :_cfef ="\u004f\u0052";case CmbOpAnd :_cfef ="\u0041\u004e\u0044";case CmbOpXor :_cfef ="\u0058\u004f\u0052";case CmbOpXNor :_cfef ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_cfef ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_cfef ="\u004e\u004f\u0054";};return _cfef ;};type MorphOperation int ;func _agfc (_cdfb ,_eeea byte ,_cde CombinationOperator )byte {switch _cde {case CmbOpOr :return _eeea |_cdfb ;case CmbOpAnd :return _eeea &_cdfb ;case CmbOpXor :return _eeea ^_cdfb ;
case CmbOpXNor :return ^(_eeea ^_cdfb );case CmbOpNot :return ^(_eeea );default:return _eeea ;};};func (_gebfb *BitmapsArray )AddBox (box *_fe .Rectangle ){_gebfb .Boxes =append (_gebfb .Boxes ,box )};func (_eee *Bitmap )clearAll ()error {return _eee .RasterOperation (0,0,_eee .Width ,_eee .Height ,PixClr ,nil ,0,0);
};func (_gbgf Points )GetGeometry (i int )(_acae ,_dfag float32 ,_egaa error ){if i > len (_gbgf )-1{return 0,0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_afeda :=_gbgf [i ];return _afeda .X ,_afeda .Y ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bdd ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_aga :=_dfb (width ,height );_aga .Data =data ;if len (data )< height *_aga .RowStride {return nil ,_g .Errorf (_bdd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_aga .RowStride );
};return _aga ,nil ;};var _eebc =[5]int {1,2,3,0,4};func (_bec *Bitmap )SetPadBits (value int ){_bec .setPadBits (value )};func (_efab *Bitmap )setEightBytes (_cgef int ,_aca uint64 )error {_fcb :=_efab .RowStride -(_cgef %_efab .RowStride );if _efab .RowStride !=_efab .Width >>3{_fcb --;
};if _fcb >=8{return _efab .setEightFullBytes (_cgef ,_aca );};return _efab .setEightPartlyBytes (_cgef ,_fcb ,_aca );};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_dcab *Boxes )Add (box *_fe .Rectangle )error {if _dcab ==nil {return _g .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_dcab =append (*_dcab ,box );return nil ;};func _eacbb (_gcde ,_bgad ,_dfca *Bitmap )(*Bitmap ,error ){const _geag ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _bgad ==nil {return nil ,_g .Error (_geag ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _dfca ==nil {return nil ,_g .Error (_geag ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _cdcc error ;switch {case _gcde ==_bgad :if _cdcc =_gcde .RasterOperation (0,0,_bgad .Width ,_bgad .Height ,PixNotSrcAndDst ,_dfca ,0,0);
_cdcc !=nil {return nil ,_g .Wrap (_cdcc ,_geag ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _gcde ==_dfca :if _cdcc =_gcde .RasterOperation (0,0,_bgad .Width ,_bgad .Height ,PixNotSrcAndDst ,_bgad ,0,0);_cdcc !=nil {return nil ,_g .Wrap (_cdcc ,_geag ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_gcde ,_cdcc =_gcdf (_gcde ,_bgad );if _cdcc !=nil {return nil ,_g .Wrap (_cdcc ,_geag ,"");};if _cdcc =_gcde .RasterOperation (0,0,_bgad .Width ,_bgad .Height ,PixNotSrcAndDst ,_dfca ,0,0);_cdcc !=nil {return nil ,_g .Wrap (_cdcc ,_geag ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _gcde ,nil ;};func _edcg (_dffb *Bitmap )(_ebee *Bitmap ,_gafe int ,_fggb error ){const _ebf ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _dffb ==nil {return nil ,0,_g .Errorf (_ebf ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");
};var _bdge ,_ccae *Bitmap ;if _bdge ,_fggb =_gcdf (nil ,_dffb );_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_ggeb [13]int ;_febb ,_deca int ;);_geb :=12;_dea :=_ff .NewNumSlice (_geb +1);
_ccbg :=_ff .NewNumSlice (_geb +1);var _ceca *Boxes ;for _ecba :=0;_ecba <=_geb ;_ecba ++{if _ecba ==0{if _ccae ,_fggb =_gcdf (nil ,_bdge );_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ccae ,_fggb =_dddf (_bdge ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});
_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ceca ,_fggb =_ccae .connComponentsBB (4);_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"");};_ggeb [_ecba ]=len (*_ceca );
_dea .AddInt (_ggeb [_ecba ]);switch _ecba {case 0:_febb =_ggeb [0];default:_deca =_ggeb [_ecba -1]-_ggeb [_ecba ];_ccbg .AddInt (_deca );};_bdge =_ccae ;};_fdad :=true ;_cdfd :=2;var _aefe ,_bbe int ;for _cdaca :=1;_cdaca < len (*_ccbg );_cdaca ++{if _aefe ,_fggb =_dea .GetInt (_cdaca );
_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _fdad &&_aefe < int (0.3*float32 (_febb )){_cdfd =_cdaca +1;_fdad =false ;};
if _deca ,_fggb =_ccbg .GetInt (_cdaca );_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _deca > _bbe {_bbe =_deca ;};};_gbcf :=_dffb .XResolution ;if _gbcf ==0{_gbcf =150;
};if _gbcf > 110{_cdfd ++;};if _cdfd < 2{_bc .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_cdfd =2;};_gafe =_cdfd +1;if _ebee ,_fggb =_fdfca (nil ,_dffb ,_cdfd +1,1);_fggb !=nil {return nil ,0,_g .Wrap (_fggb ,_ebf ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _ebee ,_gafe ,nil ;
};func _eadc ()[]int {_gfeg :=make ([]int ,256);_gfeg [0]=0;_gfeg [1]=7;var _eaea int ;for _eaea =2;_eaea < 4;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -2]+6;};for _eaea =4;_eaea < 8;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -4]+5;};for _eaea =8;_eaea < 16;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -8]+4;
};for _eaea =16;_eaea < 32;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -16]+3;};for _eaea =32;_eaea < 64;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -32]+2;};for _eaea =64;_eaea < 128;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -64]+1;};for _eaea =128;_eaea < 256;_eaea ++{_gfeg [_eaea ]=_gfeg [_eaea -128];
};return _gfeg ;};func (_gggg *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gggg .Values =append (_gggg .Values ,bm )};func _cbec (_eddc uint ,_cebd byte )byte {return _cebd >>_eddc <<_eddc };const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_dfga MorphProcess )verify (_adce int ,_fbgf ,_faad *int )error {const _bcbeb ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _dfga .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_dfga .Arguments )!=2{return _g .Error (_bcbeb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_fcae ,_dfadc :=_dfga .getWidthHeight ();if _fcae <=0||_dfadc <=0{return _g .Error (_bcbeb ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_fcead :=len (_dfga .Arguments );*_fbgf +=_fcead ;if _fcead < 1||_fcead > 4{return _g .Error (_bcbeb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fcgc :=0;_fcgc < _fcead ;_fcgc ++{if _dfga .Arguments [_fcgc ]< 1||_dfga .Arguments [_fcgc ]> 4{return _g .Error (_bcbeb ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_dfga .Arguments )==0{return _g .Error (_bcbeb ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ccg :=_dfga .Arguments [0];if _ccg !=2&&_ccg !=4&&_ccg !=8{return _g .Error (_bcbeb ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_fbgf -=_eebc [_ccg /4];case MopAddBorder :if len (_dfga .Arguments )==0{return _g .Error (_bcbeb ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gefbc :=_dfga .Arguments [0];if _adce > 0{return _g .Error (_bcbeb ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gefbc < 1{return _g .Error (_bcbeb ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_faad =_gefbc ;};return nil ;};func _fbg (_ebe ,_abd *Bitmap )(_abe error ){const _gda ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_cg :=_abd .RowStride ;_fee :=_ebe .RowStride ;var _gdb ,_bca ,_dag ,_eda ,_gac int ;for _dag =0;_dag < _abd .Height ;_dag ++{_gdb =_dag *_cg ;_bca =8*_dag *_fee ;for _eda =0;_eda < _cg ;_eda ++{if _abe =_ebe .setEightBytes (_bca +_eda *8,_fcgf [_abd .Data [_gdb +_eda ]]);
_abe !=nil {return _g .Wrap (_abe ,_gda ,"");};};for _gac =1;_gac < 8;_gac ++{for _eda =0;_eda < _fee ;_eda ++{if _abe =_ebe .SetByte (_bca +_gac *_fee +_eda ,_ebe .Data [_bca +_eda ]);_abe !=nil {return _g .Wrap (_abe ,_gda ,"");};};};};return nil ;};
type byWidth Bitmaps ;func (_cgea *byWidth )Less (i ,j int )bool {return _cgea .Values [i ].Width < _cgea .Values [j ].Width };func (_gfgb *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _gfgb .Copy (),nil ;};_fbe ,_bgg :=_gfgb .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );
if _bgg !=nil {return nil ,_g .Wrap (_bgg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fbe ,nil ;};func _egggd (_cefe ,_gcbf int ,_ecdbg string )*Selection {_ebfg :=&Selection {Height :_cefe ,Width :_gcbf ,Name :_ecdbg };
_ebfg .Data =make ([][]SelectionValue ,_cefe );for _ffcdd :=0;_ffcdd < _cefe ;_ffcdd ++{_ebfg .Data [_ffcdd ]=make ([]SelectionValue ,_gcbf );};return _ebfg ;};func (_fbag *Bitmap )GetChocolateData ()[]byte {if _fbag .Color ==Vanilla {_fbag .inverseData ();
};return _fbag .Data ;};func (_fffe *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_aaeg *Bitmaps ,_fdeb error ){const _deec ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _fffe ==nil {return nil ,_g .Error (_deec ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_deec ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_deec ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_fadf ,_fdeb :=_fffe .makeSizeIndicator (width ,height ,tp ,relation );if _fdeb !=nil {return nil ,_g .Wrap (_fdeb ,_deec ,"");};_aaeg ,_fdeb =_fffe .selectByIndicator (_fadf );if _fdeb !=nil {return nil ,_g .Wrap (_fdeb ,_deec ,"");};return _aaeg ,nil ;
};func (_cdec *Bitmaps )HeightSorter ()func (_eadae ,_ddde int )bool {return func (_cfca ,_ecdbe int )bool {_aecab :=_cdec .Values [_cfca ].Height < _cdec .Values [_ecdbe ].Height ;_bc .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cdec .Values [_cfca ].Height ,_cdec .Values [_ecdbe ].Height ,_aecab );
return _aecab ;};};func (_gaba *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _aeabb ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_gaba .IntSlice .Size (){return 0,_g .Errorf (_aeabb ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_gaba .XAtIndex (i )),nil ;};func TstImageBitmapInverseData ()[]byte {_fadfa :=_ffad .Copy ();_fadfa .InverseData ();return _fadfa .Data ;};func (_bffe *Bitmap )removeBorderGeneral (_cfd ,_ebbb ,_ebbe ,_bee int )(*Bitmap ,error ){const _fgdc ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _cfd < 0||_ebbb < 0||_ebbe < 0||_bee < 0{return nil ,_g .Error (_fgdc ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_eefa ,_ecbfg :=_bffe .Width ,_bffe .Height ;
_fcadb :=_eefa -_cfd -_ebbb ;_fcfc :=_ecbfg -_ebbe -_bee ;if _fcadb <=0{return nil ,_g .Errorf (_fgdc ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fcadb );};if _fcfc <=0{return nil ,_g .Errorf (_fgdc ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_fcfc );
};_bggce :=New (_fcadb ,_fcfc );_bggce .Color =_bffe .Color ;_bffb :=_bggce .RasterOperation (0,0,_fcadb ,_fcfc ,PixSrc ,_bffe ,_cfd ,_ebbe );if _bffb !=nil {return nil ,_g .Wrap (_bffb ,_fgdc ,"");};return _bggce ,nil ;};func (_cecbe Points )GetIntY (i int )(int ,error ){if i >=len (_cecbe ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_cecbe [i ].Y ),nil ;};func (_eef *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _eef .addBorderGeneral (left ,right ,top ,bot ,val );};func (_fafa *Bitmaps )WidthSorter ()func (_baef ,_cffd int )bool {return func (_gcgb ,_becf int )bool {return _fafa .Values [_gcgb ].Width < _fafa .Values [_becf ].Width };
};func TstFrameBitmap ()*Bitmap {return _dfbac .Copy ()};func (_fbc *Bitmaps )Size ()int {return len (_fbc .Values )};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);const (Vanilla Color =iota ;
Chocolate ;);func (_ade *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _ade .removeBorderGeneral (left ,right ,top ,bot );};func TstFrameBitmapData ()[]byte {return _dfbac .Data };func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _bgdgg ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_ddgab ,_geea :=p1 .Width ,p1 .Height ;_edbb ,_cabg :=p3 .Width ,p3 .Height ;if _ff .Abs (_ddgab -_edbb )> maxDiffW {return false ,nil ;};if _ff .Abs (_geea -_cabg )> maxDiffH {return false ,nil ;};_ggcf :=int (delX +_ff .Sign (delX )*0.5);_fbdb :=int (delY +_ff .Sign (delY )*0.5);
var _feec error ;_bggd :=p1 .CreateTemplate ();if _feec =_bggd .RasterOperation (0,0,_ddgab ,_geea ,PixSrc ,p1 ,0,0);_feec !=nil {return false ,_g .Wrap (_feec ,_bgdgg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _feec =_bggd .RasterOperation (_ggcf ,_fbdb ,_ddgab ,_geea ,PixNotSrcAndDst ,p4 ,0,0);
_feec !=nil {return false ,_g .Wrap (_feec ,_bgdgg ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _bggd .Zero (){return false ,nil ;};if _feec =_bggd .RasterOperation (_ggcf ,_fbdb ,_edbb ,_cabg ,PixSrc ,p3 ,0,0);_feec !=nil {return false ,_g .Wrap (_feec ,_bgdgg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _feec =_bggd .RasterOperation (0,0,_edbb ,_cabg ,PixNotSrcAndDst ,p2 ,0,0);_feec !=nil {return false ,_g .Wrap (_feec ,_bgdgg ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _bggd .Zero (),nil ;};const _ccfcc =5000;func TstWordBitmapWithSpaces (t *_fc .T ,scale ...int )*Bitmap {_cgae :=1;
if len (scale )> 0{_cgae =scale [0];};_aefb :=3;_dfebc :=9+7+15+2*_aefb +2*_aefb ;_fgff :=5+_aefb +5+2*_aefb ;_dfebce :=New (_dfebc *_cgae ,_fgff *_cgae );_bcbdf :=&Bitmaps {};var _fabf *int ;_aefb *=_cgae ;_gcgg :=_aefb ;_fabf =&_gcgg ;_fbgdga :=_aefb ;
_gcgf :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );_gcgf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,_aefb );_gcgf =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );
_gcgf =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,_aefb );_gcgf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );_gcgf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );
_gcgf =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,0);*_fabf =_aefb ;_fbgdga =5*_cgae +_aefb ;_gcgf =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );_gcgf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,_aefb );
_gcgf =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );_gcgf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );_gcgf =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );
_gcgf =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,1*_cgae );_gcgf =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bcbdf ,_gcgf ,_fabf ,_fbgdga ,0);TstWriteSymbols (t ,_bcbdf ,_dfebce );return _dfebce ;};func (_bfagac *Bitmaps )SortByHeight (){_ced :=(*byHeight )(_bfagac );
_d .Sort (_ced )};func (_bdg *Bitmap )GetByteIndex (x ,y int )int {return y *_bdg .RowStride +(x >>3)};func (_bccc *Bitmap )GetVanillaData ()[]byte {if _bccc .Color ==Chocolate {_bccc .inverseData ();};return _bccc .Data ;};func _fba (_gbg ,_afe *Bitmap ,_cf int ,_acf []byte ,_dfa int )(_db error ){const _adc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_dgc ,_bgb ,_bbd ,_fdfb ,_edd ,_gccf ,_gdd ,_dbf int ;_age ,_feb ,_faa ,_ege uint32 ;_gec ,_eddf byte ;_gbeg uint16 ;);_cgeb :=make ([]byte ,4);_gfae :=make ([]byte ,4);for _bbd =0;_bbd < _gbg .Height -1;_bbd ,_fdfb =_bbd +2,_fdfb +1{_dgc =_bbd *_gbg .RowStride ;
_bgb =_fdfb *_afe .RowStride ;for _edd ,_gccf =0,0;_edd < _dfa ;_edd ,_gccf =_edd +4,_gccf +1{for _gdd =0;_gdd < 4;_gdd ++{_dbf =_dgc +_edd +_gdd ;if _dbf <=len (_gbg .Data )-1&&_dbf < _dgc +_gbg .RowStride {_cgeb [_gdd ]=_gbg .Data [_dbf ];}else {_cgeb [_gdd ]=0x00;
};_dbf =_dgc +_gbg .RowStride +_edd +_gdd ;if _dbf <=len (_gbg .Data )-1&&_dbf < _dgc +(2*_gbg .RowStride ){_gfae [_gdd ]=_gbg .Data [_dbf ];}else {_gfae [_gdd ]=0x00;};};_age =_ea .BigEndian .Uint32 (_cgeb );_feb =_ea .BigEndian .Uint32 (_gfae );_faa =_age &_feb ;
_faa |=_faa <<1;_ege =_age |_feb ;_ege &=_ege <<1;_feb =_faa &_ege ;_feb &=0xaaaaaaaa;_age =_feb |(_feb <<7);_gec =byte (_age >>24);_eddf =byte ((_age >>8)&0xff);_dbf =_bgb +_gccf ;if _dbf +1==len (_afe .Data )-1||_dbf +1>=_bgb +_afe .RowStride {if _db =_afe .SetByte (_dbf ,_acf [_gec ]);
_db !=nil {return _g .Wrapf (_db ,_adc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dbf );};}else {_gbeg =(uint16 (_acf [_gec ])<<8)|uint16 (_acf [_eddf ]);if _db =_afe .setTwoBytes (_dbf ,_gbeg );_db !=nil {return _g .Wrapf (_db ,_adc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbf );
};_gccf ++;};};};return nil ;};var _dbdb [256]uint8 ;func TstCSymbol (t *_fc .T )*Bitmap {t .Helper ();_cabgf :=New (6,6);_f .NoError (t ,_cabgf .SetPixel (1,0,1));_f .NoError (t ,_cabgf .SetPixel (2,0,1));_f .NoError (t ,_cabgf .SetPixel (3,0,1));_f .NoError (t ,_cabgf .SetPixel (4,0,1));
_f .NoError (t ,_cabgf .SetPixel (0,1,1));_f .NoError (t ,_cabgf .SetPixel (5,1,1));_f .NoError (t ,_cabgf .SetPixel (0,2,1));_f .NoError (t ,_cabgf .SetPixel (0,3,1));_f .NoError (t ,_cabgf .SetPixel (0,4,1));_f .NoError (t ,_cabgf .SetPixel (5,4,1));
_f .NoError (t ,_cabgf .SetPixel (1,5,1));_f .NoError (t ,_cabgf .SetPixel (2,5,1));_f .NoError (t ,_cabgf .SetPixel (3,5,1));_f .NoError (t ,_cabgf .SetPixel (4,5,1));return _cabgf ;};type CombinationOperator int ;func (_aaaf *byWidth )Swap (i ,j int ){_aaaf .Values [i ],_aaaf .Values [j ]=_aaaf .Values [j ],_aaaf .Values [i ];
if _aaaf .Boxes !=nil {_aaaf .Boxes [i ],_aaaf .Boxes [j ]=_aaaf .Boxes [j ],_aaaf .Boxes [i ];};};func TstWSymbol (t *_fc .T ,scale ...int )*Bitmap {_deff ,_babe :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_babe );return TstGetScaledSymbol (t ,_deff ,scale ...);
};func (_acea *Bitmap )setFourBytes (_fdcb int ,_fedf uint32 )error {if _fdcb +3> len (_acea .Data )-1{return _g .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_fdcb );
};_acea .Data [_fdcb ]=byte ((_fedf &0xff000000)>>24);_acea .Data [_fdcb +1]=byte ((_fedf &0xff0000)>>16);_acea .Data [_fdcb +2]=byte ((_fedf &0xff00)>>8);_acea .Data [_fdcb +3]=byte (_fedf &0xff);return nil ;};var (_dfbac *Bitmap ;_ffad *Bitmap ;);func _gb (_cb ,_af *Bitmap )(_cba error ){const _be ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_bd :=_af .RowStride ;_ead :=_cb .RowStride ;var (_fd byte ;_gbe uint16 ;_ec ,_bdc ,_ga ,_ecb ,_fb int ;);for _ga =0;_ga < _af .Height ;_ga ++{_ec =_ga *_bd ;_bdc =2*_ga *_ead ;for _ecb =0;_ecb < _bd ;_ecb ++{_fd =_af .Data [_ec +_ecb ];_gbe =_aabd [_fd ];
_fb =_bdc +_ecb *2;if _cb .RowStride !=_af .RowStride *2&&(_ecb +1)*2> _cb .RowStride {_cba =_cb .SetByte (_fb ,byte (_gbe >>8));}else {_cba =_cb .setTwoBytes (_fb ,_gbe );};if _cba !=nil {return _g .Wrap (_cba ,_be ,"");};};for _ecb =0;_ecb < _ead ;_ecb ++{_fb =_bdc +_ead +_ecb ;
_fd =_cb .Data [_bdc +_ecb ];if _cba =_cb .SetByte (_fb ,_fd );_cba !=nil {return _g .Wrapf (_cba ,_be ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bdc +_ecb ,_bdc +_ead +_ecb );
};};};return nil ;};func _bgge (_fgf ,_bdbd int )int {if _fgf < _bdbd {return _fgf ;};return _bdbd ;};func (_eadb *Bitmap )SizesEqual (s *Bitmap )bool {if _eadb ==s {return true ;};if _eadb .Width !=s .Width ||_eadb .Height !=s .Height {return false ;};
return true ;};type ClassedPoints struct{*Points ;_ff .IntSlice ;_cgcbag func (_dbcb ,_dgcg int )bool ;};func (_gge *Bitmap )ClipRectangle (box *_fe .Rectangle )(_egff *Bitmap ,_gcd *_fe .Rectangle ,_dcg error ){const _dab ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_g .Error (_dab ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_fab ,_ceba :=_gge .Width ,_gge .Height ;_bfed :=_fe .Rect (0,0,_fab ,_ceba );if !box .Overlaps (_bfed ){return nil ,nil ,_g .Error (_dab ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_dfg :=box .Intersect (_bfed );_agag ,_eae :=_dfg .Min .X ,_dfg .Min .Y ;_cbag ,_dfd :=_dfg .Dx (),_dfg .Dy ();_egff =New (_cbag ,_dfd );_egff .Text =_gge .Text ;if _dcg =_egff .RasterOperation (0,0,_cbag ,_dfd ,PixSrc ,_gge ,_agag ,_eae );_dcg !=nil {return nil ,nil ,_g .Wrap (_dcg ,_dab ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_gcd =&_dfg ;return _egff ,_gcd ,nil ;};func (_fgdb *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_acc *Boxes ,_abfe error ){const _eeag ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _fgdb ==nil {return nil ,_g .Error (_eeag ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fgdb )==0{return _fgdb ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_eeag ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_g .Errorf (_eeag ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_cebb :=_fgdb .makeSizeIndicator (width ,height ,tp ,relation );_fbd ,_abfe :=_fgdb .selectWithIndicator (_cebb );if _abfe !=nil {return nil ,_g .Wrap (_abfe ,_eeag ,"");};return _fbd ,nil ;};func (_fgea *Bitmaps )AddBitmap (bm *Bitmap ){_fgea .Values =append (_fgea .Values ,bm )};
func init (){const _egcc ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_dfbac =New (50,40);var _dacec error ;_dfbac ,_dacec =_dfbac .AddBorder (2,1);if _dacec !=nil {panic (_g .Wrap (_dacec ,_egcc ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};_ffad ,_dacec =NewWithData (50,22,_efcd );if _dacec !=nil {panic (_g .Wrap (_dacec ,_egcc ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};type Color int ;func (_fdcad *ClassedPoints )validateIntSlice ()error {const _abae ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_cefdf :=range _fdcad .IntSlice {if _cefdf >=(_fdcad .Points .Size ()){return _g .Errorf (_abae ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_cefdf ,_fdcad .Points .Size ());
};};return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_fbef *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _edeb ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _fbef ==nil {return nil ,_g .Error (_edeb ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_g .Error (_edeb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_aagg :=len (_fbef .Values );_cadc :=&Bitmaps {Values :make ([]*Bitmap ,_aagg ),Boxes :make ([]*_fe .Rectangle ,_aagg )};var (_ddfd ,_aaca *Bitmap ;_cabd *_fe .Rectangle ;_efdc error ;);for _bgce :=0;_bgce < _aagg ;_bgce ++{if _ddfd ,_efdc =_fbef .GetBitmap (_bgce );
_efdc !=nil {return nil ,_g .Wrap (_efdc ,_edeb ,"");};if _cabd ,_efdc =_fbef .GetBox (_bgce );_efdc !=nil {return nil ,_g .Wrap (_efdc ,_edeb ,"");};if _aaca ,_efdc =s .clipRectangle (_cabd ,nil );_efdc !=nil {return nil ,_g .Wrap (_efdc ,_edeb ,"");};
if _aaca ,_efdc =_aaca .And (_ddfd );_efdc !=nil {return nil ,_g .Wrap (_efdc ,_edeb ,"");};_cadc .Values [_bgce ]=_aaca ;_cadc .Boxes [_bgce ]=_cabd ;};return _cadc ,nil ;};func (_gadg *Bitmap )And (s *Bitmap )(_ebea *Bitmap ,_fcge error ){const _beb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";
if _gadg ==nil {return nil ,_g .Error (_beb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_g .Error (_beb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");
};if !_gadg .SizesEqual (s ){_bc .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_beb );
};if _ebea ,_fcge =_gcdf (_ebea ,_gadg );_fcge !=nil {return nil ,_g .Wrap (_fcge ,_beb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fcge =_ebea .RasterOperation (0,0,_ebea .Width ,_ebea .Height ,PixSrcAndDst ,s ,0,0);
_fcge !=nil {return nil ,_g .Wrap (_fcge ,_beb ,"");};return _ebea ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _dddf (src ,sequence ...);};type Bitmaps struct{Values []*Bitmap ;Boxes []*_fe .Rectangle ;};
func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _eebf (d ,s ,sel )};func (_dgde *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _eacba (_dgde ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};type Getter interface{GetBitmap ()*Bitmap ;};func (_dcfb *Bitmap )connComponentsBitmapsBB (_eaef *Bitmaps ,_cecf int )(_cafc *Boxes ,_egd error ){const _ddfc ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _cecf !=4&&_cecf !=8{return nil ,_g .Error (_ddfc ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _eaef ==nil {return nil ,_g .Error (_ddfc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_eaef .Values )> 0{return nil ,_g .Error (_ddfc ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _dcfb .Zero (){return &Boxes {},nil ;};
var (_bfgc ,_eadbc ,_ddd ,_dga *Bitmap ;);_dcfb .setPadBits (0);if _bfgc ,_egd =_gcdf (nil ,_dcfb );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"\u0062\u006d\u0031");};if _eadbc ,_egd =_gcdf (nil ,_dcfb );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"\u0062\u006d\u0032");
};_ddgcb :=&_ff .Stack {};_ddgcb .Aux =&_ff .Stack {};_cafc =&Boxes {};var (_efcb ,_baae int ;_bagd _fe .Point ;_fbfd bool ;_gfgf *_fe .Rectangle ;);for {if _bagd ,_fbfd ,_egd =_bfgc .nextOnPixel (_efcb ,_baae );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"");
};if !_fbfd {break ;};if _gfgf ,_egd =_bbag (_bfgc ,_ddgcb ,_bagd .X ,_bagd .Y ,_cecf );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"");};if _egd =_cafc .Add (_gfgf );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"");};if _ddd ,_egd =_bfgc .clipRectangle (_gfgf ,nil );
_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"\u0062\u006d\u0033");};if _dga ,_egd =_eadbc .clipRectangle (_gfgf ,nil );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"\u0062\u006d\u0034");};if _ ,_egd =_gbce (_ddd ,_ddd ,_dga );_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _egd =_eadbc .RasterOperation (_gfgf .Min .X ,_gfgf .Min .Y ,_gfgf .Dx (),_gfgf .Dy (),PixSrcXorDst ,_ddd ,0,0);_egd !=nil {return nil ,_g .Wrap (_egd ,_ddfc ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_eaef .AddBitmap (_ddd );
_efcb =_bagd .X ;_baae =_bagd .Y ;};_eaef .Boxes =*_cafc ;return _cafc ,nil ;};func (_fgeab *Bitmaps )String ()string {_dggf :=_b .Builder {};for _ ,_cdecc :=range _fgeab .Values {_dggf .WriteString (_cdecc .String ());_dggf .WriteRune ('\n');};return _dggf .String ();
};func _gbce (_bfc ,_gagc ,_ddb *Bitmap )(*Bitmap ,error ){const _gdfa ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _gagc ==nil {return nil ,_g .Error (_gdfa ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ddb ==nil {return nil ,_g .Error (_gdfa ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bfc ==_ddb {return nil ,_g .Error (_gdfa ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_gagc .SizesEqual (_ddb ){_bc .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_gdfa );
};var _eeaa error ;if _bfc ,_eeaa =_gcdf (_bfc ,_gagc );_eeaa !=nil {return nil ,_g .Wrap (_eeaa ,_gdfa ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _eeaa =_bfc .RasterOperation (0,0,_bfc .Width ,_bfc .Height ,PixSrcXorDst ,_ddb ,0,0);
_eeaa !=nil {return nil ,_g .Wrap (_eeaa ,_gdfa ,"");};return _bfc ,nil ;};func _bbag (_gbbb *Bitmap ,_agedf *_ff .Stack ,_faef ,_gcfe ,_edecd int )(_bcad *_fe .Rectangle ,_fdgfa error ){const _cbdeg ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _gbbb ==nil {return nil ,_g .Error (_cbdeg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _agedf ==nil {return nil ,_g .Error (_cbdeg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _edecd {case 4:if _bcad ,_fdgfa =_gffe (_gbbb ,_agedf ,_faef ,_gcfe );_fdgfa !=nil {return nil ,_g .Wrap (_fdgfa ,_cbdeg ,"");};return _bcad ,nil ;case 8:if _bcad ,_fdgfa =_cdaef (_gbbb ,_agedf ,_faef ,_gcfe );_fdgfa !=nil {return nil ,_g .Wrap (_fdgfa ,_cbdeg ,"");
};return _bcad ,nil ;default:return nil ,_g .Errorf (_cbdeg ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_edecd );
};};func _gcfg (_aegfe ,_edbba *Bitmap ,_cagb *Selection )(*Bitmap ,error ){const _edac ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _eggb ,_bgdb int ;if _edbba ==nil {return nil ,_g .Error (_edac ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _cagb ==nil {return nil ,_g .Error (_edac ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_eggb =_cagb .Width ;_bgdb =_cagb .Height ;if _eggb ==0||_bgdb ==0{return nil ,_g .Error (_edac ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _aegfe ==nil {return _edbba .createTemplate (),nil ;};if _ceffb :=_aegfe .resizeImageData (_edbba );_ceffb !=nil {return nil ,_ceffb ;};return _aegfe ,nil ;};func (_bggg *Bitmaps )CountPixels ()*_ff .NumSlice {_bcac :=&_ff .NumSlice {};for _ ,_bfca :=range _bggg .Values {_bcac .AddInt (_bfca .CountPixels ());
};return _bcac ;};func _dad ()(_egf [256]uint32 ){for _cef :=0;_cef < 256;_cef ++{if _cef &0x01!=0{_egf [_cef ]|=0xf;};if _cef &0x02!=0{_egf [_cef ]|=0xf0;};if _cef &0x04!=0{_egf [_cef ]|=0xf00;};if _cef &0x08!=0{_egf [_cef ]|=0xf000;};if _cef &0x10!=0{_egf [_cef ]|=0xf0000;
};if _cef &0x20!=0{_egf [_cef ]|=0xf00000;};if _cef &0x40!=0{_egf [_cef ]|=0xf000000;};if _cef &0x80!=0{_egf [_cef ]|=0xf0000000;};};return _egf ;};func _cgbg (_fegc *Bitmap ,_fbgdg ,_bece ,_eged ,_aged int ,_dabbb RasterOperator ,_ddgg *Bitmap ,_gbgd ,_adgf int )error {var (_cgdfd bool ;
_cgdc bool ;_fcda byte ;_daagf int ;_cdgg int ;_bcdgd int ;_cbde int ;_bcbb bool ;_efd int ;_fbed int ;_fcac int ;_fbagb bool ;_feggc byte ;_daabc int ;_gafa int ;_bbddb int ;_ffab byte ;_afgdb int ;_geac int ;_dcgcf uint ;_ggfe uint ;_fgaae byte ;_bffgb shift ;
_gaabb bool ;_aeca bool ;_fabga ,_gfga int ;);if _gbgd &7!=0{_geac =8-(_gbgd &7);};if _fbgdg &7!=0{_cdgg =8-(_fbgdg &7);};if _geac ==0&&_cdgg ==0{_fgaae =_fgaf [0];}else {if _cdgg > _geac {_dcgcf =uint (_cdgg -_geac );}else {_dcgcf =uint (8-(_geac -_cdgg ));
};_ggfe =8-_dcgcf ;_fgaae =_fgaf [_dcgcf ];};if (_fbgdg &7)!=0{_cgdfd =true ;_daagf =8-(_fbgdg &7);_fcda =_fgaf [_daagf ];_bcdgd =_fegc .RowStride *_bece +(_fbgdg >>3);_cbde =_ddgg .RowStride *_adgf +(_gbgd >>3);_afgdb =8-(_gbgd &7);if _daagf > _afgdb {_bffgb =_cgcd ;
if _eged >=_geac {_gaabb =true ;};}else {_bffgb =_deddd ;};};if _eged < _daagf {_cgdc =true ;_fcda &=_bcdc [8-_daagf +_eged ];};if !_cgdc {_efd =(_eged -_daagf )>>3;if _efd !=0{_bcbb =true ;_fbed =_fegc .RowStride *_bece +((_fbgdg +_cdgg )>>3);_fcac =_ddgg .RowStride *_adgf +((_gbgd +_cdgg )>>3);
};};_daabc =(_fbgdg +_eged )&7;if !(_cgdc ||_daabc ==0){_fbagb =true ;_feggc =_bcdc [_daabc ];_gafa =_fegc .RowStride *_bece +((_fbgdg +_cdgg )>>3)+_efd ;_bbddb =_ddgg .RowStride *_adgf +((_gbgd +_cdgg )>>3)+_efd ;if _daabc > int (_ggfe ){_aeca =true ;
};};switch _dabbb {case PixSrc :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;
};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],_ffab ,_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );
_fegc .Data [_fbed +_gfga ]=_ffab ;};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );
};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],_ffab ,_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixNotSrc :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );
};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],^_ffab ,_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );
_fegc .Data [_fbed +_gfga ]=^_ffab ;};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );
};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],^_ffab ,_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixSrcOrDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );
};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],_ffab |_fegc .Data [_bcdgd ],_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;
_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]|=_ffab ;};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;
_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],_ffab |_fegc .Data [_gafa ],_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;
};};case PixSrcAndDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],_ffab &_fegc .Data [_bcdgd ],_fcda );
_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]&=_ffab ;
};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],_ffab &_fegc .Data [_gafa ],_feggc );
_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixSrcXorDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );
};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],_ffab ^_fegc .Data [_bcdgd ],_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;
_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]^=_ffab ;};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;
_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],_ffab ^_fegc .Data [_gafa ],_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;
};};case PixNotSrcOrDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],^_ffab |_fegc .Data [_bcdgd ],_fcda );
_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]|=^_ffab ;
};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],^_ffab |_fegc .Data [_gafa ],_feggc );
_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixNotSrcAndDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );
};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],^_ffab &_fegc .Data [_bcdgd ],_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;
_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]&=^_ffab ;};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;
_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],^_ffab &_fegc .Data [_gafa ],_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;
};};case PixSrcOrNotDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],_ffab |^_fegc .Data [_bcdgd ],_fcda );
_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]=_ffab |^_fegc .Data [_fbed +_gfga ];
};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],_ffab |^_fegc .Data [_gafa ],_feggc );
_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixSrcAndNotDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );
};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],_ffab &^_fegc .Data [_bcdgd ],_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;
_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]=_ffab &^_fegc .Data [_fbed +_gfga ];};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;
_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],_ffab &^_fegc .Data [_gafa ],_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;
};};case PixNotPixSrcOrDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;
};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],^(_ffab |_fegc .Data [_bcdgd ]),_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );
_fegc .Data [_fbed +_gfga ]=^(_ffab |_fegc .Data [_fbed +_gfga ]);};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );
};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],^(_ffab |_fegc .Data [_gafa ]),_feggc );_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixNotPixSrcAndDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;
if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],^(_ffab &_fegc .Data [_bcdgd ]),_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;
};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]=^(_ffab &_fegc .Data [_fbed +_gfga ]);
};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],^(_ffab &_fegc .Data [_gafa ]),_feggc );
_gafa +=_fegc .RowStride ;_bbddb +=_ddgg .RowStride ;};};case PixNotPixSrcXorDst :if _cgdfd {for _fabga =0;_fabga < _aged ;_fabga ++{if _bffgb ==_cgcd {_ffab =_ddgg .Data [_cbde ]<<_dcgcf ;if _gaabb {_ffab =_fbga (_ffab ,_ddgg .Data [_cbde +1]>>_ggfe ,_fgaae );
};}else {_ffab =_ddgg .Data [_cbde ]>>_ggfe ;};_fegc .Data [_bcdgd ]=_fbga (_fegc .Data [_bcdgd ],^(_ffab ^_fegc .Data [_bcdgd ]),_fcda );_bcdgd +=_fegc .RowStride ;_cbde +=_ddgg .RowStride ;};};if _bcbb {for _fabga =0;_fabga < _aged ;_fabga ++{for _gfga =0;
_gfga < _efd ;_gfga ++{_ffab =_fbga (_ddgg .Data [_fcac +_gfga ]<<_dcgcf ,_ddgg .Data [_fcac +_gfga +1]>>_ggfe ,_fgaae );_fegc .Data [_fbed +_gfga ]=^(_ffab ^_fegc .Data [_fbed +_gfga ]);};_fbed +=_fegc .RowStride ;_fcac +=_ddgg .RowStride ;};};if _fbagb {for _fabga =0;
_fabga < _aged ;_fabga ++{_ffab =_ddgg .Data [_bbddb ]<<_dcgcf ;if _aeca {_ffab =_fbga (_ffab ,_ddgg .Data [_bbddb +1]>>_ggfe ,_fgaae );};_fegc .Data [_gafa ]=_fbga (_fegc .Data [_gafa ],^(_ffab ^_fegc .Data [_gafa ]),_feggc );_gafa +=_fegc .RowStride ;
_bbddb +=_ddgg .RowStride ;};};default:_bc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_dabbb );return _g .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_dagab *ClassedPoints )SortByY (){_dagab ._cgcbag =_dagab .ySortFunction ();_d .Sort (_dagab )};func _gdg (_dcf ,_dce *Bitmap ,_gfg int ,_cce []byte ,_eba int )(_ceb error ){const _df ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_cbgd ,_bdf ,_fac ,_def ,_agbb ,_dcee ,_ebed ,_gadb int ;_cga ,_bg ,_ecaa ,_fbbb uint32 ;_geg ,_eea byte ;_dgb uint16 ;);_gea :=make ([]byte ,4);_eeb :=make ([]byte ,4);for _fac =0;_fac < _dcf .Height -1;_fac ,_def =_fac +2,_def +1{_cbgd =_fac *_dcf .RowStride ;
_bdf =_def *_dce .RowStride ;for _agbb ,_dcee =0,0;_agbb < _eba ;_agbb ,_dcee =_agbb +4,_dcee +1{for _ebed =0;_ebed < 4;_ebed ++{_gadb =_cbgd +_agbb +_ebed ;if _gadb <=len (_dcf .Data )-1&&_gadb < _cbgd +_dcf .RowStride {_gea [_ebed ]=_dcf .Data [_gadb ];
}else {_gea [_ebed ]=0x00;};_gadb =_cbgd +_dcf .RowStride +_agbb +_ebed ;if _gadb <=len (_dcf .Data )-1&&_gadb < _cbgd +(2*_dcf .RowStride ){_eeb [_ebed ]=_dcf .Data [_gadb ];}else {_eeb [_ebed ]=0x00;};};_cga =_ea .BigEndian .Uint32 (_gea );_bg =_ea .BigEndian .Uint32 (_eeb );
_ecaa =_cga &_bg ;_ecaa |=_ecaa <<1;_fbbb =_cga |_bg ;_fbbb &=_fbbb <<1;_bg =_ecaa |_fbbb ;_bg &=0xaaaaaaaa;_cga =_bg |(_bg <<7);_geg =byte (_cga >>24);_eea =byte ((_cga >>8)&0xff);_gadb =_bdf +_dcee ;if _gadb +1==len (_dce .Data )-1||_gadb +1>=_bdf +_dce .RowStride {if _ceb =_dce .SetByte (_gadb ,_cce [_geg ]);
_ceb !=nil {return _g .Wrapf (_ceb ,_df ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gadb );};}else {_dgb =(uint16 (_cce [_geg ])<<8)|uint16 (_cce [_eea ]);if _ceb =_dce .setTwoBytes (_gadb ,_dgb );_ceb !=nil {return _g .Wrapf (_ceb ,_df ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gadb );
};_dcee ++;};};};return nil ;};func (_fecbc *byHeight )Swap (i ,j int ){_fecbc .Values [i ],_fecbc .Values [j ]=_fecbc .Values [j ],_fecbc .Values [i ];if _fecbc .Boxes !=nil {_fecbc .Boxes [i ],_fecbc .Boxes [j ]=_fecbc .Boxes [j ],_fecbc .Boxes [i ];
};};type shift int ;