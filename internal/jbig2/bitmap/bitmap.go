//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ef "encoding/binary";_b "github.com/stretchr/testify/require";_gc "github.com/unidoc/unipdf/v3/common";_aa "github.com/unidoc/unipdf/v3/internal/bitwise";_ec "github.com/unidoc/unipdf/v3/internal/imageutil";_cc "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_eca "image";_gf "math";_a "sort";_bc "strings";_g "testing";);type Getter interface{GetBitmap ()*Bitmap ;};func (_effe *Bitmap )CountPixels ()int {return _effe .countPixels ()};func (_bdga *Bitmaps )selectByIndexes (_dbeb []int )(*Bitmaps ,error ){_ffbc :=&Bitmaps {};
for _ ,_addae :=range _dbeb {_cdfa ,_fdfgg :=_bdga .GetBitmap (_addae );if _fdfgg !=nil {return nil ,_e .Wrap (_fdfgg ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_ffbc .AddBitmap (_cdfa );};return _ffbc ,nil ;
};func _bgdf (_acfg ,_bafg byte ,_cedf CombinationOperator )byte {switch _cedf {case CmbOpOr :return _bafg |_acfg ;case CmbOpAnd :return _bafg &_acfg ;case CmbOpXor :return _bafg ^_acfg ;case CmbOpXNor :return ^(_bafg ^_acfg );case CmbOpNot :return ^(_bafg );
default:return _bafg ;};};func (_afa *Bitmap )GetVanillaData ()[]byte {if _afa .Color ==Chocolate {_afa .inverseData ();};return _afa .Data ;};func (_dddfd *ClassedPoints )SortByX (){_dddfd ._eaabc =_dddfd .xSortFunction ();_a .Sort (_dddfd )};type SizeSelection int ;
func (_egfad *Bitmaps )HeightSorter ()func (_gbbcf ,_daeg int )bool {return func (_febda ,_baafd int )bool {_bbfd :=_egfad .Values [_febda ].Height < _egfad .Values [_baafd ].Height ;_gc .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_egfad .Values [_febda ].Height ,_egfad .Values [_baafd ].Height ,_bbfd );
return _bbfd ;};};func TstASymbol (t *_g .T )*Bitmap {t .Helper ();_gadf :=New (6,6);_b .NoError (t ,_gadf .SetPixel (1,0,1));_b .NoError (t ,_gadf .SetPixel (2,0,1));_b .NoError (t ,_gadf .SetPixel (3,0,1));_b .NoError (t ,_gadf .SetPixel (4,0,1));_b .NoError (t ,_gadf .SetPixel (5,1,1));
_b .NoError (t ,_gadf .SetPixel (1,2,1));_b .NoError (t ,_gadf .SetPixel (2,2,1));_b .NoError (t ,_gadf .SetPixel (3,2,1));_b .NoError (t ,_gadf .SetPixel (4,2,1));_b .NoError (t ,_gadf .SetPixel (5,2,1));_b .NoError (t ,_gadf .SetPixel (0,3,1));_b .NoError (t ,_gadf .SetPixel (5,3,1));
_b .NoError (t ,_gadf .SetPixel (0,4,1));_b .NoError (t ,_gadf .SetPixel (5,4,1));_b .NoError (t ,_gadf .SetPixel (1,5,1));_b .NoError (t ,_gadf .SetPixel (2,5,1));_b .NoError (t ,_gadf .SetPixel (3,5,1));_b .NoError (t ,_gadf .SetPixel (4,5,1));_b .NoError (t ,_gadf .SetPixel (5,5,1));
return _gadf ;};func (_gfgg *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_fgf bool ,_ddcd error ){const _bbcc ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_aaeg ();};_gfaa :=_gfgg .Width >>3;_ebgb :=_gfgg .Width &7;_dfea :=byte (0xff<<uint (8-_ebgb ));var (_gcd ,_bcb ,_aeeag ,_dfcg int ;_cabb byte ;);for _gcd =0;_gcd < _gfgg .Height ;_gcd ++{_aeeag =_gfgg .RowStride *_gcd ;for _bcb =0;
_bcb < _gfaa ;_bcb ++{_cabb ,_ddcd =_gfgg .GetByte (_aeeag +_bcb );if _ddcd !=nil {return false ,_e .Wrap (_ddcd ,_bbcc ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_dfcg +=tab8 [_cabb ];};if _ebgb !=0{_cabb ,_ddcd =_gfgg .GetByte (_aeeag +_bcb );
if _ddcd !=nil {return false ,_e .Wrap (_ddcd ,_bbcc ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_cabb &=_dfea ;_dfcg +=tab8 [_cabb ];};if _dfcg > thresh {return true ,nil ;};};return _fgf ,nil ;};func _fde ()(_gdd []byte ){_gdd =make ([]byte ,256);
for _agef :=0;_agef < 256;_agef ++{_dad :=byte (_agef );_gdd [_dad ]=(_dad &0x01)|((_dad &0x04)>>1)|((_dad &0x10)>>2)|((_dad &0x40)>>3)|((_dad &0x02)<<3)|((_dad &0x08)<<2)|((_dad &0x20)<<1)|(_dad &0x80);};return _gdd ;};func (_ddda *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bag *Boxes ,_edcd error ){const _cda ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";
if _ddda ==nil {return nil ,_e .Error (_cda ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_e .Error (_cda ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");
};if bms ==nil {if _bag ,_edcd =_ddda .connComponentsBB (connectivity );_edcd !=nil {return nil ,_e .Wrap (_edcd ,_cda ,"");};}else {if _bag ,_edcd =_ddda .connComponentsBitmapsBB (bms ,connectivity );_edcd !=nil {return nil ,_e .Wrap (_edcd ,_cda ,"");
};};return _bag ,nil ;};type shift int ;func _dadf (_fdbf *_cc .Stack )(_ffbag *fillSegment ,_debc error ){const _geeeb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _fdbf ==nil {return nil ,_e .Error (_geeeb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};if _fdbf .Aux ==nil {return nil ,_e .Error (_geeeb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_fdfc ,_dafc :=_fdbf .Pop ();if !_dafc {return nil ,nil ;};_bae ,_dafc :=_fdfc .(*fillSegment );if !_dafc {return nil ,_e .Error (_geeeb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_ffbag =&fillSegment {_bae ._fdcgd ,_bae ._ggbe ,_bae ._bggdd +_bae ._eccb ,_bae ._eccb };_fdbf .Aux .Push (_bae );return _ffbag ,nil ;};func _acfb (_beee ,_dcac *Bitmap ,_bffg *Selection )(*Bitmap ,error ){const _abfa ="\u006f\u0070\u0065\u006e";var _eecbc error ;
_beee ,_eecbc =_cbeb (_beee ,_dcac ,_bffg );if _eecbc !=nil {return nil ,_e .Wrap (_eecbc ,_abfa ,"");};_egc ,_eecbc :=_agad (nil ,_dcac ,_bffg );if _eecbc !=nil {return nil ,_e .Wrap (_eecbc ,_abfa ,"");};_ ,_eecbc =_gdf (_beee ,_egc ,_bffg );if _eecbc !=nil {return nil ,_e .Wrap (_eecbc ,_abfa ,"");
};return _beee ,nil ;};func TstISymbol (t *_g .T ,scale ...int )*Bitmap {_fgaeb ,_gabdg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_b .NoError (t ,_gabdg );return TstGetScaledSymbol (t ,_fgaeb ,scale ...);};func _ddggc (_fbdec *Bitmap ,_ffgb ,_cffag ,_ccbf ,_egcd int ,_dffe RasterOperator ,_fagb *Bitmap ,_cgge ,_cffb int )error {var (_gdfg bool ;
_bege bool ;_bgeg byte ;_gfbg int ;_aadge int ;_bffda int ;_dega int ;_deeb bool ;_geag int ;_gbde int ;_fagbf int ;_gabce bool ;_aadbf byte ;_fegc int ;_eafg int ;_dcaee int ;_afeb byte ;_caaae int ;_dbgc int ;_cbfg uint ;_bagcd uint ;_ffcf byte ;_bgdb shift ;
_beff bool ;_afbad bool ;_gfee ,_gebg int ;);if _cgge &7!=0{_dbgc =8-(_cgge &7);};if _ffgb &7!=0{_aadge =8-(_ffgb &7);};if _dbgc ==0&&_aadge ==0{_ffcf =_gfcac [0];}else {if _aadge > _dbgc {_cbfg =uint (_aadge -_dbgc );}else {_cbfg =uint (8-(_dbgc -_aadge ));
};_bagcd =8-_cbfg ;_ffcf =_gfcac [_cbfg ];};if (_ffgb &7)!=0{_gdfg =true ;_gfbg =8-(_ffgb &7);_bgeg =_gfcac [_gfbg ];_bffda =_fbdec .RowStride *_cffag +(_ffgb >>3);_dega =_fagb .RowStride *_cffb +(_cgge >>3);_caaae =8-(_cgge &7);if _gfbg > _caaae {_bgdb =_eabc ;
if _ccbf >=_dbgc {_beff =true ;};}else {_bgdb =_fgedd ;};};if _ccbf < _gfbg {_bege =true ;_bgeg &=_eeeea [8-_gfbg +_ccbf ];};if !_bege {_geag =(_ccbf -_gfbg )>>3;if _geag !=0{_deeb =true ;_gbde =_fbdec .RowStride *_cffag +((_ffgb +_aadge )>>3);_fagbf =_fagb .RowStride *_cffb +((_cgge +_aadge )>>3);
};};_fegc =(_ffgb +_ccbf )&7;if !(_bege ||_fegc ==0){_gabce =true ;_aadbf =_eeeea [_fegc ];_eafg =_fbdec .RowStride *_cffag +((_ffgb +_aadge )>>3)+_geag ;_dcaee =_fagb .RowStride *_cffb +((_cgge +_aadge )>>3)+_geag ;if _fegc > int (_bagcd ){_afbad =true ;
};};switch _dffe {case PixSrc :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],_afeb ,_bgeg );
_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]=_afeb ;
};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],_afeb ,_aadbf );
_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixNotSrc :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;
};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],^_afeb ,_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );
_fbdec .Data [_gbde +_gebg ]=^_afeb ;};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );
};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],^_afeb ,_aadbf );_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixSrcOrDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );
};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],_afeb |_fbdec .Data [_bffda ],_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;
_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]|=_afeb ;};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;
_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],_afeb |_fbdec .Data [_eafg ],_aadbf );_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;
};};case PixSrcAndDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],_afeb &_fbdec .Data [_bffda ],_bgeg );
_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]&=_afeb ;
};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],_afeb &_fbdec .Data [_eafg ],_aadbf );
_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixSrcXorDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;
};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],_afeb ^_fbdec .Data [_bffda ],_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );
_fbdec .Data [_gbde +_gebg ]^=_afeb ;};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );
};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],_afeb ^_fbdec .Data [_eafg ],_aadbf );_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixNotSrcOrDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;
if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],^_afeb |_fbdec .Data [_bffda ],_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;
};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]|=^_afeb ;};_gbde +=_fbdec .RowStride ;
_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],^_afeb |_fbdec .Data [_eafg ],_aadbf );
_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixNotSrcAndDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};
}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],^_afeb &_fbdec .Data [_bffda ],_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;
_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]&=^_afeb ;};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;
_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],^_afeb &_fbdec .Data [_eafg ],_aadbf );_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;
};};case PixSrcOrNotDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],_afeb |^_fbdec .Data [_bffda ],_bgeg );
_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]=_afeb |^_fbdec .Data [_gbde +_gebg ];
};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],_afeb |^_fbdec .Data [_eafg ],_aadbf );
_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixSrcAndNotDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};
}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],_afeb &^_fbdec .Data [_bffda ],_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;
_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]=_afeb &^_fbdec .Data [_gbde +_gebg ];};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;
_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],_afeb &^_fbdec .Data [_eafg ],_aadbf );_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;
};};case PixNotPixSrcOrDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],^(_afeb |_fbdec .Data [_bffda ]),_bgeg );
_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]=^(_afeb |_fbdec .Data [_gbde +_gebg ]);
};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],^(_afeb |_fbdec .Data [_eafg ]),_aadbf );
_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};case PixNotPixSrcAndDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );
};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],^(_afeb &_fbdec .Data [_bffda ]),_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;
_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );_fbdec .Data [_gbde +_gebg ]=^(_afeb &_fbdec .Data [_gbde +_gebg ]);};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;
_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],^(_afeb &_fbdec .Data [_eafg ]),_aadbf );_eafg +=_fbdec .RowStride ;
_dcaee +=_fagb .RowStride ;};};case PixNotPixSrcXorDst :if _gdfg {for _gfee =0;_gfee < _egcd ;_gfee ++{if _bgdb ==_eabc {_afeb =_fagb .Data [_dega ]<<_cbfg ;if _beff {_afeb =_dfg (_afeb ,_fagb .Data [_dega +1]>>_bagcd ,_ffcf );};}else {_afeb =_fagb .Data [_dega ]>>_bagcd ;
};_fbdec .Data [_bffda ]=_dfg (_fbdec .Data [_bffda ],^(_afeb ^_fbdec .Data [_bffda ]),_bgeg );_bffda +=_fbdec .RowStride ;_dega +=_fagb .RowStride ;};};if _deeb {for _gfee =0;_gfee < _egcd ;_gfee ++{for _gebg =0;_gebg < _geag ;_gebg ++{_afeb =_dfg (_fagb .Data [_fagbf +_gebg ]<<_cbfg ,_fagb .Data [_fagbf +_gebg +1]>>_bagcd ,_ffcf );
_fbdec .Data [_gbde +_gebg ]=^(_afeb ^_fbdec .Data [_gbde +_gebg ]);};_gbde +=_fbdec .RowStride ;_fagbf +=_fagb .RowStride ;};};if _gabce {for _gfee =0;_gfee < _egcd ;_gfee ++{_afeb =_fagb .Data [_dcaee ]<<_cbfg ;if _afbad {_afeb =_dfg (_afeb ,_fagb .Data [_dcaee +1]>>_bagcd ,_ffcf );
};_fbdec .Data [_eafg ]=_dfg (_fbdec .Data [_eafg ],^(_afeb ^_fbdec .Data [_eafg ]),_aadbf );_eafg +=_fbdec .RowStride ;_dcaee +=_fagb .RowStride ;};};default:_gc .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_dffe );
return _e .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func init (){for _adfe :=0;_adfe < 256;_adfe ++{_ecb [_adfe ]=uint8 (_adfe &0x1)+(uint8 (_adfe >>1)&0x1)+(uint8 (_adfe >>2)&0x1)+(uint8 (_adfe >>3)&0x1)+(uint8 (_adfe >>4)&0x1)+(uint8 (_adfe >>5)&0x1)+(uint8 (_adfe >>6)&0x1)+(uint8 (_adfe >>7)&0x1);
};};func (_ecage *Bitmap )SetPixel (x ,y int ,pixel byte )error {_fgecc :=_ecage .GetByteIndex (x ,y );if _fgecc > len (_ecage .Data )-1{return _e .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_fgecc );
};_dgf :=_ecage .GetBitOffset (x );_dbb :=uint (7-_dgf );_ege :=_ecage .Data [_fgecc ];var _cfd byte ;if pixel ==1{_cfd =_ege |(pixel &0x01<<_dbb );}else {_cfd =_ege &^(1<<_dbb );};_ecage .Data [_fgecc ]=_cfd ;return nil ;};func (_eedf *Bitmap )setFourBytes (_bcf int ,_fced uint32 )error {if _bcf +3> len (_eedf .Data )-1{return _e .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bcf );
};_eedf .Data [_bcf ]=byte ((_fced &0xff000000)>>24);_eedf .Data [_bcf +1]=byte ((_fced &0xff0000)>>16);_eedf .Data [_bcf +2]=byte ((_fced &0xff00)>>8);_eedf .Data [_bcf +3]=byte (_fced &0xff);return nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;
ComponentWords ;);func TstWSymbol (t *_g .T ,scale ...int )*Bitmap {_fddc ,_bcbg :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_b .NoError (t ,_bcbg );return TstGetScaledSymbol (t ,_fddc ,scale ...);};func _dggdf (_fgeed *_cc .Stack ,_ecfde ,_cdbb ,_aceb ,_fadf ,_cbfe int ,_gecd *_eca .Rectangle )(_ecaf error ){const _ggecd ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _fgeed ==nil {return _e .Error (_ggecd ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _gecd ==nil {return _e .Error (_ggecd ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_gecd .Min .X =_cc .Min (_gecd .Min .X ,_ecfde );_gecd .Max .X =_cc .Max (_gecd .Max .X ,_cdbb );_gecd .Min .Y =_cc .Min (_gecd .Min .Y ,_aceb );_gecd .Max .Y =_cc .Max (_gecd .Max .Y ,_aceb );if !(_aceb +_fadf >=0&&_aceb +_fadf <=_cbfe ){return nil ;
};if _fgeed .Aux ==nil {return _e .Error (_ggecd ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _ffcc *fillSegment ;_gadb ,_efee :=_fgeed .Aux .Pop ();if _efee {if _ffcc ,_efee =_gadb .(*fillSegment );
!_efee {return _e .Error (_ggecd ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_ffcc =&fillSegment {};
};_ffcc ._fdcgd =_ecfde ;_ffcc ._ggbe =_cdbb ;_ffcc ._bggdd =_aceb ;_ffcc ._eccb =_fadf ;_fgeed .Push (_ffcc );return nil ;};func (_efcg *ClassedPoints )SortByY (){_efcg ._eaabc =_efcg .ySortFunction ();_a .Sort (_efcg )};func (_aggf *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ebb *Boxes ,_bbeg error ){const _fffg ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _aggf ==nil {return nil ,_e .Error (_fffg ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_aggf )==0{return _aggf ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_fffg ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_e .Errorf (_fffg ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_fbef :=_aggf .makeSizeIndicator (width ,height ,tp ,relation );_gbbd ,_bbeg :=_aggf .selectWithIndicator (_fbef );if _bbeg !=nil {return nil ,_e .Wrap (_bbeg ,_fffg ,"");};return _gbbd ,nil ;};func (_bba *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_bba .Width ,Height :_bba .Height ,RowStride :_bba .RowStride ,Color :_bba .Color ,Text :_bba .Text ,BitmapNumber :_bba .BitmapNumber ,Special :_bba .Special ,Data :make ([]byte ,len (_bba .Data ))};
};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_cfac bool ,_gcgbf error ){const _feg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_gcaea ,_dcb :=p1 .Width ,p1 .Height ;
_fbg ,_dgfe :=p3 .Width ,p3 .Height ;if _cc .Abs (_gcaea -_fbg )> maxDiffW {return false ,nil ;};if _cc .Abs (_dcb -_dgfe )> maxDiffH {return false ,nil ;};_cfga :=int (float32 (area1 )*(1.0-rank )+0.5);_efg :=int (float32 (area3 )*(1.0-rank )+0.5);var _aead ,_gbffa int ;
if delX >=0{_aead =int (delX +0.5);}else {_aead =int (delX -0.5);};if delY >=0{_gbffa =int (delY +0.5);}else {_gbffa =int (delY -0.5);};_bcda :=p1 .CreateTemplate ();if _gcgbf =_bcda .RasterOperation (0,0,_gcaea ,_dcb ,PixSrc ,p1 ,0,0);_gcgbf !=nil {return false ,_e .Wrap (_gcgbf ,_feg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _gcgbf =_bcda .RasterOperation (_aead ,_gbffa ,_gcaea ,_dcb ,PixNotSrcAndDst ,p4 ,0,0);_gcgbf !=nil {return false ,_e .Wrap (_gcgbf ,_feg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_cfac ,_gcgbf =_bcda .ThresholdPixelSum (_cfga ,tab8 );if _gcgbf !=nil {return false ,_e .Wrap (_gcgbf ,_feg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");
};if _cfac {return false ,nil ;};if _gcgbf =_bcda .RasterOperation (_aead ,_gbffa ,_fbg ,_dgfe ,PixSrc ,p3 ,0,0);_gcgbf !=nil {return false ,_e .Wrap (_gcgbf ,_feg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gcgbf =_bcda .RasterOperation (0,0,_fbg ,_dgfe ,PixNotSrcAndDst ,p2 ,0,0);
_gcgbf !=nil {return false ,_e .Wrap (_gcgbf ,_feg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_cfac ,_gcgbf =_bcda .ThresholdPixelSum (_efg ,tab8 );if _gcgbf !=nil {return false ,_e .Wrap (_gcgbf ,_feg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");
};return !_cfac ,nil ;};func _dgeg (_aegbb *Bitmap ,_adbg ,_egg int ,_fbcb ,_afea int ,_gcadd RasterOperator ,_egad *Bitmap ,_gedb ,_edega int )error {var _gdgg ,_beeg ,_dbf ,_faaf int ;if _adbg < 0{_gedb -=_adbg ;_fbcb +=_adbg ;_adbg =0;};if _gedb < 0{_adbg -=_gedb ;
_fbcb +=_gedb ;_gedb =0;};_gdgg =_adbg +_fbcb -_aegbb .Width ;if _gdgg > 0{_fbcb -=_gdgg ;};_beeg =_gedb +_fbcb -_egad .Width ;if _beeg > 0{_fbcb -=_beeg ;};if _egg < 0{_edega -=_egg ;_afea +=_egg ;_egg =0;};if _edega < 0{_egg -=_edega ;_afea +=_edega ;
_edega =0;};_dbf =_egg +_afea -_aegbb .Height ;if _dbf > 0{_afea -=_dbf ;};_faaf =_edega +_afea -_egad .Height ;if _faaf > 0{_afea -=_faaf ;};if _fbcb <=0||_afea <=0{return nil ;};var _befa error ;switch {case _adbg &7==0&&_gedb &7==0:_befa =_eged (_aegbb ,_adbg ,_egg ,_fbcb ,_afea ,_gcadd ,_egad ,_gedb ,_edega );
case _adbg &7==_gedb &7:_befa =_gcda (_aegbb ,_adbg ,_egg ,_fbcb ,_afea ,_gcadd ,_egad ,_gedb ,_edega );default:_befa =_ddggc (_aegbb ,_adbg ,_egg ,_fbcb ,_afea ,_gcadd ,_egad ,_gedb ,_edega );};if _befa !=nil {return _e .Wrap (_befa ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");
};return nil ;};func TstFrameBitmapData ()[]byte {return _cefc .Data };func (_bcec *Bitmaps )SortByWidth (){_gdcdc :=(*byWidth )(_bcec );_a .Sort (_gdcdc )};func _ccgbd (_bdag ,_bgba *Bitmap ,_dcad ,_baaf int )(_agfde error ){const _eece ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";
var (_ggef ,_gcdf ,_deab ,_badg int ;_eeaf ,_begec ,_cbff ,_abegc ,_egba ,_bbad ,_fbfb ,_edbab byte ;);for _ggef =0;_ggef < _dcad ;_ggef ++{_deab =_ggef *_bdag .RowStride ;_badg =_ggef *_bgba .RowStride ;for _gcdf =0;_gcdf < _baaf ;_gcdf ++{if _eeaf ,_agfde =_bdag .GetByte (_deab +_gcdf );
_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _begec ,_agfde =_bgba .GetByte (_badg +_gcdf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");
};if _ggef > 0{if _cbff ,_agfde =_bdag .GetByte (_deab -_bdag .RowStride +_gcdf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_eeaf |=_cbff |(_cbff <<1)|(_cbff >>1);if _gcdf > 0{if _edbab ,_agfde =_bdag .GetByte (_deab -_bdag .RowStride +_gcdf -1);
_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_eeaf |=_edbab <<7;};if _gcdf < _baaf -1{if _edbab ,_agfde =_bdag .GetByte (_deab -_bdag .RowStride +_gcdf +1);
_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_eeaf |=_edbab >>7;};};if _gcdf > 0{if _abegc ,_agfde =_bdag .GetByte (_deab +_gcdf -1);_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u006a\u0020\u003e \u0030");
};_eeaf |=_abegc <<7;};_eeaf &=_begec ;if _eeaf ==0||^_eeaf ==0{if _agfde =_bdag .SetByte (_deab +_gcdf ,_eeaf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};
};for {_fbfb =_eeaf ;_eeaf =(_eeaf |(_eeaf >>1)|(_eeaf <<1))&_begec ;if (_eeaf ^_fbfb )==0{if _agfde =_bdag .SetByte (_deab +_gcdf ,_eeaf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");
};break ;};};};};for _ggef =_dcad -1;_ggef >=0;_ggef --{_deab =_ggef *_bdag .RowStride ;_badg =_ggef *_bgba .RowStride ;for _gcdf =_baaf -1;_gcdf >=0;_gcdf --{if _eeaf ,_agfde =_bdag .GetByte (_deab +_gcdf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _begec ,_agfde =_bgba .GetByte (_badg +_gcdf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _ggef < _dcad -1{if _egba ,_agfde =_bdag .GetByte (_deab +_bdag .RowStride +_gcdf );
_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_eeaf |=_egba |(_egba <<1)|_egba >>1;if _gcdf > 0{if _edbab ,_agfde =_bdag .GetByte (_deab +_bdag .RowStride +_gcdf -1);
_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_eeaf |=_edbab <<7;};if _gcdf < _baaf -1{if _edbab ,_agfde =_bdag .GetByte (_deab +_bdag .RowStride +_gcdf +1);
_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_eeaf |=_edbab >>7;};};if _gcdf < _baaf -1{if _bbad ,_agfde =_bdag .GetByte (_deab +_gcdf +1);_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_eeaf |=_bbad >>7;};_eeaf &=_begec ;if _eeaf ==0||(^_eeaf )==0{if _agfde =_bdag .SetByte (_deab +_gcdf ,_eeaf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_fbfb =_eeaf ;
_eeaf =(_eeaf |(_eeaf >>1)|(_eeaf <<1))&_begec ;if (_eeaf ^_fbfb )==0{if _agfde =_bdag .SetByte (_deab +_gcdf ,_eeaf );_agfde !=nil {return _e .Wrap (_agfde ,_eece ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};var _ecb [256]uint8 ;func _dcd (_bcca *Bitmap ,_gfff ...MorphProcess )(_efcd *Bitmap ,_eegd error ){const _eeba ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _bcca ==nil {return nil ,_e .Error (_eeba ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_gfff )==0{return nil ,_e .Error (_eeba ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _eegd =_acae (_gfff ...);
_eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");};var _eecb ,_ccge ,_cfba int ;_efcd =_bcca .Copy ();for _ ,_aeced :=range _gfff {switch _aeced .Operation {case MopDilation :_eecb ,_ccge =_aeced .getWidthHeight ();_efcd ,_eegd =DilateBrick (nil ,_efcd ,_eecb ,_ccge );
if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");};case MopErosion :_eecb ,_ccge =_aeced .getWidthHeight ();_efcd ,_eegd =_fdff (nil ,_efcd ,_eecb ,_ccge );if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");};case MopOpening :_eecb ,_ccge =_aeced .getWidthHeight ();
_efcd ,_eegd =_bfaf (nil ,_efcd ,_eecb ,_ccge );if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");};case MopClosing :_eecb ,_ccge =_aeced .getWidthHeight ();_efcd ,_eegd =_fabf (nil ,_efcd ,_eecb ,_ccge );if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");
};case MopRankBinaryReduction :_efcd ,_eegd =_ebg (_efcd ,_aeced .Arguments ...);if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");};case MopReplicativeBinaryExpansion :_efcd ,_eegd =_gaea (_efcd ,_aeced .Arguments [0]);if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");
};case MopAddBorder :_cfba =_aeced .Arguments [0];_efcd ,_eegd =_efcd .AddBorder (_cfba ,0);if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"");};default:return nil ,_e .Error (_eeba ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _cfba > 0{_efcd ,_eegd =_efcd .RemoveBorder (_cfba );if _eegd !=nil {return nil ,_e .Wrap (_eegd ,_eeba ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _efcd ,nil ;};func (_fee *Bitmap )clipRectangle (_ceaf ,_bggd *_eca .Rectangle )(_ecfg *Bitmap ,_bfbe error ){const _cfbg ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _ceaf ==nil {return nil ,_e .Error (_cfbg ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_beba ,_bgaf :=_fee .Width ,_fee .Height ;_eaca ,_bfbe :=ClipBoxToRectangle (_ceaf ,_beba ,_bgaf );if _bfbe !=nil {_gc .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_bfbe );
return nil ,nil ;};_fbde ,_ggfb :=_eaca .Min .X ,_eaca .Min .Y ;_gbed ,_acea :=_eaca .Max .X -_eaca .Min .X ,_eaca .Max .Y -_eaca .Min .Y ;_ecfg =New (_gbed ,_acea );_ecfg .Text =_fee .Text ;if _bfbe =_ecfg .RasterOperation (0,0,_gbed ,_acea ,PixSrc ,_fee ,_fbde ,_ggfb );
_bfbe !=nil {return nil ,_e .Wrap (_bfbe ,_cfbg ,"");};if _bggd !=nil {*_bggd =*_eaca ;};return _ecfg ,nil ;};var (_cefc *Bitmap ;_bfae *Bitmap ;);func (_acfgbe *ClassedPoints )YAtIndex (i int )float32 {return (*_acfgbe .Points )[_acfgbe .IntSlice [i ]].Y ;
};type Boxes []*_eca .Rectangle ;func Centroids (bms []*Bitmap )(*Points ,error ){_agecc :=make ([]Point ,len (bms ));_cdccf :=_ccfg ();_acfce :=_aaeg ();var _gfge error ;for _fdfe ,_fcef :=range bms {_agecc [_fdfe ],_gfge =_fcef .centroid (_cdccf ,_acfce );
if _gfge !=nil {return nil ,_gfge ;};};_cbbe :=Points (_agecc );return &_cbbe ,nil ;};func (_edbf *Bitmap )Equivalent (s *Bitmap )bool {return _edbf .equivalent (s )};func _ebg (_ced *Bitmap ,_fgcb ...int )(_ac *Bitmap ,_cff error ){const _aec ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _ced ==nil {return nil ,_e .Error (_aec ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_fgcb )==0||len (_fgcb )> 4{return nil ,_e .Error (_aec ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _fgcb [0]<=0{_gc .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ac ,_cff =_eaec (nil ,_ced );if _cff !=nil {return nil ,_e .Wrap (_cff ,_aec ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _ac ,nil ;};_eef :=_fde ();_ac =_ced ;for _fga ,_aeg :=range _fgcb {if _aeg <=0{break ;};_ac ,_cff =_aea (_ac ,_aeg ,_eef );if _cff !=nil {return nil ,_e .Wrapf (_cff ,_aec ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_fga );
};};return _ac ,nil ;};func _ebgf (_dbag *Bitmap ,_ddgae *_cc .Stack ,_dccb ,_cfeda int )(_cdag *_eca .Rectangle ,_eadf error ){const _ebbd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dbag ==nil {return nil ,_e .Error (_ebbd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _ddgae ==nil {return nil ,_e .Error (_ebbd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_begc ,_ccad :=_dbag .Width ,_dbag .Height ;_facbc :=_begc -1;_egbb :=_ccad -1;if _dccb < 0||_dccb > _facbc ||_cfeda < 0||_cfeda > _egbb ||!_dbag .GetPixel (_dccb ,_cfeda ){return nil ,nil ;
};_bdeg :=_eca .Rect (100000,100000,0,0);if _eadf =_dggdf (_ddgae ,_dccb ,_dccb ,_cfeda ,1,_egbb ,&_bdeg );_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eadf =_dggdf (_ddgae ,_dccb ,_dccb ,_cfeda +1,-1,_egbb ,&_bdeg );
_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_bdeg .Min .X ,_bdeg .Max .X =_dccb ,_dccb ;_bdeg .Min .Y ,_bdeg .Max .Y =_cfeda ,_cfeda ;var (_ebdf *fillSegment ;
_cabe int ;);for _ddgae .Len ()> 0{if _ebdf ,_eadf =_dadf (_ddgae );_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"");};_cfeda =_ebdf ._bggdd ;for _dccb =_ebdf ._fdcgd -1;_dccb >=0&&_dbag .GetPixel (_dccb ,_cfeda );_dccb --{if _eadf =_dbag .SetPixel (_dccb ,_cfeda ,0);
_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _dccb >=_ebdf ._fdcgd -1{for {for _dccb ++;_dccb <=_ebdf ._ggbe +1&&_dccb <=_facbc &&!_dbag .GetPixel (_dccb ,_cfeda );_dccb ++{};_cabe =_dccb ;if !(_dccb <=_ebdf ._ggbe +1&&_dccb <=_facbc ){break ;
};for ;_dccb <=_facbc &&_dbag .GetPixel (_dccb ,_cfeda );_dccb ++{if _eadf =_dbag .SetPixel (_dccb ,_cfeda ,0);_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _eadf =_dggdf (_ddgae ,_cabe ,_dccb -1,_ebdf ._bggdd ,_ebdf ._eccb ,_egbb ,&_bdeg );
_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dccb > _ebdf ._ggbe {if _eadf =_dggdf (_ddgae ,_ebdf ._ggbe +1,_dccb -1,_ebdf ._bggdd ,-_ebdf ._eccb ,_egbb ,&_bdeg );_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_cabe =_dccb +1;if _cabe < _ebdf ._fdcgd {if _eadf =_dggdf (_ddgae ,_cabe ,_ebdf ._fdcgd -1,_ebdf ._bggdd ,-_ebdf ._eccb ,_egbb ,&_bdeg );_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_dccb =_ebdf ._fdcgd ;for {for ;_dccb <=_facbc &&_dbag .GetPixel (_dccb ,_cfeda );_dccb ++{if _eadf =_dbag .SetPixel (_dccb ,_cfeda ,0);_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _eadf =_dggdf (_ddgae ,_cabe ,_dccb -1,_ebdf ._bggdd ,_ebdf ._eccb ,_egbb ,&_bdeg );
_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dccb > _ebdf ._ggbe {if _eadf =_dggdf (_ddgae ,_ebdf ._ggbe +1,_dccb -1,_ebdf ._bggdd ,-_ebdf ._eccb ,_egbb ,&_bdeg );_eadf !=nil {return nil ,_e .Wrap (_eadf ,_ebbd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _dccb ++;_dccb <=_ebdf ._ggbe +1&&_dccb <=_facbc &&!_dbag .GetPixel (_dccb ,_cfeda );_dccb ++{};_cabe =_dccb ;if !(_dccb <=_ebdf ._ggbe +1&&_dccb <=_facbc ){break ;};};};_bdeg .Max .X ++;_bdeg .Max .Y ++;return &_bdeg ,nil ;};func TstImageBitmap ()*Bitmap {return _bfae .Copy ()};
func _cbe (_fcca int )int {if _fcca < 0{return -_fcca ;};return _fcca ;};func (_febg Points )GetIntY (i int )(int ,error ){if i >=len (_febg ){return 0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_febg [i ].Y ),nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func _acae (_ead ...MorphProcess )(_acaga error ){const _gaac ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";
var _cbdbb ,_gfca int ;for _gaab ,_cegb :=range _ead {if _acaga =_cegb .verify (_gaab ,&_cbdbb ,&_gfca );_acaga !=nil {return _e .Wrap (_acaga ,_gaac ,"");};};if _gfca !=0&&_cbdbb !=0{return _e .Error (_gaac ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func (_bggb Points )XSorter ()func (_bgbd ,_acba int )bool {return func (_decf ,_gaga int )bool {return _bggb [_decf ].X < _bggb [_gaga ].X };};func (_gggac *Bitmaps )SortByHeight (){_edaf :=(*byHeight )(_gggac );_a .Sort (_edaf )};type BitmapsArray struct{Values []*Bitmaps ;
Boxes []*_eca .Rectangle ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _bgdf (oldByte ,newByte ,op );};func _cbeb (_edfe ,_ecge *Bitmap ,_eacaa *Selection )(*Bitmap ,error ){const _bbdf ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _geac ,_fbdba int ;if _ecge ==nil {return nil ,_e .Error (_bbdf ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _eacaa ==nil {return nil ,_e .Error (_bbdf ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_geac =_eacaa .Width ;_fbdba =_eacaa .Height ;if _geac ==0||_fbdba ==0{return nil ,_e .Error (_bbdf ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _edfe ==nil {return _ecge .createTemplate (),nil ;};if _gdg :=_edfe .resizeImageData (_ecge );
_gdg !=nil {return nil ,_gdg ;};return _edfe ,nil ;};func (_gafdb *ClassedPoints )Len ()int {return _gafdb .IntSlice .Size ()};func (_adbe *byHeight )Len ()int {return len (_adbe .Values )};func _aaeg ()[]int {_aegb :=make ([]int ,256);for _ffea :=0;_ffea <=0xff;
_ffea ++{_cdbf :=byte (_ffea );_aegb [_cdbf ]=int (_cdbf &0x1)+(int (_cdbf >>1)&0x1)+(int (_cdbf >>2)&0x1)+(int (_cdbf >>3)&0x1)+(int (_cdbf >>4)&0x1)+(int (_cdbf >>5)&0x1)+(int (_cdbf >>6)&0x1)+(int (_cdbf >>7)&0x1);};return _aegb ;};func _gafa (_cgfg ,_gfacd int ,_cdgg string )*Selection {_aggce :=&Selection {Height :_cgfg ,Width :_gfacd ,Name :_cdgg };
_aggce .Data =make ([][]SelectionValue ,_cgfg );for _bbccc :=0;_bbccc < _cgfg ;_bbccc ++{_aggce .Data [_bbccc ]=make ([]SelectionValue ,_gfacd );};return _aggce ;};func (_faa *Bitmap )SizesEqual (s *Bitmap )bool {if _faa ==s {return true ;};if _faa .Width !=s .Width ||_faa .Height !=s .Height {return false ;
};return true ;};func (_bgfa *Bitmaps )CountPixels ()*_cc .NumSlice {_caae :=&_cc .NumSlice {};for _ ,_adbd :=range _bgfa .Values {_caae .AddInt (_adbd .CountPixels ());};return _caae ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;
LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_fgcab *byWidth )Less (i ,j int )bool {return _fgcab .Values [i ].Width < _fgcab .Values [j ].Width };type Points []Point ;func Rect (x ,y ,w ,h int )(*_eca .Rectangle ,error ){const _dcee ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";
if x < 0{w +=x ;x =0;if w <=0{return nil ,_e .Errorf (_dcee ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_e .Error (_dcee ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");
};};_aagc :=_eca .Rect (x ,y ,x +w ,y +h );return &_aagc ,nil ;};func _abfe (_gccc ,_fedc ,_fgfa *Bitmap )(*Bitmap ,error ){const _ecggg ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _fedc ==nil {return nil ,_e .Error (_ecggg ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _fgfa ==nil {return nil ,_e .Error (_ecggg ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gccc ==_fgfa {return nil ,_e .Error (_ecggg ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_fedc .SizesEqual (_fgfa ){_gc .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_ecggg );
};var _gac error ;if _gccc ,_gac =_eaec (_gccc ,_fedc );_gac !=nil {return nil ,_e .Wrap (_gac ,_ecggg ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _gac =_gccc .RasterOperation (0,0,_gccc .Width ,_gccc .Height ,PixSrcXorDst ,_fgfa ,0,0);
_gac !=nil {return nil ,_e .Wrap (_gac ,_ecggg ,"");};return _gccc ,nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);type byWidth Bitmaps ;func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _eaec (d ,s )};func _aed (_bfff *Bitmap )(_gcde *Bitmap ,_ebee int ,_decb error ){const _bagg ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _bfff ==nil {return nil ,0,_e .Errorf (_bagg ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _fgab ,_cabbf *Bitmap ;if _fgab ,_decb =_eaec (nil ,_bfff );_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_daf [13]int ;_ggab ,_dgfc int ;);_fbcc :=12;_dcge :=_cc .NewNumSlice (_fbcc +1);_cgcg :=_cc .NewNumSlice (_fbcc +1);var _deac *Boxes ;for _agbag :=0;_agbag <=_fbcc ;_agbag ++{if _agbag ==0{if _cabbf ,_decb =_eaec (nil ,_fgab );_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _cabbf ,_decb =_dcd (_fgab ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _deac ,_decb =_cabbf .connComponentsBB (4);
_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"");};_daf [_agbag ]=len (*_deac );_dcge .AddInt (_daf [_agbag ]);switch _agbag {case 0:_ggab =_daf [0];default:_dgfc =_daf [_agbag -1]-_daf [_agbag ];_cgcg .AddInt (_dgfc );};_fgab =_cabbf ;};_faace :=true ;
_bdgd :=2;var _ecgd ,_aeeb int ;for _geb :=1;_geb < len (*_cgcg );_geb ++{if _ecgd ,_decb =_dcge .GetInt (_geb );_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _faace &&_ecgd < int (0.3*float32 (_ggab )){_bdgd =_geb +1;_faace =false ;};if _dgfc ,_decb =_cgcg .GetInt (_geb );_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");
};if _dgfc > _aeeb {_aeeb =_dgfc ;};};_cccc :=_bfff .XResolution ;if _cccc ==0{_cccc =150;};if _cccc > 110{_bdgd ++;};if _bdgd < 2{_gc .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_bdgd =2;};_ebee =_bdgd +1;if _gcde ,_decb =_agbb (nil ,_bfff ,_bdgd +1,1);_decb !=nil {return nil ,0,_e .Wrap (_decb ,_bagg ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _gcde ,_ebee ,nil ;
};var _cgcf =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_dce *Boxes )makeSizeIndicator (_cfbe ,_afd int ,_cbdgc LocationFilter ,_bdecd SizeComparison )*_cc .NumSlice {_ccae :=&_cc .NumSlice {};var _aegf ,_bece ,_afc int ;for _ ,_gcfb :=range *_dce {_aegf =0;_bece ,_afc =_gcfb .Dx (),_gcfb .Dy ();switch _cbdgc {case LocSelectWidth :if (_bdecd ==SizeSelectIfLT &&_bece < _cfbe )||(_bdecd ==SizeSelectIfGT &&_bece > _cfbe )||(_bdecd ==SizeSelectIfLTE &&_bece <=_cfbe )||(_bdecd ==SizeSelectIfGTE &&_bece >=_cfbe ){_aegf =1;
};case LocSelectHeight :if (_bdecd ==SizeSelectIfLT &&_afc < _afd )||(_bdecd ==SizeSelectIfGT &&_afc > _afd )||(_bdecd ==SizeSelectIfLTE &&_afc <=_afd )||(_bdecd ==SizeSelectIfGTE &&_afc >=_afd ){_aegf =1;};case LocSelectIfEither :if (_bdecd ==SizeSelectIfLT &&(_afc < _afd ||_bece < _cfbe ))||(_bdecd ==SizeSelectIfGT &&(_afc > _afd ||_bece > _cfbe ))||(_bdecd ==SizeSelectIfLTE &&(_afc <=_afd ||_bece <=_cfbe ))||(_bdecd ==SizeSelectIfGTE &&(_afc >=_afd ||_bece >=_cfbe )){_aegf =1;
};case LocSelectIfBoth :if (_bdecd ==SizeSelectIfLT &&(_afc < _afd &&_bece < _cfbe ))||(_bdecd ==SizeSelectIfGT &&(_afc > _afd &&_bece > _cfbe ))||(_bdecd ==SizeSelectIfLTE &&(_afc <=_afd &&_bece <=_cfbe ))||(_bdecd ==SizeSelectIfGTE &&(_afc >=_afd &&_bece >=_cfbe )){_aegf =1;
};};_ccae .AddInt (_aegf );};return _ccae ;};func MakePixelCentroidTab8 ()[]int {return _ccfg ()};func _cece (_cade *Bitmap ,_ageea *_cc .Stack ,_dgbfb ,_eeegd ,_aabd int )(_ccdd *_eca .Rectangle ,_caac error ){const _dcab ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _cade ==nil {return nil ,_e .Error (_dcab ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _ageea ==nil {return nil ,_e .Error (_dcab ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _aabd {case 4:if _ccdd ,_caac =_fdeg (_cade ,_ageea ,_dgbfb ,_eeegd );_caac !=nil {return nil ,_e .Wrap (_caac ,_dcab ,"");};return _ccdd ,nil ;case 8:if _ccdd ,_caac =_ebgf (_cade ,_ageea ,_dgbfb ,_eeegd );_caac !=nil {return nil ,_e .Wrap (_caac ,_dcab ,"");
};return _ccdd ,nil ;default:return nil ,_e .Errorf (_dcab ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_aabd );
};};func TstWordBitmap (t *_g .T ,scale ...int )*Bitmap {_ggada :=1;if len (scale )> 0{_ggada =scale [0];};_cbgg :=3;_fafed :=9+7+15+2*_cbgg ;_edcg :=5+_cbgg +5;_efaf :=New (_fafed *_ggada ,_edcg *_ggada );_adaaf :=&Bitmaps {};var _defa *int ;_cbgg *=_ggada ;
_acfd :=0;_defa =&_acfd ;_eebd :=0;_egbd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );_egbd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,_cbgg );_egbd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );
_egbd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,_cbgg );_egbd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );_egbd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );
_egbd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,0);*_defa =0;_eebd =5*_ggada +_cbgg ;_egbd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );_egbd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,_cbgg );
_egbd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );_egbd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );_egbd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );
_egbd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,1*_ggada );_egbd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_adaaf ,_egbd ,_defa ,_eebd ,0);TstWriteSymbols (t ,_adaaf ,_efaf );return _efaf ;};func _aea (_faf *Bitmap ,_afe int ,_ffd []byte )(_ab *Bitmap ,_ggeg error ){const _cdb ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _faf ==nil {return nil ,_e .Error (_cdb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _afe < 1||_afe > 4{return nil ,_e .Error (_cdb ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _faf .Height <=1{return nil ,_e .Errorf (_cdb ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_faf .Height );
};_ab =New (_faf .Width /2,_faf .Height /2);if _ffd ==nil {_ffd =_fde ();};_cgg :=_ebd (_faf .RowStride ,2*_ab .RowStride );switch _afe {case 1:_ggeg =_ccb (_faf ,_ab ,_afe ,_ffd ,_cgg );case 2:_ggeg =_ddg (_faf ,_ab ,_afe ,_ffd ,_cgg );case 3:_ggeg =_fce (_faf ,_ab ,_afe ,_ffd ,_cgg );
case 4:_ggeg =_edfc (_faf ,_ab ,_afe ,_ffd ,_cgg );};if _ggeg !=nil {return nil ,_ggeg ;};return _ab ,nil ;};func TstGetScaledSymbol (t *_g .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_fdec ,_caaf :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_b .NoError (t ,_caaf );return _fdec ;};func (_badba Points )YSorter ()func (_gaed ,_ddgb int )bool {return func (_ccba ,_cdbc int )bool {return _badba [_ccba ].Y < _badba [_cdbc ].Y };};func TstTSymbol (t *_g .T ,scale ...int )*Bitmap {_fbabf ,_efgf :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});
_b .NoError (t ,_efgf );return TstGetScaledSymbol (t ,_fbabf ,scale ...);};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _eaac ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_ceb :=_ebf (width ,height );_ceb .Data =data ;
if len (data )< height *_ceb .RowStride {return nil ,_e .Errorf (_eaac ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_ceb .RowStride );
};return _ceb ,nil ;};func (_gbbec *Bitmaps )String ()string {_eecdg :=_bc .Builder {};for _ ,_cddd :=range _gbbec .Values {_eecdg .WriteString (_cddd .String ());_eecdg .WriteRune ('\n');};return _eecdg .String ();};func (_eafa *Bitmap )thresholdPixelSum (_egabc int )bool {var (_agdd int ;
_aae uint8 ;_dgdb byte ;_eeeg int ;);_cgd :=_eafa .RowStride ;_abc :=uint (_eafa .Width &0x07);if _abc !=0{_aae =uint8 ((0xff<<(8-_abc ))&0xff);_cgd --;};for _cdeg :=0;_cdeg < _eafa .Height ;_cdeg ++{for _eeeg =0;_eeeg < _cgd ;_eeeg ++{_dgdb =_eafa .Data [_cdeg *_eafa .RowStride +_eeeg ];
_agdd +=int (_ecb [_dgdb ]);};if _abc !=0{_dgdb =_eafa .Data [_cdeg *_eafa .RowStride +_eeeg ]&_aae ;_agdd +=int (_ecb [_dgdb ]);};if _agdd > _egabc {return true ;};};return false ;};func _ggad (_beaf ,_gdc *Bitmap ,_aaef ,_abbe ,_dab ,_bab ,_aggc int ,_eaea CombinationOperator )error {var _eacc int ;
_aba :=func (){_eacc ++;_dab +=_gdc .RowStride ;_bab +=_beaf .RowStride ;_aggc +=_beaf .RowStride };for _eacc =_aaef ;_eacc < _abbe ;_aba (){_ecfae :=_dab ;for _agae :=_bab ;_agae <=_aggc ;_agae ++{_abdcb ,_fbab :=_gdc .GetByte (_ecfae );if _fbab !=nil {return _fbab ;
};_afb ,_fbab :=_beaf .GetByte (_agae );if _fbab !=nil {return _fbab ;};if _fbab =_gdc .SetByte (_ecfae ,_bgdf (_abdcb ,_afb ,_eaea ));_fbab !=nil {return _fbab ;};_ecfae ++;};};return nil ;};type MorphOperation int ;func (_febd *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _eacd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_febd .IntSlice .Size (){return 0,_e .Errorf (_eacd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_febd .XAtIndex (i )),nil ;};func _cggbf (_gfc ,_abbf *Bitmap ,_daaff ,_fdba ,_aaea ,_ggec ,_bbg ,_fgd ,_deb ,_abcd int ,_cfdb CombinationOperator ,_aadg int )error {var _dccg int ;_gfbf :=func (){_dccg ++;_aaea +=_abbf .RowStride ;_ggec +=_gfc .RowStride ;
_bbg +=_gfc .RowStride };for _dccg =_daaff ;_dccg < _fdba ;_gfbf (){var _dcfd uint16 ;_cae :=_aaea ;for _fgb :=_ggec ;_fgb <=_bbg ;_fgb ++{_fgecf ,_bgce :=_abbf .GetByte (_cae );if _bgce !=nil {return _bgce ;};_aab ,_bgce :=_gfc .GetByte (_fgb );if _bgce !=nil {return _bgce ;
};_dcfd =(_dcfd |(uint16 (_aab )&0xff))<<uint (_abcd );_aab =byte (_dcfd >>8);if _bgce =_abbf .SetByte (_cae ,_bgdf (_fgecf ,_aab ,_cfdb ));_bgce !=nil {return _bgce ;};_cae ++;_dcfd <<=uint (_deb );if _fgb ==_bbg {_aab =byte (_dcfd >>(8-uint8 (_abcd )));
if _aadg !=0{_aab =_bcef (uint (8+_fgd ),_aab );};_fgecf ,_bgce =_abbf .GetByte (_cae );if _bgce !=nil {return _bgce ;};if _bgce =_abbf .SetByte (_cae ,_bgdf (_fgecf ,_aab ,_cfdb ));_bgce !=nil {return _bgce ;};};};};return nil ;};type fillSegment struct{_fdcgd int ;
_ggbe int ;_bggdd int ;_eccb int ;};func (_ddec *Bitmap )setBit (_ggga int ){_ddec .Data [(_ggga >>3)]|=0x80>>uint (_ggga &7)};type Color int ;func _aggff (_gcgf ,_dbbg *Bitmap ,_acff ,_aece ,_ecgf uint ,_agec ,_agcg int ,_fafd bool ,_agdf ,_bgea int )error {for _ecagd :=_agec ;
_ecagd < _agcg ;_ecagd ++{if _agdf +1< len (_gcgf .Data ){_afba :=_ecagd +1==_agcg ;_cgag ,_efd :=_gcgf .GetByte (_agdf );if _efd !=nil {return _efd ;};_agdf ++;_cgag <<=_acff ;_eaeb ,_efd :=_gcgf .GetByte (_agdf );if _efd !=nil {return _efd ;};_eaeb >>=_aece ;
_adee :=_cgag |_eaeb ;if _afba &&!_fafd {_adee =_bcef (_ecgf ,_adee );};_efd =_dbbg .SetByte (_bgea ,_adee );if _efd !=nil {return _efd ;};_bgea ++;if _afba &&_fafd {_bebg ,_cabc :=_gcgf .GetByte (_agdf );if _cabc !=nil {return _cabc ;};_bebg <<=_acff ;
_adee =_bcef (_ecgf ,_bebg );if _cabc =_dbbg .SetByte (_bgea ,_adee );_cabc !=nil {return _cabc ;};};continue ;};_gcba ,_bbbcc :=_gcgf .GetByte (_agdf );if _bbbcc !=nil {_gc .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_agdf ,_bbbcc );
return _bbbcc ;};_gcba <<=_acff ;_agdf ++;_bbbcc =_dbbg .SetByte (_bgea ,_gcba );if _bbbcc !=nil {return _bbbcc ;};_bgea ++;};return nil ;};func (_efea *Points )Add (pt *Points )error {const _agee ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";
if _efea ==nil {return _e .Error (_agee ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _e .Error (_agee ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};*_efea =append (*_efea ,*pt ...);return nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_deca Points )GetIntX (i int )(int ,error ){if i >=len (_deca ){return 0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_deca [i ].X ),nil ;};type RasterOperator int ;func _fdff (_bgaa ,_bega *Bitmap ,_cgbe ,_cacb int )(*Bitmap ,error ){const _fagd ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _bega ==nil {return nil ,_e .Error (_fagd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cgbe < 1||_cacb < 1{return nil ,_e .Error (_fagd ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _cgbe ==1&&_cacb ==1{_eafc ,_cbeg :=_eaec (_bgaa ,_bega );if _cbeg !=nil {return nil ,_e .Wrap (_cbeg ,_fagd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _eafc ,nil ;};if _cgbe ==1||_cacb ==1{_eab :=SelCreateBrick (_cacb ,_cgbe ,_cacb /2,_cgbe /2,SelHit );_ffcb ,_cbba :=_agad (_bgaa ,_bega ,_eab );if _cbba !=nil {return nil ,_e .Wrap (_cbba ,_fagd ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ffcb ,nil ;};_agfd :=SelCreateBrick (1,_cgbe ,0,_cgbe /2,SelHit );_bed :=SelCreateBrick (_cacb ,1,_cacb /2,0,SelHit );_bacg ,_fcbe :=_agad (nil ,_bega ,_agfd );if _fcbe !=nil {return nil ,_e .Wrap (_fcbe ,_fagd ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_bgaa ,_fcbe =_agad (_bgaa ,_bacg ,_bed );if _fcbe !=nil {return nil ,_e .Wrap (_fcbe ,_fagd ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bgaa ,nil ;};func (_afag *Bitmap )Zero ()bool {_cffa :=_afag .Width /8;_gcbg :=_afag .Width &7;var _ggf byte ;
if _gcbg !=0{_ggf =byte (0xff<<uint (8-_gcbg ));};var _cbb ,_ecfb ,_eage int ;for _ecfb =0;_ecfb < _afag .Height ;_ecfb ++{_cbb =_afag .RowStride *_ecfb ;for _eage =0;_eage < _cffa ;_eage ,_cbb =_eage +1,_cbb +1{if _afag .Data [_cbb ]!=0{return false ;
};};if _gcbg > 0{if _afag .Data [_cbb ]&_ggf !=0{return false ;};};};return true ;};func (_fdf *Boxes )Add (box *_eca .Rectangle )error {if _fdf ==nil {return _e .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_fdf =append (*_fdf ,box );return nil ;};func (_eedfd *Bitmaps )selectByIndicator (_eecdc *_cc .NumSlice )(_ageeb *Bitmaps ,_gfcdc error ){const _gcec ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _eedfd ==nil {return nil ,_e .Error (_gcec ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _eecdc ==nil {return nil ,_e .Error (_gcec ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_eedfd .Values )==0{return _eedfd ,nil ;};if len (*_eecdc )!=len (_eedfd .Values ){return nil ,_e .Errorf (_gcec ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_eecdc ),len (_eedfd .Values ));
};var _fgffc ,_geef ,_face int ;for _geef =0;_geef < len (*_eecdc );_geef ++{if _fgffc ,_gfcdc =_eecdc .GetInt (_geef );_gfcdc !=nil {return nil ,_e .Wrap (_gfcdc ,_gcec ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _fgffc ==1{_face ++;
};};if _face ==len (_eedfd .Values ){return _eedfd ,nil ;};_ageeb =&Bitmaps {};_bedg :=len (_eedfd .Values )==len (_eedfd .Boxes );for _geef =0;_geef < len (*_eecdc );_geef ++{if _fgffc =int ((*_eecdc )[_geef ]);_fgffc ==0{continue ;};_ageeb .Values =append (_ageeb .Values ,_eedfd .Values [_geef ]);
if _bedg {_ageeb .Boxes =append (_ageeb .Boxes ,_eedfd .Boxes [_geef ]);};};return _ageeb ,nil ;};func (_ebcb *Bitmap )setEightBytes (_bgae int ,_eagd uint64 )error {_facbe :=_ebcb .RowStride -(_bgae %_ebcb .RowStride );if _ebcb .RowStride !=_ebcb .Width >>3{_facbe --;
};if _facbe >=8{return _ebcb .setEightFullBytes (_bgae ,_eagd );};return _ebcb .setEightPartlyBytes (_bgae ,_facbe ,_eagd );};type byHeight Bitmaps ;func (_fcgb *Bitmaps )AddBox (box *_eca .Rectangle ){_fcgb .Boxes =append (_fcgb .Boxes ,box )};type Bitmaps struct{Values []*Bitmap ;
Boxes []*_eca .Rectangle ;};func (_agba *Bitmap )setTwoBytes (_ffee int ,_eea uint16 )error {if _ffee +1> len (_agba .Data )-1{return _e .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ffee );
};_agba .Data [_ffee ]=byte ((_eea &0xff00)>>8);_agba .Data [_ffee +1]=byte (_eea &0xff);return nil ;};func (_cfdad *Bitmaps )AddBitmap (bm *Bitmap ){_cfdad .Values =append (_cfdad .Values ,bm )};func TstNSymbol (t *_g .T ,scale ...int )*Bitmap {_faee ,_dbccd :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_b .NoError (t ,_dbccd );return TstGetScaledSymbol (t ,_faee ,scale ...);};func (_effd *Bitmap )countPixels ()int {var (_fcb int ;_edfg uint8 ;_effg byte ;_ebc int ;);_dfb :=_effd .RowStride ;_bacc :=uint (_effd .Width &0x07);if _bacc !=0{_edfg =uint8 ((0xff<<(8-_bacc ))&0xff);
_dfb --;};for _egdb :=0;_egdb < _effd .Height ;_egdb ++{for _ebc =0;_ebc < _dfb ;_ebc ++{_effg =_effd .Data [_egdb *_effd .RowStride +_ebc ];_fcb +=int (_ecb [_effg ]);};if _bacc !=0{_fcb +=int (_ecb [_effd .Data [_egdb *_effd .RowStride +_ebc ]&_edfg ]);
};};return _fcb ;};func (_dgbd *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _cecc ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _ecdb :=_dgbd .validateIntSlice ();
_ecdb !=nil {return nil ,_e .Wrap (_ecdb ,_cecc ,"");};if _dgbd .IntSlice .Size ()==0{return nil ,_e .Error (_cecc ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_dgbd .SortByY ();var (_cceg []*ClassedPoints ;
_gbaef int ;);_ddgag :=-1;var _ddaa *ClassedPoints ;for _fedgb :=0;_fedgb < len (_dgbd .IntSlice );_fedgb ++{_gbaef =int (_dgbd .YAtIndex (_fedgb ));if _gbaef !=_ddgag {_ddaa =&ClassedPoints {Points :_dgbd .Points };_ddgag =_gbaef ;_cceg =append (_cceg ,_ddaa );
};_ddaa .IntSlice =append (_ddaa .IntSlice ,_dgbd .IntSlice [_fedgb ]);};for _ ,_dafe :=range _cceg {_dafe .SortByX ();};return _cceg ,nil ;};func _gd (_f ,_ff *Bitmap )(_ad error ){const _fb ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";
_gg :=_ff .RowStride ;_cf :=_f .RowStride ;var (_ed byte ;_ffc uint16 ;_gdb ,_bd ,_eff ,_d ,_bda int ;);for _eff =0;_eff < _ff .Height ;_eff ++{_gdb =_eff *_gg ;_bd =2*_eff *_cf ;for _d =0;_d < _gg ;_d ++{_ed =_ff .Data [_gdb +_d ];_ffc =_ceff [_ed ];_bda =_bd +_d *2;
if _f .RowStride !=_ff .RowStride *2&&(_d +1)*2> _f .RowStride {_ad =_f .SetByte (_bda ,byte (_ffc >>8));}else {_ad =_f .setTwoBytes (_bda ,_ffc );};if _ad !=nil {return _e .Wrap (_ad ,_fb ,"");};};for _d =0;_d < _cf ;_d ++{_bda =_bd +_cf +_d ;_ed =_f .Data [_bd +_d ];
if _ad =_f .SetByte (_bda ,_ed );_ad !=nil {return _e .Wrapf (_ad ,_fb ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_bd +_d ,_bd +_cf +_d );
};};};return nil ;};func _ebf (_fge ,_gba int )*Bitmap {return &Bitmap {Width :_fge ,Height :_gba ,RowStride :(_fge +7)>>3};};func (_bac *Bitmap )ClipRectangle (box *_eca .Rectangle )(_gae *Bitmap ,_gab *_eca .Rectangle ,_aaa error ){const _edd ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_e .Error (_edd ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_bea ,_bfc :=_bac .Width ,_bac .Height ;_cfed :=_eca .Rect (0,0,_bea ,_bfc );if !box .Overlaps (_cfed ){return nil ,nil ,_e .Error (_edd ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_dbc :=box .Intersect (_cfed );_ccfc ,_ccfa :=_dbc .Min .X ,_dbc .Min .Y ;_badb ,_ffe :=_dbc .Dx (),_dbc .Dy ();_gae =New (_badb ,_ffe );_gae .Text =_bac .Text ;if _aaa =_gae .RasterOperation (0,0,_badb ,_ffe ,PixSrc ,_bac ,_ccfc ,_ccfa );_aaa !=nil {return nil ,nil ,_e .Wrap (_aaa ,_edd ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_gab =&_dbc ;return _gae ,_gab ,nil ;};func (_ggccd Points )Size ()int {return len (_ggccd )};type SizeComparison int ;func (_dfeb *Bitmap )SetDefaultPixel (){for _feab :=range _dfeb .Data {_dfeb .Data [_feab ]=byte (0xff);};};func _ebd (_fff ,_bfac int )int {if _fff < _bfac {return _fff ;
};return _bfac ;};var (_eeeea =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gfcac =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _ebfe (_dfeag *Bitmap ,_baa ,_fefb ,_dcgeg ,_fedga int ,_bfcf RasterOperator ){if _baa < 0{_dcgeg +=_baa ;
_baa =0;};_ceeb :=_baa +_dcgeg -_dfeag .Width ;if _ceeb > 0{_dcgeg -=_ceeb ;};if _fefb < 0{_fedga +=_fefb ;_fefb =0;};_dadac :=_fefb +_fedga -_dfeag .Height ;if _dadac > 0{_fedga -=_dadac ;};if _dcgeg <=0||_fedga <=0{return ;};if (_baa &7)==0{_aafd (_dfeag ,_baa ,_fefb ,_dcgeg ,_fedga ,_bfcf );
}else {_agbg (_dfeag ,_baa ,_fefb ,_dcgeg ,_fedga ,_bfcf );};};func (_fggec *Selection )findMaxTranslations ()(_ecef ,_gdae ,_deae ,_aceg int ){for _gdcb :=0;_gdcb < _fggec .Height ;_gdcb ++{for _baad :=0;_baad < _fggec .Width ;_baad ++{if _fggec .Data [_gdcb ][_baad ]==SelHit {_ecef =_eaae (_ecef ,_fggec .Cx -_baad );
_gdae =_eaae (_gdae ,_fggec .Cy -_gdcb );_deae =_eaae (_deae ,_baad -_fggec .Cx );_aceg =_eaae (_aceg ,_gdcb -_fggec .Cy );};};};return _ecef ,_gdae ,_deae ,_aceg ;};type CombinationOperator int ;func (_afg *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _afg .removeBorderGeneral (left ,right ,top ,bot );
};func TstESymbol (t *_g .T ,scale ...int )*Bitmap {_egdg ,_bfgc :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_b .NoError (t ,_bfgc );return TstGetScaledSymbol (t ,_egdg ,scale ...);};func (_adfd *Bitmap )addPadBits ()(_daed error ){const _dbeed ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_cbge :=_adfd .Width %8;if _cbge ==0{return nil ;};_cfgc :=_adfd .Width /8;_fedg :=_aa .NewReader (_adfd .Data );_afed :=make ([]byte ,_adfd .Height *_adfd .RowStride );_efaa :=_aa .NewWriterMSB (_afed );_ecbd :=make ([]byte ,_cfgc );var (_bfea int ;_dcg uint64 ;
);for _bfea =0;_bfea < _adfd .Height ;_bfea ++{if _ ,_daed =_fedg .Read (_ecbd );_daed !=nil {return _e .Wrap (_daed ,_dbeed ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_daed =_efaa .Write (_ecbd );_daed !=nil {return _e .Wrap (_daed ,_dbeed ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _dcg ,_daed =_fedg .ReadBits (byte (_cbge ));_daed !=nil {return _e .Wrap (_daed ,_dbeed ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _daed =_efaa .WriteByte (byte (_dcg )<<uint (8-_cbge ));_daed !=nil {return _e .Wrap (_daed ,_dbeed ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_adfd .Data =_efaa .Data ();return nil ;};func (_ggbb *ClassedPoints )ySortFunction ()func (_cbeeb int ,_afdc int )bool {return func (_cbcg ,_bgcgf int )bool {return _ggbb .YAtIndex (_cbcg )< _ggbb .YAtIndex (_bgcgf )};};func TstPSymbol (t *_g .T )*Bitmap {t .Helper ();
_ffeg :=New (5,8);_b .NoError (t ,_ffeg .SetPixel (0,0,1));_b .NoError (t ,_ffeg .SetPixel (1,0,1));_b .NoError (t ,_ffeg .SetPixel (2,0,1));_b .NoError (t ,_ffeg .SetPixel (3,0,1));_b .NoError (t ,_ffeg .SetPixel (4,1,1));_b .NoError (t ,_ffeg .SetPixel (0,1,1));
_b .NoError (t ,_ffeg .SetPixel (4,2,1));_b .NoError (t ,_ffeg .SetPixel (0,2,1));_b .NoError (t ,_ffeg .SetPixel (4,3,1));_b .NoError (t ,_ffeg .SetPixel (0,3,1));_b .NoError (t ,_ffeg .SetPixel (0,4,1));_b .NoError (t ,_ffeg .SetPixel (1,4,1));_b .NoError (t ,_ffeg .SetPixel (2,4,1));
_b .NoError (t ,_ffeg .SetPixel (3,4,1));_b .NoError (t ,_ffeg .SetPixel (0,5,1));_b .NoError (t ,_ffeg .SetPixel (0,6,1));_b .NoError (t ,_ffeg .SetPixel (0,7,1));return _ffeg ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};
type LocationFilter int ;func (_efff *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bbbcb ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _efff ==nil {return nil ,_e .Error (_bbbcb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_efff .Values )-1{return nil ,_e .Errorf (_bbbcb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _efff .Values [i ],nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _fbdb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_feba :=_ebf (width ,height );_feba .Data =data ;if _fag :=((width *height )+7)>>3;len (data )< _fag {return nil ,_e .Errorf (_fbdb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_fag );
};if _daaf :=_feba .addPadBits ();_daaf !=nil {return nil ,_e .Wrap (_daaf ,_fbdb ,"");};return _feba ,nil ;};func (_cdcca *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _fddf ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";
if len (_cdcca .Values )==0{return nil ,_e .Error (_fddf ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_gaeb :=&BitmapsArray {};_cdcca .SortByHeight ();_cefff :=-1;_bfedb :=-1;for _caba :=0;_caba < len (_cdcca .Values );
_caba ++{_bdda :=_cdcca .Values [_caba ].Height ;if _bdda > _cefff {_cefff =_bdda ;_bfedb ++;_gaeb .Values =append (_gaeb .Values ,&Bitmaps {});};_gaeb .Values [_bfedb ].AddBitmap (_cdcca .Values [_caba ]);};return _gaeb ,nil ;};func (_ebeca *ClassedPoints )XAtIndex (i int )float32 {return (*_ebeca .Points )[_ebeca .IntSlice [i ]].X };
func (_fcadc *ClassedPoints )validateIntSlice ()error {const _cfee ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_dgcg :=range _fcadc .IntSlice {if _dgcg >=(_fcadc .Points .Size ()){return _e .Errorf (_cfee ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_dgcg ,_fcadc .Points .Size ());
};};return nil ;};func (_fcbdb *ClassedPoints )Less (i ,j int )bool {return _fcbdb ._eaabc (i ,j )};func (_dee *Bitmap )equivalent (_gbd *Bitmap )bool {if _dee ==_gbd {return true ;};if !_dee .SizesEqual (_gbd ){return false ;};_fcbd :=_cadc (_dee ,_gbd ,CmbOpXor );
_aaf :=_dee .countPixels ();_fgcg :=int (0.25*float32 (_aaf ));if _fcbd .thresholdPixelSum (_fgcg ){return false ;};var (_ebec [9][9]int ;_ddga [18][9]int ;_bgfd [9][18]int ;_ebef int ;_bec int ;);_dbg :=9;_gbdf :=_dee .Height /_dbg ;_gabc :=_dee .Width /_dbg ;
_aeeagf ,_dgc :=_gbdf /2,_gabc /2;if _gbdf < _gabc {_aeeagf =_gabc /2;_dgc =_gbdf /2;};_faac :=float64 (_aeeagf )*float64 (_dgc )*_gf .Pi ;_dgaf :=int (float64 (_gbdf *_gabc /2)*0.9);_dfd :=int (float64 (_gabc *_gbdf /2)*0.9);for _cebd :=0;_cebd < _dbg ;
_cebd ++{_gcg :=_gabc *_cebd +_ebef ;var _fedf int ;if _cebd ==_dbg -1{_ebef =0;_fedf =_dee .Width ;}else {_fedf =_gcg +_gabc ;if ((_dee .Width -_ebef )%_dbg )> 0{_ebef ++;_fedf ++;};};for _gga :=0;_gga < _dbg ;_gga ++{_gbec :=_gbdf *_gga +_bec ;var _gfb int ;
if _gga ==_dbg -1{_bec =0;_gfb =_dee .Height ;}else {_gfb =_gbec +_gbdf ;if (_dee .Height -_bec )%_dbg > 0{_bec ++;_gfb ++;};};var _cgf ,_fgfd ,_aef ,_bfbeb int ;_aga :=(_gcg +_fedf )/2;_ebgd :=(_gbec +_gfb )/2;for _fdb :=_gcg ;_fdb < _fedf ;_fdb ++{for _adfde :=_gbec ;
_adfde < _gfb ;_adfde ++{if _fcbd .GetPixel (_fdb ,_adfde ){if _fdb < _aga {_cgf ++;}else {_fgfd ++;};if _adfde < _ebgd {_bfbeb ++;}else {_aef ++;};};};};_ebec [_cebd ][_gga ]=_cgf +_fgfd ;_ddga [_cebd *2][_gga ]=_cgf ;_ddga [_cebd *2+1][_gga ]=_fgfd ;
_bgfd [_cebd ][_gga *2]=_bfbeb ;_bgfd [_cebd ][_gga *2+1]=_aef ;};};for _ddbea :=0;_ddbea < _dbg *2-1;_ddbea ++{for _gegb :=0;_gegb < (_dbg -1);_gegb ++{var _fbe int ;for _egf :=0;_egf < 2;_egf ++{for _eeff :=0;_eeff < 2;_eeff ++{_fbe +=_ddga [_ddbea +_egf ][_gegb +_eeff ];
};};if _fbe > _dfd {return false ;};};};for _acd :=0;_acd < (_dbg -1);_acd ++{for _fcga :=0;_fcga < ((_dbg *2)-1);_fcga ++{var _eegc int ;for _eec :=0;_eec < 2;_eec ++{for _def :=0;_def < 2;_def ++{_eegc +=_bgfd [_acd +_eec ][_fcga +_def ];};};if _eegc > _dgaf {return false ;
};};};for _cccb :=0;_cccb < (_dbg -2);_cccb ++{for _cba :=0;_cba < (_dbg -2);_cba ++{var _gbaa ,_adda int ;for _dggf :=0;_dggf < 3;_dggf ++{for _ddce :=0;_ddce < 3;_ddce ++{if _dggf ==_ddce {_gbaa +=_ebec [_cccb +_dggf ][_cba +_ddce ];};if (2-_dggf )==_ddce {_adda +=_ebec [_cccb +_dggf ][_cba +_ddce ];
};};};if _gbaa > _dfd ||_adda > _dfd {return false ;};};};for _bfef :=0;_bfef < (_dbg -1);_bfef ++{for _fgef :=0;_fgef < (_dbg -1);_fgef ++{var _bbbb int ;for _bgga :=0;_bgga < 2;_bgga ++{for _cgcc :=0;_cgcc < 2;_cgcc ++{_bbbb +=_ebec [_bfef +_bgga ][_fgef +_cgcc ];
};};if float64 (_bbbb )> _faac {return false ;};};};return true ;};func (_fefe *Bitmap )centroid (_eagda ,_aaad []int )(Point ,error ){_fbccf :=Point {};_fefe .setPadBits (0);if len (_eagda )==0{_eagda =_ccfg ();};if len (_aaad )==0{_aaad =_aaeg ();};var _cdac ,_bdc ,_gdcd ,_fceg ,_aeaf ,_efb int ;
var _dced byte ;for _aeaf =0;_aeaf < _fefe .Height ;_aeaf ++{_fcgd :=_fefe .RowStride *_aeaf ;_fceg =0;for _efb =0;_efb < _fefe .RowStride ;_efb ++{_dced =_fefe .Data [_fcgd +_efb ];if _dced !=0{_fceg +=_aaad [_dced ];_cdac +=_eagda [_dced ]+_efb *8*_aaad [_dced ];
};};_gdcd +=_fceg ;_bdc +=_fceg *_aeaf ;};if _gdcd !=0{_fbccf .X =float32 (_cdac )/float32 (_gdcd );_fbccf .Y =float32 (_bdc )/float32 (_gdcd );};return _fbccf ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;
CmbOpNot ;);func (_ddc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _ddc .Copy (),nil ;};_gafd ,_eee :=_ddc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _eee !=nil {return nil ,_e .Wrap (_eee ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");
};return _gafd ,nil ;};func _gdf (_bdfb *Bitmap ,_ggfg *Bitmap ,_acfgb *Selection )(*Bitmap ,error ){var (_fbfd *Bitmap ;_dba error ;);_bdfb ,_dba =_gfcd (_bdfb ,_ggfg ,_acfgb ,&_fbfd );if _dba !=nil {return nil ,_dba ;};if _dba =_bdfb .clearAll ();_dba !=nil {return nil ,_dba ;
};var _eead SelectionValue ;for _dcgg :=0;_dcgg < _acfgb .Height ;_dcgg ++{for _abgg :=0;_abgg < _acfgb .Width ;_abgg ++{_eead =_acfgb .Data [_dcgg ][_abgg ];if _eead ==SelHit {if _dba =_bdfb .RasterOperation (_abgg -_acfgb .Cx ,_dcgg -_acfgb .Cy ,_ggfg .Width ,_ggfg .Height ,PixSrcOrDst ,_fbfd ,0,0);
_dba !=nil {return nil ,_dba ;};};};};return _bdfb ,nil ;};func (_ddbc *Bitmap )addBorderGeneral (_gadd ,_agcd ,_fed ,_cdeb int ,_egab int )(*Bitmap ,error ){const _fdd ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _gadd < 0||_agcd < 0||_fed < 0||_cdeb < 0{return nil ,_e .Error (_fdd ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_gag ,_edgf :=_ddbc .Width ,_ddbc .Height ;_bfb :=_gag +_gadd +_agcd ;_cggd :=_edgf +_fed +_cdeb ;
_dgb :=New (_bfb ,_cggd );_dgb .Color =_ddbc .Color ;_ggea :=PixClr ;if _egab > 0{_ggea =PixSet ;};_abdc :=_dgb .RasterOperation (0,0,_gadd ,_cggd ,_ggea ,nil ,0,0);if _abdc !=nil {return nil ,_e .Wrap (_abdc ,_fdd ,"\u006c\u0065\u0066\u0074");};_abdc =_dgb .RasterOperation (_bfb -_agcd ,0,_agcd ,_cggd ,_ggea ,nil ,0,0);
if _abdc !=nil {return nil ,_e .Wrap (_abdc ,_fdd ,"\u0072\u0069\u0067h\u0074");};_abdc =_dgb .RasterOperation (0,0,_bfb ,_fed ,_ggea ,nil ,0,0);if _abdc !=nil {return nil ,_e .Wrap (_abdc ,_fdd ,"\u0074\u006f\u0070");};_abdc =_dgb .RasterOperation (0,_cggd -_cdeb ,_bfb ,_cdeb ,_ggea ,nil ,0,0);
if _abdc !=nil {return nil ,_e .Wrap (_abdc ,_fdd ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_abdc =_dgb .RasterOperation (_gadd ,_fed ,_gag ,_edgf ,PixSrc ,_ddbc ,0,0);if _abdc !=nil {return nil ,_e .Wrap (_abdc ,_fdd ,"\u0063\u006f\u0070\u0079");};return _dgb ,nil ;
};func _eged (_gebbd *Bitmap ,_ccfgb ,_ecfd ,_dcae ,_afedd int ,_adffa RasterOperator ,_edaa *Bitmap ,_gbac ,_afcb int )error {var (_fcd byte ;_fged int ;_cfeea int ;_dcag ,_gcac int ;_gbg ,_dged int ;);_dacee :=_dcae >>3;_gegd :=_dcae &7;if _gegd > 0{_fcd =_eeeea [_gegd ];
};_fged =_edaa .RowStride *_afcb +(_gbac >>3);_cfeea =_gebbd .RowStride *_ecfd +(_ccfgb >>3);switch _adffa {case PixSrc :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;
_dged ++{_gebbd .Data [_gcac ]=_edaa .Data [_dcag ];_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],_edaa .Data [_dcag ],_fcd );};};case PixNotSrc :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;
_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]=^(_edaa .Data [_dcag ]);_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],^_edaa .Data [_dcag ],_fcd );};};case PixSrcOrDst :for _gbg =0;
_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]|=_edaa .Data [_dcag ];_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],_edaa .Data [_dcag ]|_gebbd .Data [_gcac ],_fcd );
};};case PixSrcAndDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]&=_edaa .Data [_dcag ];_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],_edaa .Data [_dcag ]&_gebbd .Data [_gcac ],_fcd );
};};case PixSrcXorDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]^=_edaa .Data [_dcag ];_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],_edaa .Data [_dcag ]^_gebbd .Data [_gcac ],_fcd );
};};case PixNotSrcOrDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]|=^(_edaa .Data [_dcag ]);_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],^(_edaa .Data [_dcag ])|_gebbd .Data [_gcac ],_fcd );
};};case PixNotSrcAndDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]&=^(_edaa .Data [_dcag ]);_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],^(_edaa .Data [_dcag ])&_gebbd .Data [_gcac ],_fcd );
};};case PixSrcOrNotDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]=_edaa .Data [_dcag ]|^(_gebbd .Data [_gcac ]);_gcac ++;
_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],_edaa .Data [_dcag ]|^(_gebbd .Data [_gcac ]),_fcd );};};case PixSrcAndNotDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;
for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]=_edaa .Data [_dcag ]&^(_gebbd .Data [_gcac ]);_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],_edaa .Data [_dcag ]&^(_gebbd .Data [_gcac ]),_fcd );};};case PixNotPixSrcOrDst :for _gbg =0;
_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]=^(_edaa .Data [_dcag ]|_gebbd .Data [_gcac ]);_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],^(_edaa .Data [_dcag ]|_gebbd .Data [_gcac ]),_fcd );
};};case PixNotPixSrcAndDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]=^(_edaa .Data [_dcag ]&_gebbd .Data [_gcac ]);_gcac ++;
_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],^(_edaa .Data [_dcag ]&_gebbd .Data [_gcac ]),_fcd );};};case PixNotPixSrcXorDst :for _gbg =0;_gbg < _afedd ;_gbg ++{_dcag =_fged +_gbg *_edaa .RowStride ;_gcac =_cfeea +_gbg *_gebbd .RowStride ;
for _dged =0;_dged < _dacee ;_dged ++{_gebbd .Data [_gcac ]=^(_edaa .Data [_dcag ]^_gebbd .Data [_gcac ]);_gcac ++;_dcag ++;};if _gegd > 0{_gebbd .Data [_gcac ]=_dfg (_gebbd .Data [_gcac ],^(_edaa .Data [_dcag ]^_gebbd .Data [_gcac ]),_fcd );};};default:_gc .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_adffa );
return _e .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_fdcg Points )GetGeometry (i int )(_cecg ,_dagc float32 ,_ebbg error ){if i > len (_fdcg )-1{return 0,0,_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ccgd :=_fdcg [i ];return _ccgd .X ,_ccgd .Y ,nil ;};func (_fgagd *ClassedPoints )xSortFunction ()func (_bagc int ,_gaacc int )bool {return func (_gddd ,_agaa int )bool {return _fgagd .XAtIndex (_gddd )< _fgagd .XAtIndex (_agaa )};};func _cab (_cde *Bitmap ,_gcad ,_bdg int )(*Bitmap ,error ){const _dbd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";
if _cde ==nil {return nil ,_e .Error (_dbd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gcad <=0||_bdg <=0{return nil ,_e .Error (_dbd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");
};if _gcad ==_bdg {if _gcad ==1{_aag ,_ee :=_eaec (nil ,_cde );if _ee !=nil {return nil ,_e .Wrap (_ee ,_dbd ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _aag ,nil ;};if _gcad ==2||_gcad ==4||_gcad ==8{_gcf ,_gbc :=_ecf (_cde ,_gcad );
if _gbc !=nil {return nil ,_e .Wrap (_gbc ,_dbd ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _gcf ,nil ;};};_ffcg :=_gcad *_cde .Width ;_be :=_bdg *_cde .Height ;_ccf :=New (_ffcg ,_be );_dd :=_ccf .RowStride ;
var (_gcfd ,_feb ,_fc ,_dde ,_faca int ;_de byte ;_dc error ;);for _feb =0;_feb < _cde .Height ;_feb ++{_gcfd =_bdg *_feb *_dd ;for _fc =0;_fc < _cde .Width ;_fc ++{if _eaab :=_cde .GetPixel (_fc ,_feb );_eaab {_faca =_gcad *_fc ;for _dde =0;_dde < _gcad ;
_dde ++{_ccf .setBit (_gcfd *8+_faca +_dde );};};};for _dde =1;_dde < _bdg ;_dde ++{_adf :=_gcfd +_dde *_dd ;for _cdg :=0;_cdg < _dd ;_cdg ++{if _de ,_dc =_ccf .GetByte (_gcfd +_cdg );_dc !=nil {return nil ,_e .Wrapf (_dc ,_dbd ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_dde );
};if _dc =_ccf .SetByte (_adf +_cdg ,_de );_dc !=nil {return nil ,_e .Wrap (_dc ,_dbd ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _ccf ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _gdf (d ,s ,sel )};
func _agbg (_adaac *Bitmap ,_ecfef ,_dgcec int ,_dade ,_eggc int ,_dbddb RasterOperator ){var (_aded bool ;_cdgf bool ;_cgfbd int ;_fgeg int ;_ccgb int ;_gegg int ;_bgaae bool ;_gdad byte ;);_faef :=8-(_ecfef &7);_gbbee :=_gfcac [_faef ];_gaaee :=_adaac .RowStride *_dgcec +(_ecfef >>3);
if _dade < _faef {_aded =true ;_gbbee &=_eeeea [8-_faef +_dade ];};if !_aded {_cgfbd =(_dade -_faef )>>3;if _cgfbd !=0{_cdgf =true ;_fgeg =_gaaee +1;};};_ccgb =(_ecfef +_dade )&7;if !(_aded ||_ccgb ==0){_bgaae =true ;_gdad =_eeeea [_ccgb ];_gegg =_gaaee +1+_cgfbd ;
};var _efcgf ,_fegb int ;switch _dbddb {case PixClr :for _efcgf =0;_efcgf < _eggc ;_efcgf ++{_adaac .Data [_gaaee ]=_dfg (_adaac .Data [_gaaee ],0x0,_gbbee );_gaaee +=_adaac .RowStride ;};if _cdgf {for _efcgf =0;_efcgf < _eggc ;_efcgf ++{for _fegb =0;_fegb < _cgfbd ;
_fegb ++{_adaac .Data [_fgeg +_fegb ]=0x0;};_fgeg +=_adaac .RowStride ;};};if _bgaae {for _efcgf =0;_efcgf < _eggc ;_efcgf ++{_adaac .Data [_gegg ]=_dfg (_adaac .Data [_gegg ],0x0,_gdad );_gegg +=_adaac .RowStride ;};};case PixSet :for _efcgf =0;_efcgf < _eggc ;
_efcgf ++{_adaac .Data [_gaaee ]=_dfg (_adaac .Data [_gaaee ],0xff,_gbbee );_gaaee +=_adaac .RowStride ;};if _cdgf {for _efcgf =0;_efcgf < _eggc ;_efcgf ++{for _fegb =0;_fegb < _cgfbd ;_fegb ++{_adaac .Data [_fgeg +_fegb ]=0xff;};_fgeg +=_adaac .RowStride ;
};};if _bgaae {for _efcgf =0;_efcgf < _eggc ;_efcgf ++{_adaac .Data [_gegg ]=_dfg (_adaac .Data [_gegg ],0xff,_gdad );_gegg +=_adaac .RowStride ;};};case PixNotDst :for _efcgf =0;_efcgf < _eggc ;_efcgf ++{_adaac .Data [_gaaee ]=_dfg (_adaac .Data [_gaaee ],^_adaac .Data [_gaaee ],_gbbee );
_gaaee +=_adaac .RowStride ;};if _cdgf {for _efcgf =0;_efcgf < _eggc ;_efcgf ++{for _fegb =0;_fegb < _cgfbd ;_fegb ++{_adaac .Data [_fgeg +_fegb ]=^(_adaac .Data [_fgeg +_fegb ]);};_fgeg +=_adaac .RowStride ;};};if _bgaae {for _efcgf =0;_efcgf < _eggc ;
_efcgf ++{_adaac .Data [_gegg ]=_dfg (_adaac .Data [_gegg ],^_adaac .Data [_gegg ],_gdad );_gegg +=_adaac .RowStride ;};};};};func TstRSymbol (t *_g .T ,scale ...int )*Bitmap {_daba ,_daga :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_b .NoError (t ,_daga );
return TstGetScaledSymbol (t ,_daba ,scale ...);};var _ _a .Interface =&ClassedPoints {};func (_ccga *Bitmap )connComponentsBB (_cacaa int )(_fgcc *Boxes ,_aeae error ){const _fgff ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";
if _cacaa !=4&&_cacaa !=8{return nil ,_e .Error (_fgff ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ccga .Zero (){return &Boxes {},nil ;
};_ccga .setPadBits (0);_bceb ,_aeae :=_eaec (nil ,_ccga );if _aeae !=nil {return nil ,_e .Wrap (_aeae ,_fgff ,"\u0062\u006d\u0031");};_gfcf :=&_cc .Stack {};_gfcf .Aux =&_cc .Stack {};_fgcc =&Boxes {};var (_cbbf ,_bbac int ;_cggf _eca .Point ;_gaae bool ;
_bgfb *_eca .Rectangle ;);for {if _cggf ,_gaae ,_aeae =_bceb .nextOnPixel (_bbac ,_cbbf );_aeae !=nil {return nil ,_e .Wrap (_aeae ,_fgff ,"");};if !_gaae {break ;};if _bgfb ,_aeae =_cece (_bceb ,_gfcf ,_cggf .X ,_cggf .Y ,_cacaa );_aeae !=nil {return nil ,_e .Wrap (_aeae ,_fgff ,"");
};if _aeae =_fgcc .Add (_bgfb );_aeae !=nil {return nil ,_e .Wrap (_aeae ,_fgff ,"");};_bbac =_cggf .X ;_cbbf =_cggf .Y ;};return _fgcc ,nil ;};type Point struct{X ,Y float32 ;};func (_gfed *byWidth )Len ()int {return len (_gfed .Values )};func (_geba *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _faeb (_geba ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_cadcg MorphProcess )verify (_faba int ,_acg ,_cacag *int )error {const _dede ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _cadcg .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_cadcg .Arguments )!=2{return _e .Error (_dede ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_dagg ,_dcfb :=_cadcg .getWidthHeight ();if _dagg <=0||_dcfb <=0{return _e .Error (_dede ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_cbbb :=len (_cadcg .Arguments );*_acg +=_cbbb ;if _cbbb < 1||_cbbb > 4{return _e .Error (_dede ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _bbdg :=0;_bbdg < _cbbb ;_bbdg ++{if _cadcg .Arguments [_bbdg ]< 1||_cadcg .Arguments [_bbdg ]> 4{return _e .Error (_dede ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_cadcg .Arguments )==0{return _e .Error (_dede ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_efce :=_cadcg .Arguments [0];if _efce !=2&&_efce !=4&&_efce !=8{return _e .Error (_dede ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_acg -=_gbbcg [_efce /4];case MopAddBorder :if len (_cadcg .Arguments )==0{return _e .Error (_dede ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcaa :=_cadcg .Arguments [0];if _faba > 0{return _e .Error (_dede ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _gcaa < 1{return _e .Error (_dede ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_cacag =_gcaa ;};return nil ;};func _bfaf (_ecfbc ,_aaed *Bitmap ,_ddcdb ,_cdegd int )(*Bitmap ,error ){const _ccaa ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";
if _aaed ==nil {return nil ,_e .Error (_ccaa ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _ddcdb < 1&&_cdegd < 1{return nil ,_e .Error (_ccaa ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");
};if _ddcdb ==1&&_cdegd ==1{return _aaed .Copy (),nil ;};if _ddcdb ==1||_cdegd ==1{var _dcfa error ;_cebac :=SelCreateBrick (_cdegd ,_ddcdb ,_cdegd /2,_ddcdb /2,SelHit );_ecfbc ,_dcfa =_acfb (_ecfbc ,_aaed ,_cebac );if _dcfa !=nil {return nil ,_e .Wrap (_dcfa ,_ccaa ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ecfbc ,nil ;};_gfac :=SelCreateBrick (1,_ddcdb ,0,_ddcdb /2,SelHit );_acda :=SelCreateBrick (_cdegd ,1,_cdegd /2,0,SelHit );_bbbbd ,_bbfc :=_agad (nil ,_aaed ,_gfac );if _bbfc !=nil {return nil ,_e .Wrap (_bbfc ,_ccaa ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_ecfbc ,_bbfc =_agad (_ecfbc ,_bbbbd ,_acda );if _bbfc !=nil {return nil ,_e .Wrap (_bbfc ,_ccaa ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_bbfc =_gdf (_bbbbd ,_ecfbc ,_gfac );if _bbfc !=nil {return nil ,_e .Wrap (_bbfc ,_ccaa ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_bbfc =_gdf (_ecfbc ,_bbbbd ,_acda );if _bbfc !=nil {return nil ,_e .Wrap (_bbfc ,_ccaa ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ecfbc ,nil ;};func (_egd *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _egd .Copy (),nil ;
};_baf ,_gfe :=_egd .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gfe !=nil {return nil ,_e .Wrap (_gfe ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _baf ,nil ;};func New (width ,height int )*Bitmap {_efab :=_ebf (width ,height );
_efab .Data =make ([]byte ,height *_efab .RowStride );return _efab ;};func (_fgca *Bitmaps )Size ()int {return len (_fgca .Values )};func (_eaacf *Bitmap )InverseData (){_eaacf .inverseData ()};var _gbbcg =[5]int {1,2,3,0,4};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_fgbca :=_gafa (h ,w ,"");
_fgbca .setOrigin (cy ,cx );var _ecde ,_bcgad int ;for _ecde =0;_ecde < h ;_ecde ++{for _bcgad =0;_bcgad < w ;_bcgad ++{_fgbca .Data [_ecde ][_bcgad ]=tp ;};};return _fgbca ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _faeb (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _agga (_fegg *Bitmap ,_ceafb *Bitmap ,_ddfd int )(_cefb error ){const _bdcb ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_dafee :=_ebd (_fegg .Height ,_ceafb .Height );_fgefb :=_ebd (_fegg .RowStride ,_ceafb .RowStride );
switch _ddfd {case 4:_cefb =_efgd (_fegg ,_ceafb ,_dafee ,_fgefb );case 8:_cefb =_ccgbd (_fegg ,_ceafb ,_dafee ,_fgefb );default:return _e .Errorf (_bdcb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_ddfd );
};if _cefb !=nil {return _e .Wrap (_cefb ,_bdcb ,"");};return nil ;};func (_dbeec *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _badda ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_dbeec .IntSlice .Size (){return 0,_e .Errorf (_badda ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dbeec .YAtIndex (i )),nil ;};func (_abe *Bitmap )resizeImageData (_gfefc *Bitmap )error {if _gfefc ==nil {return _e .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _abe .SizesEqual (_gfefc ){return nil ;};_abe .Data =make ([]byte ,len (_gfefc .Data ));_abe .Width =_gfefc .Width ;_abe .Height =_gfefc .Height ;_abe .RowStride =_gfefc .RowStride ;return nil ;};func _ccb (_df ,_fef *Bitmap ,_cbf int ,_ddb []byte ,_bad int )(_cgc error ){const _acb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_agb ,_ccfd ,_bde ,_cbd ,_bfg ,_ebe ,_edg ,_fbd int ;_gcae ,_cbg uint32 ;_egb ,_edb byte ;_ecgg uint16 ;);_adg :=make ([]byte ,4);_bbc :=make ([]byte ,4);for _bde =0;_bde < _df .Height -1;_bde ,_cbd =_bde +2,_cbd +1{_agb =_bde *_df .RowStride ;_ccfd =_cbd *_fef .RowStride ;
for _bfg ,_ebe =0,0;_bfg < _bad ;_bfg ,_ebe =_bfg +4,_ebe +1{for _edg =0;_edg < 4;_edg ++{_fbd =_agb +_bfg +_edg ;if _fbd <=len (_df .Data )-1&&_fbd < _agb +_df .RowStride {_adg [_edg ]=_df .Data [_fbd ];}else {_adg [_edg ]=0x00;};_fbd =_agb +_df .RowStride +_bfg +_edg ;
if _fbd <=len (_df .Data )-1&&_fbd < _agb +(2*_df .RowStride ){_bbc [_edg ]=_df .Data [_fbd ];}else {_bbc [_edg ]=0x00;};};_gcae =_ef .BigEndian .Uint32 (_adg );_cbg =_ef .BigEndian .Uint32 (_bbc );_cbg |=_gcae ;_cbg |=_cbg <<1;_cbg &=0xaaaaaaaa;_gcae =_cbg |(_cbg <<7);
_egb =byte (_gcae >>24);_edb =byte ((_gcae >>8)&0xff);_fbd =_ccfd +_ebe ;if _fbd +1==len (_fef .Data )-1||_fbd +1>=_ccfd +_fef .RowStride {_fef .Data [_fbd ]=_ddb [_egb ];}else {_ecgg =(uint16 (_ddb [_egb ])<<8)|uint16 (_ddb [_edb ]);if _cgc =_fef .setTwoBytes (_fbd ,_ecgg );
_cgc !=nil {return _e .Wrapf (_cgc ,_acb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fbd );};_ebe ++;};};};
return nil ;};func _dgbf (_dafg ,_fgfb ,_dbfb *Bitmap ,_gcdg int )(*Bitmap ,error ){const _fbdc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _fgfb ==nil {return nil ,_e .Error (_fbdc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _dbfb ==nil {return nil ,_e .Error (_fbdc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _gcdg !=4&&_gcdg !=8{return nil ,_e .Error (_fbdc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _dgfb error ;_dafg ,_dgfb =_eaec (_dafg ,_fgfb );if _dgfb !=nil {return nil ,_e .Wrap (_dgfb ,_fbdc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_ggaec :=_fgfb .createTemplate ();_dbfb .setPadBits (0);
for _ccegd :=0;_ccegd < _ebce ;_ccegd ++{_ggaec ,_dgfb =_eaec (_ggaec ,_dafg );if _dgfb !=nil {return nil ,_e .Wrapf (_dgfb ,_fbdc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ccegd );};if _dgfb =_agga (_dafg ,_dbfb ,_gcdg );
_dgfb !=nil {return nil ,_e .Wrapf (_dgfb ,_fbdc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ccegd );};if _ggaec .Equals (_dafg ){break ;};};return _dafg ,nil ;};const _ebce =5000;func (_caace *Selection )setOrigin (_agdde ,_agaeb int ){_caace .Cy ,_caace .Cx =_agdde ,_agaeb };
func (_fabg *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ggba ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _fabg ==nil {return nil ,_e .Error (_ggba ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if s ==nil {return nil ,_e .Error (_ggba ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_deebd :=len (_fabg .Values );_baggc :=&Bitmaps {Values :make ([]*Bitmap ,_deebd ),Boxes :make ([]*_eca .Rectangle ,_deebd )};
var (_dbgcc ,_befg *Bitmap ;_bggad *_eca .Rectangle ;_bgfea error ;);for _eaebc :=0;_eaebc < _deebd ;_eaebc ++{if _dbgcc ,_bgfea =_fabg .GetBitmap (_eaebc );_bgfea !=nil {return nil ,_e .Wrap (_bgfea ,_ggba ,"");};if _bggad ,_bgfea =_fabg .GetBox (_eaebc );
_bgfea !=nil {return nil ,_e .Wrap (_bgfea ,_ggba ,"");};if _befg ,_bgfea =s .clipRectangle (_bggad ,nil );_bgfea !=nil {return nil ,_e .Wrap (_bgfea ,_ggba ,"");};if _befg ,_bgfea =_befg .And (_dbgcc );_bgfea !=nil {return nil ,_e .Wrap (_bgfea ,_ggba ,"");
};_baggc .Values [_eaebc ]=_befg ;_baggc .Boxes [_eaebc ]=_bggad ;};return _baggc ,nil ;};func _fgge (_bagf ,_ccaf *Bitmap ,_bbeb *Selection )(*Bitmap ,error ){const _gec ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _caaa error ;
if _bagf ,_caaa =_cbeb (_bagf ,_ccaf ,_bbeb );_caaa !=nil {return nil ,_caaa ;};_gdebb ,_caaa :=_gdf (nil ,_ccaf ,_bbeb );if _caaa !=nil {return nil ,_e .Wrap (_caaa ,_gec ,"");};if _ ,_caaa =_agad (_bagf ,_gdebb ,_bbeb );_caaa !=nil {return nil ,_e .Wrap (_caaa ,_gec ,"");
};return _bagf ,nil ;};func (_cag *Bitmap )SetByte (index int ,v byte )error {if index > len (_cag .Data )-1||index < 0{return _e .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_cag .Data [index ]=v ;return nil ;};func TstImageBitmapData ()[]byte {return _bfae .Data };func (_dga *Bitmap )clearAll ()error {return _dga .RasterOperation (0,0,_dga .Width ,_dga .Height ,PixClr ,nil ,0,0);};func MakePixelSumTab8 ()[]int {return _aaeg ()};
func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _bdd (d ,s ,hSize ,vSize )};func _bdd (_acdf ,_dbbb *Bitmap ,_eaeaa ,_bbce int )(*Bitmap ,error ){const _aeaea ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _dbbb ==nil {_gc .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_e .Error (_aeaea ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _eaeaa < 1||_bbce < 1{return nil ,_e .Error (_aeaea ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _eaeaa ==1&&_bbce ==1{_acage ,_agab :=_eaec (_acdf ,_dbbb );if _agab !=nil {return nil ,_e .Wrap (_agab ,_aeaea ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _acage ,nil ;};if _eaeaa ==1||_bbce ==1{_gdag :=SelCreateBrick (_bbce ,_eaeaa ,_bbce /2,_eaeaa /2,SelHit );_acffd ,_adeeg :=_gdf (_acdf ,_dbbb ,_gdag );if _adeeg !=nil {return nil ,_e .Wrap (_adeeg ,_aeaea ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _acffd ,nil ;};_dggg :=SelCreateBrick (1,_eaeaa ,0,_eaeaa /2,SelHit );_cdgb :=SelCreateBrick (_bbce ,1,_bbce /2,0,SelHit );_ecab ,_ebac :=_gdf (nil ,_dbbb ,_dggg );if _ebac !=nil {return nil ,_e .Wrap (_ebac ,_aeaea ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_acdf ,_ebac =_gdf (_acdf ,_ecab ,_cdgb );if _ebac !=nil {return nil ,_e .Wrap (_ebac ,_aeaea ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _acdf ,nil ;};func (_aeea *Bitmap )String ()string {var _gabd ="\u000a";for _gfg :=0;
_gfg < _aeea .Height ;_gfg ++{var _cge string ;for _bgf :=0;_bgf < _aeea .Width ;_bgf ++{_badd :=_aeea .GetPixel (_bgf ,_gfg );if _badd {_cge +="\u0031";}else {_cge +="\u0030";};};_gabd +=_cge +"\u000a";};return _gabd ;};type Bitmap struct{Width ,Height int ;
BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func _ddg (_eaf ,_bfe *Bitmap ,_fea int ,_aad []byte ,_gcb int )(_ddbe error ){const _acbf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";
var (_cfe ,_dea ,_fgcd ,_abg ,_bbe ,_ggg ,_ded ,_bga int ;_gfd ,_fca ,_bbbc ,_bgg uint32 ;_bbf ,_agc byte ;_fab uint16 ;);_fcc :=make ([]byte ,4);_eed :=make ([]byte ,4);for _fgcd =0;_fgcd < _eaf .Height -1;_fgcd ,_abg =_fgcd +2,_abg +1{_cfe =_fgcd *_eaf .RowStride ;
_dea =_abg *_bfe .RowStride ;for _bbe ,_ggg =0,0;_bbe < _gcb ;_bbe ,_ggg =_bbe +4,_ggg +1{for _ded =0;_ded < 4;_ded ++{_bga =_cfe +_bbe +_ded ;if _bga <=len (_eaf .Data )-1&&_bga < _cfe +_eaf .RowStride {_fcc [_ded ]=_eaf .Data [_bga ];}else {_fcc [_ded ]=0x00;
};_bga =_cfe +_eaf .RowStride +_bbe +_ded ;if _bga <=len (_eaf .Data )-1&&_bga < _cfe +(2*_eaf .RowStride ){_eed [_ded ]=_eaf .Data [_bga ];}else {_eed [_ded ]=0x00;};};_gfd =_ef .BigEndian .Uint32 (_fcc );_fca =_ef .BigEndian .Uint32 (_eed );_bbbc =_gfd &_fca ;
_bbbc |=_bbbc <<1;_bgg =_gfd |_fca ;_bgg &=_bgg <<1;_fca =_bbbc |_bgg ;_fca &=0xaaaaaaaa;_gfd =_fca |(_fca <<7);_bbf =byte (_gfd >>24);_agc =byte ((_gfd >>8)&0xff);_bga =_dea +_ggg ;if _bga +1==len (_bfe .Data )-1||_bga +1>=_dea +_bfe .RowStride {if _ddbe =_bfe .SetByte (_bga ,_aad [_bbf ]);
_ddbe !=nil {return _e .Wrapf (_ddbe ,_acbf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bga );};}else {_fab =(uint16 (_aad [_bbf ])<<8)|uint16 (_aad [_agc ]);if _ddbe =_bfe .setTwoBytes (_bga ,_fab );_ddbe !=nil {return _e .Wrapf (_ddbe ,_acbf ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bga );
};_ggg ++;};};};return nil ;};func (_dggd *Bitmap )ToImage ()_eca .Image {_bfed ,_dbdd :=_ec .NewImage (_dggd .Width ,_dggd .Height ,1,1,_dggd .Data ,nil ,nil );if _dbdd !=nil {_gc .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dbdd );
};return _bfed ;};func (_bdca *byHeight )Less (i ,j int )bool {return _bdca .Values [i ].Height < _bdca .Values [j ].Height };func (_cca *Bitmap )GetBitOffset (x int )int {return x &0x07};func _eaae (_dggb ,_cfdf int )int {if _dggb > _cfdf {return _dggb ;
};return _cfdf ;};type ClassedPoints struct{*Points ;_cc .IntSlice ;_eaabc func (_aaebd ,_dacf int )bool ;};func TstWriteSymbols (t *_g .T ,bms *Bitmaps ,src *Bitmap ){for _eeffb :=0;_eeffb < bms .Size ();_eeffb ++{_babb :=bms .Values [_eeffb ];_dcgb :=bms .Boxes [_eeffb ];
_cdfb :=src .RasterOperation (_dcgb .Min .X ,_dcgb .Min .Y ,_babb .Width ,_babb .Height ,PixSrc ,_babb ,0,0);_b .NoError (t ,_cdfb );};};func (_adgf *Bitmap )Copy ()*Bitmap {_dbcc :=make ([]byte ,len (_adgf .Data ));copy (_dbcc ,_adgf .Data );return &Bitmap {Width :_adgf .Width ,Height :_adgf .Height ,RowStride :_adgf .RowStride ,Data :_dbcc ,Color :_adgf .Color ,Text :_adgf .Text ,BitmapNumber :_adgf .BitmapNumber ,Special :_adgf .Special };
};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _agd ()(_bf [256]uint16 ){for _efa :=0;_efa < 256;_efa ++{if _efa &0x01!=0{_bf [_efa ]|=0x3;};if _efa &0x02!=0{_bf [_efa ]|=0xc;};if _efa &0x04!=0{_bf [_efa ]|=0x30;
};if _efa &0x08!=0{_bf [_efa ]|=0xc0;};if _efa &0x10!=0{_bf [_efa ]|=0x300;};if _efa &0x20!=0{_bf [_efa ]|=0xc00;};if _efa &0x40!=0{_bf [_efa ]|=0x3000;};if _efa &0x80!=0{_bf [_efa ]|=0xc000;};};return _bf ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bcc float64 ,_ccbg error ){const _fddg ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_e .Error (_fddg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_e .Error (_fddg ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_e .Error (_fddg ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_afdb ,_eeeb :=bm1 .Width ,bm1 .Height ;_afgb ,_cede :=bm2 .Width ,bm2 .Height ;
_ggac :=_cbe (_afdb -_afgb );if _ggac > maxDiffW {return 0,nil ;};_aged :=_cbe (_eeeb -_cede );if _aged > maxDiffH {return 0,nil ;};var _fdfg ,_gcbad int ;if delX >=0{_fdfg =int (delX +0.5);}else {_fdfg =int (delX -0.5);};if delY >=0{_gcbad =int (delY +0.5);
}else {_gcbad =int (delY -0.5);};_efc :=_eaae (_gcbad ,0);_gabe :=_ebd (_cede +_gcbad ,_eeeb );_eecd :=bm1 .RowStride *_efc ;_beg :=bm2 .RowStride *(_efc -_gcbad );_febb :=_eaae (_fdfg ,0);_ddeb :=_ebd (_afgb +_fdfg ,_afdb );_cbed :=bm2 .RowStride ;var _edec ,_bacf int ;
if _fdfg >=8{_edec =_fdfg >>3;_eecd +=_edec ;_febb -=_edec <<3;_ddeb -=_edec <<3;_fdfg &=7;}else if _fdfg <=-8{_bacf =-((_fdfg +7)>>3);_beg +=_bacf ;_cbed -=_bacf ;_fdfg +=_bacf <<3;};if _febb >=_ddeb ||_efc >=_gabe {return 0,nil ;};_eebfe :=(_ddeb +7)>>3;
var (_eeac ,_fdae ,_cef byte ;_acfe ,_gfab ,_gcdeg int ;);switch {case _fdfg ==0:for _gcdeg =_efc ;_gcdeg < _gabe ;_gcdeg ,_eecd ,_beg =_gcdeg +1,_eecd +bm1 .RowStride ,_beg +bm2 .RowStride {for _gfab =0;_gfab < _eebfe ;_gfab ++{_cef =bm1 .Data [_eecd +_gfab ]&bm2 .Data [_beg +_gfab ];
_acfe +=tab [_cef ];};};case _fdfg > 0:if _cbed < _eebfe {for _gcdeg =_efc ;_gcdeg < _gabe ;_gcdeg ,_eecd ,_beg =_gcdeg +1,_eecd +bm1 .RowStride ,_beg +bm2 .RowStride {_eeac ,_fdae =bm1 .Data [_eecd ],bm2 .Data [_beg ]>>uint (_fdfg );_cef =_eeac &_fdae ;
_acfe +=tab [_cef ];for _gfab =1;_gfab < _cbed ;_gfab ++{_eeac ,_fdae =bm1 .Data [_eecd +_gfab ],(bm2 .Data [_beg +_gfab ]>>uint (_fdfg ))|(bm2 .Data [_beg +_gfab -1]<<uint (8-_fdfg ));_cef =_eeac &_fdae ;_acfe +=tab [_cef ];};_eeac =bm1 .Data [_eecd +_gfab ];
_fdae =bm2 .Data [_beg +_gfab -1]<<uint (8-_fdfg );_cef =_eeac &_fdae ;_acfe +=tab [_cef ];};}else {for _gcdeg =_efc ;_gcdeg < _gabe ;_gcdeg ,_eecd ,_beg =_gcdeg +1,_eecd +bm1 .RowStride ,_beg +bm2 .RowStride {_eeac ,_fdae =bm1 .Data [_eecd ],bm2 .Data [_beg ]>>uint (_fdfg );
_cef =_eeac &_fdae ;_acfe +=tab [_cef ];for _gfab =1;_gfab < _eebfe ;_gfab ++{_eeac =bm1 .Data [_eecd +_gfab ];_fdae =(bm2 .Data [_beg +_gfab ]>>uint (_fdfg ))|(bm2 .Data [_beg +_gfab -1]<<uint (8-_fdfg ));_cef =_eeac &_fdae ;_acfe +=tab [_cef ];};};};
default:if _eebfe < _cbed {for _gcdeg =_efc ;_gcdeg < _gabe ;_gcdeg ,_eecd ,_beg =_gcdeg +1,_eecd +bm1 .RowStride ,_beg +bm2 .RowStride {for _gfab =0;_gfab < _eebfe ;_gfab ++{_eeac =bm1 .Data [_eecd +_gfab ];_fdae =bm2 .Data [_beg +_gfab ]<<uint (-_fdfg );
_fdae |=bm2 .Data [_beg +_gfab +1]>>uint (8+_fdfg );_cef =_eeac &_fdae ;_acfe +=tab [_cef ];};};}else {for _gcdeg =_efc ;_gcdeg < _gabe ;_gcdeg ,_eecd ,_beg =_gcdeg +1,_eecd +bm1 .RowStride ,_beg +bm2 .RowStride {for _gfab =0;_gfab < _eebfe -1;_gfab ++{_eeac =bm1 .Data [_eecd +_gfab ];
_fdae =bm2 .Data [_beg +_gfab ]<<uint (-_fdfg );_fdae |=bm2 .Data [_beg +_gfab +1]>>uint (8+_fdfg );_cef =_eeac &_fdae ;_acfe +=tab [_cef ];};_eeac =bm1 .Data [_eecd +_gfab ];_fdae =bm2 .Data [_beg +_gfab ]<<uint (-_fdfg );_cef =_eeac &_fdae ;_acfe +=tab [_cef ];
};};};_bcc =float64 (_acfe )*float64 (_acfe )/(float64 (area1 )*float64 (area2 ));return _bcc ,nil ;};func _dfg (_edga ,_bgda ,_fcgea byte )byte {return (_edga &^(_fcgea ))|(_bgda &_fcgea )};func (_gfec *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _fgde ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";
if len (_gfec .Values )==0{return nil ,_e .Error (_fgde ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_eeea :=&BitmapsArray {};_gfec .SortByWidth ();_bacb :=-1;_ccfaf :=-1;for _gbda :=0;_gbda < len (_gfec .Values );
_gbda ++{_gcfbb :=_gfec .Values [_gbda ].Width ;if _gcfbb > _bacb {_bacb =_gcfbb ;_ccfaf ++;_eeea .Values =append (_eeea .Values ,&Bitmaps {});};_eeea .Values [_ccfaf ].AddBitmap (_gfec .Values [_gbda ]);};return _eeea ,nil ;};type Component int ;func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _dcd (src ,sequence ...);
};func (_ccbc *Bitmap )setEightFullBytes (_gbbc int ,_aaae uint64 )error {if _gbbc +7> len (_ccbc .Data )-1{return _e .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ccbc .Data [_gbbc ]=byte ((_aaae &0xff00000000000000)>>56);_ccbc .Data [_gbbc +1]=byte ((_aaae &0xff000000000000)>>48);_ccbc .Data [_gbbc +2]=byte ((_aaae &0xff0000000000)>>40);_ccbc .Data [_gbbc +3]=byte ((_aaae &0xff00000000)>>32);_ccbc .Data [_gbbc +4]=byte ((_aaae &0xff000000)>>24);
_ccbc .Data [_gbbc +5]=byte ((_aaae &0xff0000)>>16);_ccbc .Data [_gbbc +6]=byte ((_aaae &0xff00)>>8);_ccbc .Data [_gbbc +7]=byte (_aaae &0xff);return nil ;};func (_cead *BitmapsArray )AddBox (box *_eca .Rectangle ){_cead .Boxes =append (_cead .Boxes ,box )};
func (_ebbgd *Bitmaps )makeSizeIndicator (_cfag ,_cffg int ,_afgd LocationFilter ,_cdad SizeComparison )(_cdab *_cc .NumSlice ,_ggabc error ){const _feaba ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ebbgd ==nil {return nil ,_e .Error (_feaba ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _afgd {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_feaba ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_afgd );
};switch _cdad {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_e .Errorf (_feaba ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_cdad );
};_cdab =&_cc .NumSlice {};var (_cgdd ,_fcgab ,_ffag int ;_cded *Bitmap ;);for _ ,_cded =range _ebbgd .Values {_cgdd =0;_fcgab ,_ffag =_cded .Width ,_cded .Height ;switch _afgd {case LocSelectWidth :if (_cdad ==SizeSelectIfLT &&_fcgab < _cfag )||(_cdad ==SizeSelectIfGT &&_fcgab > _cfag )||(_cdad ==SizeSelectIfLTE &&_fcgab <=_cfag )||(_cdad ==SizeSelectIfGTE &&_fcgab >=_cfag )||(_cdad ==SizeSelectIfEQ &&_fcgab ==_cfag ){_cgdd =1;
};case LocSelectHeight :if (_cdad ==SizeSelectIfLT &&_ffag < _cffg )||(_cdad ==SizeSelectIfGT &&_ffag > _cffg )||(_cdad ==SizeSelectIfLTE &&_ffag <=_cffg )||(_cdad ==SizeSelectIfGTE &&_ffag >=_cffg )||(_cdad ==SizeSelectIfEQ &&_ffag ==_cffg ){_cgdd =1;
};case LocSelectIfEither :if (_cdad ==SizeSelectIfLT &&(_fcgab < _cfag ||_ffag < _cffg ))||(_cdad ==SizeSelectIfGT &&(_fcgab > _cfag ||_ffag > _cffg ))||(_cdad ==SizeSelectIfLTE &&(_fcgab <=_cfag ||_ffag <=_cffg ))||(_cdad ==SizeSelectIfGTE &&(_fcgab >=_cfag ||_ffag >=_cffg ))||(_cdad ==SizeSelectIfEQ &&(_fcgab ==_cfag ||_ffag ==_cffg )){_cgdd =1;
};case LocSelectIfBoth :if (_cdad ==SizeSelectIfLT &&(_fcgab < _cfag &&_ffag < _cffg ))||(_cdad ==SizeSelectIfGT &&(_fcgab > _cfag &&_ffag > _cffg ))||(_cdad ==SizeSelectIfLTE &&(_fcgab <=_cfag &&_ffag <=_cffg ))||(_cdad ==SizeSelectIfGTE &&(_fcgab >=_cfag &&_ffag >=_cffg ))||(_cdad ==SizeSelectIfEQ &&(_fcgab ==_cfag &&_ffag ==_cffg )){_cgdd =1;
};};_cdab .AddInt (_cgdd );};return _cdab ,nil ;};func _edfc (_gaf ,_dgd *Bitmap ,_daa int ,_bee []byte ,_bcd int )(_gff error ){const _fbbb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_dfc ,_bgb ,_cce ,_dcc ,_adaa ,_edc ,_adga ,_gbe int ;_eag ,_age uint32 ;_ffg ,_dag byte ;_ace uint16 ;);_ecfe :=make ([]byte ,4);_ece :=make ([]byte ,4);for _cce =0;_cce < _gaf .Height -1;_cce ,_dcc =_cce +2,_dcc +1{_dfc =_cce *_gaf .RowStride ;_bgb =_dcc *_dgd .RowStride ;
for _adaa ,_edc =0,0;_adaa < _bcd ;_adaa ,_edc =_adaa +4,_edc +1{for _adga =0;_adga < 4;_adga ++{_gbe =_dfc +_adaa +_adga ;if _gbe <=len (_gaf .Data )-1&&_gbe < _dfc +_gaf .RowStride {_ecfe [_adga ]=_gaf .Data [_gbe ];}else {_ecfe [_adga ]=0x00;};_gbe =_dfc +_gaf .RowStride +_adaa +_adga ;
if _gbe <=len (_gaf .Data )-1&&_gbe < _dfc +(2*_gaf .RowStride ){_ece [_adga ]=_gaf .Data [_gbe ];}else {_ece [_adga ]=0x00;};};_eag =_ef .BigEndian .Uint32 (_ecfe );_age =_ef .BigEndian .Uint32 (_ece );_age &=_eag ;_age &=_age <<1;_age &=0xaaaaaaaa;_eag =_age |(_age <<7);
_ffg =byte (_eag >>24);_dag =byte ((_eag >>8)&0xff);_gbe =_bgb +_edc ;if _gbe +1==len (_dgd .Data )-1||_gbe +1>=_bgb +_dgd .RowStride {_dgd .Data [_gbe ]=_bee [_ffg ];if _gff =_dgd .SetByte (_gbe ,_bee [_ffg ]);_gff !=nil {return _e .Wrapf (_gff ,_fbbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gbe );
};}else {_ace =(uint16 (_bee [_ffg ])<<8)|uint16 (_bee [_dag ]);if _gff =_dgd .setTwoBytes (_gbe ,_ace );_gff !=nil {return _e .Wrapf (_gff ,_fbbb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gbe );
};_edc ++;};};};return nil ;};func _faeb (_dadg *Bitmap ,_gdac ,_febfd ,_gcbaf ,_aaag int ,_bffc RasterOperator ,_dceb *Bitmap ,_acde ,_cfef int )error {const _fafe ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _dadg ==nil {return _e .Error (_fafe ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _bffc ==PixDst {return nil ;};switch _bffc {case PixClr ,PixSet ,PixNotDst :_ebfe (_dadg ,_gdac ,_febfd ,_gcbaf ,_aaag ,_bffc );return nil ;};if _dceb ==nil {_gc .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _e .Error (_fafe ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _aaagb :=_dgeg (_dadg ,_gdac ,_febfd ,_gcbaf ,_aaag ,_bffc ,_dceb ,_acde ,_cfef );_aaagb !=nil {return _e .Wrap (_aaagb ,_fafe ,"");
};return nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;
PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;
PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_fdaf *BitmapsArray )GetBox (i int )(*_eca .Rectangle ,error ){const _gdbb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";
if _fdaf ==nil {return nil ,_e .Error (_gdbb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_fdaf .Boxes )-1{return nil ,_e .Errorf (_gdbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fdaf .Boxes [i ],nil ;};func (_dace MorphProcess )getWidthHeight ()(_bbbg ,_adab int ){return _dace .Arguments [0],_dace .Arguments [1];};func (_ddbb *Bitmap )SetPadBits (value int ){_ddbb .setPadBits (value )};func TstFrameBitmap ()*Bitmap {return _cefc .Copy ()};
func _efgd (_adeg ,_dbff *Bitmap ,_gdbe ,_fbbaf int )(_afeda error ){const _bgfe ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_dafd ,_fafc ,_eeda ,_efagc int ;_gbcda ,_gcfg ,_bgagb ,_bgcf ,_fgfg ,_cfff ,_bdab byte ;
);for _dafd =0;_dafd < _gdbe ;_dafd ++{_eeda =_dafd *_adeg .RowStride ;_efagc =_dafd *_dbff .RowStride ;for _fafc =0;_fafc < _fbbaf ;_fafc ++{_gbcda ,_afeda =_adeg .GetByte (_eeda +_fafc );if _afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_gcfg ,_afeda =_dbff .GetByte (_efagc +_fafc );if _afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _dafd > 0{_bgagb ,_afeda =_adeg .GetByte (_eeda -_adeg .RowStride +_fafc );if _afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0069\u0020\u003e \u0030");
};_gbcda |=_bgagb ;};if _fafc > 0{_bgcf ,_afeda =_adeg .GetByte (_eeda +_fafc -1);if _afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u006a\u0020\u003e \u0030");};_gbcda |=_bgcf <<7;};_gbcda &=_gcfg ;if _gbcda ==0||(^_gbcda )==0{if _afeda =_adeg .SetByte (_eeda +_fafc ,_gbcda );
_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_bdab =_gbcda ;_gbcda =(_gbcda |(_gbcda >>1)|(_gbcda <<1))&_gcfg ;if (_gbcda ^_bdab )==0{if _afeda =_adeg .SetByte (_eeda +_fafc ,_gbcda );
_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dafd =_gdbe -1;_dafd >=0;_dafd --{_eeda =_dafd *_adeg .RowStride ;_efagc =_dafd *_dbff .RowStride ;
for _fafc =_fbbaf -1;_fafc >=0;_fafc --{if _gbcda ,_afeda =_adeg .GetByte (_eeda +_fafc );_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _gcfg ,_afeda =_dbff .GetByte (_efagc +_fafc );
_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dafd < _gdbe -1{if _fgfg ,_afeda =_adeg .GetByte (_eeda +_adeg .RowStride +_fafc );_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_gbcda |=_fgfg ;};if _fafc < _fbbaf -1{if _cfff ,_afeda =_adeg .GetByte (_eeda +_fafc +1);_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_gbcda |=_cfff >>7;
};_gbcda &=_gcfg ;if _gbcda ==0||(^_gbcda )==0{if _afeda =_adeg .SetByte (_eeda +_fafc ,_gbcda );_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_bdab =_gbcda ;_gbcda =(_gbcda |(_gbcda >>1)|(_gbcda <<1))&_gcfg ;if (_gbcda ^_bdab )==0{if _afeda =_adeg .SetByte (_eeda +_fafc ,_gbcda );_afeda !=nil {return _e .Wrap (_afeda ,_bgfe ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func (_eeef *Bitmap )nextOnPixelLow (_cfa ,_gcc ,_dfeae ,_bfa ,_cdcg int )(_ddd _eca .Point ,_bbba bool ,_daee error ){const _dfbg ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_ebfb int ;_cggb byte ;);_fbc :=_cdcg *_dfeae ;_ggae :=_fbc +(_bfa /8);if _cggb ,_daee =_eeef .GetByte (_ggae );_daee !=nil {return _ddd ,false ,_e .Wrap (_daee ,_dfbg ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _cggb !=0{_edde :=_bfa -(_bfa %8)+7;for _ebfb =_bfa ;_ebfb <=_edde &&_ebfb < _cfa ;_ebfb ++{if _eeef .GetPixel (_ebfb ,_cdcg ){_ddd .X =_ebfb ;_ddd .Y =_cdcg ;return _ddd ,true ,nil ;};};};_bcba :=(_bfa /8)+1;_ebfb =8*_bcba ;var _ccg int ;for _ggae =_fbc +_bcba ;
_ebfb < _cfa ;_ggae ,_ebfb =_ggae +1,_ebfb +8{if _cggb ,_daee =_eeef .GetByte (_ggae );_daee !=nil {return _ddd ,false ,_e .Wrap (_daee ,_dfbg ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _cggb ==0{continue ;
};for _ccg =0;_ccg < 8&&_ebfb < _cfa ;_ccg ,_ebfb =_ccg +1,_ebfb +1{if _eeef .GetPixel (_ebfb ,_cdcg ){_ddd .X =_ebfb ;_ddd .Y =_cdcg ;return _ddd ,true ,nil ;};};};for _gffd :=_cdcg +1;_gffd < _gcc ;_gffd ++{_fbc =_gffd *_dfeae ;for _ggae ,_ebfb =_fbc ,0;
_ebfb < _cfa ;_ggae ,_ebfb =_ggae +1,_ebfb +8{if _cggb ,_daee =_eeef .GetByte (_ggae );_daee !=nil {return _ddd ,false ,_e .Wrap (_daee ,_dfbg ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _cggb ==0{continue ;
};for _ccg =0;_ccg < 8&&_ebfb < _cfa ;_ccg ,_ebfb =_ccg +1,_ebfb +1{if _eeef .GetPixel (_ebfb ,_gffd ){_ddd .X =_ebfb ;_ddd .Y =_gffd ;return _ddd ,true ,nil ;};};};};return _ddd ,false ,nil ;};func _ecf (_db *Bitmap ,_eac int )(*Bitmap ,error ){const _fgc ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";
if _db ==nil {return nil ,_e .Error (_fgc ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eac ==1{return _eaec (nil ,_db );};if _eac !=2&&_eac !=4&&_eac !=8{return nil ,_e .Error (_fgc ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_eaa :=_eac *_db .Width ;_bce :=_eac *_db .Height ;_gaa :=New (_eaa ,_bce );var _ega error ;switch _eac {case 2:_ega =_gd (_gaa ,_db );case 4:_ega =_ge (_gaa ,_db );case 8:_ega =_dg (_gaa ,_db );};if _ega !=nil {return nil ,_e .Wrap (_ega ,_fgc ,"");
};return _gaa ,nil ;};func _gcda (_gege *Bitmap ,_ebgac ,_feabd ,_fgee ,_gbgf int ,_dbge RasterOperator ,_cbbbc *Bitmap ,_fbba ,_baba int )error {var (_agge bool ;_ddfc bool ;_afdbb int ;_ggfa int ;_fad int ;_dgce bool ;_gfged byte ;_dbdg int ;_faea int ;
_edgb int ;_adge ,_cace int ;);_gedbf :=8-(_ebgac &7);_gbaeb :=_gfcac [_gedbf ];_affb :=_gege .RowStride *_feabd +(_ebgac >>3);_gbef :=_cbbbc .RowStride *_baba +(_fbba >>3);if _fgee < _gedbf {_agge =true ;_gbaeb &=_eeeea [8-_gedbf +_fgee ];};if !_agge {_afdbb =(_fgee -_gedbf )>>3;
if _afdbb > 0{_ddfc =true ;_ggfa =_affb +1;_fad =_gbef +1;};};_dbdg =(_ebgac +_fgee )&7;if !(_agge ||_dbdg ==0){_dgce =true ;_gfged =_eeeea [_dbdg ];_faea =_affb +1+_afdbb ;_edgb =_gbef +1+_afdbb ;};switch _dbge {case PixSrc :for _adge =0;_adge < _gbgf ;
_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],_cbbbc .Data [_gbef ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]=_cbbbc .Data [_fad +_cace ];
};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],_cbbbc .Data [_edgb ],_gfged );_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixNotSrc :for _adge =0;
_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],^_cbbbc .Data [_gbef ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]=^_cbbbc .Data [_fad +_cace ];
};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],^_cbbbc .Data [_edgb ],_gfged );_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixSrcOrDst :for _adge =0;
_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],_cbbbc .Data [_gbef ]|_gege .Data [_affb ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;
_cace ++{_gege .Data [_ggfa +_cace ]|=_cbbbc .Data [_fad +_cace ];};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],_cbbbc .Data [_edgb ]|_gege .Data [_faea ],_gfged );
_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixSrcAndDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],_cbbbc .Data [_gbef ]&_gege .Data [_affb ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;
};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]&=_cbbbc .Data [_fad +_cace ];};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],_cbbbc .Data [_edgb ]&_gege .Data [_faea ],_gfged );
_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixSrcXorDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],_cbbbc .Data [_gbef ]^_gege .Data [_affb ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;
};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]^=_cbbbc .Data [_fad +_cace ];};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],_cbbbc .Data [_edgb ]^_gege .Data [_faea ],_gfged );
_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixNotSrcOrDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],^(_cbbbc .Data [_gbef ])|_gege .Data [_affb ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;
};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]|=^(_cbbbc .Data [_fad +_cace ]);};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],^(_cbbbc .Data [_edgb ])|_gege .Data [_faea ],_gfged );
_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixNotSrcAndDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],^(_cbbbc .Data [_gbef ])&_gege .Data [_affb ],_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;
};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]&=^_cbbbc .Data [_fad +_cace ];};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],^(_cbbbc .Data [_edgb ])&_gege .Data [_faea ],_gfged );
_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixSrcOrNotDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],_cbbbc .Data [_gbef ]|^(_gege .Data [_affb ]),_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;
};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]=_cbbbc .Data [_fad +_cace ]|^(_gege .Data [_ggfa +_cace ]);};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;
_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],_cbbbc .Data [_edgb ]|^(_gege .Data [_faea ]),_gfged );_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixSrcAndNotDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],_cbbbc .Data [_gbef ]&^(_gege .Data [_affb ]),_gbaeb );
_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]=_cbbbc .Data [_fad +_cace ]&^(_gege .Data [_ggfa +_cace ]);};_ggfa +=_gege .RowStride ;
_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],_cbbbc .Data [_edgb ]&^(_gege .Data [_faea ]),_gfged );_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixNotPixSrcOrDst :for _adge =0;
_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],^(_cbbbc .Data [_gbef ]|_gege .Data [_affb ]),_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;
_cace ++{_gege .Data [_ggfa +_cace ]=^(_cbbbc .Data [_fad +_cace ]|_gege .Data [_ggfa +_cace ]);};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],^(_cbbbc .Data [_edgb ]|_gege .Data [_faea ]),_gfged );
_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixNotPixSrcAndDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],^(_cbbbc .Data [_gbef ]&_gege .Data [_affb ]),_gbaeb );_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;
};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]=^(_cbbbc .Data [_fad +_cace ]&_gege .Data [_ggfa +_cace ]);};_ggfa +=_gege .RowStride ;_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;
_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],^(_cbbbc .Data [_edgb ]&_gege .Data [_faea ]),_gfged );_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};case PixNotPixSrcXorDst :for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_affb ]=_dfg (_gege .Data [_affb ],^(_cbbbc .Data [_gbef ]^_gege .Data [_affb ]),_gbaeb );
_affb +=_gege .RowStride ;_gbef +=_cbbbc .RowStride ;};if _ddfc {for _adge =0;_adge < _gbgf ;_adge ++{for _cace =0;_cace < _afdbb ;_cace ++{_gege .Data [_ggfa +_cace ]=^(_cbbbc .Data [_fad +_cace ]^_gege .Data [_ggfa +_cace ]);};_ggfa +=_gege .RowStride ;
_fad +=_cbbbc .RowStride ;};};if _dgce {for _adge =0;_adge < _gbgf ;_adge ++{_gege .Data [_faea ]=_dfg (_gege .Data [_faea ],^(_cbbbc .Data [_edgb ]^_gege .Data [_faea ]),_gfged );_faea +=_gege .RowStride ;_edgb +=_cbbbc .RowStride ;};};default:_gc .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dbge );
return _e .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _dg (_ccc ,_gbb *Bitmap )(_fg error ){const _ecg ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_cfb :=_gbb .RowStride ;_eg :=_ccc .RowStride ;var _ea ,_aee ,_fbbe ,_gee ,_ag int ;
for _fbbe =0;_fbbe < _gbb .Height ;_fbbe ++{_ea =_fbbe *_cfb ;_aee =8*_fbbe *_eg ;for _gee =0;_gee < _cfb ;_gee ++{if _fg =_ccc .setEightBytes (_aee +_gee *8,_fcad [_gbb .Data [_ea +_gee ]]);_fg !=nil {return _e .Wrap (_fg ,_ecg ,"");};};for _ag =1;_ag < 8;
_ag ++{for _gee =0;_gee < _eg ;_gee ++{if _fg =_ccc .SetByte (_aee +_ag *_eg +_gee ,_ccc .Data [_aee +_gee ]);_fg !=nil {return _e .Wrap (_fg ,_ecg ,"");};};};};return nil ;};func TstAddSymbol (t *_g .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_eegb :=_eca .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_eegb );*x +=sym .Width +space ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;
);func (_beeaf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_dfff *Bitmaps ,_fedb *Boxes ,_dada error ){const _fbdg ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _beeaf ==nil {return nil ,nil ,_e .Error (_fbdg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");
};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_e .Error (_fbdg ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _beeaf .Zero (){_fedb =&Boxes {};_dfff =&Bitmaps {};return _dfff ,_fedb ,nil ;};switch components {case ComponentConn :_dfff =&Bitmaps {};if _fedb ,_dada =_beeaf .ConnComponents (_dfff ,8);_dada !=nil {return nil ,nil ,_e .Wrap (_dada ,_fbdg ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_badf ,_cegc :=MorphSequence (_beeaf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _cegc !=nil {return nil ,nil ,_e .Wrap (_cegc ,_fbdg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _gc .Log .IsLogLevel (_gc .LogLevelTrace ){_gc .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_badf .String ());
};_cdf :=&Bitmaps {};_fedb ,_cegc =_badf .ConnComponents (_cdf ,8);if _cegc !=nil {return nil ,nil ,_e .Wrap (_cegc ,_fbdg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _gc .Log .IsLogLevel (_gc .LogLevelTrace ){_gc .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_cdf .String ());
};if _dfff ,_cegc =_cdf .ClipToBitmap (_beeaf );_cegc !=nil {return nil ,nil ,_e .Wrap (_cegc ,_fbdg ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_ggcg :=1;
var _becg *Bitmap ;switch {case _beeaf .XResolution <=200:_becg =_beeaf ;case _beeaf .XResolution <=400:_ggcg =2;_becg ,_dada =_ebg (_beeaf ,1,0,0,0);if _dada !=nil {return nil ,nil ,_e .Wrap (_dada ,_fbdg ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_ggcg =4;_becg ,_dada =_ebg (_beeaf ,1,1,0,0);if _dada !=nil {return nil ,nil ,_e .Wrap (_dada ,_fbdg ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_gage ,_ ,_fdea :=_aed (_becg );if _fdea !=nil {return nil ,nil ,_e .Wrap (_fdea ,_fbdg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_ffba ,_fdea :=_gaea (_gage ,_ggcg );if _fdea !=nil {return nil ,nil ,_e .Wrap (_fdea ,_fbdg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_bgdc :=&Bitmaps {};if _fedb ,_fdea =_ffba .ConnComponents (_bgdc ,4);_fdea !=nil {return nil ,nil ,_e .Wrap (_fdea ,_fbdg ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _dfff ,_fdea =_bgdc .ClipToBitmap (_beeaf );_fdea !=nil {return nil ,nil ,_e .Wrap (_fdea ,_fbdg ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_dfff ,_dada =_dfff .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _dada !=nil {return nil ,nil ,_e .Wrap (_dada ,_fbdg ,"");};_fedb ,_dada =_fedb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _dada !=nil {return nil ,nil ,_e .Wrap (_dada ,_fbdg ,"");};return _dfff ,_fedb ,nil ;};func (_cfffd *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gaeg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";
_ddbg ,_afbc :=_cfffd .selectByIndexes (idx );if _afbc !=nil {return nil ,_e .Wrap (_afbc ,_gaeg ,"");};return _ddbg ,nil ;};func _fce (_caf ,_dbe *Bitmap ,_gegc int ,_cea []byte ,_caca int )(_gea error ){const _gfa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_abf ,_deaf ,_eba ,_gbbe ,_cbdg ,_bff ,_facac ,_adb int ;_fgce ,_beb ,_adfg ,_fd uint32 ;_bgc ,_da byte ;_dda uint16 ;);_aca :=make ([]byte ,4);_fda :=make ([]byte ,4);for _eba =0;_eba < _caf .Height -1;_eba ,_gbbe =_eba +2,_gbbe +1{_abf =_eba *_caf .RowStride ;
_deaf =_gbbe *_dbe .RowStride ;for _cbdg ,_bff =0,0;_cbdg < _caca ;_cbdg ,_bff =_cbdg +4,_bff +1{for _facac =0;_facac < 4;_facac ++{_adb =_abf +_cbdg +_facac ;if _adb <=len (_caf .Data )-1&&_adb < _abf +_caf .RowStride {_aca [_facac ]=_caf .Data [_adb ];
}else {_aca [_facac ]=0x00;};_adb =_abf +_caf .RowStride +_cbdg +_facac ;if _adb <=len (_caf .Data )-1&&_adb < _abf +(2*_caf .RowStride ){_fda [_facac ]=_caf .Data [_adb ];}else {_fda [_facac ]=0x00;};};_fgce =_ef .BigEndian .Uint32 (_aca );_beb =_ef .BigEndian .Uint32 (_fda );
_adfg =_fgce &_beb ;_adfg |=_adfg <<1;_fd =_fgce |_beb ;_fd &=_fd <<1;_beb =_adfg &_fd ;_beb &=0xaaaaaaaa;_fgce =_beb |(_beb <<7);_bgc =byte (_fgce >>24);_da =byte ((_fgce >>8)&0xff);_adb =_deaf +_bff ;if _adb +1==len (_dbe .Data )-1||_adb +1>=_deaf +_dbe .RowStride {if _gea =_dbe .SetByte (_adb ,_cea [_bgc ]);
_gea !=nil {return _e .Wrapf (_gea ,_gfa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_adb );};}else {_dda =(uint16 (_cea [_bgc ])<<8)|uint16 (_cea [_da ]);if _gea =_dbe .setTwoBytes (_adb ,_dda );_gea !=nil {return _e .Wrapf (_gea ,_gfa ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_adb );
};_bff ++;};};};return nil ;};func _fabf (_gaaea ,_dbgb *Bitmap ,_bebb ,_begd int )(*Bitmap ,error ){const _bca ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _dbgb ==nil {return nil ,_e .Error (_bca ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _bebb < 1||_begd < 1{return nil ,_e .Error (_bca ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _bebb ==1&&_begd ==1{return _eaec (_gaaea ,_dbgb );};if MorphBC ==SymmetricMorphBC {_dbca ,_bbfb :=_agbb (_gaaea ,_dbgb ,_bebb ,_begd );
if _bbfb !=nil {return nil ,_e .Wrap (_bbfb ,_bca ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _dbca ,nil ;};_bada :=_eaae (_bebb /2,_begd /2);_bfad :=8*((_bada +7)/8);_cbfb ,_eacg :=_dbgb .AddBorder (_bfad ,0);
if _eacg !=nil {return nil ,_e .Wrapf (_eacg ,_bca ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_bfad );};var _gegcg ,_beag *Bitmap ;if _bebb ==1||_begd ==1{_adc :=SelCreateBrick (_begd ,_bebb ,_begd /2,_bebb /2,SelHit );
_gegcg ,_eacg =_fgge (nil ,_cbfb ,_adc );if _eacg !=nil {return nil ,_e .Wrap (_eacg ,_bca ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_ffbe :=SelCreateBrick (1,_bebb ,0,_bebb /2,SelHit );
_ebcc ,_dfa :=_gdf (nil ,_cbfb ,_ffbe );if _dfa !=nil {return nil ,_e .Wrap (_dfa ,_bca ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_gfgga :=SelCreateBrick (_begd ,1,_begd /2,0,SelHit );
_gegcg ,_dfa =_gdf (nil ,_ebcc ,_gfgga );if _dfa !=nil {return nil ,_e .Wrap (_dfa ,_bca ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_dfa =_agad (_ebcc ,_gegcg ,_ffbe );
_dfa !=nil {return nil ,_e .Wrap (_dfa ,_bca ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_dfa =_agad (_gegcg ,_ebcc ,_gfgga );_dfa !=nil {return nil ,_e .Wrap (_dfa ,_bca ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _beag ,_eacg =_gegcg .RemoveBorder (_bfad );_eacg !=nil {return nil ,_e .Wrap (_eacg ,_bca ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _gaaea ==nil {return _beag ,nil ;};if _ ,_eacg =_eaec (_gaaea ,_beag );_eacg !=nil {return nil ,_eacg ;};return _gaaea ,nil ;
};func (_cfea *Bitmap )removeBorderGeneral (_aeb ,_bfcb ,_ffb ,_dbdf int )(*Bitmap ,error ){const _bcg ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _aeb < 0||_bfcb < 0||_ffb < 0||_dbdf < 0{return nil ,_e .Error (_bcg ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");
};_fcge ,_gde :=_cfea .Width ,_cfea .Height ;_defb :=_fcge -_aeb -_bfcb ;_cec :=_gde -_ffb -_dbdf ;if _defb <=0{return nil ,_e .Errorf (_bcg ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_defb );
};if _cec <=0{return nil ,_e .Errorf (_bcg ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cec );};_eddc :=New (_defb ,_cec );_eddc .Color =_cfea .Color ;_bgbc :=_eddc .RasterOperation (0,0,_defb ,_cec ,PixSrc ,_cfea ,_aeb ,_ffb );
if _bgbc !=nil {return nil ,_e .Wrap (_bgbc ,_bcg ,"");};return _eddc ,nil ;};func Extract (roi _eca .Rectangle ,src *Bitmap )(*Bitmap ,error ){_bace :=New (roi .Dx (),roi .Dy ());_cacab :=roi .Min .X &0x07;_gccg :=8-_cacab ;_gcfc :=uint (8-_bace .Width &0x07);
_geda :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_effgb :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_ceec :=_bace .RowStride ==_effgb +1-_geda ;var _bbbe int ;for _agdb :=roi .Min .Y ;_agdb < roi .Max .Y ;_agdb ++{_gfeb :=_geda ;_cbee :=_bbbe ;
switch {case _geda ==_effgb :_fgeb ,_gdeb :=src .GetByte (_gfeb );if _gdeb !=nil {return nil ,_gdeb ;};_fgeb <<=uint (_cacab );_gdeb =_bace .SetByte (_cbee ,_bcef (_gcfc ,_fgeb ));if _gdeb !=nil {return nil ,_gdeb ;};case _cacab ==0:for _dfed :=_geda ;
_dfed <=_effgb ;_dfed ++{_ecd ,_agf :=src .GetByte (_gfeb );if _agf !=nil {return nil ,_agf ;};_gfeb ++;if _dfed ==_effgb &&_ceec {_ecd =_bcef (_gcfc ,_ecd );};_agf =_bace .SetByte (_cbee ,_ecd );if _agf !=nil {return nil ,_agf ;};_cbee ++;};default:_bdad :=_aggff (src ,_bace ,uint (_cacab ),uint (_gccg ),_gcfc ,_geda ,_effgb ,_ceec ,_gfeb ,_cbee );
if _bdad !=nil {return nil ,_bdad ;};};_geda +=src .RowStride ;_effgb +=src .RowStride ;_bbbe +=_bace .RowStride ;};return _bace ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;
);func _ccfg ()[]int {_abdb :=make ([]int ,256);_abdb [0]=0;_abdb [1]=7;var _eaef int ;for _eaef =2;_eaef < 4;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -2]+6;};for _eaef =4;_eaef < 8;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -4]+5;};for _eaef =8;_eaef < 16;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -8]+4;
};for _eaef =16;_eaef < 32;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -16]+3;};for _eaef =32;_eaef < 64;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -32]+2;};for _eaef =64;_eaef < 128;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -64]+1;};for _eaef =128;_eaef < 256;_eaef ++{_abdb [_eaef ]=_abdb [_eaef -128];
};return _abdb ;};func (_cfg *Bitmap )CreateTemplate ()*Bitmap {return _cfg .createTemplate ()};func _cadc (_gaef ,_ggdg *Bitmap ,_cbgec CombinationOperator )*Bitmap {_fbae :=New (_gaef .Width ,_gaef .Height );for _ddf :=0;_ddf < len (_fbae .Data );_ddf ++{_fbae .Data [_ddf ]=_bgdf (_gaef .Data [_ddf ],_ggdg .Data [_ddf ],_cbgec );
};return _fbae ;};func _cb ()(_eda [256]uint32 ){for _cac :=0;_cac < 256;_cac ++{if _cac &0x01!=0{_eda [_cac ]|=0xf;};if _cac &0x02!=0{_eda [_cac ]|=0xf0;};if _cac &0x04!=0{_eda [_cac ]|=0xf00;};if _cac &0x08!=0{_eda [_cac ]|=0xf000;};if _cac &0x10!=0{_eda [_cac ]|=0xf0000;
};if _cac &0x20!=0{_eda [_cac ]|=0xf00000;};if _cac &0x40!=0{_eda [_cac ]|=0xf000000;};if _cac &0x80!=0{_eda [_cac ]|=0xf0000000;};};return _eda ;};var MorphBC BoundaryCondition ;func (_fba *Bitmap )GetPixel (x ,y int )bool {_fgg :=_fba .GetByteIndex (x ,y );
_eeg :=_fba .GetBitOffset (x );_facc :=uint (7-_eeg );if _fgg > len (_fba .Data )-1{_gc .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_fba );
return false ;};if (_fba .Data [_fgg ]>>_facc )&0x01>=1{return true ;};return false ;};func (_cgec *Bitmaps )GetBox (i int )(*_eca .Rectangle ,error ){const _dafcc ="\u0047\u0065\u0074\u0042\u006f\u0078";if _cgec ==nil {return nil ,_e .Error (_dafcc ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_cgec .Boxes )-1{return nil ,_e .Errorf (_dafcc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cgec .Boxes [i ],nil ;};func _gfcd (_dgdd *Bitmap ,_gbeg *Bitmap ,_fgfe *Selection ,_dfac **Bitmap )(*Bitmap ,error ){const _eege ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";
if _gbeg ==nil {return nil ,_e .Error (_eege ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _fgfe ==nil {return nil ,_e .Error (_eege ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");
};_aedb ,_gedaf :=_fgfe .Height ,_fgfe .Width ;if _aedb ==0||_gedaf ==0{return nil ,_e .Error (_eege ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _dgdd ==nil {_dgdd =_gbeg .createTemplate ();
*_dfac =_gbeg ;return _dgdd ,nil ;};_dgdd .Width =_gbeg .Width ;_dgdd .Height =_gbeg .Height ;_dgdd .RowStride =_gbeg .RowStride ;_dgdd .Color =_gbeg .Color ;_dgdd .Data =make ([]byte ,_gbeg .RowStride *_gbeg .Height );if _dgdd ==_gbeg {*_dfac =_gbeg .Copy ();
}else {*_dfac =_gbeg ;};return _dgdd ,nil ;};func (_bfd *Bitmap )And (s *Bitmap )(_ggcc *Bitmap ,_gad error ){const _geec ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bfd ==nil {return nil ,_e .Error (_geec ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_e .Error (_geec ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bfd .SizesEqual (s ){_gc .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_geec );
};if _ggcc ,_gad =_eaec (_ggcc ,_bfd );_gad !=nil {return nil ,_e .Wrap (_gad ,_geec ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gad =_ggcc .RasterOperation (0,0,_ggcc .Width ,_ggcc .Height ,PixSrcAndDst ,s ,0,0);
_gad !=nil {return nil ,_e .Wrap (_gad ,_geec ,"");};return _ggcc ,nil ;};func _fdeg (_dfdd *Bitmap ,_gffcfd *_cc .Stack ,_bafgg ,_bfdf int )(_agabb *_eca .Rectangle ,_cgad error ){const _beagc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _dfdd ==nil {return nil ,_e .Error (_beagc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _gffcfd ==nil {return nil ,_e .Error (_beagc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_cfda ,_bfce :=_dfdd .Width ,_dfdd .Height ;_eecf :=_cfda -1;_bdcc :=_bfce -1;if _bafgg < 0||_bafgg > _eecf ||_bfdf < 0||_bfdf > _bdcc ||!_dfdd .GetPixel (_bafgg ,_bfdf ){return nil ,nil ;};var _egdc *_eca .Rectangle ;_egdc ,_cgad =Rect (100000,100000,0,0);
if _cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"");};if _cgad =_dggdf (_gffcfd ,_bafgg ,_bafgg ,_bfdf ,1,_bdcc ,_egdc );_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cgad =_dggdf (_gffcfd ,_bafgg ,_bafgg ,_bfdf +1,-1,_bdcc ,_egdc );
_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_egdc .Min .X ,_egdc .Max .X =_bafgg ,_bafgg ;_egdc .Min .Y ,_egdc .Max .Y =_bfdf ,_bfdf ;var (_beeee *fillSegment ;
_edfd int ;);for _gffcfd .Len ()> 0{if _beeee ,_cgad =_dadf (_gffcfd );_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"");};_bfdf =_beeee ._bggdd ;for _bafgg =_beeee ._fdcgd ;_bafgg >=0&&_dfdd .GetPixel (_bafgg ,_bfdf );_bafgg --{if _cgad =_dfdd .SetPixel (_bafgg ,_bfdf ,0);
_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"");};};if _bafgg >=_beeee ._fdcgd {for _bafgg ++;_bafgg <=_beeee ._ggbe &&_bafgg <=_eecf &&!_dfdd .GetPixel (_bafgg ,_bfdf );_bafgg ++{};_edfd =_bafgg ;if !(_bafgg <=_beeee ._ggbe &&_bafgg <=_eecf ){continue ;
};}else {_edfd =_bafgg +1;if _edfd < _beeee ._fdcgd -1{if _cgad =_dggdf (_gffcfd ,_edfd ,_beeee ._fdcgd -1,_beeee ._bggdd ,-_beeee ._eccb ,_bdcc ,_egdc );_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bafgg =_beeee ._fdcgd +1;};for {for ;_bafgg <=_eecf &&_dfdd .GetPixel (_bafgg ,_bfdf );_bafgg ++{if _cgad =_dfdd .SetPixel (_bafgg ,_bfdf ,0);_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cgad =_dggdf (_gffcfd ,_edfd ,_bafgg -1,_beeee ._bggdd ,_beeee ._eccb ,_bdcc ,_egdc );
_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bafgg > _beeee ._ggbe +1{if _cgad =_dggdf (_gffcfd ,_beeee ._ggbe +1,_bafgg -1,_beeee ._bggdd ,-_beeee ._eccb ,_bdcc ,_egdc );_cgad !=nil {return nil ,_e .Wrap (_cgad ,_beagc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bafgg ++;_bafgg <=_beeee ._ggbe &&_bafgg <=_eecf &&!_dfdd .GetPixel (_bafgg ,_bfdf );_bafgg ++{};_edfd =_bafgg ;if !(_bafgg <=_beeee ._ggbe &&_bafgg <=_eecf ){break ;};};};_egdc .Max .X ++;_egdc .Max .Y ++;return _egdc ,nil ;};func (_eagec *Bitmaps )WidthSorter ()func (_febfdg ,_gecea int )bool {return func (_aabc ,_gefg int )bool {return _eagec .Values [_aabc ].Width < _eagec .Values [_gefg ].Width };
};func TstVSymbol (t *_g .T ,scale ...int )*Bitmap {_egge ,_acbag :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_b .NoError (t ,_acbag );return TstGetScaledSymbol (t ,_egge ,scale ...);};func (_dgge *Bitmap )setEightPartlyBytes (_ccd ,_cfbd int ,_bgd uint64 )(_cfbc error ){var (_fbbde byte ;
_cecd int ;);const _cfc ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _gbbeb :=1;_gbbeb <=_cfbd ;_gbbeb ++{_cecd =64-_gbbeb *8;_fbbde =byte (_bgd >>uint (_cecd )&0xff);_gc .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_fbbde ,_ccd ,_ccd +_gbbeb -1,_cfbd ,_cecd );
if _cfbc =_dgge .SetByte (_ccd +_gbbeb -1,_fbbde );_cfbc !=nil {return _e .Wrap (_cfbc ,_cfc ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_adff :=_dgge .RowStride *8-_dgge .Width ;if _adff ==0{return nil ;};_cecd -=8;_fbbde =byte (_bgd >>uint (_cecd )&0xff)<<uint (_adff );
if _cfbc =_dgge .SetByte (_ccd +_cfbd ,_fbbde );_cfbc !=nil {return _e .Wrap (_cfbc ,_cfc ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func TstDSymbol (t *_g .T ,scale ...int )*Bitmap {_cfad ,_gcbf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});
_b .NoError (t ,_gcbf );return TstGetScaledSymbol (t ,_cfad ,scale ...);};func (_acfc *Bitmap )setPadBits (_dac int ){_dbcf :=8-_acfc .Width %8;if _dbcf ==8{return ;};_cgfb :=_acfc .Width /8;_dcf :=_gfcac [_dbcf ];if _dac ==0{_dcf ^=_dcf ;};var _aaga int ;
for _aff :=0;_aff < _acfc .Height ;_aff ++{_aaga =_aff *_acfc .RowStride +_cgfb ;if _dac ==0{_acfc .Data [_aaga ]&=_dcf ;}else {_acfc .Data [_aaga ]|=_dcf ;};};};func (_cdgbc *byWidth )Swap (i ,j int ){_cdgbc .Values [i ],_cdgbc .Values [j ]=_cdgbc .Values [j ],_cdgbc .Values [i ];
if _cdgbc .Boxes !=nil {_cdgbc .Boxes [i ],_cdgbc .Boxes [j ]=_cdgbc .Boxes [j ],_cdgbc .Boxes [i ];};};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bdf ,_ecfa int ;_cdd :=src .RowStride -1;if x < 0{_ecfa =-x ;x =0;
}else if x +src .Width > dst .Width {_cdd -=src .Width +x -dst .Width ;};if y < 0{_bdf =-y ;y =0;_ecfa +=src .RowStride ;_cdd +=src .RowStride ;}else if y +src .Height > dst .Height {_bdf =src .Height +y -dst .Height ;};var (_eeb int ;_ade error ;);_deg :=x &0x07;
_caa :=8-_deg ;_bbef :=src .Width &0x07;_bbd :=_caa -_bbef ;_dgad :=_caa &0x07!=0;_bdec :=src .Width <=((_cdd -_ecfa )<<3)+_caa ;_dfeac :=dst .GetByteIndex (x ,y );_dcfe :=_bdf +dst .Height ;if src .Height > _dcfe {_eeb =_dcfe ;}else {_eeb =src .Height ;
};switch {case !_dgad :_ade =_ggad (src ,dst ,_bdf ,_eeb ,_dfeac ,_ecfa ,_cdd ,op );case _bdec :_ade =_fgbg (src ,dst ,_bdf ,_eeb ,_dfeac ,_ecfa ,_cdd ,_bbd ,_deg ,_caa ,op );default:_ade =_cggbf (src ,dst ,_bdf ,_eeb ,_dfeac ,_ecfa ,_cdd ,_bbd ,_deg ,_caa ,op ,_bbef );
};return _ade ;};func (_ffa *Bitmap )nextOnPixel (_gfef ,_geaf int )(_facb _eca .Point ,_cbaa bool ,_fcbdf error ){const _gcgb ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_facb ,_cbaa ,_fcbdf =_ffa .nextOnPixelLow (_ffa .Width ,_ffa .Height ,_ffa .RowStride ,_gfef ,_geaf );
if _fcbdf !=nil {return _facb ,false ,_e .Wrap (_fcbdf ,_gcgb ,"");};return _facb ,_cbaa ,nil ;};var (_ceff =_agd ();_caeg =_cb ();_fcad =_ceg (););func _ge (_fa ,_ada *Bitmap )(_geg error ){const _bg ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";
_ede :=_ada .RowStride ;_gb :=_fa .RowStride ;_ga :=_ada .RowStride *4-_fa .RowStride ;var (_bb ,_gca byte ;_cd uint32 ;_ce ,_ae ,_fe ,_ca ,_bbb ,_ecag ,_fbb int ;);for _fe =0;_fe < _ada .Height ;_fe ++{_ce =_fe *_ede ;_ae =4*_fe *_gb ;for _ca =0;_ca < _ede ;
_ca ++{_bb =_ada .Data [_ce +_ca ];_cd =_caeg [_bb ];_ecag =_ae +_ca *4;if _ga !=0&&(_ca +1)*4> _fa .RowStride {for _bbb =_ga ;_bbb > 0;_bbb --{_gca =byte ((_cd >>uint (_bbb *8))&0xff);_fbb =_ecag +(_ga -_bbb );if _geg =_fa .SetByte (_fbb ,_gca );_geg !=nil {return _e .Wrapf (_geg ,_bg ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_bbb );
};};}else if _geg =_fa .setFourBytes (_ecag ,_cd );_geg !=nil {return _e .Wrap (_geg ,_bg ,"");};if _geg =_fa .setFourBytes (_ae +_ca *4,_caeg [_ada .Data [_ce +_ca ]]);_geg !=nil {return _e .Wrap (_geg ,_bg ,"");};};for _bbb =1;_bbb < 4;_bbb ++{for _ca =0;
_ca < _gb ;_ca ++{if _geg =_fa .SetByte (_ae +_bbb *_gb +_ca ,_fa .Data [_ae +_ca ]);_geg !=nil {return _e .Wrapf (_geg ,_bg ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_bbb ,_ca );
};};};};return nil ;};const (Vanilla Color =iota ;Chocolate ;);func (_eceg *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_dbcb *Bitmaps ,_fbega error ){const _fgae ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _eceg ==nil {return nil ,_e .Error (_fgae ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_e .Errorf (_fgae ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_e .Errorf (_fgae ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_dagcd ,_fbega :=_eceg .makeSizeIndicator (width ,height ,tp ,relation );if _fbega !=nil {return nil ,_e .Wrap (_fbega ,_fgae ,"");};_dbcb ,_fbega =_eceg .selectByIndicator (_dagcd );if _fbega !=nil {return nil ,_e .Wrap (_fbega ,_fgae ,"");};return _dbcb ,nil ;
};func (_fbbd *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _fbbd .addBorderGeneral (left ,right ,top ,bot ,val );};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cgeg float64 ,_bef error ){const _fgag ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _cgeg ,_e .Error (_fgag ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _cgeg ,_e .Error (_fgag ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _cgeg ,_e .Error (_fgag ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_aedf ,_gcce :=bm1 .Width ,bm1 .Height ;_aadb ,_fdbg :=bm2 .Width ,bm2 .Height ;
if _cbe (_aedf -_aadb )> maxDiffW {return 0,nil ;};if _cbe (_gcce -_fdbg )> maxDiffH {return 0,nil ;};var _bgag ,_bcdb int ;if delX >=0{_bgag =int (delX +0.5);}else {_bgag =int (delX -0.5);};if delY >=0{_bcdb =int (delY +0.5);}else {_bcdb =int (delY -0.5);
};_gbdc :=bm1 .createTemplate ();if _bef =_gbdc .RasterOperation (_bgag ,_bcdb ,_aadb ,_fdbg ,PixSrc ,bm2 ,0,0);_bef !=nil {return _cgeg ,_e .Wrap (_bef ,_fgag ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _bef =_gbdc .RasterOperation (0,0,_aedf ,_gcce ,PixSrcAndDst ,bm1 ,0,0);
_bef !=nil {return _cgeg ,_e .Wrap (_bef ,_fgag ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_dddf :=_gbdc .countPixels ();_cgeg =float64 (_dddf )*float64 (_dddf )/(float64 (area1 )*float64 (area2 ));return _cgeg ,nil ;};func (_dgea *Points )AddPoint (x ,y float32 ){*_dgea =append (*_dgea ,Point {x ,y })};
func _agbb (_cedfd ,_efced *Bitmap ,_aagca ,_acbd int )(*Bitmap ,error ){const _fbff ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _efced ==nil {return nil ,_e .Error (_fbff ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _aagca < 1||_acbd < 1{return nil ,_e .Error (_fbff ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _aagca ==1&&_acbd ==1{return _efced .Copy (),nil ;};
if _aagca ==1||_acbd ==1{_cbc :=SelCreateBrick (_acbd ,_aagca ,_acbd /2,_aagca /2,SelHit );var _fbaf error ;_cedfd ,_fbaf =_fgge (_cedfd ,_efced ,_cbc );if _fbaf !=nil {return nil ,_e .Wrap (_fbaf ,_fbff ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _cedfd ,nil ;};_ecbg :=SelCreateBrick (1,_aagca ,0,_aagca /2,SelHit );_ecee :=SelCreateBrick (_acbd ,1,_acbd /2,0,SelHit );_aebg ,_eaad :=_gdf (nil ,_efced ,_ecbg );if _eaad !=nil {return nil ,_e .Wrap (_eaad ,_fbff ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _cedfd ,_eaad =_gdf (_cedfd ,_aebg ,_ecee );_eaad !=nil {return nil ,_e .Wrap (_eaad ,_fbff ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_eaad =_agad (_aebg ,_cedfd ,_ecbg );_eaad !=nil {return nil ,_e .Wrap (_eaad ,_fbff ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_eaad =_agad (_cedfd ,_aebg ,_ecee );_eaad !=nil {return nil ,_e .Wrap (_eaad ,_fbff ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _cedfd ,nil ;};const (_eabc shift =iota ;_fgedd ;);func (_cdec *Bitmap )GetByteIndex (x ,y int )int {return y *_cdec .RowStride +(x >>3)};
func (_dgg *Bitmap )GetUnpaddedData ()([]byte ,error ){_dae :=uint (_dgg .Width &0x07);if _dae ==0{return _dgg .Data ,nil ;};_fbf :=_dgg .Width *_dgg .Height ;if _fbf %8!=0{_fbf >>=3;_fbf ++;}else {_fbf >>=3;};_edba :=make ([]byte ,_fbf );_abd :=_aa .NewWriterMSB (_edba );
const _dbee ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _add :=0;_add < _dgg .Height ;_add ++{for _fcg :=0;_fcg < _dgg .RowStride ;_fcg ++{_gef :=_dgg .Data [_add *_dgg .RowStride +_fcg ];if _fcg !=_dgg .RowStride -1{_dfe :=_abd .WriteByte (_gef );
if _dfe !=nil {return nil ,_e .Wrap (_dfe ,_dbee ,"");};continue ;};for _fgec :=uint (0);_fgec < _dae ;_fgec ++{_cad :=_abd .WriteBit (int (_gef >>(7-_fgec )&0x01));if _cad !=nil {return nil ,_e .Wrap (_cad ,_dbee ,"");};};};};return _edba ,nil ;};func (_daae *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _gcbac ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _daae ==nil {return nil ,_e .Error (_gcbac ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_daae .Values )-1{return nil ,_e .Errorf (_gcbac ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _daae .Values [i ],nil ;};func TstImageBitmapInverseData ()[]byte {_bgbdf :=_bfae .Copy ();_bgbdf .InverseData ();return _bgbdf .Data ;};func (_dff *Bitmap )setAll ()error {_bced :=_faeb (_dff ,0,0,_dff .Width ,_dff .Height ,PixSet ,nil ,0,0);
if _bced !=nil {return _e .Wrap (_bced ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func TstOSymbol (t *_g .T ,scale ...int )*Bitmap {_efgdd ,_ffde :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_b .NoError (t ,_ffde );return TstGetScaledSymbol (t ,_efgdd ,scale ...);
};func (_gece *ClassedPoints )Swap (i ,j int ){_gece .IntSlice [i ],_gece .IntSlice [j ]=_gece .IntSlice [j ],_gece .IntSlice [i ];};func (_cdc *Bitmap )GetByte (index int )(byte ,error ){if index > len (_cdc .Data )-1||index < 0{return 0,_e .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _cdc .Data [index ],nil ;};func (_beef *Bitmap )inverseData (){if _eaff :=_beef .RasterOperation (0,0,_beef .Width ,_beef .Height ,PixNotDst ,nil ,0,0);_eaff !=nil {_gc .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_eaff );
};if _beef .Color ==Chocolate {_beef .Color =Vanilla ;}else {_beef .Color =Chocolate ;};};func (_ddag *Boxes )selectWithIndicator (_bbgg *_cc .NumSlice )(_gbbdd *Boxes ,_gcga error ){const _ggb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _ddag ==nil {return nil ,_e .Error (_ggb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _bbgg ==nil {return nil ,_e .Error (_ggb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_bbgg )!=len (*_ddag ){return nil ,_e .Error (_ggb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _ggd ,_ecfec int ;for _ffca :=0;_ffca < len (*_bbgg );_ffca ++{if _ggd ,_gcga =_bbgg .GetInt (_ffca );_gcga !=nil {return nil ,_e .Wrap (_gcga ,_ggb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _ggd ==1{_ecfec ++;
};};if _ecfec ==len (*_ddag ){return _ddag ,nil ;};_bbab :=Boxes {};for _aagb :=0;_aagb < len (*_bbgg );_aagb ++{_ggd =int ((*_bbgg )[_aagb ]);if _ggd ==0{continue ;};_bbab =append (_bbab ,(*_ddag )[_aagb ]);};_gbbdd =&_bbab ;return _gbbdd ,nil ;};func TstCSymbol (t *_g .T )*Bitmap {t .Helper ();
_ebfea :=New (6,6);_b .NoError (t ,_ebfea .SetPixel (1,0,1));_b .NoError (t ,_ebfea .SetPixel (2,0,1));_b .NoError (t ,_ebfea .SetPixel (3,0,1));_b .NoError (t ,_ebfea .SetPixel (4,0,1));_b .NoError (t ,_ebfea .SetPixel (0,1,1));_b .NoError (t ,_ebfea .SetPixel (5,1,1));
_b .NoError (t ,_ebfea .SetPixel (0,2,1));_b .NoError (t ,_ebfea .SetPixel (0,3,1));_b .NoError (t ,_ebfea .SetPixel (0,4,1));_b .NoError (t ,_ebfea .SetPixel (5,4,1));_b .NoError (t ,_ebfea .SetPixel (1,5,1));_b .NoError (t ,_ebfea .SetPixel (2,5,1));
_b .NoError (t ,_ebfea .SetPixel (3,5,1));_b .NoError (t ,_ebfea .SetPixel (4,5,1));return _ebfea ;};func TstWordBitmapWithSpaces (t *_g .T ,scale ...int )*Bitmap {_aedg :=1;if len (scale )> 0{_aedg =scale [0];};_cbggd :=3;_ebcg :=9+7+15+2*_cbggd +2*_cbggd ;
_fdafe :=5+_cbggd +5+2*_cbggd ;_cgcd :=New (_ebcg *_aedg ,_fdafe *_aedg );_fcede :=&Bitmaps {};var _dgfd *int ;_cbggd *=_aedg ;_gbfa :=_cbggd ;_dgfd =&_gbfa ;_bfgf :=_cbggd ;_gefgg :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );
_gefgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,_cbggd );_gefgg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,_cbggd );
_gefgg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,0);
*_dgfd =_cbggd ;_bfgf =5*_aedg +_cbggd ;_gefgg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,_cbggd );_gefgg =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstESymbol (t ,scale ...);
TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,1*_aedg );_gefgg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fcede ,_gefgg ,_dgfd ,_bfgf ,0);TstWriteSymbols (t ,_fcede ,_cgcd );return _cgcd ;};func (_cbga Points )Get (i int )(Point ,error ){if i > len (_cbga )-1{return Point {},_e .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _cbga [i ],nil ;};func (_aac CombinationOperator )String ()string {var _dgdg string ;switch _aac {case CmbOpOr :_dgdg ="\u004f\u0052";case CmbOpAnd :_dgdg ="\u0041\u004e\u0044";case CmbOpXor :_dgdg ="\u0058\u004f\u0052";case CmbOpXNor :_dgdg ="\u0058\u004e\u004f\u0052";
case CmbOpReplace :_dgdg ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_dgdg ="\u004e\u004f\u0054";};return _dgdg ;};func init (){const _gcaeb ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_cefc =New (50,40);var _bbff error ;_cefc ,_bbff =_cefc .AddBorder (2,1);if _bbff !=nil {panic (_e .Wrap (_bbff ,_gcaeb ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_bfae ,_bbff =NewWithData (50,22,_cgcf );if _bbff !=nil {panic (_e .Wrap (_bbff ,_gcaeb ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _fgbg (_ffff ,_fdee *Bitmap ,_cced ,_ceag ,_fbce ,_gbcd ,_egae ,_efag ,_cbac ,_bfbb int ,_cga CombinationOperator )error {var _dec int ;_degf :=func (){_dec ++;_fbce +=_fdee .RowStride ;_gbcd +=_ffff .RowStride ;_egae +=_ffff .RowStride };for _dec =_cced ;
_dec < _ceag ;_degf (){var _cebe uint16 ;_dgec :=_fbce ;for _gbab :=_gbcd ;_gbab <=_egae ;_gbab ++{_bfab ,_geee :=_fdee .GetByte (_dgec );if _geee !=nil {return _geee ;};_cbdb ,_geee :=_ffff .GetByte (_gbab );if _geee !=nil {return _geee ;};_cebe =(_cebe |uint16 (_cbdb ))<<uint (_bfbb );
_cbdb =byte (_cebe >>8);if _gbab ==_egae {_cbdb =_bcef (uint (_efag ),_cbdb );};if _geee =_fdee .SetByte (_dgec ,_bgdf (_bfab ,_cbdb ,_cga ));_geee !=nil {return _geee ;};_dgec ++;_cebe <<=uint (_cbac );};};return nil ;};type SelectionValue int ;func _beea (_abb ,_cdbd ,_dge *Bitmap )(*Bitmap ,error ){const _gda ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _cdbd ==nil {return nil ,_e .Error (_gda ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dge ==nil {return nil ,_e .Error (_gda ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bge error ;switch {case _abb ==_cdbd :if _bge =_abb .RasterOperation (0,0,_cdbd .Width ,_cdbd .Height ,PixNotSrcAndDst ,_dge ,0,0);
_bge !=nil {return nil ,_e .Wrap (_bge ,_gda ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _abb ==_dge :if _bge =_abb .RasterOperation (0,0,_cdbd .Width ,_cdbd .Height ,PixNotSrcAndDst ,_cdbd ,0,0);_bge !=nil {return nil ,_e .Wrap (_bge ,_gda ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_abb ,_bge =_eaec (_abb ,_cdbd );if _bge !=nil {return nil ,_e .Wrap (_bge ,_gda ,"");};if _bge =_abb .RasterOperation (0,0,_cdbd .Width ,_cdbd .Height ,PixNotSrcAndDst ,_dge ,0,0);_bge !=nil {return nil ,_e .Wrap (_bge ,_gda ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _abb ,nil ;};func (_egbc *Bitmap )GetChocolateData ()[]byte {if _egbc .Color ==Vanilla {_egbc .inverseData ();};return _egbc .Data ;};func (_eeee *Bitmap )connComponentsBitmapsBB (_fae *Bitmaps ,_beae int )(_ebba *Boxes ,_dbga error ){const _geea ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _beae !=4&&_beae !=8{return nil ,_e .Error (_geea ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fae ==nil {return nil ,_e .Error (_geea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_fae .Values )> 0{return nil ,_e .Error (_geea ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _eeee .Zero (){return &Boxes {},nil ;};
var (_cfab ,_bbfg ,_bgeb ,_ebgbe *Bitmap ;);_eeee .setPadBits (0);if _cfab ,_dbga =_eaec (nil ,_eeee );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"\u0062\u006d\u0031");};if _bbfg ,_dbga =_eaec (nil ,_eeee );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"\u0062\u006d\u0032");
};_abeg :=&_cc .Stack {};_abeg .Aux =&_cc .Stack {};_ebba =&Boxes {};var (_acag ,_eeag int ;_defg _eca .Point ;_ggdf bool ;_bbefd *_eca .Rectangle ;);for {if _defg ,_ggdf ,_dbga =_cfab .nextOnPixel (_acag ,_eeag );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"");
};if !_ggdf {break ;};if _bbefd ,_dbga =_cece (_cfab ,_abeg ,_defg .X ,_defg .Y ,_beae );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"");};if _dbga =_ebba .Add (_bbefd );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"");};if _bgeb ,_dbga =_cfab .clipRectangle (_bbefd ,nil );
_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"\u0062\u006d\u0033");};if _ebgbe ,_dbga =_bbfg .clipRectangle (_bbefd ,nil );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"\u0062\u006d\u0034");};if _ ,_dbga =_abfe (_bgeb ,_bgeb ,_ebgbe );_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _dbga =_bbfg .RasterOperation (_bbefd .Min .X ,_bbefd .Min .Y ,_bbefd .Dx (),_bbefd .Dy (),PixSrcXorDst ,_bgeb ,0,0);_dbga !=nil {return nil ,_e .Wrap (_dbga ,_geea ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");
};_fae .AddBitmap (_bgeb );_acag =_defg .X ;_eeag =_defg .Y ;};_fae .Boxes =*_ebba ;return _ebba ,nil ;};func _gaea (_gadc *Bitmap ,_bdef int )(*Bitmap ,error ){const _bfba ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _gadc ==nil {return nil ,_e .Error (_bfba ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bdef <=0{return nil ,_e .Error (_bfba ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _bdef ==1{_eace ,_cdaa :=_eaec (nil ,_gadc );if _cdaa !=nil {return nil ,_e .Wrap (_cdaa ,_bfba ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _eace ,nil ;};_ffbf ,_gabeg :=_cab (_gadc ,_bdef ,_bdef );if _gabeg !=nil {return nil ,_e .Wrap (_gabeg ,_bfba ,"");
};return _ffbf ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _fcce ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_e .Error (_fcce ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_e .Error (_fcce ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_e .Error (_fcce ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_e .Error (_fcce ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_e .Error (_fcce ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_fbeg ,_ebefd :=bm1 .Width ,bm1 .Height ;_gffc ,_gbf :=bm2 .Width ,bm2 .Height ;if _cc .Abs (_fbeg -_gffc )> maxDiffW {return false ,nil ;};if _cc .Abs (_ebefd -_gbf )> maxDiffH {return false ,nil ;};_fgcbf :=int (delX +_cc .Sign (delX )*0.5);_bbfgc :=int (delY +_cc .Sign (delY )*0.5);
_daeb :=int (_gf .Ceil (_gf .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_fdfa :=bm2 .RowStride ;_ebgc :=_eaae (_bbfgc ,0);_cgb :=_ebd (_gbf +_bbfgc ,_ebefd );_edbff :=bm1 .RowStride *_ebgc ;_fgbc :=bm2 .RowStride *(_ebgc -_bbfgc );
var _bffd int ;if _cgb <=_ebefd {_bffd =downcount [_cgb -1];};_efe :=_eaae (_fgcbf ,0);_dbba :=_ebd (_gffc +_fgcbf ,_fbeg );var _gbff ,_gebc int ;if _fgcbf >=8{_gbff =_fgcbf >>3;_edbff +=_gbff ;_efe -=_gbff <<3;_dbba -=_gbff <<3;_fgcbf &=7;}else if _fgcbf <=-8{_gebc =-((_fgcbf +7)>>3);
_fgbc +=_gebc ;_fdfa -=_gebc ;_fgcbf +=_gebc <<3;};var (_cbacf ,_cadb ,_cdfc int ;_bcga ,_ccea ,_gffcf byte ;);if _efe >=_dbba ||_ebgc >=_cgb {return false ,nil ;};_cdcc :=(_dbba +7)>>3;switch {case _fgcbf ==0:for _cadb =_ebgc ;_cadb < _cgb ;_cadb ,_edbff ,_fgbc =_cadb +1,_edbff +bm1 .RowStride ,_fgbc +bm2 .RowStride {for _cdfc =0;
_cdfc < _cdcc ;_cdfc ++{_bcga =bm1 .Data [_edbff +_cdfc ]&bm2 .Data [_fgbc +_cdfc ];_cbacf +=tab [_bcga ];};if _cbacf >=_daeb {return true ,nil ;};if _bbee :=_cbacf +downcount [_cadb ]-_bffd ;_bbee < _daeb {return false ,nil ;};};case _fgcbf > 0&&_fdfa < _cdcc :for _cadb =_ebgc ;
_cadb < _cgb ;_cadb ,_edbff ,_fgbc =_cadb +1,_edbff +bm1 .RowStride ,_fgbc +bm2 .RowStride {_ccea =bm1 .Data [_edbff ];_gffcf =bm2 .Data [_fgbc ]>>uint (_fgcbf );_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];for _cdfc =1;_cdfc < _fdfa ;_cdfc ++{_ccea =bm1 .Data [_edbff +_cdfc ];
_gffcf =bm2 .Data [_fgbc +_cdfc ]>>uint (_fgcbf )|bm2 .Data [_fgbc +_cdfc -1]<<uint (8-_fgcbf );_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];};_ccea =bm1 .Data [_edbff +_cdfc ];_gffcf =bm2 .Data [_fgbc +_cdfc -1]<<uint (8-_fgcbf );_bcga =_ccea &_gffcf ;
_cbacf +=tab [_bcga ];if _cbacf >=_daeb {return true ,nil ;}else if _cbacf +downcount [_cadb ]-_bffd < _daeb {return false ,nil ;};};case _fgcbf > 0&&_fdfa >=_cdcc :for _cadb =_ebgc ;_cadb < _cgb ;_cadb ,_edbff ,_fgbc =_cadb +1,_edbff +bm1 .RowStride ,_fgbc +bm2 .RowStride {_ccea =bm1 .Data [_edbff ];
_gffcf =bm2 .Data [_fgbc ]>>uint (_fgcbf );_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];for _cdfc =1;_cdfc < _cdcc ;_cdfc ++{_ccea =bm1 .Data [_edbff +_cdfc ];_gffcf =bm2 .Data [_fgbc +_cdfc ]>>uint (_fgcbf );_gffcf |=bm2 .Data [_fgbc +_cdfc -1]<<uint (8-_fgcbf );
_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];};if _cbacf >=_daeb {return true ,nil ;}else if _cbacf +downcount [_cadb ]-_bffd < _daeb {return false ,nil ;};};case _cdcc < _fdfa :for _cadb =_ebgc ;_cadb < _cgb ;_cadb ,_edbff ,_fgbc =_cadb +1,_edbff +bm1 .RowStride ,_fgbc +bm2 .RowStride {for _cdfc =0;
_cdfc < _cdcc ;_cdfc ++{_ccea =bm1 .Data [_edbff +_cdfc ];_gffcf =bm2 .Data [_fgbc +_cdfc ]<<uint (-_fgcbf );_gffcf |=bm2 .Data [_fgbc +_cdfc +1]>>uint (8+_fgcbf );_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];};if _cbacf >=_daeb {return true ,nil ;}else if _ccec :=_cbacf +downcount [_cadb ]-_bffd ;
_ccec < _daeb {return false ,nil ;};};case _fdfa >=_cdcc :for _cadb =_ebgc ;_cadb < _cgb ;_cadb ,_edbff ,_fgbc =_cadb +1,_edbff +bm1 .RowStride ,_fgbc +bm2 .RowStride {for _cdfc =0;_cdfc < _cdcc ;_cdfc ++{_ccea =bm1 .Data [_edbff +_cdfc ];_gffcf =bm2 .Data [_fgbc +_cdfc ]<<uint (-_fgcbf );
_gffcf |=bm2 .Data [_fgbc +_cdfc +1]>>uint (8+_fgcbf );_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];};_ccea =bm1 .Data [_edbff +_cdfc ];_gffcf =bm2 .Data [_fgbc +_cdfc ]<<uint (-_fgcbf );_bcga =_ccea &_gffcf ;_cbacf +=tab [_bcga ];if _cbacf >=_daeb {return true ,nil ;
}else if _cbacf +downcount [_cadb ]-_bffd < _daeb {return false ,nil ;};};};_gce :=float32 (_cbacf )*float32 (_cbacf )/(float32 (area1 )*float32 (area2 ));if _gce >=scoreThreshold {_gc .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_cbacf ,_daeb ,_gce ,scoreThreshold );
};return false ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _beaee ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_dcce ,_gabf :=p1 .Width ,p1 .Height ;_fbfg ,_bfge :=p3 .Width ,p3 .Height ;
if _cc .Abs (_dcce -_fbfg )> maxDiffW {return false ,nil ;};if _cc .Abs (_gabf -_bfge )> maxDiffH {return false ,nil ;};_dadc :=int (delX +_cc .Sign (delX )*0.5);_dfbf :=int (delY +_cc .Sign (delY )*0.5);var _aeec error ;_fcgf :=p1 .CreateTemplate ();if _aeec =_fcgf .RasterOperation (0,0,_dcce ,_gabf ,PixSrc ,p1 ,0,0);
_aeec !=nil {return false ,_e .Wrap (_aeec ,_beaee ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _aeec =_fcgf .RasterOperation (_dadc ,_dfbf ,_dcce ,_gabf ,PixNotSrcAndDst ,p4 ,0,0);_aeec !=nil {return false ,_e .Wrap (_aeec ,_beaee ,"\u0021p\u0034\u0020\u0026\u0020\u0074");
};if _fcgf .Zero (){return false ,nil ;};if _aeec =_fcgf .RasterOperation (_dadc ,_dfbf ,_fbfg ,_bfge ,PixSrc ,p3 ,0,0);_aeec !=nil {return false ,_e .Wrap (_aeec ,_beaee ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _aeec =_fcgf .RasterOperation (0,0,_fbfg ,_bfge ,PixNotSrcAndDst ,p2 ,0,0);
_aeec !=nil {return false ,_e .Wrap (_aeec ,_beaee ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fcgf .Zero (),nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _aafd (_gefc *Bitmap ,_ccde ,_adec int ,_bfada ,_dadce int ,_dadcg RasterOperator ){var (_fdcd int ;
_baca byte ;_dfacd ,_bdeb int ;_cdcb int ;);_eabe :=_bfada >>3;_ecfc :=_bfada &7;if _ecfc > 0{_baca =_eeeea [_ecfc ];};_fdcd =_gefc .RowStride *_adec +(_ccde >>3);switch _dadcg {case PixClr :for _dfacd =0;_dfacd < _dadce ;_dfacd ++{_cdcb =_fdcd +_dfacd *_gefc .RowStride ;
for _bdeb =0;_bdeb < _eabe ;_bdeb ++{_gefc .Data [_cdcb ]=0x0;_cdcb ++;};if _ecfc > 0{_gefc .Data [_cdcb ]=_dfg (_gefc .Data [_cdcb ],0x0,_baca );};};case PixSet :for _dfacd =0;_dfacd < _dadce ;_dfacd ++{_cdcb =_fdcd +_dfacd *_gefc .RowStride ;for _bdeb =0;
_bdeb < _eabe ;_bdeb ++{_gefc .Data [_cdcb ]=0xff;_cdcb ++;};if _ecfc > 0{_gefc .Data [_cdcb ]=_dfg (_gefc .Data [_cdcb ],0xff,_baca );};};case PixNotDst :for _dfacd =0;_dfacd < _dadce ;_dfacd ++{_cdcb =_fdcd +_dfacd *_gefc .RowStride ;for _bdeb =0;_bdeb < _eabe ;
_bdeb ++{_gefc .Data [_cdcb ]=^_gefc .Data [_cdcb ];_cdcb ++;};if _ecfc > 0{_gefc .Data [_cdcb ]=_dfg (_gefc .Data [_cdcb ],^_gefc .Data [_cdcb ],_baca );};};};};func (_dcbf *BitmapsArray )AddBitmaps (bm *Bitmaps ){_dcbf .Values =append (_dcbf .Values ,bm )};
func NewClassedPoints (points *Points ,classes _cc .IntSlice )(*ClassedPoints ,error ){const _edfa ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_e .Error (_edfa ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_e .Error (_edfa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_bgcg :=&ClassedPoints {Points :points ,IntSlice :classes };if _cegf :=_bgcg .validateIntSlice ();_cegf !=nil {return nil ,_e .Wrap (_cegf ,_edfa ,"");
};return _bgcg ,nil ;};func (_ecc *Boxes )Get (i int )(*_eca .Rectangle ,error ){const _eefb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _ecc ==nil {return nil ,_e .Error (_eefb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_ecc )-1{return nil ,_e .Errorf (_eefb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_ecc )[i ],nil ;};func _af (_fac *Bitmap ,_gge *Bitmap ,_cg int )(_eb error ){const _cee ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";
switch _cg {case 2:_eb =_gd (_fac ,_gge );case 4:_eb =_ge (_fac ,_gge );case 8:_eb =_dg (_fac ,_gge );default:return _e .Error (_cee ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");
};if _eb !=nil {_eb =_e .Wrap (_eb ,_cee ,"");};return _eb ;};func _eaec (_ecff ,_gbae *Bitmap )(*Bitmap ,error ){if _gbae ==nil {return nil ,_e .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gbae ==_ecff {return _ecff ,nil ;};if _ecff ==nil {_ecff =_gbae .createTemplate ();copy (_ecff .Data ,_gbae .Data );return _ecff ,nil ;};_aaeb :=_ecff .resizeImageData (_gbae );if _aaeb !=nil {return nil ,_e .Wrap (_aaeb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_ecff .Text =_gbae .Text ;copy (_ecff .Data ,_gbae .Data );return _ecff ,nil ;};func _bcef (_dabc uint ,_febf byte )byte {return _febf >>_dabc <<_dabc };func _ceg ()(_ba [256]uint64 ){for _edf :=0;_edf < 256;_edf ++{if _edf &0x01!=0{_ba [_edf ]|=0xff;
};if _edf &0x02!=0{_ba [_edf ]|=0xff00;};if _edf &0x04!=0{_ba [_edf ]|=0xff0000;};if _edf &0x08!=0{_ba [_edf ]|=0xff000000;};if _edf &0x10!=0{_ba [_edf ]|=0xff00000000;};if _edf &0x20!=0{_ba [_edf ]|=0xff0000000000;};if _edf &0x40!=0{_ba [_edf ]|=0xff000000000000;
};if _edf &0x80!=0{_ba [_edf ]|=0xff00000000000000;};};return _ba ;};func (_aagbc *byHeight )Swap (i ,j int ){_aagbc .Values [i ],_aagbc .Values [j ]=_aagbc .Values [j ],_aagbc .Values [i ];if _aagbc .Boxes !=nil {_aagbc .Boxes [i ],_aagbc .Boxes [j ]=_aagbc .Boxes [j ],_aagbc .Boxes [i ];
};};func ClipBoxToRectangle (box *_eca .Rectangle ,wi ,hi int )(_ebff *_eca .Rectangle ,_fbfe error ){const _eccg ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_e .Error (_eccg ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_e .Error (_eccg ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_eebf :=*box ;
_ebff =&_eebf ;if _ebff .Min .X < 0{_ebff .Max .X +=_ebff .Min .X ;_ebff .Min .X =0;};if _ebff .Min .Y < 0{_ebff .Max .Y +=_ebff .Min .Y ;_ebff .Min .Y =0;};if _ebff .Max .X > wi {_ebff .Max .X =wi ;};if _ebff .Max .Y > hi {_ebff .Max .Y =hi ;};return _ebff ,nil ;
};type BoundaryCondition int ;func _agad (_ceba ,_gebb *Bitmap ,_bcbad *Selection )(*Bitmap ,error ){const _bdee ="\u0065\u0072\u006fd\u0065";var (_bfgef error ;_aeff *Bitmap ;);_ceba ,_bfgef =_gfcd (_ceba ,_gebb ,_bcbad ,&_aeff );if _bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"");
};if _bfgef =_ceba .setAll ();_bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"");};var _bbca SelectionValue ;for _dcba :=0;_dcba < _bcbad .Height ;_dcba ++{for _edeg :=0;_edeg < _bcbad .Width ;_edeg ++{_bbca =_bcbad .Data [_dcba ][_edeg ];if _bbca ==SelHit {_bfgef =_faeb (_ceba ,_bcbad .Cx -_edeg ,_bcbad .Cy -_dcba ,_gebb .Width ,_gebb .Height ,PixSrcAndDst ,_aeff ,0,0);
if _bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"");};};};};if MorphBC ==SymmetricMorphBC {return _ceba ,nil ;};_egfa ,_adad ,_adaf ,_aadbd :=_bcbad .findMaxTranslations ();if _egfa > 0{if _bfgef =_ceba .RasterOperation (0,0,_egfa ,_gebb .Height ,PixClr ,nil ,0,0);
_bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _adaf > 0{if _bfgef =_ceba .RasterOperation (_gebb .Width -_adaf ,0,_adaf ,_gebb .Height ,PixClr ,nil ,0,0);_bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _adad > 0{if _bfgef =_ceba .RasterOperation (0,0,_gebb .Width ,_adad ,PixClr ,nil ,0,0);_bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _aadbd > 0{if _bfgef =_ceba .RasterOperation (0,_gebb .Height -_aadbd ,_gebb .Width ,_aadbd ,PixClr ,nil ,0,0);
_bfgef !=nil {return nil ,_e .Wrap (_bfgef ,_bdee ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _ceba ,nil ;};func (_ged *Bitmap )Equals (s *Bitmap )bool {if len (_ged .Data )!=len (s .Data )||_ged .Width !=s .Width ||_ged .Height !=s .Height {return false ;
};for _eae :=0;_eae < _ged .Height ;_eae ++{_acf :=_eae *_ged .RowStride ;for _bbcg :=0;_bbcg < _ged .RowStride ;_bbcg ++{if _ged .Data [_acf +_bbcg ]!=s .Data [_acf +_bbcg ]{return false ;};};};return true ;};