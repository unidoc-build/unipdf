//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ag "encoding/binary";_g "github.com/stretchr/testify/require";_gf "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/internal/bitwise";_ea "github.com/unidoc/unipdf/v3/internal/imageutil";_e "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_fg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";_fe "math";_d "sort";_b "strings";_c "testing";);func (_eaaee *ClassedPoints )Swap (i ,j int ){_eaaee .IntSlice [i ],_eaaee .IntSlice [j ]=_eaaee .IntSlice [j ],_eaaee .IntSlice [i ];};func _cfdcc (_aece ,_fcd *Bitmap )(*Bitmap ,error ){if _fcd ==nil {return nil ,_fg .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fcd ==_aece {return _aece ,nil ;};if _aece ==nil {_aece =_fcd .createTemplate ();copy (_aece .Data ,_fcd .Data );return _aece ,nil ;};_dgfc :=_aece .resizeImageData (_fcd );if _dgfc !=nil {return nil ,_fg .Wrap (_dgfc ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_aece .Text =_fcd .Text ;copy (_aece .Data ,_fcd .Data );return _aece ,nil ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _agbf (d ,s ,sel )};func TstImageBitmap ()*Bitmap {return _baedg .Copy ()};func (_debcc *Bitmap )Equals (s *Bitmap )bool {if len (_debcc .Data )!=len (s .Data )||_debcc .Width !=s .Width ||_debcc .Height !=s .Height {return false ;};for _cdf :=0;_cdf < _debcc .Height ;_cdf ++{_cdc :=_cdf *_debcc .RowStride ;for _bgc :=0;_bgc < _debcc .RowStride ;_bgc ++{if _debcc .Data [_cdc +_bgc ]!=s .Data [_cdc +_bgc ]{return false ;};};};return true ;};type SizeComparison int ;func (_eaaa *Bitmaps )HeightSorter ()func (_cfgcd ,_bcbg int )bool {return func (_dfgf ,_fcfgd int )bool {_bfea :=_eaaa .Values [_dfgf ].Height < _eaaa .Values [_fcfgd ].Height ;_gf .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_eaaa .Values [_dfgf ].Height ,_eaaa .Values [_fcfgd ].Height ,_bfea );return _bfea ;};};func (_gdbf *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gdbf .Values =append (_gdbf .Values ,bm )};func (_eeg *Bitmap )clipRectangle (_bdeg ,_bgf *_a .Rectangle )(_dfbe *Bitmap ,_fbg error ){const _aga ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _bdeg ==nil {return nil ,_fg .Error (_aga ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_egdd ,_eadd :=_eeg .Width ,_eeg .Height ;_bbfca ,_fbg :=ClipBoxToRectangle (_bdeg ,_egdd ,_eadd );if _fbg !=nil {_gf .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_fbg );return nil ,nil ;};_egcf ,_eegd :=_bbfca .Min .X ,_bbfca .Min .Y ;_ccd ,_ggd :=_bbfca .Max .X -_bbfca .Min .X ,_bbfca .Max .Y -_bbfca .Min .Y ;_dfbe =New (_ccd ,_ggd );_dfbe .Text =_eeg .Text ;if _fbg =_dfbe .RasterOperation (0,0,_ccd ,_ggd ,PixSrc ,_eeg ,_egcf ,_eegd );_fbg !=nil {return nil ,_fg .Wrap (_fbg ,_aga ,"");};if _bgf !=nil {*_bgf =*_bbfca ;};return _dfbe ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _ebb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_bceb :=_dbgc (width ,height );_bceb .Data =data ;if _beafd :=((width *height )+7)>>3;len (data )< _beafd {return nil ,_fg .Errorf (_ebb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_beafd );};if _dgdc :=_bceb .addPadBits ();_dgdc !=nil {return nil ,_fg .Wrap (_dgdc ,_ebb ,"");};return _bceb ,nil ;};func (_dec *Bitmap )GetBitOffset (x int )int {return x &0x07};func Centroids (bms []*Bitmap )(*Points ,error ){_cbdac :=make ([]Point ,len (bms ));_gdda :=_fccag ();_afge :=_fbagc ();var _ddee error ;for _ebfd ,_cgbb :=range bms {_cbdac [_ebfd ],_ddee =_cgbb .centroid (_gdda ,_afge );if _ddee !=nil {return nil ,_ddee ;};};_eefe :=Points (_cbdac );return &_eefe ,nil ;};func (_gebd *Bitmap )SetPixel (x ,y int ,pixel byte )error {_debg :=_gebd .GetByteIndex (x ,y );if _debg > len (_gebd .Data )-1{return _fg .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_debg );};_gcfc :=_gebd .GetBitOffset (x );_dga :=uint (7-_gcfc );_abb :=_gebd .Data [_debg ];var _adge byte ;if pixel ==1{_adge =_abb |(pixel &0x01<<_dga );}else {_adge =_abb &^(1<<_dga );};_gebd .Data [_debg ]=_adge ;return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func _agdd (_abcc ,_dabc ,_ccee byte )byte {return (_abcc &^(_ccee ))|(_dabc &_ccee )};func (_ggcb *Bitmap )connComponentsBitmapsBB (_fdd *Bitmaps ,_daef int )(_gaea *Boxes ,_bdfa error ){const _fceeg ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _daef !=4&&_daef !=8{return nil ,_fg .Error (_fceeg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fdd ==nil {return nil ,_fg .Error (_fceeg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_fdd .Values )> 0{return nil ,_fg .Error (_fceeg ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _ggcb .Zero (){return &Boxes {},nil ;};var (_facg ,_cggee ,_dcee ,_gcbc *Bitmap ;);_ggcb .setPadBits (0);if _facg ,_bdfa =_cfdcc (nil ,_ggcb );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"\u0062\u006d\u0031");};if _cggee ,_bdfa =_cfdcc (nil ,_ggcb );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"\u0062\u006d\u0032");};_afg :=&_e .Stack {};_afg .Aux =&_e .Stack {};_gaea =&Boxes {};var (_dece ,_gefd int ;_dafb _a .Point ;_afbf bool ;_ccfb *_a .Rectangle ;);for {if _dafb ,_afbf ,_bdfa =_facg .nextOnPixel (_dece ,_gefd );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"");};if !_afbf {break ;};if _ccfb ,_bdfa =_fdfce (_facg ,_afg ,_dafb .X ,_dafb .Y ,_daef );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"");};if _bdfa =_gaea .Add (_ccfb );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"");};if _dcee ,_bdfa =_facg .clipRectangle (_ccfb ,nil );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"\u0062\u006d\u0033");};if _gcbc ,_bdfa =_cggee .clipRectangle (_ccfb ,nil );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"\u0062\u006d\u0034");};if _ ,_bdfa =_gdbg (_dcee ,_dcee ,_gcbc );_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _bdfa =_cggee .RasterOperation (_ccfb .Min .X ,_ccfb .Min .Y ,_ccfb .Dx (),_ccfb .Dy (),PixSrcXorDst ,_dcee ,0,0);_bdfa !=nil {return nil ,_fg .Wrap (_bdfa ,_fceeg ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_fdd .AddBitmap (_dcee );_dece =_dafb .X ;_gefd =_dafb .Y ;};_fdd .Boxes =*_gaea ;return _gaea ,nil ;};func init (){for _fcf :=0;_fcf < 256;_fcf ++{_bag [_fcf ]=uint8 (_fcf &0x1)+(uint8 (_fcf >>1)&0x1)+(uint8 (_fcf >>2)&0x1)+(uint8 (_fcf >>3)&0x1)+(uint8 (_fcf >>4)&0x1)+(uint8 (_fcf >>5)&0x1)+(uint8 (_fcf >>6)&0x1)+(uint8 (_fcf >>7)&0x1);};};func _cbed (_cgeb *Bitmap ,_gbcg ,_cddgg int ,_dcag ,_eeaa int ,_egced RasterOperator ){var (_ggdc int ;_ffecd byte ;_dfgdf ,_ccgf int ;_accb int ;);_gbfe :=_dcag >>3;_acfb :=_dcag &7;if _acfb > 0{_ffecd =_bgd [_acfb ];};_ggdc =_cgeb .RowStride *_cddgg +(_gbcg >>3);switch _egced {case PixClr :for _dfgdf =0;_dfgdf < _eeaa ;_dfgdf ++{_accb =_ggdc +_dfgdf *_cgeb .RowStride ;for _ccgf =0;_ccgf < _gbfe ;_ccgf ++{_cgeb .Data [_accb ]=0x0;_accb ++;};if _acfb > 0{_cgeb .Data [_accb ]=_agdd (_cgeb .Data [_accb ],0x0,_ffecd );};};case PixSet :for _dfgdf =0;_dfgdf < _eeaa ;_dfgdf ++{_accb =_ggdc +_dfgdf *_cgeb .RowStride ;for _ccgf =0;_ccgf < _gbfe ;_ccgf ++{_cgeb .Data [_accb ]=0xff;_accb ++;};if _acfb > 0{_cgeb .Data [_accb ]=_agdd (_cgeb .Data [_accb ],0xff,_ffecd );};};case PixNotDst :for _dfgdf =0;_dfgdf < _eeaa ;_dfgdf ++{_accb =_ggdc +_dfgdf *_cgeb .RowStride ;for _ccgf =0;_ccgf < _gbfe ;_ccgf ++{_cgeb .Data [_accb ]=^_cgeb .Data [_accb ];_accb ++;};if _acfb > 0{_cgeb .Data [_accb ]=_agdd (_cgeb .Data [_accb ],^_cgeb .Data [_accb ],_ffecd );};};};};var (_gaac *Bitmap ;_baedg *Bitmap ;);func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _ccfcf (src ,sequence ...);};var (_bgd =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_eeede =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_aeg *Boxes )Add (box *_a .Rectangle )error {if _aeg ==nil {return _fg .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_aeg =append (*_aeg ,box );return nil ;};func (_dde *Bitmap )GetByte (index int )(byte ,error ){if index > len (_dde .Data )-1||index < 0{return 0,_fg .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _dde .Data [index ],nil ;};func (_fdada *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _agaf (_fdada ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstOSymbol (t *_c .T ,scale ...int )*Bitmap {_efgg ,_fecbd :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_g .NoError (t ,_fecbd );return TstGetScaledSymbol (t ,_efgg ,scale ...);};func (_agbfc *byWidth )Len ()int {return len (_agbfc .Values )};func (_gbaf *Selection )findMaxTranslations ()(_bbgf ,_bdfb ,_facad ,_dfdg int ){for _eaebc :=0;_eaebc < _gbaf .Height ;_eaebc ++{for _agcdc :=0;_agcdc < _gbaf .Width ;_agcdc ++{if _gbaf .Data [_eaebc ][_agcdc ]==SelHit {_bbgf =_cbdf (_bbgf ,_gbaf .Cx -_agcdc );_bdfb =_cbdf (_bdfb ,_gbaf .Cy -_eaebc );_facad =_cbdf (_facad ,_agcdc -_gbaf .Cx );_dfdg =_cbdf (_dfdg ,_eaebc -_gbaf .Cy );};};};return _bbgf ,_bdfb ,_facad ,_dfdg ;};func Rect (x ,y ,w ,h int )(*_a .Rectangle ,error ){const _ceg ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_fg .Errorf (_ceg ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_fg .Error (_ceg ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_fagf :=_a .Rect (x ,y ,x +w ,y +h );return &_fagf ,nil ;};func _afac (_bgff uint ,_efda byte )byte {return _efda >>_bgff <<_bgff };func New (width ,height int )*Bitmap {_edba :=_dbgc (width ,height );_edba .Data =make ([]byte ,height *_edba .RowStride );return _edba ;};func (_aafg *ClassedPoints )Len ()int {return _aafg .IntSlice .Size ()};func _edf ()(_fae [256]uint16 ){for _egg :=0;_egg < 256;_egg ++{if _egg &0x01!=0{_fae [_egg ]|=0x3;};if _egg &0x02!=0{_fae [_egg ]|=0xc;};if _egg &0x04!=0{_fae [_egg ]|=0x30;};if _egg &0x08!=0{_fae [_egg ]|=0xc0;};if _egg &0x10!=0{_fae [_egg ]|=0x300;};if _egg &0x20!=0{_fae [_egg ]|=0xc00;};if _egg &0x40!=0{_fae [_egg ]|=0x3000;};if _egg &0x80!=0{_fae [_egg ]|=0xc000;};};return _fae ;};func _fccag ()[]int {_fdad :=make ([]int ,256);_fdad [0]=0;_fdad [1]=7;var _dafg int ;for _dafg =2;_dafg < 4;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -2]+6;};for _dafg =4;_dafg < 8;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -4]+5;};for _dafg =8;_dafg < 16;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -8]+4;};for _dafg =16;_dafg < 32;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -16]+3;};for _dafg =32;_dafg < 64;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -32]+2;};for _dafg =64;_dafg < 128;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -64]+1;};for _dafg =128;_dafg < 256;_dafg ++{_fdad [_dafg ]=_fdad [_dafg -128];};return _fdad ;};type CombinationOperator int ;func (_cbd *Bitmap )CountPixels ()int {return _cbd .countPixels ()};func (_edcc *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_edcc .Width ,Height :_edcc .Height ,RowStride :_edcc .RowStride ,Color :_edcc .Color ,Text :_edcc .Text ,BitmapNumber :_edcc .BitmapNumber ,Special :_edcc .Special ,Data :make ([]byte ,len (_edcc .Data ))};};func ClipBoxToRectangle (box *_a .Rectangle ,wi ,hi int )(_eabg *_a .Rectangle ,_bfdf error ){const _fbbc ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_fg .Error (_fbbc ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_fg .Error (_fbbc ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_fffg :=*box ;_eabg =&_fffg ;if _eabg .Min .X < 0{_eabg .Max .X +=_eabg .Min .X ;_eabg .Min .X =0;};if _eabg .Min .Y < 0{_eabg .Max .Y +=_eabg .Min .Y ;_eabg .Min .Y =0;};if _eabg .Max .X > wi {_eabg .Max .X =wi ;};if _eabg .Max .Y > hi {_eabg .Max .Y =hi ;};return _eabg ,nil ;};func _fbb (_dc ,_ge *Bitmap )(_ca error ){const _fdf ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_af :=_ge .RowStride ;_be :=_dc .RowStride ;var _dg ,_fa ,_fgf ,_fgfe ,_fef int ;for _fgf =0;_fgf < _ge .Height ;_fgf ++{_dg =_fgf *_af ;_fa =8*_fgf *_be ;for _fgfe =0;_fgfe < _af ;_fgfe ++{if _ca =_dc .setEightBytes (_fa +_fgfe *8,_gbgdc [_ge .Data [_dg +_fgfe ]]);_ca !=nil {return _fg .Wrap (_ca ,_fdf ,"");};};for _fef =1;_fef < 8;_fef ++{for _fgfe =0;_fgfe < _be ;_fgfe ++{if _ca =_dc .SetByte (_fa +_fef *_be +_fgfe ,_dc .Data [_fa +_fgfe ]);_ca !=nil {return _fg .Wrap (_ca ,_fdf ,"");};};};};return nil ;};func TstCSymbol (t *_c .T )*Bitmap {t .Helper ();_eeea :=New (6,6);_g .NoError (t ,_eeea .SetPixel (1,0,1));_g .NoError (t ,_eeea .SetPixel (2,0,1));_g .NoError (t ,_eeea .SetPixel (3,0,1));_g .NoError (t ,_eeea .SetPixel (4,0,1));_g .NoError (t ,_eeea .SetPixel (0,1,1));_g .NoError (t ,_eeea .SetPixel (5,1,1));_g .NoError (t ,_eeea .SetPixel (0,2,1));_g .NoError (t ,_eeea .SetPixel (0,3,1));_g .NoError (t ,_eeea .SetPixel (0,4,1));_g .NoError (t ,_eeea .SetPixel (5,4,1));_g .NoError (t ,_eeea .SetPixel (1,5,1));_g .NoError (t ,_eeea .SetPixel (2,5,1));_g .NoError (t ,_eeea .SetPixel (3,5,1));_g .NoError (t ,_eeea .SetPixel (4,5,1));return _eeea ;};func _ageg (_gcf *Bitmap ,_ffb ...int )(_egc *Bitmap ,_cbg error ){const _bbe ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _gcf ==nil {return nil ,_fg .Error (_bbe ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ffb )==0||len (_ffb )> 4{return nil ,_fg .Error (_bbe ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _ffb [0]<=0{_gf .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_egc ,_cbg =_cfdcc (nil ,_gcf );if _cbg !=nil {return nil ,_fg .Wrap (_cbg ,_bbe ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _egc ,nil ;};_fbe :=_eae ();_egc =_gcf ;for _eaf ,_faec :=range _ffb {if _faec <=0{break ;};_egc ,_cbg =_bbc (_egc ,_faec ,_fbe );if _cbg !=nil {return nil ,_fg .Wrapf (_cbg ,_bbe ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_eaf );};};return _egc ,nil ;};func _agaf (_fbeb *Bitmap ,_daaa ,_cedc ,_aaaa ,_abea int ,_efcb RasterOperator ,_eddf *Bitmap ,_eafad ,_ddccc int )error {const _ccadb ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _fbeb ==nil {return _fg .Error (_ccadb ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _efcb ==PixDst {return nil ;};switch _efcb {case PixClr ,PixSet ,PixNotDst :_cffa (_fbeb ,_daaa ,_cedc ,_aaaa ,_abea ,_efcb );return nil ;};if _eddf ==nil {_gf .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _fg .Error (_ccadb ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eece :=_abfdd (_fbeb ,_daaa ,_cedc ,_aaaa ,_abea ,_efcb ,_eddf ,_eafad ,_ddccc );_eece !=nil {return _fg .Wrap (_eece ,_ccadb ,"");};return nil ;};func (_gcb *Bitmap )Zero ()bool {_fed :=_gcb .Width /8;_cdebe :=_gcb .Width &7;var _eafa byte ;if _cdebe !=0{_eafa =byte (0xff<<uint (8-_cdebe ));};var _add ,_cafe ,_egb int ;for _cafe =0;_cafe < _gcb .Height ;_cafe ++{_add =_gcb .RowStride *_cafe ;for _egb =0;_egb < _fed ;_egb ,_add =_egb +1,_add +1{if _gcb .Data [_add ]!=0{return false ;};};if _cdebe > 0{if _gcb .Data [_add ]&_eafa !=0{return false ;};};};return true ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _dceed ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_fg .Error (_dceed ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_fg .Error (_dceed ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_fg .Error (_dceed ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_fg .Error (_dceed ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_fg .Error (_dceed ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_dcea ,_gcea :=bm1 .Width ,bm1 .Height ;_fadf ,_cea :=bm2 .Width ,bm2 .Height ;if _e .Abs (_dcea -_fadf )> maxDiffW {return false ,nil ;};if _e .Abs (_gcea -_cea )> maxDiffH {return false ,nil ;};_gcbf :=int (delX +_e .Sign (delX )*0.5);_gbdf :=int (delY +_e .Sign (delY )*0.5);_ccb :=int (_fe .Ceil (_fe .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_dccc :=bm2 .RowStride ;_fggda :=_cbdf (_gbdf ,0);_fdae :=_deca (_cea +_gbdf ,_gcea );_aaee :=bm1 .RowStride *_fggda ;_aage :=bm2 .RowStride *(_fggda -_gbdf );var _gedb int ;if _fdae <=_gcea {_gedb =downcount [_fdae -1];};_ggdb :=_cbdf (_gcbf ,0);_efae :=_deca (_fadf +_gcbf ,_dcea );var _ddea ,_edbee int ;if _gcbf >=8{_ddea =_gcbf >>3;_aaee +=_ddea ;_ggdb -=_ddea <<3;_efae -=_ddea <<3;_gcbf &=7;}else if _gcbf <=-8{_edbee =-((_gcbf +7)>>3);_aage +=_edbee ;_dccc -=_edbee ;_gcbf +=_edbee <<3;};var (_caea ,_gbfgg ,_dgdb int ;_cbae ,_bbea ,_aedc byte ;);if _ggdb >=_efae ||_fggda >=_fdae {return false ,nil ;};_cccf :=(_efae +7)>>3;switch {case _gcbf ==0:for _gbfgg =_fggda ;_gbfgg < _fdae ;_gbfgg ,_aaee ,_aage =_gbfgg +1,_aaee +bm1 .RowStride ,_aage +bm2 .RowStride {for _dgdb =0;_dgdb < _cccf ;_dgdb ++{_cbae =bm1 .Data [_aaee +_dgdb ]&bm2 .Data [_aage +_dgdb ];_caea +=tab [_cbae ];};if _caea >=_ccb {return true ,nil ;};if _bcebf :=_caea +downcount [_gbfgg ]-_gedb ;_bcebf < _ccb {return false ,nil ;};};case _gcbf > 0&&_dccc < _cccf :for _gbfgg =_fggda ;_gbfgg < _fdae ;_gbfgg ,_aaee ,_aage =_gbfgg +1,_aaee +bm1 .RowStride ,_aage +bm2 .RowStride {_bbea =bm1 .Data [_aaee ];_aedc =bm2 .Data [_aage ]>>uint (_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];for _dgdb =1;_dgdb < _dccc ;_dgdb ++{_bbea =bm1 .Data [_aaee +_dgdb ];_aedc =bm2 .Data [_aage +_dgdb ]>>uint (_gcbf )|bm2 .Data [_aage +_dgdb -1]<<uint (8-_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];};_bbea =bm1 .Data [_aaee +_dgdb ];_aedc =bm2 .Data [_aage +_dgdb -1]<<uint (8-_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];if _caea >=_ccb {return true ,nil ;}else if _caea +downcount [_gbfgg ]-_gedb < _ccb {return false ,nil ;};};case _gcbf > 0&&_dccc >=_cccf :for _gbfgg =_fggda ;_gbfgg < _fdae ;_gbfgg ,_aaee ,_aage =_gbfgg +1,_aaee +bm1 .RowStride ,_aage +bm2 .RowStride {_bbea =bm1 .Data [_aaee ];_aedc =bm2 .Data [_aage ]>>uint (_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];for _dgdb =1;_dgdb < _cccf ;_dgdb ++{_bbea =bm1 .Data [_aaee +_dgdb ];_aedc =bm2 .Data [_aage +_dgdb ]>>uint (_gcbf );_aedc |=bm2 .Data [_aage +_dgdb -1]<<uint (8-_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];};if _caea >=_ccb {return true ,nil ;}else if _caea +downcount [_gbfgg ]-_gedb < _ccb {return false ,nil ;};};case _cccf < _dccc :for _gbfgg =_fggda ;_gbfgg < _fdae ;_gbfgg ,_aaee ,_aage =_gbfgg +1,_aaee +bm1 .RowStride ,_aage +bm2 .RowStride {for _dgdb =0;_dgdb < _cccf ;_dgdb ++{_bbea =bm1 .Data [_aaee +_dgdb ];_aedc =bm2 .Data [_aage +_dgdb ]<<uint (-_gcbf );_aedc |=bm2 .Data [_aage +_dgdb +1]>>uint (8+_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];};if _caea >=_ccb {return true ,nil ;}else if _fbff :=_caea +downcount [_gbfgg ]-_gedb ;_fbff < _ccb {return false ,nil ;};};case _dccc >=_cccf :for _gbfgg =_fggda ;_gbfgg < _fdae ;_gbfgg ,_aaee ,_aage =_gbfgg +1,_aaee +bm1 .RowStride ,_aage +bm2 .RowStride {for _dgdb =0;_dgdb < _cccf ;_dgdb ++{_bbea =bm1 .Data [_aaee +_dgdb ];_aedc =bm2 .Data [_aage +_dgdb ]<<uint (-_gcbf );_aedc |=bm2 .Data [_aage +_dgdb +1]>>uint (8+_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];};_bbea =bm1 .Data [_aaee +_dgdb ];_aedc =bm2 .Data [_aage +_dgdb ]<<uint (-_gcbf );_cbae =_bbea &_aedc ;_caea +=tab [_cbae ];if _caea >=_ccb {return true ,nil ;}else if _caea +downcount [_gbfgg ]-_gedb < _ccb {return false ,nil ;};};};_dcfd :=float32 (_caea )*float32 (_caea )/(float32 (area1 )*float32 (area2 ));if _dcfd >=scoreThreshold {_gf .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_caea ,_ccb ,_dcfd ,scoreThreshold );};return false ,nil ;};func TstFrameBitmap ()*Bitmap {return _gaac .Copy ()};func _agbf (_fcfc *Bitmap ,_aeed *Bitmap ,_ddbgg *Selection )(*Bitmap ,error ){var (_dceg *Bitmap ;_gbgg error ;);_fcfc ,_gbgg =_fdbc (_fcfc ,_aeed ,_ddbgg ,&_dceg );if _gbgg !=nil {return nil ,_gbgg ;};if _gbgg =_fcfc .clearAll ();_gbgg !=nil {return nil ,_gbgg ;};var _bgaf SelectionValue ;for _bcda :=0;_bcda < _ddbgg .Height ;_bcda ++{for _daec :=0;_daec < _ddbgg .Width ;_daec ++{_bgaf =_ddbgg .Data [_bcda ][_daec ];if _bgaf ==SelHit {if _gbgg =_fcfc .RasterOperation (_daec -_ddbgg .Cx ,_bcda -_ddbgg .Cy ,_aeed .Width ,_aeed .Height ,PixSrcOrDst ,_dceg ,0,0);_gbgg !=nil {return nil ,_gbgg ;};};};};return _fcfc ,nil ;};func _bcc (_dcae *Bitmap ,_bbafa int )(*Bitmap ,error ){const _ccaa ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _dcae ==nil {return nil ,_fg .Error (_ccaa ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bbafa <=0{return nil ,_fg .Error (_ccaa ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _bbafa ==1{_bgga ,_ffaac :=_cfdcc (nil ,_dcae );if _ffaac !=nil {return nil ,_fg .Wrap (_ffaac ,_ccaa ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _bgga ,nil ;};_gcecf ,_daad :=_bacb (_dcae ,_bbafa ,_bbafa );if _daad !=nil {return nil ,_fg .Wrap (_daad ,_ccaa ,"");};return _gcecf ,nil ;};func _dfb ()(_dgc [256]uint64 ){for _fee :=0;_fee < 256;_fee ++{if _fee &0x01!=0{_dgc [_fee ]|=0xff;};if _fee &0x02!=0{_dgc [_fee ]|=0xff00;};if _fee &0x04!=0{_dgc [_fee ]|=0xff0000;};if _fee &0x08!=0{_dgc [_fee ]|=0xff000000;};if _fee &0x10!=0{_dgc [_fee ]|=0xff00000000;};if _fee &0x20!=0{_dgc [_fee ]|=0xff0000000000;};if _fee &0x40!=0{_dgc [_fee ]|=0xff000000000000;};if _fee &0x80!=0{_dgc [_fee ]|=0xff00000000000000;};};return _dgc ;};func (_fgcg *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_fbbe *Bitmaps ,_gfab *Boxes ,_acde error ){const _eaac ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _fgcg ==nil {return nil ,nil ,_fg .Error (_eaac ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_fg .Error (_eaac ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _fgcg .Zero (){_gfab =&Boxes {};_fbbe =&Bitmaps {};return _fbbe ,_gfab ,nil ;};switch components {case ComponentConn :_fbbe =&Bitmaps {};if _gfab ,_acde =_fgcg .ConnComponents (_fbbe ,8);_acde !=nil {return nil ,nil ,_fg .Wrap (_acde ,_eaac ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_bgbg ,_aada :=MorphSequence (_fgcg ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _aada !=nil {return nil ,nil ,_fg .Wrap (_aada ,_eaac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _gf .Log .IsLogLevel (_gf .LogLevelTrace ){_gf .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_bgbg .String ());};_cgbe :=&Bitmaps {};_gfab ,_aada =_bgbg .ConnComponents (_cgbe ,8);if _aada !=nil {return nil ,nil ,_fg .Wrap (_aada ,_eaac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _gf .Log .IsLogLevel (_gf .LogLevelTrace ){_gf .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_cgbe .String ());};if _fbbe ,_aada =_cgbe .ClipToBitmap (_fgcg );_aada !=nil {return nil ,nil ,_fg .Wrap (_aada ,_eaac ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_efec :=1;var _faacb *Bitmap ;switch {case _fgcg .XResolution <=200:_faacb =_fgcg ;case _fgcg .XResolution <=400:_efec =2;_faacb ,_acde =_ageg (_fgcg ,1,0,0,0);if _acde !=nil {return nil ,nil ,_fg .Wrap (_acde ,_eaac ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_efec =4;_faacb ,_acde =_ageg (_fgcg ,1,1,0,0);if _acde !=nil {return nil ,nil ,_fg .Wrap (_acde ,_eaac ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_geef ,_ ,_ebcc :=_ggf (_faacb );if _ebcc !=nil {return nil ,nil ,_fg .Wrap (_ebcc ,_eaac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_faee ,_ebcc :=_bcc (_geef ,_efec );if _ebcc !=nil {return nil ,nil ,_fg .Wrap (_ebcc ,_eaac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_afeb :=&Bitmaps {};if _gfab ,_ebcc =_faee .ConnComponents (_afeb ,4);_ebcc !=nil {return nil ,nil ,_fg .Wrap (_ebcc ,_eaac ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _fbbe ,_ebcc =_afeb .ClipToBitmap (_fgcg );_ebcc !=nil {return nil ,nil ,_fg .Wrap (_ebcc ,_eaac ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_fbbe ,_acde =_fbbe .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _acde !=nil {return nil ,nil ,_fg .Wrap (_acde ,_eaac ,"");};_gfab ,_acde =_gfab .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _acde !=nil {return nil ,nil ,_fg .Wrap (_acde ,_eaac ,"");};return _fbbe ,_gfab ,nil ;};func _cfg (_ecc int )int {if _ecc < 0{return -_ecc ;};return _ecc ;};func _fb (_ed ,_bf *Bitmap )(_ec error ){const _cg ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_da :=_bf .RowStride ;_ae :=_ed .RowStride ;var (_gd byte ;_cb uint16 ;_fd ,_edg ,_aa ,_eac ,_agg int ;);for _aa =0;_aa < _bf .Height ;_aa ++{_fd =_aa *_da ;_edg =2*_aa *_ae ;for _eac =0;_eac < _da ;_eac ++{_gd =_bf .Data [_fd +_eac ];_cb =_ffff [_gd ];_agg =_edg +_eac *2;if _ed .RowStride !=_bf .RowStride *2&&(_eac +1)*2> _ed .RowStride {_ec =_ed .SetByte (_agg ,byte (_cb >>8));}else {_ec =_ed .setTwoBytes (_agg ,_cb );};if _ec !=nil {return _fg .Wrap (_ec ,_cg ,"");};};for _eac =0;_eac < _ae ;_eac ++{_agg =_edg +_ae +_eac ;_gd =_ed .Data [_edg +_eac ];if _ec =_ed .SetByte (_agg ,_gd );_ec !=nil {return _fg .Wrapf (_ec ,_cg ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_edg +_eac ,_edg +_ae +_eac );};};};return nil ;};func _fbagc ()[]int {_egddg :=make ([]int ,256);for _efc :=0;_efc <=0xff;_efc ++{_fdac :=byte (_efc );_egddg [_fdac ]=int (_fdac &0x1)+(int (_fdac >>1)&0x1)+(int (_fdac >>2)&0x1)+(int (_fdac >>3)&0x1)+(int (_fdac >>4)&0x1)+(int (_fdac >>5)&0x1)+(int (_fdac >>6)&0x1)+(int (_fdac >>7)&0x1);};return _egddg ;};func _ccfcf (_baed *Bitmap ,_abge ...MorphProcess )(_cfdbg *Bitmap ,_bgfe error ){const _fccc ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _baed ==nil {return nil ,_fg .Error (_fccc ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_abge )==0{return nil ,_fg .Error (_fccc ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bgfe =_feea (_abge ...);_bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};var _fcfd ,_ccbga ,_ddecc int ;_cfdbg =_baed .Copy ();for _ ,_cafc :=range _abge {switch _cafc .Operation {case MopDilation :_fcfd ,_ccbga =_cafc .getWidthHeight ();_cfdbg ,_bgfe =DilateBrick (nil ,_cfdbg ,_fcfd ,_ccbga );if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};case MopErosion :_fcfd ,_ccbga =_cafc .getWidthHeight ();_cfdbg ,_bgfe =_dacfc (nil ,_cfdbg ,_fcfd ,_ccbga );if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};case MopOpening :_fcfd ,_ccbga =_cafc .getWidthHeight ();_cfdbg ,_bgfe =_bgaa (nil ,_cfdbg ,_fcfd ,_ccbga );if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};case MopClosing :_fcfd ,_ccbga =_cafc .getWidthHeight ();_cfdbg ,_bgfe =_dbcb (nil ,_cfdbg ,_fcfd ,_ccbga );if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};case MopRankBinaryReduction :_cfdbg ,_bgfe =_ageg (_cfdbg ,_cafc .Arguments ...);if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};case MopReplicativeBinaryExpansion :_cfdbg ,_bgfe =_bcc (_cfdbg ,_cafc .Arguments [0]);if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};case MopAddBorder :_ddecc =_cafc .Arguments [0];_cfdbg ,_bgfe =_cfdbg .AddBorder (_ddecc ,0);if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"");};default:return nil ,_fg .Error (_fccc ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _ddecc > 0{_cfdbg ,_bgfe =_cfdbg .RemoveBorder (_ddecc );if _bgfe !=nil {return nil ,_fg .Wrap (_bgfe ,_fccc ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _cfdbg ,nil ;};var _ _d .Interface =&ClassedPoints {};type Color int ;func _egga (_bcdce ,_cggad *Bitmap ,_bggg ,_afef ,_accc ,_bbb ,_fde ,_aadd ,_cagf ,_badb int ,_agab CombinationOperator ,_dbeb int )error {var _gca int ;_decc :=func (){_gca ++;_accc +=_cggad .RowStride ;_bbb +=_bcdce .RowStride ;_fde +=_bcdce .RowStride };for _gca =_bggg ;_gca < _afef ;_decc (){var _caccf uint16 ;_fdec :=_accc ;for _eeac :=_bbb ;_eeac <=_fde ;_eeac ++{_dbba ,_bdgb :=_cggad .GetByte (_fdec );if _bdgb !=nil {return _bdgb ;};_aba ,_bdgb :=_bcdce .GetByte (_eeac );if _bdgb !=nil {return _bdgb ;};_caccf =(_caccf |(uint16 (_aba )&0xff))<<uint (_badb );_aba =byte (_caccf >>8);if _bdgb =_cggad .SetByte (_fdec ,_aeef (_dbba ,_aba ,_agab ));_bdgb !=nil {return _bdgb ;};_fdec ++;_caccf <<=uint (_cagf );if _eeac ==_fde {_aba =byte (_caccf >>(8-uint8 (_badb )));if _dbeb !=0{_aba =_afac (uint (8+_aadd ),_aba );};_dbba ,_bdgb =_cggad .GetByte (_fdec );if _bdgb !=nil {return _bdgb ;};if _bdgb =_cggad .SetByte (_fdec ,_aeef (_dbba ,_aba ,_agab ));_bdgb !=nil {return _bdgb ;};};};};return nil ;};func _bbc (_dcb *Bitmap ,_bd int ,_edb []byte )(_cae *Bitmap ,_dgf error ){const _gaf ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _dcb ==nil {return nil ,_fg .Error (_gaf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bd < 1||_bd > 4{return nil ,_fg .Error (_gaf ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _dcb .Height <=1{return nil ,_fg .Errorf (_gaf ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_dcb .Height );};_cae =New (_dcb .Width /2,_dcb .Height /2);if _edb ==nil {_edb =_eae ();};_daf :=_deca (_dcb .RowStride ,2*_cae .RowStride );switch _bd {case 1:_dgf =_bdd (_dcb ,_cae ,_bd ,_edb ,_daf );case 2:_dgf =_bff (_dcb ,_cae ,_bd ,_edb ,_daf );case 3:_dgf =_caga (_dcb ,_cae ,_bd ,_edb ,_daf );case 4:_dgf =_adg (_dcb ,_cae ,_bd ,_edb ,_daf );};if _dgf !=nil {return nil ,_dgf ;};return _cae ,nil ;};func _eega (_bbba ,_abgad *Bitmap ,_cdfb *Selection )(*Bitmap ,error ){const _fbag ="\u0065\u0072\u006fd\u0065";var (_gfb error ;_fgfc *Bitmap ;);_bbba ,_gfb =_fdbc (_bbba ,_abgad ,_cdfb ,&_fgfc );if _gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"");};if _gfb =_bbba .setAll ();_gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"");};var _aecf SelectionValue ;for _aeeff :=0;_aeeff < _cdfb .Height ;_aeeff ++{for _fbdf :=0;_fbdf < _cdfb .Width ;_fbdf ++{_aecf =_cdfb .Data [_aeeff ][_fbdf ];if _aecf ==SelHit {_gfb =_agaf (_bbba ,_cdfb .Cx -_fbdf ,_cdfb .Cy -_aeeff ,_abgad .Width ,_abgad .Height ,PixSrcAndDst ,_fgfc ,0,0);if _gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"");};};};};if MorphBC ==SymmetricMorphBC {return _bbba ,nil ;};_fcfg ,_fcag ,_gefda ,_agdf :=_cdfb .findMaxTranslations ();if _fcfg > 0{if _gfb =_bbba .RasterOperation (0,0,_fcfg ,_abgad .Height ,PixClr ,nil ,0,0);_gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _gefda > 0{if _gfb =_bbba .RasterOperation (_abgad .Width -_gefda ,0,_gefda ,_abgad .Height ,PixClr ,nil ,0,0);_gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _fcag > 0{if _gfb =_bbba .RasterOperation (0,0,_abgad .Width ,_fcag ,PixClr ,nil ,0,0);_gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _agdf > 0{if _gfb =_bbba .RasterOperation (0,_abgad .Height -_agdf ,_abgad .Width ,_agdf ,PixClr ,nil ,0,0);_gfb !=nil {return nil ,_fg .Wrap (_gfb ,_fbag ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _bbba ,nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _ffe ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_cgb :=_dbgc (width ,height );_cgb .Data =data ;if len (data )< height *_cgb .RowStride {return nil ,_fg .Errorf (_ffe ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_cgb .RowStride );};return _cgb ,nil ;};func _agac (_abgcf ,_adbe ,_fegf *Bitmap ,_cgcg int )(*Bitmap ,error ){const _faagc ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _adbe ==nil {return nil ,_fg .Error (_faagc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fegf ==nil {return nil ,_fg .Error (_faagc ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cgcg !=4&&_cgcg !=8{return nil ,_fg .Error (_faagc ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _gdfbe error ;_abgcf ,_gdfbe =_cfdcc (_abgcf ,_adbe );if _gdfbe !=nil {return nil ,_fg .Wrap (_gdfbe ,_faagc ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_cddgga :=_adbe .createTemplate ();_fegf .setPadBits (0);for _efee :=0;_efee < _bfdb ;_efee ++{_cddgga ,_gdfbe =_cfdcc (_cddgga ,_abgcf );if _gdfbe !=nil {return nil ,_fg .Wrapf (_gdfbe ,_faagc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_efee );};if _gdfbe =_agdff (_abgcf ,_fegf ,_cgcg );_gdfbe !=nil {return nil ,_fg .Wrapf (_gdfbe ,_faagc ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_efee );};if _cddgga .Equals (_abgcf ){break ;};};return _abgcf ,nil ;};func (_gdee Points )GetGeometry (i int )(_gcbd ,_bgfeb float32 ,_fced error ){if i > len (_gdee )-1{return 0,0,_fg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_dfgd :=_gdee [i ];return _dfgd .X ,_dfgd .Y ,nil ;};func (_caec *ClassedPoints )YAtIndex (i int )float32 {return (*_caec .Points )[_caec .IntSlice [i ]].Y };func (_edcac *ClassedPoints )xSortFunction ()func (_fddc int ,_eafc int )bool {return func (_aabg ,_ffca int )bool {return _edcac .XAtIndex (_aabg )< _edcac .XAtIndex (_ffca )};};func (_bage MorphProcess )verify (_ffaa int ,_bfcb ,_aggg *int )error {const _cgbab ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _bage .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_bage .Arguments )!=2{return _fg .Error (_cgbab ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_bdcf ,_gdaae :=_bage .getWidthHeight ();if _bdcf <=0||_gdaae <=0{return _fg .Error (_cgbab ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_faca :=len (_bage .Arguments );*_bfcb +=_faca ;if _faca < 1||_faca > 4{return _fg .Error (_cgbab ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _ddceb :=0;_ddceb < _faca ;_ddceb ++{if _bage .Arguments [_ddceb ]< 1||_bage .Arguments [_ddceb ]> 4{return _fg .Error (_cgbab ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_bage .Arguments )==0{return _fg .Error (_cgbab ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdbd :=_bage .Arguments [0];if _gdbd !=2&&_gdbd !=4&&_gdbd !=8{return _fg .Error (_cgbab ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_bfcb -=_gdfa [_gdbd /4];case MopAddBorder :if len (_bage .Arguments )==0{return _fg .Error (_cgbab ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgae :=_bage .Arguments [0];if _ffaa > 0{return _fg .Error (_cgbab ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _cgae < 1{return _fg .Error (_cgbab ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_aggg =_cgae ;};return nil ;};func (_cdeg *Bitmaps )selectByIndexes (_dcdgc []int )(*Bitmaps ,error ){_aade :=&Bitmaps {};for _ ,_bedfc :=range _dcdgc {_acff ,_egab :=_cdeg .GetBitmap (_bedfc );if _egab !=nil {return nil ,_fg .Wrap (_egab ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_aade .AddBitmap (_acff );};return _aade ,nil ;};func TstFrameBitmapData ()[]byte {return _gaac .Data };func (_ecdd *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _gaef ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _ecdd ==nil {return nil ,_fg .Error (_gaef ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_fg .Error (_gaef ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_afdc :=len (_ecdd .Values );_fagcg :=&Bitmaps {Values :make ([]*Bitmap ,_afdc ),Boxes :make ([]*_a .Rectangle ,_afdc )};var (_bcba ,_bbad *Bitmap ;_bggd *_a .Rectangle ;_dbffb error ;);for _caad :=0;_caad < _afdc ;_caad ++{if _bcba ,_dbffb =_ecdd .GetBitmap (_caad );_dbffb !=nil {return nil ,_fg .Wrap (_dbffb ,_gaef ,"");};if _bggd ,_dbffb =_ecdd .GetBox (_caad );_dbffb !=nil {return nil ,_fg .Wrap (_dbffb ,_gaef ,"");};if _bbad ,_dbffb =s .clipRectangle (_bggd ,nil );_dbffb !=nil {return nil ,_fg .Wrap (_dbffb ,_gaef ,"");};if _bbad ,_dbffb =_bbad .And (_bcba );_dbffb !=nil {return nil ,_fg .Wrap (_dbffb ,_gaef ,"");};_fagcg .Values [_caad ]=_bbad ;_fagcg .Boxes [_caad ]=_bggd ;};return _fagcg ,nil ;};func (_cgbf *byWidth )Less (i ,j int )bool {return _cgbf .Values [i ].Width < _cgbf .Values [j ].Width };func (_eefg *ClassedPoints )SortByX (){_eefg ._gcee =_eefg .xSortFunction ();_d .Sort (_eefg )};type BoundaryCondition int ;type LocationFilter int ;func (_eef *Bitmap )inverseData (){if _ecdcd :=_eef .RasterOperation (0,0,_eef .Width ,_eef .Height ,PixNotDst ,nil ,0,0);_ecdcd !=nil {_gf .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ecdcd );};if _eef .Color ==Chocolate {_eef .Color =Vanilla ;}else {_eef .Color =Chocolate ;};};func _eaa (_dbc *Bitmap ,_caf *Bitmap ,_bea int )(_gbg error ){const _dce ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _bea {case 2:_gbg =_fb (_dbc ,_caf );case 4:_gbg =_eca (_dbc ,_caf );case 8:_gbg =_fbb (_dbc ,_caf );default:return _fg .Error (_dce ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _gbg !=nil {_gbg =_fg .Wrap (_gbg ,_dce ,"");};return _gbg ;};func _adg (_afae ,_bdgc *Bitmap ,_ffg int ,_daeg []byte ,_cfd int )(_aea error ){const _ege ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_cfb ,_ecb ,_dfc ,_beaf ,_fcaf ,_gbc ,_bcd ,_debc int ;_bec ,_efe uint32 ;_eea ,_bcdc byte ;_feb uint16 ;);_dcd :=make ([]byte ,4);_aac :=make ([]byte ,4);for _dfc =0;_dfc < _afae .Height -1;_dfc ,_beaf =_dfc +2,_beaf +1{_cfb =_dfc *_afae .RowStride ;_ecb =_beaf *_bdgc .RowStride ;for _fcaf ,_gbc =0,0;_fcaf < _cfd ;_fcaf ,_gbc =_fcaf +4,_gbc +1{for _bcd =0;_bcd < 4;_bcd ++{_debc =_cfb +_fcaf +_bcd ;if _debc <=len (_afae .Data )-1&&_debc < _cfb +_afae .RowStride {_dcd [_bcd ]=_afae .Data [_debc ];}else {_dcd [_bcd ]=0x00;};_debc =_cfb +_afae .RowStride +_fcaf +_bcd ;if _debc <=len (_afae .Data )-1&&_debc < _cfb +(2*_afae .RowStride ){_aac [_bcd ]=_afae .Data [_debc ];}else {_aac [_bcd ]=0x00;};};_bec =_ag .BigEndian .Uint32 (_dcd );_efe =_ag .BigEndian .Uint32 (_aac );_efe &=_bec ;_efe &=_efe <<1;_efe &=0xaaaaaaaa;_bec =_efe |(_efe <<7);_eea =byte (_bec >>24);_bcdc =byte ((_bec >>8)&0xff);_debc =_ecb +_gbc ;if _debc +1==len (_bdgc .Data )-1||_debc +1>=_ecb +_bdgc .RowStride {_bdgc .Data [_debc ]=_daeg [_eea ];if _aea =_bdgc .SetByte (_debc ,_daeg [_eea ]);_aea !=nil {return _fg .Wrapf (_aea ,_ege ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_debc );};}else {_feb =(uint16 (_daeg [_eea ])<<8)|uint16 (_daeg [_bcdc ]);if _aea =_bdgc .setTwoBytes (_debc ,_feb );_aea !=nil {return _fg .Wrapf (_aea ,_ege ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_debc );};_gbc ++;};};};return nil ;};func (_ggabf *Bitmap )Copy ()*Bitmap {_cac :=make ([]byte ,len (_ggabf .Data ));copy (_cac ,_ggabf .Data );return &Bitmap {Width :_ggabf .Width ,Height :_ggabf .Height ,RowStride :_ggabf .RowStride ,Data :_cac ,Color :_ggabf .Color ,Text :_ggabf .Text ,BitmapNumber :_ggabf .BitmapNumber ,Special :_ggabf .Special };};func (_ggcd Points )GetIntY (i int )(int ,error ){if i >=len (_ggcd ){return 0,_fg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_ggcd [i ].Y ),nil ;};func (_baa *Bitmap )nextOnPixel (_aae ,_cfdb int )(_fdce _a .Point ,_gdce bool ,_cgdg error ){const _afcc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_fdce ,_gdce ,_cgdg =_baa .nextOnPixelLow (_baa .Width ,_baa .Height ,_baa .RowStride ,_aae ,_cfdb );if _cgdg !=nil {return _fdce ,false ,_fg .Wrap (_cgdg ,_afcc ,"");};return _fdce ,_gdce ,nil ;};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_gaff *Bitmap )centroid (_abgc ,_aafe []int )(Point ,error ){_eaae :=Point {};_gaff .setPadBits (0);if len (_abgc )==0{_abgc =_fccag ();};if len (_aafe )==0{_aafe =_fbagc ();};var _ceb ,_gcae ,_fgbf ,_ggbf ,_faeef ,_deaa int ;var _ddfg byte ;for _faeef =0;_faeef < _gaff .Height ;_faeef ++{_abc :=_gaff .RowStride *_faeef ;_ggbf =0;for _deaa =0;_deaa < _gaff .RowStride ;_deaa ++{_ddfg =_gaff .Data [_abc +_deaa ];if _ddfg !=0{_ggbf +=_aafe [_ddfg ];_ceb +=_abgc [_ddfg ]+_deaa *8*_aafe [_ddfg ];};};_fgbf +=_ggbf ;_gcae +=_ggbf *_faeef ;};if _fgbf !=0{_eaae .X =float32 (_ceb )/float32 (_fgbf );_eaae .Y =float32 (_gcae )/float32 (_fgbf );};return _eaae ,nil ;};func _cdebb (_eaag *Bitmap ,_abcf ,_gggc ,_fdbd ,_cacaa int ,_agbg RasterOperator ,_cgbba *Bitmap ,_gffbd ,_gddd int )error {var (_gggd bool ;_bgfac bool ;_ecgc int ;_ace int ;_egbe int ;_cfbf bool ;_fecce byte ;_agbc int ;_faagb int ;_gdaf int ;_bbfcg ,_abcfd int ;);_fbabd :=8-(_abcf &7);_gbbd :=_eeede [_fbabd ];_bcb :=_eaag .RowStride *_gggc +(_abcf >>3);_gddg :=_cgbba .RowStride *_gddd +(_gffbd >>3);if _fdbd < _fbabd {_gggd =true ;_gbbd &=_bgd [8-_fbabd +_fdbd ];};if !_gggd {_ecgc =(_fdbd -_fbabd )>>3;if _ecgc > 0{_bgfac =true ;_ace =_bcb +1;_egbe =_gddg +1;};};_agbc =(_abcf +_fdbd )&7;if !(_gggd ||_agbc ==0){_cfbf =true ;_fecce =_bgd [_agbc ];_faagb =_bcb +1+_ecgc ;_gdaf =_gddg +1+_ecgc ;};switch _agbg {case PixSrc :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],_cgbba .Data [_gddg ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=_cgbba .Data [_egbe +_abcfd ];};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],_cgbba .Data [_gdaf ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixNotSrc :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],^_cgbba .Data [_gddg ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=^_cgbba .Data [_egbe +_abcfd ];};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],^_cgbba .Data [_gdaf ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixSrcOrDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],_cgbba .Data [_gddg ]|_eaag .Data [_bcb ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]|=_cgbba .Data [_egbe +_abcfd ];};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],_cgbba .Data [_gdaf ]|_eaag .Data [_faagb ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixSrcAndDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],_cgbba .Data [_gddg ]&_eaag .Data [_bcb ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]&=_cgbba .Data [_egbe +_abcfd ];};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],_cgbba .Data [_gdaf ]&_eaag .Data [_faagb ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixSrcXorDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],_cgbba .Data [_gddg ]^_eaag .Data [_bcb ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]^=_cgbba .Data [_egbe +_abcfd ];};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],_cgbba .Data [_gdaf ]^_eaag .Data [_faagb ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixNotSrcOrDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],^(_cgbba .Data [_gddg ])|_eaag .Data [_bcb ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]|=^(_cgbba .Data [_egbe +_abcfd ]);};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],^(_cgbba .Data [_gdaf ])|_eaag .Data [_faagb ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixNotSrcAndDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],^(_cgbba .Data [_gddg ])&_eaag .Data [_bcb ],_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]&=^_cgbba .Data [_egbe +_abcfd ];};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],^(_cgbba .Data [_gdaf ])&_eaag .Data [_faagb ],_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixSrcOrNotDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],_cgbba .Data [_gddg ]|^(_eaag .Data [_bcb ]),_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=_cgbba .Data [_egbe +_abcfd ]|^(_eaag .Data [_ace +_abcfd ]);};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],_cgbba .Data [_gdaf ]|^(_eaag .Data [_faagb ]),_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixSrcAndNotDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],_cgbba .Data [_gddg ]&^(_eaag .Data [_bcb ]),_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=_cgbba .Data [_egbe +_abcfd ]&^(_eaag .Data [_ace +_abcfd ]);};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],_cgbba .Data [_gdaf ]&^(_eaag .Data [_faagb ]),_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixNotPixSrcOrDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],^(_cgbba .Data [_gddg ]|_eaag .Data [_bcb ]),_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=^(_cgbba .Data [_egbe +_abcfd ]|_eaag .Data [_ace +_abcfd ]);};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],^(_cgbba .Data [_gdaf ]|_eaag .Data [_faagb ]),_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixNotPixSrcAndDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],^(_cgbba .Data [_gddg ]&_eaag .Data [_bcb ]),_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=^(_cgbba .Data [_egbe +_abcfd ]&_eaag .Data [_ace +_abcfd ]);};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],^(_cgbba .Data [_gdaf ]&_eaag .Data [_faagb ]),_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};case PixNotPixSrcXorDst :for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_bcb ]=_agdd (_eaag .Data [_bcb ],^(_cgbba .Data [_gddg ]^_eaag .Data [_bcb ]),_gbbd );_bcb +=_eaag .RowStride ;_gddg +=_cgbba .RowStride ;};if _bgfac {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{for _abcfd =0;_abcfd < _ecgc ;_abcfd ++{_eaag .Data [_ace +_abcfd ]=^(_cgbba .Data [_egbe +_abcfd ]^_eaag .Data [_ace +_abcfd ]);};_ace +=_eaag .RowStride ;_egbe +=_cgbba .RowStride ;};};if _cfbf {for _bbfcg =0;_bbfcg < _cacaa ;_bbfcg ++{_eaag .Data [_faagb ]=_agdd (_eaag .Data [_faagb ],^(_cgbba .Data [_gdaf ]^_eaag .Data [_faagb ]),_fecce );_faagb +=_eaag .RowStride ;_gdaf +=_cgbba .RowStride ;};};default:_gf .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_agbg );return _fg .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _agaf (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _ffbe (_fbdag ,_gfea *Bitmap ,_ddfb *Selection )(*Bitmap ,error ){const _fbgg ="\u006f\u0070\u0065\u006e";var _daab error ;_fbdag ,_daab =_baca (_fbdag ,_gfea ,_ddfb );if _daab !=nil {return nil ,_fg .Wrap (_daab ,_fbgg ,"");};_gccbd ,_daab :=_eega (nil ,_gfea ,_ddfb );if _daab !=nil {return nil ,_fg .Wrap (_daab ,_fbgg ,"");};_ ,_daab =_agbf (_fbdag ,_gccbd ,_ddfb );if _daab !=nil {return nil ,_fg .Wrap (_daab ,_fbgg ,"");};return _fbdag ,nil ;};func _ggf (_dafac *Bitmap )(_fecb *Bitmap ,_ggaba int ,_fedb error ){const _gfcc ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _dafac ==nil {return nil ,0,_fg .Errorf (_gfcc ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _feee ,_ebcca *Bitmap ;if _feee ,_fedb =_cfdcc (nil ,_dafac );_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_bfcc [13]int ;_debae ,_dabd int ;);_faf :=12;_beaba :=_e .NewNumSlice (_faf +1);_cgdd :=_e .NewNumSlice (_faf +1);var _ggfg *Boxes ;for _gdaca :=0;_gdaca <=_faf ;_gdaca ++{if _gdaca ==0{if _ebcca ,_fedb =_cfdcc (nil ,_feee );_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _ebcca ,_fedb =_ccfcf (_feee ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ggfg ,_fedb =_ebcca .connComponentsBB (4);_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"");};_bfcc [_gdaca ]=len (*_ggfg );_beaba .AddInt (_bfcc [_gdaca ]);switch _gdaca {case 0:_debae =_bfcc [0];default:_dabd =_bfcc [_gdaca -1]-_bfcc [_gdaca ];_cgdd .AddInt (_dabd );};_feee =_ebcca ;};_fceg :=true ;_abd :=2;var _afbfd ,_eee int ;for _cgc :=1;_cgc < len (*_cgdd );_cgc ++{if _afbfd ,_fedb =_beaba .GetInt (_cgc );_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _fceg &&_afbfd < int (0.3*float32 (_debae )){_abd =_cgc +1;_fceg =false ;};if _dabd ,_fedb =_cgdd .GetInt (_cgc );_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _dabd > _eee {_eee =_dabd ;};};_gaaf :=_dafac .XResolution ;if _gaaf ==0{_gaaf =150;};if _gaaf > 110{_abd ++;};if _abd < 2{_gf .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_abd =2;};_ggaba =_abd +1;if _fecb ,_fedb =_dbff (nil ,_dafac ,_abd +1,1);_fedb !=nil {return nil ,0,_fg .Wrap (_fedb ,_gfcc ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _fecb ,_ggaba ,nil ;};func _ccfe (_fcgbd *Bitmap ,_adcg ,_dabe int ,_dcefe ,_cbeg int ,_fada RasterOperator ){var (_ffebd bool ;_fddb bool ;_affa int ;_agcc int ;_agbb int ;_adcgg int ;_gfefa bool ;_eeeg byte ;);_baaf :=8-(_adcg &7);_fagaa :=_eeede [_baaf ];_dcgda :=_fcgbd .RowStride *_dabe +(_adcg >>3);if _dcefe < _baaf {_ffebd =true ;_fagaa &=_bgd [8-_baaf +_dcefe ];};if !_ffebd {_affa =(_dcefe -_baaf )>>3;if _affa !=0{_fddb =true ;_agcc =_dcgda +1;};};_agbb =(_adcg +_dcefe )&7;if !(_ffebd ||_agbb ==0){_gfefa =true ;_eeeg =_bgd [_agbb ];_adcgg =_dcgda +1+_affa ;};var _cfce ,_ddda int ;switch _fada {case PixClr :for _cfce =0;_cfce < _cbeg ;_cfce ++{_fcgbd .Data [_dcgda ]=_agdd (_fcgbd .Data [_dcgda ],0x0,_fagaa );_dcgda +=_fcgbd .RowStride ;};if _fddb {for _cfce =0;_cfce < _cbeg ;_cfce ++{for _ddda =0;_ddda < _affa ;_ddda ++{_fcgbd .Data [_agcc +_ddda ]=0x0;};_agcc +=_fcgbd .RowStride ;};};if _gfefa {for _cfce =0;_cfce < _cbeg ;_cfce ++{_fcgbd .Data [_adcgg ]=_agdd (_fcgbd .Data [_adcgg ],0x0,_eeeg );_adcgg +=_fcgbd .RowStride ;};};case PixSet :for _cfce =0;_cfce < _cbeg ;_cfce ++{_fcgbd .Data [_dcgda ]=_agdd (_fcgbd .Data [_dcgda ],0xff,_fagaa );_dcgda +=_fcgbd .RowStride ;};if _fddb {for _cfce =0;_cfce < _cbeg ;_cfce ++{for _ddda =0;_ddda < _affa ;_ddda ++{_fcgbd .Data [_agcc +_ddda ]=0xff;};_agcc +=_fcgbd .RowStride ;};};if _gfefa {for _cfce =0;_cfce < _cbeg ;_cfce ++{_fcgbd .Data [_adcgg ]=_agdd (_fcgbd .Data [_adcgg ],0xff,_eeeg );_adcgg +=_fcgbd .RowStride ;};};case PixNotDst :for _cfce =0;_cfce < _cbeg ;_cfce ++{_fcgbd .Data [_dcgda ]=_agdd (_fcgbd .Data [_dcgda ],^_fcgbd .Data [_dcgda ],_fagaa );_dcgda +=_fcgbd .RowStride ;};if _fddb {for _cfce =0;_cfce < _cbeg ;_cfce ++{for _ddda =0;_ddda < _affa ;_ddda ++{_fcgbd .Data [_agcc +_ddda ]=^(_fcgbd .Data [_agcc +_ddda ]);};_agcc +=_fcgbd .RowStride ;};};if _gfefa {for _cfce =0;_cfce < _cbeg ;_cfce ++{_fcgbd .Data [_adcgg ]=_agdd (_fcgbd .Data [_adcgg ],^_fcgbd .Data [_adcgg ],_eeeg );_adcgg +=_fcgbd .RowStride ;};};};};func (_edbd *Bitmap )setPadBits (_eagb int ){_ddbc :=8-_edbd .Width %8;if _ddbc ==8{return ;};_adde :=_edbd .Width /8;_fgbg :=_eeede [_ddbc ];if _eagb ==0{_fgbg ^=_fgbg ;};var _ccc int ;for _fbf :=0;_fbf < _edbd .Height ;_fbf ++{_ccc =_fbf *_edbd .RowStride +_adde ;if _eagb ==0{_edbd .Data [_ccc ]&=_fgbg ;}else {_edbd .Data [_ccc ]|=_fgbg ;};};};func (_ecd *Bitmap )InverseData (){_ecd .inverseData ()};func (_gafea *Bitmaps )GetBox (i int )(*_a .Rectangle ,error ){const _bab ="\u0047\u0065\u0074\u0042\u006f\u0078";if _gafea ==nil {return nil ,_fg .Error (_bab ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_gafea .Boxes )-1{return nil ,_fg .Errorf (_bab ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gafea .Boxes [i ],nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _cfdcc (d ,s )};func (_dbcf *ClassedPoints )Less (i ,j int )bool {return _dbcf ._gcee (i ,j )};type RasterOperator int ;func TstAddSymbol (t *_c .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_baeec :=_a .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_baeec );*x +=sym .Width +space ;};func MakePixelSumTab8 ()[]int {return _fbagc ()};func (_ddf *Bitmap )ClipRectangle (box *_a .Rectangle )(_ggab *Bitmap ,_cdeb *_a .Rectangle ,_ggcf error ){const _dfd ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_fg .Error (_dfd ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_bbec ,_acc :=_ddf .Width ,_ddf .Height ;_gdb :=_a .Rect (0,0,_bbec ,_acc );if !box .Overlaps (_gdb ){return nil ,nil ,_fg .Error (_dfd ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_aeb :=box .Intersect (_gdb );_dfbc ,_bae :=_aeb .Min .X ,_aeb .Min .Y ;_ffd ,_bdgd :=_aeb .Dx (),_aeb .Dy ();_ggab =New (_ffd ,_bdgd );_ggab .Text =_ddf .Text ;if _ggcf =_ggab .RasterOperation (0,0,_ffd ,_bdgd ,PixSrc ,_ddf ,_dfbc ,_bae );_ggcf !=nil {return nil ,nil ,_fg .Wrap (_ggcf ,_dfd ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_cdeb =&_aeb ;return _ggab ,_cdeb ,nil ;};func _dceedc (_dbbe ,_egeb *Bitmap ,_fece ,_cbc int )(_aaec error ){const _bfge ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_fdab ,_bgfc ,_agde ,_ecbef int ;_fgcc ,_cggge ,_gcgb ,_aaad ,_cegf ,_dgab ,_adec byte ;);for _fdab =0;_fdab < _fece ;_fdab ++{_agde =_fdab *_dbbe .RowStride ;_ecbef =_fdab *_egeb .RowStride ;for _bgfc =0;_bgfc < _cbc ;_bgfc ++{_fgcc ,_aaec =_dbbe .GetByte (_agde +_bgfc );if _aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_cggge ,_aaec =_egeb .GetByte (_ecbef +_bgfc );if _aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _fdab > 0{_gcgb ,_aaec =_dbbe .GetByte (_agde -_dbbe .RowStride +_bgfc );if _aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0069\u0020\u003e \u0030");};_fgcc |=_gcgb ;};if _bgfc > 0{_aaad ,_aaec =_dbbe .GetByte (_agde +_bgfc -1);if _aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u006a\u0020\u003e \u0030");};_fgcc |=_aaad <<7;};_fgcc &=_cggge ;if _fgcc ==0||(^_fgcc )==0{if _aaec =_dbbe .SetByte (_agde +_bgfc ,_fgcc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_adec =_fgcc ;_fgcc =(_fgcc |(_fgcc >>1)|(_fgcc <<1))&_cggge ;if (_fgcc ^_adec )==0{if _aaec =_dbbe .SetByte (_agde +_bgfc ,_fgcc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _fdab =_fece -1;_fdab >=0;_fdab --{_agde =_fdab *_dbbe .RowStride ;_ecbef =_fdab *_egeb .RowStride ;for _bgfc =_cbc -1;_bgfc >=0;_bgfc --{if _fgcc ,_aaec =_dbbe .GetByte (_agde +_bgfc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _cggge ,_aaec =_egeb .GetByte (_ecbef +_bgfc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fdab < _fece -1{if _cegf ,_aaec =_dbbe .GetByte (_agde +_dbbe .RowStride +_bgfc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_fgcc |=_cegf ;};if _bgfc < _cbc -1{if _dgab ,_aaec =_dbbe .GetByte (_agde +_bgfc +1);_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_fgcc |=_dgab >>7;};_fgcc &=_cggge ;if _fgcc ==0||(^_fgcc )==0{if _aaec =_dbbe .SetByte (_agde +_bgfc ,_fgcc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_adec =_fgcc ;_fgcc =(_fgcc |(_fgcc >>1)|(_fgcc <<1))&_cggge ;if (_fgcc ^_adec )==0{if _aaec =_dbbe .SetByte (_agde +_bgfc ,_fgcc );_aaec !=nil {return _fg .Wrap (_aaec ,_bfge ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func (_bfeg *Bitmap )clearAll ()error {return _bfeg .RasterOperation (0,0,_bfeg .Width ,_bfeg .Height ,PixClr ,nil ,0,0);};func (_eddb *byWidth )Swap (i ,j int ){_eddb .Values [i ],_eddb .Values [j ]=_eddb .Values [j ],_eddb .Values [i ];if _eddb .Boxes !=nil {_eddb .Boxes [i ],_eddb .Boxes [j ]=_eddb .Boxes [j ],_eddb .Boxes [i ];};};func _eccd (_eded ,_eaad *Bitmap ,_aedbd ,_bdfe ,_cdfd uint ,_cec ,_bedf int ,_fdcf bool ,_deba ,_caba int )error {for _dfe :=_cec ;_dfe < _bedf ;_dfe ++{if _deba +1< len (_eded .Data ){_afcb :=_dfe +1==_bedf ;_ccac ,_dgdd :=_eded .GetByte (_deba );if _dgdd !=nil {return _dgdd ;};_deba ++;_ccac <<=_aedbd ;_dade ,_dgdd :=_eded .GetByte (_deba );if _dgdd !=nil {return _dgdd ;};_dade >>=_bdfe ;_ddbgb :=_ccac |_dade ;if _afcb &&!_fdcf {_ddbgb =_afac (_cdfd ,_ddbgb );};_dgdd =_eaad .SetByte (_caba ,_ddbgb );if _dgdd !=nil {return _dgdd ;};_caba ++;if _afcb &&_fdcf {_dfcg ,_dgbb :=_eded .GetByte (_deba );if _dgbb !=nil {return _dgbb ;};_dfcg <<=_aedbd ;_ddbgb =_afac (_cdfd ,_dfcg );if _dgbb =_eaad .SetByte (_caba ,_ddbgb );_dgbb !=nil {return _dgbb ;};};continue ;};_ddg ,_gdgaf :=_eded .GetByte (_deba );if _gdgaf !=nil {_gf .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_deba ,_gdgaf );return _gdgaf ;};_ddg <<=_aedbd ;_deba ++;_gdgaf =_eaad .SetByte (_caba ,_ddg );if _gdgaf !=nil {return _gdgaf ;};_caba ++;};return nil ;};func (_caca *Bitmap )GetVanillaData ()[]byte {if _caca .Color ==Chocolate {_caca .inverseData ();};return _caca .Data ;};func _dbff (_fbga ,_fbda *Bitmap ,_dcdb ,_aacc int )(*Bitmap ,error ){const _abaa ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _fbda ==nil {return nil ,_fg .Error (_abaa ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dcdb < 1||_aacc < 1{return nil ,_fg .Error (_abaa ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _dcdb ==1&&_aacc ==1{return _fbda .Copy (),nil ;};if _dcdb ==1||_aacc ==1{_fgcd :=SelCreateBrick (_aacc ,_dcdb ,_aacc /2,_dcdb /2,SelHit );var _ffgf error ;_fbga ,_ffgf =_ffbfd (_fbga ,_fbda ,_fgcd );if _ffgf !=nil {return nil ,_fg .Wrap (_ffgf ,_abaa ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _fbga ,nil ;};_aacda :=SelCreateBrick (1,_dcdb ,0,_dcdb /2,SelHit );_eaacc :=SelCreateBrick (_aacc ,1,_aacc /2,0,SelHit );_adf ,_bbcc :=_agbf (nil ,_fbda ,_aacda );if _bbcc !=nil {return nil ,_fg .Wrap (_bbcc ,_abaa ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _fbga ,_bbcc =_agbf (_fbga ,_adf ,_eaacc );_bbcc !=nil {return nil ,_fg .Wrap (_bbcc ,_abaa ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_bbcc =_eega (_adf ,_fbga ,_aacda );_bbcc !=nil {return nil ,_fg .Wrap (_bbcc ,_abaa ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_bbcc =_eega (_fbga ,_adf ,_eaacc );_bbcc !=nil {return nil ,_fg .Wrap (_bbcc ,_abaa ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _fbga ,nil ;};func (_ccbe *Bitmaps )AddBox (box *_a .Rectangle ){_ccbe .Boxes =append (_ccbe .Boxes ,box )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_cgad :=_bdeac (h ,w ,"");_cgad .setOrigin (cy ,cx );var _eacg ,_fbgaf int ;for _eacg =0;_eacg < h ;_eacg ++{for _fbgaf =0;_fbgaf < w ;_fbgaf ++{_cgad .Data [_eacg ][_fbgaf ]=tp ;};};return _cgad ;};func _bacb (_cdd *Bitmap ,_dab ,_gc int )(*Bitmap ,error ){const _fgg ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _cdd ==nil {return nil ,_fg .Error (_fgg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dab <=0||_gc <=0{return nil ,_fg .Error (_fgg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _dab ==_gc {if _dab ==1{_cc ,_ef :=_cfdcc (nil ,_cdd );if _ef !=nil {return nil ,_fg .Wrap (_ef ,_fgg ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _cc ,nil ;};if _dab ==2||_dab ==4||_dab ==8{_bb ,_cde :=_fdb (_cdd ,_dab );if _cde !=nil {return nil ,_fg .Wrap (_cde ,_fgg ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _bb ,nil ;};};_cbf :=_dab *_cdd .Width ;_gdc :=_gc *_cdd .Height ;_ad :=New (_cbf ,_gdc );_dbca :=_ad .RowStride ;var (_ebc ,_age ,_fc ,_bce ,_cf int ;_fgc byte ;_fgd error ;);for _age =0;_age < _cdd .Height ;_age ++{_ebc =_gc *_age *_dbca ;for _fc =0;_fc < _cdd .Width ;_fc ++{if _dbg :=_cdd .GetPixel (_fc ,_age );_dbg {_cf =_dab *_fc ;for _bce =0;_bce < _dab ;_bce ++{_ad .setBit (_ebc *8+_cf +_bce );};};};for _bce =1;_bce < _gc ;_bce ++{_de :=_ebc +_bce *_dbca ;for _fce :=0;_fce < _dbca ;_fce ++{if _fgc ,_fgd =_ad .GetByte (_ebc +_fce );_fgd !=nil {return nil ,_fg .Wrapf (_fgd ,_fgg ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_bce );};if _fgd =_ad .SetByte (_de +_fce ,_fgc );_fgd !=nil {return nil ,_fg .Wrap (_fgd ,_fgg ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _ad ,nil ;};func _caga (_gag ,_bcee *Bitmap ,_ccf int ,_gef []byte ,_beb int )(_dd error ){const _bca ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_afad ,_fca ,_ged ,_fbc ,_caeb ,_bffe ,_cbgd ,_bdg int ;_edfe ,_bddb ,_fbbf ,_gcc uint32 ;_bda ,_dac byte ;_gafg uint16 ;);_cga :=make ([]byte ,4);_deb :=make ([]byte ,4);for _ged =0;_ged < _gag .Height -1;_ged ,_fbc =_ged +2,_fbc +1{_afad =_ged *_gag .RowStride ;_fca =_fbc *_bcee .RowStride ;for _caeb ,_bffe =0,0;_caeb < _beb ;_caeb ,_bffe =_caeb +4,_bffe +1{for _cbgd =0;_cbgd < 4;_cbgd ++{_bdg =_afad +_caeb +_cbgd ;if _bdg <=len (_gag .Data )-1&&_bdg < _afad +_gag .RowStride {_cga [_cbgd ]=_gag .Data [_bdg ];}else {_cga [_cbgd ]=0x00;};_bdg =_afad +_gag .RowStride +_caeb +_cbgd ;if _bdg <=len (_gag .Data )-1&&_bdg < _afad +(2*_gag .RowStride ){_deb [_cbgd ]=_gag .Data [_bdg ];}else {_deb [_cbgd ]=0x00;};};_edfe =_ag .BigEndian .Uint32 (_cga );_bddb =_ag .BigEndian .Uint32 (_deb );_fbbf =_edfe &_bddb ;_fbbf |=_fbbf <<1;_gcc =_edfe |_bddb ;_gcc &=_gcc <<1;_bddb =_fbbf &_gcc ;_bddb &=0xaaaaaaaa;_edfe =_bddb |(_bddb <<7);_bda =byte (_edfe >>24);_dac =byte ((_edfe >>8)&0xff);_bdg =_fca +_bffe ;if _bdg +1==len (_bcee .Data )-1||_bdg +1>=_fca +_bcee .RowStride {if _dd =_bcee .SetByte (_bdg ,_gef [_bda ]);_dd !=nil {return _fg .Wrapf (_dd ,_bca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_bdg );};}else {_gafg =(uint16 (_gef [_bda ])<<8)|uint16 (_gef [_dac ]);if _dd =_bcee .setTwoBytes (_bdg ,_gafg );_dd !=nil {return _fg .Wrapf (_dd ,_bca ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bdg );};_bffe ++;};};};return nil ;};func TstPSymbol (t *_c .T )*Bitmap {t .Helper ();_acfg :=New (5,8);_g .NoError (t ,_acfg .SetPixel (0,0,1));_g .NoError (t ,_acfg .SetPixel (1,0,1));_g .NoError (t ,_acfg .SetPixel (2,0,1));_g .NoError (t ,_acfg .SetPixel (3,0,1));_g .NoError (t ,_acfg .SetPixel (4,1,1));_g .NoError (t ,_acfg .SetPixel (0,1,1));_g .NoError (t ,_acfg .SetPixel (4,2,1));_g .NoError (t ,_acfg .SetPixel (0,2,1));_g .NoError (t ,_acfg .SetPixel (4,3,1));_g .NoError (t ,_acfg .SetPixel (0,3,1));_g .NoError (t ,_acfg .SetPixel (0,4,1));_g .NoError (t ,_acfg .SetPixel (1,4,1));_g .NoError (t ,_acfg .SetPixel (2,4,1));_g .NoError (t ,_acfg .SetPixel (3,4,1));_g .NoError (t ,_acfg .SetPixel (0,5,1));_g .NoError (t ,_acfg .SetPixel (0,6,1));_g .NoError (t ,_acfg .SetPixel (0,7,1));return _acfg ;};func (_eefc *Bitmap )setAll ()error {_aagc :=_agaf (_eefc ,0,0,_eefc .Width ,_eefc .Height ,PixSet ,nil ,0,0);if _aagc !=nil {return _fg .Wrap (_aagc ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _geae (d ,s ,hSize ,vSize )};func (_ddbe *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _acaef ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _fgac :=_ddbe .validateIntSlice ();_fgac !=nil {return nil ,_fg .Wrap (_fgac ,_acaef ,"");};if _ddbe .IntSlice .Size ()==0{return nil ,_fg .Error (_acaef ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_ddbe .SortByY ();var (_bgfg []*ClassedPoints ;_geded int ;);_edgf :=-1;var _bbaa *ClassedPoints ;for _cdfce :=0;_cdfce < len (_ddbe .IntSlice );_cdfce ++{_geded =int (_ddbe .YAtIndex (_cdfce ));if _geded !=_edgf {_bbaa =&ClassedPoints {Points :_ddbe .Points };_edgf =_geded ;_bgfg =append (_bgfg ,_bbaa );};_bbaa .IntSlice =append (_bbaa .IntSlice ,_ddbe .IntSlice [_cdfce ]);};for _ ,_fagc :=range _bgfg {_fagc .SortByX ();};return _bgfg ,nil ;};func _eagad (_bbcde *Bitmap ,_eacfb ,_facgf ,_cabg ,_cbge int ,_fdeg RasterOperator ,_adgd *Bitmap ,_efgf ,_adgea int )error {var (_gdeg bool ;_dfef bool ;_abdf byte ;_fcfb int ;_abgg int ;_adcd int ;_bgbgf int ;_dfbb bool ;_ccfbg int ;_gead int ;_fdfca int ;_cdff bool ;_agcdg byte ;_eggb int ;_ddfd int ;_aced int ;_gegd byte ;_geeg int ;_fgaf int ;_afee uint ;_aaff uint ;_egeg byte ;_bbeag shift ;_faacf bool ;_egadc bool ;_caaa ,_aeca int ;);if _efgf &7!=0{_fgaf =8-(_efgf &7);};if _eacfb &7!=0{_abgg =8-(_eacfb &7);};if _fgaf ==0&&_abgg ==0{_egeg =_eeede [0];}else {if _abgg > _fgaf {_afee =uint (_abgg -_fgaf );}else {_afee =uint (8-(_fgaf -_abgg ));};_aaff =8-_afee ;_egeg =_eeede [_afee ];};if (_eacfb &7)!=0{_gdeg =true ;_fcfb =8-(_eacfb &7);_abdf =_eeede [_fcfb ];_adcd =_bbcde .RowStride *_facgf +(_eacfb >>3);_bgbgf =_adgd .RowStride *_adgea +(_efgf >>3);_geeg =8-(_efgf &7);if _fcfb > _geeg {_bbeag =_dbeee ;if _cabg >=_fgaf {_faacf =true ;};}else {_bbeag =_cagbd ;};};if _cabg < _fcfb {_dfef =true ;_abdf &=_bgd [8-_fcfb +_cabg ];};if !_dfef {_ccfbg =(_cabg -_fcfb )>>3;if _ccfbg !=0{_dfbb =true ;_gead =_bbcde .RowStride *_facgf +((_eacfb +_abgg )>>3);_fdfca =_adgd .RowStride *_adgea +((_efgf +_abgg )>>3);};};_eggb =(_eacfb +_cabg )&7;if !(_dfef ||_eggb ==0){_cdff =true ;_agcdg =_bgd [_eggb ];_ddfd =_bbcde .RowStride *_facgf +((_eacfb +_abgg )>>3)+_ccfbg ;_aced =_adgd .RowStride *_adgea +((_efgf +_abgg )>>3)+_ccfbg ;if _eggb > int (_aaff ){_egadc =true ;};};switch _fdeg {case PixSrc :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],_gegd ,_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],_gegd ,_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixNotSrc :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],^_gegd ,_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=^_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],^_gegd ,_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixSrcOrDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],_gegd |_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]|=_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],_gegd |_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixSrcAndDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],_gegd &_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]&=_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],_gegd &_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixSrcXorDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],_gegd ^_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]^=_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],_gegd ^_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixNotSrcOrDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],^_gegd |_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]|=^_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],^_gegd |_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixNotSrcAndDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],^_gegd &_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]&=^_gegd ;};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],^_gegd &_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixSrcOrNotDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],_gegd |^_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=_gegd |^_bbcde .Data [_gead +_aeca ];};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],_gegd |^_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixSrcAndNotDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],_gegd &^_bbcde .Data [_adcd ],_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=_gegd &^_bbcde .Data [_gead +_aeca ];};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],_gegd &^_bbcde .Data [_ddfd ],_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixNotPixSrcOrDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],^(_gegd |_bbcde .Data [_adcd ]),_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=^(_gegd |_bbcde .Data [_gead +_aeca ]);};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],^(_gegd |_bbcde .Data [_ddfd ]),_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixNotPixSrcAndDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],^(_gegd &_bbcde .Data [_adcd ]),_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=^(_gegd &_bbcde .Data [_gead +_aeca ]);};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],^(_gegd &_bbcde .Data [_ddfd ]),_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};case PixNotPixSrcXorDst :if _gdeg {for _caaa =0;_caaa < _cbge ;_caaa ++{if _bbeag ==_dbeee {_gegd =_adgd .Data [_bgbgf ]<<_afee ;if _faacf {_gegd =_agdd (_gegd ,_adgd .Data [_bgbgf +1]>>_aaff ,_egeg );};}else {_gegd =_adgd .Data [_bgbgf ]>>_aaff ;};_bbcde .Data [_adcd ]=_agdd (_bbcde .Data [_adcd ],^(_gegd ^_bbcde .Data [_adcd ]),_abdf );_adcd +=_bbcde .RowStride ;_bgbgf +=_adgd .RowStride ;};};if _dfbb {for _caaa =0;_caaa < _cbge ;_caaa ++{for _aeca =0;_aeca < _ccfbg ;_aeca ++{_gegd =_agdd (_adgd .Data [_fdfca +_aeca ]<<_afee ,_adgd .Data [_fdfca +_aeca +1]>>_aaff ,_egeg );_bbcde .Data [_gead +_aeca ]=^(_gegd ^_bbcde .Data [_gead +_aeca ]);};_gead +=_bbcde .RowStride ;_fdfca +=_adgd .RowStride ;};};if _cdff {for _caaa =0;_caaa < _cbge ;_caaa ++{_gegd =_adgd .Data [_aced ]<<_afee ;if _egadc {_gegd =_agdd (_gegd ,_adgd .Data [_aced +1]>>_aaff ,_egeg );};_bbcde .Data [_ddfd ]=_agdd (_bbcde .Data [_ddfd ],^(_gegd ^_bbcde .Data [_ddfd ]),_agcdg );_ddfd +=_bbcde .RowStride ;_aced +=_adgd .RowStride ;};};default:_gf .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_fdeg );return _fg .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func (_ddce *Bitmap )SetDefaultPixel (){for _afb :=range _ddce .Data {_ddce .Data [_afb ]=byte (0xff);};};type MorphOperation int ;func (_gaaa *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _ggged ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_gaaa .Values )==0{return nil ,_fg .Error (_ggged ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_ffcf :=&BitmapsArray {};_gaaa .SortByHeight ();_ggcbc :=-1;_gdcd :=-1;for _acca :=0;_acca < len (_gaaa .Values );_acca ++{_fdcc :=_gaaa .Values [_acca ].Height ;if _fdcc > _ggcbc {_ggcbc =_fdcc ;_gdcd ++;_ffcf .Values =append (_ffcf .Values ,&Bitmaps {});};_ffcf .Values [_gdcd ].AddBitmap (_gaaa .Values [_acca ]);};return _ffcf ,nil ;};func Extract (roi _a .Rectangle ,src *Bitmap )(*Bitmap ,error ){_cfa :=New (roi .Dx (),roi .Dy ());_dfca :=roi .Min .X &0x07;_ddfcb :=8-_dfca ;_dgaa :=uint (8-_cfa .Width &0x07);_ffc :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_cdag :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_acgfa :=_cfa .RowStride ==_cdag +1-_ffc ;var _gbff int ;for _fcgb :=roi .Min .Y ;_fcgb < roi .Max .Y ;_fcgb ++{_aggc :=_ffc ;_cdagd :=_gbff ;switch {case _ffc ==_cdag :_fgce ,_deac :=src .GetByte (_aggc );if _deac !=nil {return nil ,_deac ;};_fgce <<=uint (_dfca );_deac =_cfa .SetByte (_cdagd ,_afac (_dgaa ,_fgce ));if _deac !=nil {return nil ,_deac ;};case _dfca ==0:for _ffce :=_ffc ;_ffce <=_cdag ;_ffce ++{_dbce ,_fcda :=src .GetByte (_aggc );if _fcda !=nil {return nil ,_fcda ;};_aggc ++;if _ffce ==_cdag &&_acgfa {_dbce =_afac (_dgaa ,_dbce );};_fcda =_cfa .SetByte (_cdagd ,_dbce );if _fcda !=nil {return nil ,_fcda ;};_cdagd ++;};default:_fgge :=_eccd (src ,_cfa ,uint (_dfca ),uint (_ddfcb ),_dgaa ,_ffc ,_cdag ,_acgfa ,_aggc ,_cdagd );if _fgge !=nil {return nil ,_fgge ;};};_ffc +=src .RowStride ;_cdag +=src .RowStride ;_gbff +=_cfa .RowStride ;};return _cfa ,nil ;};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);const (_dbeee shift =iota ;_cagbd ;);func (_abfd CombinationOperator )String ()string {var _afagc string ;switch _abfd {case CmbOpOr :_afagc ="\u004f\u0052";case CmbOpAnd :_afagc ="\u0041\u004e\u0044";case CmbOpXor :_afagc ="\u0058\u004f\u0052";case CmbOpXNor :_afagc ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_afagc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_afagc ="\u004e\u004f\u0054";};return _afagc ;};func (_gee *Bitmap )GetPixel (x ,y int )bool {_fdag :=_gee .GetByteIndex (x ,y );_ebce :=_gee .GetBitOffset (x );_gcfe :=uint (7-_ebce );if _fdag > len (_gee .Data )-1{_gf .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_gee );return false ;};if (_gee .Data [_fdag ]>>_gcfe )&0x01>=1{return true ;};return false ;};func _gdbg (_dcg ,_bdgdc ,_gaa *Bitmap )(*Bitmap ,error ){const _edbe ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _bdgdc ==nil {return nil ,_fg .Error (_edbe ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gaa ==nil {return nil ,_fg .Error (_edbe ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dcg ==_gaa {return nil ,_fg .Error (_edbe ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_bdgdc .SizesEqual (_gaa ){_gf .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_edbe );};var _edbad error ;if _dcg ,_edbad =_cfdcc (_dcg ,_bdgdc );_edbad !=nil {return nil ,_fg .Wrap (_edbad ,_edbe ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _edbad =_dcg .RasterOperation (0,0,_dcg .Width ,_dcg .Height ,PixSrcXorDst ,_gaa ,0,0);_edbad !=nil {return nil ,_fg .Wrap (_edbad ,_edbe ,"");};return _dcg ,nil ;};func TstISymbol (t *_c .T ,scale ...int )*Bitmap {_bfcgg ,_bbff :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_g .NoError (t ,_bbff );return TstGetScaledSymbol (t ,_bfcgg ,scale ...);};func (_abad Points )XSorter ()func (_dfbg ,_bfa int )bool {return func (_ggfd ,_egccdd int )bool {return _abad [_ggfd ].X < _abad [_egccdd ].X };};func TstTSymbol (t *_c .T ,scale ...int )*Bitmap {_fbbb ,_ccfcff :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_g .NoError (t ,_ccfcff );return TstGetScaledSymbol (t ,_fbbb ,scale ...);};func (_eadf MorphProcess )getWidthHeight ()(_ffeb ,_edac int ){return _eadf .Arguments [0],_eadf .Arguments [1];};func (_dgb *Bitmap )resizeImageData (_gfa *Bitmap )error {if _gfa ==nil {return _fg .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dgb .SizesEqual (_gfa ){return nil ;};_dgb .Data =make ([]byte ,len (_gfa .Data ));_dgb .Width =_gfa .Width ;_dgb .Height =_gfa .Height ;_dgb .RowStride =_gfa .RowStride ;return nil ;};func (_aedd *Bitmap )SetByte (index int ,v byte )error {if index > len (_aedd .Data )-1||index < 0{return _fg .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_aedd .Data [index ]=v ;return nil ;};func (_bfee *byHeight )Swap (i ,j int ){_bfee .Values [i ],_bfee .Values [j ]=_bfee .Values [j ],_bfee .Values [i ];if _bfee .Boxes !=nil {_bfee .Boxes [i ],_bfee .Boxes [j ]=_bfee .Boxes [j ],_bfee .Boxes [i ];};};func _bff (_ffag ,_cfc *Bitmap ,_dbb int ,_egcc []byte ,_cfe int )(_ecaa error ){const _gebc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_efa ,_efb ,_caee ,_eag ,_gfe ,_ega ,_ggc ,_cdee int ;_ce ,_ac ,_fag ,_gga uint32 ;_cag ,_dggd byte ;_cca uint16 ;);_dcf :=make ([]byte ,4);_fdgd :=make ([]byte ,4);for _caee =0;_caee < _ffag .Height -1;_caee ,_eag =_caee +2,_eag +1{_efa =_caee *_ffag .RowStride ;_efb =_eag *_cfc .RowStride ;for _gfe ,_ega =0,0;_gfe < _cfe ;_gfe ,_ega =_gfe +4,_ega +1{for _ggc =0;_ggc < 4;_ggc ++{_cdee =_efa +_gfe +_ggc ;if _cdee <=len (_ffag .Data )-1&&_cdee < _efa +_ffag .RowStride {_dcf [_ggc ]=_ffag .Data [_cdee ];}else {_dcf [_ggc ]=0x00;};_cdee =_efa +_ffag .RowStride +_gfe +_ggc ;if _cdee <=len (_ffag .Data )-1&&_cdee < _efa +(2*_ffag .RowStride ){_fdgd [_ggc ]=_ffag .Data [_cdee ];}else {_fdgd [_ggc ]=0x00;};};_ce =_ag .BigEndian .Uint32 (_dcf );_ac =_ag .BigEndian .Uint32 (_fdgd );_fag =_ce &_ac ;_fag |=_fag <<1;_gga =_ce |_ac ;_gga &=_gga <<1;_ac =_fag |_gga ;_ac &=0xaaaaaaaa;_ce =_ac |(_ac <<7);_cag =byte (_ce >>24);_dggd =byte ((_ce >>8)&0xff);_cdee =_efb +_ega ;if _cdee +1==len (_cfc .Data )-1||_cdee +1>=_efb +_cfc .RowStride {if _ecaa =_cfc .SetByte (_cdee ,_egcc [_cag ]);_ecaa !=nil {return _fg .Wrapf (_ecaa ,_gebc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cdee );};}else {_cca =(uint16 (_egcc [_cag ])<<8)|uint16 (_egcc [_dggd ]);if _ecaa =_cfc .setTwoBytes (_cdee ,_cca );_ecaa !=nil {return _fg .Wrapf (_ecaa ,_gebc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cdee );};_ega ++;};};};return nil ;};func (_gbe *Bitmap )GetByteIndex (x ,y int )int {return y *_gbe .RowStride +(x >>3)};func (_dace *Points )AddPoint (x ,y float32 ){*_dace =append (*_dace ,Point {x ,y })};func MakePixelCentroidTab8 ()[]int {return _fccag ()};func (_gdecf *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _dabeg ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_gdecf .Values )==0{return nil ,_fg .Error (_dabeg ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_aaeg :=&BitmapsArray {};_gdecf .SortByWidth ();_gdca :=-1;_cacg :=-1;for _eed :=0;_eed < len (_gdecf .Values );_eed ++{_bgbge :=_gdecf .Values [_eed ].Width ;if _bgbge > _gdca {_gdca =_bgbge ;_cacg ++;_aaeg .Values =append (_aaeg .Values ,&Bitmaps {});};_aaeg .Values [_cacg ].AddBitmap (_gdecf .Values [_eed ]);};return _aaeg ,nil ;};func (_dcbb *Boxes )makeSizeIndicator (_ddcb ,_ggg int ,_cggaf LocationFilter ,_gebde SizeComparison )*_e .NumSlice {_cbff :=&_e .NumSlice {};var _gdd ,_acae ,_eeb int ;for _ ,_cbgg :=range *_dcbb {_gdd =0;_acae ,_eeb =_cbgg .Dx (),_cbgg .Dy ();switch _cggaf {case LocSelectWidth :if (_gebde ==SizeSelectIfLT &&_acae < _ddcb )||(_gebde ==SizeSelectIfGT &&_acae > _ddcb )||(_gebde ==SizeSelectIfLTE &&_acae <=_ddcb )||(_gebde ==SizeSelectIfGTE &&_acae >=_ddcb ){_gdd =1;};case LocSelectHeight :if (_gebde ==SizeSelectIfLT &&_eeb < _ggg )||(_gebde ==SizeSelectIfGT &&_eeb > _ggg )||(_gebde ==SizeSelectIfLTE &&_eeb <=_ggg )||(_gebde ==SizeSelectIfGTE &&_eeb >=_ggg ){_gdd =1;};case LocSelectIfEither :if (_gebde ==SizeSelectIfLT &&(_eeb < _ggg ||_acae < _ddcb ))||(_gebde ==SizeSelectIfGT &&(_eeb > _ggg ||_acae > _ddcb ))||(_gebde ==SizeSelectIfLTE &&(_eeb <=_ggg ||_acae <=_ddcb ))||(_gebde ==SizeSelectIfGTE &&(_eeb >=_ggg ||_acae >=_ddcb )){_gdd =1;};case LocSelectIfBoth :if (_gebde ==SizeSelectIfLT &&(_eeb < _ggg &&_acae < _ddcb ))||(_gebde ==SizeSelectIfGT &&(_eeb > _ggg &&_acae > _ddcb ))||(_gebde ==SizeSelectIfLTE &&(_eeb <=_ggg &&_acae <=_ddcb ))||(_gebde ==SizeSelectIfGTE &&(_eeb >=_ggg &&_acae >=_ddcb )){_gdd =1;};};_cbff .AddInt (_gdd );};return _cbff ;};func _dfbd (_bfb *_e .Stack )(_gbada *fillSegment ,_gbed error ){const _dddc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _bfb ==nil {return nil ,_fg .Error (_dddc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bfb .Aux ==nil {return nil ,_fg .Error (_dddc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_fbffc ,_bcabd :=_bfb .Pop ();if !_bcabd {return nil ,nil ;};_ccag ,_bcabd :=_fbffc .(*fillSegment );if !_bcabd {return nil ,_fg .Error (_dddc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_gbada =&fillSegment {_ccag ._gdbed ,_ccag ._cfgec ,_ccag ._cddc +_ccag ._dbdf ,_ccag ._dbdf };_bfb .Aux .Push (_ccag );return _gbada ,nil ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func _feea (_fdgg ...MorphProcess )(_cbbb error ){const _gbdb ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _bffg ,_bcca int ;for _edcd ,_cace :=range _fdgg {if _cbbb =_cace .verify (_edcd ,&_bffg ,&_bcca );_cbbb !=nil {return _fg .Wrap (_cbbb ,_gbdb ,"");};};if _bcca !=0&&_bffg !=0{return _fg .Error (_gbdb ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func TstWordBitmap (t *_c .T ,scale ...int )*Bitmap {_adgf :=1;if len (scale )> 0{_adgf =scale [0];};_gcaeaf :=3;_dfbf :=9+7+15+2*_gcaeaf ;_aggce :=5+_gcaeaf +5;_adeg :=New (_dfbf *_adgf ,_aggce *_adgf );_efbd :=&Bitmaps {};var _geacg *int ;_gcaeaf *=_adgf ;_cccc :=0;_geacg =&_cccc ;_ecgcd :=0;_fgfcd :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,_gcaeaf );_fgfcd =TstISymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,_gcaeaf );_fgfcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,0);*_geacg =0;_ecgcd =5*_adgf +_gcaeaf ;_fgfcd =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,_gcaeaf );_fgfcd =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstESymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,1*_adgf );_fgfcd =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_efbd ,_fgfcd ,_geacg ,_ecgcd ,0);TstWriteSymbols (t ,_efbd ,_adeg );return _adeg ;};func (_ffec *Bitmap )addPadBits ()(_bbfc error ){const _ecdc ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_fdfc :=_ffec .Width %8;if _fdfc ==0{return nil ;};_aef :=_ffec .Width /8;_bagg :=_gg .NewReader (_ffec .Data );_edbc :=make ([]byte ,_ffec .Height *_ffec .RowStride );_ddbg :=_gg .NewWriterMSB (_edbc );_ebe :=make ([]byte ,_aef );var (_bga int ;_faac uint64 ;);for _bga =0;_bga < _ffec .Height ;_bga ++{if _ ,_bbfc =_bagg .Read (_ebe );_bbfc !=nil {return _fg .Wrap (_bbfc ,_ecdc ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_bbfc =_ddbg .Write (_ebe );_bbfc !=nil {return _fg .Wrap (_bbfc ,_ecdc ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _faac ,_bbfc =_bagg .ReadBits (byte (_fdfc ));_bbfc !=nil {return _fg .Wrap (_bbfc ,_ecdc ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _bbfc =_ddbg .WriteByte (byte (_faac )<<uint (8-_fdfc ));_bbfc !=nil {return _fg .Wrap (_bbfc ,_ecdc ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_ffec .Data =_ddbg .Data ();return nil ;};const _bfdb =5000;func TstASymbol (t *_c .T )*Bitmap {t .Helper ();_dfee :=New (6,6);_g .NoError (t ,_dfee .SetPixel (1,0,1));_g .NoError (t ,_dfee .SetPixel (2,0,1));_g .NoError (t ,_dfee .SetPixel (3,0,1));_g .NoError (t ,_dfee .SetPixel (4,0,1));_g .NoError (t ,_dfee .SetPixel (5,1,1));_g .NoError (t ,_dfee .SetPixel (1,2,1));_g .NoError (t ,_dfee .SetPixel (2,2,1));_g .NoError (t ,_dfee .SetPixel (3,2,1));_g .NoError (t ,_dfee .SetPixel (4,2,1));_g .NoError (t ,_dfee .SetPixel (5,2,1));_g .NoError (t ,_dfee .SetPixel (0,3,1));_g .NoError (t ,_dfee .SetPixel (5,3,1));_g .NoError (t ,_dfee .SetPixel (0,4,1));_g .NoError (t ,_dfee .SetPixel (5,4,1));_g .NoError (t ,_dfee .SetPixel (1,5,1));_g .NoError (t ,_dfee .SetPixel (2,5,1));_g .NoError (t ,_dfee .SetPixel (3,5,1));_g .NoError (t ,_dfee .SetPixel (4,5,1));_g .NoError (t ,_dfee .SetPixel (5,5,1));return _dfee ;};type Component int ;func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_dge bool ,_cgfb error ){const _ccbg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_befe ,_fafg :=p1 .Width ,p1 .Height ;_dcgf ,_gad :=p3 .Width ,p3 .Height ;if _e .Abs (_befe -_dcgf )> maxDiffW {return false ,nil ;};if _e .Abs (_fafg -_gad )> maxDiffH {return false ,nil ;};_egda :=int (float32 (area1 )*(1.0-rank )+0.5);_gdf :=int (float32 (area3 )*(1.0-rank )+0.5);var _ece ,_dbde int ;if delX >=0{_ece =int (delX +0.5);}else {_ece =int (delX -0.5);};if delY >=0{_dbde =int (delY +0.5);}else {_dbde =int (delY -0.5);};_ffbb :=p1 .CreateTemplate ();if _cgfb =_ffbb .RasterOperation (0,0,_befe ,_fafg ,PixSrc ,p1 ,0,0);_cgfb !=nil {return false ,_fg .Wrap (_cgfb ,_ccbg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cgfb =_ffbb .RasterOperation (_ece ,_dbde ,_befe ,_fafg ,PixNotSrcAndDst ,p4 ,0,0);_cgfb !=nil {return false ,_fg .Wrap (_cgfb ,_ccbg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_dge ,_cgfb =_ffbb .ThresholdPixelSum (_egda ,tab8 );if _cgfb !=nil {return false ,_fg .Wrap (_cgfb ,_ccbg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _dge {return false ,nil ;};if _cgfb =_ffbb .RasterOperation (_ece ,_dbde ,_dcgf ,_gad ,PixSrc ,p3 ,0,0);_cgfb !=nil {return false ,_fg .Wrap (_cgfb ,_ccbg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _cgfb =_ffbb .RasterOperation (0,0,_dcgf ,_gad ,PixNotSrcAndDst ,p2 ,0,0);_cgfb !=nil {return false ,_fg .Wrap (_cgfb ,_ccbg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_dge ,_cgfb =_ffbb .ThresholdPixelSum (_gdf ,tab8 );if _cgfb !=nil {return false ,_fg .Wrap (_cgfb ,_ccbg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_dge ,nil ;};func (_cgdf *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _aebce ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_cgdf .IntSlice .Size (){return 0,_fg .Errorf (_aebce ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_cgdf .XAtIndex (i )),nil ;};func TstWordBitmapWithSpaces (t *_c .T ,scale ...int )*Bitmap {_fabgd :=1;if len (scale )> 0{_fabgd =scale [0];};_ddgg :=3;_afec :=9+7+15+2*_ddgg +2*_ddgg ;_bgfd :=5+_ddgg +5+2*_ddgg ;_fcge :=New (_afec *_fabgd ,_bgfd *_fabgd );_cceed :=&Bitmaps {};var _fdfd *int ;_ddgg *=_fabgd ;_cdab :=_ddgg ;_fdfd =&_cdab ;_bbfcc :=_ddgg ;_ceeec :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,_ddgg );_ceeec =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,_ddgg );_ceeec =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,0);*_fdfd =_ddgg ;_bbfcc =5*_fabgd +_ddgg ;_ceeec =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,_ddgg );_ceeec =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,1*_fabgd );_ceeec =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cceed ,_ceeec ,_fdfd ,_bbfcc ,0);TstWriteSymbols (t ,_cceed ,_fcge );return _fcge ;};type fillSegment struct{_gdbed int ;_cfgec int ;_cddc int ;_dbdf int ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func (_ccaag *Selection )setOrigin (_bfcg ,_abba int ){_ccaag .Cy ,_ccaag .Cx =_bfcg ,_abba };func (_bfgb *Bitmap )And (s *Bitmap )(_eba *Bitmap ,_agc error ){const _debcg ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bfgb ==nil {return nil ,_fg .Error (_debcg ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_fg .Error (_debcg ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bfgb .SizesEqual (s ){_gf .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_debcg );};if _eba ,_agc =_cfdcc (_eba ,_bfgb );_agc !=nil {return nil ,_fg .Wrap (_agc ,_debcg ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _agc =_eba .RasterOperation (0,0,_eba .Width ,_eba .Height ,PixSrcAndDst ,s ,0,0);_agc !=nil {return nil ,_fg .Wrap (_agc ,_debcg ,"");};return _eba ,nil ;};func _faag (_dff *Bitmap ,_dee ,_fcfe ,_beacb ,_baag int ,_cdde RasterOperator ,_ccdb *Bitmap ,_dacb ,_eecb int )error {var (_gdcf byte ;_fdda int ;_ddfgf int ;_cebf ,_egfd int ;_cgbda ,_cgbg int ;);_fbee :=_beacb >>3;_dedf :=_beacb &7;if _dedf > 0{_gdcf =_bgd [_dedf ];};_fdda =_ccdb .RowStride *_eecb +(_dacb >>3);_ddfgf =_dff .RowStride *_fcfe +(_dee >>3);switch _cdde {case PixSrc :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=_ccdb .Data [_cebf ];_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],_ccdb .Data [_cebf ],_gdcf );};};case PixNotSrc :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=^(_ccdb .Data [_cebf ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],^_ccdb .Data [_cebf ],_gdcf );};};case PixSrcOrDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]|=_ccdb .Data [_cebf ];_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],_ccdb .Data [_cebf ]|_dff .Data [_egfd ],_gdcf );};};case PixSrcAndDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]&=_ccdb .Data [_cebf ];_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],_ccdb .Data [_cebf ]&_dff .Data [_egfd ],_gdcf );};};case PixSrcXorDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]^=_ccdb .Data [_cebf ];_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],_ccdb .Data [_cebf ]^_dff .Data [_egfd ],_gdcf );};};case PixNotSrcOrDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]|=^(_ccdb .Data [_cebf ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],^(_ccdb .Data [_cebf ])|_dff .Data [_egfd ],_gdcf );};};case PixNotSrcAndDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]&=^(_ccdb .Data [_cebf ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],^(_ccdb .Data [_cebf ])&_dff .Data [_egfd ],_gdcf );};};case PixSrcOrNotDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=_ccdb .Data [_cebf ]|^(_dff .Data [_egfd ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],_ccdb .Data [_cebf ]|^(_dff .Data [_egfd ]),_gdcf );};};case PixSrcAndNotDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=_ccdb .Data [_cebf ]&^(_dff .Data [_egfd ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],_ccdb .Data [_cebf ]&^(_dff .Data [_egfd ]),_gdcf );};};case PixNotPixSrcOrDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=^(_ccdb .Data [_cebf ]|_dff .Data [_egfd ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],^(_ccdb .Data [_cebf ]|_dff .Data [_egfd ]),_gdcf );};};case PixNotPixSrcAndDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=^(_ccdb .Data [_cebf ]&_dff .Data [_egfd ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],^(_ccdb .Data [_cebf ]&_dff .Data [_egfd ]),_gdcf );};};case PixNotPixSrcXorDst :for _cgbda =0;_cgbda < _baag ;_cgbda ++{_cebf =_fdda +_cgbda *_ccdb .RowStride ;_egfd =_ddfgf +_cgbda *_dff .RowStride ;for _cgbg =0;_cgbg < _fbee ;_cgbg ++{_dff .Data [_egfd ]=^(_ccdb .Data [_cebf ]^_dff .Data [_egfd ]);_egfd ++;_cebf ++;};if _dedf > 0{_dff .Data [_egfd ]=_agdd (_dff .Data [_egfd ],^(_ccdb .Data [_cebf ]^_dff .Data [_egfd ]),_gdcf );};};default:_gf .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cdde );return _fg .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_ggb *Boxes )selectWithIndicator (_eaec *_e .NumSlice )(_feda *Boxes ,_ebeb error ){const _dbbf ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _ggb ==nil {return nil ,_fg .Error (_dbbf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _eaec ==nil {return nil ,_fg .Error (_dbbf ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_eaec )!=len (*_ggb ){return nil ,_fg .Error (_dbbf ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _acd ,_bgbb int ;for _ebdd :=0;_ebdd < len (*_eaec );_ebdd ++{if _acd ,_ebeb =_eaec .GetInt (_ebdd );_ebeb !=nil {return nil ,_fg .Wrap (_ebeb ,_dbbf ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _acd ==1{_bgbb ++;};};if _bgbb ==len (*_ggb ){return _ggb ,nil ;};_facc :=Boxes {};for _cbba :=0;_cbba < len (*_eaec );_cbba ++{_acd =int ((*_eaec )[_cbba ]);if _acd ==0{continue ;};_facc =append (_facc ,(*_ggb )[_cbba ]);};_feda =&_facc ;return _feda ,nil ;};func (_bcebg *Bitmap )setEightFullBytes (_abf int ,_fbdd uint64 )error {if _abf +7> len (_bcebg .Data )-1{return _fg .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bcebg .Data [_abf ]=byte ((_fbdd &0xff00000000000000)>>56);_bcebg .Data [_abf +1]=byte ((_fbdd &0xff000000000000)>>48);_bcebg .Data [_abf +2]=byte ((_fbdd &0xff0000000000)>>40);_bcebg .Data [_abf +3]=byte ((_fbdd &0xff00000000)>>32);_bcebg .Data [_abf +4]=byte ((_fbdd &0xff000000)>>24);_bcebg .Data [_abf +5]=byte ((_fbdd &0xff0000)>>16);_bcebg .Data [_abf +6]=byte ((_fbdd &0xff00)>>8);_bcebg .Data [_abf +7]=byte (_fbdd &0xff);return nil ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _gdbb ,_fdaa int ;_faga :=src .RowStride -1;if x < 0{_fdaa =-x ;x =0;}else if x +src .Width > dst .Width {_faga -=src .Width +x -dst .Width ;};if y < 0{_gdbb =-y ;y =0;_fdaa +=src .RowStride ;_faga +=src .RowStride ;}else if y +src .Height > dst .Height {_gdbb =src .Height +y -dst .Height ;};var (_gfgb int ;_geag error ;);_edd :=x &0x07;_bcab :=8-_edd ;_acfa :=src .Width &0x07;_ccg :=_bcab -_acfa ;_begb :=_bcab &0x07!=0;_dbdg :=src .Width <=((_faga -_fdaa )<<3)+_bcab ;_cfebg :=dst .GetByteIndex (x ,y );_fcca :=_gdbb +dst .Height ;if src .Height > _fcca {_gfgb =_fcca ;}else {_gfgb =src .Height ;};switch {case !_begb :_geag =_aggb (src ,dst ,_gdbb ,_gfgb ,_cfebg ,_fdaa ,_faga ,op );case _dbdg :_geag =_begba (src ,dst ,_gdbb ,_gfgb ,_cfebg ,_fdaa ,_faga ,_ccg ,_edd ,_bcab ,op );default:_geag =_egga (src ,dst ,_gdbb ,_gfgb ,_cfebg ,_fdaa ,_faga ,_ccg ,_edd ,_bcab ,op ,_acfa );};return _geag ;};var (_ffff =_edf ();_bbac =_beg ();_gbgdc =_dfb (););func (_fcc *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _fcc .addBorderGeneral (left ,right ,top ,bot ,val );};func (_ecfc *ClassedPoints )ySortFunction ()func (_bcddb int ,_ddgc int )bool {return func (_dgfb ,_adgb int )bool {return _ecfc .YAtIndex (_dgfb )< _ecfc .YAtIndex (_adgb )};};func _geac (_dfdf ,_dccf ,_eegdc *Bitmap )(*Bitmap ,error ){const _dcef ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _dccf ==nil {return nil ,_fg .Error (_dcef ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eegdc ==nil {return nil ,_fg .Error (_dcef ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bgbc error ;switch {case _dfdf ==_dccf :if _bgbc =_dfdf .RasterOperation (0,0,_dccf .Width ,_dccf .Height ,PixNotSrcAndDst ,_eegdc ,0,0);_bgbc !=nil {return nil ,_fg .Wrap (_bgbc ,_dcef ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _dfdf ==_eegdc :if _bgbc =_dfdf .RasterOperation (0,0,_dccf .Width ,_dccf .Height ,PixNotSrcAndDst ,_dccf ,0,0);_bgbc !=nil {return nil ,_fg .Wrap (_bgbc ,_dcef ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_dfdf ,_bgbc =_cfdcc (_dfdf ,_dccf );if _bgbc !=nil {return nil ,_fg .Wrap (_bgbc ,_dcef ,"");};if _bgbc =_dfdf .RasterOperation (0,0,_dccf .Width ,_dccf .Height ,PixNotSrcAndDst ,_eegdc ,0,0);_bgbc !=nil {return nil ,_fg .Wrap (_bgbc ,_dcef ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _dfdf ,nil ;};func _cffa (_fbcfb *Bitmap ,_gdag ,_decg ,_gcdb ,_gdef int ,_dcefc RasterOperator ){if _gdag < 0{_gcdb +=_gdag ;_gdag =0;};_ada :=_gdag +_gcdb -_fbcfb .Width ;if _ada > 0{_gcdb -=_ada ;};if _decg < 0{_gdef +=_decg ;_decg =0;};_cddb :=_decg +_gdef -_fbcfb .Height ;if _cddb > 0{_gdef -=_cddb ;};if _gcdb <=0||_gdef <=0{return ;};if (_gdag &7)==0{_cbed (_fbcfb ,_gdag ,_decg ,_gcdb ,_gdef ,_dcefc );}else {_ccfe (_fbcfb ,_gdag ,_decg ,_gcdb ,_gdef ,_dcefc );};};var _bag [256]uint8 ;func TstGetScaledSymbol (t *_c .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_adef ,_aabgb :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_g .NoError (t ,_aabgb );return _adef ;};type SizeSelection int ;func (_aacd *Bitmap )setEightBytes (_ffgg int ,_bbaf uint64 )error {_cee :=_aacd .RowStride -(_ffgg %_aacd .RowStride );if _aacd .RowStride !=_aacd .Width >>3{_cee --;};if _cee >=8{return _aacd .setEightFullBytes (_ffgg ,_bbaf );};return _aacd .setEightPartlyBytes (_ffgg ,_cee ,_bbaf );};func (_ffcd *Bitmaps )makeSizeIndicator (_bdbe ,_cdfg int ,_caed LocationFilter ,_ffde SizeComparison )(_ddfe *_e .NumSlice ,_afaga error ){const _efdb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _ffcd ==nil {return nil ,_fg .Error (_efdb ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _caed {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_fg .Errorf (_efdb ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_caed );};switch _ffde {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_fg .Errorf (_efdb ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_ffde );};_ddfe =&_e .NumSlice {};var (_caced ,_geagg ,_eage int ;_bcaf *Bitmap ;);for _ ,_bcaf =range _ffcd .Values {_caced =0;_geagg ,_eage =_bcaf .Width ,_bcaf .Height ;switch _caed {case LocSelectWidth :if (_ffde ==SizeSelectIfLT &&_geagg < _bdbe )||(_ffde ==SizeSelectIfGT &&_geagg > _bdbe )||(_ffde ==SizeSelectIfLTE &&_geagg <=_bdbe )||(_ffde ==SizeSelectIfGTE &&_geagg >=_bdbe )||(_ffde ==SizeSelectIfEQ &&_geagg ==_bdbe ){_caced =1;};case LocSelectHeight :if (_ffde ==SizeSelectIfLT &&_eage < _cdfg )||(_ffde ==SizeSelectIfGT &&_eage > _cdfg )||(_ffde ==SizeSelectIfLTE &&_eage <=_cdfg )||(_ffde ==SizeSelectIfGTE &&_eage >=_cdfg )||(_ffde ==SizeSelectIfEQ &&_eage ==_cdfg ){_caced =1;};case LocSelectIfEither :if (_ffde ==SizeSelectIfLT &&(_geagg < _bdbe ||_eage < _cdfg ))||(_ffde ==SizeSelectIfGT &&(_geagg > _bdbe ||_eage > _cdfg ))||(_ffde ==SizeSelectIfLTE &&(_geagg <=_bdbe ||_eage <=_cdfg ))||(_ffde ==SizeSelectIfGTE &&(_geagg >=_bdbe ||_eage >=_cdfg ))||(_ffde ==SizeSelectIfEQ &&(_geagg ==_bdbe ||_eage ==_cdfg )){_caced =1;};case LocSelectIfBoth :if (_ffde ==SizeSelectIfLT &&(_geagg < _bdbe &&_eage < _cdfg ))||(_ffde ==SizeSelectIfGT &&(_geagg > _bdbe &&_eage > _cdfg ))||(_ffde ==SizeSelectIfLTE &&(_geagg <=_bdbe &&_eage <=_cdfg ))||(_ffde ==SizeSelectIfGTE &&(_geagg >=_bdbe &&_eage >=_cdfg ))||(_ffde ==SizeSelectIfEQ &&(_geagg ==_bdbe &&_eage ==_cdfg )){_caced =1;};};_ddfe .AddInt (_caced );};return _ddfe ,nil ;};func _cafeb (_eada *Bitmap ,_agegd *_e .Stack ,_fdde ,_fcaa int )(_dafab *_a .Rectangle ,_gfag error ){const _fafe ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _eada ==nil {return nil ,_fg .Error (_fafe ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _agegd ==nil {return nil ,_fg .Error (_fafe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_cffe ,_deacf :=_eada .Width ,_eada .Height ;_dbbg :=_cffe -1;_gceac :=_deacf -1;if _fdde < 0||_fdde > _dbbg ||_fcaa < 0||_fcaa > _gceac ||!_eada .GetPixel (_fdde ,_fcaa ){return nil ,nil ;};var _cbdd *_a .Rectangle ;_cbdd ,_gfag =Rect (100000,100000,0,0);if _gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"");};if _gfag =_gddf (_agegd ,_fdde ,_fdde ,_fcaa ,1,_gceac ,_cbdd );_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gfag =_gddf (_agegd ,_fdde ,_fdde ,_fcaa +1,-1,_gceac ,_cbdd );_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cbdd .Min .X ,_cbdd .Max .X =_fdde ,_fdde ;_cbdd .Min .Y ,_cbdd .Max .Y =_fcaa ,_fcaa ;var (_ecbdga *fillSegment ;_egfdb int ;);for _agegd .Len ()> 0{if _ecbdga ,_gfag =_dfbd (_agegd );_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"");};_fcaa =_ecbdga ._cddc ;for _fdde =_ecbdga ._gdbed ;_fdde >=0&&_eada .GetPixel (_fdde ,_fcaa );_fdde --{if _gfag =_eada .SetPixel (_fdde ,_fcaa ,0);_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"");};};if _fdde >=_ecbdga ._gdbed {for _fdde ++;_fdde <=_ecbdga ._cfgec &&_fdde <=_dbbg &&!_eada .GetPixel (_fdde ,_fcaa );_fdde ++{};_egfdb =_fdde ;if !(_fdde <=_ecbdga ._cfgec &&_fdde <=_dbbg ){continue ;};}else {_egfdb =_fdde +1;if _egfdb < _ecbdga ._gdbed -1{if _gfag =_gddf (_agegd ,_egfdb ,_ecbdga ._gdbed -1,_ecbdga ._cddc ,-_ecbdga ._dbdf ,_gceac ,_cbdd );_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_fdde =_ecbdga ._gdbed +1;};for {for ;_fdde <=_dbbg &&_eada .GetPixel (_fdde ,_fcaa );_fdde ++{if _gfag =_eada .SetPixel (_fdde ,_fcaa ,0);_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _gfag =_gddf (_agegd ,_egfdb ,_fdde -1,_ecbdga ._cddc ,_ecbdga ._dbdf ,_gceac ,_cbdd );_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fdde > _ecbdga ._cfgec +1{if _gfag =_gddf (_agegd ,_ecbdga ._cfgec +1,_fdde -1,_ecbdga ._cddc ,-_ecbdga ._dbdf ,_gceac ,_cbdd );_gfag !=nil {return nil ,_fg .Wrap (_gfag ,_fafe ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _fdde ++;_fdde <=_ecbdga ._cfgec &&_fdde <=_dbbg &&!_eada .GetPixel (_fdde ,_fcaa );_fdde ++{};_egfdb =_fdde ;if !(_fdde <=_ecbdga ._cfgec &&_fdde <=_dbbg ){break ;};};};_cbdd .Max .X ++;_cbdd .Max .Y ++;return _cbdd ,nil ;};type byWidth Bitmaps ;func _aggb (_gabd ,_bdc *Bitmap ,_beac ,_gabc ,_dgcb ,_dede ,_bgcc int ,_gbb CombinationOperator )error {var _eecg int ;_dgagd :=func (){_eecg ++;_dgcb +=_bdc .RowStride ;_dede +=_gabd .RowStride ;_bgcc +=_gabd .RowStride };for _eecg =_beac ;_eecg < _gabc ;_dgagd (){_bcef :=_dgcb ;for _dcbc :=_dede ;_dcbc <=_bgcc ;_dcbc ++{_cbda ,_abbb :=_bdc .GetByte (_bcef );if _abbb !=nil {return _abbb ;};_gefe ,_abbb :=_gabd .GetByte (_dcbc );if _abbb !=nil {return _abbb ;};if _abbb =_bdc .SetByte (_bcef ,_aeef (_cbda ,_gefe ,_gbb ));_abbb !=nil {return _abbb ;};_bcef ++;};};return nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_dfdd float64 ,_ffbf error ){const _faaf ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _dfdd ,_fg .Error (_faaf ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _dfdd ,_fg .Error (_faaf ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _dfdd ,_fg .Error (_faaf ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cgba ,_aff :=bm1 .Width ,bm1 .Height ;_ggeg ,_eagaa :=bm2 .Width ,bm2 .Height ;if _cfg (_cgba -_ggeg )> maxDiffW {return 0,nil ;};if _cfg (_aff -_eagaa )> maxDiffH {return 0,nil ;};var _caa ,_cafee int ;if delX >=0{_caa =int (delX +0.5);}else {_caa =int (delX -0.5);};if delY >=0{_cafee =int (delY +0.5);}else {_cafee =int (delY -0.5);};_ggge :=bm1 .createTemplate ();if _ffbf =_ggge .RasterOperation (_caa ,_cafee ,_ggeg ,_eagaa ,PixSrc ,bm2 ,0,0);_ffbf !=nil {return _dfdd ,_fg .Wrap (_ffbf ,_faaf ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ffbf =_ggge .RasterOperation (0,0,_cgba ,_aff ,PixSrcAndDst ,bm1 ,0,0);_ffbf !=nil {return _dfdd ,_fg .Wrap (_ffbf ,_faaf ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_acfc :=_ggge .countPixels ();_dfdd =float64 (_acfc )*float64 (_acfc )/(float64 (area1 )*float64 (area2 ));return _dfdd ,nil ;};var _dege =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func TstNSymbol (t *_c .T ,scale ...int )*Bitmap {_cgea ,_fbed :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_g .NoError (t ,_fbed );return TstGetScaledSymbol (t ,_cgea ,scale ...);};func (_edag *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _gbgfb ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_eebf ,_cefe :=_edag .selectByIndexes (idx );if _cefe !=nil {return nil ,_fg .Wrap (_cefe ,_gbgfb ,"");};return _eebf ,nil ;};func _ffbfd (_edbaa ,_feeg *Bitmap ,_cgbd *Selection )(*Bitmap ,error ){const _gbcd ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _eegc error ;if _edbaa ,_eegc =_baca (_edbaa ,_feeg ,_cgbd );_eegc !=nil {return nil ,_eegc ;};_cbef ,_eegc :=_agbf (nil ,_feeg ,_cgbd );if _eegc !=nil {return nil ,_fg .Wrap (_eegc ,_gbcd ,"");};if _ ,_eegc =_eega (_edbaa ,_cbef ,_cgbd );_eegc !=nil {return nil ,_fg .Wrap (_eegc ,_gbcd ,"");};return _edbaa ,nil ;};func _begba (_ffdd ,_beff *Bitmap ,_bbcd ,_faae ,_cfgc ,_dea ,_efea ,_adcb ,_bagb ,_deff int ,_eacf CombinationOperator )error {var _dfa int ;_gbcc :=func (){_dfa ++;_cfgc +=_beff .RowStride ;_dea +=_ffdd .RowStride ;_efea +=_ffdd .RowStride };for _dfa =_bbcd ;_dfa < _faae ;_gbcc (){var _egfa uint16 ;_bdde :=_cfgc ;for _bcdb :=_dea ;_bcdb <=_efea ;_bcdb ++{_edca ,_acgf :=_beff .GetByte (_bdde );if _acgf !=nil {return _acgf ;};_gfaf ,_acgf :=_ffdd .GetByte (_bcdb );if _acgf !=nil {return _acgf ;};_egfa =(_egfa |uint16 (_gfaf ))<<uint (_deff );_gfaf =byte (_egfa >>8);if _bcdb ==_efea {_gfaf =_afac (uint (_adcb ),_gfaf );};if _acgf =_beff .SetByte (_bdde ,_aeef (_edca ,_gfaf ,_eacf ));_acgf !=nil {return _acgf ;};_bdde ++;_egfa <<=uint (_bagb );};};return nil ;};func (_fba *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fba .removeBorderGeneral (left ,right ,top ,bot );};func _dacfc (_dfgb ,_dcce *Bitmap ,_beca ,_dcbba int )(*Bitmap ,error ){const _cbaef ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _dcce ==nil {return nil ,_fg .Error (_cbaef ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _beca < 1||_dcbba < 1{return nil ,_fg .Error (_cbaef ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _beca ==1&&_dcbba ==1{_agce ,_gbde :=_cfdcc (_dfgb ,_dcce );if _gbde !=nil {return nil ,_fg .Wrap (_gbde ,_cbaef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _agce ,nil ;};if _beca ==1||_dcbba ==1{_aab :=SelCreateBrick (_dcbba ,_beca ,_dcbba /2,_beca /2,SelHit );_ffggg ,_gddc :=_eega (_dfgb ,_dcce ,_aab );if _gddc !=nil {return nil ,_fg .Wrap (_gddc ,_cbaef ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ffggg ,nil ;};_cccg :=SelCreateBrick (1,_beca ,0,_beca /2,SelHit );_dbbc :=SelCreateBrick (_dcbba ,1,_dcbba /2,0,SelHit );_gec ,_dda :=_eega (nil ,_dcce ,_cccg );if _dda !=nil {return nil ,_fg .Wrap (_dda ,_cbaef ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_dfgb ,_dda =_eega (_dfgb ,_gec ,_dbbc );if _dda !=nil {return nil ,_fg .Wrap (_dda ,_cbaef ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _dfgb ,nil ;};func _baca (_bcdd ,_afdgf *Bitmap ,_ggabg *Selection )(*Bitmap ,error ){const _gbdec ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _bbab ,_gedd int ;if _afdgf ==nil {return nil ,_fg .Error (_gbdec ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ggabg ==nil {return nil ,_fg .Error (_gbdec ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_bbab =_ggabg .Width ;_gedd =_ggabg .Height ;if _bbab ==0||_gedd ==0{return nil ,_fg .Error (_gbdec ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _bcdd ==nil {return _afdgf .createTemplate (),nil ;};if _acgb :=_bcdd .resizeImageData (_afdgf );_acgb !=nil {return nil ,_acgb ;};return _bcdd ,nil ;};func TstVSymbol (t *_c .T ,scale ...int )*Bitmap {_cfga ,_fbgdc :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_g .NoError (t ,_fbgdc );return TstGetScaledSymbol (t ,_cfga ,scale ...);};func (_cecf *Bitmaps )AddBitmap (bm *Bitmap ){_cecf .Values =append (_cecf .Values ,bm )};func (_ecabg *Boxes )Get (i int )(*_a .Rectangle ,error ){const _ceeb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _ecabg ==nil {return nil ,_fg .Error (_ceeb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_ecabg )-1{return nil ,_fg .Errorf (_ceeb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_ecabg )[i ],nil ;};func (_daed *Bitmap )setTwoBytes (_bbd int ,_bfgf uint16 )error {if _bbd +1> len (_daed .Data )-1{return _fg .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bbd );};_daed .Data [_bbd ]=byte ((_bfgf &0xff00)>>8);_daed .Data [_bbd +1]=byte (_bfgf &0xff);return nil ;};type Point struct{X ,Y float32 ;};func _eca (_ba ,_cgd *Bitmap )(_eb error ){const _aaa ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_cba :=_cgd .RowStride ;_db :=_ba .RowStride ;_ga :=_cgd .RowStride *4-_ba .RowStride ;var (_gb ,_aee byte ;_bc uint32 ;_df ,_ee ,_fda ,_cd ,_gff ,_bac ,_fdg int ;);for _fda =0;_fda < _cgd .Height ;_fda ++{_df =_fda *_cba ;_ee =4*_fda *_db ;for _cd =0;_cd < _cba ;_cd ++{_gb =_cgd .Data [_df +_cd ];_bc =_bbac [_gb ];_bac =_ee +_cd *4;if _ga !=0&&(_cd +1)*4> _ba .RowStride {for _gff =_ga ;_gff > 0;_gff --{_aee =byte ((_bc >>uint (_gff *8))&0xff);_fdg =_bac +(_ga -_gff );if _eb =_ba .SetByte (_fdg ,_aee );_eb !=nil {return _fg .Wrapf (_eb ,_aaa ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_gff );};};}else if _eb =_ba .setFourBytes (_bac ,_bc );_eb !=nil {return _fg .Wrap (_eb ,_aaa ,"");};if _eb =_ba .setFourBytes (_ee +_cd *4,_bbac [_cgd .Data [_df +_cd ]]);_eb !=nil {return _fg .Wrap (_eb ,_aaa ,"");};};for _gff =1;_gff < 4;_gff ++{for _cd =0;_cd < _db ;_cd ++{if _eb =_ba .SetByte (_ee +_gff *_db +_cd ,_ba .Data [_ee +_cd ]);_eb !=nil {return _fg .Wrapf (_eb ,_aaa ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_gff ,_cd );};};};};return nil ;};func (_eec *Bitmap )ToImage ()_a .Image {_cagb ,_dgcd :=_ea .NewImage (_eec .Width ,_eec .Height ,1,1,_eec .Data ,nil ,nil );if _dgcd !=nil {_gf .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dgcd );};return _cagb ;};func (_bge *BitmapsArray )AddBox (box *_a .Rectangle ){_bge .Boxes =append (_bge .Boxes ,box )};func _bgaa (_cef ,_ceea *Bitmap ,_gede ,_agcd int )(*Bitmap ,error ){const _abec ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _ceea ==nil {return nil ,_fg .Error (_abec ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gede < 1&&_agcd < 1{return nil ,_fg .Error (_abec ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _gede ==1&&_agcd ==1{return _ceea .Copy (),nil ;};if _gede ==1||_agcd ==1{var _bffff error ;_egce :=SelCreateBrick (_agcd ,_gede ,_agcd /2,_gede /2,SelHit );_cef ,_bffff =_ffbe (_cef ,_ceea ,_egce );if _bffff !=nil {return nil ,_fg .Wrap (_bffff ,_abec ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _cef ,nil ;};_befd :=SelCreateBrick (1,_gede ,0,_gede /2,SelHit );_cce :=SelCreateBrick (_agcd ,1,_agcd /2,0,SelHit );_dceea ,_ageb :=_eega (nil ,_ceea ,_befd );if _ageb !=nil {return nil ,_fg .Wrap (_ageb ,_abec ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_cef ,_ageb =_eega (_cef ,_dceea ,_cce );if _ageb !=nil {return nil ,_fg .Wrap (_ageb ,_abec ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_ageb =_agbf (_dceea ,_cef ,_befd );if _ageb !=nil {return nil ,_fg .Wrap (_ageb ,_abec ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_ageb =_agbf (_cef ,_dceea ,_cce );if _ageb !=nil {return nil ,_fg .Wrap (_ageb ,_abec ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cef ,nil ;};func (_ffgfd *BitmapsArray )GetBox (i int )(*_a .Rectangle ,error ){const _abfa ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _ffgfd ==nil {return nil ,_fg .Error (_abfa ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_ffgfd .Boxes )-1{return nil ,_fg .Errorf (_abfa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ffgfd .Boxes [i ],nil ;};func TstWSymbol (t *_c .T ,scale ...int )*Bitmap {_fgae ,_fegb :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_g .NoError (t ,_fegb );return TstGetScaledSymbol (t ,_fgae ,scale ...);};func (_fgcf *Bitmap )GetUnpaddedData ()([]byte ,error ){_ecf :=uint (_fgcf .Width &0x07);if _ecf ==0{return _fgcf .Data ,nil ;};_cafb :=_fgcf .Width *_fgcf .Height ;if _cafb %8!=0{_cafb >>=3;_cafb ++;}else {_cafb >>=3;};_gbfg :=make ([]byte ,_cafb );_ebcg :=_gg .NewWriterMSB (_gbfg );const _ffdg ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _fac :=0;_fac < _fgcf .Height ;_fac ++{for _fab :=0;_fab < _fgcf .RowStride ;_fab ++{_gcfb :=_fgcf .Data [_fac *_fgcf .RowStride +_fab ];if _fab !=_fgcf .RowStride -1{_ecbc :=_ebcg .WriteByte (_gcfb );if _ecbc !=nil {return nil ,_fg .Wrap (_ecbc ,_ffdg ,"");};continue ;};for _gab :=uint (0);_gab < _ecf ;_gab ++{_eaga :=_ebcg .WriteBit (int (_gcfb >>(7-_gab )&0x01));if _eaga !=nil {return nil ,_fg .Wrap (_eaga ,_ffdg ,"");};};};};return _gbfg ,nil ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func _fdbc (_fafb *Bitmap ,_cfcb *Bitmap ,_afebg *Selection ,_efaeb **Bitmap )(*Bitmap ,error ){const _aeda ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _cfcb ==nil {return nil ,_fg .Error (_aeda ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _afebg ==nil {return nil ,_fg .Error (_aeda ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_ddaf ,_gba :=_afebg .Height ,_afebg .Width ;if _ddaf ==0||_gba ==0{return nil ,_fg .Error (_aeda ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _fafb ==nil {_fafb =_cfcb .createTemplate ();*_efaeb =_cfcb ;return _fafb ,nil ;};_fafb .Width =_cfcb .Width ;_fafb .Height =_cfcb .Height ;_fafb .RowStride =_cfcb .RowStride ;_fafb .Color =_cfcb .Color ;_fafb .Data =make ([]byte ,_cfcb .RowStride *_cfcb .Height );if _fafb ==_cfcb {*_efaeb =_cfcb .Copy ();}else {*_efaeb =_cfcb ;};return _fafb ,nil ;};type SelectionValue int ;type Bitmaps struct{Values []*Bitmap ;Boxes []*_a .Rectangle ;};func TstESymbol (t *_c .T ,scale ...int )*Bitmap {_aaded ,_dfac :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_g .NoError (t ,_dfac );return TstGetScaledSymbol (t ,_aaded ,scale ...);};func (_fgde *Bitmap )connComponentsBB (_fcb int )(_bddf *Boxes ,_gfef error ){const _cacce ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _fcb !=4&&_fcb !=8{return nil ,_fg .Error (_cacce ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _fgde .Zero (){return &Boxes {},nil ;};_fgde .setPadBits (0);_dgfg ,_gfef :=_cfdcc (nil ,_fgde );if _gfef !=nil {return nil ,_fg .Wrap (_gfef ,_cacce ,"\u0062\u006d\u0031");};_cdaa :=&_e .Stack {};_cdaa .Aux =&_e .Stack {};_bddf =&Boxes {};var (_faeb ,_gfee int ;_bdb _a .Point ;_fggd bool ;_ffge *_a .Rectangle ;);for {if _bdb ,_fggd ,_gfef =_dgfg .nextOnPixel (_gfee ,_faeb );_gfef !=nil {return nil ,_fg .Wrap (_gfef ,_cacce ,"");};if !_fggd {break ;};if _ffge ,_gfef =_fdfce (_dgfg ,_cdaa ,_bdb .X ,_bdb .Y ,_fcb );_gfef !=nil {return nil ,_fg .Wrap (_gfef ,_cacce ,"");};if _gfef =_bddf .Add (_ffge );_gfef !=nil {return nil ,_fg .Wrap (_gfef ,_cacce ,"");};_gfee =_bdb .X ;_faeb =_bdb .Y ;};return _bddf ,nil ;};func (_gfc *Bitmap )nextOnPixelLow (_cff ,_ecbd ,_gbcb ,_gcga ,_ddde int )(_daa _a .Point ,_dafa bool ,_bgg error ){const _cdda ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_debd int ;_gfcd byte ;);_dcde :=_ddde *_gbcb ;_gdbe :=_dcde +(_gcga /8);if _gfcd ,_bgg =_gfc .GetByte (_gdbe );_bgg !=nil {return _daa ,false ,_fg .Wrap (_bgg ,_cdda ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _gfcd !=0{_dbfe :=_gcga -(_gcga %8)+7;for _debd =_gcga ;_debd <=_dbfe &&_debd < _cff ;_debd ++{if _gfc .GetPixel (_debd ,_ddde ){_daa .X =_debd ;_daa .Y =_ddde ;return _daa ,true ,nil ;};};};_decf :=(_gcga /8)+1;_debd =8*_decf ;var _dbeg int ;for _gdbe =_dcde +_decf ;_debd < _cff ;_gdbe ,_debd =_gdbe +1,_debd +8{if _gfcd ,_bgg =_gfc .GetByte (_gdbe );_bgg !=nil {return _daa ,false ,_fg .Wrap (_bgg ,_cdda ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _gfcd ==0{continue ;};for _dbeg =0;_dbeg < 8&&_debd < _cff ;_dbeg ,_debd =_dbeg +1,_debd +1{if _gfc .GetPixel (_debd ,_ddde ){_daa .X =_debd ;_daa .Y =_ddde ;return _daa ,true ,nil ;};};};for _gea :=_ddde +1;_gea < _ecbd ;_gea ++{_dcde =_gea *_gbcb ;for _gdbe ,_debd =_dcde ,0;_debd < _cff ;_gdbe ,_debd =_gdbe +1,_debd +8{if _gfcd ,_bgg =_gfc .GetByte (_gdbe );_bgg !=nil {return _daa ,false ,_fg .Wrap (_bgg ,_cdda ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _gfcd ==0{continue ;};for _dbeg =0;_dbeg < 8&&_debd < _cff ;_dbeg ,_debd =_dbeg +1,_debd +1{if _gfc .GetPixel (_debd ,_gea ){_daa .X =_debd ;_daa .Y =_gea ;return _daa ,true ,nil ;};};};};return _daa ,false ,nil ;};func _deca (_agd ,_bdea int )int {if _agd < _bdea {return _agd ;};return _bdea ;};func (_cbfb *Bitmap )equivalent (_ade *Bitmap )bool {if _cbfb ==_ade {return true ;};if !_cbfb .SizesEqual (_ade ){return false ;};_baec :=_eccb (_cbfb ,_ade ,CmbOpXor );_bba :=_cbfb .countPixels ();_gbd :=int (0.25*float32 (_bba ));if _baec .thresholdPixelSum (_gbd ){return false ;};var (_acf [9][9]int ;_dbcd [18][9]int ;_gae [9][18]int ;_fbab int ;_fbae int ;);_ebg :=9;_adc :=_cbfb .Height /_ebg ;_bgfb :=_cbfb .Width /_ebg ;_cgg ,_fbd :=_adc /2,_bgfb /2;if _adc < _bgfb {_cgg =_bgfb /2;_fbd =_adc /2;};_fcea :=float64 (_cgg )*float64 (_fbd )*_fe .Pi ;_feaa :=int (float64 (_adc *_bgfb /2)*0.9);_fad :=int (float64 (_bgfb *_adc /2)*0.9);for _faeg :=0;_faeg < _ebg ;_faeg ++{_afca :=_bgfb *_faeg +_fbab ;var _fecc int ;if _faeg ==_ebg -1{_fbab =0;_fecc =_cbfb .Width ;}else {_fecc =_afca +_bgfb ;if ((_cbfb .Width -_fbab )%_ebg )> 0{_fbab ++;_fecc ++;};};for _afag :=0;_afag < _ebg ;_afag ++{_ebcgg :=_adc *_afag +_fbae ;var _cfeb int ;if _afag ==_ebg -1{_fbae =0;_cfeb =_cbfb .Height ;}else {_cfeb =_ebcgg +_adc ;if (_cbfb .Height -_fbae )%_ebg > 0{_fbae ++;_cfeb ++;};};var _feba ,_abe ,_fcee ,_cbe int ;_addf :=(_afca +_fecc )/2;_agf :=(_ebcgg +_cfeb )/2;for _ebf :=_afca ;_ebf < _fecc ;_ebf ++{for _bgfa :=_ebcgg ;_bgfa < _cfeb ;_bgfa ++{if _baec .GetPixel (_ebf ,_bgfa ){if _ebf < _addf {_feba ++;}else {_abe ++;};if _bgfa < _agf {_cbe ++;}else {_fcee ++;};};};};_acf [_faeg ][_afag ]=_feba +_abe ;_dbcd [_faeg *2][_afag ]=_feba ;_dbcd [_faeg *2+1][_afag ]=_abe ;_gae [_faeg ][_afag *2]=_cbe ;_gae [_faeg ][_afag *2+1]=_fcee ;};};for _gde :=0;_gde < _ebg *2-1;_gde ++{for _gdga :=0;_gdga < (_ebg -1);_gdga ++{var _bbg int ;for _bece :=0;_bece < 2;_bece ++{for _dcdg :=0;_dcdg < 2;_dcdg ++{_bbg +=_dbcd [_gde +_bece ][_gdga +_dcdg ];};};if _bbg > _fad {return false ;};};};for _cdgg :=0;_cdgg < (_ebg -1);_cdgg ++{for _dgag :=0;_dgag < ((_ebg *2)-1);_dgag ++{var _egbb int ;for _ffeg :=0;_ffeg < 2;_ffeg ++{for _fbad :=0;_fbad < 2;_fbad ++{_egbb +=_gae [_cdgg +_ffeg ][_dgag +_fbad ];};};if _egbb > _feaa {return false ;};};};for _cggg :=0;_cggg < (_ebg -2);_cggg ++{for _gce :=0;_gce < (_ebg -2);_gce ++{var _ffac ,_ebec int ;for _afe :=0;_afe < 3;_afe ++{for _fecg :=0;_fecg < 3;_fecg ++{if _afe ==_fecg {_ffac +=_acf [_cggg +_afe ][_gce +_fecg ];};if (2-_afe )==_fecg {_ebec +=_acf [_cggg +_afe ][_gce +_fecg ];};};};if _ffac > _fad ||_ebec > _fad {return false ;};};};for _aebc :=0;_aebc < (_ebg -1);_aebc ++{for _gfd :=0;_gfd < (_ebg -1);_gfd ++{var _dbee int ;for _adeb :=0;_adeb < 2;_adeb ++{for _bgb :=0;_bgb < 2;_bgb ++{_dbee +=_acf [_aebc +_adeb ][_gfd +_bgb ];};};if float64 (_dbee )> _fcea {return false ;};};};return true ;};func NewClassedPoints (points *Points ,classes _e .IntSlice )(*ClassedPoints ,error ){const _dfbge ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_fg .Error (_dfbge ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_fg .Error (_dfbge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_dgff :=&ClassedPoints {Points :points ,IntSlice :classes };if _bcgf :=_dgff .validateIntSlice ();_bcgf !=nil {return nil ,_fg .Wrap (_bcgf ,_dfbge ,"");};return _dgff ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _bdef ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_bgca ,_gdea :=p1 .Width ,p1 .Height ;_baee ,_bacgf :=p3 .Width ,p3 .Height ;if _e .Abs (_bgca -_baee )> maxDiffW {return false ,nil ;};if _e .Abs (_gdea -_bacgf )> maxDiffH {return false ,nil ;};_abga :=int (delX +_e .Sign (delX )*0.5);_dacf :=int (delY +_e .Sign (delY )*0.5);var _dbdd error ;_fgfa :=p1 .CreateTemplate ();if _dbdd =_fgfa .RasterOperation (0,0,_bgca ,_gdea ,PixSrc ,p1 ,0,0);_dbdd !=nil {return false ,_fg .Wrap (_dbdd ,_bdef ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dbdd =_fgfa .RasterOperation (_abga ,_dacf ,_bgca ,_gdea ,PixNotSrcAndDst ,p4 ,0,0);_dbdd !=nil {return false ,_fg .Wrap (_dbdd ,_bdef ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _fgfa .Zero (){return false ,nil ;};if _dbdd =_fgfa .RasterOperation (_abga ,_dacf ,_baee ,_bacgf ,PixSrc ,p3 ,0,0);_dbdd !=nil {return false ,_fg .Wrap (_dbdd ,_bdef ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _dbdd =_fgfa .RasterOperation (0,0,_baee ,_bacgf ,PixNotSrcAndDst ,p2 ,0,0);_dbdd !=nil {return false ,_fg .Wrap (_dbdd ,_bdef ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _fgfa .Zero (),nil ;};func (_cda *Bitmap )setFourBytes (_cfdc int ,_aaac uint32 )error {if _cfdc +3> len (_cda .Data )-1{return _fg .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_cfdc );};_cda .Data [_cfdc ]=byte ((_aaac &0xff000000)>>24);_cda .Data [_cfdc +1]=byte ((_aaac &0xff0000)>>16);_cda .Data [_cfdc +2]=byte ((_aaac &0xff00)>>8);_cda .Data [_cfdc +3]=byte (_aaac &0xff);return nil ;};func _geae (_aead ,_dfcaf *Bitmap ,_bacbf ,_bcg int )(*Bitmap ,error ){const _ceee ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _dfcaf ==nil {_gf .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_fg .Error (_ceee ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bacbf < 1||_bcg < 1{return nil ,_fg .Error (_ceee ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _bacbf ==1&&_bcg ==1{_gfeg ,_afacc :=_cfdcc (_aead ,_dfcaf );if _afacc !=nil {return nil ,_fg .Wrap (_afacc ,_ceee ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gfeg ,nil ;};if _bacbf ==1||_bcg ==1{_dfaf :=SelCreateBrick (_bcg ,_bacbf ,_bcg /2,_bacbf /2,SelHit );_ebebe ,_dcbbf :=_agbf (_aead ,_dfcaf ,_dfaf );if _dcbbf !=nil {return nil ,_fg .Wrap (_dcbbf ,_ceee ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ebebe ,nil ;};_fabb :=SelCreateBrick (1,_bacbf ,0,_bacbf /2,SelHit );_eaeb :=SelCreateBrick (_bcg ,1,_bcg /2,0,SelHit );_dcac ,_fgdag :=_agbf (nil ,_dfcaf ,_fabb );if _fgdag !=nil {return nil ,_fg .Wrap (_fgdag ,_ceee ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_aead ,_fgdag =_agbf (_aead ,_dcac ,_eaeb );if _fgdag !=nil {return nil ,_fg .Wrap (_fgdag ,_ceee ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _aead ,nil ;};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_a .Rectangle ;};func (_ddgd *ClassedPoints )XAtIndex (i int )float32 {return (*_ddgd .Points )[_ddgd .IntSlice [i ]].X };func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _aeef (oldByte ,newByte ,op );};func (_ecdf *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_ggee *Bitmaps ,_fcfdc error ){const _ceab ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _ecdf ==nil {return nil ,_fg .Error (_ceab ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_fg .Errorf (_ceab ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_fg .Errorf (_ceab ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_fbce ,_fcfdc :=_ecdf .makeSizeIndicator (width ,height ,tp ,relation );if _fcfdc !=nil {return nil ,_fg .Wrap (_fcfdc ,_ceab ,"");};_ggee ,_fcfdc =_ecdf .selectByIndicator (_fbce );if _fcfdc !=nil {return nil ,_fg .Wrap (_fcfdc ,_ceab ,"");};return _ggee ,nil ;};func TstDSymbol (t *_c .T ,scale ...int )*Bitmap {_aagf ,_dgfbf :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_g .NoError (t ,_dgfbf );return TstGetScaledSymbol (t ,_aagf ,scale ...);};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gdaa float64 ,_begf error ){const _cggaa ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_fg .Error (_cggaa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_fg .Error (_cggaa ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_fg .Error (_cggaa ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_aebd ,_fga :=bm1 .Width ,bm1 .Height ;_baea ,_dgba :=bm2 .Width ,bm2 .Height ;_abbc :=_cfg (_aebd -_baea );if _abbc > maxDiffW {return 0,nil ;};_egccd :=_cfg (_fga -_dgba );if _egccd > maxDiffH {return 0,nil ;};var _acgd ,_ccca int ;if delX >=0{_acgd =int (delX +0.5);}else {_acgd =int (delX -0.5);};if delY >=0{_ccca =int (delY +0.5);}else {_ccca =int (delY -0.5);};_ccfc :=_cbdf (_ccca ,0);_eeed :=_deca (_dgba +_ccca ,_fga );_cagfd :=bm1 .RowStride *_ccfc ;_baae :=bm2 .RowStride *(_ccfc -_ccca );_fadg :=_cbdf (_acgd ,0);_dcge :=_deca (_baea +_acgd ,_aebd );_ceec :=bm2 .RowStride ;var _ecbf ,_deacd int ;if _acgd >=8{_ecbf =_acgd >>3;_cagfd +=_ecbf ;_fadg -=_ecbf <<3;_dcge -=_ecbf <<3;_acgd &=7;}else if _acgd <=-8{_deacd =-((_acgd +7)>>3);_baae +=_deacd ;_ceec -=_deacd ;_acgd +=_deacd <<3;};if _fadg >=_dcge ||_ccfc >=_eeed {return 0,nil ;};_ecbdg :=(_dcge +7)>>3;var (_cdgb ,_feeb ,_gcd byte ;_daedf ,_cecg ,_fcbf int ;);switch {case _acgd ==0:for _fcbf =_ccfc ;_fcbf < _eeed ;_fcbf ,_cagfd ,_baae =_fcbf +1,_cagfd +bm1 .RowStride ,_baae +bm2 .RowStride {for _cecg =0;_cecg < _ecbdg ;_cecg ++{_gcd =bm1 .Data [_cagfd +_cecg ]&bm2 .Data [_baae +_cecg ];_daedf +=tab [_gcd ];};};case _acgd > 0:if _ceec < _ecbdg {for _fcbf =_ccfc ;_fcbf < _eeed ;_fcbf ,_cagfd ,_baae =_fcbf +1,_cagfd +bm1 .RowStride ,_baae +bm2 .RowStride {_cdgb ,_feeb =bm1 .Data [_cagfd ],bm2 .Data [_baae ]>>uint (_acgd );_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];for _cecg =1;_cecg < _ceec ;_cecg ++{_cdgb ,_feeb =bm1 .Data [_cagfd +_cecg ],(bm2 .Data [_baae +_cecg ]>>uint (_acgd ))|(bm2 .Data [_baae +_cecg -1]<<uint (8-_acgd ));_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];};_cdgb =bm1 .Data [_cagfd +_cecg ];_feeb =bm2 .Data [_baae +_cecg -1]<<uint (8-_acgd );_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];};}else {for _fcbf =_ccfc ;_fcbf < _eeed ;_fcbf ,_cagfd ,_baae =_fcbf +1,_cagfd +bm1 .RowStride ,_baae +bm2 .RowStride {_cdgb ,_feeb =bm1 .Data [_cagfd ],bm2 .Data [_baae ]>>uint (_acgd );_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];for _cecg =1;_cecg < _ecbdg ;_cecg ++{_cdgb =bm1 .Data [_cagfd +_cecg ];_feeb =(bm2 .Data [_baae +_cecg ]>>uint (_acgd ))|(bm2 .Data [_baae +_cecg -1]<<uint (8-_acgd ));_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];};};};default:if _ecbdg < _ceec {for _fcbf =_ccfc ;_fcbf < _eeed ;_fcbf ,_cagfd ,_baae =_fcbf +1,_cagfd +bm1 .RowStride ,_baae +bm2 .RowStride {for _cecg =0;_cecg < _ecbdg ;_cecg ++{_cdgb =bm1 .Data [_cagfd +_cecg ];_feeb =bm2 .Data [_baae +_cecg ]<<uint (-_acgd );_feeb |=bm2 .Data [_baae +_cecg +1]>>uint (8+_acgd );_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];};};}else {for _fcbf =_ccfc ;_fcbf < _eeed ;_fcbf ,_cagfd ,_baae =_fcbf +1,_cagfd +bm1 .RowStride ,_baae +bm2 .RowStride {for _cecg =0;_cecg < _ecbdg -1;_cecg ++{_cdgb =bm1 .Data [_cagfd +_cecg ];_feeb =bm2 .Data [_baae +_cecg ]<<uint (-_acgd );_feeb |=bm2 .Data [_baae +_cecg +1]>>uint (8+_acgd );_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];};_cdgb =bm1 .Data [_cagfd +_cecg ];_feeb =bm2 .Data [_baae +_cecg ]<<uint (-_acgd );_gcd =_cdgb &_feeb ;_daedf +=tab [_gcd ];};};};_gdaa =float64 (_daedf )*float64 (_daedf )/(float64 (area1 )*float64 (area2 ));return _gdaa ,nil ;};func (_bebb *Bitmap )Equivalent (s *Bitmap )bool {return _bebb .equivalent (s )};type shift int ;func (_dcab *Points )Add (pt *Points )error {const _eaeg ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _dcab ==nil {return _fg .Error (_eaeg ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _fg .Error (_eaeg ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_dcab =append (*_dcab ,*pt ...);return nil ;};func (_fefd *Bitmaps )SortByWidth (){_aceb :=(*byWidth )(_fefd );_d .Sort (_aceb )};type Boxes []*_a .Rectangle ;func _fdfce (_aeddd *Bitmap ,_egfc *_e .Stack ,_gdcb ,_ccdc ,_agfc int )(_fade *_a .Rectangle ,_bbbaa error ){const _bggb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _aeddd ==nil {return nil ,_fg .Error (_bggb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _egfc ==nil {return nil ,_fg .Error (_bggb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _agfc {case 4:if _fade ,_bbbaa =_cafeb (_aeddd ,_egfc ,_gdcb ,_ccdc );_bbbaa !=nil {return nil ,_fg .Wrap (_bbbaa ,_bggb ,"");};return _fade ,nil ;case 8:if _fade ,_bbbaa =_aaacc (_aeddd ,_egfc ,_gdcb ,_ccdc );_bbbaa !=nil {return nil ,_fg .Wrap (_bbbaa ,_bggb ,"");};return _fade ,nil ;default:return nil ,_fg .Errorf (_bggb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_agfc );};};func _eccb (_bfdd ,_gaeb *Bitmap ,_abff CombinationOperator )*Bitmap {_ebda :=New (_bfdd .Width ,_bfdd .Height );for _bagf :=0;_bagf < len (_ebda .Data );_bagf ++{_ebda .Data [_bagf ]=_aeef (_bfdd .Data [_bagf ],_gaeb .Data [_bagf ],_abff );};return _ebda ;};func (_fgccd *byHeight )Len ()int {return len (_fgccd .Values )};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func _bdeac (_gbgf ,_efdd int ,_gfec string )*Selection {_gcgbg :=&Selection {Height :_gbgf ,Width :_efdd ,Name :_gfec };_gcgbg .Data =make ([][]SelectionValue ,_gbgf );for _aaed :=0;_aaed < _gbgf ;_aaed ++{_gcgbg .Data [_aaed ]=make ([]SelectionValue ,_efdd );};return _gcgbg ;};func _agdff (_dbbfc *Bitmap ,_fega *Bitmap ,_fbaed int )(_bacag error ){const _adaa ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_ccgd :=_deca (_dbbfc .Height ,_fega .Height );_eecge :=_deca (_dbbfc .RowStride ,_fega .RowStride );switch _fbaed {case 4:_bacag =_dceedc (_dbbfc ,_fega ,_ccgd ,_eecge );case 8:_bacag =_cafg (_dbbfc ,_fega ,_ccgd ,_eecge );default:return _fg .Errorf (_adaa ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_fbaed );};if _bacag !=nil {return _fg .Wrap (_bacag ,_adaa ,"");};return nil ;};func (_bfeaf *Bitmaps )SortByHeight (){_fcbb :=(*byHeight )(_bfeaf );_d .Sort (_fcbb )};func (_gcaea *Bitmaps )CountPixels ()*_e .NumSlice {_dcfa :=&_e .NumSlice {};for _ ,_ebfga :=range _gcaea .Values {_dcfa .AddInt (_ebfga .CountPixels ());};return _dcfa ;};func (_ddd *Bitmap )addBorderGeneral (_ddcd ,_aca ,_faa ,_def int ,_bfff int )(*Bitmap ,error ){const _egad ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _ddcd < 0||_aca < 0||_faa < 0||_def < 0{return nil ,_fg .Error (_egad ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_bed ,_gcg :=_ddd .Width ,_ddd .Height ;_ead :=_bed +_ddcd +_aca ;_fec :=_gcg +_faa +_def ;_abg :=New (_ead ,_fec );_abg .Color =_ddd .Color ;_gdg :=PixClr ;if _bfff > 0{_gdg =PixSet ;};_edga :=_abg .RasterOperation (0,0,_ddcd ,_fec ,_gdg ,nil ,0,0);if _edga !=nil {return nil ,_fg .Wrap (_edga ,_egad ,"\u006c\u0065\u0066\u0074");};_edga =_abg .RasterOperation (_ead -_aca ,0,_aca ,_fec ,_gdg ,nil ,0,0);if _edga !=nil {return nil ,_fg .Wrap (_edga ,_egad ,"\u0072\u0069\u0067h\u0074");};_edga =_abg .RasterOperation (0,0,_ead ,_faa ,_gdg ,nil ,0,0);if _edga !=nil {return nil ,_fg .Wrap (_edga ,_egad ,"\u0074\u006f\u0070");};_edga =_abg .RasterOperation (0,_fec -_def ,_ead ,_def ,_gdg ,nil ,0,0);if _edga !=nil {return nil ,_fg .Wrap (_edga ,_egad ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_edga =_abg .RasterOperation (_ddcd ,_faa ,_bed ,_gcg ,PixSrc ,_ddd ,0,0);if _edga !=nil {return nil ,_fg .Wrap (_edga ,_egad ,"\u0063\u006f\u0070\u0079");};return _abg ,nil ;};func (_ceac Points )Get (i int )(Point ,error ){if i > len (_ceac )-1{return Point {},_fg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _ceac [i ],nil ;};func (_aadg *Bitmaps )String ()string {_beaa :=_b .Builder {};for _ ,_gac :=range _aadg .Values {_beaa .WriteString (_gac .String ());_beaa .WriteRune ('\n');};return _beaa .String ();};type Points []Point ;func (_edda *ClassedPoints )SortByY (){_edda ._gcee =_edda .ySortFunction ();_d .Sort (_edda )};func _beg ()(_dbd [256]uint32 ){for _ecg :=0;_ecg < 256;_ecg ++{if _ecg &0x01!=0{_dbd [_ecg ]|=0xf;};if _ecg &0x02!=0{_dbd [_ecg ]|=0xf0;};if _ecg &0x04!=0{_dbd [_ecg ]|=0xf00;};if _ecg &0x08!=0{_dbd [_ecg ]|=0xf000;};if _ecg &0x10!=0{_dbd [_ecg ]|=0xf0000;};if _ecg &0x20!=0{_dbd [_ecg ]|=0xf00000;};if _ecg &0x40!=0{_dbd [_ecg ]|=0xf000000;};if _ecg &0x80!=0{_dbd [_ecg ]|=0xf0000000;};};return _dbd ;};func _aaacc (_ebccb *Bitmap ,_dddg *_e .Stack ,_ebccbc ,_daceg int )(_dddd *_a .Rectangle ,_addc error ){const _gdfe ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ebccb ==nil {return nil ,_fg .Error (_gdfe ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dddg ==nil {return nil ,_fg .Error (_gdfe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_ebgf ,_cebd :=_ebccb .Width ,_ebccb .Height ;_ccgdf :=_ebgf -1;_fcce :=_cebd -1;if _ebccbc < 0||_ebccbc > _ccgdf ||_daceg < 0||_daceg > _fcce ||!_ebccb .GetPixel (_ebccbc ,_daceg ){return nil ,nil ;};_deggf :=_a .Rect (100000,100000,0,0);if _addc =_gddf (_dddg ,_ebccbc ,_ebccbc ,_daceg ,1,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _addc =_gddf (_dddg ,_ebccbc ,_ebccbc ,_daceg +1,-1,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_deggf .Min .X ,_deggf .Max .X =_ebccbc ,_ebccbc ;_deggf .Min .Y ,_deggf .Max .Y =_daceg ,_daceg ;var (_dcaeg *fillSegment ;_gbad int ;);for _dddg .Len ()> 0{if _dcaeg ,_addc =_dfbd (_dddg );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"");};_daceg =_dcaeg ._cddc ;for _ebccbc =_dcaeg ._gdbed -1;_ebccbc >=0&&_ebccb .GetPixel (_ebccbc ,_daceg );_ebccbc --{if _addc =_ebccb .SetPixel (_ebccbc ,_daceg ,0);_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _ebccbc >=_dcaeg ._gdbed -1{for {for _ebccbc ++;_ebccbc <=_dcaeg ._cfgec +1&&_ebccbc <=_ccgdf &&!_ebccb .GetPixel (_ebccbc ,_daceg );_ebccbc ++{};_gbad =_ebccbc ;if !(_ebccbc <=_dcaeg ._cfgec +1&&_ebccbc <=_ccgdf ){break ;};for ;_ebccbc <=_ccgdf &&_ebccb .GetPixel (_ebccbc ,_daceg );_ebccbc ++{if _addc =_ebccb .SetPixel (_ebccbc ,_daceg ,0);_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _addc =_gddf (_dddg ,_gbad ,_ebccbc -1,_dcaeg ._cddc ,_dcaeg ._dbdf ,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ebccbc > _dcaeg ._cfgec {if _addc =_gddf (_dddg ,_dcaeg ._cfgec +1,_ebccbc -1,_dcaeg ._cddc ,-_dcaeg ._dbdf ,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_gbad =_ebccbc +1;if _gbad < _dcaeg ._gdbed {if _addc =_gddf (_dddg ,_gbad ,_dcaeg ._gdbed -1,_dcaeg ._cddc ,-_dcaeg ._dbdf ,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_ebccbc =_dcaeg ._gdbed ;for {for ;_ebccbc <=_ccgdf &&_ebccb .GetPixel (_ebccbc ,_daceg );_ebccbc ++{if _addc =_ebccb .SetPixel (_ebccbc ,_daceg ,0);_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _addc =_gddf (_dddg ,_gbad ,_ebccbc -1,_dcaeg ._cddc ,_dcaeg ._dbdf ,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ebccbc > _dcaeg ._cfgec {if _addc =_gddf (_dddg ,_dcaeg ._cfgec +1,_ebccbc -1,_dcaeg ._cddc ,-_dcaeg ._dbdf ,_fcce ,&_deggf );_addc !=nil {return nil ,_fg .Wrap (_addc ,_gdfe ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _ebccbc ++;_ebccbc <=_dcaeg ._cfgec +1&&_ebccbc <=_ccgdf &&!_ebccb .GetPixel (_ebccbc ,_daceg );_ebccbc ++{};_gbad =_ebccbc ;if !(_ebccbc <=_dcaeg ._cfgec +1&&_ebccbc <=_ccgdf ){break ;};};};_deggf .Max .X ++;_deggf .Max .Y ++;return &_deggf ,nil ;};func (_gbbe Points )Size ()int {return len (_gbbe )};func _bdd (_cdea ,_aed *Bitmap ,_edgb int ,_ffa []byte ,_efd int )(_feg error ){const _aeea ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_fff ,_eab ,_gge ,_bad ,_ebd ,_dae ,_bbf ,_afa int ;_dbf ,_geb uint32 ;_gbf ,_afc byte ;_edc uint16 ;);_dfg :=make ([]byte ,4);_bef :=make ([]byte ,4);for _gge =0;_gge < _cdea .Height -1;_gge ,_bad =_gge +2,_bad +1{_fff =_gge *_cdea .RowStride ;_eab =_bad *_aed .RowStride ;for _ebd ,_dae =0,0;_ebd < _efd ;_ebd ,_dae =_ebd +4,_dae +1{for _bbf =0;_bbf < 4;_bbf ++{_afa =_fff +_ebd +_bbf ;if _afa <=len (_cdea .Data )-1&&_afa < _fff +_cdea .RowStride {_dfg [_bbf ]=_cdea .Data [_afa ];}else {_dfg [_bbf ]=0x00;};_afa =_fff +_cdea .RowStride +_ebd +_bbf ;if _afa <=len (_cdea .Data )-1&&_afa < _fff +(2*_cdea .RowStride ){_bef [_bbf ]=_cdea .Data [_afa ];}else {_bef [_bbf ]=0x00;};};_dbf =_ag .BigEndian .Uint32 (_dfg );_geb =_ag .BigEndian .Uint32 (_bef );_geb |=_dbf ;_geb |=_geb <<1;_geb &=0xaaaaaaaa;_dbf =_geb |(_geb <<7);_gbf =byte (_dbf >>24);_afc =byte ((_dbf >>8)&0xff);_afa =_eab +_dae ;if _afa +1==len (_aed .Data )-1||_afa +1>=_eab +_aed .RowStride {_aed .Data [_afa ]=_ffa [_gbf ];}else {_edc =(uint16 (_ffa [_gbf ])<<8)|uint16 (_ffa [_afc ]);if _feg =_aed .setTwoBytes (_afa ,_edc );_feg !=nil {return _fg .Wrapf (_feg ,_aeea ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_afa );};_dae ++;};};};return nil ;};func (_dedd *Bitmaps )Size ()int {return len (_dedd .Values )};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_gfbc *Bitmaps )WidthSorter ()func (_aeaa ,_cggae int )bool {return func (_bgaae ,_eabf int )bool {return _gfbc .Values [_bgaae ].Width < _gfbc .Values [_eabf ].Width };};func (_ddc *Bitmap )GetChocolateData ()[]byte {if _ddc .Color ==Vanilla {_ddc .inverseData ();};return _ddc .Data ;};func (_fdc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _fdc .Copy (),nil ;};_ced ,_acg :=_fdc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _acg !=nil {return nil ,_fg .Wrap (_acg ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _ced ,nil ;};func (_eff Points )GetIntX (i int )(int ,error ){if i >=len (_eff ){return 0,_fg .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_eff [i ].X ),nil ;};func (_gbfd *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _caaab ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _gbfd ==nil {return nil ,_fg .Error (_caaab ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_gbfd .Values )-1{return nil ,_fg .Errorf (_caaab ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gbfd .Values [i ],nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_ebdg *Bitmap )String ()string {var _bfc ="\u000a";for _cbb :=0;_cbb < _ebdg .Height ;_cbb ++{var _dfga string ;for _dafe :=0;_dafe < _ebdg .Width ;_dafe ++{_fgb :=_ebdg .GetPixel (_dafe ,_cbb );if _fgb {_dfga +="\u0031";}else {_dfga +="\u0030";};};_bfc +=_dfga +"\u000a";};return _bfc ;};func (_ecag *Bitmap )countPixels ()int {var (_dfgaa int ;_fge uint8 ;_fbgd byte ;_bdga int ;);_dbe :=_ecag .RowStride ;_efg :=uint (_ecag .Width &0x07);if _efg !=0{_fge =uint8 ((0xff<<(8-_efg ))&0xff);_dbe --;};for _agb :=0;_agb < _ecag .Height ;_agb ++{for _bdga =0;_bdga < _dbe ;_bdga ++{_fbgd =_ecag .Data [_agb *_ecag .RowStride +_bdga ];_dfgaa +=int (_bag [_fbgd ]);};if _efg !=0{_dfgaa +=int (_bag [_ecag .Data [_agb *_ecag .RowStride +_bdga ]&_fge ]);};};return _dfgaa ;};func (_ded *Bitmap )removeBorderGeneral (_gged ,_cbgf ,_cgf ,_ffee int )(*Bitmap ,error ){const _baecb ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gged < 0||_cbgf < 0||_cgf < 0||_ffee < 0{return nil ,_fg .Error (_baecb ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_dcc ,_gdac :=_ded .Width ,_ded .Height ;_efbf :=_dcc -_gged -_cbgf ;_cacc :=_gdac -_cgf -_ffee ;if _efbf <=0{return nil ,_fg .Errorf (_baecb ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_efbf );};if _cacc <=0{return nil ,_fg .Errorf (_baecb ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cacc );};_fgcb :=New (_efbf ,_cacc );_fgcb .Color =_ded .Color ;_cgge :=_fgcb .RasterOperation (0,0,_efbf ,_cacc ,PixSrc ,_ded ,_gged ,_cgf );if _cgge !=nil {return nil ,_fg .Wrap (_cgge ,_baecb ,"");};return _fgcb ,nil ;};func _dbcb (_fgda ,_cddg *Bitmap ,_ecca ,_fabg int )(*Bitmap ,error ){const _edea ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _cddg ==nil {return nil ,_fg .Error (_edea ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ecca < 1||_fabg < 1{return nil ,_fg .Error (_edea ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _ecca ==1&&_fabg ==1{return _cfdcc (_fgda ,_cddg );};if MorphBC ==SymmetricMorphBC {_dbgfb ,_ffga :=_dbff (_fgda ,_cddg ,_ecca ,_fabg );if _ffga !=nil {return nil ,_fg .Wrap (_ffga ,_edea ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _dbgfb ,nil ;};_fccd :=_cbdf (_ecca /2,_fabg /2);_dgde :=8*((_fccd +7)/8);_bcf ,_ddcc :=_cddg .AddBorder (_dgde ,0);if _ddcc !=nil {return nil ,_fg .Wrapf (_ddcc ,_edea ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_dgde );};var _gcec ,_cagfg *Bitmap ;if _ecca ==1||_fabg ==1{_eged :=SelCreateBrick (_fabg ,_ecca ,_fabg /2,_ecca /2,SelHit );_gcec ,_ddcc =_ffbfd (nil ,_bcf ,_eged );if _ddcc !=nil {return nil ,_fg .Wrap (_ddcc ,_edea ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_defb :=SelCreateBrick (1,_ecca ,0,_ecca /2,SelHit );_ggcbf ,_ebea :=_agbf (nil ,_bcf ,_defb );if _ebea !=nil {return nil ,_fg .Wrap (_ebea ,_edea ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_fbcfd :=SelCreateBrick (_fabg ,1,_fabg /2,0,SelHit );_gcec ,_ebea =_agbf (nil ,_ggcbf ,_fbcfd );if _ebea !=nil {return nil ,_fg .Wrap (_ebea ,_edea ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_ebea =_eega (_ggcbf ,_gcec ,_defb );_ebea !=nil {return nil ,_fg .Wrap (_ebea ,_edea ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_ebea =_eega (_gcec ,_ggcbf ,_fbcfd );_ebea !=nil {return nil ,_fg .Wrap (_ebea ,_edea ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _cagfg ,_ddcc =_gcec .RemoveBorder (_dgde );_ddcc !=nil {return nil ,_fg .Wrap (_ddcc ,_edea ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _fgda ==nil {return _cagfg ,nil ;};if _ ,_ddcc =_cfdcc (_fgda ,_cagfg );_ddcc !=nil {return nil ,_ddcc ;};return _fgda ,nil ;};func _eae ()(_fbba []byte ){_fbba =make ([]byte ,256);for _cab :=0;_cab < 256;_cab ++{_bde :=byte (_cab );_fbba [_bde ]=(_bde &0x01)|((_bde &0x04)>>1)|((_bde &0x10)>>2)|((_bde &0x40)>>3)|((_bde &0x02)<<3)|((_bde &0x08)<<2)|((_bde &0x20)<<1)|(_bde &0x80);};return _fbba ;};func (_afd *Bitmap )SetPadBits (value int ){_afd .setPadBits (value )};func (_cdb *Bitmap )CreateTemplate ()*Bitmap {return _cdb .createTemplate ()};func _aeef (_aedb ,_agea byte ,_aacg CombinationOperator )byte {switch _aacg {case CmbOpOr :return _agea |_aedb ;case CmbOpAnd :return _agea &_aedb ;case CmbOpXor :return _agea ^_aedb ;case CmbOpXNor :return ^(_agea ^_aedb );case CmbOpNot :return ^(_agea );default:return _agea ;};};func (_eda *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_egadg *Boxes ,_agda error ){const _aega ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _eda ==nil {return nil ,_fg .Error (_aega ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_eda )==0{return _eda ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_fg .Errorf (_aega ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_fg .Errorf (_aega ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_dad :=_eda .makeSizeIndicator (width ,height ,tp ,relation );_egbf ,_agda :=_eda .selectWithIndicator (_dad );if _agda !=nil {return nil ,_fg .Wrap (_agda ,_aega ,"");};return _egbf ,nil ;};var MorphBC BoundaryCondition ;type ClassedPoints struct{*Points ;_e .IntSlice ;_gcee func (_dcfg ,_bcdae int )bool ;};func (_ccad *Bitmap )setEightPartlyBytes (_aad ,_fcg int ,_adb uint64 )(_gfg error ){var (_ddfc byte ;_afdg int ;);const _ede ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _bacg :=1;_bacg <=_fcg ;_bacg ++{_afdg =64-_bacg *8;_ddfc =byte (_adb >>uint (_afdg )&0xff);_gf .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_ddfc ,_aad ,_aad +_bacg -1,_fcg ,_afdg );if _gfg =_ccad .SetByte (_aad +_bacg -1,_ddfc );_gfg !=nil {return _fg .Wrap (_gfg ,_ede ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_fadd :=_ccad .RowStride *8-_ccad .Width ;if _fadd ==0{return nil ;};_afdg -=8;_ddfc =byte (_adb >>uint (_afdg )&0xff)<<uint (_fadd );if _gfg =_ccad .SetByte (_aad +_fcg ,_ddfc );_gfg !=nil {return _fg .Wrap (_gfg ,_ede ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_caab Points )YSorter ()func (_eead ,_ecbda int )bool {return func (_dafc ,_fcff int )bool {return _caab [_dafc ].Y < _caab [_fcff ].Y };};func _gddf (_caeca *_e .Stack ,_geacd ,_cfcg ,_eegaa ,_aacf ,_defc int ,_afce *_a .Rectangle )(_adcc error ){const _bcddg ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _caeca ==nil {return _fg .Error (_bcddg ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _afce ==nil {return _fg .Error (_bcddg ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_afce .Min .X =_e .Min (_afce .Min .X ,_geacd );_afce .Max .X =_e .Max (_afce .Max .X ,_cfcg );_afce .Min .Y =_e .Min (_afce .Min .Y ,_eegaa );_afce .Max .Y =_e .Max (_afce .Max .Y ,_eegaa );if !(_eegaa +_aacf >=0&&_eegaa +_aacf <=_defc ){return nil ;};if _caeca .Aux ==nil {return _fg .Error (_bcddg ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _ebga *fillSegment ;_cffb ,_bbeagd :=_caeca .Aux .Pop ();if _bbeagd {if _ebga ,_bbeagd =_cffb .(*fillSegment );!_bbeagd {return _fg .Error (_bcddg ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_ebga =&fillSegment {};};_ebga ._gdbed =_geacd ;_ebga ._cfgec =_cfcg ;_ebga ._cddc =_eegaa ;_ebga ._dbdf =_aacf ;_caeca .Push (_ebga );return nil ;};func TstImageBitmapData ()[]byte {return _baedg .Data };func init (){const _cbeff ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_gaac =New (50,40);var _fafa error ;_gaac ,_fafa =_gaac .AddBorder (2,1);if _fafa !=nil {panic (_fg .Wrap (_fafa ,_cbeff ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_baedg ,_fafa =NewWithData (50,22,_dege );if _fafa !=nil {panic (_fg .Wrap (_fafa ,_cbeff ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_egf *Bitmap )SizesEqual (s *Bitmap )bool {if _egf ==s {return true ;};if _egf .Width !=s .Width ||_egf .Height !=s .Height {return false ;};return true ;};func (_dfcd *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_cdfc *Boxes ,_fbcf error ){const _fcgd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _dfcd ==nil {return nil ,_fg .Error (_fcgd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_fg .Error (_fcgd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _cdfc ,_fbcf =_dfcd .connComponentsBB (connectivity );_fbcf !=nil {return nil ,_fg .Wrap (_fbcf ,_fcgd ,"");};}else {if _cdfc ,_fbcf =_dfcd .connComponentsBitmapsBB (bms ,connectivity );_fbcf !=nil {return nil ,_fg .Wrap (_fbcf ,_fcgd ,"");};};return _cdfc ,nil ;};func _dbgc (_deg ,_bg int )*Bitmap {return &Bitmap {Width :_deg ,Height :_bg ,RowStride :(_deg +7)>>3};};func (_ggbe *ClassedPoints )validateIntSlice ()error {const _cdfe ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_dbbd :=range _ggbe .IntSlice {if _dbbd >=(_ggbe .Points .Size ()){return _fg .Errorf (_cdfe ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_dbbd ,_ggbe .Points .Size ());};};return nil ;};func (_gdgb *Bitmap )setBit (_cgga int ){_gdgb .Data [(_cgga >>3)]|=0x80>>uint (_cgga &7)};func (_cbege *byHeight )Less (i ,j int )bool {return _cbege .Values [i ].Height < _cbege .Values [j ].Height };var _gdfa =[5]int {1,2,3,0,4};func (_ffdb *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _fgecc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_ffdb .IntSlice .Size (){return 0,_fg .Errorf (_fgecc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_ffdb .YAtIndex (i )),nil ;};func TstRSymbol (t *_c .T ,scale ...int )*Bitmap {_fgbb ,_ggfdc :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_g .NoError (t ,_ggfdc );return TstGetScaledSymbol (t ,_fgbb ,scale ...);};func (_degga *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _egdgg ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _degga ==nil {return nil ,_fg .Error (_egdgg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_degga .Values )-1{return nil ,_fg .Errorf (_egdgg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _degga .Values [i ],nil ;};func (_bccd *Bitmaps )selectByIndicator (_dffb *_e .NumSlice )(_gbae *Bitmaps ,_gadd error ){const _dbgg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _bccd ==nil {return nil ,_fg .Error (_dbgg ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _dffb ==nil {return nil ,_fg .Error (_dbgg ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_bccd .Values )==0{return _bccd ,nil ;};if len (*_dffb )!=len (_bccd .Values ){return nil ,_fg .Errorf (_dbgg ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_dffb ),len (_bccd .Values ));};var _abda ,_fgged ,_geada int ;for _fgged =0;_fgged < len (*_dffb );_fgged ++{if _abda ,_gadd =_dffb .GetInt (_fgged );_gadd !=nil {return nil ,_fg .Wrap (_gadd ,_dbgg ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _abda ==1{_geada ++;};};if _geada ==len (_bccd .Values ){return _bccd ,nil ;};_gbae =&Bitmaps {};_gcdbb :=len (_bccd .Values )==len (_bccd .Boxes );for _fgged =0;_fgged < len (*_dffb );_fgged ++{if _abda =int ((*_dffb )[_fgged ]);_abda ==0{continue ;};_gbae .Values =append (_gbae .Values ,_bccd .Values [_fgged ]);if _gcdbb {_gbae .Boxes =append (_gbae .Boxes ,_bccd .Boxes [_fgged ]);};};return _gbae ,nil ;};func (_beab *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_begd bool ,_aec error ){const _ddec ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_fbagc ();};_egd :=_beab .Width >>3;_gffb :=_beab .Width &7;_baga :=byte (0xff<<uint (8-_gffb ));var (_aag ,_bfe ,_ddb ,_fea int ;_gda byte ;);for _aag =0;_aag < _beab .Height ;_aag ++{_ddb =_beab .RowStride *_aag ;for _bfe =0;_bfe < _egd ;_bfe ++{_gda ,_aec =_beab .GetByte (_ddb +_bfe );if _aec !=nil {return false ,_fg .Wrap (_aec ,_ddec ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_fea +=tab8 [_gda ];};if _gffb !=0{_gda ,_aec =_beab .GetByte (_ddb +_bfe );if _aec !=nil {return false ,_fg .Wrap (_aec ,_ddec ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_gda &=_baga ;_fea +=tab8 [_gda ];};if _fea > thresh {return true ,nil ;};};return _begd ,nil ;};func (_cdg *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cdg .Copy (),nil ;};_geg ,_bfdg :=_cdg .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _bfdg !=nil {return nil ,_fg .Wrap (_bfdg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _geg ,nil ;};func _fdb (_dgd *Bitmap ,_eg int )(*Bitmap ,error ){const _ab ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _dgd ==nil {return nil ,_fg .Error (_ab ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _eg ==1{return _cfdcc (nil ,_dgd );};if _eg !=2&&_eg !=4&&_eg !=8{return nil ,_fg .Error (_ab ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_bfd :=_eg *_dgd .Width ;_ff :=_eg *_dgd .Height ;_dgg :=New (_bfd ,_ff );var _bfg error ;switch _eg {case 2:_bfg =_fb (_dgg ,_dgd );case 4:_bfg =_eca (_dgg ,_dgd );case 8:_bfg =_fbb (_dgg ,_dgd );};if _bfg !=nil {return nil ,_fg .Wrap (_bfg ,_ab ,"");};return _dgg ,nil ;};type byHeight Bitmaps ;func TstWriteSymbols (t *_c .T ,bms *Bitmaps ,src *Bitmap ){for _faab :=0;_faab < bms .Size ();_faab ++{_cedf :=bms .Values [_faab ];_adaf :=bms .Boxes [_faab ];_bdfc :=src .RasterOperation (_adaf .Min .X ,_adaf .Min .Y ,_cedf .Width ,_cedf .Height ,PixSrc ,_cedf ,0,0);_g .NoError (t ,_bdfc );};};func _abfdd (_effg *Bitmap ,_fccg ,_baaa int ,_gebe ,_ecbe int ,_edfa RasterOperator ,_gdfb *Bitmap ,_aegb ,_beacg int )error {var _bdce ,_ebfg ,_gdeef ,_ddgca int ;if _fccg < 0{_aegb -=_fccg ;_gebe +=_fccg ;_fccg =0;};if _aegb < 0{_fccg -=_aegb ;_gebe +=_aegb ;_aegb =0;};_bdce =_fccg +_gebe -_effg .Width ;if _bdce > 0{_gebe -=_bdce ;};_ebfg =_aegb +_gebe -_gdfb .Width ;if _ebfg > 0{_gebe -=_ebfg ;};if _baaa < 0{_beacg -=_baaa ;_ecbe +=_baaa ;_baaa =0;};if _beacg < 0{_baaa -=_beacg ;_ecbe +=_beacg ;_beacg =0;};_gdeef =_baaa +_ecbe -_effg .Height ;if _gdeef > 0{_ecbe -=_gdeef ;};_ddgca =_beacg +_ecbe -_gdfb .Height ;if _ddgca > 0{_ecbe -=_ddgca ;};if _gebe <=0||_ecbe <=0{return nil ;};var _deaaf error ;switch {case _fccg &7==0&&_aegb &7==0:_deaaf =_faag (_effg ,_fccg ,_baaa ,_gebe ,_ecbe ,_edfa ,_gdfb ,_aegb ,_beacg );case _fccg &7==_aegb &7:_deaaf =_cdebb (_effg ,_fccg ,_baaa ,_gebe ,_ecbe ,_edfa ,_gdfb ,_aegb ,_beacg );default:_deaaf =_eagad (_effg ,_fccg ,_baaa ,_gebe ,_ecbe ,_edfa ,_gdfb ,_aegb ,_beacg );};if _deaaf !=nil {return _fg .Wrap (_deaaf ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func _cbdf (_bdf ,_aaf int )int {if _bdf > _aaf {return _bdf ;};return _aaf ;};func _cafg (_eagc ,_egfdd *Bitmap ,_eafac ,_ebbf int )(_bgccg error ){const _baf ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_bfga ,_gfgd ,_aabd ,_ecae int ;_bfgaf ,_efed ,_ebff ,_gdec ,_eacb ,_gafe ,_dag ,_cfgf byte ;);for _bfga =0;_bfga < _eafac ;_bfga ++{_aabd =_bfga *_eagc .RowStride ;_ecae =_bfga *_egfdd .RowStride ;for _gfgd =0;_gfgd < _ebbf ;_gfgd ++{if _bfgaf ,_bgccg =_eagc .GetByte (_aabd +_gfgd );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _efed ,_bgccg =_egfdd .GetByte (_ecae +_gfgd );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _bfga > 0{if _ebff ,_bgccg =_eagc .GetByte (_aabd -_eagc .RowStride +_gfgd );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bfgaf |=_ebff |(_ebff <<1)|(_ebff >>1);if _gfgd > 0{if _cfgf ,_bgccg =_eagc .GetByte (_aabd -_eagc .RowStride +_gfgd -1);_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_bfgaf |=_cfgf <<7;};if _gfgd < _ebbf -1{if _cfgf ,_bgccg =_eagc .GetByte (_aabd -_eagc .RowStride +_gfgd +1);_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_bfgaf |=_cfgf >>7;};};if _gfgd > 0{if _gdec ,_bgccg =_eagc .GetByte (_aabd +_gfgd -1);_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u006a\u0020\u003e \u0030");};_bfgaf |=_gdec <<7;};_bfgaf &=_efed ;if _bfgaf ==0||^_bfgaf ==0{if _bgccg =_eagc .SetByte (_aabd +_gfgd ,_bfgaf );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_dag =_bfgaf ;_bfgaf =(_bfgaf |(_bfgaf >>1)|(_bfgaf <<1))&_efed ;if (_bfgaf ^_dag )==0{if _bgccg =_eagc .SetByte (_aabd +_gfgd ,_bfgaf );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bfga =_eafac -1;_bfga >=0;_bfga --{_aabd =_bfga *_eagc .RowStride ;_ecae =_bfga *_egfdd .RowStride ;for _gfgd =_ebbf -1;_gfgd >=0;_gfgd --{if _bfgaf ,_bgccg =_eagc .GetByte (_aabd +_gfgd );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _efed ,_bgccg =_egfdd .GetByte (_ecae +_gfgd );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bfga < _eafac -1{if _eacb ,_bgccg =_eagc .GetByte (_aabd +_eagc .RowStride +_gfgd );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_bfgaf |=_eacb |(_eacb <<1)|_eacb >>1;if _gfgd > 0{if _cfgf ,_bgccg =_eagc .GetByte (_aabd +_eagc .RowStride +_gfgd -1);_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_bfgaf |=_cfgf <<7;};if _gfgd < _ebbf -1{if _cfgf ,_bgccg =_eagc .GetByte (_aabd +_eagc .RowStride +_gfgd +1);_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_bfgaf |=_cfgf >>7;};};if _gfgd < _ebbf -1{if _gafe ,_bgccg =_eagc .GetByte (_aabd +_gfgd +1);_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_bfgaf |=_gafe >>7;};_bfgaf &=_efed ;if _bfgaf ==0||(^_bfgaf )==0{if _bgccg =_eagc .SetByte (_aabd +_gfgd ,_bfgaf );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_dag =_bfgaf ;_bfgaf =(_bfgaf |(_bfgaf >>1)|(_bfgaf <<1))&_efed ;if (_bfgaf ^_dag )==0{if _bgccg =_eagc .SetByte (_aabd +_gfgd ,_bfgaf );_bgccg !=nil {return _fg .Wrap (_bgccg ,_baf ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func (_dbgf *Bitmap )thresholdPixelSum (_cgaa int )bool {var (_fdgf int ;_gbeb uint8 ;_gbgd byte ;_egdg int ;);_fgec :=_dbgf .RowStride ;_cge :=uint (_dbgf .Width &0x07);if _cge !=0{_gbeb =uint8 ((0xff<<(8-_cge ))&0xff);_fgec --;};for _aaeb :=0;_aaeb < _dbgf .Height ;_aaeb ++{for _egdg =0;_egdg < _fgec ;_egdg ++{_gbgd =_dbgf .Data [_aaeb *_dbgf .RowStride +_egdg ];_fdgf +=int (_bag [_gbgd ]);};if _cge !=0{_gbgd =_dbgf .Data [_aaeb *_dbgf .RowStride +_egdg ]&_gbeb ;_fdgf +=int (_bag [_gbgd ]);};if _fdgf > _cgaa {return true ;};};return false ;};const (Vanilla Color =iota ;Chocolate ;);