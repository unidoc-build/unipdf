//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_cg "encoding/binary";_f "github.com/stretchr/testify/require";_db "github.com/unidoc/unipdf/v3/common";_eg "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/imageutil";_c "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_d "image";_ea "math";_fa "sort";_fe "strings";_gc "testing";);type Getter interface{GetBitmap ()*Bitmap ;};type LocationFilter int ;func NewClassedPoints (points *Points ,classes _c .IntSlice )(*ClassedPoints ,error ){const _eaffg ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_g .Error (_eaffg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_g .Error (_eaffg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_cfae :=&ClassedPoints {Points :points ,IntSlice :classes };if _dabae :=_cfae .validateIntSlice ();_dabae !=nil {return nil ,_g .Wrap (_dabae ,_eaffg ,"");};return _cfae ,nil ;};func _edgf (_ddg ,_gae *Bitmap ,_bcb int ,_agbb []byte ,_ceb int )(_ffd error ){const _fba ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_add ,_eab ,_ddc ,_bdd ,_ef ,_egbd ,_dff ,_gdda int ;_dafc ,_bdda ,_efb ,_ega uint32 ;_edd ,_cef byte ;_cde uint16 ;);_dde :=make ([]byte ,4);_fbad :=make ([]byte ,4);for _ddc =0;_ddc < _ddg .Height -1;_ddc ,_bdd =_ddc +2,_bdd +1{_add =_ddc *_ddg .RowStride ;_eab =_bdd *_gae .RowStride ;for _ef ,_egbd =0,0;_ef < _ceb ;_ef ,_egbd =_ef +4,_egbd +1{for _dff =0;_dff < 4;_dff ++{_gdda =_add +_ef +_dff ;if _gdda <=len (_ddg .Data )-1&&_gdda < _add +_ddg .RowStride {_dde [_dff ]=_ddg .Data [_gdda ];}else {_dde [_dff ]=0x00;};_gdda =_add +_ddg .RowStride +_ef +_dff ;if _gdda <=len (_ddg .Data )-1&&_gdda < _add +(2*_ddg .RowStride ){_fbad [_dff ]=_ddg .Data [_gdda ];}else {_fbad [_dff ]=0x00;};};_dafc =_cg .BigEndian .Uint32 (_dde );_bdda =_cg .BigEndian .Uint32 (_fbad );_efb =_dafc &_bdda ;_efb |=_efb <<1;_ega =_dafc |_bdda ;_ega &=_ega <<1;_bdda =_efb |_ega ;_bdda &=0xaaaaaaaa;_dafc =_bdda |(_bdda <<7);_edd =byte (_dafc >>24);_cef =byte ((_dafc >>8)&0xff);_gdda =_eab +_egbd ;if _gdda +1==len (_gae .Data )-1||_gdda +1>=_eab +_gae .RowStride {if _ffd =_gae .SetByte (_gdda ,_agbb [_edd ]);_ffd !=nil {return _g .Wrapf (_ffd ,_fba ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gdda );};}else {_cde =(uint16 (_agbb [_edd ])<<8)|uint16 (_agbb [_cef ]);if _ffd =_gae .setTwoBytes (_gdda ,_cde );_ffd !=nil {return _g .Wrapf (_ffd ,_fba ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gdda );};_egbd ++;};};};return nil ;};var _bbda =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func (_accfc MorphProcess )verify (_cfage int ,_afbg ,_gfef *int )error {const _fgfc ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _accfc .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_accfc .Arguments )!=2{return _g .Error (_fgfc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_eagc ,_agec :=_accfc .getWidthHeight ();if _eagc <=0||_agec <=0{return _g .Error (_fgfc ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_bbdg :=len (_accfc .Arguments );*_afbg +=_bbdg ;if _bbdg < 1||_bbdg > 4{return _g .Error (_fgfc ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _beafb :=0;_beafb < _bbdg ;_beafb ++{if _accfc .Arguments [_beafb ]< 1||_accfc .Arguments [_beafb ]> 4{return _g .Error (_fgfc ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_accfc .Arguments )==0{return _g .Error (_fgfc ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ccdba :=_accfc .Arguments [0];if _ccdba !=2&&_ccdba !=4&&_ccdba !=8{return _g .Error (_fgfc ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_afbg -=_cbe [_ccdba /4];case MopAddBorder :if len (_accfc .Arguments )==0{return _g .Error (_fgfc ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbe :=_accfc .Arguments [0];if _cfage > 0{return _g .Error (_fgfc ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _efbe < 1{return _g .Error (_fgfc ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_gfef =_efbe ;};return nil ;};func (_ffb *Bitmap )GetByte (index int )(byte ,error ){if index > len (_ffb .Data )-1||index < 0{return 0,_g .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _ffb .Data [index ],nil ;};func (_bfgf *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_gagg *Bitmaps ,_cedgg *Boxes ,_agaa error ){const _afabc ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _bfgf ==nil {return nil ,nil ,_g .Error (_afabc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_g .Error (_afabc ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _bfgf .Zero (){_cedgg =&Boxes {};_gagg =&Bitmaps {};return _gagg ,_cedgg ,nil ;};switch components {case ComponentConn :_gagg =&Bitmaps {};if _cedgg ,_agaa =_bfgf .ConnComponents (_gagg ,8);_agaa !=nil {return nil ,nil ,_g .Wrap (_agaa ,_afabc ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_ffec ,_eefa :=MorphSequence (_bfgf ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _eefa !=nil {return nil ,nil ,_g .Wrap (_eefa ,_afabc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _db .Log .IsLogLevel (_db .LogLevelTrace ){_db .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_ffec .String ());};_ffbg :=&Bitmaps {};_cedgg ,_eefa =_ffec .ConnComponents (_ffbg ,8);if _eefa !=nil {return nil ,nil ,_g .Wrap (_eefa ,_afabc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _db .Log .IsLogLevel (_db .LogLevelTrace ){_db .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_ffbg .String ());};if _gagg ,_eefa =_ffbg .ClipToBitmap (_bfgf );_eefa !=nil {return nil ,nil ,_g .Wrap (_eefa ,_afabc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_cggd :=1;var _adgd *Bitmap ;switch {case _bfgf .XResolution <=200:_adgd =_bfgf ;case _bfgf .XResolution <=400:_cggd =2;_adgd ,_agaa =_cb (_bfgf ,1,0,0,0);if _agaa !=nil {return nil ,nil ,_g .Wrap (_agaa ,_afabc ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_cggd =4;_adgd ,_agaa =_cb (_bfgf ,1,1,0,0);if _agaa !=nil {return nil ,nil ,_g .Wrap (_agaa ,_afabc ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_befe ,_ ,_ecgg :=_fabb (_adgd );if _ecgg !=nil {return nil ,nil ,_g .Wrap (_ecgg ,_afabc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_adbd ,_ecgg :=_fefe (_befe ,_cggd );if _ecgg !=nil {return nil ,nil ,_g .Wrap (_ecgg ,_afabc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_fgdab :=&Bitmaps {};if _cedgg ,_ecgg =_adbd .ConnComponents (_fgdab ,4);_ecgg !=nil {return nil ,nil ,_g .Wrap (_ecgg ,_afabc ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _gagg ,_ecgg =_fgdab .ClipToBitmap (_bfgf );_ecgg !=nil {return nil ,nil ,_g .Wrap (_ecgg ,_afabc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_gagg ,_agaa =_gagg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _agaa !=nil {return nil ,nil ,_g .Wrap (_agaa ,_afabc ,"");};_cedgg ,_agaa =_cedgg .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _agaa !=nil {return nil ,nil ,_g .Wrap (_agaa ,_afabc ,"");};return _gagg ,_cedgg ,nil ;};const (_fbde shift =iota ;_dafd ;);func _aff (_ff ,_gege *Bitmap ,_adf int ,_ggb []byte ,_fec int )(_adc error ){const _fee ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_cfb ,_cgc ,_aga ,_gdd ,_ggbb ,_gegg ,_bee ,_abg int ;_afg ,_dbf uint32 ;_dfga ,_cae byte ;_bebe uint16 ;);_acg :=make ([]byte ,4);_gefb :=make ([]byte ,4);for _aga =0;_aga < _ff .Height -1;_aga ,_gdd =_aga +2,_gdd +1{_cfb =_aga *_ff .RowStride ;_cgc =_gdd *_gege .RowStride ;for _ggbb ,_gegg =0,0;_ggbb < _fec ;_ggbb ,_gegg =_ggbb +4,_gegg +1{for _bee =0;_bee < 4;_bee ++{_abg =_cfb +_ggbb +_bee ;if _abg <=len (_ff .Data )-1&&_abg < _cfb +_ff .RowStride {_acg [_bee ]=_ff .Data [_abg ];}else {_acg [_bee ]=0x00;};_abg =_cfb +_ff .RowStride +_ggbb +_bee ;if _abg <=len (_ff .Data )-1&&_abg < _cfb +(2*_ff .RowStride ){_gefb [_bee ]=_ff .Data [_abg ];}else {_gefb [_bee ]=0x00;};};_afg =_cg .BigEndian .Uint32 (_acg );_dbf =_cg .BigEndian .Uint32 (_gefb );_dbf |=_afg ;_dbf |=_dbf <<1;_dbf &=0xaaaaaaaa;_afg =_dbf |(_dbf <<7);_dfga =byte (_afg >>24);_cae =byte ((_afg >>8)&0xff);_abg =_cgc +_gegg ;if _abg +1==len (_gege .Data )-1||_abg +1>=_cgc +_gege .RowStride {_gege .Data [_abg ]=_ggb [_dfga ];}else {_bebe =(uint16 (_ggb [_dfga ])<<8)|uint16 (_ggb [_cae ]);if _adc =_gege .setTwoBytes (_abg ,_bebe );_adc !=nil {return _g .Wrapf (_adc ,_fee ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_abg );};_gegg ++;};};};return nil ;};func (_cdbf *Bitmap )SetByte (index int ,v byte )error {if index > len (_cdbf .Data )-1||index < 0{return _g .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_cdbf .Data [index ]=v ;return nil ;};func _fbgd ()[]int {_bbc :=make ([]int ,256);for _ddaf :=0;_ddaf <=0xff;_ddaf ++{_bddc :=byte (_ddaf );_bbc [_bddc ]=int (_bddc &0x1)+(int (_bddc >>1)&0x1)+(int (_bddc >>2)&0x1)+(int (_bddc >>3)&0x1)+(int (_bddc >>4)&0x1)+(int (_bddc >>5)&0x1)+(int (_bddc >>6)&0x1)+(int (_bddc >>7)&0x1);};return _bbc ;};func (_fgda *Boxes )Get (i int )(*_d .Rectangle ,error ){const _cggb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _fgda ==nil {return nil ,_g .Error (_cggb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_fgda )-1{return nil ,_g .Errorf (_cggb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_fgda )[i ],nil ;};func _ecae (_bab *Bitmap ,_cdf *Bitmap ,_gebf int )(_aa error ){const _fb ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _gebf {case 2:_aa =_cd (_bab ,_cdf );case 4:_aa =_be (_bab ,_cdf );case 8:_aa =_fc (_bab ,_cdf );default:return _g .Error (_fb ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _aa !=nil {_aa =_g .Wrap (_aa ,_fb ,"");};return _aa ;};func _bebg (_ccdf ,_fegg int )*Bitmap {return &Bitmap {Width :_ccdf ,Height :_fegg ,RowStride :(_ccdf +7)>>3};};func (_bcbd *Bitmap )String ()string {var _cdeg ="\u000a";for _ecec :=0;_ecec < _bcbd .Height ;_ecec ++{var _bba string ;for _gbb :=0;_gbb < _bcbd .Width ;_gbb ++{_deeb :=_bcbd .GetPixel (_gbb ,_ecec );if _deeb {_bba +="\u0031";}else {_bba +="\u0030";};};_cdeg +=_bba +"\u000a";};return _cdeg ;};func _gdg ()(_ccd []byte ){_ccd =make ([]byte ,256);for _bbf :=0;_bbf < 256;_bbf ++{_cad :=byte (_bbf );_ccd [_cad ]=(_cad &0x01)|((_cad &0x04)>>1)|((_cad &0x10)>>2)|((_cad &0x40)>>3)|((_cad &0x02)<<3)|((_cad &0x08)<<2)|((_cad &0x20)<<1)|(_cad &0x80);};return _ccd ;};func init (){for _dfbd :=0;_dfbd < 256;_dfbd ++{_cacc [_dfbd ]=uint8 (_dfbd &0x1)+(uint8 (_dfbd >>1)&0x1)+(uint8 (_dfbd >>2)&0x1)+(uint8 (_dfbd >>3)&0x1)+(uint8 (_dfbd >>4)&0x1)+(uint8 (_dfbd >>5)&0x1)+(uint8 (_dfbd >>6)&0x1)+(uint8 (_dfbd >>7)&0x1);};};func MakePixelCentroidTab8 ()[]int {return _ffff ()};var (_fgadf =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gfgb =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _daag (_aaab ,_gbce ,_afad *Bitmap ,_ecaac int )(*Bitmap ,error ){const _eefe ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _gbce ==nil {return nil ,_g .Error (_eefe ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _afad ==nil {return nil ,_g .Error (_eefe ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ecaac !=4&&_ecaac !=8{return nil ,_g .Error (_eefe ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _bebc error ;_aaab ,_bebc =_deba (_aaab ,_gbce );if _bebc !=nil {return nil ,_g .Wrap (_bebc ,_eefe ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_babc :=_gbce .createTemplate ();_afad .setPadBits (0);for _ceea :=0;_ceea < _gcfb ;_ceea ++{_babc ,_bebc =_deba (_babc ,_aaab );if _bebc !=nil {return nil ,_g .Wrapf (_bebc ,_eefe ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ceea );};if _bebc =_bbff (_aaab ,_afad ,_ecaac );_bebc !=nil {return nil ,_g .Wrapf (_bebc ,_eefe ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_ceea );};if _babc .Equals (_aaab ){break ;};};return _aaab ,nil ;};func (_gddfg *Selection )findMaxTranslations ()(_dcbdd ,_gbfcg ,_bcfbb ,_dfda int ){for _aeda :=0;_aeda < _gddfg .Height ;_aeda ++{for _bbcd :=0;_bbcd < _gddfg .Width ;_bbcd ++{if _gddfg .Data [_aeda ][_bbcd ]==SelHit {_dcbdd =_ecfg (_dcbdd ,_gddfg .Cx -_bbcd );_gbfcg =_ecfg (_gbfcg ,_gddfg .Cy -_aeda );_bcfbb =_ecfg (_bcfbb ,_bbcd -_gddfg .Cx );_dfda =_ecfg (_dfda ,_aeda -_gddfg .Cy );};};};return _dcbdd ,_gbfcg ,_bcfbb ,_dfda ;};func (_acgb *Bitmap )Copy ()*Bitmap {_aba :=make ([]byte ,len (_acgb .Data ));copy (_aba ,_acgb .Data );return &Bitmap {Width :_acgb .Width ,Height :_acgb .Height ,RowStride :_acgb .RowStride ,Data :_aba ,Color :_acgb .Color ,Text :_acgb .Text ,BitmapNumber :_acgb .BitmapNumber ,Special :_acgb .Special };};func (_cgd *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _cgd .Copy (),nil ;};_dbga ,_gag :=_cgd .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _gag !=nil {return nil ,_g .Wrap (_gag ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _dbga ,nil ;};func TstFrameBitmapData ()[]byte {return _cgdd .Data };func TstNSymbol (t *_gc .T ,scale ...int )*Bitmap {_eabgb ,_bdfb :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_f .NoError (t ,_bdfb );return TstGetScaledSymbol (t ,_eabgb ,scale ...);};type Component int ;func (_fef *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _fef .removeBorderGeneral (left ,right ,top ,bot );};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _deba (d ,s )};func (_cbb *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _cbb .addBorderGeneral (left ,right ,top ,bot ,val );};func _fdedf (_gabb *Bitmap ,_ffgf ,_gffc int ,_addd ,_bddca int ,_gffdc RasterOperator ){var (_cadf bool ;_ebag bool ;_gcgeg int ;_gcdd int ;_ecafg int ;_cgfab int ;_fcbaf bool ;_gacf byte ;);_aggde :=8-(_ffgf &7);_feafg :=_gfgb [_aggde ];_dgffg :=_gabb .RowStride *_gffc +(_ffgf >>3);if _addd < _aggde {_cadf =true ;_feafg &=_fgadf [8-_aggde +_addd ];};if !_cadf {_gcgeg =(_addd -_aggde )>>3;if _gcgeg !=0{_ebag =true ;_gcdd =_dgffg +1;};};_ecafg =(_ffgf +_addd )&7;if !(_cadf ||_ecafg ==0){_fcbaf =true ;_gacf =_fgadf [_ecafg ];_cgfab =_dgffg +1+_gcgeg ;};var _ebaa ,_bcfe int ;switch _gffdc {case PixClr :for _ebaa =0;_ebaa < _bddca ;_ebaa ++{_gabb .Data [_dgffg ]=_dcda (_gabb .Data [_dgffg ],0x0,_feafg );_dgffg +=_gabb .RowStride ;};if _ebag {for _ebaa =0;_ebaa < _bddca ;_ebaa ++{for _bcfe =0;_bcfe < _gcgeg ;_bcfe ++{_gabb .Data [_gcdd +_bcfe ]=0x0;};_gcdd +=_gabb .RowStride ;};};if _fcbaf {for _ebaa =0;_ebaa < _bddca ;_ebaa ++{_gabb .Data [_cgfab ]=_dcda (_gabb .Data [_cgfab ],0x0,_gacf );_cgfab +=_gabb .RowStride ;};};case PixSet :for _ebaa =0;_ebaa < _bddca ;_ebaa ++{_gabb .Data [_dgffg ]=_dcda (_gabb .Data [_dgffg ],0xff,_feafg );_dgffg +=_gabb .RowStride ;};if _ebag {for _ebaa =0;_ebaa < _bddca ;_ebaa ++{for _bcfe =0;_bcfe < _gcgeg ;_bcfe ++{_gabb .Data [_gcdd +_bcfe ]=0xff;};_gcdd +=_gabb .RowStride ;};};if _fcbaf {for _ebaa =0;_ebaa < _bddca ;_ebaa ++{_gabb .Data [_cgfab ]=_dcda (_gabb .Data [_cgfab ],0xff,_gacf );_cgfab +=_gabb .RowStride ;};};case PixNotDst :for _ebaa =0;_ebaa < _bddca ;_ebaa ++{_gabb .Data [_dgffg ]=_dcda (_gabb .Data [_dgffg ],^_gabb .Data [_dgffg ],_feafg );_dgffg +=_gabb .RowStride ;};if _ebag {for _ebaa =0;_ebaa < _bddca ;_ebaa ++{for _bcfe =0;_bcfe < _gcgeg ;_bcfe ++{_gabb .Data [_gcdd +_bcfe ]=^(_gabb .Data [_gcdd +_bcfe ]);};_gcdd +=_gabb .RowStride ;};};if _fcbaf {for _ebaa =0;_ebaa < _bddca ;_ebaa ++{_gabb .Data [_cgfab ]=_dcda (_gabb .Data [_cgfab ],^_gabb .Data [_cgfab ],_gacf );_cgfab +=_gabb .RowStride ;};};};};func Centroids (bms []*Bitmap )(*Points ,error ){_caegb :=make ([]Point ,len (bms ));_bcebb :=_ffff ();_gbd :=_fbgd ();var _fegb error ;for _dgbe ,_bfaa :=range bms {_caegb [_dgbe ],_fegb =_bfaa .centroid (_bcebb ,_gbd );if _fegb !=nil {return nil ,_fegb ;};};_dfdc :=Points (_caegb );return &_dfdc ,nil ;};func (_ecaf *ClassedPoints )SortByY (){_ecaf ._cgag =_ecaf .ySortFunction ();_fa .Sort (_ecaf )};func (_cfda *ClassedPoints )Less (i ,j int )bool {return _cfda ._cgag (i ,j )};const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func (_cadg *Points )AddPoint (x ,y float32 ){*_cadg =append (*_cadg ,Point {x ,y })};func (_fbb *Bitmap )setEightBytes (_eggg int ,_ada uint64 )error {_fdfe :=_fbb .RowStride -(_eggg %_fbb .RowStride );if _fbb .RowStride !=_fbb .Width >>3{_fdfe --;};if _fdfe >=8{return _fbb .setEightFullBytes (_eggg ,_ada );};return _fbb .setEightPartlyBytes (_eggg ,_fdfe ,_ada );};func (_dabc *Bitmap )clearAll ()error {return _dabc .RasterOperation (0,0,_dabc .Width ,_dabc .Height ,PixClr ,nil ,0,0);};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _egdb ,_aedc int ;_bae :=src .RowStride -1;if x < 0{_aedc =-x ;x =0;}else if x +src .Width > dst .Width {_bae -=src .Width +x -dst .Width ;};if y < 0{_egdb =-y ;y =0;_aedc +=src .RowStride ;_bae +=src .RowStride ;}else if y +src .Height > dst .Height {_egdb =src .Height +y -dst .Height ;};var (_egac int ;_dbea error ;);_dccc :=x &0x07;_acf :=8-_dccc ;_ecba :=src .Width &0x07;_ecfb :=_acf -_ecba ;_abcc :=_acf &0x07!=0;_fggf :=src .Width <=((_bae -_aedc )<<3)+_acf ;_fdg :=dst .GetByteIndex (x ,y );_bgde :=_egdb +dst .Height ;if src .Height > _bgde {_egac =_bgde ;}else {_egac =src .Height ;};switch {case !_abcc :_dbea =_edeg (src ,dst ,_egdb ,_egac ,_fdg ,_aedc ,_bae ,op );case _fggf :_dbea =_gefg (src ,dst ,_egdb ,_egac ,_fdg ,_aedc ,_bae ,_ecfb ,_dccc ,_acf ,op );default:_dbea =_bddg (src ,dst ,_egdb ,_egac ,_fdg ,_aedc ,_bae ,_ecfb ,_dccc ,_acf ,op ,_ecba );};return _dbea ;};func _geggd (_ffbd ,_ffce int ,_bcdc string )*Selection {_abgge :=&Selection {Height :_ffbd ,Width :_ffce ,Name :_bcdc };_abgge .Data =make ([][]SelectionValue ,_ffbd );for _efdb :=0;_efdb < _ffbd ;_efdb ++{_abgge .Data [_efdb ]=make ([]SelectionValue ,_ffce );};return _abgge ;};func _gddf (_ccde ,_dgff *Bitmap ,_gfg ,_dgdb int )(*Bitmap ,error ){const _bafb ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _dgff ==nil {_db .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_g .Error (_bafb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _gfg < 1||_dgdb < 1{return nil ,_g .Error (_bafb ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _gfg ==1&&_dgdb ==1{_bgef ,_ddda :=_deba (_ccde ,_dgff );if _ddda !=nil {return nil ,_g .Wrap (_ddda ,_bafb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _bgef ,nil ;};if _gfg ==1||_dgdb ==1{_eedc :=SelCreateBrick (_dgdb ,_gfg ,_dgdb /2,_gfg /2,SelHit );_afabcf ,_cegaf :=_baa (_ccde ,_dgff ,_eedc );if _cegaf !=nil {return nil ,_g .Wrap (_cegaf ,_bafb ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _afabcf ,nil ;};_ecab :=SelCreateBrick (1,_gfg ,0,_gfg /2,SelHit );_abgf :=SelCreateBrick (_dgdb ,1,_dgdb /2,0,SelHit );_egfd ,_fefc :=_baa (nil ,_dgff ,_ecab );if _fefc !=nil {return nil ,_g .Wrap (_fefc ,_bafb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ccde ,_fefc =_baa (_ccde ,_egfd ,_abgf );if _fefc !=nil {return nil ,_g .Wrap (_fefc ,_bafb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _ccde ,nil ;};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);type CombinationOperator int ;func (_gcgdb *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_aabd *Boxes ,_ceab error ){const _fgad ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _gcgdb ==nil {return nil ,_g .Error (_fgad ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_g .Error (_fgad ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _aabd ,_ceab =_gcgdb .connComponentsBB (connectivity );_ceab !=nil {return nil ,_g .Wrap (_ceab ,_fgad ,"");};}else {if _aabd ,_ceab =_gcgdb .connComponentsBitmapsBB (bms ,connectivity );_ceab !=nil {return nil ,_g .Wrap (_ceab ,_fgad ,"");};};return _aabd ,nil ;};func (_aagc *Bitmap )setAll ()error {_gdgf :=_ccgd (_aagc ,0,0,_aagc .Width ,_aagc .Height ,PixSet ,nil ,0,0);if _gdgf !=nil {return _g .Wrap (_gdgf ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _feecc (_bedg *Bitmap ,_fgbe ,_geeb ,_gfa ,_ebfd int ,_ccdd RasterOperator ,_dfac *Bitmap ,_fdeda ,_cgfdd int )error {var (_bcgb bool ;_fgbcf bool ;_dcea byte ;_gbadg int ;_dggf int ;_adae int ;_begfb int ;_ecgcd bool ;_fggd int ;_agde int ;_cadc int ;_acgf bool ;_fdb byte ;_abgd int ;_ggce int ;_egbgd int ;_ggcge byte ;_bfaad int ;_ecfdf int ;_cbgb uint ;_eadd uint ;_dbfg byte ;_bcgbf shift ;_gaac bool ;_efbec bool ;_faee ,_gabd int ;);if _fdeda &7!=0{_ecfdf =8-(_fdeda &7);};if _fgbe &7!=0{_dggf =8-(_fgbe &7);};if _ecfdf ==0&&_dggf ==0{_dbfg =_gfgb [0];}else {if _dggf > _ecfdf {_cbgb =uint (_dggf -_ecfdf );}else {_cbgb =uint (8-(_ecfdf -_dggf ));};_eadd =8-_cbgb ;_dbfg =_gfgb [_cbgb ];};if (_fgbe &7)!=0{_bcgb =true ;_gbadg =8-(_fgbe &7);_dcea =_gfgb [_gbadg ];_adae =_bedg .RowStride *_geeb +(_fgbe >>3);_begfb =_dfac .RowStride *_cgfdd +(_fdeda >>3);_bfaad =8-(_fdeda &7);if _gbadg > _bfaad {_bcgbf =_fbde ;if _gfa >=_ecfdf {_gaac =true ;};}else {_bcgbf =_dafd ;};};if _gfa < _gbadg {_fgbcf =true ;_dcea &=_fgadf [8-_gbadg +_gfa ];};if !_fgbcf {_fggd =(_gfa -_gbadg )>>3;if _fggd !=0{_ecgcd =true ;_agde =_bedg .RowStride *_geeb +((_fgbe +_dggf )>>3);_cadc =_dfac .RowStride *_cgfdd +((_fdeda +_dggf )>>3);};};_abgd =(_fgbe +_gfa )&7;if !(_fgbcf ||_abgd ==0){_acgf =true ;_fdb =_fgadf [_abgd ];_ggce =_bedg .RowStride *_geeb +((_fgbe +_dggf )>>3)+_fggd ;_egbgd =_dfac .RowStride *_cgfdd +((_fdeda +_dggf )>>3)+_fggd ;if _abgd > int (_eadd ){_efbec =true ;};};switch _ccdd {case PixSrc :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],_ggcge ,_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],_ggcge ,_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixNotSrc :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],^_ggcge ,_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=^_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],^_ggcge ,_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixSrcOrDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],_ggcge |_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]|=_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],_ggcge |_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixSrcAndDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],_ggcge &_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]&=_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],_ggcge &_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixSrcXorDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],_ggcge ^_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]^=_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],_ggcge ^_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixNotSrcOrDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],^_ggcge |_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]|=^_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],^_ggcge |_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixNotSrcAndDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],^_ggcge &_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]&=^_ggcge ;};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],^_ggcge &_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixSrcOrNotDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],_ggcge |^_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=_ggcge |^_bedg .Data [_agde +_gabd ];};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],_ggcge |^_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixSrcAndNotDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],_ggcge &^_bedg .Data [_adae ],_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=_ggcge &^_bedg .Data [_agde +_gabd ];};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],_ggcge &^_bedg .Data [_ggce ],_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixNotPixSrcOrDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],^(_ggcge |_bedg .Data [_adae ]),_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=^(_ggcge |_bedg .Data [_agde +_gabd ]);};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],^(_ggcge |_bedg .Data [_ggce ]),_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixNotPixSrcAndDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],^(_ggcge &_bedg .Data [_adae ]),_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=^(_ggcge &_bedg .Data [_agde +_gabd ]);};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],^(_ggcge &_bedg .Data [_ggce ]),_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};case PixNotPixSrcXorDst :if _bcgb {for _faee =0;_faee < _ebfd ;_faee ++{if _bcgbf ==_fbde {_ggcge =_dfac .Data [_begfb ]<<_cbgb ;if _gaac {_ggcge =_dcda (_ggcge ,_dfac .Data [_begfb +1]>>_eadd ,_dbfg );};}else {_ggcge =_dfac .Data [_begfb ]>>_eadd ;};_bedg .Data [_adae ]=_dcda (_bedg .Data [_adae ],^(_ggcge ^_bedg .Data [_adae ]),_dcea );_adae +=_bedg .RowStride ;_begfb +=_dfac .RowStride ;};};if _ecgcd {for _faee =0;_faee < _ebfd ;_faee ++{for _gabd =0;_gabd < _fggd ;_gabd ++{_ggcge =_dcda (_dfac .Data [_cadc +_gabd ]<<_cbgb ,_dfac .Data [_cadc +_gabd +1]>>_eadd ,_dbfg );_bedg .Data [_agde +_gabd ]=^(_ggcge ^_bedg .Data [_agde +_gabd ]);};_agde +=_bedg .RowStride ;_cadc +=_dfac .RowStride ;};};if _acgf {for _faee =0;_faee < _ebfd ;_faee ++{_ggcge =_dfac .Data [_egbgd ]<<_cbgb ;if _efbec {_ggcge =_dcda (_ggcge ,_dfac .Data [_egbgd +1]>>_eadd ,_dbfg );};_bedg .Data [_ggce ]=_dcda (_bedg .Data [_ggce ],^(_ggcge ^_bedg .Data [_ggce ]),_fdb );_ggce +=_bedg .RowStride ;_egbgd +=_dfac .RowStride ;};};default:_db .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_ccdd );return _g .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _gddf (d ,s ,hSize ,vSize )};func (_fbdea *byWidth )Less (i ,j int )bool {return _fbdea .Values [i ].Width < _fbdea .Values [j ].Width };func _gffb (_dddc *Bitmap ,_gaa ...MorphProcess )(_edbg *Bitmap ,_bbce error ){const _face ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _dddc ==nil {return nil ,_g .Error (_face ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_gaa )==0{return nil ,_g .Error (_face ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bbce =_adefg (_gaa ...);_bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};var _edbd ,_gaeb ,_dbgaf int ;_edbg =_dddc .Copy ();for _ ,_ceae :=range _gaa {switch _ceae .Operation {case MopDilation :_edbd ,_gaeb =_ceae .getWidthHeight ();_edbg ,_bbce =DilateBrick (nil ,_edbg ,_edbd ,_gaeb );if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};case MopErosion :_edbd ,_gaeb =_ceae .getWidthHeight ();_edbg ,_bbce =_fcagb (nil ,_edbg ,_edbd ,_gaeb );if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};case MopOpening :_edbd ,_gaeb =_ceae .getWidthHeight ();_edbg ,_bbce =_efgc (nil ,_edbg ,_edbd ,_gaeb );if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};case MopClosing :_edbd ,_gaeb =_ceae .getWidthHeight ();_edbg ,_bbce =_bcbb (nil ,_edbg ,_edbd ,_gaeb );if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};case MopRankBinaryReduction :_edbg ,_bbce =_cb (_edbg ,_ceae .Arguments ...);if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};case MopReplicativeBinaryExpansion :_edbg ,_bbce =_fefe (_edbg ,_ceae .Arguments [0]);if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};case MopAddBorder :_dbgaf =_ceae .Arguments [0];_edbg ,_bbce =_edbg .AddBorder (_dbgaf ,0);if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"");};default:return nil ,_g .Error (_face ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _dbgaf > 0{_edbg ,_bbce =_edbg .RemoveBorder (_dbgaf );if _bbce !=nil {return nil ,_g .Wrap (_bbce ,_face ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _edbg ,nil ;};type ClassedPoints struct{*Points ;_c .IntSlice ;_cgag func (_agda ,_fdfdc int )bool ;};func (_dcbf *Bitmap )nextOnPixelLow (_gbgb ,_cbgg ,_gbgcc ,_gcfc ,_efgb int )(_cede _d .Point ,_eeb bool ,_accf error ){const _bce ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_gegd int ;_ddgg byte ;);_faaa :=_efgb *_gbgcc ;_gbbg :=_faaa +(_gcfc /8);if _ddgg ,_accf =_dcbf .GetByte (_gbbg );_accf !=nil {return _cede ,false ,_g .Wrap (_accf ,_bce ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _ddgg !=0{_dcbfg :=_gcfc -(_gcfc %8)+7;for _gegd =_gcfc ;_gegd <=_dcbfg &&_gegd < _gbgb ;_gegd ++{if _dcbf .GetPixel (_gegd ,_efgb ){_cede .X =_gegd ;_cede .Y =_efgb ;return _cede ,true ,nil ;};};};_bdg :=(_gcfc /8)+1;_gegd =8*_bdg ;var _ded int ;for _gbbg =_faaa +_bdg ;_gegd < _gbgb ;_gbbg ,_gegd =_gbbg +1,_gegd +8{if _ddgg ,_accf =_dcbf .GetByte (_gbbg );_accf !=nil {return _cede ,false ,_g .Wrap (_accf ,_bce ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _ddgg ==0{continue ;};for _ded =0;_ded < 8&&_gegd < _gbgb ;_ded ,_gegd =_ded +1,_gegd +1{if _dcbf .GetPixel (_gegd ,_efgb ){_cede .X =_gegd ;_cede .Y =_efgb ;return _cede ,true ,nil ;};};};for _gbbf :=_efgb +1;_gbbf < _cbgg ;_gbbf ++{_faaa =_gbbf *_gbgcc ;for _gbbg ,_gegd =_faaa ,0;_gegd < _gbgb ;_gbbg ,_gegd =_gbbg +1,_gegd +8{if _ddgg ,_accf =_dcbf .GetByte (_gbbg );_accf !=nil {return _cede ,false ,_g .Wrap (_accf ,_bce ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _ddgg ==0{continue ;};for _ded =0;_ded < 8&&_gegd < _gbgb ;_ded ,_gegd =_ded +1,_gegd +1{if _dcbf .GetPixel (_gegd ,_gbbf ){_cede .X =_gegd ;_cede .Y =_gbbf ;return _cede ,true ,nil ;};};};};return _cede ,false ,nil ;};func TstFrameBitmap ()*Bitmap {return _cgdd .Copy ()};func (_ebg *Bitmap )GetVanillaData ()[]byte {if _ebg .Color ==Chocolate {_ebg .inverseData ();};return _ebg .Data ;};var (_cgdd *Bitmap ;_cafg *Bitmap ;);func (_beff *BitmapsArray )AddBitmaps (bm *Bitmaps ){_beff .Values =append (_beff .Values ,bm )};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func (_agbbb *Bitmaps )String ()string {_bbca :=_fe .Builder {};for _ ,_bgcea :=range _agbbb .Values {_bbca .WriteString (_bgcea .String ());_bbca .WriteRune ('\n');};return _bbca .String ();};func (_abeb *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ccbd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _abeb ==nil {return nil ,_g .Error (_ccbd ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_g .Error (_ccbd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_cafa :=len (_abeb .Values );_dfdag :=&Bitmaps {Values :make ([]*Bitmap ,_cafa ),Boxes :make ([]*_d .Rectangle ,_cafa )};var (_gbcea ,_gebfb *Bitmap ;_dcdaa *_d .Rectangle ;_bgda error ;);for _bgefd :=0;_bgefd < _cafa ;_bgefd ++{if _gbcea ,_bgda =_abeb .GetBitmap (_bgefd );_bgda !=nil {return nil ,_g .Wrap (_bgda ,_ccbd ,"");};if _dcdaa ,_bgda =_abeb .GetBox (_bgefd );_bgda !=nil {return nil ,_g .Wrap (_bgda ,_ccbd ,"");};if _gebfb ,_bgda =s .clipRectangle (_dcdaa ,nil );_bgda !=nil {return nil ,_g .Wrap (_bgda ,_ccbd ,"");};if _gebfb ,_bgda =_gebfb .And (_gbcea );_bgda !=nil {return nil ,_g .Wrap (_bgda ,_ccbd ,"");};_dfdag .Values [_bgefd ]=_gebfb ;_dfdag .Boxes [_bgefd ]=_dcdaa ;};return _dfdag ,nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_aacd float64 ,_eege error ){const _abfg ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_g .Error (_abfg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_g .Error (_abfg ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_g .Error (_abfg ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_dada ,_bgaaa :=bm1 .Width ,bm1 .Height ;_fgf ,_cgae :=bm2 .Width ,bm2 .Height ;_bada :=_dfbe (_dada -_fgf );if _bada > maxDiffW {return 0,nil ;};_baff :=_dfbe (_bgaaa -_cgae );if _baff > maxDiffH {return 0,nil ;};var _cfea ,_fabf int ;if delX >=0{_cfea =int (delX +0.5);}else {_cfea =int (delX -0.5);};if delY >=0{_fabf =int (delY +0.5);}else {_fabf =int (delY -0.5);};_bbdc :=_ecfg (_fabf ,0);_cgad :=_bgebb (_cgae +_fabf ,_bgaaa );_bdgg :=bm1 .RowStride *_bbdc ;_eead :=bm2 .RowStride *(_bbdc -_fabf );_bbeg :=_ecfg (_cfea ,0);_dbfc :=_bgebb (_fgf +_cfea ,_dada );_bbaf :=bm2 .RowStride ;var _gbga ,_cfd int ;if _cfea >=8{_gbga =_cfea >>3;_bdgg +=_gbga ;_bbeg -=_gbga <<3;_dbfc -=_gbga <<3;_cfea &=7;}else if _cfea <=-8{_cfd =-((_cfea +7)>>3);_eead +=_cfd ;_bbaf -=_cfd ;_cfea +=_cfd <<3;};if _bbeg >=_dbfc ||_bbdc >=_cgad {return 0,nil ;};_bdeg :=(_dbfc +7)>>3;var (_agga ,_gbac ,_ddgb byte ;_cffc ,_fdef ,_bded int ;);switch {case _cfea ==0:for _bded =_bbdc ;_bded < _cgad ;_bded ,_bdgg ,_eead =_bded +1,_bdgg +bm1 .RowStride ,_eead +bm2 .RowStride {for _fdef =0;_fdef < _bdeg ;_fdef ++{_ddgb =bm1 .Data [_bdgg +_fdef ]&bm2 .Data [_eead +_fdef ];_cffc +=tab [_ddgb ];};};case _cfea > 0:if _bbaf < _bdeg {for _bded =_bbdc ;_bded < _cgad ;_bded ,_bdgg ,_eead =_bded +1,_bdgg +bm1 .RowStride ,_eead +bm2 .RowStride {_agga ,_gbac =bm1 .Data [_bdgg ],bm2 .Data [_eead ]>>uint (_cfea );_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];for _fdef =1;_fdef < _bbaf ;_fdef ++{_agga ,_gbac =bm1 .Data [_bdgg +_fdef ],(bm2 .Data [_eead +_fdef ]>>uint (_cfea ))|(bm2 .Data [_eead +_fdef -1]<<uint (8-_cfea ));_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];};_agga =bm1 .Data [_bdgg +_fdef ];_gbac =bm2 .Data [_eead +_fdef -1]<<uint (8-_cfea );_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];};}else {for _bded =_bbdc ;_bded < _cgad ;_bded ,_bdgg ,_eead =_bded +1,_bdgg +bm1 .RowStride ,_eead +bm2 .RowStride {_agga ,_gbac =bm1 .Data [_bdgg ],bm2 .Data [_eead ]>>uint (_cfea );_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];for _fdef =1;_fdef < _bdeg ;_fdef ++{_agga =bm1 .Data [_bdgg +_fdef ];_gbac =(bm2 .Data [_eead +_fdef ]>>uint (_cfea ))|(bm2 .Data [_eead +_fdef -1]<<uint (8-_cfea ));_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];};};};default:if _bdeg < _bbaf {for _bded =_bbdc ;_bded < _cgad ;_bded ,_bdgg ,_eead =_bded +1,_bdgg +bm1 .RowStride ,_eead +bm2 .RowStride {for _fdef =0;_fdef < _bdeg ;_fdef ++{_agga =bm1 .Data [_bdgg +_fdef ];_gbac =bm2 .Data [_eead +_fdef ]<<uint (-_cfea );_gbac |=bm2 .Data [_eead +_fdef +1]>>uint (8+_cfea );_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];};};}else {for _bded =_bbdc ;_bded < _cgad ;_bded ,_bdgg ,_eead =_bded +1,_bdgg +bm1 .RowStride ,_eead +bm2 .RowStride {for _fdef =0;_fdef < _bdeg -1;_fdef ++{_agga =bm1 .Data [_bdgg +_fdef ];_gbac =bm2 .Data [_eead +_fdef ]<<uint (-_cfea );_gbac |=bm2 .Data [_eead +_fdef +1]>>uint (8+_cfea );_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];};_agga =bm1 .Data [_bdgg +_fdef ];_gbac =bm2 .Data [_eead +_fdef ]<<uint (-_cfea );_ddgb =_agga &_gbac ;_cffc +=tab [_ddgb ];};};};_aacd =float64 (_cffc )*float64 (_cffc )/(float64 (area1 )*float64 (area2 ));return _aacd ,nil ;};func _ffcfd (_cegf ,_egcb *Bitmap ,_gfdfc CombinationOperator )*Bitmap {_dbdg :=New (_cegf .Width ,_cegf .Height );for _abff :=0;_abff < len (_dbdg .Data );_abff ++{_dbdg .Data [_abff ]=_eba (_cegf .Data [_abff ],_egcb .Data [_abff ],_gfdfc );};return _dbdg ;};func (_gbae *Bitmap )SizesEqual (s *Bitmap )bool {if _gbae ==s {return true ;};if _gbae .Width !=s .Width ||_gbae .Height !=s .Height {return false ;};return true ;};func (_ddcd *Bitmap )CreateTemplate ()*Bitmap {return _ddcd .createTemplate ()};func (_eaa *Bitmap )GetBitOffset (x int )int {return x &0x07};func _acgec (_bdgd ,_bggg *Bitmap ,_ffae *Selection )(*Bitmap ,error ){const _gfce ="\u006f\u0070\u0065\u006e";var _egee error ;_bdgd ,_egee =_cdff (_bdgd ,_bggg ,_ffae );if _egee !=nil {return nil ,_g .Wrap (_egee ,_gfce ,"");};_agee ,_egee :=_edea (nil ,_bggg ,_ffae );if _egee !=nil {return nil ,_g .Wrap (_egee ,_gfce ,"");};_ ,_egee =_baa (_bdgd ,_agee ,_ffae );if _egee !=nil {return nil ,_g .Wrap (_egee ,_gfce ,"");};return _bdgd ,nil ;};func _fc (_geb ,_gd *Bitmap )(_eca error ){const _ab ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_cc :=_gd .RowStride ;_dg :=_geb .RowStride ;var _gef ,_dfe ,_bgfc ,_ag ,_dfg int ;for _bgfc =0;_bgfc < _gd .Height ;_bgfc ++{_gef =_bgfc *_cc ;_dfe =8*_bgfc *_dg ;for _ag =0;_ag < _cc ;_ag ++{if _eca =_geb .setEightBytes (_dfe +_ag *8,_ecgf [_gd .Data [_gef +_ag ]]);_eca !=nil {return _g .Wrap (_eca ,_ab ,"");};};for _dfg =1;_dfg < 8;_dfg ++{for _ag =0;_ag < _dg ;_ag ++{if _eca =_geb .SetByte (_dfe +_dfg *_dg +_ag ,_geb .Data [_dfe +_ag ]);_eca !=nil {return _g .Wrap (_eca ,_ab ,"");};};};};return nil ;};func (_ecfe *Boxes )makeSizeIndicator (_fbg ,_bdbc int ,_afdd LocationFilter ,_abgc SizeComparison )*_c .NumSlice {_bfff :=&_c .NumSlice {};var _cgf ,_dgeb ,_dda int ;for _ ,_bdgb :=range *_ecfe {_cgf =0;_dgeb ,_dda =_bdgb .Dx (),_bdgb .Dy ();switch _afdd {case LocSelectWidth :if (_abgc ==SizeSelectIfLT &&_dgeb < _fbg )||(_abgc ==SizeSelectIfGT &&_dgeb > _fbg )||(_abgc ==SizeSelectIfLTE &&_dgeb <=_fbg )||(_abgc ==SizeSelectIfGTE &&_dgeb >=_fbg ){_cgf =1;};case LocSelectHeight :if (_abgc ==SizeSelectIfLT &&_dda < _bdbc )||(_abgc ==SizeSelectIfGT &&_dda > _bdbc )||(_abgc ==SizeSelectIfLTE &&_dda <=_bdbc )||(_abgc ==SizeSelectIfGTE &&_dda >=_bdbc ){_cgf =1;};case LocSelectIfEither :if (_abgc ==SizeSelectIfLT &&(_dda < _bdbc ||_dgeb < _fbg ))||(_abgc ==SizeSelectIfGT &&(_dda > _bdbc ||_dgeb > _fbg ))||(_abgc ==SizeSelectIfLTE &&(_dda <=_bdbc ||_dgeb <=_fbg ))||(_abgc ==SizeSelectIfGTE &&(_dda >=_bdbc ||_dgeb >=_fbg )){_cgf =1;};case LocSelectIfBoth :if (_abgc ==SizeSelectIfLT &&(_dda < _bdbc &&_dgeb < _fbg ))||(_abgc ==SizeSelectIfGT &&(_dda > _bdbc &&_dgeb > _fbg ))||(_abgc ==SizeSelectIfLTE &&(_dda <=_bdbc &&_dgeb <=_fbg ))||(_abgc ==SizeSelectIfGTE &&(_dda >=_bdbc &&_dgeb >=_fbg )){_cgf =1;};};_bfff .AddInt (_cgf );};return _bfff ;};func _gefg (_bbd ,_bgdb *Bitmap ,_degg ,_eaff ,_ebc ,_febc ,_ccgec ,_gebc ,_fbcf ,_aceb int ,_eeae CombinationOperator )error {var _cfeb int ;_fdaa :=func (){_cfeb ++;_ebc +=_bgdb .RowStride ;_febc +=_bbd .RowStride ;_ccgec +=_bbd .RowStride };for _cfeb =_degg ;_cfeb < _eaff ;_fdaa (){var _feed uint16 ;_gacda :=_ebc ;for _bcfg :=_febc ;_bcfg <=_ccgec ;_bcfg ++{_cea ,_cafe :=_bgdb .GetByte (_gacda );if _cafe !=nil {return _cafe ;};_agafe ,_cafe :=_bbd .GetByte (_bcfg );if _cafe !=nil {return _cafe ;};_feed =(_feed |uint16 (_agafe ))<<uint (_aceb );_agafe =byte (_feed >>8);if _bcfg ==_ccgec {_agafe =_fcef (uint (_gebc ),_agafe );};if _cafe =_bgdb .SetByte (_gacda ,_eba (_cea ,_agafe ,_eeae ));_cafe !=nil {return _cafe ;};_gacda ++;_feed <<=uint (_fbcf );};};return nil ;};const _gcfb =5000;func _edeg (_efa ,_bcfb *Bitmap ,_fga ,_cdfe ,_fageg ,_faab ,_cced int ,_dcbe CombinationOperator )error {var _dacd int ;_ggcc :=func (){_dacd ++;_fageg +=_bcfb .RowStride ;_faab +=_efa .RowStride ;_cced +=_efa .RowStride };for _dacd =_fga ;_dacd < _cdfe ;_ggcc (){_caag :=_fageg ;for _daea :=_faab ;_daea <=_cced ;_daea ++{_fed ,_gebg :=_bcfb .GetByte (_caag );if _gebg !=nil {return _gebg ;};_dfc ,_gebg :=_efa .GetByte (_daea );if _gebg !=nil {return _gebg ;};if _gebg =_bcfb .SetByte (_caag ,_eba (_fed ,_dfc ,_dcbe ));_gebg !=nil {return _gebg ;};_caag ++;};};return nil ;};func (_cfcg *Bitmaps )makeSizeIndicator (_bdbg ,_bffbg int ,_baca LocationFilter ,_ffee SizeComparison )(_fgec *_c .NumSlice ,_fdagf error ){const _dfee ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _cfcg ==nil {return nil ,_g .Error (_dfee ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _baca {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_dfee ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_baca );};switch _ffee {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_dfee ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_ffee );};_fgec =&_c .NumSlice {};var (_gdfc ,_bgbeb ,_ecceb int ;_baea *Bitmap ;);for _ ,_baea =range _cfcg .Values {_gdfc =0;_bgbeb ,_ecceb =_baea .Width ,_baea .Height ;switch _baca {case LocSelectWidth :if (_ffee ==SizeSelectIfLT &&_bgbeb < _bdbg )||(_ffee ==SizeSelectIfGT &&_bgbeb > _bdbg )||(_ffee ==SizeSelectIfLTE &&_bgbeb <=_bdbg )||(_ffee ==SizeSelectIfGTE &&_bgbeb >=_bdbg )||(_ffee ==SizeSelectIfEQ &&_bgbeb ==_bdbg ){_gdfc =1;};case LocSelectHeight :if (_ffee ==SizeSelectIfLT &&_ecceb < _bffbg )||(_ffee ==SizeSelectIfGT &&_ecceb > _bffbg )||(_ffee ==SizeSelectIfLTE &&_ecceb <=_bffbg )||(_ffee ==SizeSelectIfGTE &&_ecceb >=_bffbg )||(_ffee ==SizeSelectIfEQ &&_ecceb ==_bffbg ){_gdfc =1;};case LocSelectIfEither :if (_ffee ==SizeSelectIfLT &&(_bgbeb < _bdbg ||_ecceb < _bffbg ))||(_ffee ==SizeSelectIfGT &&(_bgbeb > _bdbg ||_ecceb > _bffbg ))||(_ffee ==SizeSelectIfLTE &&(_bgbeb <=_bdbg ||_ecceb <=_bffbg ))||(_ffee ==SizeSelectIfGTE &&(_bgbeb >=_bdbg ||_ecceb >=_bffbg ))||(_ffee ==SizeSelectIfEQ &&(_bgbeb ==_bdbg ||_ecceb ==_bffbg )){_gdfc =1;};case LocSelectIfBoth :if (_ffee ==SizeSelectIfLT &&(_bgbeb < _bdbg &&_ecceb < _bffbg ))||(_ffee ==SizeSelectIfGT &&(_bgbeb > _bdbg &&_ecceb > _bffbg ))||(_ffee ==SizeSelectIfLTE &&(_bgbeb <=_bdbg &&_ecceb <=_bffbg ))||(_ffee ==SizeSelectIfGTE &&(_bgbeb >=_bdbg &&_ecceb >=_bffbg ))||(_ffee ==SizeSelectIfEQ &&(_bgbeb ==_bdbg &&_ecceb ==_bffbg )){_gdfc =1;};};_fgec .AddInt (_gdfc );};return _fgec ,nil ;};func _bcff (_bebge *Bitmap ,_beafbb *_c .Stack ,_daeb ,_fcfg int )(_dfbdg *_d .Rectangle ,_cdba error ){const _fgea ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _bebge ==nil {return nil ,_g .Error (_fgea ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _beafbb ==nil {return nil ,_g .Error (_fgea ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_agfd ,_aggdc :=_bebge .Width ,_bebge .Height ;_cagf :=_agfd -1;_eafc :=_aggdc -1;if _daeb < 0||_daeb > _cagf ||_fcfg < 0||_fcfg > _eafc ||!_bebge .GetPixel (_daeb ,_fcfg ){return nil ,nil ;};var _geggf *_d .Rectangle ;_geggf ,_cdba =Rect (100000,100000,0,0);if _cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"");};if _cdba =_ffaec (_beafbb ,_daeb ,_daeb ,_fcfg ,1,_eafc ,_geggf );_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cdba =_ffaec (_beafbb ,_daeb ,_daeb ,_fcfg +1,-1,_eafc ,_geggf );_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_geggf .Min .X ,_geggf .Max .X =_daeb ,_daeb ;_geggf .Min .Y ,_geggf .Max .Y =_fcfg ,_fcfg ;var (_gadad *fillSegment ;_eegg int ;);for _beafbb .Len ()> 0{if _gadad ,_cdba =_fegc (_beafbb );_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"");};_fcfg =_gadad ._feaff ;for _daeb =_gadad ._cecgg ;_daeb >=0&&_bebge .GetPixel (_daeb ,_fcfg );_daeb --{if _cdba =_bebge .SetPixel (_daeb ,_fcfg ,0);_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"");};};if _daeb >=_gadad ._cecgg {for _daeb ++;_daeb <=_gadad ._adgg &&_daeb <=_cagf &&!_bebge .GetPixel (_daeb ,_fcfg );_daeb ++{};_eegg =_daeb ;if !(_daeb <=_gadad ._adgg &&_daeb <=_cagf ){continue ;};}else {_eegg =_daeb +1;if _eegg < _gadad ._cecgg -1{if _cdba =_ffaec (_beafbb ,_eegg ,_gadad ._cecgg -1,_gadad ._feaff ,-_gadad ._acgaf ,_eafc ,_geggf );_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_daeb =_gadad ._cecgg +1;};for {for ;_daeb <=_cagf &&_bebge .GetPixel (_daeb ,_fcfg );_daeb ++{if _cdba =_bebge .SetPixel (_daeb ,_fcfg ,0);_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _cdba =_ffaec (_beafbb ,_eegg ,_daeb -1,_gadad ._feaff ,_gadad ._acgaf ,_eafc ,_geggf );_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _daeb > _gadad ._adgg +1{if _cdba =_ffaec (_beafbb ,_gadad ._adgg +1,_daeb -1,_gadad ._feaff ,-_gadad ._acgaf ,_eafc ,_geggf );_cdba !=nil {return nil ,_g .Wrap (_cdba ,_fgea ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _daeb ++;_daeb <=_gadad ._adgg &&_daeb <=_cagf &&!_bebge .GetPixel (_daeb ,_fcfg );_daeb ++{};_eegg =_daeb ;if !(_daeb <=_gadad ._adgg &&_daeb <=_cagf ){break ;};};};_geggf .Max .X ++;_geggf .Max .Y ++;return _geggf ,nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _eba (oldByte ,newByte ,op );};func _ecfg (_cedf ,_ddd int )int {if _cedf > _ddd {return _cedf ;};return _ddd ;};type Point struct{X ,Y float32 ;};func _bgebb (_cga ,_gefe int )int {if _cga < _gefe {return _cga ;};return _gefe ;};func _dcda (_aaa ,_cbbg ,_egcfc byte )byte {return (_aaa &^(_egcfc ))|(_cbbg &_egcfc )};const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_abbff *Bitmaps )AddBitmap (bm *Bitmap ){_abbff .Values =append (_abbff .Values ,bm )};func (_gdegd Points )GetIntY (i int )(int ,error ){if i >=len (_gdegd ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_gdegd [i ].Y ),nil ;};func (_cagc *Bitmap )setEightPartlyBytes (_bde ,_abf int ,_dcbfb uint64 )(_eaf error ){var (_efbb byte ;_ace int ;);const _cega ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _dgac :=1;_dgac <=_abf ;_dgac ++{_ace =64-_dgac *8;_efbb =byte (_dcbfb >>uint (_ace )&0xff);_db .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_efbb ,_bde ,_bde +_dgac -1,_abf ,_ace );if _eaf =_cagc .SetByte (_bde +_dgac -1,_efbb );_eaf !=nil {return _g .Wrap (_eaf ,_cega ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_aeac :=_cagc .RowStride *8-_cagc .Width ;if _aeac ==0{return nil ;};_ace -=8;_efbb =byte (_dcbfb >>uint (_ace )&0xff)<<uint (_aeac );if _eaf =_cagc .SetByte (_bde +_abf ,_efbb );_eaf !=nil {return _g .Wrap (_eaf ,_cega ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_aegf *Bitmaps )SortByWidth (){_agafd :=(*byWidth )(_aegf );_fa .Sort (_agafd )};type Bitmaps struct{Values []*Bitmap ;Boxes []*_d .Rectangle ;};func _fcef (_ecbe uint ,_caba byte )byte {return _caba >>_ecbe <<_ecbe };func (_fdf *Bitmap )GetPixel (x ,y int )bool {_adbg :=_fdf .GetByteIndex (x ,y );_bga :=_fdf .GetBitOffset (x );_eefg :=uint (7-_bga );if _adbg > len (_fdf .Data )-1{_db .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_fdf );return false ;};if (_fdf .Data [_adbg ]>>_eefg )&0x01>=1{return true ;};return false ;};func _de (_bag *Bitmap ,_dad int )(*Bitmap ,error ){const _gcga ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _bag ==nil {return nil ,_g .Error (_gcga ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dad ==1{return _deba (nil ,_bag );};if _dad !=2&&_dad !=4&&_dad !=8{return nil ,_g .Error (_gcga ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_dd :=_dad *_bag .Width ;_ae :=_dad *_bag .Height ;_cag :=New (_dd ,_ae );var _bb error ;switch _dad {case 2:_bb =_cd (_cag ,_bag );case 4:_bb =_be (_cag ,_bag );case 8:_bb =_fc (_cag ,_bag );};if _bb !=nil {return nil ,_g .Wrap (_bb ,_gcga ,"");};return _cag ,nil ;};func (_ddeg *Bitmaps )AddBox (box *_d .Rectangle ){_ddeg .Boxes =append (_ddeg .Boxes ,box )};func TstOSymbol (t *_gc .T ,scale ...int )*Bitmap {_bdfg ,_cfdg :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_f .NoError (t ,_cfdg );return TstGetScaledSymbol (t ,_bdfg ,scale ...);};func (_cdbb *Bitmaps )HeightSorter ()func (_fgbdg ,_cabff int )bool {return func (_ceaa ,_fbda int )bool {_gafc :=_cdbb .Values [_ceaa ].Height < _cdbb .Values [_fbda ].Height ;_db .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_cdbb .Values [_ceaa ].Height ,_cdbb .Values [_fbda ].Height ,_gafc );return _gafc ;};};func _ageee (_gfbe *Bitmap ,_ccedf *_c .Stack ,_dcg ,_ddggg ,_ddcc int )(_fbcda *_d .Rectangle ,_egdf error ){const _dfffc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _gfbe ==nil {return nil ,_g .Error (_dfffc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _ccedf ==nil {return nil ,_g .Error (_dfffc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _ddcc {case 4:if _fbcda ,_egdf =_bcff (_gfbe ,_ccedf ,_dcg ,_ddggg );_egdf !=nil {return nil ,_g .Wrap (_egdf ,_dfffc ,"");};return _fbcda ,nil ;case 8:if _fbcda ,_egdf =_cgccc (_gfbe ,_ccedf ,_dcg ,_ddggg );_egdf !=nil {return nil ,_g .Wrap (_egdf ,_dfffc ,"");};return _fbcda ,nil ;default:return nil ,_g .Errorf (_dfffc ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_ddcc );};};var (_abde =_fcc ();_adgda =_bec ();_ecgf =_ebd (););type BoundaryCondition int ;func _bcbb (_fcag ,_afac *Bitmap ,_gdeag ,_aada int )(*Bitmap ,error ){const _egaf ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _afac ==nil {return nil ,_g .Error (_egaf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _gdeag < 1||_aada < 1{return nil ,_g .Error (_egaf ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _gdeag ==1&&_aada ==1{return _deba (_fcag ,_afac );};if MorphBC ==SymmetricMorphBC {_ebbf ,_affc :=_gcgdc (_fcag ,_afac ,_gdeag ,_aada );if _affc !=nil {return nil ,_g .Wrap (_affc ,_egaf ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _ebbf ,nil ;};_ecee :=_ecfg (_gdeag /2,_aada /2);_gbad :=8*((_ecee +7)/8);_abgcg ,_fdfd :=_afac .AddBorder (_gbad ,0);if _fdfd !=nil {return nil ,_g .Wrapf (_fdfd ,_egaf ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_gbad );};var _daba ,_ggad *Bitmap ;if _gdeag ==1||_aada ==1{_ebcb :=SelCreateBrick (_aada ,_gdeag ,_aada /2,_gdeag /2,SelHit );_daba ,_fdfd =_egab (nil ,_abgcg ,_ebcb );if _fdfd !=nil {return nil ,_g .Wrap (_fdfd ,_egaf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_dggd :=SelCreateBrick (1,_gdeag ,0,_gdeag /2,SelHit );_ccgf ,_becb :=_baa (nil ,_abgcg ,_dggd );if _becb !=nil {return nil ,_g .Wrap (_becb ,_egaf ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_acac :=SelCreateBrick (_aada ,1,_aada /2,0,SelHit );_daba ,_becb =_baa (nil ,_ccgf ,_acac );if _becb !=nil {return nil ,_g .Wrap (_becb ,_egaf ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_becb =_edea (_ccgf ,_daba ,_dggd );_becb !=nil {return nil ,_g .Wrap (_becb ,_egaf ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_becb =_edea (_daba ,_ccgf ,_acac );_becb !=nil {return nil ,_g .Wrap (_becb ,_egaf ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _ggad ,_fdfd =_daba .RemoveBorder (_gbad );_fdfd !=nil {return nil ,_g .Wrap (_fdfd ,_egaf ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _fcag ==nil {return _ggad ,nil ;};if _ ,_fdfd =_deba (_fcag ,_ggad );_fdfd !=nil {return nil ,_fdfd ;};return _fcag ,nil ;};func _bgca (_gadaf ,_gga *Bitmap ,_agd ,_cfab ,_eff uint ,_bbdd ,_beg int ,_gcgdd bool ,_fbab ,_fdeb int )error {for _cba :=_bbdd ;_cba < _beg ;_cba ++{if _fbab +1< len (_gadaf .Data ){_acab :=_cba +1==_beg ;_aeg ,_fbea :=_gadaf .GetByte (_fbab );if _fbea !=nil {return _fbea ;};_fbab ++;_aeg <<=_agd ;_gffd ,_fbea :=_gadaf .GetByte (_fbab );if _fbea !=nil {return _fbea ;};_gffd >>=_cfab ;_aecd :=_aeg |_gffd ;if _acab &&!_gcgdd {_aecd =_fcef (_eff ,_aecd );};_fbea =_gga .SetByte (_fdeb ,_aecd );if _fbea !=nil {return _fbea ;};_fdeb ++;if _acab &&_gcgdd {_cbag ,_cebce :=_gadaf .GetByte (_fbab );if _cebce !=nil {return _cebce ;};_cbag <<=_agd ;_aecd =_fcef (_eff ,_cbag );if _cebce =_gga .SetByte (_fdeb ,_aecd );_cebce !=nil {return _cebce ;};};continue ;};_cbda ,_eged :=_gadaf .GetByte (_fbab );if _eged !=nil {_db .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_fbab ,_eged );return _eged ;};_cbda <<=_agd ;_fbab ++;_eged =_gga .SetByte (_fdeb ,_cbda );if _eged !=nil {return _eged ;};_fdeb ++;};return nil ;};func _adefg (_beaa ...MorphProcess )(_dgde error ){const _cfgd ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _geada ,_dbge int ;for _bfda ,_ceec :=range _beaa {if _dgde =_ceec .verify (_bfda ,&_geada ,&_dbge );_dgde !=nil {return _g .Wrap (_dgde ,_cfgd ,"");};};if _dbge !=0&&_geada !=0{return _g .Error (_cfgd ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_egaa bool ,_ecfd error ){const _gdeg ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_fcdg ,_beba :=p1 .Width ,p1 .Height ;_bdege ,_cbdg :=p3 .Width ,p3 .Height ;if _c .Abs (_fcdg -_bdege )> maxDiffW {return false ,nil ;};if _c .Abs (_beba -_cbdg )> maxDiffH {return false ,nil ;};_fded :=int (float32 (area1 )*(1.0-rank )+0.5);_bgbcd :=int (float32 (area3 )*(1.0-rank )+0.5);var _bbgf ,_cfdb int ;if delX >=0{_bbgf =int (delX +0.5);}else {_bbgf =int (delX -0.5);};if delY >=0{_cfdb =int (delY +0.5);}else {_cfdb =int (delY -0.5);};_gffa :=p1 .CreateTemplate ();if _ecfd =_gffa .RasterOperation (0,0,_fcdg ,_beba ,PixSrc ,p1 ,0,0);_ecfd !=nil {return false ,_g .Wrap (_ecfd ,_gdeg ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecfd =_gffa .RasterOperation (_bbgf ,_cfdb ,_fcdg ,_beba ,PixNotSrcAndDst ,p4 ,0,0);_ecfd !=nil {return false ,_g .Wrap (_ecfd ,_gdeg ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_egaa ,_ecfd =_gffa .ThresholdPixelSum (_fded ,tab8 );if _ecfd !=nil {return false ,_g .Wrap (_ecfd ,_gdeg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _egaa {return false ,nil ;};if _ecfd =_gffa .RasterOperation (_bbgf ,_cfdb ,_bdege ,_cbdg ,PixSrc ,p3 ,0,0);_ecfd !=nil {return false ,_g .Wrap (_ecfd ,_gdeg ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ecfd =_gffa .RasterOperation (0,0,_bdege ,_cbdg ,PixNotSrcAndDst ,p2 ,0,0);_ecfd !=nil {return false ,_g .Wrap (_ecfd ,_gdeg ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_egaa ,_ecfd =_gffa .ThresholdPixelSum (_bgbcd ,tab8 );if _ecfd !=nil {return false ,_g .Wrap (_ecfd ,_gdeg ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_egaa ,nil ;};func _fcagb (_cfbe ,_egeb *Bitmap ,_deebd ,_dbbb int )(*Bitmap ,error ){const _debe ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _egeb ==nil {return nil ,_g .Error (_debe ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _deebd < 1||_dbbb < 1{return nil ,_g .Error (_debe ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _deebd ==1&&_dbbb ==1{_ebfb ,_aafc :=_deba (_cfbe ,_egeb );if _aafc !=nil {return nil ,_g .Wrap (_aafc ,_debe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _ebfb ,nil ;};if _deebd ==1||_dbbb ==1{_gged :=SelCreateBrick (_dbbb ,_deebd ,_dbbb /2,_deebd /2,SelHit );_gffg ,_gcgdcf :=_edea (_cfbe ,_egeb ,_gged );if _gcgdcf !=nil {return nil ,_g .Wrap (_gcgdcf ,_debe ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _gffg ,nil ;};_cefc :=SelCreateBrick (1,_deebd ,0,_deebd /2,SelHit );_dfdd :=SelCreateBrick (_dbbb ,1,_dbbb /2,0,SelHit );_cada ,_cbgd :=_edea (nil ,_egeb ,_cefc );if _cbgd !=nil {return nil ,_g .Wrap (_cbgd ,_debe ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_cfbe ,_cbgd =_edea (_cfbe ,_cada ,_dfdd );if _cbgd !=nil {return nil ,_g .Wrap (_cbgd ,_debe ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _cfbe ,nil ;};func (_efgg *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _afcf ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_gaad ,_dedfb :=_efgg .selectByIndexes (idx );if _dedfb !=nil {return nil ,_g .Wrap (_dedfb ,_afcf ,"");};return _gaad ,nil ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_cbg *Bitmap )InverseData (){_cbg .inverseData ()};func (_bfe *ClassedPoints )validateIntSlice ()error {const _fada ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_edac :=range _bfe .IntSlice {if _edac >=(_bfe .Points .Size ()){return _g .Errorf (_fada ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_edac ,_bfe .Points .Size ());};};return nil ;};var _ _fa .Interface =&ClassedPoints {};type SizeSelection int ;func (_bedd *Bitmap )setFourBytes (_acb int ,_deb uint32 )error {if _acb +3> len (_bedd .Data )-1{return _g .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_acb );};_bedd .Data [_acb ]=byte ((_deb &0xff000000)>>24);_bedd .Data [_acb +1]=byte ((_deb &0xff0000)>>16);_bedd .Data [_acb +2]=byte ((_deb &0xff00)>>8);_bedd .Data [_acb +3]=byte (_deb &0xff);return nil ;};func _cgccc (_ggee *Bitmap ,_dffd *_c .Stack ,_cfefc ,_ebebg int )(_agcb *_d .Rectangle ,_eedg error ){const _dgbf ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _ggee ==nil {return nil ,_g .Error (_dgbf ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dffd ==nil {return nil ,_g .Error (_dgbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_adfg ,_fbbc :=_ggee .Width ,_ggee .Height ;_debg :=_adfg -1;_dcceb :=_fbbc -1;if _cfefc < 0||_cfefc > _debg ||_ebebg < 0||_ebebg > _dcceb ||!_ggee .GetPixel (_cfefc ,_ebebg ){return nil ,nil ;};_fdada :=_d .Rect (100000,100000,0,0);if _eedg =_ffaec (_dffd ,_cfefc ,_cfefc ,_ebebg ,1,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _eedg =_ffaec (_dffd ,_cfefc ,_cfefc ,_ebebg +1,-1,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_fdada .Min .X ,_fdada .Max .X =_cfefc ,_cfefc ;_fdada .Min .Y ,_fdada .Max .Y =_ebebg ,_ebebg ;var (_ebefa *fillSegment ;_fdaab int ;);for _dffd .Len ()> 0{if _ebefa ,_eedg =_fegc (_dffd );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"");};_ebebg =_ebefa ._feaff ;for _cfefc =_ebefa ._cecgg -1;_cfefc >=0&&_ggee .GetPixel (_cfefc ,_ebebg );_cfefc --{if _eedg =_ggee .SetPixel (_cfefc ,_ebebg ,0);_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _cfefc >=_ebefa ._cecgg -1{for {for _cfefc ++;_cfefc <=_ebefa ._adgg +1&&_cfefc <=_debg &&!_ggee .GetPixel (_cfefc ,_ebebg );_cfefc ++{};_fdaab =_cfefc ;if !(_cfefc <=_ebefa ._adgg +1&&_cfefc <=_debg ){break ;};for ;_cfefc <=_debg &&_ggee .GetPixel (_cfefc ,_ebebg );_cfefc ++{if _eedg =_ggee .SetPixel (_cfefc ,_ebebg ,0);_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _eedg =_ffaec (_dffd ,_fdaab ,_cfefc -1,_ebefa ._feaff ,_ebefa ._acgaf ,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cfefc > _ebefa ._adgg {if _eedg =_ffaec (_dffd ,_ebefa ._adgg +1,_cfefc -1,_ebefa ._feaff ,-_ebefa ._acgaf ,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_fdaab =_cfefc +1;if _fdaab < _ebefa ._cecgg {if _eedg =_ffaec (_dffd ,_fdaab ,_ebefa ._cecgg -1,_ebefa ._feaff ,-_ebefa ._acgaf ,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_cfefc =_ebefa ._cecgg ;for {for ;_cfefc <=_debg &&_ggee .GetPixel (_cfefc ,_ebebg );_cfefc ++{if _eedg =_ggee .SetPixel (_cfefc ,_ebebg ,0);_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _eedg =_ffaec (_dffd ,_fdaab ,_cfefc -1,_ebefa ._feaff ,_ebefa ._acgaf ,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _cfefc > _ebefa ._adgg {if _eedg =_ffaec (_dffd ,_ebefa ._adgg +1,_cfefc -1,_ebefa ._feaff ,-_ebefa ._acgaf ,_dcceb ,&_fdada );_eedg !=nil {return nil ,_g .Wrap (_eedg ,_dgbf ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _cfefc ++;_cfefc <=_ebefa ._adgg +1&&_cfefc <=_debg &&!_ggee .GetPixel (_cfefc ,_ebebg );_cfefc ++{};_fdaab =_cfefc ;if !(_cfefc <=_ebefa ._adgg +1&&_cfefc <=_debg ){break ;};};};_fdada .Max .X ++;_fdada .Max .Y ++;return &_fdada ,nil ;};func (_bbb *Bitmap )And (s *Bitmap )(_ebe *Bitmap ,_bcf error ){const _abgg ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _bbb ==nil {return nil ,_g .Error (_abgg ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_g .Error (_abgg ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_bbb .SizesEqual (s ){_db .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_abgg );};if _ebe ,_bcf =_deba (_ebe ,_bbb );_bcf !=nil {return nil ,_g .Wrap (_bcf ,_abgg ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _bcf =_ebe .RasterOperation (0,0,_ebe .Width ,_ebe .Height ,PixSrcAndDst ,s ,0,0);_bcf !=nil {return nil ,_g .Wrap (_bcf ,_abgg ,"");};return _ebe ,nil ;};func TstAddSymbol (t *_gc .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_aeefe :=_d .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_aeefe );*x +=sym .Width +space ;};func _ffaec (_daac *_c .Stack ,_cbfd ,_cfgcc ,_effc ,_dgc ,_cecd int ,_aegb *_d .Rectangle )(_fbfc error ){const _fdag ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _daac ==nil {return _g .Error (_fdag ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _aegb ==nil {return _g .Error (_fdag ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_aegb .Min .X =_c .Min (_aegb .Min .X ,_cbfd );_aegb .Max .X =_c .Max (_aegb .Max .X ,_cfgcc );_aegb .Min .Y =_c .Min (_aegb .Min .Y ,_effc );_aegb .Max .Y =_c .Max (_aegb .Max .Y ,_effc );if !(_effc +_dgc >=0&&_effc +_dgc <=_cecd ){return nil ;};if _daac .Aux ==nil {return _g .Error (_fdag ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _cffa *fillSegment ;_cffe ,_fcgad :=_daac .Aux .Pop ();if _fcgad {if _cffa ,_fcgad =_cffe .(*fillSegment );!_fcgad {return _g .Error (_fdag ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_cffa =&fillSegment {};};_cffa ._cecgg =_cbfd ;_cffa ._adgg =_cfgcc ;_cffa ._feaff =_effc ;_cffa ._acgaf =_dgc ;_daac .Push (_cffa );return nil ;};func (_bddcc *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _eaaa ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _ggcg :=_bddcc .validateIntSlice ();_ggcg !=nil {return nil ,_g .Wrap (_ggcg ,_eaaa ,"");};if _bddcc .IntSlice .Size ()==0{return nil ,_g .Error (_eaaa ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_bddcc .SortByY ();var (_fcge []*ClassedPoints ;_cbgge int ;);_deee :=-1;var _ggbc *ClassedPoints ;for _cefd :=0;_cefd < len (_bddcc .IntSlice );_cefd ++{_cbgge =int (_bddcc .YAtIndex (_cefd ));if _cbgge !=_deee {_ggbc =&ClassedPoints {Points :_bddcc .Points };_deee =_cbgge ;_fcge =append (_fcge ,_ggbc );};_ggbc .IntSlice =append (_ggbc .IntSlice ,_bddcc .IntSlice [_cefd ]);};for _ ,_fgcf :=range _fcge {_fgcf .SortByX ();};return _fcge ,nil ;};func TstRSymbol (t *_gc .T ,scale ...int )*Bitmap {_abccg ,_aafcf :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_f .NoError (t ,_aafcf );return TstGetScaledSymbol (t ,_abccg ,scale ...);};func _ege (_gfd ,_babf *Bitmap ,_fad int ,_ffa []byte ,_dffc int )(_ecf error ){const _cdc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_egeg ,_fg ,_aec ,_abec ,_cfe ,_gcgd ,_gff ,_gbe int ;_bbga ,_faa ,_bgg ,_bbe uint32 ;_dec ,_dbg byte ;_gcae uint16 ;);_acc :=make ([]byte ,4);_cfg :=make ([]byte ,4);for _aec =0;_aec < _gfd .Height -1;_aec ,_abec =_aec +2,_abec +1{_egeg =_aec *_gfd .RowStride ;_fg =_abec *_babf .RowStride ;for _cfe ,_gcgd =0,0;_cfe < _dffc ;_cfe ,_gcgd =_cfe +4,_gcgd +1{for _gff =0;_gff < 4;_gff ++{_gbe =_egeg +_cfe +_gff ;if _gbe <=len (_gfd .Data )-1&&_gbe < _egeg +_gfd .RowStride {_acc [_gff ]=_gfd .Data [_gbe ];}else {_acc [_gff ]=0x00;};_gbe =_egeg +_gfd .RowStride +_cfe +_gff ;if _gbe <=len (_gfd .Data )-1&&_gbe < _egeg +(2*_gfd .RowStride ){_cfg [_gff ]=_gfd .Data [_gbe ];}else {_cfg [_gff ]=0x00;};};_bbga =_cg .BigEndian .Uint32 (_acc );_faa =_cg .BigEndian .Uint32 (_cfg );_bgg =_bbga &_faa ;_bgg |=_bgg <<1;_bbe =_bbga |_faa ;_bbe &=_bbe <<1;_faa =_bgg &_bbe ;_faa &=0xaaaaaaaa;_bbga =_faa |(_faa <<7);_dec =byte (_bbga >>24);_dbg =byte ((_bbga >>8)&0xff);_gbe =_fg +_gcgd ;if _gbe +1==len (_babf .Data )-1||_gbe +1>=_fg +_babf .RowStride {if _ecf =_babf .SetByte (_gbe ,_ffa [_dec ]);_ecf !=nil {return _g .Wrapf (_ecf ,_cdc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_gbe );};}else {_gcae =(uint16 (_ffa [_dec ])<<8)|uint16 (_ffa [_dbg ]);if _ecf =_babf .setTwoBytes (_gbe ,_gcae );_ecf !=nil {return _g .Wrapf (_ecf ,_cdc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_gbe );};_gcgd ++;};};};return nil ;};func _cgbc (_ceda *Bitmap ,_faga *Bitmap ,_ggdc *Selection ,_ecgcf **Bitmap )(*Bitmap ,error ){const _ecaa ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _faga ==nil {return nil ,_g .Error (_ecaa ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _ggdc ==nil {return nil ,_g .Error (_ecaa ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_aafa ,_efdg :=_ggdc .Height ,_ggdc .Width ;if _aafa ==0||_efdg ==0{return nil ,_g .Error (_ecaa ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ceda ==nil {_ceda =_faga .createTemplate ();*_ecgcf =_faga ;return _ceda ,nil ;};_ceda .Width =_faga .Width ;_ceda .Height =_faga .Height ;_ceda .RowStride =_faga .RowStride ;_ceda .Color =_faga .Color ;_ceda .Data =make ([]byte ,_faga .RowStride *_faga .Height );if _ceda ==_faga {*_ecgcf =_faga .Copy ();}else {*_ecgcf =_faga ;};return _ceda ,nil ;};func (_gdeaa *ClassedPoints )YAtIndex (i int )float32 {return (*_gdeaa .Points )[_gdeaa .IntSlice [i ]].Y };func TstImageBitmap ()*Bitmap {return _cafg .Copy ()};type fillSegment struct{_cecgg int ;_adgg int ;_feaff int ;_acgaf int ;};func _egab (_ecgc ,_adef *Bitmap ,_ddge *Selection )(*Bitmap ,error ){const _fcgc ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _eddf error ;if _ecgc ,_eddf =_cdff (_ecgc ,_adef ,_ddge );_eddf !=nil {return nil ,_eddf ;};_efdd ,_eddf :=_baa (nil ,_adef ,_ddge );if _eddf !=nil {return nil ,_g .Wrap (_eddf ,_fcgc ,"");};if _ ,_eddf =_edea (_ecgc ,_efdd ,_ddge );_eddf !=nil {return nil ,_g .Wrap (_eddf ,_fcgc ,"");};return _ecgc ,nil ;};func (_fggdc *byWidth )Swap (i ,j int ){_fggdc .Values [i ],_fggdc .Values [j ]=_fggdc .Values [j ],_fggdc .Values [i ];if _fggdc .Boxes !=nil {_fggdc .Boxes [i ],_fggdc .Boxes [j ]=_fggdc .Boxes [j ],_fggdc .Boxes [i ];};};func _cd (_egf ,_dc *Bitmap )(_ba error ){const _ge ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_a :=_dc .RowStride ;_da :=_egf .RowStride ;var (_gb byte ;_fd uint16 ;_egb ,_gee ,_ac ,_dcf ,_bg int ;);for _ac =0;_ac < _dc .Height ;_ac ++{_egb =_ac *_a ;_gee =2*_ac *_da ;for _dcf =0;_dcf < _a ;_dcf ++{_gb =_dc .Data [_egb +_dcf ];_fd =_abde [_gb ];_bg =_gee +_dcf *2;if _egf .RowStride !=_dc .RowStride *2&&(_dcf +1)*2> _egf .RowStride {_ba =_egf .SetByte (_bg ,byte (_fd >>8));}else {_ba =_egf .setTwoBytes (_bg ,_fd );};if _ba !=nil {return _g .Wrap (_ba ,_ge ,"");};};for _dcf =0;_dcf < _da ;_dcf ++{_bg =_gee +_da +_dcf ;_gb =_egf .Data [_gee +_dcf ];if _ba =_egf .SetByte (_bg ,_gb );_ba !=nil {return _g .Wrapf (_ba ,_ge ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_gee +_dcf ,_gee +_da +_dcf );};};};return nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ccgd (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _dbed (_ccb ,_fgbc ,_dfd *Bitmap )(*Bitmap ,error ){const _aagg ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _fgbc ==nil {return nil ,_g .Error (_aagg ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _dfd ==nil {return nil ,_g .Error (_aagg ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _ccb ==_dfd {return nil ,_g .Error (_aagg ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_fgbc .SizesEqual (_dfd ){_db .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_aagg );};var _eag error ;if _ccb ,_eag =_deba (_ccb ,_fgbc );_eag !=nil {return nil ,_g .Wrap (_eag ,_aagg ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _eag =_ccb .RasterOperation (0,0,_ccb .Width ,_ccb .Height ,PixSrcXorDst ,_dfd ,0,0);_eag !=nil {return nil ,_g .Wrap (_eag ,_aagg ,"");};return _ccb ,nil ;};func (_cdeb *Bitmap )ClipRectangle (box *_d .Rectangle )(_bda *Bitmap ,_bbge *_d .Rectangle ,_ffc error ){const _dac ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_g .Error (_dac ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_fccf ,_cbf :=_cdeb .Width ,_cdeb .Height ;_bea :=_d .Rect (0,0,_fccf ,_cbf );if !box .Overlaps (_bea ){return nil ,nil ,_g .Error (_dac ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_aed :=box .Intersect (_bea );_fdcb ,_ccf :=_aed .Min .X ,_aed .Min .Y ;_ece ,_ffda :=_aed .Dx (),_aed .Dy ();_bda =New (_ece ,_ffda );_bda .Text =_cdeb .Text ;if _ffc =_bda .RasterOperation (0,0,_ece ,_ffda ,PixSrc ,_cdeb ,_fdcb ,_ccf );_ffc !=nil {return nil ,nil ,_g .Wrap (_ffc ,_dac ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_bbge =&_aed ;return _bda ,_bbge ,nil ;};func (_cebd *Bitmap )GetUnpaddedData ()([]byte ,error ){_afd :=uint (_cebd .Width &0x07);if _afd ==0{return _cebd .Data ,nil ;};_adg :=_cebd .Width *_cebd .Height ;if _adg %8!=0{_adg >>=3;_adg ++;}else {_adg >>=3;};_deg :=make ([]byte ,_adg );_fecg :=_eg .NewWriterMSB (_deg );const _efg ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _caeg :=0;_caeg < _cebd .Height ;_caeg ++{for _gead :=0;_gead < _cebd .RowStride ;_gead ++{_deed :=_cebd .Data [_caeg *_cebd .RowStride +_gead ];if _gead !=_cebd .RowStride -1{_dgga :=_fecg .WriteByte (_deed );if _dgga !=nil {return nil ,_g .Wrap (_dgga ,_efg ,"");};continue ;};for _cebb :=uint (0);_cebb < _afd ;_cebb ++{_ceg :=_fecg .WriteBit (int (_deed >>(7-_cebb )&0x01));if _ceg !=nil {return nil ,_g .Wrap (_ceg ,_efg ,"");};};};};return _deg ,nil ;};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _edea (_eabg ,_ebef *Bitmap ,_fac *Selection )(*Bitmap ,error ){const _bdde ="\u0065\u0072\u006fd\u0065";var (_ffca error ;_fbfg *Bitmap ;);_eabg ,_ffca =_cgbc (_eabg ,_ebef ,_fac ,&_fbfg );if _ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"");};if _ffca =_eabg .setAll ();_ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"");};var _cfff SelectionValue ;for _ddbce :=0;_ddbce < _fac .Height ;_ddbce ++{for _cgaea :=0;_cgaea < _fac .Width ;_cgaea ++{_cfff =_fac .Data [_ddbce ][_cgaea ];if _cfff ==SelHit {_ffca =_ccgd (_eabg ,_fac .Cx -_cgaea ,_fac .Cy -_ddbce ,_ebef .Width ,_ebef .Height ,PixSrcAndDst ,_fbfg ,0,0);if _ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"");};};};};if MorphBC ==SymmetricMorphBC {return _eabg ,nil ;};_gabf ,_gebfa ,_cca ,_ccdc :=_fac .findMaxTranslations ();if _gabf > 0{if _ffca =_eabg .RasterOperation (0,0,_gabf ,_ebef .Height ,PixClr ,nil ,0,0);_ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _cca > 0{if _ffca =_eabg .RasterOperation (_ebef .Width -_cca ,0,_cca ,_ebef .Height ,PixClr ,nil ,0,0);_ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _gebfa > 0{if _ffca =_eabg .RasterOperation (0,0,_ebef .Width ,_gebfa ,PixClr ,nil ,0,0);_ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _ccdc > 0{if _ffca =_eabg .RasterOperation (0,_ebef .Height -_ccdc ,_ebef .Width ,_ccdc ,PixClr ,nil ,0,0);_ffca !=nil {return nil ,_g .Wrap (_ffca ,_bdde ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _eabg ,nil ;};func (_fage *Bitmap )thresholdPixelSum (_gce int )bool {var (_dce int ;_cfag uint8 ;_cgcf byte ;_ggfa int ;);_beac :=_fage .RowStride ;_aced :=uint (_fage .Width &0x07);if _aced !=0{_cfag =uint8 ((0xff<<(8-_aced ))&0xff);_beac --;};for _dcd :=0;_dcd < _fage .Height ;_dcd ++{for _ggfa =0;_ggfa < _beac ;_ggfa ++{_cgcf =_fage .Data [_dcd *_fage .RowStride +_ggfa ];_dce +=int (_cacc [_cgcf ]);};if _aced !=0{_cgcf =_fage .Data [_dcd *_fage .RowStride +_ggfa ]&_cfag ;_dce +=int (_cacc [_cgcf ]);};if _dce > _gce {return true ;};};return false ;};func (_gcdga *Bitmaps )GetBox (i int )(*_d .Rectangle ,error ){const _ebgg ="\u0047\u0065\u0074\u0042\u006f\u0078";if _gcdga ==nil {return nil ,_g .Error (_ebgg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_gcdga .Boxes )-1{return nil ,_g .Errorf (_ebgg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gcdga .Boxes [i ],nil ;};func (_gddc *byHeight )Swap (i ,j int ){_gddc .Values [i ],_gddc .Values [j ]=_gddc .Values [j ],_gddc .Values [i ];if _gddc .Boxes !=nil {_gddc .Boxes [i ],_gddc .Boxes [j ]=_gddc .Boxes [j ],_gddc .Boxes [i ];};};func ClipBoxToRectangle (box *_d .Rectangle ,wi ,hi int )(_ageg *_d .Rectangle ,_dcbeb error ){const _afdg ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_g .Error (_afdg ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_g .Error (_afdg ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_bcfbc :=*box ;_ageg =&_bcfbc ;if _ageg .Min .X < 0{_ageg .Max .X +=_ageg .Min .X ;_ageg .Min .X =0;};if _ageg .Min .Y < 0{_ageg .Max .Y +=_ageg .Min .Y ;_ageg .Min .Y =0;};if _ageg .Max .X > wi {_ageg .Max .X =wi ;};if _ageg .Max .Y > hi {_ageg .Max .Y =hi ;};return _ageg ,nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gdab float64 ,_ddae error ){const _eded ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _gdab ,_g .Error (_eded ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _gdab ,_g .Error (_eded ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _gdab ,_g .Error (_eded ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_dagg ,_cfef :=bm1 .Width ,bm1 .Height ;_dfae ,_bafg :=bm2 .Width ,bm2 .Height ;if _dfbe (_dagg -_dfae )> maxDiffW {return 0,nil ;};if _dfbe (_cfef -_bafg )> maxDiffH {return 0,nil ;};var _cggg ,_ddec int ;if delX >=0{_cggg =int (delX +0.5);}else {_cggg =int (delX -0.5);};if delY >=0{_ddec =int (delY +0.5);}else {_ddec =int (delY -0.5);};_affbd :=bm1 .createTemplate ();if _ddae =_affbd .RasterOperation (_cggg ,_ddec ,_dfae ,_bafg ,PixSrc ,bm2 ,0,0);_ddae !=nil {return _gdab ,_g .Wrap (_ddae ,_eded ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _ddae =_affbd .RasterOperation (0,0,_dagg ,_cfef ,PixSrcAndDst ,bm1 ,0,0);_ddae !=nil {return _gdab ,_g .Wrap (_ddae ,_eded ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_degd :=_affbd .countPixels ();_gdab =float64 (_degd )*float64 (_degd )/(float64 (area1 )*float64 (area2 ));return _gdab ,nil ;};func (_agg *Bitmap )GetByteIndex (x ,y int )int {return y *_agg .RowStride +(x >>3)};type SelectionValue int ;func _ffff ()[]int {_cbdb :=make ([]int ,256);_cbdb [0]=0;_cbdb [1]=7;var _bcgf int ;for _bcgf =2;_bcgf < 4;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -2]+6;};for _bcgf =4;_bcgf < 8;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -4]+5;};for _bcgf =8;_bcgf < 16;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -8]+4;};for _bcgf =16;_bcgf < 32;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -16]+3;};for _bcgf =32;_bcgf < 64;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -32]+2;};for _bcgf =64;_bcgf < 128;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -64]+1;};for _bcgf =128;_bcgf < 256;_bcgf ++{_cbdb [_bcgf ]=_cbdb [_bcgf -128];};return _cbdb ;};func (_ddce MorphProcess )getWidthHeight ()(_fcbg ,_acfb int ){return _ddce .Arguments [0],_ddce .Arguments [1];};func (_gaca *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _gcff ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_gaca .IntSlice .Size (){return 0,_g .Errorf (_gcff ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_gaca .XAtIndex (i )),nil ;};type shift int ;func (_abbe *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _bgab ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_abbe .Values )==0{return nil ,_g .Error (_bgab ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_bcfab :=&BitmapsArray {};_abbe .SortByHeight ();_gdc :=-1;_afge :=-1;for _bfaf :=0;_bfaf < len (_abbe .Values );_bfaf ++{_gadd :=_abbe .Values [_bfaf ].Height ;if _gadd > _gdc {_gdc =_gadd ;_afge ++;_bcfab .Values =append (_bcfab .Values ,&Bitmaps {});};_bcfab .Values [_afge ].AddBitmap (_abbe .Values [_bfaf ]);};return _bcfab ,nil ;};func (_dfbf *Bitmap )equivalent (_dfeb *Bitmap )bool {if _dfbf ==_dfeb {return true ;};if !_dfbf .SizesEqual (_dfeb ){return false ;};_afeb :=_ffcfd (_dfbf ,_dfeb ,CmbOpXor );_aagf :=_dfbf .countPixels ();_afag :=int (0.25*float32 (_aagf ));if _afeb .thresholdPixelSum (_afag ){return false ;};var (_dba [9][9]int ;_cdg [18][9]int ;_agf [9][18]int ;_fcba int ;_adbb int ;);_gafb :=9;_egbg :=_dfbf .Height /_gafb ;_eae :=_dfbf .Width /_gafb ;_gagc ,_bdb :=_egbg /2,_eae /2;if _egbg < _eae {_gagc =_eae /2;_bdb =_egbg /2;};_gbbc :=float64 (_gagc )*float64 (_bdb )*_ea .Pi ;_gefd :=int (float64 (_egbg *_eae /2)*0.9);_beaf :=int (float64 (_eae *_egbg /2)*0.9);for _aad :=0;_aad < _gafb ;_aad ++{_eda :=_eae *_aad +_fcba ;var _fgc int ;if _aad ==_gafb -1{_fcba =0;_fgc =_dfbf .Width ;}else {_fgc =_eda +_eae ;if ((_dfbf .Width -_fcba )%_gafb )> 0{_fcba ++;_fgc ++;};};for _babfc :=0;_babfc < _gafb ;_babfc ++{_adcd :=_egbg *_babfc +_adbb ;var _caf int ;if _babfc ==_gafb -1{_adbb =0;_caf =_dfbf .Height ;}else {_caf =_adcd +_egbg ;if (_dfbf .Height -_adbb )%_gafb > 0{_adbb ++;_caf ++;};};var _aee ,_fcdf ,_fgd ,_gbff int ;_gfbd :=(_eda +_fgc )/2;_bfgd :=(_adcd +_caf )/2;for _dbd :=_eda ;_dbd < _fgc ;_dbd ++{for _dggc :=_adcd ;_dggc < _caf ;_dggc ++{if _afeb .GetPixel (_dbd ,_dggc ){if _dbd < _gfbd {_aee ++;}else {_fcdf ++;};if _dggc < _bfgd {_gbff ++;}else {_fgd ++;};};};};_dba [_aad ][_babfc ]=_aee +_fcdf ;_cdg [_aad *2][_babfc ]=_aee ;_cdg [_aad *2+1][_babfc ]=_fcdf ;_agf [_aad ][_babfc *2]=_gbff ;_agf [_aad ][_babfc *2+1]=_fgd ;};};for _dfea :=0;_dfea < _gafb *2-1;_dfea ++{for _efd :=0;_efd < (_gafb -1);_efd ++{var _cedg int ;for _gdf :=0;_gdf < 2;_gdf ++{for _gcge :=0;_gcge < 2;_gcge ++{_cedg +=_cdg [_dfea +_gdf ][_efd +_gcge ];};};if _cedg > _beaf {return false ;};};};for _adbf :=0;_adbf < (_gafb -1);_adbf ++{for _bgb :=0;_bgb < ((_gafb *2)-1);_bgb ++{var _cedgf int ;for _dace :=0;_dace < 2;_dace ++{for _fbcd :=0;_fbcd < 2;_fbcd ++{_cedgf +=_agf [_adbf +_dace ][_bgb +_fbcd ];};};if _cedgf > _gefd {return false ;};};};for _ceba :=0;_ceba < (_gafb -2);_ceba ++{for _gcb :=0;_gcb < (_gafb -2);_gcb ++{var _abce ,_cfbb int ;for _dded :=0;_dded < 3;_dded ++{for _geec :=0;_geec < 3;_geec ++{if _dded ==_geec {_abce +=_dba [_ceba +_dded ][_gcb +_geec ];};if (2-_dded )==_geec {_cfbb +=_dba [_ceba +_dded ][_gcb +_geec ];};};};if _abce > _beaf ||_cfbb > _beaf {return false ;};};};for _dga :=0;_dga < (_gafb -1);_dga ++{for _bge :=0;_bge < (_gafb -1);_bge ++{var _cab int ;for _geed :=0;_geed < 2;_geed ++{for _cebc :=0;_cebc < 2;_cebc ++{_cab +=_dba [_dga +_geed ][_bge +_cebc ];};};if float64 (_cab )> _gbbc {return false ;};};};return true ;};func TstVSymbol (t *_gc .T ,scale ...int )*Bitmap {_eefc ,_dbac :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_f .NoError (t ,_dbac );return TstGetScaledSymbol (t ,_eefc ,scale ...);};func _bddg (_accg ,_fadg *Bitmap ,_fcf ,_faff ,_cda ,_adcf ,_efbd ,_fedc ,_fcdc ,_fcbb int ,_eabd CombinationOperator ,_ecag int )error {var _aac int ;_deeg :=func (){_aac ++;_cda +=_fadg .RowStride ;_adcf +=_accg .RowStride ;_efbd +=_accg .RowStride };for _aac =_fcf ;_aac < _faff ;_deeg (){var _afb uint16 ;_cge :=_cda ;for _fgbda :=_adcf ;_fgbda <=_efbd ;_fgbda ++{_ffg ,_abdd :=_fadg .GetByte (_cge );if _abdd !=nil {return _abdd ;};_aaca ,_abdd :=_accg .GetByte (_fgbda );if _abdd !=nil {return _abdd ;};_afb =(_afb |(uint16 (_aaca )&0xff))<<uint (_fcbb );_aaca =byte (_afb >>8);if _abdd =_fadg .SetByte (_cge ,_eba (_ffg ,_aaca ,_eabd ));_abdd !=nil {return _abdd ;};_cge ++;_afb <<=uint (_fcdc );if _fgbda ==_efbd {_aaca =byte (_afb >>(8-uint8 (_fcbb )));if _ecag !=0{_aaca =_fcef (uint (8+_fedc ),_aaca );};_ffg ,_abdd =_fadg .GetByte (_cge );if _abdd !=nil {return _abdd ;};if _abdd =_fadg .SetByte (_cge ,_eba (_ffg ,_aaca ,_eabd ));_abdd !=nil {return _abdd ;};};};};return nil ;};func TstCSymbol (t *_gc .T )*Bitmap {t .Helper ();_dabaa :=New (6,6);_f .NoError (t ,_dabaa .SetPixel (1,0,1));_f .NoError (t ,_dabaa .SetPixel (2,0,1));_f .NoError (t ,_dabaa .SetPixel (3,0,1));_f .NoError (t ,_dabaa .SetPixel (4,0,1));_f .NoError (t ,_dabaa .SetPixel (0,1,1));_f .NoError (t ,_dabaa .SetPixel (5,1,1));_f .NoError (t ,_dabaa .SetPixel (0,2,1));_f .NoError (t ,_dabaa .SetPixel (0,3,1));_f .NoError (t ,_dabaa .SetPixel (0,4,1));_f .NoError (t ,_dabaa .SetPixel (5,4,1));_f .NoError (t ,_dabaa .SetPixel (1,5,1));_f .NoError (t ,_dabaa .SetPixel (2,5,1));_f .NoError (t ,_dabaa .SetPixel (3,5,1));_f .NoError (t ,_dabaa .SetPixel (4,5,1));return _dabaa ;};func _dfbe (_cee int )int {if _cee < 0{return -_cee ;};return _cee ;};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_fafg CombinationOperator )String ()string {var _abba string ;switch _fafg {case CmbOpOr :_abba ="\u004f\u0052";case CmbOpAnd :_abba ="\u0041\u004e\u0044";case CmbOpXor :_abba ="\u0058\u004f\u0052";case CmbOpXNor :_abba ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_abba ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_abba ="\u004e\u004f\u0054";};return _abba ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func (_aeef *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _ccgd (_aeef ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func (_aca *Bitmap )SetDefaultPixel (){for _dfbc :=range _aca .Data {_aca .Data [_dfbc ]=byte (0xff);};};type Color int ;func (_geaf *Bitmap )Equals (s *Bitmap )bool {if len (_geaf .Data )!=len (s .Data )||_geaf .Width !=s .Width ||_geaf .Height !=s .Height {return false ;};for _gcdg :=0;_gcdg < _geaf .Height ;_gcdg ++{_befg :=_gcdg *_geaf .RowStride ;for _dbcb :=0;_dbcb < _geaf .RowStride ;_dbcb ++{if _geaf .Data [_befg +_dbcb ]!=s .Data [_befg +_dbcb ]{return false ;};};};return true ;};func _dagc (_bdcf ,_geee *Bitmap ,_fagee ,_ddf int )(_ggde error ){const _ffaa ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_bfdc ,_fceg ,_dbab ,_facf int ;_egbgf ,_acfd ,_eegc ,_abdf ,_fdcbd ,_bgce ,_acabe byte ;);for _bfdc =0;_bfdc < _fagee ;_bfdc ++{_dbab =_bfdc *_bdcf .RowStride ;_facf =_bfdc *_geee .RowStride ;for _fceg =0;_fceg < _ddf ;_fceg ++{_egbgf ,_ggde =_bdcf .GetByte (_dbab +_fceg );if _ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_acfd ,_ggde =_geee .GetByte (_facf +_fceg );if _ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _bfdc > 0{_eegc ,_ggde =_bdcf .GetByte (_dbab -_bdcf .RowStride +_fceg );if _ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0069\u0020\u003e \u0030");};_egbgf |=_eegc ;};if _fceg > 0{_abdf ,_ggde =_bdcf .GetByte (_dbab +_fceg -1);if _ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u006a\u0020\u003e \u0030");};_egbgf |=_abdf <<7;};_egbgf &=_acfd ;if _egbgf ==0||(^_egbgf )==0{if _ggde =_bdcf .SetByte (_dbab +_fceg ,_egbgf );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_acabe =_egbgf ;_egbgf =(_egbgf |(_egbgf >>1)|(_egbgf <<1))&_acfd ;if (_egbgf ^_acabe )==0{if _ggde =_bdcf .SetByte (_dbab +_fceg ,_egbgf );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bfdc =_fagee -1;_bfdc >=0;_bfdc --{_dbab =_bfdc *_bdcf .RowStride ;_facf =_bfdc *_geee .RowStride ;for _fceg =_ddf -1;_fceg >=0;_fceg --{if _egbgf ,_ggde =_bdcf .GetByte (_dbab +_fceg );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _acfd ,_ggde =_geee .GetByte (_facf +_fceg );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bfdc < _fagee -1{if _fdcbd ,_ggde =_bdcf .GetByte (_dbab +_bdcf .RowStride +_fceg );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_egbgf |=_fdcbd ;};if _fceg < _ddf -1{if _bgce ,_ggde =_bdcf .GetByte (_dbab +_fceg +1);_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_egbgf |=_bgce >>7;};_egbgf &=_acfd ;if _egbgf ==0||(^_egbgf )==0{if _ggde =_bdcf .SetByte (_dbab +_fceg ,_egbgf );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_acabe =_egbgf ;_egbgf =(_egbgf |(_egbgf >>1)|(_egbgf <<1))&_acfd ;if (_egbgf ^_acabe )==0{if _ggde =_bdcf .SetByte (_dbab +_fceg ,_egbgf );_ggde !=nil {return _g .Wrap (_ggde ,_ffaa ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func (_dbe *Bitmap )setBit (_ebdg int ){_dbe .Data [(_ebdg >>3)]|=0x80>>uint (_ebdg &7)};const (Vanilla Color =iota ;Chocolate ;);func (_fcee *ClassedPoints )Swap (i ,j int ){_fcee .IntSlice [i ],_fcee .IntSlice [j ]=_fcee .IntSlice [j ],_fcee .IntSlice [i ];};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _gdbc ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_eaaf ,_ecfa :=p1 .Width ,p1 .Height ;_dbgag ,_cbagf :=p3 .Width ,p3 .Height ;if _c .Abs (_eaaf -_dbgag )> maxDiffW {return false ,nil ;};if _c .Abs (_ecfa -_cbagf )> maxDiffH {return false ,nil ;};_afae :=int (delX +_c .Sign (delX )*0.5);_ddbc :=int (delY +_c .Sign (delY )*0.5);var _bdbcg error ;_eebc :=p1 .CreateTemplate ();if _bdbcg =_eebc .RasterOperation (0,0,_eaaf ,_ecfa ,PixSrc ,p1 ,0,0);_bdbcg !=nil {return false ,_g .Wrap (_bdbcg ,_gdbc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdbcg =_eebc .RasterOperation (_afae ,_ddbc ,_eaaf ,_ecfa ,PixNotSrcAndDst ,p4 ,0,0);_bdbcg !=nil {return false ,_g .Wrap (_bdbcg ,_gdbc ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _eebc .Zero (){return false ,nil ;};if _bdbcg =_eebc .RasterOperation (_afae ,_ddbc ,_dbgag ,_cbagf ,PixSrc ,p3 ,0,0);_bdbcg !=nil {return false ,_g .Wrap (_bdbcg ,_gdbc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdbcg =_eebc .RasterOperation (0,0,_dbgag ,_cbagf ,PixNotSrcAndDst ,p2 ,0,0);_bdbcg !=nil {return false ,_g .Wrap (_bdbcg ,_gdbc ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _eebc .Zero (),nil ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_bgdd :=_geggd (h ,w ,"");_bgdd .setOrigin (cy ,cx );var _fade ,_bgbe int ;for _fade =0;_fade < h ;_fade ++{for _bgbe =0;_bgbe < w ;_bgbe ++{_bgdd .Data [_fade ][_bgbe ]=tp ;};};return _bgdd ;};func TstPSymbol (t *_gc .T )*Bitmap {t .Helper ();_cccab :=New (5,8);_f .NoError (t ,_cccab .SetPixel (0,0,1));_f .NoError (t ,_cccab .SetPixel (1,0,1));_f .NoError (t ,_cccab .SetPixel (2,0,1));_f .NoError (t ,_cccab .SetPixel (3,0,1));_f .NoError (t ,_cccab .SetPixel (4,1,1));_f .NoError (t ,_cccab .SetPixel (0,1,1));_f .NoError (t ,_cccab .SetPixel (4,2,1));_f .NoError (t ,_cccab .SetPixel (0,2,1));_f .NoError (t ,_cccab .SetPixel (4,3,1));_f .NoError (t ,_cccab .SetPixel (0,3,1));_f .NoError (t ,_cccab .SetPixel (0,4,1));_f .NoError (t ,_cccab .SetPixel (1,4,1));_f .NoError (t ,_cccab .SetPixel (2,4,1));_f .NoError (t ,_cccab .SetPixel (3,4,1));_f .NoError (t ,_cccab .SetPixel (0,5,1));_f .NoError (t ,_cccab .SetPixel (0,6,1));_f .NoError (t ,_cccab .SetPixel (0,7,1));return _cccab ;};func (_fgbdc Points )YSorter ()func (_cfgg ,_fdda int )bool {return func (_fefg ,_bbea int )bool {return _fgbdc [_fefg ].Y < _fgbdc [_bbea ].Y };};func _adag (_fbga *Bitmap ,_affg ,_adge ,_ffgb ,_bece int ,_gabff RasterOperator ,_afbd *Bitmap ,_agcdf ,_aecf int )error {var (_afga bool ;_affd bool ;_aeaa int ;_dddg int ;_efddc int ;_gbc bool ;_aegcf byte ;_afdgb int ;_aeafg int ;_aggdd int ;_fegfg ,_geegf int ;);_aeafa :=8-(_affg &7);_cgfe :=_gfgb [_aeafa ];_dadaf :=_fbga .RowStride *_adge +(_affg >>3);_dgefd :=_afbd .RowStride *_aecf +(_agcdf >>3);if _ffgb < _aeafa {_afga =true ;_cgfe &=_fgadf [8-_aeafa +_ffgb ];};if !_afga {_aeaa =(_ffgb -_aeafa )>>3;if _aeaa > 0{_affd =true ;_dddg =_dadaf +1;_efddc =_dgefd +1;};};_afdgb =(_affg +_ffgb )&7;if !(_afga ||_afdgb ==0){_gbc =true ;_aegcf =_fgadf [_afdgb ];_aeafg =_dadaf +1+_aeaa ;_aggdd =_dgefd +1+_aeaa ;};switch _gabff {case PixSrc :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],_afbd .Data [_dgefd ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=_afbd .Data [_efddc +_geegf ];};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],_afbd .Data [_aggdd ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixNotSrc :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],^_afbd .Data [_dgefd ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=^_afbd .Data [_efddc +_geegf ];};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],^_afbd .Data [_aggdd ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixSrcOrDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],_afbd .Data [_dgefd ]|_fbga .Data [_dadaf ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]|=_afbd .Data [_efddc +_geegf ];};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],_afbd .Data [_aggdd ]|_fbga .Data [_aeafg ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixSrcAndDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],_afbd .Data [_dgefd ]&_fbga .Data [_dadaf ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]&=_afbd .Data [_efddc +_geegf ];};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],_afbd .Data [_aggdd ]&_fbga .Data [_aeafg ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixSrcXorDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],_afbd .Data [_dgefd ]^_fbga .Data [_dadaf ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]^=_afbd .Data [_efddc +_geegf ];};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],_afbd .Data [_aggdd ]^_fbga .Data [_aeafg ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixNotSrcOrDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],^(_afbd .Data [_dgefd ])|_fbga .Data [_dadaf ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]|=^(_afbd .Data [_efddc +_geegf ]);};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],^(_afbd .Data [_aggdd ])|_fbga .Data [_aeafg ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixNotSrcAndDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],^(_afbd .Data [_dgefd ])&_fbga .Data [_dadaf ],_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]&=^_afbd .Data [_efddc +_geegf ];};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],^(_afbd .Data [_aggdd ])&_fbga .Data [_aeafg ],_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixSrcOrNotDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],_afbd .Data [_dgefd ]|^(_fbga .Data [_dadaf ]),_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=_afbd .Data [_efddc +_geegf ]|^(_fbga .Data [_dddg +_geegf ]);};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],_afbd .Data [_aggdd ]|^(_fbga .Data [_aeafg ]),_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixSrcAndNotDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],_afbd .Data [_dgefd ]&^(_fbga .Data [_dadaf ]),_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=_afbd .Data [_efddc +_geegf ]&^(_fbga .Data [_dddg +_geegf ]);};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],_afbd .Data [_aggdd ]&^(_fbga .Data [_aeafg ]),_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixNotPixSrcOrDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],^(_afbd .Data [_dgefd ]|_fbga .Data [_dadaf ]),_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=^(_afbd .Data [_efddc +_geegf ]|_fbga .Data [_dddg +_geegf ]);};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],^(_afbd .Data [_aggdd ]|_fbga .Data [_aeafg ]),_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixNotPixSrcAndDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],^(_afbd .Data [_dgefd ]&_fbga .Data [_dadaf ]),_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=^(_afbd .Data [_efddc +_geegf ]&_fbga .Data [_dddg +_geegf ]);};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],^(_afbd .Data [_aggdd ]&_fbga .Data [_aeafg ]),_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};case PixNotPixSrcXorDst :for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_dadaf ]=_dcda (_fbga .Data [_dadaf ],^(_afbd .Data [_dgefd ]^_fbga .Data [_dadaf ]),_cgfe );_dadaf +=_fbga .RowStride ;_dgefd +=_afbd .RowStride ;};if _affd {for _fegfg =0;_fegfg < _bece ;_fegfg ++{for _geegf =0;_geegf < _aeaa ;_geegf ++{_fbga .Data [_dddg +_geegf ]=^(_afbd .Data [_efddc +_geegf ]^_fbga .Data [_dddg +_geegf ]);};_dddg +=_fbga .RowStride ;_efddc +=_afbd .RowStride ;};};if _gbc {for _fegfg =0;_fegfg < _bece ;_fegfg ++{_fbga .Data [_aeafg ]=_dcda (_fbga .Data [_aeafg ],^(_afbd .Data [_aggdd ]^_fbga .Data [_aeafg ]),_aegcf );_aeafg +=_fbga .RowStride ;_aggdd +=_afbd .RowStride ;};};default:_db .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_gabff );return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_ggg *Bitmap )inverseData (){if _adcc :=_ggg .RasterOperation (0,0,_ggg .Width ,_ggg .Height ,PixNotDst ,nil ,0,0);_adcc !=nil {_db .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_adcc );};if _ggg .Color ==Chocolate {_ggg .Color =Vanilla ;}else {_ggg .Color =Chocolate ;};};func TstWSymbol (t *_gc .T ,scale ...int )*Bitmap {_caff ,_cdbc :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_f .NoError (t ,_cdbc );return TstGetScaledSymbol (t ,_caff ,scale ...);};func (_gcabd *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gbfd *Bitmaps ,_fdba error ){const _edgd ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _gcabd ==nil {return nil ,_g .Error (_edgd ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_edgd ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_g .Errorf (_edgd ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_cabaf ,_fdba :=_gcabd .makeSizeIndicator (width ,height ,tp ,relation );if _fdba !=nil {return nil ,_g .Wrap (_fdba ,_edgd ,"");};_gbfd ,_fdba =_gcabd .selectByIndicator (_cabaf );if _fdba !=nil {return nil ,_g .Wrap (_fdba ,_edgd ,"");};return _gbfd ,nil ;};func (_fea Points )Size ()int {return len (_fea )};func (_bddb *Bitmaps )Size ()int {return len (_bddb .Values )};func _gcgdc (_egdca ,_dfff *Bitmap ,_fdad ,_bddaf int )(*Bitmap ,error ){const _dbce ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _dfff ==nil {return nil ,_g .Error (_dbce ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fdad < 1||_bddaf < 1{return nil ,_g .Error (_dbce ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _fdad ==1&&_bddaf ==1{return _dfff .Copy (),nil ;};if _fdad ==1||_bddaf ==1{_ebbg :=SelCreateBrick (_bddaf ,_fdad ,_bddaf /2,_fdad /2,SelHit );var _agbg error ;_egdca ,_agbg =_egab (_egdca ,_dfff ,_ebbg );if _agbg !=nil {return nil ,_g .Wrap (_agbg ,_dbce ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _egdca ,nil ;};_fged :=SelCreateBrick (1,_fdad ,0,_fdad /2,SelHit );_eaga :=SelCreateBrick (_bddaf ,1,_bddaf /2,0,SelHit );_feec ,_acge :=_baa (nil ,_dfff ,_fged );if _acge !=nil {return nil ,_g .Wrap (_acge ,_dbce ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _egdca ,_acge =_baa (_egdca ,_feec ,_eaga );_acge !=nil {return nil ,_g .Wrap (_acge ,_dbce ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_acge =_edea (_feec ,_egdca ,_fged );_acge !=nil {return nil ,_g .Wrap (_acge ,_dbce ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_acge =_edea (_egdca ,_feec ,_eaga );_acge !=nil {return nil ,_g .Wrap (_acge ,_dbce ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _egdca ,nil ;};type byWidth Bitmaps ;func (_dgdbc *ClassedPoints )ySortFunction ()func (_ecgb int ,_cgagf int )bool {return func (_dafae ,_fgag int )bool {return _dgdbc .YAtIndex (_dafae )< _dgdbc .YAtIndex (_fgag )};};func (_bgc *Bitmap )Equivalent (s *Bitmap )bool {return _bgc .equivalent (s )};func TstASymbol (t *_gc .T )*Bitmap {t .Helper ();_egge :=New (6,6);_f .NoError (t ,_egge .SetPixel (1,0,1));_f .NoError (t ,_egge .SetPixel (2,0,1));_f .NoError (t ,_egge .SetPixel (3,0,1));_f .NoError (t ,_egge .SetPixel (4,0,1));_f .NoError (t ,_egge .SetPixel (5,1,1));_f .NoError (t ,_egge .SetPixel (1,2,1));_f .NoError (t ,_egge .SetPixel (2,2,1));_f .NoError (t ,_egge .SetPixel (3,2,1));_f .NoError (t ,_egge .SetPixel (4,2,1));_f .NoError (t ,_egge .SetPixel (5,2,1));_f .NoError (t ,_egge .SetPixel (0,3,1));_f .NoError (t ,_egge .SetPixel (5,3,1));_f .NoError (t ,_egge .SetPixel (0,4,1));_f .NoError (t ,_egge .SetPixel (5,4,1));_f .NoError (t ,_egge .SetPixel (1,5,1));_f .NoError (t ,_egge .SetPixel (2,5,1));_f .NoError (t ,_egge .SetPixel (3,5,1));_f .NoError (t ,_egge .SetPixel (4,5,1));_f .NoError (t ,_egge .SetPixel (5,5,1));return _egge ;};func (_cfac Points )XSorter ()func (_dfec ,_gfdc int )bool {return func (_acec ,_gfcg int )bool {return _cfac [_acec ].X < _cfac [_gfcg ].X };};func (_fdbg *Bitmaps )SortByHeight (){_gabfe :=(*byHeight )(_fdbg );_fa .Sort (_gabfe )};func _ebd ()(_ccg [256]uint64 ){for _agb :=0;_agb < 256;_agb ++{if _agb &0x01!=0{_ccg [_agb ]|=0xff;};if _agb &0x02!=0{_ccg [_agb ]|=0xff00;};if _agb &0x04!=0{_ccg [_agb ]|=0xff0000;};if _agb &0x08!=0{_ccg [_agb ]|=0xff000000;};if _agb &0x10!=0{_ccg [_agb ]|=0xff00000000;};if _agb &0x20!=0{_ccg [_agb ]|=0xff0000000000;};if _agb &0x40!=0{_ccg [_agb ]|=0xff000000000000;};if _agb &0x80!=0{_ccg [_agb ]|=0xff00000000000000;};};return _ccg ;};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _baa (d ,s ,sel )};var MorphBC BoundaryCondition ;func _ffgbe (_ffag ,_dcbd *Bitmap ,_egege ,_abfe int )(_aeea error ){const _gadb ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_bdfe ,_cbfg ,_ebac ,_cgeb int ;_fgdf ,_aeeb ,_ebeg ,_gegdd ,_ggadd ,_edcc ,_bede ,_dged byte ;);for _bdfe =0;_bdfe < _egege ;_bdfe ++{_ebac =_bdfe *_ffag .RowStride ;_cgeb =_bdfe *_dcbd .RowStride ;for _cbfg =0;_cbfg < _abfe ;_cbfg ++{if _fgdf ,_aeea =_ffag .GetByte (_ebac +_cbfg );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _aeeb ,_aeea =_dcbd .GetByte (_cgeb +_cbfg );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _bdfe > 0{if _ebeg ,_aeea =_ffag .GetByte (_ebac -_ffag .RowStride +_cbfg );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_ebeg |(_ebeg <<1)|(_ebeg >>1);if _cbfg > 0{if _dged ,_aeea =_ffag .GetByte (_ebac -_ffag .RowStride +_cbfg -1);_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_dged <<7;};if _cbfg < _abfe -1{if _dged ,_aeea =_ffag .GetByte (_ebac -_ffag .RowStride +_cbfg +1);_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_dged >>7;};};if _cbfg > 0{if _gegdd ,_aeea =_ffag .GetByte (_ebac +_cbfg -1);_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u006a\u0020\u003e \u0030");};_fgdf |=_gegdd <<7;};_fgdf &=_aeeb ;if _fgdf ==0||^_fgdf ==0{if _aeea =_ffag .SetByte (_ebac +_cbfg ,_fgdf );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_bede =_fgdf ;_fgdf =(_fgdf |(_fgdf >>1)|(_fgdf <<1))&_aeeb ;if (_fgdf ^_bede )==0{if _aeea =_ffag .SetByte (_ebac +_cbfg ,_fgdf );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bdfe =_egege -1;_bdfe >=0;_bdfe --{_ebac =_bdfe *_ffag .RowStride ;_cgeb =_bdfe *_dcbd .RowStride ;for _cbfg =_abfe -1;_cbfg >=0;_cbfg --{if _fgdf ,_aeea =_ffag .GetByte (_ebac +_cbfg );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _aeeb ,_aeea =_dcbd .GetByte (_cgeb +_cbfg );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bdfe < _egege -1{if _ggadd ,_aeea =_ffag .GetByte (_ebac +_ffag .RowStride +_cbfg );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_fgdf |=_ggadd |(_ggadd <<1)|_ggadd >>1;if _cbfg > 0{if _dged ,_aeea =_ffag .GetByte (_ebac +_ffag .RowStride +_cbfg -1);_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_fgdf |=_dged <<7;};if _cbfg < _abfe -1{if _dged ,_aeea =_ffag .GetByte (_ebac +_ffag .RowStride +_cbfg +1);_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_fgdf |=_dged >>7;};};if _cbfg < _abfe -1{if _edcc ,_aeea =_ffag .GetByte (_ebac +_cbfg +1);_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_fgdf |=_edcc >>7;};_fgdf &=_aeeb ;if _fgdf ==0||(^_fgdf )==0{if _aeea =_ffag .SetByte (_ebac +_cbfg ,_fgdf );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_bede =_fgdf ;_fgdf =(_fgdf |(_fgdf >>1)|(_fgdf <<1))&_aeeb ;if (_fgdf ^_bede )==0{if _aeea =_ffag .SetByte (_ebac +_cbfg ,_fgdf );_aeea !=nil {return _g .Wrap (_aeea ,_gadb ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func TstDSymbol (t *_gc .T ,scale ...int )*Bitmap {_fecgc ,_babga :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_f .NoError (t ,_babga );return TstGetScaledSymbol (t ,_fecgc ,scale ...);};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _bed ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_dfgb :=_bebg (width ,height );_dfgb .Data =data ;if _gea :=((width *height )+7)>>3;len (data )< _gea {return nil ,_g .Errorf (_bed ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_gea );};if _fge :=_dfgb .addPadBits ();_fge !=nil {return nil ,_g .Wrap (_fge ,_bed ,"");};return _dfgb ,nil ;};type MorphOperation int ;func (_bcbe *ClassedPoints )SortByX (){_bcbe ._cgag =_bcbe .xSortFunction ();_fa .Sort (_bcbe )};func _ecagb (_cdd *Bitmap ,_gbfc ,_efba int ,_cabf ,_dfcf int ,_agab RasterOperator ,_fcga *Bitmap ,_cdbe ,_fbd int )error {var _acbd ,_ffgg ,_ececa ,_deag int ;if _gbfc < 0{_cdbe -=_gbfc ;_cabf +=_gbfc ;_gbfc =0;};if _cdbe < 0{_gbfc -=_cdbe ;_cabf +=_cdbe ;_cdbe =0;};_acbd =_gbfc +_cabf -_cdd .Width ;if _acbd > 0{_cabf -=_acbd ;};_ffgg =_cdbe +_cabf -_fcga .Width ;if _ffgg > 0{_cabf -=_ffgg ;};if _efba < 0{_fbd -=_efba ;_dfcf +=_efba ;_efba =0;};if _fbd < 0{_efba -=_fbd ;_dfcf +=_fbd ;_fbd =0;};_ececa =_efba +_dfcf -_cdd .Height ;if _ececa > 0{_dfcf -=_ececa ;};_deag =_fbd +_dfcf -_fcga .Height ;if _deag > 0{_dfcf -=_deag ;};if _cabf <=0||_dfcf <=0{return nil ;};var _ccebc error ;switch {case _gbfc &7==0&&_cdbe &7==0:_ccebc =_efec (_cdd ,_gbfc ,_efba ,_cabf ,_dfcf ,_agab ,_fcga ,_cdbe ,_fbd );case _gbfc &7==_cdbe &7:_ccebc =_adag (_cdd ,_gbfc ,_efba ,_cabf ,_dfcf ,_agab ,_fcga ,_cdbe ,_fbd );default:_ccebc =_feecc (_cdd ,_gbfc ,_efba ,_cabf ,_dfcf ,_agab ,_fcga ,_cdbe ,_fbd );};if _ccebc !=nil {return _g .Wrap (_ccebc ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func _feg (_ce *Bitmap ,_gab ,_gbg int )(*Bitmap ,error ){const _cec ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _ce ==nil {return nil ,_g .Error (_cec ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _gab <=0||_gbg <=0{return nil ,_g .Error (_cec ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _gab ==_gbg {if _gab ==1{_feb ,_dab :=_deba (nil ,_ce );if _dab !=nil {return nil ,_g .Wrap (_dab ,_cec ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _feb ,nil ;};if _gab ==2||_gab ==4||_gab ==8{_edg ,_bbg :=_de (_ce ,_gab );if _bbg !=nil {return nil ,_g .Wrap (_bbg ,_cec ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _edg ,nil ;};};_ad :=_gab *_ce .Width ;_daf :=_gbg *_ce .Height ;_eb :=New (_ad ,_daf );_fda :=_eb .RowStride ;var (_dgd ,_cf ,_egbe ,_abe ,_bc int ;_ecc byte ;_gf error ;);for _cf =0;_cf < _ce .Height ;_cf ++{_dgd =_gbg *_cf *_fda ;for _egbe =0;_egbe < _ce .Width ;_egbe ++{if _cac :=_ce .GetPixel (_egbe ,_cf );_cac {_bc =_gab *_egbe ;for _abe =0;_abe < _gab ;_abe ++{_eb .setBit (_dgd *8+_bc +_abe );};};};for _abe =1;_abe < _gbg ;_abe ++{_fcb :=_dgd +_abe *_fda ;for _baf :=0;_baf < _fda ;_baf ++{if _ecc ,_gf =_eb .GetByte (_dgd +_baf );_gf !=nil {return nil ,_g .Wrapf (_gf ,_cec ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_abe );};if _gf =_eb .SetByte (_fcb +_baf ,_ecc );_gf !=nil {return nil ,_g .Wrap (_gf ,_cec ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _eb ,nil ;};func (_eddab *BitmapsArray )GetBox (i int )(*_d .Rectangle ,error ){const _efca ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _eddab ==nil {return nil ,_g .Error (_efca ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eddab .Boxes )-1{return nil ,_g .Errorf (_efca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eddab .Boxes [i ],nil ;};func (_eaab *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _cgfc ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _eaab ==nil {return nil ,_g .Error (_cgfc ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_eaab .Values )-1{return nil ,_g .Errorf (_cgfc ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eaab .Values [i ],nil ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _bfc ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_aded :=_bebg (width ,height );_aded .Data =data ;if len (data )< height *_aded .RowStride {return nil ,_g .Errorf (_bfc ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_aded .RowStride );};return _aded ,nil ;};func _bgd (_ade ,_cefa *Bitmap ,_ecg int ,_aea []byte ,_dade int )(_bfd error ){const _dfb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_adea ,_afgg ,_gcc ,_ccc ,_aeaf ,_fgb ,_adb ,_dfa int ;_fbc ,_cbc uint32 ;_abd ,_bff byte ;_dgg uint16 ;);_age :=make ([]byte ,4);_cdb :=make ([]byte ,4);for _gcc =0;_gcc < _ade .Height -1;_gcc ,_ccc =_gcc +2,_ccc +1{_adea =_gcc *_ade .RowStride ;_afgg =_ccc *_cefa .RowStride ;for _aeaf ,_fgb =0,0;_aeaf < _dade ;_aeaf ,_fgb =_aeaf +4,_fgb +1{for _adb =0;_adb < 4;_adb ++{_dfa =_adea +_aeaf +_adb ;if _dfa <=len (_ade .Data )-1&&_dfa < _adea +_ade .RowStride {_age [_adb ]=_ade .Data [_dfa ];}else {_age [_adb ]=0x00;};_dfa =_adea +_ade .RowStride +_aeaf +_adb ;if _dfa <=len (_ade .Data )-1&&_dfa < _adea +(2*_ade .RowStride ){_cdb [_adb ]=_ade .Data [_dfa ];}else {_cdb [_adb ]=0x00;};};_fbc =_cg .BigEndian .Uint32 (_age );_cbc =_cg .BigEndian .Uint32 (_cdb );_cbc &=_fbc ;_cbc &=_cbc <<1;_cbc &=0xaaaaaaaa;_fbc =_cbc |(_cbc <<7);_abd =byte (_fbc >>24);_bff =byte ((_fbc >>8)&0xff);_dfa =_afgg +_fgb ;if _dfa +1==len (_cefa .Data )-1||_dfa +1>=_afgg +_cefa .RowStride {_cefa .Data [_dfa ]=_aea [_abd ];if _bfd =_cefa .SetByte (_dfa ,_aea [_abd ]);_bfd !=nil {return _g .Wrapf (_bfd ,_dfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dfa );};}else {_dgg =(uint16 (_aea [_abd ])<<8)|uint16 (_aea [_bff ]);if _bfd =_cefa .setTwoBytes (_dfa ,_dgg );_bfd !=nil {return _g .Wrapf (_bfd ,_dfb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dfa );};_fgb ++;};};};return nil ;};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_eedec *Points )Add (pt *Points )error {const _fgga ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _eedec ==nil {return _g .Error (_fgga ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _g .Error (_fgga ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_eedec =append (*_eedec ,*pt ...);return nil ;};func _fefe (_deaa *Bitmap ,_fae int )(*Bitmap ,error ){const _egga ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _deaa ==nil {return nil ,_g .Error (_egga ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fae <=0{return nil ,_g .Error (_egga ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _fae ==1{_ebca ,_edgb :=_deba (nil ,_deaa );if _edgb !=nil {return nil ,_g .Wrap (_edgb ,_egga ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _ebca ,nil ;};_ceffg ,_adbc :=_feg (_deaa ,_fae ,_fae );if _adbc !=nil {return nil ,_g .Wrap (_adbc ,_egga ,"");};return _ceffg ,nil ;};func (_bcg *Bitmap )SetPadBits (value int ){_bcg .setPadBits (value )};func _fegc (_bcfbg *_c .Stack )(_dddcce *fillSegment ,_cagfa error ){const _cbac ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _bcfbg ==nil {return nil ,_g .Error (_cbac ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _bcfbg .Aux ==nil {return nil ,_g .Error (_cbac ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_dfbb ,_fafa :=_bcfbg .Pop ();if !_fafa {return nil ,nil ;};_fgcfg ,_fafa :=_dfbb .(*fillSegment );if !_fafa {return nil ,_g .Error (_cbac ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_dddcce =&fillSegment {_fgcfg ._cecgg ,_fgcfg ._adgg ,_fgcfg ._feaff +_fgcfg ._acgaf ,_fgcfg ._acgaf };_bcfbg .Aux .Push (_fgcfg );return _dddcce ,nil ;};func Extract (roi _d .Rectangle ,src *Bitmap )(*Bitmap ,error ){_faad :=New (roi .Dx (),roi .Dy ());_bedf :=roi .Min .X &0x07;_dbbe :=8-_bedf ;_ddcg :=uint (8-_faad .Width &0x07);_bfa :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_efe :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_cgfd :=_faad .RowStride ==_efe +1-_bfa ;var _adcb int ;for _edc :=roi .Min .Y ;_edc < roi .Max .Y ;_edc ++{_dafa :=_bfa ;_bcge :=_adcb ;switch {case _bfa ==_efe :_cgcc ,_ebgf :=src .GetByte (_dafa );if _ebgf !=nil {return nil ,_ebgf ;};_cgcc <<=uint (_bedf );_ebgf =_faad .SetByte (_bcge ,_fcef (_ddcg ,_cgcc ));if _ebgf !=nil {return nil ,_ebgf ;};case _bedf ==0:for _gada :=_bfa ;_gada <=_efe ;_gada ++{_babfa ,_cafea :=src .GetByte (_dafa );if _cafea !=nil {return nil ,_cafea ;};_dafa ++;if _gada ==_efe &&_cgfd {_babfa =_fcef (_ddcg ,_babfa );};_cafea =_faad .SetByte (_bcge ,_babfa );if _cafea !=nil {return nil ,_cafea ;};_bcge ++;};default:_fca :=_bgca (src ,_faad ,uint (_bedf ),uint (_dbbe ),_ddcg ,_bfa ,_efe ,_cgfd ,_dafa ,_bcge );if _fca !=nil {return nil ,_fca ;};};_bfa +=src .RowStride ;_efe +=src .RowStride ;_adcb +=_faad .RowStride ;};return _faad ,nil ;};func _fabb (_debac *Bitmap )(_fbadd *Bitmap ,_eabf int ,_dfead error ){const _gda ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _debac ==nil {return nil ,0,_g .Errorf (_gda ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _cgfa ,_gfe *Bitmap ;if _cgfa ,_dfead =_deba (nil ,_debac );_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_ggbbb [13]int ;_dffg ,_fedb int ;);_gbef :=12;_badd :=_c .NewNumSlice (_gbef +1);_fcefc :=_c .NewNumSlice (_gbef +1);var _gdge *Boxes ;for _dadf :=0;_dadf <=_gbef ;_dadf ++{if _dadf ==0{if _gfe ,_dfead =_deba (nil ,_cgfa );_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _gfe ,_dfead =_gffb (_cgfa ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _gdge ,_dfead =_gfe .connComponentsBB (4);_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"");};_ggbbb [_dadf ]=len (*_gdge );_badd .AddInt (_ggbbb [_dadf ]);switch _dadf {case 0:_dffg =_ggbbb [0];default:_fedb =_ggbbb [_dadf -1]-_ggbbb [_dadf ];_fcefc .AddInt (_fedb );};_cgfa =_gfe ;};_ggfg :=true ;_cecg :=2;var _eac ,_egfg int ;for _egaca :=1;_egaca < len (*_fcefc );_egaca ++{if _eac ,_dfead =_badd .GetInt (_egaca );_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _ggfg &&_eac < int (0.3*float32 (_dffg )){_cecg =_egaca +1;_ggfg =false ;};if _fedb ,_dfead =_fcefc .GetInt (_egaca );_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _fedb > _egfg {_egfg =_fedb ;};};_gbffe :=_debac .XResolution ;if _gbffe ==0{_gbffe =150;};if _gbffe > 110{_cecg ++;};if _cecg < 2{_db .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_cecg =2;};_eabf =_cecg +1;if _fbadd ,_dfead =_gcgdc (nil ,_debac ,_cecg +1,1);_dfead !=nil {return nil ,0,_g .Wrap (_dfead ,_gda ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _fbadd ,_eabf ,nil ;};func (_ccdb *Bitmap )countPixels ()int {var (_eega int ;_ggc uint8 ;_befgb byte ;_acga int ;);_ede :=_ccdb .RowStride ;_agaf :=uint (_ccdb .Width &0x07);if _agaf !=0{_ggc =uint8 ((0xff<<(8-_agaf ))&0xff);_ede --;};for _eec :=0;_eec < _ccdb .Height ;_eec ++{for _acga =0;_acga < _ede ;_acga ++{_befgb =_ccdb .Data [_eec *_ccdb .RowStride +_acga ];_eega +=int (_cacc [_befgb ]);};if _agaf !=0{_eega +=int (_cacc [_ccdb .Data [_eec *_ccdb .RowStride +_acga ]&_ggc ]);};};return _eega ;};func (_bdgc *ClassedPoints )Len ()int {return _bdgc .IntSlice .Size ()};func (_cfabaa *Bitmaps )selectByIndexes (_babg []int )(*Bitmaps ,error ){_fdde :=&Bitmaps {};for _ ,_dfaea :=range _babg {_adddc ,_gdfe :=_cfabaa .GetBitmap (_dfaea );if _gdfe !=nil {return nil ,_g .Wrap (_gdfe ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_fdde .AddBitmap (_adddc );};return _fdde ,nil ;};type Boxes []*_d .Rectangle ;func (_fece *Bitmap )removeBorderGeneral (_eefgc ,_cgcd ,_fcg ,_dae int )(*Bitmap ,error ){const _ceff ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _eefgc < 0||_cgcd < 0||_fcg < 0||_dae < 0{return nil ,_g .Error (_ceff ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_ecga ,_ageb :=_fece .Width ,_fece .Height ;_cbd :=_ecga -_eefgc -_cgcd ;_cdegf :=_ageb -_fcg -_dae ;if _cbd <=0{return nil ,_g .Errorf (_ceff ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_cbd );};if _cdegf <=0{return nil ,_g .Errorf (_ceff ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_cdegf );};_bgbc :=New (_cbd ,_cdegf );_bgbc .Color =_fece .Color ;_ccfe :=_bgbc .RasterOperation (0,0,_cbd ,_cdegf ,PixSrc ,_fece ,_eefgc ,_fcg );if _ccfe !=nil {return nil ,_g .Wrap (_ccfe ,_ceff ,"");};return _bgbc ,nil ;};func MakePixelSumTab8 ()[]int {return _fbgd ()};func TstISymbol (t *_gc .T ,scale ...int )*Bitmap {_cecgf ,_efbf :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_f .NoError (t ,_efbf );return TstGetScaledSymbol (t ,_cecgf ,scale ...);};func (_fcfc *byHeight )Len ()int {return len (_fcfc .Values )};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_d .Rectangle ;};func (_ffdg *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_ffdg .Width ,Height :_ffdg .Height ,RowStride :_ffdg .RowStride ,Color :_ffdg .Color ,Text :_ffdg .Text ,BitmapNumber :_ffdg .BitmapNumber ,Special :_ffdg .Special ,Data :make ([]byte ,len (_ffdg .Data ))};};func (_egfgc *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _gcbe ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _egfgc ==nil {return nil ,_g .Error (_gcbe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_egfgc .Values )-1{return nil ,_g .Errorf (_gcbe ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _egfgc .Values [i ],nil ;};func _efgc (_bfab ,_ebcaa *Bitmap ,_bacg ,_dedf int )(*Bitmap ,error ){const _bbfc ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _ebcaa ==nil {return nil ,_g .Error (_bbfc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bacg < 1&&_dedf < 1{return nil ,_g .Error (_bbfc ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _bacg ==1&&_dedf ==1{return _ebcaa .Copy (),nil ;};if _bacg ==1||_dedf ==1{var _bggc error ;_ccda :=SelCreateBrick (_dedf ,_bacg ,_dedf /2,_bacg /2,SelHit );_bfab ,_bggc =_acgec (_bfab ,_ebcaa ,_ccda );if _bggc !=nil {return nil ,_g .Wrap (_bggc ,_bbfc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _bfab ,nil ;};_bfae :=SelCreateBrick (1,_bacg ,0,_bacg /2,SelHit );_bfcf :=SelCreateBrick (_dedf ,1,_dedf /2,0,SelHit );_begf ,_eadc :=_edea (nil ,_ebcaa ,_bfae );if _eadc !=nil {return nil ,_g .Wrap (_eadc ,_bbfc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_bfab ,_eadc =_edea (_bfab ,_begf ,_bfcf );if _eadc !=nil {return nil ,_g .Wrap (_eadc ,_bbfc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_eadc =_baa (_begf ,_bfab ,_bfae );if _eadc !=nil {return nil ,_g .Wrap (_eadc ,_bbfc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_eadc =_baa (_bfab ,_begf ,_bfcf );if _eadc !=nil {return nil ,_g .Wrap (_eadc ,_bbfc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _bfab ,nil ;};func (_accc *byHeight )Less (i ,j int )bool {return _accc .Values [i ].Height < _accc .Values [j ].Height };func _ccgd (_beddd *Bitmap ,_abge ,_eggac ,_daegd ,_fagag int ,_cdfb RasterOperator ,_fgde *Bitmap ,_fbfe ,_gcad int )error {const _fffee ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _beddd ==nil {return _g .Error (_fffee ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _cdfb ==PixDst {return nil ;};switch _cdfb {case PixClr ,PixSet ,PixNotDst :_edfg (_beddd ,_abge ,_eggac ,_daegd ,_fagag ,_cdfb );return nil ;};if _fgde ==nil {_db .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _g .Error (_fffee ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ffcfa :=_ecagb (_beddd ,_abge ,_eggac ,_daegd ,_fagag ,_cdfb ,_fgde ,_fbfe ,_gcad );_ffcfa !=nil {return _g .Wrap (_ffcfa ,_fffee ,"");};return nil ;};type RasterOperator int ;func (_gcaa Points )GetGeometry (i int )(_bcc ,_ebfe float32 ,_degec error ){if i > len (_gcaa )-1{return 0,0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_ccad :=_gcaa [i ];return _ccad .X ,_ccad .Y ,nil ;};func (_bceg *Bitmap )centroid (_bfb ,_adbbf []int )(Point ,error ){_cccb :=Point {};_bceg .setPadBits (0);if len (_bfb )==0{_bfb =_ffff ();};if len (_adbbf )==0{_adbbf =_fbgd ();};var _eaca ,_dcce ,_eeaeb ,_fedg ,_cggba ,_bage int ;var _ecca byte ;for _cggba =0;_cggba < _bceg .Height ;_cggba ++{_dfdf :=_bceg .RowStride *_cggba ;_fedg =0;for _bage =0;_bage < _bceg .RowStride ;_bage ++{_ecca =_bceg .Data [_dfdf +_bage ];if _ecca !=0{_fedg +=_adbbf [_ecca ];_eaca +=_bfb [_ecca ]+_bage *8*_adbbf [_ecca ];};};_eeaeb +=_fedg ;_dcce +=_fedg *_cggba ;};if _eeaeb !=0{_cccb .X =float32 (_eaca )/float32 (_eeaeb );_cccb .Y =float32 (_dcce )/float32 (_eeaeb );};return _cccb ,nil ;};func _baa (_decb *Bitmap ,_ddgc *Bitmap ,_dea *Selection )(*Bitmap ,error ){var (_cgge *Bitmap ;_dcdb error ;);_decb ,_dcdb =_cgbc (_decb ,_ddgc ,_dea ,&_cgge );if _dcdb !=nil {return nil ,_dcdb ;};if _dcdb =_decb .clearAll ();_dcdb !=nil {return nil ,_dcdb ;};var _ggag SelectionValue ;for _geafb :=0;_geafb < _dea .Height ;_geafb ++{for _ggec :=0;_ggec < _dea .Width ;_ggec ++{_ggag =_dea .Data [_geafb ][_ggec ];if _ggag ==SelHit {if _dcdb =_decb .RasterOperation (_ggec -_dea .Cx ,_geafb -_dea .Cy ,_ddgc .Width ,_ddgc .Height ,PixSrcOrDst ,_cgge ,0,0);_dcdb !=nil {return nil ,_dcdb ;};};};};return _decb ,nil ;};func (_defee *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _cfaba ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_defee .Values )==0{return nil ,_g .Error (_cfaba ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_fbca :=&BitmapsArray {};_defee .SortByWidth ();_beeb :=-1;_gcde :=-1;for _geeae :=0;_geeae < len (_defee .Values );_geeae ++{_bgfd :=_defee .Values [_geeae ].Width ;if _bgfd > _beeb {_beeb =_bgfd ;_gcde ++;_fbca .Values =append (_fbca .Values ,&Bitmaps {});};_fbca .Values [_gcde ].AddBitmap (_defee .Values [_geeae ]);};return _fbca ,nil ;};func _efec (_dbeb *Bitmap ,_bgcc ,_ecce ,_agcd ,_geea int ,_feceg RasterOperator ,_gddae *Bitmap ,_eacbd ,_eabfe int )error {var (_bbab byte ;_cabb int ;_cgegf int ;_ggae ,_dfgaf int ;_gaag ,_bccd int ;);_dgdbe :=_agcd >>3;_edf :=_agcd &7;if _edf > 0{_bbab =_fgadf [_edf ];};_cabb =_gddae .RowStride *_eabfe +(_eacbd >>3);_cgegf =_dbeb .RowStride *_ecce +(_bgcc >>3);switch _feceg {case PixSrc :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=_gddae .Data [_ggae ];_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],_gddae .Data [_ggae ],_bbab );};};case PixNotSrc :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=^(_gddae .Data [_ggae ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],^_gddae .Data [_ggae ],_bbab );};};case PixSrcOrDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]|=_gddae .Data [_ggae ];_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],_gddae .Data [_ggae ]|_dbeb .Data [_dfgaf ],_bbab );};};case PixSrcAndDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]&=_gddae .Data [_ggae ];_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],_gddae .Data [_ggae ]&_dbeb .Data [_dfgaf ],_bbab );};};case PixSrcXorDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]^=_gddae .Data [_ggae ];_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],_gddae .Data [_ggae ]^_dbeb .Data [_dfgaf ],_bbab );};};case PixNotSrcOrDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]|=^(_gddae .Data [_ggae ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],^(_gddae .Data [_ggae ])|_dbeb .Data [_dfgaf ],_bbab );};};case PixNotSrcAndDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]&=^(_gddae .Data [_ggae ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],^(_gddae .Data [_ggae ])&_dbeb .Data [_dfgaf ],_bbab );};};case PixSrcOrNotDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=_gddae .Data [_ggae ]|^(_dbeb .Data [_dfgaf ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],_gddae .Data [_ggae ]|^(_dbeb .Data [_dfgaf ]),_bbab );};};case PixSrcAndNotDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=_gddae .Data [_ggae ]&^(_dbeb .Data [_dfgaf ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],_gddae .Data [_ggae ]&^(_dbeb .Data [_dfgaf ]),_bbab );};};case PixNotPixSrcOrDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=^(_gddae .Data [_ggae ]|_dbeb .Data [_dfgaf ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],^(_gddae .Data [_ggae ]|_dbeb .Data [_dfgaf ]),_bbab );};};case PixNotPixSrcAndDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=^(_gddae .Data [_ggae ]&_dbeb .Data [_dfgaf ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],^(_gddae .Data [_ggae ]&_dbeb .Data [_dfgaf ]),_bbab );};};case PixNotPixSrcXorDst :for _gaag =0;_gaag < _geea ;_gaag ++{_ggae =_cabb +_gaag *_gddae .RowStride ;_dfgaf =_cgegf +_gaag *_dbeb .RowStride ;for _bccd =0;_bccd < _dgdbe ;_bccd ++{_dbeb .Data [_dfgaf ]=^(_gddae .Data [_ggae ]^_dbeb .Data [_dfgaf ]);_dfgaf ++;_ggae ++;};if _edf > 0{_dbeb .Data [_dfgaf ]=_dcda (_dbeb .Data [_dfgaf ],^(_gddae .Data [_ggae ]^_dbeb .Data [_dfgaf ]),_bbab );};};default:_db .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_feceg );return _g .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_ggeg *Bitmap )SetPixel (x ,y int ,pixel byte )error {_eccf :=_ggeg .GetByteIndex (x ,y );if _eccf > len (_ggeg .Data )-1{return _g .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_eccf );};_deef :=_ggeg .GetBitOffset (x );_fff :=uint (7-_deef );_abc :=_ggeg .Data [_eccf ];var _cbca byte ;if pixel ==1{_cbca =_abc |(pixel &0x01<<_fff );}else {_cbca =_abc &^(1<<_fff );};_ggeg .Data [_eccf ]=_cbca ;return nil ;};func _gace (_afaa ,_bcdg ,_eddg *Bitmap )(*Bitmap ,error ){const _dfbdc ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _bcdg ==nil {return nil ,_g .Error (_dfbdc ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eddg ==nil {return nil ,_g .Error (_dfbdc ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _gaea error ;switch {case _afaa ==_bcdg :if _gaea =_afaa .RasterOperation (0,0,_bcdg .Width ,_bcdg .Height ,PixNotSrcAndDst ,_eddg ,0,0);_gaea !=nil {return nil ,_g .Wrap (_gaea ,_dfbdc ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _afaa ==_eddg :if _gaea =_afaa .RasterOperation (0,0,_bcdg .Width ,_bcdg .Height ,PixNotSrcAndDst ,_bcdg ,0,0);_gaea !=nil {return nil ,_g .Wrap (_gaea ,_dfbdc ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_afaa ,_gaea =_deba (_afaa ,_bcdg );if _gaea !=nil {return nil ,_g .Wrap (_gaea ,_dfbdc ,"");};if _gaea =_afaa .RasterOperation (0,0,_bcdg .Width ,_bcdg .Height ,PixNotSrcAndDst ,_eddg ,0,0);_gaea !=nil {return nil ,_g .Wrap (_gaea ,_dfbdc ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _afaa ,nil ;};func (_bffb *Selection )setOrigin (_fdfb ,_ccee int ){_bffb .Cy ,_bffb .Cx =_fdfb ,_ccee };func (_fcd *Bitmap )ToImage ()_d .Image {_adec ,_ffe :=_b .NewImage (_fcd .Width ,_fcd .Height ,1,1,_fcd .Data ,nil ,nil );if _ffe !=nil {_db .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ffe );};return _adec ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _gffb (src ,sequence ...);};func (_bbgb *Bitmap )connComponentsBitmapsBB (_aabb *Bitmaps ,_dege int )(_beddb *Boxes ,_adca error ){const _afce ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _dege !=4&&_dege !=8{return nil ,_g .Error (_afce ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _aabb ==nil {return nil ,_g .Error (_afce ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_aabb .Values )> 0{return nil ,_g .Error (_afce ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _bbgb .Zero (){return &Boxes {},nil ;};var (_cdge ,_egdc ,_eee ,_eeba *Bitmap ;);_bbgb .setPadBits (0);if _cdge ,_adca =_deba (nil ,_bbgb );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"\u0062\u006d\u0031");};if _egdc ,_adca =_deba (nil ,_bbgb );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"\u0062\u006d\u0032");};_feggb :=&_c .Stack {};_feggb .Aux =&_c .Stack {};_beddb =&Boxes {};var (_efc ,_ebab int ;_beacf _d .Point ;_bceb bool ;_aafe *_d .Rectangle ;);for {if _beacf ,_bceb ,_adca =_cdge .nextOnPixel (_efc ,_ebab );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"");};if !_bceb {break ;};if _aafe ,_adca =_ageee (_cdge ,_feggb ,_beacf .X ,_beacf .Y ,_dege );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"");};if _adca =_beddb .Add (_aafe );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"");};if _eee ,_adca =_cdge .clipRectangle (_aafe ,nil );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"\u0062\u006d\u0033");};if _eeba ,_adca =_egdc .clipRectangle (_aafe ,nil );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"\u0062\u006d\u0034");};if _ ,_adca =_dbed (_eee ,_eee ,_eeba );_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _adca =_egdc .RasterOperation (_aafe .Min .X ,_aafe .Min .Y ,_aafe .Dx (),_aafe .Dy (),PixSrcXorDst ,_eee ,0,0);_adca !=nil {return nil ,_g .Wrap (_adca ,_afce ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_aabb .AddBitmap (_eee );_efc =_beacf .X ;_ebab =_beacf .Y ;};_aabb .Boxes =*_beddb ;return _beddb ,nil ;};func _ggf (_af *Bitmap ,_cff int ,_aag []byte )(_gba *Bitmap ,_agbe error ){const _fce ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _af ==nil {return nil ,_g .Error (_fce ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _cff < 1||_cff > 4{return nil ,_g .Error (_fce ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _af .Height <=1{return nil ,_g .Errorf (_fce ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_af .Height );};_gba =New (_af .Width /2,_af .Height /2);if _aag ==nil {_aag =_gdg ();};_bd :=_bgebb (_af .RowStride ,2*_gba .RowStride );switch _cff {case 1:_agbe =_aff (_af ,_gba ,_cff ,_aag ,_bd );case 2:_agbe =_edgf (_af ,_gba ,_cff ,_aag ,_bd );case 3:_agbe =_ege (_af ,_gba ,_cff ,_aag ,_bd );case 4:_agbe =_bgd (_af ,_gba ,_cff ,_aag ,_bd );};if _agbe !=nil {return nil ,_agbe ;};return _gba ,nil ;};func (_bbee *Bitmaps )WidthSorter ()func (_affba ,_fcad int )bool {return func (_fbff ,_fabbg int )bool {return _bbee .Values [_fbff ].Width < _bbee .Values [_fabbg ].Width };};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_aegc *ClassedPoints )xSortFunction ()func (_acbb int ,_bfcd int )bool {return func (_dfgbd ,_ceef int )bool {return _aegc .XAtIndex (_dfgbd )< _aegc .XAtIndex (_ceef )};};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func (_agbee *Bitmaps )CountPixels ()*_c .NumSlice {_fdge :=&_c .NumSlice {};for _ ,_cgdf :=range _agbee .Values {_fdge .AddInt (_cgdf .CountPixels ());};return _fdge ;};func (_cdca Points )Get (i int )(Point ,error ){if i > len (_cdca )-1{return Point {},_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _cdca [i ],nil ;};type byHeight Bitmaps ;type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func TstTSymbol (t *_gc .T ,scale ...int )*Bitmap {_dcbg ,_cgea :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_f .NoError (t ,_cgea );return TstGetScaledSymbol (t ,_dcbg ,scale ...);};type Points []Point ;func (_fdee *Bitmap )setPadBits (_bad int ){_dcaeg :=8-_fdee .Width %8;if _dcaeg ==8{return ;};_eed :=_fdee .Width /8;_aaf :=_gfgb [_dcaeg ];if _bad ==0{_aaf ^=_aaf ;};var _ecb int ;for _fccc :=0;_fccc < _fdee .Height ;_fccc ++{_ecb =_fccc *_fdee .RowStride +_eed ;if _bad ==0{_fdee .Data [_ecb ]&=_aaf ;}else {_fdee .Data [_ecb ]|=_aaf ;};};};func _eba (_dbec ,_dccg byte ,_dgf CombinationOperator )byte {switch _dgf {case CmbOpOr :return _dccg |_dbec ;case CmbOpAnd :return _dccg &_dbec ;case CmbOpXor :return _dccg ^_dbec ;case CmbOpXNor :return ^(_dccg ^_dbec );case CmbOpNot :return ^(_dccg );default:return _dccg ;};};func (_agc *Bitmap )Zero ()bool {_beea :=_agc .Width /8;_abb :=_agc .Width &7;var _gbf byte ;if _abb !=0{_gbf =byte (0xff<<uint (8-_abb ));};var _bdf ,_cfbg ,_gcf int ;for _cfbg =0;_cfbg < _agc .Height ;_cfbg ++{_bdf =_agc .RowStride *_cfbg ;for _gcf =0;_gcf < _beea ;_gcf ,_bdf =_gcf +1,_bdf +1{if _agc .Data [_bdf ]!=0{return false ;};};if _abb > 0{if _agc .Data [_bdf ]&_gbf !=0{return false ;};};};return true ;};func (_dgfg *byWidth )Len ()int {return len (_dgfg .Values )};func TstGetScaledSymbol (t *_gc .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_efcc ,_dacb :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_f .NoError (t ,_dacb );return _efcc ;};func _fcc ()(_dee [256]uint16 ){for _bf :=0;_bf < 256;_bf ++{if _bf &0x01!=0{_dee [_bf ]|=0x3;};if _bf &0x02!=0{_dee [_bf ]|=0xc;};if _bf &0x04!=0{_dee [_bf ]|=0x30;};if _bf &0x08!=0{_dee [_bf ]|=0xc0;};if _bf &0x10!=0{_dee [_bf ]|=0x300;};if _bf &0x20!=0{_dee [_bf ]|=0xc00;};if _bf &0x40!=0{_dee [_bf ]|=0x3000;};if _bf &0x80!=0{_dee [_bf ]|=0xc000;};};return _dee ;};func _be (_egd ,_gca *Bitmap )(_egg error ){const _ga ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ee :=_gca .RowStride ;_fag :=_egd .RowStride ;_dcfg :=_gca .RowStride *4-_egd .RowStride ;var (_ed ,_gcg byte ;_gg uint32 ;_egc ,_geg ,_ec ,_ca ,_df ,_dbc ,_bgf int ;);for _ec =0;_ec < _gca .Height ;_ec ++{_egc =_ec *_ee ;_geg =4*_ec *_fag ;for _ca =0;_ca < _ee ;_ca ++{_ed =_gca .Data [_egc +_ca ];_gg =_adgda [_ed ];_dbc =_geg +_ca *4;if _dcfg !=0&&(_ca +1)*4> _egd .RowStride {for _df =_dcfg ;_df > 0;_df --{_gcg =byte ((_gg >>uint (_df *8))&0xff);_bgf =_dbc +(_dcfg -_df );if _egg =_egd .SetByte (_bgf ,_gcg );_egg !=nil {return _g .Wrapf (_egg ,_ga ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_df );};};}else if _egg =_egd .setFourBytes (_dbc ,_gg );_egg !=nil {return _g .Wrap (_egg ,_ga ,"");};if _egg =_egd .setFourBytes (_geg +_ca *4,_adgda [_gca .Data [_egc +_ca ]]);_egg !=nil {return _g .Wrap (_egg ,_ga ,"");};};for _df =1;_df < 4;_df ++{for _ca =0;_ca < _fag ;_ca ++{if _egg =_egd .SetByte (_geg +_df *_fag +_ca ,_egd .Data [_geg +_ca ]);_egg !=nil {return _g .Wrapf (_egg ,_ga ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_df ,_ca );};};};};return nil ;};func (_bcd *Bitmap )GetChocolateData ()[]byte {if _bcd .Color ==Vanilla {_bcd .inverseData ();};return _bcd .Data ;};func (_abaa *Bitmap )addBorderGeneral (_gega ,_dagf ,_gaf ,_ddb int ,_cce int )(*Bitmap ,error ){const _fgbd ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _gega < 0||_dagf < 0||_gaf < 0||_ddb < 0{return nil ,_g .Error (_fgbd ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_ggd ,_aggd :=_abaa .Width ,_abaa .Height ;_bgfa :=_ggd +_gega +_dagf ;_afa :=_aggd +_gaf +_ddb ;_gbeg :=New (_bgfa ,_afa );_gbeg .Color =_abaa .Color ;_bca :=PixClr ;if _cce > 0{_bca =PixSet ;};_dcb :=_gbeg .RasterOperation (0,0,_gega ,_afa ,_bca ,nil ,0,0);if _dcb !=nil {return nil ,_g .Wrap (_dcb ,_fgbd ,"\u006c\u0065\u0066\u0074");};_dcb =_gbeg .RasterOperation (_bgfa -_dagf ,0,_dagf ,_afa ,_bca ,nil ,0,0);if _dcb !=nil {return nil ,_g .Wrap (_dcb ,_fgbd ,"\u0072\u0069\u0067h\u0074");};_dcb =_gbeg .RasterOperation (0,0,_bgfa ,_gaf ,_bca ,nil ,0,0);if _dcb !=nil {return nil ,_g .Wrap (_dcb ,_fgbd ,"\u0074\u006f\u0070");};_dcb =_gbeg .RasterOperation (0,_afa -_ddb ,_bgfa ,_ddb ,_bca ,nil ,0,0);if _dcb !=nil {return nil ,_g .Wrap (_dcb ,_fgbd ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_dcb =_gbeg .RasterOperation (_gega ,_gaf ,_ggd ,_aggd ,PixSrc ,_abaa ,0,0);if _dcb !=nil {return nil ,_g .Wrap (_dcb ,_fgbd ,"\u0063\u006f\u0070\u0079");};return _gbeg ,nil ;};func _ggcf (_faca *Bitmap ,_egbgg ,_fgeda int ,_fege ,_fdec int ,_adage RasterOperator ){var (_febf int ;_gfbb byte ;_aagcf ,_faag int ;_cace int ;);_dddcc :=_fege >>3;_feaf :=_fege &7;if _feaf > 0{_gfbb =_fgadf [_feaf ];};_febf =_faca .RowStride *_fgeda +(_egbgg >>3);switch _adage {case PixClr :for _aagcf =0;_aagcf < _fdec ;_aagcf ++{_cace =_febf +_aagcf *_faca .RowStride ;for _faag =0;_faag < _dddcc ;_faag ++{_faca .Data [_cace ]=0x0;_cace ++;};if _feaf > 0{_faca .Data [_cace ]=_dcda (_faca .Data [_cace ],0x0,_gfbb );};};case PixSet :for _aagcf =0;_aagcf < _fdec ;_aagcf ++{_cace =_febf +_aagcf *_faca .RowStride ;for _faag =0;_faag < _dddcc ;_faag ++{_faca .Data [_cace ]=0xff;_cace ++;};if _feaf > 0{_faca .Data [_cace ]=_dcda (_faca .Data [_cace ],0xff,_gfbb );};};case PixNotDst :for _aagcf =0;_aagcf < _fdec ;_aagcf ++{_cace =_febf +_aagcf *_faca .RowStride ;for _faag =0;_faag < _dddcc ;_faag ++{_faca .Data [_cace ]=^_faca .Data [_cace ];_cace ++;};if _feaf > 0{_faca .Data [_cace ]=_dcda (_faca .Data [_cace ],^_faca .Data [_cace ],_gfbb );};};};};func TstWordBitmapWithSpaces (t *_gc .T ,scale ...int )*Bitmap {_bddcg :=1;if len (scale )> 0{_bddcg =scale [0];};_fegcg :=3;_ggac :=9+7+15+2*_fegcg +2*_fegcg ;_dgfc :=5+_fegcg +5+2*_fegcg ;_eggae :=New (_ggac *_bddcg ,_dgfc *_bddcg );_cffd :=&Bitmaps {};var _geffg *int ;_fegcg *=_bddcg ;_agabe :=_fegcg ;_geffg =&_agabe ;_ceddd :=_fegcg ;_caegc :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,_fegcg );_caegc =TstISymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,_fegcg );_caegc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,0);*_geffg =_fegcg ;_ceddd =5*_bddcg +_fegcg ;_caegc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,_fegcg );_caegc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,1*_bddcg );_caegc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_cffd ,_caegc ,_geffg ,_ceddd ,0);TstWriteSymbols (t ,_cffd ,_eggae );return _eggae ;};func _bbff (_cfcb *Bitmap ,_bafgb *Bitmap ,_bcdb int )(_eaafa error ){const _cdab ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_caac :=_bgebb (_cfcb .Height ,_bafgb .Height );_fead :=_bgebb (_cfcb .RowStride ,_bafgb .RowStride );switch _bcdb {case 4:_eaafa =_dagc (_cfcb ,_bafgb ,_caac ,_fead );case 8:_eaafa =_ffgbe (_cfcb ,_bafgb ,_caac ,_fead );default:return _g .Errorf (_cdab ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bcdb );};if _eaafa !=nil {return _g .Wrap (_eaafa ,_cdab ,"");};return nil ;};type SizeComparison int ;func (_bbfd *Bitmap )resizeImageData (_ffcf *Bitmap )error {if _ffcf ==nil {return _g .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bbfd .SizesEqual (_ffcf ){return nil ;};_bbfd .Data =make ([]byte ,len (_ffcf .Data ));_bbfd .Width =_ffcf .Width ;_bbfd .Height =_ffcf .Height ;_bbfd .RowStride =_ffcf .RowStride ;return nil ;};func (_geeg *Bitmap )clipRectangle (_afc ,_gfb *_d .Rectangle )(_fab *Bitmap ,_gbgc error ){const _gbfe ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _afc ==nil {return nil ,_g .Error (_gbfe ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_cfa ,_dbb :=_geeg .Width ,_geeg .Height ;_caea ,_gbgc :=ClipBoxToRectangle (_afc ,_cfa ,_dbb );if _gbgc !=nil {_db .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_gbgc );return nil ,nil ;};_bdc ,_fgeb :=_caea .Min .X ,_caea .Min .Y ;_ccca ,_ced :=_caea .Max .X -_caea .Min .X ,_caea .Max .Y -_caea .Min .Y ;_fab =New (_ccca ,_ced );_fab .Text =_geeg .Text ;if _gbgc =_fab .RasterOperation (0,0,_ccca ,_ced ,PixSrc ,_geeg ,_bdc ,_fgeb );_gbgc !=nil {return nil ,_g .Wrap (_gbgc ,_gbfe ,"");};if _gfb !=nil {*_gfb =*_caea ;};return _fab ,nil ;};func _cb (_caa *Bitmap ,_eeg ...int )(_bef *Bitmap ,_faf error ){const _gad ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _caa ==nil {return nil ,_g .Error (_gad ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_eeg )==0||len (_eeg )> 4{return nil ,_g .Error (_gad ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _eeg [0]<=0{_db .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_bef ,_faf =_deba (nil ,_caa );if _faf !=nil {return nil ,_g .Wrap (_faf ,_gad ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _bef ,nil ;};_beb :=_gdg ();_bef =_caa ;for _fdc ,_gcd :=range _eeg {if _gcd <=0{break ;};_bef ,_faf =_ggf (_bef ,_gcd ,_beb );if _faf !=nil {return nil ,_g .Wrapf (_faf ,_gad ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_fdc );};};return _bef ,nil ;};func TstImageBitmapData ()[]byte {return _cafg .Data };func (_geff *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_edb *Boxes ,_gagcg error ){const _cedd ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _geff ==nil {return nil ,_g .Error (_cedd ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_geff )==0{return _geff ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_g .Errorf (_cedd ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_g .Errorf (_cedd ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_ead :=_geff .makeSizeIndicator (width ,height ,tp ,relation );_ggege ,_gagcg :=_geff .selectWithIndicator (_ead );if _gagcg !=nil {return nil ,_g .Wrap (_gagcg ,_cedd ,"");};return _ggege ,nil ;};func (_agae *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _agae .Copy (),nil ;};_cgb ,_eef :=_agae .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _eef !=nil {return nil ,_g .Wrap (_eef ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _cgb ,nil ;};func (_agfc Points )GetIntX (i int )(int ,error ){if i >=len (_agfc ){return 0,_g .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_agfc [i ].X ),nil ;};func (_gge *Bitmap )CountPixels ()int {return _gge .countPixels ()};func TstWordBitmap (t *_gc .T ,scale ...int )*Bitmap {_cdebg :=1;if len (scale )> 0{_cdebg =scale [0];};_dbag :=3;_cbab :=9+7+15+2*_dbag ;_aagcg :=5+_dbag +5;_degb :=New (_cbab *_cdebg ,_aagcg *_cdebg );_dabg :=&Bitmaps {};var _fccca *int ;_dbag *=_cdebg ;_ceed :=0;_fccca =&_ceed ;_acd :=0;_cecc :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,_dbag );_cecc =TstISymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,_dbag );_cecc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,0);*_fccca =0;_acd =5*_cdebg +_dbag ;_cecc =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,_dbag );_cecc =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstESymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,1*_cdebg );_cecc =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_dabg ,_cecc ,_fccca ,_acd ,0);TstWriteSymbols (t ,_dabg ,_degb );return _degb ;};func (_cgbcb *ClassedPoints )XAtIndex (i int )float32 {return (*_cgbcb .Points )[_cgbcb .IntSlice [i ]].X };func (_bafe *Bitmap )addPadBits ()(_abgga error ){const _daa ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_fegf :=_bafe .Width %8;if _fegf ==0{return nil ;};_gde :=_bafe .Width /8;_affb :=_eg .NewReader (_bafe .Data );_gac :=make ([]byte ,_bafe .Height *_bafe .RowStride );_fde :=_eg .NewWriterMSB (_gac );_dca :=make ([]byte ,_gde );var (_eea int ;_geef uint64 ;);for _eea =0;_eea < _bafe .Height ;_eea ++{if _ ,_abgga =_affb .Read (_dca );_abgga !=nil {return _g .Wrap (_abgga ,_daa ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_abgga =_fde .Write (_dca );_abgga !=nil {return _g .Wrap (_abgga ,_daa ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _geef ,_abgga =_affb .ReadBits (byte (_fegf ));_abgga !=nil {return _g .Wrap (_abgga ,_daa ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _abgga =_fde .WriteByte (byte (_geef )<<uint (8-_fegf ));_abgga !=nil {return _g .Wrap (_abgga ,_daa ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_bafe .Data =_fde .Data ();return nil ;};func init (){const _ccac ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_cgdd =New (50,40);var _deeed error ;_cgdd ,_deeed =_cgdd .AddBorder (2,1);if _deeed !=nil {panic (_g .Wrap (_deeed ,_ccac ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cafg ,_deeed =NewWithData (50,22,_bbda );if _deeed !=nil {panic (_g .Wrap (_deeed ,_ccac ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func (_efcg *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _fffg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_efcg .IntSlice .Size (){return 0,_g .Errorf (_fffg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_efcg .YAtIndex (i )),nil ;};func TstWriteSymbols (t *_gc .T ,bms *Bitmaps ,src *Bitmap ){for _bddec :=0;_bddec < bms .Size ();_bddec ++{_daceg :=bms .Values [_bddec ];_gdbe :=bms .Boxes [_bddec ];_fgbde :=src .RasterOperation (_gdbe .Min .X ,_gdbe .Min .Y ,_daceg .Width ,_daceg .Height ,PixSrc ,_daceg ,0,0);_f .NoError (t ,_fgbde );};};func _cdff (_cfgc ,_bfad *Bitmap ,_ggccg *Selection )(*Bitmap ,error ){const _cabae ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _ccae ,_ggdd int ;if _bfad ==nil {return nil ,_g .Error (_cabae ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _ggccg ==nil {return nil ,_g .Error (_cabae ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_ccae =_ggccg .Width ;_ggdd =_ggccg .Height ;if _ccae ==0||_ggdd ==0{return nil ,_g .Error (_cabae ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _cfgc ==nil {return _bfad .createTemplate (),nil ;};if _gafbc :=_cfgc .resizeImageData (_bfad );_gafbc !=nil {return nil ,_gafbc ;};return _cfgc ,nil ;};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _afed ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_g .Error (_afed ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_g .Error (_afed ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_g .Error (_afed ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_g .Error (_afed ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_g .Error (_afed ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_deged ,_fecc :=bm1 .Width ,bm1 .Height ;_egae ,_eacb :=bm2 .Width ,bm2 .Height ;if _c .Abs (_deged -_egae )> maxDiffW {return false ,nil ;};if _c .Abs (_fecc -_eacb )> maxDiffH {return false ,nil ;};_gbgab :=int (delX +_c .Sign (delX )*0.5);_dadfc :=int (delY +_c .Sign (delY )*0.5);_gdb :=int (_ea .Ceil (_ea .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_ffbc :=bm2 .RowStride ;_gacdg :=_ecfg (_dadfc ,0);_aae :=_bgebb (_eacb +_dadfc ,_fecc );_egcf :=bm1 .RowStride *_gacdg ;_dafb :=bm2 .RowStride *(_gacdg -_dadfc );var _egaea int ;if _aae <=_fecc {_egaea =downcount [_aae -1];};_cgca :=_ecfg (_gbgab ,0);_daeg :=_bgebb (_egae +_gbgab ,_deged );var _babe ,_cfc int ;if _gbgab >=8{_babe =_gbgab >>3;_egcf +=_babe ;_cgca -=_babe <<3;_daeg -=_babe <<3;_gbgab &=7;}else if _gbgab <=-8{_cfc =-((_gbgab +7)>>3);_dafb +=_cfc ;_ffbc -=_cfc ;_gbgab +=_cfc <<3;};var (_dgef ,_ccdbg ,_ebdd int ;_eaba ,_fegdf ,_egca byte ;);if _cgca >=_daeg ||_gacdg >=_aae {return false ,nil ;};_fbba :=(_daeg +7)>>3;switch {case _gbgab ==0:for _ccdbg =_gacdg ;_ccdbg < _aae ;_ccdbg ,_egcf ,_dafb =_ccdbg +1,_egcf +bm1 .RowStride ,_dafb +bm2 .RowStride {for _ebdd =0;_ebdd < _fbba ;_ebdd ++{_eaba =bm1 .Data [_egcf +_ebdd ]&bm2 .Data [_dafb +_ebdd ];_dgef +=tab [_eaba ];};if _dgef >=_gdb {return true ,nil ;};if _beag :=_dgef +downcount [_ccdbg ]-_egaea ;_beag < _gdb {return false ,nil ;};};case _gbgab > 0&&_ffbc < _fbba :for _ccdbg =_gacdg ;_ccdbg < _aae ;_ccdbg ,_egcf ,_dafb =_ccdbg +1,_egcf +bm1 .RowStride ,_dafb +bm2 .RowStride {_fegdf =bm1 .Data [_egcf ];_egca =bm2 .Data [_dafb ]>>uint (_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];for _ebdd =1;_ebdd < _ffbc ;_ebdd ++{_fegdf =bm1 .Data [_egcf +_ebdd ];_egca =bm2 .Data [_dafb +_ebdd ]>>uint (_gbgab )|bm2 .Data [_dafb +_ebdd -1]<<uint (8-_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];};_fegdf =bm1 .Data [_egcf +_ebdd ];_egca =bm2 .Data [_dafb +_ebdd -1]<<uint (8-_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];if _dgef >=_gdb {return true ,nil ;}else if _dgef +downcount [_ccdbg ]-_egaea < _gdb {return false ,nil ;};};case _gbgab > 0&&_ffbc >=_fbba :for _ccdbg =_gacdg ;_ccdbg < _aae ;_ccdbg ,_egcf ,_dafb =_ccdbg +1,_egcf +bm1 .RowStride ,_dafb +bm2 .RowStride {_fegdf =bm1 .Data [_egcf ];_egca =bm2 .Data [_dafb ]>>uint (_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];for _ebdd =1;_ebdd < _fbba ;_ebdd ++{_fegdf =bm1 .Data [_egcf +_ebdd ];_egca =bm2 .Data [_dafb +_ebdd ]>>uint (_gbgab );_egca |=bm2 .Data [_dafb +_ebdd -1]<<uint (8-_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];};if _dgef >=_gdb {return true ,nil ;}else if _dgef +downcount [_ccdbg ]-_egaea < _gdb {return false ,nil ;};};case _fbba < _ffbc :for _ccdbg =_gacdg ;_ccdbg < _aae ;_ccdbg ,_egcf ,_dafb =_ccdbg +1,_egcf +bm1 .RowStride ,_dafb +bm2 .RowStride {for _ebdd =0;_ebdd < _fbba ;_ebdd ++{_fegdf =bm1 .Data [_egcf +_ebdd ];_egca =bm2 .Data [_dafb +_ebdd ]<<uint (-_gbgab );_egca |=bm2 .Data [_dafb +_ebdd +1]>>uint (8+_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];};if _dgef >=_gdb {return true ,nil ;}else if _abbf :=_dgef +downcount [_ccdbg ]-_egaea ;_abbf < _gdb {return false ,nil ;};};case _ffbc >=_fbba :for _ccdbg =_gacdg ;_ccdbg < _aae ;_ccdbg ,_egcf ,_dafb =_ccdbg +1,_egcf +bm1 .RowStride ,_dafb +bm2 .RowStride {for _ebdd =0;_ebdd < _fbba ;_ebdd ++{_fegdf =bm1 .Data [_egcf +_ebdd ];_egca =bm2 .Data [_dafb +_ebdd ]<<uint (-_gbgab );_egca |=bm2 .Data [_dafb +_ebdd +1]>>uint (8+_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];};_fegdf =bm1 .Data [_egcf +_ebdd ];_egca =bm2 .Data [_dafb +_ebdd ]<<uint (-_gbgab );_eaba =_fegdf &_egca ;_dgef +=tab [_eaba ];if _dgef >=_gdb {return true ,nil ;}else if _dgef +downcount [_ccdbg ]-_egaea < _gdb {return false ,nil ;};};};_decc :=float32 (_dgef )*float32 (_dgef )/(float32 (area1 )*float32 (area2 ));if _decc >=scoreThreshold {_db .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_dgef ,_gdb ,_decc ,scoreThreshold );};return false ,nil ;};func (_ebeb *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_fgg bool ,_dag error ){const _aggf ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_fbgd ();};_ccge :=_ebeb .Width >>3;_gadf :=_ebeb .Width &7;_feee :=byte (0xff<<uint (8-_gadf ));var (_fecf ,_fegd ,_aab ,_agbf int ;_bfg byte ;);for _fecf =0;_fecf < _ebeb .Height ;_fecf ++{_aab =_ebeb .RowStride *_fecf ;for _fegd =0;_fegd < _ccge ;_fegd ++{_bfg ,_dag =_ebeb .GetByte (_aab +_fegd );if _dag !=nil {return false ,_g .Wrap (_dag ,_aggf ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_agbf +=tab8 [_bfg ];};if _gadf !=0{_bfg ,_dag =_ebeb .GetByte (_aab +_fegd );if _dag !=nil {return false ,_g .Wrap (_dag ,_aggf ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_bfg &=_feee ;_agbf +=tab8 [_bfg ];};if _agbf > thresh {return true ,nil ;};};return _fgg ,nil ;};func _bec ()(_cgg [256]uint32 ){for _fbe :=0;_fbe < 256;_fbe ++{if _fbe &0x01!=0{_cgg [_fbe ]|=0xf;};if _fbe &0x02!=0{_cgg [_fbe ]|=0xf0;};if _fbe &0x04!=0{_cgg [_fbe ]|=0xf00;};if _fbe &0x08!=0{_cgg [_fbe ]|=0xf000;};if _fbe &0x10!=0{_cgg [_fbe ]|=0xf0000;};if _fbe &0x20!=0{_cgg [_fbe ]|=0xf00000;};if _fbe &0x40!=0{_cgg [_fbe ]|=0xf000000;};if _fbe &0x80!=0{_cgg [_fbe ]|=0xf0000000;};};return _cgg ;};func (_dedc *Boxes )selectWithIndicator (_fgge *_c .NumSlice )(_bgba *Boxes ,_feedc error ){const _dgb ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dedc ==nil {return nil ,_g .Error (_dgb ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _fgge ==nil {return nil ,_g .Error (_dgb ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_fgge )!=len (*_dedc ){return nil ,_g .Error (_dgb ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _gcgaa ,_fbadc int ;for _cgda :=0;_cgda < len (*_fgge );_cgda ++{if _gcgaa ,_feedc =_fgge .GetInt (_cgda );_feedc !=nil {return nil ,_g .Wrap (_feedc ,_dgb ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _gcgaa ==1{_fbadc ++;};};if _fbadc ==len (*_dedc ){return _dedc ,nil ;};_bcfa :=Boxes {};for _dfgbf :=0;_dfgbf < len (*_fgge );_dfgbf ++{_gcgaa =int ((*_fgge )[_dfgbf ]);if _gcgaa ==0{continue ;};_bcfa =append (_bcfa ,(*_dedc )[_dfgbf ]);};_bgba =&_bcfa ;return _bgba ,nil ;};func _deba (_gdea ,_bgeb *Bitmap )(*Bitmap ,error ){if _bgeb ==nil {return nil ,_g .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _bgeb ==_gdea {return _gdea ,nil ;};if _gdea ==nil {_gdea =_bgeb .createTemplate ();copy (_gdea .Data ,_bgeb .Data );return _gdea ,nil ;};_cdgg :=_gdea .resizeImageData (_bgeb );if _cdgg !=nil {return nil ,_g .Wrap (_cdgg ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_gdea .Text =_bgeb .Text ;copy (_gdea .Data ,_bgeb .Data );return _gdea ,nil ;};var _cbe =[5]int {1,2,3,0,4};func (_gfdf *Boxes )Add (box *_d .Rectangle )error {if _gfdf ==nil {return _g .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_gfdf =append (*_gfdf ,box );return nil ;};var _cacc [256]uint8 ;func (_dge *Bitmap )nextOnPixel (_gbfg ,_dcae int )(_ebb _d .Point ,_ebf bool ,_accb error ){const _afab ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_ebb ,_ebf ,_accb =_dge .nextOnPixelLow (_dge .Width ,_dge .Height ,_dge .RowStride ,_gbfg ,_dcae );if _accb !=nil {return _ebb ,false ,_g .Wrap (_accb ,_afab ,"");};return _ebb ,_ebf ,nil ;};func (_bgddd *BitmapsArray )AddBox (box *_d .Rectangle ){_bgddd .Boxes =append (_bgddd .Boxes ,box )};func (_eede *Bitmap )setTwoBytes (_feeg int ,_dcc uint16 )error {if _feeg +1> len (_eede .Data )-1{return _g .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_feeg );};_eede .Data [_feeg ]=byte ((_dcc &0xff00)>>8);_eede .Data [_feeg +1]=byte (_dcc &0xff);return nil ;};func Rect (x ,y ,w ,h int )(*_d .Rectangle ,error ){const _adbe ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_g .Errorf (_adbe ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_g .Error (_adbe ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_cdbd :=_d .Rect (x ,y ,x +w ,y +h );return &_cdbd ,nil ;};func (_adgde *Bitmaps )selectByIndicator (_ddcgc *_c .NumSlice )(_bcgc *Bitmaps ,_gfdd error ){const _efeg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _adgde ==nil {return nil ,_g .Error (_efeg ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _ddcgc ==nil {return nil ,_g .Error (_efeg ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_adgde .Values )==0{return _adgde ,nil ;};if len (*_ddcgc )!=len (_adgde .Values ){return nil ,_g .Errorf (_efeg ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_ddcgc ),len (_adgde .Values ));};var _cddb ,_fagagc ,_dbaa int ;for _fagagc =0;_fagagc < len (*_ddcgc );_fagagc ++{if _cddb ,_gfdd =_ddcgc .GetInt (_fagagc );_gfdd !=nil {return nil ,_g .Wrap (_gfdd ,_efeg ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _cddb ==1{_dbaa ++;};};if _dbaa ==len (_adgde .Values ){return _adgde ,nil ;};_bcgc =&Bitmaps {};_dabe :=len (_adgde .Values )==len (_adgde .Boxes );for _fagagc =0;_fagagc < len (*_ddcgc );_fagagc ++{if _cddb =int ((*_ddcgc )[_fagagc ]);_cddb ==0{continue ;};_bcgc .Values =append (_bcgc .Values ,_adgde .Values [_fagagc ]);if _dabe {_bcgc .Boxes =append (_bcgc .Boxes ,_adgde .Boxes [_fagagc ]);};};return _bcgc ,nil ;};func (_ecfbd *Bitmap )connComponentsBB (_bgaa int )(_fcccf *Boxes ,_dagd error ){const _cgeg ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _bgaa !=4&&_bgaa !=8{return nil ,_g .Error (_cgeg ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ecfbd .Zero (){return &Boxes {},nil ;};_ecfbd .setPadBits (0);_bgbb ,_dagd :=_deba (nil ,_ecfbd );if _dagd !=nil {return nil ,_g .Wrap (_dagd ,_cgeg ,"\u0062\u006d\u0031");};_bac :=&_c .Stack {};_bac .Aux =&_c .Stack {};_fcccf =&Boxes {};var (_bcfd ,_feda int ;_cgga _d .Point ;_aedb bool ;_fffe *_d .Rectangle ;);for {if _cgga ,_aedb ,_dagd =_bgbb .nextOnPixel (_feda ,_bcfd );_dagd !=nil {return nil ,_g .Wrap (_dagd ,_cgeg ,"");};if !_aedb {break ;};if _fffe ,_dagd =_ageee (_bgbb ,_bac ,_cgga .X ,_cgga .Y ,_bgaa );_dagd !=nil {return nil ,_g .Wrap (_dagd ,_cgeg ,"");};if _dagd =_fcccf .Add (_fffe );_dagd !=nil {return nil ,_g .Wrap (_dagd ,_cgeg ,"");};_feda =_cgga .X ;_bcfd =_cgga .Y ;};return _fcccf ,nil ;};func _edfg (_cefb *Bitmap ,_ddga ,_acgc ,_dccga ,_edda int ,_egde RasterOperator ){if _ddga < 0{_dccga +=_ddga ;_ddga =0;};_bcba :=_ddga +_dccga -_cefb .Width ;if _bcba > 0{_dccga -=_bcba ;};if _acgc < 0{_edda +=_acgc ;_acgc =0;};_aaba :=_acgc +_edda -_cefb .Height ;if _aaba > 0{_edda -=_aaba ;};if _dccga <=0||_edda <=0{return ;};if (_ddga &7)==0{_ggcf (_cefb ,_ddga ,_acgc ,_dccga ,_edda ,_egde );}else {_fdedf (_cefb ,_ddga ,_acgc ,_dccga ,_edda ,_egde );};};func TstESymbol (t *_gc .T ,scale ...int )*Bitmap {_bcbdb ,_efdgc :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_f .NoError (t ,_efdgc );return TstGetScaledSymbol (t ,_bcbdb ,scale ...);};func New (width ,height int )*Bitmap {_afe :=_bebg (width ,height );_afe .Data =make ([]byte ,height *_afe .RowStride );return _afe ;};func (_abca *Bitmap )setEightFullBytes (_gcgg int ,_fbf uint64 )error {if _gcgg +7> len (_abca .Data )-1{return _g .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_abca .Data [_gcgg ]=byte ((_fbf &0xff00000000000000)>>56);_abca .Data [_gcgg +1]=byte ((_fbf &0xff000000000000)>>48);_abca .Data [_gcgg +2]=byte ((_fbf &0xff0000000000)>>40);_abca .Data [_gcgg +3]=byte ((_fbf &0xff00000000)>>32);_abca .Data [_gcgg +4]=byte ((_fbf &0xff000000)>>24);_abca .Data [_gcgg +5]=byte ((_fbf &0xff0000)>>16);_abca .Data [_gcgg +6]=byte ((_fbf &0xff00)>>8);_abca .Data [_gcgg +7]=byte (_fbf &0xff);return nil ;};