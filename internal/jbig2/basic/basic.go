//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_bb *Stack )Push (v interface{}){_bb .Data =append (_bb .Data ,v )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_eb *IntSlice )Add (v int )error {if _eb ==nil {return _b .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_eb =append (*_eb ,v );return nil ;};func NewIntSlice (i int )*IntSlice {_ae :=IntSlice (make ([]int ,i ));return &_ae };type IntSlice []int ;func (_c *NumSlice )Add (v float32 ){*_c =append (*_c ,v )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func (_ed *NumSlice )AddInt (v int ){*_ed =append (*_ed ,float32 (v ))};func NewNumSlice (i int )*NumSlice {_gb :=NumSlice (make ([]float32 ,i ));return &_gb };func (_ded IntSlice )Get (index int )(int ,error ){if index > len (_ded )-1{return 0,_b .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ded [index ],nil ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_dd NumSlice )GetInt (i int )(int ,error ){const _ffa ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_dd )-1{return 0,_b .Errorf (_ffa ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_fb :=_dd [i ];return int (_fb +Sign (_fb )*0.5),nil ;};func (_ef *Stack )Len ()int {return len (_ef .Data )};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_gcg *Stack )peek ()(interface{},bool ){_gbd :=_gcg .top ();if _gbd ==-1{return nil ,false ;
};return _gcg .Data [_gbd ],true ;};func (_fe IntsMap )Delete (key uint64 ){delete (_fe ,key )};type IntsMap map[uint64 ][]int ;type Stack struct{Data []interface{};Aux *Stack ;};func (_ca NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ca )-1{return 0,_b .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ca [i ],nil ;};func (_gg IntsMap )Get (key uint64 )(int ,bool ){_d ,_e :=_gg [key ];if !_e {return 0,false ;};if len (_d )==0{return 0,false ;};return _d [0],true ;};func (_ea IntsMap )GetSlice (key uint64 )([]int ,bool ){_f ,_de :=_ea [key ];
if !_de {return nil ,false ;};return _f ,true ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_fa *Stack )Pop ()(_gc interface{},_fg bool ){_gc ,_fg =_fa .peek ();if !_fg {return nil ,_fg ;};_fa .Data =_fa .Data [:_fa .top ()];return _gc ,true ;
};func (_g IntsMap )Add (key uint64 ,value int ){_g [key ]=append (_g [key ],value )};func (_cg *Stack )top ()int {return len (_cg .Data )-1};func (_bd *IntSlice )Copy ()*IntSlice {_dg :=IntSlice (make ([]int ,len (*_bd )));copy (_dg ,*_bd );return &_dg ;
};func (_ff IntSlice )Size ()int {return len (_ff )};func (_aa NumSlice )GetIntSlice ()[]int {_cb :=make ([]int ,len (_aa ));for _da ,_cbc :=range _aa {_cb [_da ]=int (_cbc );};return _cb ;};type NumSlice []float32 ;func (_cc *Stack )Peek ()(_ce interface{},_ec bool ){return _cc .peek ()};
