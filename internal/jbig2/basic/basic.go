//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_bc IntsMap )Delete (key uint64 ){delete (_bc ,key )};func (_db *Stack )peek ()(interface{},bool ){_eeg :=_db .top ();if _eeg ==-1{return nil ,false ;};return _db .Data [_eeg ],true ;};func (_eb *NumSlice )AddInt (v int ){*_eb =append (*_eb ,float32 (v ))};type IntSlice []int ;type IntsMap map[uint64 ][]int ;func (_dcd NumSlice )GetInt (i int )(int ,error ){const _de ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_dcd )-1{return 0,_e .Errorf (_de ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_ec :=_dcd [i ];return int (_ec +Sign (_ec )*0.5),nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func NewIntSlice (i int )*IntSlice {_dc :=IntSlice (make ([]int ,i ));return &_dc };func (_cf *Stack )top ()int {return len (_cf .Data )-1};func (_bb *IntSlice )Add (v int )error {if _bb ==nil {return _e .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_bb =append (*_bb ,v );return nil ;};func (_eg *Stack )Pop ()(_cb interface{},_eeb bool ){_cb ,_eeb =_eg .peek ();if !_eeb {return nil ,_eeb ;};_eg .Data =_eg .Data [:_eg .top ()];return _cb ,true ;};func NewNumSlice (i int )*NumSlice {_aa :=NumSlice (make ([]float32 ,i ));return &_aa };type NumSlice []float32 ;func (_af *Stack )Peek ()(_fa interface{},_fb bool ){return _af .peek ()};func (_f *NumSlice )Add (v float32 ){*_f =append (*_f ,v )};func (_gd NumSlice )GetIntSlice ()[]int {_gec :=make ([]int ,len (_gd ));for _ac ,_ff :=range _gd {_gec [_ac ]=int (_ff );};return _gec ;};func (_bf IntsMap )GetSlice (key uint64 )([]int ,bool ){_ee ,_da :=_bf [key ];if !_da {return nil ,false ;};return _ee ,true ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_g IntSlice )Get (index int )(int ,error ){if index > len (_g )-1{return 0,_e .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _g [index ],nil ;};func (_ea *IntSlice )Copy ()*IntSlice {_ba :=IntSlice (make ([]int ,len (*_ea )));copy (_ba ,*_ea );return &_ba ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_a IntsMap )Add (key uint64 ,value int ){_a [key ]=append (_a [key ],value )};func (_b IntsMap )Get (key uint64 )(int ,bool ){_ed ,_c :=_b [key ];if !_c {return 0,false ;};if len (_ed )==0{return 0,false ;};return _ed [0],true ;};func (_ge IntSlice )Size ()int {return len (_ge )};func (_gf NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_gf )-1{return 0,_e .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gf [i ],nil ;};func (_fg *Stack )Push (v interface{}){_fg .Data =append (_fg .Data ,v )};func (_bg *Stack )Len ()int {return len (_bg .Data )};