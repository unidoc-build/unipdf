//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_eb NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_eb )-1{return 0,_d .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _eb [i ],nil ;};func (_b IntsMap )Get (key uint64 )(int ,bool ){_a ,_c :=_b [key ];if !_c {return 0,false ;};if len (_a )==0{return 0,false ;};return _a [0],true ;};func (_ac *NumSlice )Add (v float32 ){*_ac =append (*_ac ,v )};func (_e IntSlice )Size ()int {return len (_e )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func NewIntSlice (i int )*IntSlice {_cab :=IntSlice (make ([]int ,i ));return &_cab };func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_df IntsMap )Delete (key uint64 ){delete (_df ,key )};func (_db IntsMap )Add (key uint64 ,value int ){_db [key ]=append (_db [key ],value )};type Stack struct{Data []interface{};Aux *Stack ;};func (_gbg *Stack )peek ()(interface{},bool ){_dca :=_gbg .top ();if _dca ==-1{return nil ,false ;};return _gbg .Data [_dca ],true ;};func (_ga *Stack )Len ()int {return len (_ga .Data )};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};type IntsMap map[uint64 ][]int ;func (_dc *IntSlice )Copy ()*IntSlice {_ba :=IntSlice (make ([]int ,len (*_dc )));copy (_ba ,*_dc );return &_ba ;};func (_egf *Stack )Pop ()(_dbeb interface{},_ce bool ){_dbeb ,_ce =_egf .peek ();if !_ce {return nil ,_ce ;};_egf .Data =_egf .Data [:_egf .top ()];return _dbeb ,true ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_ed *Stack )Peek ()(_de interface{},_gac bool ){return _ed .peek ()};func (_be *IntSlice )Add (v int )error {if _be ==nil {return _d .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_be =append (*_be ,v );return nil ;};func (_cg IntsMap )GetSlice (key uint64 )([]int ,bool ){_g ,_ca :=_cg [key ];if !_ca {return nil ,false ;};return _g ,true ;};func NewNumSlice (i int )*NumSlice {_bd :=NumSlice (make ([]float32 ,i ));return &_bd };type IntSlice []int ;func (_dd *Stack )Push (v interface{}){_dd .Data =append (_dd .Data ,v )};func (_fc IntSlice )Get (index int )(int ,error ){if index > len (_fc )-1{return 0,_d .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _fc [index ],nil ;};func (_fb NumSlice )GetIntSlice ()[]int {_dfe :=make ([]int ,len (_fb ));for _eg ,_ef :=range _fb {_dfe [_eg ]=int (_ef );};return _dfe ;};func (_gf *Stack )top ()int {return len (_gf .Data )-1};func (_dbe NumSlice )GetInt (i int )(int ,error ){const _cf ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_dbe )-1{return 0,_d .Errorf (_cf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_dba :=_dbe [i ];return int (_dba +Sign (_dba )*0.5),nil ;};type NumSlice []float32 ;func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_gb *NumSlice )AddInt (v int ){*_gb =append (*_gb ,float32 (v ))};