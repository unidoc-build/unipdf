//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _g "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_dc *IntSlice )Add (v int )error {if _dc ==nil {return _g .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_dc =append (*_dc ,v );return nil ;};func (_abd *Stack )Push (v interface{}){_abd .Data =append (_abd .Data ,v )};func (_fe IntSlice )Get (index int )(int ,error ){if index > len (_fe )-1{return 0,_g .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _fe [index ],nil ;};func (_gc NumSlice )GetIntSlice ()[]int {_eg :=make ([]int ,len (_gc ));for _ed ,_ac :=range _gc {_eg [_ed ]=int (_ac );};return _eg ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_ca NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_ca )-1{return 0,_g .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _ca [i ],nil ;};func (_ag *Stack )Peek ()(_edf interface{},_egd bool ){return _ag .peek ()};func (_fa *NumSlice )AddInt (v int ){*_fa =append (*_fa ,float32 (v ))};func (_aa IntSlice )Size ()int {return len (_aa )};func (_ff *Stack )peek ()(interface{},bool ){_df :=_ff .top ();
if _df ==-1{return nil ,false ;};return _ff .Data [_df ],true ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_cc *NumSlice )Add (v float32 ){*_cc =append (*_cc ,v )};
func (_c IntsMap )Add (key uint64 ,value int ){_c [key ]=append (_c [key ],value )};func (_aad NumSlice )GetInt (i int )(int ,error ){const _dag ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_aad )-1{return 0,_g .Errorf (_dag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_bd :=_aad [i ];return int (_bd +Sign (_bd )*0.5),nil ;};func NewIntSlice (i int )*IntSlice {_d :=IntSlice (make ([]int ,i ));return &_d };func Min (x ,y int )int {if x < y {return x ;};return y ;};type NumSlice []float32 ;func (_ab IntsMap )GetSlice (key uint64 )([]int ,bool ){_b ,_cb :=_ab [key ];
if !_cb {return nil ,false ;};return _b ,true ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func NewNumSlice (i int )*NumSlice {_da :=NumSlice (make ([]float32 ,i ));return &_da };func (_gf *Stack )Len ()int {return len (_gf .Data )};func (_edc *Stack )Pop ()(_fb interface{},_ee bool ){_fb ,_ee =_edc .peek ();
if !_ee {return nil ,_ee ;};_edc .Data =_edc .Data [:_edc .top ()];return _fb ,true ;};func (_ec IntsMap )Delete (key uint64 ){delete (_ec ,key )};func (_aaa *Stack )top ()int {return len (_aaa .Data )-1};func (_cba *IntSlice )Copy ()*IntSlice {_cg :=IntSlice (make ([]int ,len (*_cba )));
copy (_cg ,*_cba );return &_cg ;};type IntsMap map[uint64 ][]int ;type Stack struct{Data []interface{};Aux *Stack ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_e IntsMap )Get (key uint64 )(int ,bool ){_f ,_fd :=_e [key ];
if !_fd {return 0,false ;};if len (_f )==0{return 0,false ;};return _f [0],true ;};type IntSlice []int ;