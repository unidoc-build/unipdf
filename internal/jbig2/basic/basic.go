//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _f "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_a *NumSlice )AddInt (v int ){*_a =append (*_a ,float32 (v ))};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_bc *IntSlice )Copy ()*IntSlice {_fg :=IntSlice (make ([]int ,len (*_bc )));copy (_fg ,*_bc );return &_fg ;};func (_ba IntsMap )Delete (key uint64 ){delete (_ba ,key )};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_dd IntSlice )Size ()int {return len (_dd )};func (_bee *Stack )Len ()int {return len (_bee .Data )};func Max (x ,y int )int {if x > y {return x ;};return y ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_b IntsMap )Get (key uint64 )(int ,bool ){_fe ,_fb :=_b [key ];if !_fb {return 0,false ;};if len (_fe )==0{return 0,false ;};return _fe [0],true ;};func (_bae *IntSlice )Add (v int )error {if _bae ==nil {return _f .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_bae =append (*_bae ,v );return nil ;};func (_bg *Stack )peek ()(interface{},bool ){_fgc :=_bg .top ();if _fgc ==-1{return nil ,false ;};return _bg .Data [_fgc ],true ;};func NewNumSlice (i int )*NumSlice {_fge :=NumSlice (make ([]float32 ,i ));return &_fge };type IntSlice []int ;func (_g IntsMap )GetSlice (key uint64 )([]int ,bool ){_gc ,_c :=_g [key ];if !_c {return nil ,false ;};return _gc ,true ;};func (_fbcg *Stack )top ()int {return len (_fbcg .Data )-1};func (_ea IntSlice )Get (index int )(int ,error ){if index > len (_ea )-1{return 0,_f .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _ea [index ],nil ;};func (_fc NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_fc )-1{return 0,_f .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fc [i ],nil ;};func NewIntSlice (i int )*IntSlice {_gb :=IntSlice (make ([]int ,i ));return &_gb };func (_d IntsMap )Add (key uint64 ,value int ){_d [key ]=append (_d [key ],value )};func (_gcb NumSlice )GetIntSlice ()[]int {_ad :=make ([]int ,len (_gcb ));for _ec ,_db :=range _gcb {_ad [_ec ]=int (_db );};return _ad ;};type IntsMap map[uint64 ][]int ;func (_fbc NumSlice )GetInt (i int )(int ,error ){const _eab ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_fbc )-1{return 0,_f .Errorf (_eab ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_be :=_fbc [i ];return int (_be +Sign (_be )*0.5),nil ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_cf *Stack )Peek ()(_bb interface{},_ae bool ){return _cf .peek ()};func (_bd *Stack )Pop ()(_fcf interface{},_de bool ){_fcf ,_de =_bd .peek ();if !_de {return nil ,_de ;};_bd .Data =_bd .Data [:_bd .top ()];return _fcf ,true ;};type NumSlice []float32 ;func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_ab *Stack )Push (v interface{}){_ab .Data =append (_ab .Data ,v )};func (_gbf *NumSlice )Add (v float32 ){*_gbf =append (*_gbf ,v )};