//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_fgb *Stack )Peek ()(_ebb interface{},_cfb bool ){return _fgb .peek ()};func (_gf *NumSlice )AddInt (v int ){*_gf =append (*_gf ,float32 (v ))};func (_d *IntSlice )Add (v int )error {if _d ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_d =append (*_d ,v );return nil ;};func (_de *IntSlice )Copy ()*IntSlice {_ae :=IntSlice (make ([]int ,len (*_de )));copy (_ae ,*_de );return &_ae ;};func (_aef *Stack )Pop ()(_ab interface{},_ffe bool ){_ab ,_ffe =_aef .peek ();if !_ffe {return nil ,_ffe ;
};_aef .Data =_aef .Data [:_aef .top ()];return _ab ,true ;};type Stack struct{Data []interface{};Aux *Stack ;};func NewIntSlice (i int )*IntSlice {_gg :=IntSlice (make ([]int ,i ));return &_gg };type NumSlice []float32 ;func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func (_da NumSlice )GetInt (i int )(int ,error ){const _fg ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_da )-1{return 0,_c .Errorf (_fg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ff :=_da [i ];return int (_ff +Sign (_ff )*0.5),nil ;};func (_bc NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_bc )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _bc [i ],nil ;};func (_ad IntSlice )Get (index int )(int ,error ){if index > len (_ad )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ad [index ],nil ;};func (_b IntSlice )Size ()int {return len (_b )};type IntSlice []int ;func (_cgd *NumSlice )Add (v float32 ){*_cgd =append (*_cgd ,v )};func Max (x ,y int )int {if x > y {return x ;};return y ;};func Min (x ,y int )int {if x < y {return x ;
};return y ;};func (_a IntsMap )Add (key uint64 ,value int ){_a [key ]=append (_a [key ],value )};func (_ef IntsMap )GetSlice (key uint64 )([]int ,bool ){_aa ,_g :=_ef [key ];if !_g {return nil ,false ;};return _aa ,true ;};func (_gc IntsMap )Delete (key uint64 ){delete (_gc ,key )};
func (_ba *Stack )top ()int {return len (_ba .Data )-1};func (_df *Stack )Push (v interface{}){_df .Data =append (_df .Data ,v )};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_gb *Stack )peek ()(interface{},bool ){_abf :=_gb .top ();if _abf ==-1{return nil ,false ;
};return _gb .Data [_abf ],true ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_eb NumSlice )GetIntSlice ()[]int {_cb :=make ([]int ,len (_eb ));for _cgb ,_cd :=range _eb {_cb [_cgb ]=int (_cd );};return _cb ;};func NewNumSlice (i int )*NumSlice {_cf :=NumSlice (make ([]float32 ,i ));
return &_cf };func (_ce IntsMap )Get (key uint64 )(int ,bool ){_e ,_cg :=_ce [key ];if !_cg {return 0,false ;};if len (_e )==0{return 0,false ;};return _e [0],true ;};func (_be *Stack )Len ()int {return len (_be .Data )};type IntsMap map[uint64 ][]int ;
