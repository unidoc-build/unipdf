//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _b "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_g IntsMap )Get (key uint64 )(int ,bool ){_d ,_ee :=_g [key ];if !_ee {return 0,false ;};if len (_d )==0{return 0,false ;
};return _d [0],true ;};func Min (x ,y int )int {if x < y {return x ;};return y ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_c IntsMap )Delete (key uint64 ){delete (_c ,key )};func (_cb NumSlice )GetIntSlice ()[]int {_dcg :=make ([]int ,len (_cb ));
for _aae ,_ca :=range _cb {_dcg [_aae ]=int (_ca );};return _dcg ;};func (_cg *Stack )top ()int {return len (_cg .Data )-1};func (_gc *NumSlice )Add (v float32 ){*_gc =append (*_gc ,v )};func (_eec *IntSlice )Add (v int )error {if _eec ==nil {return _b .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_eec =append (*_eec ,v );return nil ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_db *IntSlice )Copy ()*IntSlice {_ag :=IntSlice (make ([]int ,len (*_db )));copy (_ag ,*_db );return &_ag ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;
};return (numerator /denominator )+1;};func (_gd IntsMap )GetSlice (key uint64 )([]int ,bool ){_dc ,_aa :=_gd [key ];if !_aa {return nil ,false ;};return _dc ,true ;};func NewIntSlice (i int )*IntSlice {_dd :=IntSlice (make ([]int ,i ));return &_dd };func NewNumSlice (i int )*NumSlice {_f :=NumSlice (make ([]float32 ,i ));
return &_f };func (_cc *NumSlice )AddInt (v int ){*_cc =append (*_cc ,float32 (v ))};func (_ddd NumSlice )GetInt (i int )(int ,error ){const _bd ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ddd )-1{return 0,_b .Errorf (_bd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_de :=_ddd [i ];return int (_de +Sign (_de )*0.5),nil ;};func (_fe NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_fe )-1{return 0,_b .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _fe [i ],nil ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_ab IntSlice )Get (index int )(int ,error ){if index > len (_ab )-1{return 0,_b .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _ab [index ],nil ;};func (_a IntsMap )Add (key uint64 ,value int ){_a [key ]=append (_a [key ],value )};type IntSlice []int ;func (_dbf *Stack )Len ()int {return len (_dbf .Data )};type IntsMap map[uint64 ][]int ;func (_be *Stack )Peek ()(_feg interface{},_cab bool ){return _be .peek ()};
func (_ea *Stack )Pop ()(_gg interface{},_ed bool ){_gg ,_ed =_ea .peek ();if !_ed {return nil ,_ed ;};_ea .Data =_ea .Data [:_ea .top ()];return _gg ,true ;};func (_ac IntSlice )Size ()int {return len (_ac )};type NumSlice []float32 ;func (_ae *Stack )Push (v interface{}){_ae .Data =append (_ae .Data ,v )};
func (_af *Stack )peek ()(interface{},bool ){_gf :=_af .top ();if _gf ==-1{return nil ,false ;};return _af .Data [_gf ],true ;};