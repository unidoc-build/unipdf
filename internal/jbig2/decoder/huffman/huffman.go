//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_b "errors";_ab "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ee "math";_f "strings";);var _agbd =make ([]Tabler ,len (_bb ));func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_agbd ){return nil ,_b .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dfb :=_agbd [number -1];if _dfb ==nil {var _dcb error ;_dfb ,_dcb =_ba (_bb [number -1]);if _dcb !=nil {return nil ,_dcb ;};_agbd [number -1]=_dfb ;};return _dfb ,nil ;};func (_ag *OutOfBandNode )Decode (r _a .StreamReader )(int64 ,error ){return 0,_e .ErrOOB };
func (_cd *FixedSizeTable )RootNode ()*InternalNode {return _cd ._aeg };type OutOfBandNode struct{};var _ Node =&InternalNode {};func (_gfd *FixedSizeTable )InitTree (codeTable []*Code )error {_gda (codeTable );for _ ,_ggd :=range codeTable {_dd :=_gfd ._aeg .append (_ggd );
if _dd !=nil {return _dd ;};};return nil ;};func (_edg *StandardTable )InitTree (codeTable []*Code )error {_gda (codeTable );for _ ,_fa :=range codeTable {if _aba :=_edg ._ac .append (_fa );_aba !=nil {return _aba ;};};return nil ;};func _dcf (_bd *Code )*ValueNode {return &ValueNode {_abg :_bd ._gd ,_fba :_bd ._cca ,_dag :_bd ._aegc }};
func (_ec *EncodedTable )Decode (r _a .StreamReader )(int64 ,error ){return _ec ._g .Decode (r )};type EncodedTable struct{BasicTabler ;_g *InternalNode ;};var _ Node =&ValueNode {};func _de (_dcc *Code )*OutOfBandNode {return &OutOfBandNode {}};type Tabler interface{Decode (_ddf _a .StreamReader )(int64 ,error );
InitTree (_eef []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _ Node =&OutOfBandNode {};func (_gb *ValueNode )Decode (r _a .StreamReader )(int64 ,error ){_age ,_agb :=r .ReadBits (byte (_gb ._abg ));if _agb !=nil {return 0,_agb ;};if _gb ._dag {_age =-_age ;
};return int64 (_gb ._fba )+int64 (_age ),nil ;};func (_ef *InternalNode )pad (_abe *_f .Builder ){for _bed :=int32 (0);_bed < _ef ._bdf ;_bed ++{_abe .WriteString ("\u0020\u0020\u0020");};};func (_dca *InternalNode )Decode (r _a .StreamReader )(int64 ,error ){_gbf ,_cc :=r .ReadBit ();
if _cc !=nil {return 0,_cc ;};if _gbf ==0{return _dca ._fg .Decode (r );};return _dca ._bdb .Decode (r );};func (_dcd *StandardTable )RootNode ()*InternalNode {return _dcd ._ac };func (_gfg *InternalNode )append (_ce *Code )(_agg error ){if _ce ._eee ==0{return nil ;
};_eea :=_ce ._eee -1-_gfg ._bdf ;if _eea < 0{return _b .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_dfd :=(_ce ._ccg >>uint (_eea ))&0x1;
if _eea ==0{if _ce ._gd ==-1{if _dfd ==1{if _gfg ._bdb !=nil {return _ab .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ce );};_gfg ._bdb =_de (_ce );
}else {if _gfg ._fg !=nil {return _ab .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_ce );};_gfg ._fg =_de (_ce );};}else {if _dfd ==1{if _gfg ._bdb !=nil {return _ab .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ce );
};_gfg ._bdb =_dcf (_ce );}else {if _gfg ._fg !=nil {return _ab .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_ce );
};_gfg ._fg =_dcf (_ce );};};}else {if _dfd ==1{if _gfg ._bdb ==nil {_gfg ._bdb =_gff (_gfg ._bdf +1);};if _agg =_gfg ._bdb .(*InternalNode ).append (_ce );_agg !=nil {return _agg ;};}else {if _gfg ._fg ==nil {_gfg ._fg =_gff (_gfg ._bdf +1);};if _agg =_gfg ._fg .(*InternalNode ).append (_ce );
_agg !=nil {return _agg ;};};};return nil ;};type FixedSizeTable struct{_aeg *InternalNode };var _ Tabler =&EncodedTable {};func _gff (_ebg int32 )*InternalNode {return &InternalNode {_bdf :_ebg }};func (_bf *EncodedTable )InitTree (codeTable []*Code )error {_gda (codeTable );
for _ ,_aa :=range codeTable {if _fd :=_bf ._g .append (_aa );_fd !=nil {return _fd ;};};return nil ;};func (_fb *EncodedTable )parseTable ()error {var (_ff []*Code ;_ed ,_aac ,_eg int32 ;_abd uint64 ;_eb error ;);_ffc :=_fb .StreamReader ();_af :=_fb .HtLow ();
for _af < _fb .HtHigh (){_abd ,_eb =_ffc .ReadBits (byte (_fb .HtPS ()));if _eb !=nil {return _eb ;};_ed =int32 (_abd );_abd ,_eb =_ffc .ReadBits (byte (_fb .HtRS ()));if _eb !=nil {return _eb ;};_aac =int32 (_abd );_ff =append (_ff ,NewCode (_ed ,_aac ,_eg ,false ));
_af +=1<<uint (_aac );};_abd ,_eb =_ffc .ReadBits (byte (_fb .HtPS ()));if _eb !=nil {return _eb ;};_ed =int32 (_abd );_aac =32;_eg =_fb .HtLow ()-1;_ff =append (_ff ,NewCode (_ed ,_aac ,_eg ,true ));_abd ,_eb =_ffc .ReadBits (byte (_fb .HtPS ()));if _eb !=nil {return _eb ;
};_ed =int32 (_abd );_aac =32;_eg =_fb .HtHigh ();_ff =append (_ff ,NewCode (_ed ,_aac ,_eg ,false ));if _fb .HtOOB ()==1{_abd ,_eb =_ffc .ReadBits (byte (_fb .HtPS ()));if _eb !=nil {return _eb ;};_ed =int32 (_abd );_ff =append (_ff ,NewCode (_ed ,-1,-1,false ));
};if _eb =_fb .InitTree (_ff );_eb !=nil {return _eb ;};return nil ;};type Node interface{Decode (_cf _a .StreamReader )(int64 ,error );String ()string ;};type StandardTable struct{_ac *InternalNode };func (_bc *StandardTable )Decode (r _a .StreamReader )(int64 ,error ){return _bc ._ac .Decode (r )};
func _bcd (_ea ,_fbf int32 )string {var _fdd int32 ;_bbg :=make ([]rune ,_fbf );for _dccf :=int32 (1);_dccf <=_fbf ;_dccf ++{_fdd =_ea >>uint (_fbf -_dccf )&1;if _fdd !=0{_bbg [_dccf -1]='1';}else {_bbg [_dccf -1]='0';};};return string (_bbg );};func (_gg *EncodedTable )String ()string {return _gg ._g .String ()+"\u000a"};
func (_cg *InternalNode )String ()string {_afd :=&_f .Builder {};_afd .WriteString ("\u000a");_cg .pad (_afd );_afd .WriteString ("\u0030\u003a\u0020");_afd .WriteString (_cg ._fg .String ()+"\u000a");_cg .pad (_afd );_afd .WriteString ("\u0031\u003a\u0020");
_afd .WriteString (_cg ._bdb .String ()+"\u000a");return _afd .String ();};func (_fc *EncodedTable )RootNode ()*InternalNode {return _fc ._g };func (_aaf *OutOfBandNode )String ()string {return _ab .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ee .MaxInt64 ));
};func (_ebc *ValueNode )String ()string {return _ab .Sprintf ("\u0025\u0064\u002f%\u0064",_ebc ._abg ,_ebc ._fba );};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_eee :prefixLength ,_gd :rangeLength ,_cca :rangeLow ,_aegc :isLowerRange ,_ccg :-1};
};type Code struct{_eee int32 ;_gd int32 ;_cca int32 ;_aegc bool ;_ccg int32 ;};type InternalNode struct{_bdf int32 ;_fg Node ;_bdb Node ;};var _bb =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func _gda (_gaf []*Code ){var _fcd int32 ;for _ ,_bfa :=range _gaf {_fcd =_fag (_fcd ,_bfa ._eee );};_gfc :=make ([]int32 ,_fcd +1);for _ ,_daa :=range _gaf {_gfc [_daa ._eee ]++;};var _acg int32 ;_fab :=make ([]int32 ,len (_gfc )+1);_gfc [0]=0;for _eda :=int32 (1);
_eda <=int32 (len (_gfc ));_eda ++{_fab [_eda ]=(_fab [_eda -1]+(_gfc [_eda -1]))<<1;_acg =_fab [_eda ];for _ ,_ada :=range _gaf {if _ada ._eee ==_eda {_ada ._ccg =_acg ;_acg ++;};};};};func _ba (_bda [][]int32 )(*StandardTable ,error ){var _bdg []*Code ;
for _ga :=0;_ga < len (_bda );_ga ++{_eed :=_bda [_ga ][0];_fe :=_bda [_ga ][1];_edd :=_bda [_ga ][2];var _cga bool ;if len (_bda [_ga ])> 3{_cga =true ;};_bdg =append (_bdg ,NewCode (_eed ,_fe ,_edd ,_cga ));};_dce :=&StandardTable {_ac :_gff (0)};if _abda :=_dce .InitTree (_bdg );
_abda !=nil {return nil ,_abda ;};return _dce ,nil ;};func (_c *FixedSizeTable )String ()string {return _c ._aeg .String ()+"\u000a"};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_df :=&FixedSizeTable {_aeg :&InternalNode {}};if _gf :=_df .InitTree (codeTable );
_gf !=nil {return nil ,_gf ;};return _df ,nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_dc :=&EncodedTable {_g :&InternalNode {},BasicTabler :table };if _be :=_dc .parseTable ();_be !=nil {return nil ,_be ;};return _dc ,nil ;
};type ValueNode struct{_abg int32 ;_fba int32 ;_dag bool ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_a .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func _fag (_cb ,_fddb int32 )int32 {if _cb > _fddb {return _cb ;
};return _fddb ;};func (_da *FixedSizeTable )Decode (r _a .StreamReader )(int64 ,error ){return _da ._aeg .Decode (r )};func (_ecc *Code )String ()string {var _abb string ;if _ecc ._ccg !=-1{_abb =_bcd (_ecc ._ccg ,_ecc ._eee );}else {_abb ="\u003f";};
return _ab .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_abb ,_ecc ._eee ,_ecc ._gd ,_ecc ._cca );};func (_fdc *StandardTable )String ()string {return _fdc ._ac .String ()+"\u000a"};