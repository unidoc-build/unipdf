//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_g "errors";_c "fmt";_f "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_a "math";_e "strings";);type OutOfBandNode struct{};func (_aa *EncodedTable )parseTable ()error {var (_bb []*Code ;
_ea ,_ceb ,_aed int32 ;_fcd uint64 ;_ca error ;);_edg :=_aa .StreamReader ();_ac :=_aa .HtLow ();for _ac < _aa .HtHigh (){_fcd ,_ca =_edg .ReadBits (byte (_aa .HtPS ()));if _ca !=nil {return _ca ;};_ea =int32 (_fcd );_fcd ,_ca =_edg .ReadBits (byte (_aa .HtRS ()));
if _ca !=nil {return _ca ;};_ceb =int32 (_fcd );_bb =append (_bb ,NewCode (_ea ,_ceb ,_aed ,false ));_ac +=1<<uint (_ceb );};_fcd ,_ca =_edg .ReadBits (byte (_aa .HtPS ()));if _ca !=nil {return _ca ;};_ea =int32 (_fcd );_ceb =32;_aed =_aa .HtLow ()-1;_bb =append (_bb ,NewCode (_ea ,_ceb ,_aed ,true ));
_fcd ,_ca =_edg .ReadBits (byte (_aa .HtPS ()));if _ca !=nil {return _ca ;};_ea =int32 (_fcd );_ceb =32;_aed =_aa .HtHigh ();_bb =append (_bb ,NewCode (_ea ,_ceb ,_aed ,false ));if _aa .HtOOB ()==1{_fcd ,_ca =_edg .ReadBits (byte (_aa .HtPS ()));if _ca !=nil {return _ca ;
};_ea =int32 (_fcd );_bb =append (_bb ,NewCode (_ea ,-1,-1,false ));};if _ca =_aa .InitTree (_bb );_ca !=nil {return _ca ;};return nil ;};func _dff (_ebe *Code )*OutOfBandNode {return &OutOfBandNode {}};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gf :=&EncodedTable {_ab :&InternalNode {},BasicTabler :table };
if _be :=_gf .parseTable ();_be !=nil {return nil ,_be ;};return _gf ,nil ;};func _ecfe (_ad [][]int32 )(*StandardTable ,error ){var _eab []*Code ;for _ecb :=0;_ecb < len (_ad );_ecb ++{_ecba :=_ad [_ecb ][0];_agg :=_ad [_ecb ][1];_feb :=_ad [_ecb ][2];
var _efge bool ;if len (_ad [_ecb ])> 3{_efge =true ;};_eab =append (_eab ,NewCode (_ecba ,_agg ,_feb ,_efge ));};_eea :=&StandardTable {_gba :_fag (0)};if _bdb :=_eea .InitTree (_eab );_bdb !=nil {return nil ,_bdb ;};return _eea ,nil ;};type ValueNode struct{_ee int32 ;
_bee int32 ;_ag bool ;};var _ Node =&OutOfBandNode {};func (_beb *InternalNode )Decode (r _f .StreamReader )(int64 ,error ){_cda ,_gfg :=r .ReadBit ();if _gfg !=nil {return 0,_gfg ;};if _cda ==0{return _beb ._cc .Decode (r );};return _beb ._fba .Decode (r );
};var _cg =make ([]Tabler ,len (_aea ));func (_cea *InternalNode )append (_bbc *Code )(_ec error ){if _bbc ._dfg ==0{return nil ;};_efg :=_bbc ._dfg -1-_cea ._fb ;if _efg < 0{return _g .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_abed :=(_bbc ._gge >>uint (_efg ))&0x1;if _efg ==0{if _bbc ._eec ==-1{if _abed ==1{if _cea ._fba !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bbc );
};_cea ._fba =_dff (_bbc );}else {if _cea ._cc !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bbc );};_cea ._cc =_dff (_bbc );};}else {if _abed ==1{if _cea ._fba !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bbc );
};_cea ._fba =_gae (_bbc );}else {if _cea ._cc !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bbc );
};_cea ._cc =_gae (_bbc );};};}else {if _abed ==1{if _cea ._fba ==nil {_cea ._fba =_fag (_cea ._fb +1);};if _ec =_cea ._fba .(*InternalNode ).append (_bbc );_ec !=nil {return _ec ;};}else {if _cea ._cc ==nil {_cea ._cc =_fag (_cea ._fb +1);};if _ec =_cea ._cc .(*InternalNode ).append (_bbc );
_ec !=nil {return _ec ;};};};return nil ;};var _aea =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_fe *OutOfBandNode )Decode (r _f .StreamReader )(int64 ,error ){return 0,_b .ErrOOB };func (_eaa *ValueNode )Decode (r _f .StreamReader )(int64 ,error ){_ga ,_fcgf :=r .ReadBits (byte (_eaa ._ee ));if _fcgf !=nil {return 0,_fcgf ;};if _eaa ._ag {_ga =-_ga ;
};return int64 (_eaa ._bee )+int64 (_ga ),nil ;};func (_cebg *InternalNode )pad (_bg *_e .Builder ){for _ceaa :=int32 (0);_ceaa < _cebg ._fb ;_ceaa ++{_bg .WriteString ("\u0020\u0020\u0020");};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_fa :=&FixedSizeTable {_acd :&InternalNode {}};
if _dg :=_fa .InitTree (codeTable );_dg !=nil {return nil ,_dg ;};return _fa ,nil ;};func (_gcf *StandardTable )InitTree (codeTable []*Code )error {_egg (codeTable );for _ ,_fgg :=range codeTable {if _agf :=_gcf ._gba .append (_fgg );_agf !=nil {return _agf ;
};};return nil ;};func _egg (_fad []*Code ){var _ggeb int32 ;for _ ,_aggd :=range _fad {_ggeb =_cf (_ggeb ,_aggd ._dfg );};_agb :=make ([]int32 ,_ggeb +1);for _ ,_dea :=range _fad {_agb [_dea ._dfg ]++;};var _cdg int32 ;_dfed :=make ([]int32 ,len (_agb )+1);
_agb [0]=0;for _bebb :=int32 (1);_bebb <=int32 (len (_agb ));_bebb ++{_dfed [_bebb ]=(_dfed [_bebb -1]+(_agb [_bebb -1]))<<1;_cdg =_dfed [_bebb ];for _ ,_bga :=range _fad {if _bga ._dfg ==_bebb {_bga ._gge =_cdg ;_cdg ++;};};};};type BasicTabler interface{HtHigh ()int32 ;
HtLow ()int32 ;StreamReader ()_f .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_aac *InternalNode )String ()string {_bbd :=&_e .Builder {};_bbd .WriteString ("\u000a");_aac .pad (_bbd );_bbd .WriteString ("\u0030\u003a\u0020");_bbd .WriteString (_aac ._cc .String ()+"\u000a");
_aac .pad (_bbd );_bbd .WriteString ("\u0031\u003a\u0020");_bbd .WriteString (_aac ._fba .String ()+"\u000a");return _bbd .String ();};type Node interface{Decode (_ba _f .StreamReader )(int64 ,error );String ()string ;};type StandardTable struct{_gba *InternalNode };
var _ Node =&InternalNode {};func (_cb *FixedSizeTable )Decode (r _f .StreamReader )(int64 ,error ){return _cb ._acd .Decode (r )};func _fag (_gg int32 )*InternalNode {return &InternalNode {_fb :_gg }};type FixedSizeTable struct{_acd *InternalNode };func (_ecf *StandardTable )String ()string {return _ecf ._gba .String ()+"\u000a"};
type EncodedTable struct{BasicTabler ;_ab *InternalNode ;};func (_da *EncodedTable )RootNode ()*InternalNode {return _da ._ab };func (_dc *FixedSizeTable )InitTree (codeTable []*Code )error {_egg (codeTable );for _ ,_gc :=range codeTable {_dd :=_dc ._acd .append (_gc );
if _dd !=nil {return _dd ;};};return nil ;};func (_fc *EncodedTable )String ()string {return _fc ._ab .String ()+"\u000a"};func (_acc *StandardTable )RootNode ()*InternalNode {return _acc ._gba };var _ Node =&ValueNode {};type Code struct{_dfg int32 ;_eec int32 ;
_aeb int32 ;_eg bool ;_gge int32 ;};func _bbf (_ade ,_gd int32 )string {var _ada int32 ;_af :=make ([]rune ,_gd );for _bc :=int32 (1);_bc <=_gd ;_bc ++{_ada =_ade >>uint (_gd -_bc )&1;if _ada !=0{_af [_bc -1]='1';}else {_af [_bc -1]='0';};};return string (_af );
};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_dfg :prefixLength ,_eec :rangeLength ,_aeb :rangeLow ,_eg :isLowerRange ,_gge :-1};};type Tabler interface{Decode (_aaf _f .StreamReader )(int64 ,error );
InitTree (_cca []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_cg ){return nil ,_g .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_agd :=_cg [number -1];if _agd ==nil {var _de error ;_agd ,_de =_ecfe (_aea [number -1]);if _de !=nil {return nil ,_de ;};_cg [number -1]=_agd ;};return _agd ,nil ;};func (_df *FixedSizeTable )String ()string {return _df ._acd .String ()+"\u000a"};func (_eb *EncodedTable )InitTree (codeTable []*Code )error {_egg (codeTable );
for _ ,_ae :=range codeTable {if _ed :=_eb ._ab .append (_ae );_ed !=nil {return _ed ;};};return nil ;};func _gae (_dfe *Code )*ValueNode {return &ValueNode {_ee :_dfe ._eec ,_bee :_dfe ._aeb ,_ag :_dfe ._eg }};type InternalNode struct{_fb int32 ;_cc Node ;
_fba Node ;};func (_gb *OutOfBandNode )String ()string {return _c .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_a .MaxInt64 ));};func (_cd *FixedSizeTable )RootNode ()*InternalNode {return _cd ._acd };func (_fd *EncodedTable )Decode (r _f .StreamReader )(int64 ,error ){return _fd ._ab .Decode (r )};
func (_fg *StandardTable )Decode (r _f .StreamReader )(int64 ,error ){return _fg ._gba .Decode (r )};func _cf (_cdb ,_ff int32 )int32 {if _cdb > _ff {return _cdb ;};return _ff ;};func (_bae *Code )String ()string {var _cgd string ;if _bae ._gge !=-1{_cgd =_bbf (_bae ._gge ,_bae ._dfg );
}else {_cgd ="\u003f";};return _c .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cgd ,_bae ._dfg ,_bae ._eec ,_bae ._aeb );};var _ Tabler =&EncodedTable {};func (_gbb *ValueNode )String ()string {return _c .Sprintf ("\u0025\u0064\u002f%\u0064",_gbb ._ee ,_gbb ._bee );
};