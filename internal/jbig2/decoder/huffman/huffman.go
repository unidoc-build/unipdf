//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_f "errors";_e "fmt";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "math";_ad "strings";);var _ Node =&ValueNode {};func (_bfd *InternalNode )append (_eg *Code )(_bd error ){if _eg ._cad ==0{return nil ;};_be :=_eg ._cad -1-_bfd ._cg ;if _be < 0{return _f .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_ee :=(_eg ._cea >>uint (_be ))&0x1;if _be ==0{if _eg ._ac ==-1{if _ee ==1{if _bfd ._ff !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eg );};_bfd ._ff =_db (_eg );}else {if _bfd ._gg !=nil {return _e .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eg );};_bfd ._gg =_db (_eg );};}else {if _ee ==1{if _bfd ._ff !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eg );};_bfd ._ff =_ddc (_eg );}else {if _bfd ._gg !=nil {return _e .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eg );};_bfd ._gg =_ddc (_eg );};};}else {if _ee ==1{if _bfd ._ff ==nil {_bfd ._ff =_ea (_bfd ._cg +1);};if _bd =_bfd ._ff .(*InternalNode ).append (_eg );_bd !=nil {return _bd ;};}else {if _bfd ._gg ==nil {_bfd ._gg =_ea (_bfd ._cg +1);};if _bd =_bfd ._gg .(*InternalNode ).append (_eg );_bd !=nil {return _bd ;};};};return nil ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_eb :=&EncodedTable {_ca :&InternalNode {},BasicTabler :table };if _ebf :=_eb .parseTable ();_ebf !=nil {return nil ,_ebf ;};return _eb ,nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_g .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_baa *OutOfBandNode )String ()string {return _e .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};type Tabler interface{Decode (_ceb _g .StreamReader )(int64 ,error );InitTree (_bcb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};type Code struct{_cad int32 ;_ac int32 ;_eec int32 ;_gca bool ;_cea int32 ;};func (_bb *FixedSizeTable )Decode (r _g .StreamReader )(int64 ,error ){return _bb ._bc .Decode (r )};func (_ccf *StandardTable )String ()string {return _ccf ._bab .String ()+"\u000a"};func (_ce *EncodedTable )parseTable ()error {var (_fc []*Code ;_cc ,_cf ,_gf int32 ;_aec uint64 ;_fcd error ;);_ge :=_ce .StreamReader ();_ade :=_ce .HtLow ();for _ade < _ce .HtHigh (){_aec ,_fcd =_ge .ReadBits (byte (_ce .HtPS ()));if _fcd !=nil {return _fcd ;};_cc =int32 (_aec );_aec ,_fcd =_ge .ReadBits (byte (_ce .HtRS ()));if _fcd !=nil {return _fcd ;};_cf =int32 (_aec );_fc =append (_fc ,NewCode (_cc ,_cf ,_gf ,false ));_ade +=1<<uint (_cf );};_aec ,_fcd =_ge .ReadBits (byte (_ce .HtPS ()));if _fcd !=nil {return _fcd ;};_cc =int32 (_aec );_cf =32;_gf =_ce .HtLow ()-1;_fc =append (_fc ,NewCode (_cc ,_cf ,_gf ,true ));_aec ,_fcd =_ge .ReadBits (byte (_ce .HtPS ()));if _fcd !=nil {return _fcd ;};_cc =int32 (_aec );_cf =32;_gf =_ce .HtHigh ();_fc =append (_fc ,NewCode (_cc ,_cf ,_gf ,false ));if _ce .HtOOB ()==1{_aec ,_fcd =_ge .ReadBits (byte (_ce .HtPS ()));if _fcd !=nil {return _fcd ;};_cc =int32 (_aec );_fc =append (_fc ,NewCode (_cc ,-1,-1,false ));};if _fcd =_ce .InitTree (_fc );_fcd !=nil {return _fcd ;};return nil ;};type Node interface{Decode (_gcd _g .StreamReader )(int64 ,error );String ()string ;};type OutOfBandNode struct{};func (_dcc *InternalNode )String ()string {_cb :=&_ad .Builder {};_cb .WriteString ("\u000a");_dcc .pad (_cb );_cb .WriteString ("\u0030\u003a\u0020");_cb .WriteString (_dcc ._gg .String ()+"\u000a");_dcc .pad (_cb );_cb .WriteString ("\u0031\u003a\u0020");_cb .WriteString (_dcc ._ff .String ()+"\u000a");return _cb .String ();};func (_ba *EncodedTable )InitTree (codeTable []*Code )error {_baga (codeTable );for _ ,_aa :=range codeTable {if _bgf :=_ba ._ca .append (_aa );_bgf !=nil {return _bgf ;};};return nil ;};type InternalNode struct{_cg int32 ;_gg Node ;_ff Node ;};func (_bag *FixedSizeTable )String ()string {return _bag ._bc .String ()+"\u000a"};var _ Tabler =&EncodedTable {};func (_gd *Code )String ()string {var _eag string ;if _gd ._cea !=-1{_eag =_ded (_gd ._cea ,_gd ._cad );}else {_eag ="\u003f";};return _e .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_eag ,_gd ._cad ,_gd ._ac ,_gd ._eec );};type EncodedTable struct{BasicTabler ;_ca *InternalNode ;};var _bfa =make ([]Tabler ,len (_aee ));type FixedSizeTable struct{_bc *InternalNode };func (_ebg *InternalNode )Decode (r _g .StreamReader )(int64 ,error ){_dbf ,_fae :=r .ReadBit ();if _fae !=nil {return 0,_fae ;};if _dbf ==0{return _ebg ._gg .Decode (r );};return _ebg ._ff .Decode (r );};var _ Node =&InternalNode {};func (_agb *StandardTable )InitTree (codeTable []*Code )error {_baga (codeTable );for _ ,_dg :=range codeTable {if _gbg :=_agb ._bab .append (_dg );_gbg !=nil {return _gbg ;};};return nil ;};func (_fcc *ValueNode )Decode (r _g .StreamReader )(int64 ,error ){_fd ,_ef :=r .ReadBits (byte (_fcc ._feb ));if _ef !=nil {return 0,_ef ;};if _fcc ._ged {_fd =-_fd ;};return int64 (_fcc ._ag )+int64 (_fd ),nil ;};func _ddc (_cegd *Code )*ValueNode {return &ValueNode {_feb :_cegd ._ac ,_ag :_cegd ._eec ,_ged :_cegd ._gca };};func (_da *FixedSizeTable )InitTree (codeTable []*Code )error {_baga (codeTable );for _ ,_de :=range codeTable {_baf :=_da ._bc .append (_de );if _baf !=nil {return _baf ;};};return nil ;};func _db (_dd *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_bae *InternalNode )pad (_ccb *_ad .Builder ){for _cegg :=int32 (0);_cegg < _bae ._cg ;_cegg ++{_ccb .WriteString ("\u0020\u0020\u0020");};};func (_gb *EncodedTable )RootNode ()*InternalNode {return _gb ._ca };type ValueNode struct{_feb int32 ;_ag int32 ;_ged bool ;};func (_ae *EncodedTable )String ()string {return _ae ._ca .String ()+"\u000a"};var _ Node =&OutOfBandNode {};var _aee =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func _cd (_eaf [][]int32 )(*StandardTable ,error ){var _fdb []*Code ;for _ead :=0;_ead < len (_eaf );_ead ++{_ccfg :=_eaf [_ead ][0];_dab :=_eaf [_ead ][1];_df :=_eaf [_ead ][2];var _fb bool ;if len (_eaf [_ead ])> 3{_fb =true ;};_fdb =append (_fdb ,NewCode (_ccfg ,_dab ,_df ,_fb ));};_gga :=&StandardTable {_bab :_ea (0)};if _dcca :=_gga .InitTree (_fdb );_dcca !=nil {return nil ,_dcca ;};return _gga ,nil ;};func (_fa *ValueNode )String ()string {return _e .Sprintf ("\u0025\u0064\u002f%\u0064",_fa ._feb ,_fa ._ag );};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bfa ){return nil ,_f .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_dga :=_bfa [number -1];if _dga ==nil {var _dgg error ;_dga ,_dgg =_cd (_aee [number -1]);if _dgg !=nil {return nil ,_dgg ;};_bfa [number -1]=_dga ;};return _dga ,nil ;};func (_b *EncodedTable )Decode (r _g .StreamReader )(int64 ,error ){return _b ._ca .Decode (r )};func _ded (_bgd ,_beb int32 )string {var _aeb int32 ;_gdf :=make ([]rune ,_beb );for _dfc :=int32 (1);_dfc <=_beb ;_dfc ++{_aeb =_bgd >>uint (_beb -_dfc )&1;if _aeb !=0{_gdf [_dfc -1]='1';}else {_gdf [_dfc -1]='0';};};return string (_gdf );};func _baga (_abb []*Code ){var _aac int32 ;for _ ,_acf :=range _abb {_aac =_fdf (_aac ,_acf ._cad );};_babf :=make ([]int32 ,_aac +1);for _ ,_fbc :=range _abb {_babf [_fbc ._cad ]++;};var _eagg int32 ;_daa :=make ([]int32 ,len (_babf )+1);_babf [0]=0;for _eba :=int32 (1);_eba <=int32 (len (_babf ));_eba ++{_daa [_eba ]=(_daa [_eba -1]+(_babf [_eba -1]))<<1;_eagg =_daa [_eba ];for _ ,_af :=range _abb {if _af ._cad ==_eba {_af ._cea =_eagg ;_eagg ++;};};};};func (_dcg *StandardTable )RootNode ()*InternalNode {return _dcg ._bab };type StandardTable struct{_bab *InternalNode };func (_fg *StandardTable )Decode (r _g .StreamReader )(int64 ,error ){return _fg ._bab .Decode (r )};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_cad :prefixLength ,_ac :rangeLength ,_eec :rangeLow ,_gca :isLowerRange ,_cea :-1};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_aaf :=&FixedSizeTable {_bc :&InternalNode {}};if _gc :=_aaf .InitTree (codeTable );_gc !=nil {return nil ,_gc ;};return _aaf ,nil ;};func (_ab *OutOfBandNode )Decode (r _g .StreamReader )(int64 ,error ){return 0,_a .ErrOOB };func (_fe *FixedSizeTable )RootNode ()*InternalNode {return _fe ._bc };func _ea (_febc int32 )*InternalNode {return &InternalNode {_cg :_febc }};func _fdf (_bce ,_cca int32 )int32 {if _bce > _cca {return _bce ;};return _cca ;};