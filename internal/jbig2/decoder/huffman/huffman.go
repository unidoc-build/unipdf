//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_bg "errors";_eee "fmt";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_bf "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_g "math";_ee "strings";);var _ Node =&ValueNode {};func (_bb *FixedSizeTable )InitTree (codeTable []*Code )error {_ddg (codeTable );
for _ ,_fc :=range codeTable {_gb :=_bb ._ac .append (_fc );if _gb !=nil {return _gb ;};};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ae :prefixLength ,_eb :rangeLength ,_ddc :rangeLow ,_cga :isLowerRange ,_agb :-1};
};var _ Node =&InternalNode {};type StandardTable struct{_egf *InternalNode };func (_dg *EncodedTable )String ()string {return _dg ._bd .String ()+"\u000a"};var _fef =make ([]Tabler ,len (_dbe ));func (_eec *EncodedTable )Decode (r _b .StreamReader )(int64 ,error ){return _eec ._bd .Decode (r )};
func (_gce *OutOfBandNode )Decode (r _b .StreamReader )(int64 ,error ){return 0,_bf .ErrOOB };func _gab (_acd ,_fcg int32 )int32 {if _acd > _fcg {return _acd ;};return _fcg ;};func _ecf (_gbg ,_egfe int32 )string {var _aea int32 ;_bfc :=make ([]rune ,_egfe );
for _egd :=int32 (1);_egd <=_egfe ;_egd ++{_aea =_gbg >>uint (_egfe -_egd )&1;if _aea !=0{_bfc [_egd -1]='1';}else {_bfc [_egd -1]='0';};};return string (_bfc );};var _ Node =&OutOfBandNode {};type Code struct{_ae int32 ;_eb int32 ;_ddc int32 ;_cga bool ;
_agb int32 ;};func _ecb (_ag *Code )*ValueNode {return &ValueNode {_fd :_ag ._eb ,_fb :_ag ._ddc ,_faa :_ag ._cga }};func _ddg (_df []*Code ){var _gae int32 ;for _ ,_cbf :=range _df {_gae =_gab (_gae ,_cbf ._ae );};_ad :=make ([]int32 ,_gae +1);for _ ,_agf :=range _df {_ad [_agf ._ae ]++;
};var _ge int32 ;_gca :=make ([]int32 ,len (_ad )+1);_ad [0]=0;for _gee :=int32 (1);_gee <=int32 (len (_ad ));_gee ++{_gca [_gee ]=(_gca [_gee -1]+(_ad [_gee -1]))<<1;_ge =_gca [_gee ];for _ ,_baa :=range _df {if _baa ._ae ==_gee {_baa ._agb =_ge ;_ge ++;
};};};};func (_edc *StandardTable )Decode (r _b .StreamReader )(int64 ,error ){return _edc ._egf .Decode (r )};func (_aa *InternalNode )String ()string {_agg :=&_ee .Builder {};_agg .WriteString ("\u000a");_aa .pad (_agg );_agg .WriteString ("\u0030\u003a\u0020");
_agg .WriteString (_aa ._ef .String ()+"\u000a");_aa .pad (_agg );_agg .WriteString ("\u0031\u003a\u0020");_agg .WriteString (_aa ._af .String ()+"\u000a");return _agg .String ();};type FixedSizeTable struct{_ac *InternalNode };func (_dc *ValueNode )String ()string {return _eee .Sprintf ("\u0025\u0064\u002f%\u0064",_dc ._fd ,_dc ._fb );
};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_f :=&EncodedTable {_bd :&InternalNode {},BasicTabler :table };if _db :=_f .parseTable ();_db !=nil {return nil ,_db ;};return _f ,nil ;};func (_gdg *ValueNode )Decode (r _b .StreamReader )(int64 ,error ){_cf ,_gdc :=r .ReadBits (byte (_gdg ._fd ));
if _gdc !=nil {return 0,_gdc ;};if _gdg ._faa {_cf =-_cf ;};return int64 (_gdg ._fb )+int64 (_cf ),nil ;};var _ Tabler =&EncodedTable {};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fef ){return nil ,_bg .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_cbd :=_fef [number -1];if _cbd ==nil {var _efb error ;_cbd ,_efb =_fgd (_dbe [number -1]);if _efb !=nil {return nil ,_efb ;};_fef [number -1]=_cbd ;};return _cbd ,nil ;};func (_bc *EncodedTable )RootNode ()*InternalNode {return _bc ._bd };func _aggf (_bab int32 )*InternalNode {return &InternalNode {_cb :_bab }};
type Node interface{Decode (_fg _b .StreamReader )(int64 ,error );String ()string ;};type Tabler interface{Decode (_aca _b .StreamReader )(int64 ,error );InitTree (_cfa []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_eda *FixedSizeTable )String ()string {return _eda ._ac .String ()+"\u000a"};
func (_dca *StandardTable )InitTree (codeTable []*Code )error {_ddg (codeTable );for _ ,_gda :=range codeTable {if _dd :=_dca ._egf .append (_gda );_dd !=nil {return _dd ;};};return nil ;};var _dbe =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_b .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_ff *FixedSizeTable )Decode (r _b .StreamReader )(int64 ,error ){return _ff ._ac .Decode (r )};type InternalNode struct{_cb int32 ;
_ef Node ;_af Node ;};func (_cbeg *StandardTable )String ()string {return _cbeg ._egf .String ()+"\u000a"};func (_fca *StandardTable )RootNode ()*InternalNode {return _fca ._egf };func (_bgef *InternalNode )Decode (r _b .StreamReader )(int64 ,error ){_be ,_bfg :=r .ReadBit ();
if _bfg !=nil {return 0,_bfg ;};if _be ==0{return _bgef ._ef .Decode (r );};return _bgef ._af .Decode (r );};func _fgd (_bgf [][]int32 )(*StandardTable ,error ){var _gbc []*Code ;for _aag :=0;_aag < len (_bgf );_aag ++{_bdg :=_bgf [_aag ][0];_bdd :=_bgf [_aag ][1];
_aff :=_bgf [_aag ][2];var _bee bool ;if len (_bgf [_aag ])> 3{_bee =true ;};_gbc =append (_gbc ,NewCode (_bdg ,_bdd ,_aff ,_bee ));};_egb :=&StandardTable {_egf :_aggf (0)};if _ecc :=_egb .InitTree (_gbc );_ecc !=nil {return nil ,_ecc ;};return _egb ,nil ;
};type ValueNode struct{_fd int32 ;_fb int32 ;_faa bool ;};func (_ea *InternalNode )pad (_bcc *_ee .Builder ){for _cgd :=int32 (0);_cgd < _ea ._cb ;_cgd ++{_bcc .WriteString ("\u0020\u0020\u0020");};};type EncodedTable struct{BasicTabler ;_bd *InternalNode ;
};func _eecg (_ba *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_bfb *FixedSizeTable )RootNode ()*InternalNode {return _bfb ._ac };func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_gd :=&FixedSizeTable {_ac :&InternalNode {}};
if _ga :=_gd .InitTree (codeTable );_ga !=nil {return nil ,_ga ;};return _gd ,nil ;};func (_ca *OutOfBandNode )String ()string {return _eee .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_g .MaxInt64 ));};func (_def *EncodedTable )parseTable ()error {var (_c []*Code ;
_fa ,_dge ,_dgb int32 ;_a uint64 ;_cc error ;);_bfa :=_def .StreamReader ();_gg :=_def .HtLow ();for _gg < _def .HtHigh (){_a ,_cc =_bfa .ReadBits (byte (_def .HtPS ()));if _cc !=nil {return _cc ;};_fa =int32 (_a );_a ,_cc =_bfa .ReadBits (byte (_def .HtRS ()));
if _cc !=nil {return _cc ;};_dge =int32 (_a );_c =append (_c ,NewCode (_fa ,_dge ,_dgb ,false ));_gg +=1<<uint (_dge );};_a ,_cc =_bfa .ReadBits (byte (_def .HtPS ()));if _cc !=nil {return _cc ;};_fa =int32 (_a );_dge =32;_dgb =_def .HtLow ()-1;_c =append (_c ,NewCode (_fa ,_dge ,_dgb ,true ));
_a ,_cc =_bfa .ReadBits (byte (_def .HtPS ()));if _cc !=nil {return _cc ;};_fa =int32 (_a );_dge =32;_dgb =_def .HtHigh ();_c =append (_c ,NewCode (_fa ,_dge ,_dgb ,false ));if _def .HtOOB ()==1{_a ,_cc =_bfa .ReadBits (byte (_def .HtPS ()));if _cc !=nil {return _cc ;
};_fa =int32 (_a );_c =append (_c ,NewCode (_fa ,-1,-1,false ));};if _cc =_def .InitTree (_c );_cc !=nil {return _cc ;};return nil ;};type OutOfBandNode struct{};func (_aae *Code )String ()string {var _fcc string ;if _aae ._agb !=-1{_fcc =_ecf (_aae ._agb ,_aae ._ae );
}else {_fcc ="\u003f";};return _eee .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_fcc ,_aae ._ae ,_aae ._eb ,_aae ._ddc );};func (_gc *EncodedTable )InitTree (codeTable []*Code )error {_ddg (codeTable );for _ ,_eg :=range codeTable {if _de :=_gc ._bd .append (_eg );
_de !=nil {return _de ;};};return nil ;};func (_fac *InternalNode )append (_cg *Code )(_cbe error ){if _cg ._ae ==0{return nil ;};_fcb :=_cg ._ae -1-_fac ._cb ;if _fcb < 0{return _bg .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_ccf :=(_cg ._agb >>uint (_fcb ))&0x1;if _fcb ==0{if _cg ._eb ==-1{if _ccf ==1{if _fac ._af !=nil {return _eee .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cg );
};_fac ._af =_eecg (_cg );}else {if _fac ._ef !=nil {return _eee .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cg );};_fac ._ef =_eecg (_cg );};}else {if _ccf ==1{if _fac ._af !=nil {return _eee .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cg );
};_fac ._af =_ecb (_cg );}else {if _fac ._ef !=nil {return _eee .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cg );
};_fac ._ef =_ecb (_cg );};};}else {if _ccf ==1{if _fac ._af ==nil {_fac ._af =_aggf (_fac ._cb +1);};if _cbe =_fac ._af .(*InternalNode ).append (_cg );_cbe !=nil {return _cbe ;};}else {if _fac ._ef ==nil {_fac ._ef =_aggf (_fac ._cb +1);};if _cbe =_fac ._ef .(*InternalNode ).append (_cg );
_cbe !=nil {return _cbe ;};};};return nil ;};