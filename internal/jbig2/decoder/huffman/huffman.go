//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ee "errors";_gd "fmt";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_d "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_g "math";_b "strings";);func (_edc *InternalNode )String ()string {_edcb :=&_b .Builder {};_edcb .WriteString ("\u000a");_edc .pad (_edcb );_edcb .WriteString ("\u0030\u003a\u0020");_edcb .WriteString (_edc ._bd .String ()+"\u000a");_edc .pad (_edcb );_edcb .WriteString ("\u0031\u003a\u0020");_edcb .WriteString (_edc ._gb .String ()+"\u000a");return _edcb .String ();};func (_ac *EncodedTable )parseTable ()error {var (_fb []*Code ;_ad ,_ag ,_dd int32 ;_ed uint64 ;_gag error ;);_eg :=_ac .StreamReader ();_dg :=_ac .HtLow ();for _dg < _ac .HtHigh (){_ed ,_gag =_eg .ReadBits (byte (_ac .HtPS ()));if _gag !=nil {return _gag ;};_ad =int32 (_ed );_ed ,_gag =_eg .ReadBits (byte (_ac .HtRS ()));if _gag !=nil {return _gag ;};_ag =int32 (_ed );_fb =append (_fb ,NewCode (_ad ,_ag ,_dd ,false ));_dg +=1<<uint (_ag );};_ed ,_gag =_eg .ReadBits (byte (_ac .HtPS ()));if _gag !=nil {return _gag ;};_ad =int32 (_ed );_ag =32;_dd =_ac .HtLow ()-1;_fb =append (_fb ,NewCode (_ad ,_ag ,_dd ,true ));_ed ,_gag =_eg .ReadBits (byte (_ac .HtPS ()));if _gag !=nil {return _gag ;};_ad =int32 (_ed );_ag =32;_dd =_ac .HtHigh ();_fb =append (_fb ,NewCode (_ad ,_ag ,_dd ,false ));if _ac .HtOOB ()==1{_ed ,_gag =_eg .ReadBits (byte (_ac .HtPS ()));if _gag !=nil {return _gag ;};_ad =int32 (_ed );_fb =append (_fb ,NewCode (_ad ,-1,-1,false ));};if _gag =_ac .InitTree (_fb );_gag !=nil {return _gag ;};return nil ;};type StandardTable struct{_gg *InternalNode };func _bfd (_dcb ,_ce int32 )int32 {if _dcb > _ce {return _dcb ;};return _ce ;};func (_fga *StandardTable )RootNode ()*InternalNode {return _fga ._gg };type Code struct{_beg int32 ;_adc int32 ;_ffg int32 ;_dce bool ;_dge int32 ;};func _gdd (_gbc []*Code ){var _bdd int32 ;for _ ,_ccg :=range _gbc {_bdd =_bfd (_bdd ,_ccg ._beg );};_cdf :=make ([]int32 ,_bdd +1);for _ ,_dgb :=range _gbc {_cdf [_dgb ._beg ]++;};var _ccb int32 ;_dfg :=make ([]int32 ,len (_cdf )+1);_cdf [0]=0;for _af :=int32 (1);_af <=int32 (len (_cdf ));_af ++{_dfg [_af ]=(_dfg [_af -1]+(_cdf [_af -1]))<<1;_ccb =_dfg [_af ];for _ ,_adfa :=range _gbc {if _adfa ._beg ==_af {_adfa ._dge =_ccb ;_ccb ++;};};};};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_beg :prefixLength ,_adc :rangeLength ,_ffg :rangeLow ,_dce :isLowerRange ,_dge :-1};};func _fca (_bba ,_ccc int32 )string {var _eea int32 ;_aee :=make ([]rune ,_ccc );for _dda :=int32 (1);_dda <=_ccc ;_dda ++{_eea =_bba >>uint (_ccc -_dda )&1;if _eea !=0{_aee [_dda -1]='1';}else {_aee [_dda -1]='0';};};return string (_aee );};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_dcc :=&FixedSizeTable {_ega :&InternalNode {}};if _bec :=_dcc .InitTree (codeTable );_bec !=nil {return nil ,_bec ;};return _dcc ,nil ;};var _ Node =&InternalNode {};var _ Node =&ValueNode {};func (_fg *InternalNode )append (_bgf *Code )(_cf error ){if _bgf ._beg ==0{return nil ;};_cfg :=_bgf ._beg -1-_fg ._ba ;if _cfg < 0{return _ee .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_eb :=(_bgf ._dge >>uint (_cfg ))&0x1;if _cfg ==0{if _bgf ._adc ==-1{if _eb ==1{if _fg ._gb !=nil {return _gd .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bgf );};_fg ._gb =_ea (_bgf );}else {if _fg ._bd !=nil {return _gd .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bgf );};_fg ._bd =_ea (_bgf );};}else {if _eb ==1{if _fg ._gb !=nil {return _gd .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bgf );};_fg ._gb =_bff (_bgf );}else {if _fg ._bd !=nil {return _gd .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bgf );};_fg ._bd =_bff (_bgf );};};}else {if _eb ==1{if _fg ._gb ==nil {_fg ._gb =_aa (_fg ._ba +1);};if _cf =_fg ._gb .(*InternalNode ).append (_bgf );_cf !=nil {return _cf ;};}else {if _fg ._bd ==nil {_fg ._bd =_aa (_fg ._ba +1);};if _cf =_fg ._bd .(*InternalNode ).append (_bgf );_cf !=nil {return _cf ;};};};return nil ;};func (_acf *InternalNode )Decode (r _e .StreamReader )(int64 ,error ){_acc ,_gaa :=r .ReadBit ();if _gaa !=nil {return 0,_gaa ;};if _acc ==0{return _acf ._bd .Decode (r );};return _acf ._gb .Decode (r );};var _ Tabler =&EncodedTable {};func (_df *InternalNode )pad (_age *_b .Builder ){for _aga :=int32 (0);_aga < _df ._ba ;_aga ++{_age .WriteString ("\u0020\u0020\u0020");};};func (_fa *EncodedTable )Decode (r _e .StreamReader )(int64 ,error ){return _fa ._ec .Decode (r )};func (_bf *EncodedTable )InitTree (codeTable []*Code )error {_gdd (codeTable );for _ ,_fd :=range codeTable {if _c :=_bf ._ec .append (_fd );_c !=nil {return _c ;};};return nil ;};func (_gdf *EncodedTable )String ()string {return _gdf ._ec .String ()+"\u000a"};func (_bee *FixedSizeTable )RootNode ()*InternalNode {return _bee ._ega };func (_beeb *OutOfBandNode )Decode (r _e .StreamReader )(int64 ,error ){return 0,_d .ErrOOB };func _bff (_dgg *Code )*ValueNode {return &ValueNode {_fdf :_dgg ._adc ,_adf :_dgg ._ffg ,_gc :_dgg ._dce }};type FixedSizeTable struct{_ega *InternalNode };func (_cd *StandardTable )InitTree (codeTable []*Code )error {_gdd (codeTable );for _ ,_agb :=range codeTable {if _adb :=_cd ._gg .append (_agb );_adb !=nil {return _adb ;};};return nil ;};type EncodedTable struct{BasicTabler ;_ec *InternalNode ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_dfd ){return nil ,_ee .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_cbe :=_dfd [number -1];if _cbe ==nil {var _dbc error ;_cbe ,_dbc =_fdg (_edf [number -1]);if _dbc !=nil {return nil ,_dbc ;};_dfd [number -1]=_cbe ;};return _cbe ,nil ;};func (_eda *ValueNode )String ()string {return _gd .Sprintf ("\u0025\u0064\u002f%\u0064",_eda ._fdf ,_eda ._adf );};func (_ab *Code )String ()string {var _eece string ;if _ab ._dge !=-1{_eece =_fca (_ab ._dge ,_ab ._beg );}else {_eece ="\u003f";};return _gd .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_eece ,_ab ._beg ,_ab ._adc ,_ab ._ffg );};type ValueNode struct{_fdf int32 ;_adf int32 ;_gc bool ;};var _edf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func _ea (_cc *Code )*OutOfBandNode {return &OutOfBandNode {}};type Node interface{Decode (_ddf _e .StreamReader )(int64 ,error );String ()string ;};func (_a *EncodedTable )RootNode ()*InternalNode {return _a ._ec };type Tabler interface{Decode (_gcb _e .StreamReader )(int64 ,error );InitTree (_fce []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func _fdg (_fed [][]int32 )(*StandardTable ,error ){var _bbg []*Code ;for _fag :=0;_fag < len (_fed );_fag ++{_baa :=_fed [_fag ][0];_ddef :=_fed [_fag ][1];_bdb :=_fed [_fag ][2];var _eeb bool ;if len (_fed [_fag ])> 3{_eeb =true ;};_bbg =append (_bbg ,NewCode (_baa ,_ddef ,_bdb ,_eeb ));};_ggf :=&StandardTable {_gg :_aa (0)};if _de :=_ggf .InitTree (_bbg );_de !=nil {return nil ,_de ;};return _ggf ,nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_e .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type OutOfBandNode struct{};func (_ae *ValueNode )Decode (r _e .StreamReader )(int64 ,error ){_dde ,_bcf :=r .ReadBits (byte (_ae ._fdf ));if _bcf !=nil {return 0,_bcf ;};if _ae ._gc {_dde =-_dde ;};return int64 (_ae ._adf )+int64 (_dde ),nil ;};func (_bb *FixedSizeTable )String ()string {return _bb ._ega .String ()+"\u000a"};func (_bc *OutOfBandNode )String ()string {return _gd .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_g .MaxInt64 ));};func (_cg *StandardTable )String ()string {return _cg ._gg .String ()+"\u000a"};var _ Node =&OutOfBandNode {};func (_cb *StandardTable )Decode (r _e .StreamReader )(int64 ,error ){return _cb ._gg .Decode (r )};func (_db *FixedSizeTable )InitTree (codeTable []*Code )error {_gdd (codeTable );for _ ,_bg :=range codeTable {_bfe :=_db ._ega .append (_bg );if _bfe !=nil {return _bfe ;};};return nil ;};func _aa (_fe int32 )*InternalNode {return &InternalNode {_ba :_fe }};func (_ef *FixedSizeTable )Decode (r _e .StreamReader )(int64 ,error ){return _ef ._ega .Decode (r )};type InternalNode struct{_ba int32 ;_bd Node ;_gb Node ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_be :=&EncodedTable {_ec :&InternalNode {},BasicTabler :table };if _ga :=_be .parseTable ();_ga !=nil {return nil ,_ga ;};return _be ,nil ;};var _dfd =make ([]Tabler ,len (_edf ));