//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_e "errors";_c "fmt";_ge "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_fd "math";_a "strings";);func (_cad *Code )String ()string {var _aed string ;if _cad ._gbga !=-1{_aed =_gag (_cad ._gbga ,_cad ._cfc );}else {_aed ="\u003f";};return _c .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_aed ,_cad ._cfc ,_cad ._gbd ,_cad ._ebf );};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_ab ){return nil ,_e .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_bec :=_ab [number -1];if _bec ==nil {var _db error ;_bec ,_db =_bc (_dfg [number -1]);if _db !=nil {return nil ,_db ;};_ab [number -1]=_bec ;};return _bec ,nil ;};var _ab =make ([]Tabler ,len (_dfg ));var _ Tabler =&EncodedTable {};func (_gc *FixedSizeTable )InitTree (codeTable []*Code )error {_gde (codeTable );for _ ,_bbb :=range codeTable {_ef :=_gc ._ac .append (_bbb );if _ef !=nil {return _ef ;};};return nil ;};var _ Node =&ValueNode {};type FixedSizeTable struct{_ac *InternalNode };func _bd (_eab ,_ebd int32 )int32 {if _eab > _ebd {return _eab ;};return _ebd ;};func (_gd *InternalNode )String ()string {_deg :=&_a .Builder {};_deg .WriteString ("\u000a");_gd .pad (_deg );_deg .WriteString ("\u0030\u003a\u0020");_deg .WriteString (_gd ._gee .String ()+"\u000a");_gd .pad (_deg );_deg .WriteString ("\u0031\u003a\u0020");_deg .WriteString (_gd ._gef .String ()+"\u000a");return _deg .String ();};func _gag (_dff ,_bf int32 )string {var _gfe int32 ;_ege :=make ([]rune ,_bf );for _gce :=int32 (1);_gce <=_bf ;_gce ++{_gfe =_dff >>uint (_bf -_gce )&1;if _gfe !=0{_ege [_gce -1]='1';}else {_ege [_gce -1]='0';};};return string (_ege );};func (_gbb *EncodedTable )RootNode ()*InternalNode {return _gbb ._fdb };type Node interface{Decode (_ecg _ge .StreamReader )(int64 ,error );String ()string ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_fg :=&EncodedTable {_fdb :&InternalNode {},BasicTabler :table };if _cf :=_fg .parseTable ();_cf !=nil {return nil ,_cf ;};return _fg ,nil ;};func (_ad *OutOfBandNode )String ()string {return _c .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_fd .MaxInt64 ));};type OutOfBandNode struct{};func (_dfd *ValueNode )Decode (r _ge .StreamReader )(int64 ,error ){_cgc ,_aabf :=r .ReadBits (byte (_dfd ._ea ));if _aabf !=nil {return 0,_aabf ;};if _dfd ._cca {_cgc =-_cgc ;};return int64 (_dfd ._bag )+int64 (_cgc ),nil ;};type EncodedTable struct{BasicTabler ;_fdb *InternalNode ;};var _dfg =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func (_gf *ValueNode )String ()string {return _c .Sprintf ("\u0025\u0064\u002f%\u0064",_gf ._ea ,_gf ._bag );};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ee :=&FixedSizeTable {_ac :&InternalNode {}};if _cd :=_ee .InitTree (codeTable );_cd !=nil {return nil ,_cd ;};return _ee ,nil ;};type Code struct{_cfc int32 ;_gbd int32 ;_ebf int32 ;_acb bool ;_gbga int32 ;};func _aabd (_bg *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_dg *FixedSizeTable )Decode (r _ge .StreamReader )(int64 ,error ){return _dg ._ac .Decode (r )};func (_bb *EncodedTable )String ()string {return _bb ._fdb .String ()+"\u000a"};func (_b *EncodedTable )InitTree (codeTable []*Code )error {_gde (codeTable );for _ ,_cc :=range codeTable {if _fge :=_b ._fdb .append (_cc );_fge !=nil {return _fge ;};};return nil ;};var _ Node =&InternalNode {};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_ge .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_cfc :prefixLength ,_gbd :rangeLength ,_ebf :rangeLow ,_acb :isLowerRange ,_gbga :-1};};func (_ca *StandardTable )RootNode ()*InternalNode {return _ca ._efa };func _gde (_cdg []*Code ){var _adf int32 ;for _ ,_gge :=range _cdg {_adf =_bd (_adf ,_gge ._cfc );};_acgb :=make ([]int32 ,_adf +1);for _ ,_daf :=range _cdg {_acgb [_daf ._cfc ]++;};var _dba int32 ;_bbe :=make ([]int32 ,len (_acgb )+1);_acgb [0]=0;for _fc :=int32 (1);_fc <=int32 (len (_acgb ));_fc ++{_bbe [_fc ]=(_bbe [_fc -1]+(_acgb [_fc -1]))<<1;_dba =_bbe [_fc ];for _ ,_efe :=range _cdg {if _efe ._cfc ==_fc {_efe ._gbga =_dba ;_dba ++;};};};};func (_ba *EncodedTable )parseTable ()error {var (_aab []*Code ;_ec ,_d ,_egg int32 ;_bab uint64 ;_dd error ;);_fde :=_ba .StreamReader ();_eggc :=_ba .HtLow ();for _eggc < _ba .HtHigh (){_bab ,_dd =_fde .ReadBits (byte (_ba .HtPS ()));if _dd !=nil {return _dd ;};_ec =int32 (_bab );_bab ,_dd =_fde .ReadBits (byte (_ba .HtRS ()));if _dd !=nil {return _dd ;};_d =int32 (_bab );_aab =append (_aab ,NewCode (_ec ,_d ,_egg ,false ));_eggc +=1<<uint (_d );};_bab ,_dd =_fde .ReadBits (byte (_ba .HtPS ()));if _dd !=nil {return _dd ;};_ec =int32 (_bab );_d =32;_egg =_ba .HtLow ()-1;_aab =append (_aab ,NewCode (_ec ,_d ,_egg ,true ));_bab ,_dd =_fde .ReadBits (byte (_ba .HtPS ()));if _dd !=nil {return _dd ;};_ec =int32 (_bab );_d =32;_egg =_ba .HtHigh ();_aab =append (_aab ,NewCode (_ec ,_d ,_egg ,false ));if _ba .HtOOB ()==1{_bab ,_dd =_fde .ReadBits (byte (_ba .HtPS ()));if _dd !=nil {return _dd ;};_ec =int32 (_bab );_aab =append (_aab ,NewCode (_ec ,-1,-1,false ));};if _dd =_ba .InitTree (_aab );_dd !=nil {return _dd ;};return nil ;};func (_dcc *InternalNode )pad (_dee *_a .Builder ){for _gg :=int32 (0);_gg < _dcc ._ae ;_gg ++{_dee .WriteString ("\u0020\u0020\u0020");};};type InternalNode struct{_ae int32 ;_gee Node ;_gef Node ;};func (_fe *OutOfBandNode )Decode (r _ge .StreamReader )(int64 ,error ){return 0,_f .ErrOOB };func (_eeg *FixedSizeTable )RootNode ()*InternalNode {return _eeg ._ac };func _bbd (_de *Code )*ValueNode {return &ValueNode {_ea :_de ._gbd ,_bag :_de ._ebf ,_cca :_de ._acb }};func (_be *StandardTable )String ()string {return _be ._efa .String ()+"\u000a"};func _bc (_ce [][]int32 )(*StandardTable ,error ){var _cfb []*Code ;for _fgd :=0;_fgd < len (_ce );_fgd ++{_aaa :=_ce [_fgd ][0];_dcb :=_ce [_fgd ][1];_da :=_ce [_fgd ][2];var _cfd bool ;if len (_ce [_fgd ])> 3{_cfd =true ;};_cfb =append (_cfb ,NewCode (_aaa ,_dcb ,_da ,_cfd ));};_cfg :=&StandardTable {_efa :_fb (0)};if _acaa :=_cfg .InitTree (_cfb );_acaa !=nil {return nil ,_acaa ;};return _cfg ,nil ;};func (_fba *StandardTable )Decode (r _ge .StreamReader )(int64 ,error ){return _fba ._efa .Decode (r )};func (_eb *StandardTable )InitTree (codeTable []*Code )error {_gde (codeTable );for _ ,_acg :=range codeTable {if _ag :=_eb ._efa .append (_acg );_ag !=nil {return _ag ;};};return nil ;};type StandardTable struct{_efa *InternalNode };func _fb (_aag int32 )*InternalNode {return &InternalNode {_ae :_aag }};func (_aa *EncodedTable )Decode (r _ge .StreamReader )(int64 ,error ){return _aa ._fdb .Decode (r )};func (_gbe *InternalNode )append (_dfa *Code )(_gba error ){if _dfa ._cfc ==0{return nil ;};_dc :=_dfa ._cfc -1-_gbe ._ae ;if _dc < 0{return _e .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_fdbg :=(_dfa ._gbga >>uint (_dc ))&0x1;if _dc ==0{if _dfa ._gbd ==-1{if _fdbg ==1{if _gbe ._gef !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dfa );};_gbe ._gef =_aabd (_dfa );}else {if _gbe ._gee !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_dfa );};_gbe ._gee =_aabd (_dfa );};}else {if _fdbg ==1{if _gbe ._gef !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dfa );};_gbe ._gef =_bbd (_dfa );}else {if _gbe ._gee !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_dfa );};_gbe ._gee =_bbd (_dfa );};};}else {if _fdbg ==1{if _gbe ._gef ==nil {_gbe ._gef =_fb (_gbe ._ae +1);};if _gba =_gbe ._gef .(*InternalNode ).append (_dfa );_gba !=nil {return _gba ;};}else {if _gbe ._gee ==nil {_gbe ._gee =_fb (_gbe ._ae +1);};if _gba =_gbe ._gee .(*InternalNode ).append (_dfa );_gba !=nil {return _gba ;};};};return nil ;};type ValueNode struct{_ea int32 ;_bag int32 ;_cca bool ;};var _ Node =&OutOfBandNode {};func (_aca *InternalNode )Decode (r _ge .StreamReader )(int64 ,error ){_ed ,_gbg :=r .ReadBit ();if _gbg !=nil {return 0,_gbg ;};if _ed ==0{return _aca ._gee .Decode (r );};return _aca ._gef .Decode (r );};type Tabler interface{Decode (_af _ge .StreamReader )(int64 ,error );InitTree (_cb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_dde *FixedSizeTable )String ()string {return _dde ._ac .String ()+"\u000a"};