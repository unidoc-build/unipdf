//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_eg "errors";_a "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ed "math";_e "strings";);type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_c .Reader ;
HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};var _ Node =&OutOfBandNode {};func (_cfg *EncodedTable )InitTree (codeTable []*Code )error {_dd (codeTable );for _ ,_d :=range codeTable {if _f :=_cfg ._cf .append (_d );_f !=nil {return _f ;};};return nil ;
};func (_bf *FixedSizeTable )RootNode ()*InternalNode {return _bf ._ec };func _gaa (_gf ,_cff int32 )string {var _cac int32 ;_gda :=make ([]rune ,_cff );for _fee :=int32 (1);_fee <=_cff ;_fee ++{_cac =_gf >>uint (_cff -_fee )&1;if _cac !=0{_gda [_fee -1]='1';
}else {_gda [_fee -1]='0';};};return string (_gda );};func (_ag *EncodedTable )parseTable ()error {var (_af []*Code ;_fa ,_aad ,_fag int32 ;_ce uint64 ;_ad error ;);_fb :=_ag .StreamReader ();_bd :=_ag .HtLow ();for _bd < _ag .HtHigh (){_ce ,_ad =_fb .ReadBits (byte (_ag .HtPS ()));
if _ad !=nil {return _ad ;};_fa =int32 (_ce );_ce ,_ad =_fb .ReadBits (byte (_ag .HtRS ()));if _ad !=nil {return _ad ;};_aad =int32 (_ce );_af =append (_af ,NewCode (_fa ,_aad ,_fag ,false ));_bd +=1<<uint (_aad );};_ce ,_ad =_fb .ReadBits (byte (_ag .HtPS ()));
if _ad !=nil {return _ad ;};_fa =int32 (_ce );_aad =32;_fag =_ag .HtLow ()-1;_af =append (_af ,NewCode (_fa ,_aad ,_fag ,true ));_ce ,_ad =_fb .ReadBits (byte (_ag .HtPS ()));if _ad !=nil {return _ad ;};_fa =int32 (_ce );_aad =32;_fag =_ag .HtHigh ();_af =append (_af ,NewCode (_fa ,_aad ,_fag ,false ));
if _ag .HtOOB ()==1{_ce ,_ad =_fb .ReadBits (byte (_ag .HtPS ()));if _ad !=nil {return _ad ;};_fa =int32 (_ce );_af =append (_af ,NewCode (_fa ,-1,-1,false ));};if _ad =_ag .InitTree (_af );_ad !=nil {return _ad ;};return nil ;};func (_ade *StandardTable )Decode (r *_c .Reader )(int64 ,error ){return _ade ._gbf .Decode (r )};
func (_dc *OutOfBandNode )Decode (r *_c .Reader )(int64 ,error ){return 0,_g .ErrOOB };func (_ef *FixedSizeTable )Decode (r *_c .Reader )(int64 ,error ){return _ef ._ec .Decode (r )};type InternalNode struct{_da int32 ;_cbf Node ;_bac Node ;};func (_bg *EncodedTable )String ()string {return _bg ._cf .String ()+"\u000a"};
type Code struct{_gc int32 ;_bab int32 ;_ecee int32 ;_de bool ;_bad int32 ;};func _abg (_fe *Code )*OutOfBandNode {return &OutOfBandNode {}};var _ Tabler =&EncodedTable {};func (_eb *StandardTable )InitTree (codeTable []*Code )error {_dd (codeTable );for _ ,_ac :=range codeTable {if _agc :=_eb ._gbf .append (_ac );
_agc !=nil {return _agc ;};};return nil ;};func (_fc *FixedSizeTable )String ()string {return _fc ._ec .String ()+"\u000a"};func _gab (_dgf int32 )*InternalNode {return &InternalNode {_da :_dgf }};func (_dg *ValueNode )String ()string {return _a .Sprintf ("\u0025\u0064\u002f%\u0064",_dg ._gb ,_dg ._ae );
};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bgbb ){return nil ,_eg .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_cc :=_bgbb [number -1];if _cc ==nil {var _dfg error ;
_cc ,_dfg =_be (_dcc [number -1]);if _dfg !=nil {return nil ,_dfg ;};_bgbb [number -1]=_cc ;};return _cc ,nil ;};type Tabler interface{Decode (_eef *_c .Reader )(int64 ,error );InitTree (_dbc []*Code )error ;String ()string ;RootNode ()*InternalNode ;};
func (_fac *InternalNode )String ()string {_geg :=&_e .Builder {};_geg .WriteString ("\u000a");_fac .pad (_geg );_geg .WriteString ("\u0030\u003a\u0020");_geg .WriteString (_fac ._cbf .String ()+"\u000a");_fac .pad (_geg );_geg .WriteString ("\u0031\u003a\u0020");
_geg .WriteString (_fac ._bac .String ()+"\u000a");return _geg .String ();};func (_dcf *ValueNode )Decode (r *_c .Reader )(int64 ,error ){_ge ,_db :=r .ReadBits (byte (_dcf ._gb ));if _db !=nil {return 0,_db ;};if _dcf ._ga {_ge =-_ge ;};return int64 (_dcf ._ae )+int64 (_ge ),nil ;
};func (_aa *EncodedTable )Decode (r *_c .Reader )(int64 ,error ){return _aa ._cf .Decode (r )};var _ Node =&InternalNode {};func (_gga *InternalNode )append (_gbd *Code )(_feb error ){if _gbd ._gc ==0{return nil ;};_fca :=_gbd ._gc -1-_gga ._da ;if _fca < 0{return _eg .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_ff :=(_gbd ._bad >>uint (_fca ))&0x1;if _fca ==0{if _gbd ._bab ==-1{if _ff ==1{if _gga ._bac !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gbd );
};_gga ._bac =_abg (_gbd );}else {if _gga ._cbf !=nil {return _a .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_gbd );};_gga ._cbf =_abg (_gbd );};}else {if _ff ==1{if _gga ._bac !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gbd );
};_gga ._bac =_bc (_gbd );}else {if _gga ._cbf !=nil {return _a .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_gbd );
};_gga ._cbf =_bc (_gbd );};};}else {if _ff ==1{if _gga ._bac ==nil {_gga ._bac =_gab (_gga ._da +1);};if _feb =_gga ._bac .(*InternalNode ).append (_gbd );_feb !=nil {return _feb ;};}else {if _gga ._cbf ==nil {_gga ._cbf =_gab (_gga ._da +1);};if _feb =_gga ._cbf .(*InternalNode ).append (_gbd );
_feb !=nil {return _feb ;};};};return nil ;};type Node interface{Decode (_ab *_c .Reader )(int64 ,error );String ()string ;};var _dcc =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func _bc (_cba *Code )*ValueNode {return &ValueNode {_gb :_cba ._bab ,_ae :_cba ._ecee ,_ga :_cba ._de }};type FixedSizeTable struct{_ec *InternalNode };func (_fga *Code )String ()string {var _cfe string ;if _fga ._bad !=-1{_cfe =_gaa (_fga ._bad ,_fga ._gc );
}else {_cfe ="\u003f";};return _a .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cfe ,_fga ._gc ,_fga ._bab ,_fga ._ecee );};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_ee :=&EncodedTable {_cf :&InternalNode {},BasicTabler :table };
if _cbd :=_ee .parseTable ();_cbd !=nil {return nil ,_cbd ;};return _ee ,nil ;};func (_gag *InternalNode )pad (_df *_e .Builder ){for _gde :=int32 (0);_gde < _gag ._da ;_gde ++{_df .WriteString ("\u0020\u0020\u0020");};};func (_daf *InternalNode )Decode (r *_c .Reader )(int64 ,error ){_ca ,_gea :=r .ReadBit ();
if _gea !=nil {return 0,_gea ;};if _ca ==0{return _daf ._cbf .Decode (r );};return _daf ._bac .Decode (r );};type ValueNode struct{_gb int32 ;_ae int32 ;_ga bool ;};func (_agd *FixedSizeTable )InitTree (codeTable []*Code )error {_dd (codeTable );for _ ,_fbg :=range codeTable {_eeg :=_agd ._ec .append (_fbg );
if _eeg !=nil {return _eeg ;};};return nil ;};func (_ba *EncodedTable )RootNode ()*InternalNode {return _ba ._cf };var _ Node =&ValueNode {};var _bgbb =make ([]Tabler ,len (_dcc ));func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_gc :prefixLength ,_bab :rangeLength ,_ecee :rangeLow ,_de :isLowerRange ,_bad :-1};
};func _be (_bgb [][]int32 )(*StandardTable ,error ){var _cg []*Code ;for _eea :=0;_eea < len (_bgb );_eea ++{_bgbe :=_bgb [_eea ][0];_gad :=_bgb [_eea ][1];_cag :=_bgb [_eea ][2];var _gba bool ;if len (_bgb [_eea ])> 3{_gba =true ;};_cg =append (_cg ,NewCode (_bgbe ,_gad ,_cag ,_gba ));
};_aff :=&StandardTable {_gbf :_gab (0)};if _fed :=_aff .InitTree (_cg );_fed !=nil {return nil ,_fed ;};return _aff ,nil ;};func _dd (_cga []*Code ){var _ebc int32 ;for _ ,_cfbe :=range _cga {_ebc =_edgg (_ebc ,_cfbe ._gc );};_dcfe :=make ([]int32 ,_ebc +1);
for _ ,_gead :=range _cga {_dcfe [_gead ._gc ]++;};var _fbe int32 ;_aab :=make ([]int32 ,len (_dcfe )+1);_dcfe [0]=0;for _eee :=int32 (1);_eee <=int32 (len (_dcfe ));_eee ++{_aab [_eee ]=(_aab [_eee -1]+(_dcfe [_eee -1]))<<1;_fbe =_aab [_eee ];for _ ,_fcd :=range _cga {if _fcd ._gc ==_eee {_fcd ._bad =_fbe ;
_fbe ++;};};};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_edg :=&FixedSizeTable {_ec :&InternalNode {}};if _ece :=_edg .InitTree (codeTable );_ece !=nil {return nil ,_ece ;};return _edg ,nil ;};type StandardTable struct{_gbf *InternalNode };
func (_bca *StandardTable )RootNode ()*InternalNode {return _bca ._gbf };func (_gd *OutOfBandNode )String ()string {return _a .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ed .MaxInt64 ));};func (_ea *StandardTable )String ()string {return _ea ._gbf .String ()+"\u000a"};
type OutOfBandNode struct{};func _edgg (_gdac ,_cbfd int32 )int32 {if _gdac > _cbfd {return _gdac ;};return _cbfd ;};type EncodedTable struct{BasicTabler ;_cf *InternalNode ;};