//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_e "fmt";_de "github.com/unidoc/unipdf/v3/common";_ge "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_g "io";_gd "strings";);func New (r _ge .StreamReader )(*Decoder ,error ){_ec :=&Decoder {_cfa :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};
if _a :=_ec .init ();_a !=nil {return nil ,_a ;};return _ec ,nil ;};type DecoderStats struct{_bbg int32 ;_bed int32 ;_ba []byte ;_ef []byte ;};func (_ggb *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ggb ._bf =1;var _da uint64 ;
for _da =0;_da < codeLen ;_da ++{stats .SetIndex (int32 (_ggb ._bf ));_ed ,_daf :=_ggb .DecodeBit (stats );if _daf !=nil {return 0,_daf ;};_ggb ._bf =(_ggb ._bf <<1)|int64 (_ed );};_aag :=_ggb ._bf -(1<<codeLen );return _aag ,nil ;};func (_bdb *DecoderStats )Overwrite (dNew *DecoderStats ){for _dee :=0;
_dee < len (_bdb ._ba );_dee ++{_bdb ._ba [_dee ]=dNew ._ba [_dee ];_bdb ._ef [_dee ]=dNew ._ef [_dee ];};};func (_cdg *DecoderStats )toggleMps (){_cdg ._ef [_cdg ._bbg ]^=1};func (_agb *DecoderStats )Reset (){for _ecc :=0;_ecc < len (_agb ._ba );_ecc ++{_agb ._ba [_ecc ]=0;
_agb ._ef [_ecc ]=0;};};func (_bfa *Decoder )init ()error {_bfa ._bg =_bfa ._cfa .StreamPosition ();_fg ,_ae :=_bfa ._cfa .ReadByte ();if _ae !=nil {_de .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ae );
return _ae ;};_bfa ._b =_fg ;_bfa ._f =uint64 (_fg )<<16;if _ae =_bfa .readByte ();_ae !=nil {return _ae ;};_bfa ._f <<=7;_bfa ._be -=7;_bfa ._fd =0x8000;_bfa ._cff ++;return nil ;};func (_fcc *Decoder )mpsExchange (_eg *DecoderStats ,_ece int32 )int {_gb :=_eg ._ef [_eg ._bbg ];
if _fcc ._fd < _cf [_ece ][0]{if _cf [_ece ][3]==1{_eg .toggleMps ();};_eg .setEntry (int (_cf [_ece ][2]));return int (1-_gb );};_eg .setEntry (int (_cf [_ece ][1]));return int (_gb );};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;
_cfa _ge .StreamReader ;_b uint8 ;_f uint64 ;_fd uint32 ;_bf int64 ;_be int32 ;_cff int32 ;_bg int64 ;};func (_gbd *DecoderStats )String ()string {_egc :=&_gd .Builder {};_egc .WriteString (_e .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_gbd ._ba )));
for _dc ,_aaa :=range _gbd ._ba {if _aaa !=0{_egc .WriteString (_e .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_dc ,_aaa ));};};return _egc .String ();};func (_gf *DecoderStats )Copy ()*DecoderStats {_ccd :=&DecoderStats {_bed :_gf ._bed ,_ba :make ([]byte ,_gf ._bed )};
for _bc :=0;_bc < len (_gf ._ba );_bc ++{_ccd ._ba [_bc ]=_gf ._ba [_bc ];};return _ccd ;};var (_cf =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_aef *DecoderStats )cx ()byte {return _aef ._ba [_aef ._bbg ]};func (_cfgf *DecoderStats )getMps ()byte {return _cfgf ._ef [_cfgf ._bbg ]};func (_af *Decoder )readByte ()error {if _af ._cfa .StreamPosition ()> _af ._bg {if _ ,_fcf :=_af ._cfa .Seek (-1,_g .SeekCurrent );
_fcf !=nil {return _fcf ;};};_ac ,_fde :=_af ._cfa .ReadByte ();if _fde !=nil {return _fde ;};_af ._b =_ac ;if _af ._b ==0xFF{_dd ,_df :=_af ._cfa .ReadByte ();if _df !=nil {return _df ;};if _dd > 0x8F{_af ._f +=0xFF00;_af ._be =8;if _ ,_ag :=_af ._cfa .Seek (-2,_g .SeekCurrent );
_ag !=nil {return _ag ;};}else {_af ._f +=uint64 (_dd )<<9;_af ._be =7;};}else {_ac ,_fde =_af ._cfa .ReadByte ();if _fde !=nil {return _fde ;};_af ._b =_ac ;_af ._f +=uint64 (_af ._b )<<8;_af ._be =8;};_af ._f &=0xFFFFFFFFFF;return nil ;};func (_dgf *DecoderStats )SetIndex (index int32 ){_dgf ._bbg =index };
func (_fbf *Decoder )lpsExchange (_dfb *DecoderStats ,_dbe int32 ,_aac uint32 )int {_cb :=_dfb .getMps ();if _fbf ._fd < _aac {_dfb .setEntry (int (_cf [_dbe ][1]));_fbf ._fd =_aac ;return int (_cb );};if _cf [_dbe ][3]==1{_dfb .toggleMps ();};_dfb .setEntry (int (_cf [_dbe ][2]));
_fbf ._fd =_aac ;return int (1-_cb );};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_bbg :index ,_bed :contextSize ,_ba :make ([]byte ,contextSize ),_ef :make ([]byte ,contextSize )};};func (_fec *Decoder )renormalize ()error {for {if _fec ._be ==0{if _ad :=_fec .readByte ();
_ad !=nil {return _ad ;};};_fec ._fd <<=1;_fec ._f <<=1;_fec ._be --;if (_fec ._fd &0x8000)!=0{break ;};};_fec ._f &=0xffffffff;return nil ;};func (_db *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_gg int ;_bgb =_cf [stats .cx ()][0];_fc =int32 (stats .cx ());
);defer func (){_db ._cff ++}();_db ._fd -=_bgb ;if (_db ._f >>16)< uint64 (_bgb ){_gg =_db .lpsExchange (stats ,_fc ,_bgb );if _aa :=_db .renormalize ();_aa !=nil {return 0,_aa ;};}else {_db ._f -=uint64 (_bgb )<<16;if (_db ._fd &0x8000)==0{_gg =_db .mpsExchange (stats ,_fc );
if _eb :=_db .renormalize ();_eb !=nil {return 0,_eb ;};}else {_gg =int (stats .getMps ());};};return _gg ,nil ;};func (_caf *Decoder )decodeIntBit (_dg *DecoderStats )(int ,error ){_dg .SetIndex (int32 (_caf ._bf ));_bd ,_ga :=_caf .DecodeBit (_dg );if _ga !=nil {_de .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_ga );
return _bd ,_ga ;};if _caf ._bf < 256{_caf ._bf =((_caf ._bf <<uint64 (1))|int64 (_bd ))&0x1ff;}else {_caf ._bf =(((_caf ._bf <<uint64 (1)|int64 (_bd ))&511)|256)&0x1ff;};return _bd ,nil ;};func (_cffc *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_bb ,_ab int32 ;
_fb ,_cd ,_cfe int ;_cc error ;);if stats ==nil {stats =NewStats (512,1);};_cffc ._bf =1;_cd ,_cc =_cffc .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};_fb ,_cc =_cffc .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fb ==1{_fb ,_cc =_cffc .decodeIntBit (stats );
if _cc !=nil {return 0,_cc ;};if _fb ==1{_fb ,_cc =_cffc .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fb ==1{_fb ,_cc =_cffc .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;};if _fb ==1{_fb ,_cc =_cffc .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;
};if _fb ==1{_cfe =32;_ab =4436;}else {_cfe =12;_ab =340;};}else {_cfe =8;_ab =84;};}else {_cfe =6;_ab =20;};}else {_cfe =4;_ab =4;};}else {_cfe =2;_ab =0;};for _fe :=0;_fe < _cfe ;_fe ++{_fb ,_cc =_cffc .decodeIntBit (stats );if _cc !=nil {return 0,_cc ;
};_bb =(_bb <<1)|int32 (_fb );};_bb +=_ab ;if _cd ==0{return _bb ,nil ;}else if _cd ==1&&_bb > 0{return -_bb ,nil ;};return 0,_c .ErrOOB ;};func (_dea *DecoderStats )setEntry (_bbb int ){_add :=byte (_bbb &0x7f);_dea ._ba [_dea ._bbg ]=_add };