//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_f "fmt";_g "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_cc "io";_cb "strings";);func (_dbg *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_aa int ;_ea =_d [stats .cx ()][0];_ab =int32 (stats .cx ()););defer func (){_dbg ._ad ++}();_dbg ._db -=_ea ;if (_dbg ._dd >>16)< uint64 (_ea ){_aa =_dbg .lpsExchange (stats ,_ab ,_ea );if _cd :=_dbg .renormalize ();_cd !=nil {return 0,_cd ;};}else {_dbg ._dd -=uint64 (_ea )<<16;if (_dbg ._db &0x8000)==0{_aa =_dbg .mpsExchange (stats ,_ab );if _ccg :=_dbg .renormalize ();_ccg !=nil {return 0,_ccg ;};}else {_aa =int (stats .getMps ());};};return _aa ,nil ;};func (_ege *Decoder )renormalize ()error {for {if _ege ._cba ==0{if _df :=_ege .readByte ();_df !=nil {return _df ;};};_ege ._db <<=1;_ege ._dd <<=1;_ege ._cba --;if (_ege ._db &0x8000)!=0{break ;};};_ege ._dd &=0xffffffff;return nil ;};func (_cf *Decoder )decodeIntBit (_gea *DecoderStats )(int ,error ){_gea .SetIndex (int32 (_cf ._eg ));_gb ,_gc :=_cf .DecodeBit (_gea );if _gc !=nil {_g .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gc );return _gb ,_gc ;};if _cf ._eg < 256{_cf ._eg =((_cf ._eg <<uint64 (1))|int64 (_gb ))&0x1ff;}else {_cf ._eg =(((_cf ._eg <<uint64 (1)|int64 (_gb ))&511)|256)&0x1ff;};return _gb ,nil ;};func (_eef *Decoder )lpsExchange (_bc *DecoderStats ,_fbd int32 ,_dfd uint32 )int {_dbf :=_bc .getMps ();if _eef ._db < _dfd {_bc .setEntry (int (_d [_fbd ][1]));_eef ._db =_dfd ;return int (_dbf );};if _d [_fbd ][3]==1{_bc .toggleMps ();};_bc .setEntry (int (_d [_fbd ][2]));_eef ._db =_dfd ;return int (1-_dbf );};func (_cbe *Decoder )mpsExchange (_ee *DecoderStats ,_gge int32 )int {_gf :=_ee ._be [_ee ._cbd ];if _cbe ._db < _d [_gge ][0]{if _d [_gge ][3]==1{_ee .toggleMps ();};_ee .setEntry (int (_d [_gge ][2]));return int (1-_gf );};_ee .setEntry (int (_d [_gge ][1]));return int (_gf );};func (_gag *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_gag ._eg =1;var _ef uint64 ;for _ef =0;_ef < codeLen ;_ef ++{stats .SetIndex (int32 (_gag ._eg ));_ced ,_abe :=_gag .DecodeBit (stats );if _abe !=nil {return 0,_abe ;};_gag ._eg =(_gag ._eg <<1)|int64 (_ced );};_cec :=_gag ._eg -(1<<codeLen );return _cec ,nil ;};func (_fb *Decoder )init ()error {_fb ._ga =_fb ._gg .StreamPosition ();_ge ,_de :=_fb ._gg .ReadByte ();if _de !=nil {_g .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_de );return _de ;};_fb ._fa =_ge ;_fb ._dd =uint64 (_ge )<<16;if _de =_fb .readByte ();_de !=nil {return _de ;};_fb ._dd <<=7;_fb ._cba -=7;_fb ._db =0x8000;_fb ._ad ++;return nil ;};func New (r _a .StreamReader )(*Decoder ,error ){_ec :=&Decoder {_gg :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _b :=_ec .init ();_b !=nil {return nil ,_b ;};return _ec ,nil ;};func (_gfcb *DecoderStats )Reset (){for _bde :=0;_bde < len (_gfcb ._gfc );_bde ++{_gfcb ._gfc [_bde ]=0;_gfcb ._be [_bde ]=0;};};func (_dad *DecoderStats )String ()string {_ddc :=&_cb .Builder {};_ddc .WriteString (_f .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_dad ._gfc )));for _gdd ,_dae :=range _dad ._gfc {if _dae !=0{_ddc .WriteString (_f .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_gdd ,_dae ));};};return _ddc .String ();};func (_geb *DecoderStats )Copy ()*DecoderStats {_ccd :=&DecoderStats {_ffc :_geb ._ffc ,_gfc :make ([]byte ,_geb ._ffc )};for _dfc :=0;_dfc < len (_geb ._gfc );_dfc ++{_ccd ._gfc [_dfc ]=_geb ._gfc [_dfc ];};return _ccd ;};func (_cfa *DecoderStats )toggleMps (){_cfa ._be [_cfa ._cbd ]^=1};func (_dc *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_abg ,_abc int32 ;_ccc ,_ed ,_ca int ;_ce error ;);if stats ==nil {stats =NewStats (512,1);};_dc ._eg =1;_ed ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};_ccc ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};if _ccc ==1{_ccc ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};if _ccc ==1{_ccc ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};if _ccc ==1{_ccc ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};if _ccc ==1{_ccc ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};if _ccc ==1{_ca =32;_abc =4436;}else {_ca =12;_abc =340;};}else {_ca =8;_abc =84;};}else {_ca =6;_abc =20;};}else {_ca =4;_abc =4;};}else {_ca =2;_abc =0;};for _gd :=0;_gd < _ca ;_gd ++{_ccc ,_ce =_dc .decodeIntBit (stats );if _ce !=nil {return 0,_ce ;};_abg =(_abg <<1)|int32 (_ccc );};_abg +=_abc ;if _ed ==0{return _abg ,nil ;}else if _ed ==1&&_abg > 0{return -_abg ,nil ;};return 0,_e .ErrOOB ;};func (_ac *Decoder )readByte ()error {if _ac ._gg .StreamPosition ()> _ac ._ga {if _ ,_eb :=_ac ._gg .Seek (-1,_cc .SeekCurrent );_eb !=nil {return _eb ;};};_ade ,_ff :=_ac ._gg .ReadByte ();if _ff !=nil {return _ff ;};_ac ._fa =_ade ;if _ac ._fa ==0xFF{_bf ,_ged :=_ac ._gg .ReadByte ();if _ged !=nil {return _ged ;};if _bf > 0x8F{_ac ._dd +=0xFF00;_ac ._cba =8;if _ ,_bb :=_ac ._gg .Seek (-2,_cc .SeekCurrent );_bb !=nil {return _bb ;};}else {_ac ._dd +=uint64 (_bf )<<9;_ac ._cba =7;};}else {_ade ,_ff =_ac ._gg .ReadByte ();if _ff !=nil {return _ff ;};_ac ._fa =_ade ;_ac ._dd +=uint64 (_ac ._fa )<<8;_ac ._cba =8;};_ac ._dd &=0xFFFFFFFFFF;return nil ;};func (_edf *DecoderStats )SetIndex (index int32 ){_edf ._cbd =index };type DecoderStats struct{_cbd int32 ;_ffc int32 ;_gfc []byte ;_be []byte ;};func (_gdc *DecoderStats )Overwrite (dNew *DecoderStats ){for _egc :=0;_egc < len (_gdc ._gfc );_egc ++{_gdc ._gfc [_egc ]=dNew ._gfc [_egc ];_gdc ._be [_egc ]=dNew ._be [_egc ];};};var (_d =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_cbd :index ,_ffc :contextSize ,_gfc :make ([]byte ,contextSize ),_be :make ([]byte ,contextSize )};};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_gg _a .StreamReader ;_fa uint8 ;_dd uint64 ;_db uint32 ;_eg int64 ;_cba int32 ;_ad int32 ;_ga int64 ;};func (_cab *DecoderStats )setEntry (_geag int ){_ffa :=byte (_geag &0x7f);_cab ._gfc [_cab ._cbd ]=_ffa ;};func (_cfc *DecoderStats )getMps ()byte {return _cfc ._be [_cfc ._cbd ]};func (_ddd *DecoderStats )cx ()byte {return _ddd ._gfc [_ddd ._cbd ]};