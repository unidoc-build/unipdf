//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_f "fmt";_b "github.com/unidoc/unipdf/v3/common";_ag "github.com/unidoc/unipdf/v3/internal/bitwise";_ba "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_e "io";_d "strings";);func (_de *Decoder )decodeIntBit (_cfe *DecoderStats )(int ,error ){_cfe .SetIndex (int32 (_de ._ad ));
_ga ,_db :=_de .DecodeBit (_cfe );if _db !=nil {_b .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_db );
return _ga ,_db ;};if _de ._ad < 256{_de ._ad =((_de ._ad <<uint64 (1))|int64 (_ga ))&0x1ff;}else {_de ._ad =(((_de ._ad <<uint64 (1)|int64 (_ga ))&511)|256)&0x1ff;};return _ga ,nil ;};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;
_fe _ag .StreamReader ;_agd uint8 ;_ee uint64 ;_eg uint32 ;_ad int64 ;_g int32 ;_bd int32 ;_aga int64 ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_aca :index ,_ceg :contextSize ,_bcbf :make ([]byte ,contextSize ),_agfe :make ([]byte ,contextSize )};
};func (_gcbd *DecoderStats )getMps ()byte {return _gcbd ._agfe [_gcbd ._aca ]};type DecoderStats struct{_aca int32 ;_ceg int32 ;_bcbf []byte ;_agfe []byte ;};func (_egd *Decoder )readByte ()error {if _egd ._fe .StreamPosition ()> _egd ._aga {if _ ,_fff :=_egd ._fe .Seek (-1,_e .SeekCurrent );
_fff !=nil {return _fff ;};};_ed ,_cc :=_egd ._fe .ReadByte ();if _cc !=nil {return _cc ;};_egd ._agd =_ed ;if _egd ._agd ==0xFF{_ce ,_agf :=_egd ._fe .ReadByte ();if _agf !=nil {return _agf ;};if _ce > 0x8F{_egd ._ee +=0xFF00;_egd ._g =8;if _ ,_ebe :=_egd ._fe .Seek (-2,_e .SeekCurrent );
_ebe !=nil {return _ebe ;};}else {_egd ._ee +=uint64 (_ce )<<9;_egd ._g =7;};}else {_ed ,_cc =_egd ._fe .ReadByte ();if _cc !=nil {return _cc ;};_egd ._agd =_ed ;_egd ._ee +=uint64 (_egd ._agd )<<8;_egd ._g =8;};_egd ._ee &=0xFFFFFFFFFF;return nil ;};func (_dfd *Decoder )init ()error {_dfd ._aga =_dfd ._fe .StreamPosition ();
_bda ,_ac :=_dfd ._fe .ReadByte ();if _ac !=nil {_b .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ac );return _ac ;};_dfd ._agd =_bda ;_dfd ._ee =uint64 (_bda )<<16;
if _ac =_dfd .readByte ();_ac !=nil {return _ac ;};_dfd ._ee <<=7;_dfd ._g -=7;_dfd ._eg =0x8000;_dfd ._bd ++;return nil ;};func (_fg *DecoderStats )String ()string {_bf :=&_d .Builder {};_bf .WriteString (_f .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_fg ._bcbf )));
for _bdc ,_dd :=range _fg ._bcbf {if _dd !=0{_bf .WriteString (_f .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_bdc ,_dd ));};};return _bf .String ();};func (_da *Decoder )lpsExchange (_fd *DecoderStats ,_efc int32 ,_gad uint32 )int {_acb :=_fd .getMps ();
if _da ._eg < _gad {_fd .setEntry (int (_df [_efc ][1]));_da ._eg =_gad ;return int (_acb );};if _df [_efc ][3]==1{_fd .toggleMps ();};_fd .setEntry (int (_df [_efc ][2]));_da ._eg =_gad ;return int (1-_acb );};func (_be *Decoder )renormalize ()error {for {if _be ._g ==0{if _ge :=_be .readByte ();
_ge !=nil {return _ge ;};};_be ._eg <<=1;_be ._ee <<=1;_be ._g --;if (_be ._eg &0x8000)!=0{break ;};};_be ._ee &=0xffffffff;return nil ;};func (_ff *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ffe ,_ebg int32 ;_egf ,_ec ,_fa int ;_bc error ;
);if stats ==nil {stats =NewStats (512,1);};_ff ._ad =1;_ec ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;};_egf ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;};if _egf ==1{_egf ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;
};if _egf ==1{_egf ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;};if _egf ==1{_egf ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;};if _egf ==1{_egf ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;};if _egf ==1{_fa =32;
_ebg =4436;}else {_fa =12;_ebg =340;};}else {_fa =8;_ebg =84;};}else {_fa =6;_ebg =20;};}else {_fa =4;_ebg =4;};}else {_fa =2;_ebg =0;};for _bcb :=0;_bcb < _fa ;_bcb ++{_egf ,_bc =_ff .decodeIntBit (stats );if _bc !=nil {return 0,_bc ;};_ffe =(_ffe <<1)|int32 (_egf );
};_ffe +=_ebg ;if _ec ==0{return _ffe ,nil ;}else if _ec ==1&&_ffe > 0{return -_ffe ,nil ;};return 0,_ba .ErrOOB ;};var (_df =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};
);func (_bff *DecoderStats )cx ()byte {return _bff ._bcbf [_bff ._aca ]};func (_ae *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_agc int ;_ea =_df [stats .cx ()][0];_eb =int32 (stats .cx ()););defer func (){_ae ._bd ++}();_ae ._eg -=_ea ;
if (_ae ._ee >>16)< uint64 (_ea ){_agc =_ae .lpsExchange (stats ,_eb ,_ea );if _agde :=_ae .renormalize ();_agde !=nil {return 0,_agde ;};}else {_ae ._ee -=uint64 (_ea )<<16;if (_ae ._eg &0x8000)==0{_agc =_ae .mpsExchange (stats ,_eb );if _adb :=_ae .renormalize ();
_adb !=nil {return 0,_adb ;};}else {_agc =int (stats .getMps ());};};return _agc ,nil ;};func (_cee *DecoderStats )SetIndex (index int32 ){_cee ._aca =index };func (_bg *DecoderStats )Reset (){for _gg :=0;_gg < len (_bg ._bcbf );_gg ++{_bg ._bcbf [_gg ]=0;
_bg ._agfe [_gg ]=0;};};func New (r _ag .StreamReader )(*Decoder ,error ){_c :=&Decoder {_fe :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _af :=_c .init ();_af !=nil {return nil ,_af ;};return _c ,nil ;};func (_egfg *DecoderStats )Copy ()*DecoderStats {_eaf :=&DecoderStats {_ceg :_egfg ._ceg ,_bcbf :make ([]byte ,_egfg ._ceg )};
for _geg :=0;_geg < len (_egfg ._bcbf );_geg ++{_eaf ._bcbf [_geg ]=_egfg ._bcbf [_geg ];};return _eaf ;};func (_ca *DecoderStats )Overwrite (dNew *DecoderStats ){for _fffa :=0;_fffa < len (_ca ._bcbf );_fffa ++{_ca ._bcbf [_fffa ]=dNew ._bcbf [_fffa ];
_ca ._agfe [_fffa ]=dNew ._agfe [_fffa ];};};func (_gb *DecoderStats )toggleMps (){_gb ._agfe [_gb ._aca ]^=1};func (_eac *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_eac ._ad =1;var _fee uint64 ;for _fee =0;_fee < codeLen ;
_fee ++{stats .SetIndex (int32 (_eac ._ad ));_cf ,_ef :=_eac .DecodeBit (stats );if _ef !=nil {return 0,_ef ;};_eac ._ad =(_eac ._ad <<1)|int64 (_cf );};_bce :=_eac ._ad -(1<<codeLen );return _bce ,nil ;};func (_dee *DecoderStats )setEntry (_gf int ){_afg :=byte (_gf &0x7f);
_dee ._bcbf [_dee ._aca ]=_afg };func (_afc *Decoder )mpsExchange (_gcb *DecoderStats ,_cg int32 )int {_fb :=_gcb ._agfe [_gcb ._aca ];if _afc ._eg < _df [_cg ][0]{if _df [_cg ][3]==1{_gcb .toggleMps ();};_gcb .setEntry (int (_df [_cg ][2]));return int (1-_fb );
};_gcb .setEntry (int (_df [_cg ][1]));return int (_fb );};