//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_ca "fmt";_g "github.com/unidoc/unipdf/v3/common";_ec "github.com/unidoc/unipdf/v3/internal/bitwise";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "io";_e "strings";);func (_acg *Decoder )readByte ()error {if _acg ._cb .StreamPosition ()> _acg ._gdd {if _ ,_acb :=_acg ._cb .Seek (-1,_c .SeekCurrent );_acb !=nil {return _acb ;};};_bf ,_bd :=_acg ._cb .ReadByte ();if _bd !=nil {return _bd ;};_acg ._cd =_bf ;if _acg ._cd ==0xFF{_egc ,_gad :=_acg ._cb .ReadByte ();if _gad !=nil {return _gad ;};if _egc > 0x8F{_acg ._eg +=0xFF00;_acg ._gd =8;if _ ,_gcb :=_acg ._cb .Seek (-2,_c .SeekCurrent );_gcb !=nil {return _gcb ;};}else {_acg ._eg +=uint64 (_egc )<<9;_acg ._gd =7;};}else {_bf ,_bd =_acg ._cb .ReadByte ();if _bd !=nil {return _bd ;};_acg ._cd =_bf ;_acg ._eg +=uint64 (_acg ._cd )<<8;_acg ._gd =8;};_acg ._eg &=0xFFFFFFFFFF;return nil ;};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_bcg :index ,_db :contextSize ,_ff :make ([]byte ,contextSize ),_cbb :make ([]byte ,contextSize )};};type DecoderStats struct{_bcg int32 ;_db int32 ;_ff []byte ;_cbb []byte ;};func (_fg *DecoderStats )SetIndex (index int32 ){_fg ._bcg =index };func (_bc *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_bc ._egd =1;var _ba uint64 ;for _ba =0;_ba < codeLen ;_ba ++{stats .SetIndex (int32 (_bc ._egd ));_dcb ,_dfc :=_bc .DecodeBit (stats );if _dfc !=nil {return 0,_dfc ;};_bc ._egd =(_bc ._egd <<1)|int64 (_dcb );};_ega :=_bc ._egd -(1<<codeLen );return _ega ,nil ;};func (_bgg *DecoderStats )Reset (){for _cgg :=0;_cgg < len (_bgg ._ff );_cgg ++{_bgg ._ff [_cgg ]=0;_bgg ._cbb [_cgg ]=0;};};func (_cbd *Decoder )init ()error {_cbd ._gdd =_cbd ._cb .StreamPosition ();_cde ,_ag :=_cbd ._cb .ReadByte ();if _ag !=nil {_g .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_ag );return _ag ;};_cbd ._cd =_cde ;_cbd ._eg =uint64 (_cde )<<16;if _ag =_cbd .readByte ();_ag !=nil {return _ag ;};_cbd ._eg <<=7;_cbd ._gd -=7;_cbd ._d =0x8000;_cbd ._ga ++;return nil ;};func (_gb *DecoderStats )cx ()byte {return _gb ._ff [_gb ._bcg ]};func (_fad *Decoder )renormalize ()error {for {if _fad ._gd ==0{if _fe :=_fad .readByte ();_fe !=nil {return _fe ;};};_fad ._d <<=1;_fad ._eg <<=1;_fad ._gd --;if (_fad ._d &0x8000)!=0{break ;};};_fad ._eg &=0xffffffff;return nil ;};var (_a =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_cb _ec .StreamReader ;_cd uint8 ;_eg uint64 ;_d uint32 ;_egd int64 ;_gd int32 ;_ga int32 ;_gdd int64 ;};func New (r _ec .StreamReader )(*Decoder ,error ){_fb :=&Decoder {_cb :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _cae :=_fb .init ();_cae !=nil {return nil ,_cae ;};return _fb ,nil ;};func (_ce *Decoder )decodeIntBit (_ae *DecoderStats )(int ,error ){_ae .SetIndex (int32 (_ce ._egd ));_fee ,_adf :=_ce .DecodeBit (_ae );if _adf !=nil {_g .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_adf );return _fee ,_adf ;};if _ce ._egd < 256{_ce ._egd =((_ce ._egd <<uint64 (1))|int64 (_fee ))&0x1ff;}else {_ce ._egd =(((_ce ._egd <<uint64 (1)|int64 (_fee ))&511)|256)&0x1ff;};return _fee ,nil ;};func (_dd *DecoderStats )String ()string {_dbc :=&_e .Builder {};_dbc .WriteString (_ca .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_dd ._ff )));for _ggd ,_fc :=range _dd ._ff {if _fc !=0{_dbc .WriteString (_ca .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_ggd ,_fc ));};};return _dbc .String ();};func (_ddg *DecoderStats )setEntry (_gdfa int ){_dba :=byte (_gdfa &0x7f);_ddg ._ff [_ddg ._bcg ]=_dba };func (_gda *DecoderStats )Overwrite (dNew *DecoderStats ){for _cbdc :=0;_cbdc < len (_gda ._ff );_cbdc ++{_gda ._ff [_cbdc ]=dNew ._ff [_cbdc ];_gda ._cbb [_cbdc ]=dNew ._cbb [_cbdc ];};};func (_ge *Decoder )mpsExchange (_fbe *DecoderStats ,_cdd int32 )int {_gfb :=_fbe ._cbb [_fbe ._bcg ];if _ge ._d < _a [_cdd ][0]{if _a [_cdd ][3]==1{_fbe .toggleMps ();};_fbe .setEntry (int (_a [_cdd ][2]));return int (1-_gfb );};_fbe .setEntry (int (_a [_cdd ][1]));return int (_gfb );};func (_ac *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_df ,_ee int32 ;_gac ,_fa ,_gg int ;_ad error ;);if stats ==nil {stats =NewStats (512,1);};_ac ._egd =1;_fa ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};_gac ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};if _gac ==1{_gac ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};if _gac ==1{_gac ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};if _gac ==1{_gac ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};if _gac ==1{_gac ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};if _gac ==1{_gg =32;_ee =4436;}else {_gg =12;_ee =340;};}else {_gg =8;_ee =84;};}else {_gg =6;_ee =20;};}else {_gg =4;_ee =4;};}else {_gg =2;_ee =0;};for _dc :=0;_dc < _gg ;_dc ++{_gac ,_ad =_ac .decodeIntBit (stats );if _ad !=nil {return 0,_ad ;};_df =(_df <<1)|int32 (_gac );};_df +=_ee ;if _fa ==0{return _df ,nil ;}else if _fa ==1&&_df > 0{return -_df ,nil ;};return 0,_cf .ErrOOB ;};func (_dbe *DecoderStats )Copy ()*DecoderStats {_fd :=&DecoderStats {_db :_dbe ._db ,_ff :make ([]byte ,_dbe ._db )};for _bfc :=0;_bfc < len (_dbe ._ff );_bfc ++{_fd ._ff [_bfc ]=_dbe ._ff [_bfc ];};return _fd ;};func (_bg *Decoder )lpsExchange (_gdfe *DecoderStats ,_bde int32 ,_gddf uint32 )int {_feeg :=_gdfe .getMps ();if _bg ._d < _gddf {_gdfe .setEntry (int (_a [_bde ][1]));_bg ._d =_gddf ;return int (_feeg );};if _a [_bde ][3]==1{_gdfe .toggleMps ();};_gdfe .setEntry (int (_a [_bde ][2]));_bg ._d =_gddf ;return int (1-_feeg );};func (_dca *DecoderStats )toggleMps (){_dca ._cbb [_dca ._bcg ]^=1};func (_gf *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_gc int ;_b =_a [stats .cx ()][0];_fba =int32 (stats .cx ()););defer func (){_gf ._ga ++}();_gf ._d -=_b ;if (_gf ._eg >>16)< uint64 (_b ){_gc =_gf .lpsExchange (stats ,_fba ,_b );if _gdf :=_gf .renormalize ();_gdf !=nil {return 0,_gdf ;};}else {_gf ._eg -=uint64 (_b )<<16;if (_gf ._d &0x8000)==0{_gc =_gf .mpsExchange (stats ,_fba );if _ed :=_gf .renormalize ();_ed !=nil {return 0,_ed ;};}else {_gc =int (stats .getMps ());};};return _gc ,nil ;};func (_agd *DecoderStats )getMps ()byte {return _agd ._cbb [_agd ._bcg ]};