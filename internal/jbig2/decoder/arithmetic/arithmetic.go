//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package arithmetic ;import (_a "fmt";_ae "github.com/unidoc/unipdf/v3/common";_g "github.com/unidoc/unipdf/v3/internal/bitwise";_ac "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_e "io";_f "strings";);func (_fb *Decoder )lpsExchange (_egd *DecoderStats ,_ccb int32 ,_fbe uint32 )int {_gg :=_egd .getMps ();if _fb ._eg < _fbe {_egd .setEntry (int (_d [_ccb ][1]));_fb ._eg =_fbe ;return int (_gg );};if _d [_ccb ][3]==1{_egd .toggleMps ();};_egd .setEntry (int (_d [_ccb ][2]));_fb ._eg =_fbe ;return int (1-_gg );};func (_bec *DecoderStats )Overwrite (dNew *DecoderStats ){for _fd :=0;_fd < len (_bec ._edc );_fd ++{_bec ._edc [_fd ]=dNew ._edc [_fd ];_bec ._egg [_fd ]=dNew ._egg [_fd ];};};func (_bb *Decoder )DecodeInt (stats *DecoderStats )(int32 ,error ){var (_ef ,_bd int32 ;_eb ,_aea ,_ed int ;_gcf error ;);if stats ==nil {stats =NewStats (512,1);};_bb ._gb =1;_aea ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};_eb ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};if _eb ==1{_eb ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};if _eb ==1{_eb ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};if _eb ==1{_eb ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};if _eb ==1{_eb ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};if _eb ==1{_ed =32;_bd =4436;}else {_ed =12;_bd =340;};}else {_ed =8;_bd =84;};}else {_ed =6;_bd =20;};}else {_ed =4;_bd =4;};}else {_ed =2;_bd =0;};for _ebc :=0;_ebc < _ed ;_ebc ++{_eb ,_gcf =_bb .decodeIntBit (stats );if _gcf !=nil {return 0,_gcf ;};_ef =(_ef <<1)|int32 (_eb );};_ef +=_bd ;if _aea ==0{return _ef ,nil ;}else if _aea ==1&&_ef > 0{return -_ef ,nil ;};return 0,_ac .ErrOOB ;};func (_fe *DecoderStats )String ()string {_eda :=&_f .Builder {};_eda .WriteString (_a .Sprintf ("S\u0074\u0061\u0074\u0073\u003a\u0020\u0020\u0025\u0064\u000a",len (_fe ._edc )));for _ccf ,_ag :=range _fe ._edc {if _ag !=0{_eda .WriteString (_a .Sprintf ("N\u006f\u0074\u0020\u007aer\u006f \u0061\u0074\u003a\u0020\u0025d\u0020\u002d\u0020\u0025\u0064\u000a",_ccf ,_ag ));};};return _eda .String ();};func (_aa *Decoder )mpsExchange (_bbg *DecoderStats ,_acc int32 )int {_dab :=_bbg ._egg [_bbg ._ffg ];if _aa ._eg < _d [_acc ][0]{if _d [_acc ][3]==1{_bbg .toggleMps ();};_bbg .setEntry (int (_d [_acc ][2]));return int (1-_dab );};_bbg .setEntry (int (_d [_acc ][1]));return int (_dab );};func (_dc *Decoder )readByte ()error {if _dc ._fc .StreamPosition ()> _dc ._cd {if _ ,_eff :=_dc ._fc .Seek (-1,_e .SeekCurrent );_eff !=nil {return _eff ;};};_ea ,_ege :=_dc ._fc .ReadByte ();if _ege !=nil {return _ege ;};_dc ._gc =_ea ;if _dc ._gc ==0xFF{_cde ,_be :=_dc ._fc .ReadByte ();if _be !=nil {return _be ;};if _cde > 0x8F{_dc ._gca +=0xFF00;_dc ._aeg =8;if _ ,_bf :=_dc ._fc .Seek (-2,_e .SeekCurrent );_bf !=nil {return _bf ;};}else {_dc ._gca +=uint64 (_cde )<<9;_dc ._aeg =7;};}else {_ea ,_ege =_dc ._fc .ReadByte ();if _ege !=nil {return _ege ;};_dc ._gc =_ea ;_dc ._gca +=uint64 (_dc ._gc )<<8;_dc ._aeg =8;};_dc ._gca &=0xFFFFFFFFFF;return nil ;};func (_da *Decoder )init ()error {_da ._cd =_da ._fc .StreamPosition ();_dg ,_efe :=_da ._fc .ReadByte ();if _efe !=nil {_ae .Log .Debug ("B\u0075\u0066\u0066\u0065\u0072\u0030 \u0072\u0065\u0061\u0064\u0042\u0079\u0074\u0065\u0020f\u0061\u0069\u006ce\u0064.\u0020\u0025\u0076",_efe );return _efe ;};_da ._gc =_dg ;_da ._gca =uint64 (_dg )<<16;if _efe =_da .readByte ();_efe !=nil {return _efe ;};_da ._gca <<=7;_da ._aeg -=7;_da ._eg =0x8000;_da ._ace ++;return nil ;};type DecoderStats struct{_ffg int32 ;_cca int32 ;_edc []byte ;_egg []byte ;};func (_ff *Decoder )DecodeIAID (codeLen uint64 ,stats *DecoderStats )(int64 ,error ){_ff ._gb =1;var _ce uint64 ;for _ce =0;_ce < codeLen ;_ce ++{stats .SetIndex (int32 (_ff ._gb ));_bc ,_fa :=_ff .DecodeBit (stats );if _fa !=nil {return 0,_fa ;};_ff ._gb =(_ff ._gb <<1)|int64 (_bc );};_ca :=_ff ._gb -(1<<codeLen );return _ca ,nil ;};func (_ab *Decoder )renormalize ()error {for {if _ab ._aeg ==0{if _bfc :=_ab .readByte ();_bfc !=nil {return _bfc ;};};_ab ._eg <<=1;_ab ._gca <<=1;_ab ._aeg --;if (_ab ._eg &0x8000)!=0{break ;};};_ab ._gca &=0xffffffff;return nil ;};func (_dce *DecoderStats )getMps ()byte {return _dce ._egg [_dce ._ffg ]};func New (r _g .StreamReader )(*Decoder ,error ){_db :=&Decoder {_fc :r ,ContextSize :[]uint32 {16,13,10,10},ReferedToContextSize :[]uint32 {13,10}};if _dbe :=_db .init ();_dbe !=nil {return nil ,_dbe ;};return _db ,nil ;};func (_ga *Decoder )DecodeBit (stats *DecoderStats )(int ,error ){var (_b int ;_cc =_d [stats .cx ()][0];_fcc =int32 (stats .cx ()););defer func (){_ga ._ace ++}();_ga ._eg -=_cc ;if (_ga ._gca >>16)< uint64 (_cc ){_b =_ga .lpsExchange (stats ,_fcc ,_cc );if _gbg :=_ga .renormalize ();_gbg !=nil {return 0,_gbg ;};}else {_ga ._gca -=uint64 (_cc )<<16;if (_ga ._eg &0x8000)==0{_b =_ga .mpsExchange (stats ,_fcc );if _cg :=_ga .renormalize ();_cg !=nil {return 0,_cg ;};}else {_b =int (stats .getMps ());};};return _b ,nil ;};func (_df *DecoderStats )setEntry (_dd int ){_af :=byte (_dd &0x7f);_df ._edc [_df ._ffg ]=_af };func (_gbf *DecoderStats )SetIndex (index int32 ){_gbf ._ffg =index };func (_gf *DecoderStats )Reset (){for _bde :=0;_bde < len (_gf ._edc );_bde ++{_gf ._edc [_bde ]=0;_gf ._egg [_bde ]=0;};};type Decoder struct{ContextSize []uint32 ;ReferedToContextSize []uint32 ;_fc _g .StreamReader ;_gc uint8 ;_gca uint64 ;_eg uint32 ;_gb int64 ;_aeg int32 ;_ace int32 ;_cd int64 ;};var (_d =[][4]uint32 {{0x5601,1,1,1},{0x3401,2,6,0},{0x1801,3,9,0},{0x0AC1,4,12,0},{0x0521,5,29,0},{0x0221,38,33,0},{0x5601,7,6,1},{0x5401,8,14,0},{0x4801,9,14,0},{0x3801,10,14,0},{0x3001,11,17,0},{0x2401,12,18,0},{0x1C01,13,20,0},{0x1601,29,21,0},{0x5601,15,14,1},{0x5401,16,14,0},{0x5101,17,15,0},{0x4801,18,16,0},{0x3801,19,17,0},{0x3401,20,18,0},{0x3001,21,19,0},{0x2801,22,19,0},{0x2401,23,20,0},{0x2201,24,21,0},{0x1C01,25,22,0},{0x1801,26,23,0},{0x1601,27,24,0},{0x1401,28,25,0},{0x1201,29,26,0},{0x1101,30,27,0},{0x0AC1,31,28,0},{0x09C1,32,29,0},{0x08A1,33,30,0},{0x0521,34,31,0},{0x0441,35,32,0},{0x02A1,36,33,0},{0x0221,37,34,0},{0x0141,38,35,0},{0x0111,39,36,0},{0x0085,40,37,0},{0x0049,41,38,0},{0x0025,42,39,0},{0x0015,43,40,0},{0x0009,44,41,0},{0x0005,45,42,0},{0x0001,45,43,0},{0x5601,46,46,0}};);func (_bg *Decoder )decodeIntBit (_dag *DecoderStats )(int ,error ){_dag .SetIndex (int32 (_bg ._gb ));_cce ,_dad :=_bg .DecodeBit (_dag );if _dad !=nil {_ae .Log .Debug ("\u0041\u0072\u0069\u0074\u0068\u006d\u0065t\u0069\u0063\u0044e\u0063\u006f\u0064e\u0072\u0020'\u0064\u0065\u0063\u006f\u0064\u0065I\u006etB\u0069\u0074\u0027\u002d\u003e\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0042\u0069\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_dad );return _cce ,_dad ;};if _bg ._gb < 256{_bg ._gb =((_bg ._gb <<uint64 (1))|int64 (_cce ))&0x1ff;}else {_bg ._gb =(((_bg ._gb <<uint64 (1)|int64 (_cce ))&511)|256)&0x1ff;};return _cce ,nil ;};func (_ec *DecoderStats )toggleMps (){_ec ._egg [_ec ._ffg ]^=1};func NewStats (contextSize int32 ,index int32 )*DecoderStats {return &DecoderStats {_ffg :index ,_cca :contextSize ,_edc :make ([]byte ,contextSize ),_egg :make ([]byte ,contextSize )};};func (_edd *DecoderStats )Copy ()*DecoderStats {_dcc :=&DecoderStats {_cca :_edd ._cca ,_edc :make ([]byte ,_edd ._cca )};for _ceg :=0;_ceg < len (_edd ._edc );_ceg ++{_dcc ._edc [_ceg ]=_edd ._edc [_ceg ];};return _dcc ;};func (_ee *DecoderStats )cx ()byte {return _ee ._edc [_ee ._ffg ]};