//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_b "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_g "github.com/unidoc/unipdf/v3/internal/jbig2/document";_cf "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";);func (_ee *Decoder )decodePage (_fb int )([]byte ,error ){const _fag ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fb < 0{return nil ,_cf .Errorf (_fag ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fb );};if _fb > int (_ee ._cd .NumberOfPages ){return nil ,_cf .Errorf (_fag ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fb );};_gd ,_de :=_ee ._cd .GetPage (_fb );if _de !=nil {return nil ,_cf .Wrap (_de ,_fag ,"");};_ef ,_de :=_gd .GetBitmap ();if _de !=nil {return nil ,_cf .Wrap (_de ,_fag ,"");};_ef .InverseData ();if !_ee ._d .UnpaddedData {return _ef .Data ,nil ;};return _ef .GetUnpaddedData ();};func (_gg *Decoder )DecodePageImage (pageNumber int )(_f .Image ,error ){const _fa ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_a ,_ea :=_gg .decodePageImage (pageNumber );if _ea !=nil {return nil ,_cf .Wrap (_ea ,_fa ,"");};return _a ,nil ;};func (_da *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _da .decodePage (pageNumber )};func (_dg *Decoder )decodePageImage (_be int )(_f .Image ,error ){const _efb ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _be < 0{return nil ,_cf .Errorf (_efb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_be );};if _be > int (_dg ._cd .NumberOfPages ){return nil ,_cf .Errorf (_efb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_be );};_cdc ,_fc :=_dg ._cd .GetPage (_be );if _fc !=nil {return nil ,_cf .Wrap (_fc ,_efb ,"");};_df ,_fc :=_cdc .GetBitmap ();if _fc !=nil {return nil ,_cf .Wrap (_fc ,_efb ,"");};return _df .ToImage (),nil ;};func (_gf *Decoder )DecodeNextPage ()([]byte ,error ){_gf ._fd ++;_ae :=_gf ._fd ;return _gf .decodePage (_ae );};type Decoder struct{_bg _b .StreamReader ;_cd *_g .Document ;_fd int ;_d Parameters ;};type Parameters struct{UnpaddedData bool ;Color _e .Color ;};func Decode (input []byte ,parameters Parameters ,globals *_g .Globals )(*Decoder ,error ){_ca :=_b .NewReader (input );_bgd ,_gfb :=_g .DecodeDocument (_ca ,globals );if _gfb !=nil {return nil ,_gfb ;};return &Decoder {_bg :_ca ,_cd :_bgd ,_d :parameters },nil ;};func (_bd *Decoder )PageNumber ()(int ,error ){const _ga ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _bd ._cd ==nil {return 0,_cf .Error (_ga ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_bd ._cd .NumberOfPages ),nil ;};