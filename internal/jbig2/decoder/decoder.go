//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_ae "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_f "github.com/unidoc/unipdf/v3/internal/jbig2/document";_aef "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_ag *Decoder )DecodeNextPage ()([]byte ,error ){_ag ._cc ++;_de :=_ag ._cc ;return _ag .decodePage (_de );};func (_bf *Decoder )decodePageImage (_fe int )(_c .Image ,error ){const _dcd ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _fe < 0{return nil ,_aef .Errorf (_dcd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fe );};if _fe > int (_bf ._cd .NumberOfPages ){return nil ,_aef .Errorf (_dcd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fe );
};_g ,_ee :=_bf ._cd .GetPage (_fe );if _ee !=nil {return nil ,_aef .Wrap (_ee ,_dcd ,"");};_gb ,_ee :=_g .GetBitmap ();if _ee !=nil {return nil ,_aef .Wrap (_ee ,_dcd ,"");};_gb .InverseData ();return _gb .ToImage (),nil ;};type Decoder struct{_af _ae .StreamReader ;
_cd *_f .Document ;_cc int ;_d Parameters ;};func Decode (input []byte ,parameters Parameters ,globals *_f .Globals )(*Decoder ,error ){_db :=_ae .NewReader (input );_feb ,_cgf :=_f .DecodeDocument (_db ,globals );if _cgf !=nil {return nil ,_cgf ;};return &Decoder {_af :_db ,_cd :_feb ,_d :parameters },nil ;
};func (_cf *Decoder )decodePage (_b int )([]byte ,error ){const _cfb ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _b < 0{return nil ,_aef .Errorf (_cfb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_b );
};if _b > int (_cf ._cd .NumberOfPages ){return nil ,_aef .Errorf (_cfb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_b );
};_ce ,_aeg :=_cf ._cd .GetPage (_b );if _aeg !=nil {return nil ,_aef .Wrap (_aeg ,_cfb ,"");};_dab ,_aeg :=_ce .GetBitmap ();if _aeg !=nil {return nil ,_aef .Wrap (_aeg ,_cfb ,"");};_dab .InverseData ();if !_cf ._d .UnpaddedData {return _dab .Data ,nil ;
};return _dab .GetUnpaddedData ();};func (_dc *Decoder )PageNumber ()(int ,error ){const _deb ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _dc ._cd ==nil {return 0,_aef .Error (_deb ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_dc ._cd .NumberOfPages ),nil ;};func (_ed *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ed .decodePage (pageNumber )};func (_ec *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _cca ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_cg ,_da :=_ec .decodePageImage (pageNumber );if _da !=nil {return nil ,_aef .Wrap (_da ,_cca ,"");};return _cg ,nil ;};type Parameters struct{UnpaddedData bool ;Color _e .Color ;};