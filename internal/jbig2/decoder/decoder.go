//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_d "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_a "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ce "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_ba *Decoder )decodePage (_eca int )([]byte ,error ){const _db ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _eca < 0{return nil ,_ce .Errorf (_db ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_eca );
};if _eca > int (_ba ._fa .NumberOfPages ){return nil ,_ce .Errorf (_db ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_eca );
};_gf ,_fc :=_ba ._fa .GetPage (_eca );if _fc !=nil {return nil ,_ce .Wrap (_fc ,_db ,"");};_gg ,_fc :=_gf .GetBitmap ();if _fc !=nil {return nil ,_ce .Wrap (_fc ,_db ,"");};_gg .InverseData ();if !_ba ._cf .UnpaddedData {return _gg .Data ,nil ;};return _gg .GetUnpaddedData ();
};func (_ac *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ac .decodePage (pageNumber )};func (_cg *Decoder )DecodeNextPage ()([]byte ,error ){_cg ._e ++;_fb :=_cg ._e ;return _cg .decodePage (_fb );};func Decode (input []byte ,parameters Parameters ,globals *_a .Globals )(*Decoder ,error ){_dba :=_d .NewReader (input );
_cc ,_eg :=_a .DecodeDocument (_dba ,globals );if _eg !=nil {return nil ,_eg ;};return &Decoder {_cb :_dba ,_fa :_cc ,_cf :parameters },nil ;};func (_ff *Decoder )decodePageImage (_bfe int )(_c .Image ,error ){const _ag ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _bfe < 0{return nil ,_ce .Errorf (_ag ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_bfe );};if _bfe > int (_ff ._fa .NumberOfPages ){return nil ,_ce .Errorf (_ag ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_bfe );
};_bg ,_ef :=_ff ._fa .GetPage (_bfe );if _ef !=nil {return nil ,_ce .Wrap (_ef ,_ag ,"");};_efg ,_ef :=_bg .GetBitmap ();if _ef !=nil {return nil ,_ce .Wrap (_ef ,_ag ,"");};_efg .InverseData ();return _efg .ToImage (),nil ;};type Decoder struct{_cb *_d .Reader ;
_fa *_a .Document ;_e int ;_cf Parameters ;};func (_ec *Decoder )PageNumber ()(int ,error ){const _g ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _ec ._fa ==nil {return 0,_ce .Error (_g ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_ec ._fa .NumberOfPages ),nil ;};func (_df *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _be ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_aa ,_bf :=_df .decodePageImage (pageNumber );if _bf !=nil {return nil ,_ce .Wrap (_bf ,_be ,"");};return _aa ,nil ;};type Parameters struct{UnpaddedData bool ;Color _f .Color ;};