//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_g "github.com/unidoc/unipdf/v3/internal/bitwise";_gb "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_df "github.com/unidoc/unipdf/v3/internal/jbig2/document";_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";);func (_bg *Decoder )PageNumber ()(int ,error ){const _ed ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _bg ._gba ==nil {return 0,_d .Error (_ed ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_bg ._gba .NumberOfPages ),nil ;};func (_dd *Decoder )decodePageImage (_acg int )(_a .Image ,error ){const _gd ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _acg < 0{return nil ,_d .Errorf (_gd ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_acg );};if _acg > int (_dd ._gba .NumberOfPages ){return nil ,_d .Errorf (_gd ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_acg );};_ab ,_edc :=_dd ._gba .GetPage (_acg );if _edc !=nil {return nil ,_d .Wrap (_edc ,_gd ,"");};_af ,_edc :=_ab .GetBitmap ();if _edc !=nil {return nil ,_d .Wrap (_edc ,_gd ,"");};return _af .ToImage (),nil ;};func (_e *Decoder )DecodePageImage (pageNumber int )(_a .Image ,error ){const _c ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_eb ,_cb :=_e .decodePageImage (pageNumber );if _cb !=nil {return nil ,_d .Wrap (_cb ,_c ,"");};return _eb ,nil ;};func Decode (input []byte ,parameters Parameters ,globals *_df .Globals )(*Decoder ,error ){_ae :=_g .NewReader (input );_bf ,_bd :=_df .DecodeDocument (_ae ,globals );if _bd !=nil {return nil ,_bd ;};return &Decoder {_gc :_ae ,_gba :_bf ,_dfd :parameters },nil ;};type Parameters struct{UnpaddedData bool ;Color _gb .Color ;};func (_ac *Decoder )DecodeNextPage ()([]byte ,error ){_ac ._f ++;_ea :=_ac ._f ;return _ac .decodePage (_ea );};func (_cc *Decoder )decodePage (_fb int )([]byte ,error ){const _gf ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _fb < 0{return nil ,_d .Errorf (_gf ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fb );};if _fb > int (_cc ._gba .NumberOfPages ){return nil ,_d .Errorf (_gf ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fb );};_bc ,_cf :=_cc ._gba .GetPage (_fb );if _cf !=nil {return nil ,_d .Wrap (_cf ,_gf ,"");};_dc ,_cf :=_bc .GetBitmap ();if _cf !=nil {return nil ,_d .Wrap (_cf ,_gf ,"");};_dc .InverseData ();if !_cc ._dfd .UnpaddedData {return _dc .Data ,nil ;};return _dc .GetUnpaddedData ();};type Decoder struct{_gc _g .StreamReader ;_gba *_df .Document ;_f int ;_dfd Parameters ;};func (_fg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fg .decodePage (pageNumber )};