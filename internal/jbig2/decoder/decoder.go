//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_fd "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "github.com/unidoc/unipdf/v3/internal/jbig2/document";_e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_f "image";
);type Decoder struct{_be _fd .StreamReader ;_ff *_b .Document ;_fff int ;_cf Parameters ;};func (_d *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _d .decodePage (pageNumber )};type Parameters struct{UnpaddedData bool ;Color _c .Color ;
};func (_da *Decoder )DecodePageImage (pageNumber int )(_f .Image ,error ){const _ac ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_cfb ,_bb :=_da .decodePageImage (pageNumber );
if _bb !=nil {return nil ,_e .Wrap (_bb ,_ac ,"");};return _cfb ,nil ;};func (_ce *Decoder )decodePageImage (_dd int )(_f .Image ,error ){const _ca ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _dd < 0{return nil ,_e .Errorf (_ca ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_dd );
};if _dd > int (_ce ._ff .NumberOfPages ){return nil ,_e .Errorf (_ca ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_dd );
};_ag ,_ae :=_ce ._ff .GetPage (_dd );if _ae !=nil {return nil ,_e .Wrap (_ae ,_ca ,"");};_ba ,_ae :=_ag .GetBitmap ();if _ae !=nil {return nil ,_e .Wrap (_ae ,_ca ,"");};_ba .InverseData ();return _ba .ToImage (),nil ;};func Decode (input []byte ,parameters Parameters ,globals *_b .Globals )(*Decoder ,error ){_df :=_fd .NewReader (input );
_fg ,_cc :=_b .DecodeDocument (_df ,globals );if _cc !=nil {return nil ,_cc ;};return &Decoder {_be :_df ,_ff :_fg ,_cf :parameters },nil ;};func (_bg *Decoder )PageNumber ()(int ,error ){const _aa ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";
if _bg ._ff ==nil {return 0,_e .Error (_aa ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_bg ._ff .NumberOfPages ),nil ;};func (_bbf *Decoder )decodePage (_eg int )([]byte ,error ){const _dg ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _eg < 0{return nil ,_e .Errorf (_dg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_eg );};if _eg > int (_bbf ._ff .NumberOfPages ){return nil ,_e .Errorf (_dg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_eg );
};_bef ,_eb :=_bbf ._ff .GetPage (_eg );if _eb !=nil {return nil ,_e .Wrap (_eb ,_dg ,"");};_ge ,_eb :=_bef .GetBitmap ();if _eb !=nil {return nil ,_e .Wrap (_eb ,_dg ,"");};_ge .InverseData ();if !_bbf ._cf .UnpaddedData {return _ge .Data ,nil ;};return _ge .GetUnpaddedData ();
};func (_bf *Decoder )DecodeNextPage ()([]byte ,error ){_bf ._fff ++;_g :=_bf ._fff ;return _bf .decodePage (_g );};