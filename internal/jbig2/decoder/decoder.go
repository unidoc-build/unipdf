//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_e "github.com/unidoc/unipdf/v3/internal/bitwise";_bd "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_d "github.com/unidoc/unipdf/v3/internal/jbig2/document";_cb "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";
);func (_dd *Decoder )PageNumber ()(int ,error ){const _ge ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _dd ._cc ==nil {return 0,_cb .Error (_ge ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_dd ._cc .NumberOfPages ),nil ;};func (_db *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _dc ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_ec ,_a :=_db .decodePageImage (pageNumber );if _a !=nil {return nil ,_cb .Wrap (_a ,_dc ,"");};return _ec ,nil ;};func (_bb *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _bb .decodePage (pageNumber )};func (_ae *Decoder )decodePageImage (_f int )(_c .Image ,error ){const _ga ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _f < 0{return nil ,_cb .Errorf (_ga ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_f );};if _f > int (_ae ._cc .NumberOfPages ){return nil ,_cb .Errorf (_ga ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_f );
};_ea ,_eb :=_ae ._cc .GetPage (_f );if _eb !=nil {return nil ,_cb .Wrap (_eb ,_ga ,"");};_gg ,_eb :=_ea .GetBitmap ();if _eb !=nil {return nil ,_cb .Wrap (_eb ,_ga ,"");};_gg .InverseData ();return _gg .ToImage (),nil ;};type Parameters struct{UnpaddedData bool ;
Color _bd .Color ;};func (_de *Decoder )DecodeNextPage ()([]byte ,error ){_de ._g ++;_ag :=_de ._g ;return _de .decodePage (_ag );};func Decode (input []byte ,parameters Parameters ,globals *_d .Globals )(*Decoder ,error ){_ba :=_e .NewReader (input );
_edd ,_dce :=_d .DecodeDocument (_ba ,globals );if _dce !=nil {return nil ,_dce ;};return &Decoder {_ca :_ba ,_cc :_edd ,_ed :parameters },nil ;};type Decoder struct{_ca _e .StreamReader ;_cc *_d .Document ;_g int ;_ed Parameters ;};func (_bf *Decoder )decodePage (_ac int )([]byte ,error ){const _eg ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";
if _ac < 0{return nil ,_cb .Errorf (_eg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ac );};if _ac > int (_bf ._cc .NumberOfPages ){return nil ,_cb .Errorf (_eg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ac );
};_dee ,_cf :=_bf ._cc .GetPage (_ac );if _cf !=nil {return nil ,_cb .Wrap (_cf ,_eg ,"");};_agd ,_cf :=_dee .GetBitmap ();if _cf !=nil {return nil ,_cb .Wrap (_cf ,_eg ,"");};_agd .InverseData ();if !_bf ._ed .UnpaddedData {return _agd .Data ,nil ;};return _agd .GetUnpaddedData ();
};