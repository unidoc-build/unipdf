//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_a "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_d "github.com/unidoc/unipdf/v3/internal/jbig2/document";_gd "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_c "image";);func (_bfg *Decoder )PageNumber ()(int ,error ){const _eeb ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _bfg ._ca ==nil {return 0,_gd .Error (_eeb ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_bfg ._ca .NumberOfPages ),nil ;};func (_gg *Decoder )DecodeNextPage ()([]byte ,error ){_gg ._f ++;_cg :=_gg ._f ;return _gg .decodePage (_cg );};func (_ee *Decoder )DecodePageImage (pageNumber int )(_c .Image ,error ){const _bf ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_cc ,_de :=_ee .decodePageImage (pageNumber );if _de !=nil {return nil ,_gd .Wrap (_de ,_bf ,"");};return _cc ,nil ;};func (_fd *Decoder )decodePageImage (_fce int )(_c .Image ,error ){const _af ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _fce < 0{return nil ,_gd .Errorf (_af ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_fce );};if _fce > int (_fd ._ca .NumberOfPages ){return nil ,_gd .Errorf (_af ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_fce );};_fdb ,_bd :=_fd ._ca .GetPage (_fce );if _bd !=nil {return nil ,_gd .Wrap (_bd ,_af ,"");};_be ,_bd :=_fdb .GetBitmap ();if _bd !=nil {return nil ,_gd .Wrap (_bd ,_af ,"");};return _be .ToImage (),nil ;};func (_fb *Decoder )decodePage (_ggc int )([]byte ,error ){const _cb ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ggc < 0{return nil ,_gd .Errorf (_cb ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ggc );};if _ggc > int (_fb ._ca .NumberOfPages ){return nil ,_gd .Errorf (_cb ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ggc );};_aa ,_fc :=_fb ._ca .GetPage (_ggc );if _fc !=nil {return nil ,_gd .Wrap (_fc ,_cb ,"");};_bb ,_fc :=_aa .GetBitmap ();if _fc !=nil {return nil ,_gd .Wrap (_fc ,_cb ,"");};_bb .InverseData ();if !_fb ._dc .UnpaddedData {return _bb .Data ,nil ;};return _bb .GetUnpaddedData ();};type Parameters struct{UnpaddedData bool ;Color _b .Color ;};func (_eg *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _eg .decodePage (pageNumber )};type Decoder struct{_e _a .StreamReader ;_ca *_d .Document ;_f int ;_dc Parameters ;};func Decode (input []byte ,parameters Parameters ,globals *_d .Globals )(*Decoder ,error ){_bg :=_a .NewReader (input );_fcc ,_fa :=_d .DecodeDocument (_bg ,globals );if _fa !=nil {return nil ,_fa ;};return &Decoder {_e :_bg ,_ca :_fcc ,_dc :parameters },nil ;};