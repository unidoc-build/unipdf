//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_g "errors";_b "fmt";_bf "github.com/unidoc/unipdf/v3/common";_de "github.com/unidoc/unipdf/v3/internal/bitwise";_ded "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_d "io";);type mmrCode int ;func (_fe *Decoder )createLittleEndianTable (_bgb [][3]int )([]*code ,error ){_fc :=make ([]*code ,_cce +1);for _afg :=0;_afg < len (_bgb );_afg ++{_gaa :=_f (_bgb [_afg ]);if _gaa ._ed <=_dfa {_bce :=_dfa -_gaa ._ed ;_fac :=_gaa ._dd <<uint (_bce );for _dc :=(1<<uint (_bce ))-1;_dc >=0;_dc --{_fea :=_fac |_dc ;_fc [_fea ]=_gaa ;};}else {_cbb :=_gaa ._dd >>uint (_gaa ._ed -_dfa );if _fc [_cbb ]==nil {var _ac =_f ([3]int {});_ac ._ea =make ([]*code ,_cef +1);_fc [_cbb ]=_ac ;};if _gaa ._ed <=_dfa +_cac {_ff :=_dfa +_cac -_gaa ._ed ;_ffa :=(_gaa ._dd <<uint (_ff ))&_cef ;_fc [_cbb ]._ga =true ;for _ag :=(1<<uint (_ff ))-1;_ag >=0;_ag --{_fc [_cbb ]._ea [_ffa |_ag ]=_gaa ;};}else {return nil ,_g .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _fc ,nil ;};func (_ccd *runData )align (){_ccd ._gbf =((_ccd ._gbf +7)>>3)<<3};type Decoder struct{_cbg ,_edd int ;_ec *runData ;_dbg []*code ;_fge []*code ;_gad []*code ;};func _f (_deb [3]int )*code {return &code {_ed :_deb [0],_dd :_deb [1],_da :_deb [2]}};type code struct{_ed int ;_dd int ;_da int ;_ea []*code ;_ga bool ;};func (_dedf *runData )uncompressGetCode (_gc []*code )(*code ,error ){return _dedf .uncompressGetCodeLittleEndian (_gc );};func (_caf *Decoder )uncompress2d (_gag *runData ,_gab []int ,_cfa int ,_efb []int ,_cgf int )(int ,error ){var (_ebeb int ;_dg int ;_bdc int ;_bfg =true ;_ee error ;_ad *code ;);_gab [_cfa ]=_cgf ;_gab [_cfa +1]=_cgf ;_gab [_cfa +2]=_cgf +1;_gab [_cfa +3]=_cgf +1;_bac :for _bdc < _cgf {_ad ,_ee =_gag .uncompressGetCode (_caf ._gad );if _ee !=nil {return EOL ,nil ;};if _ad ==nil {_gag ._gbf ++;break _bac ;};_gag ._gbf +=_ad ._ed ;switch mmrCode (_ad ._da ){case _cc :_bdc =_gab [_ebeb ];case _db :_bdc =_gab [_ebeb ]+1;case _ca :_bdc =_gab [_ebeb ]-1;case _cb :for {var _faa []*code ;if _bfg {_faa =_caf ._dbg ;}else {_faa =_caf ._fge ;};_ad ,_ee =_gag .uncompressGetCode (_faa );if _ee !=nil {return 0,_ee ;};if _ad ==nil {break _bac ;};_gag ._gbf +=_ad ._ed ;if _ad ._da < 64{if _ad ._da < 0{_efb [_dg ]=_bdc ;_dg ++;_ad =nil ;break _bac ;};_bdc +=_ad ._da ;_efb [_dg ]=_bdc ;_dg ++;break ;};_bdc +=_ad ._da ;};_efd :=_bdc ;_dca :for {var _fbb []*code ;if !_bfg {_fbb =_caf ._dbg ;}else {_fbb =_caf ._fge ;};_ad ,_ee =_gag .uncompressGetCode (_fbb );if _ee !=nil {return 0,_ee ;};if _ad ==nil {break _bac ;};_gag ._gbf +=_ad ._ed ;if _ad ._da < 64{if _ad ._da < 0{_efb [_dg ]=_bdc ;_dg ++;break _bac ;};_bdc +=_ad ._da ;if _bdc < _cgf ||_bdc !=_efd {_efb [_dg ]=_bdc ;_dg ++;};break _dca ;};_bdc +=_ad ._da ;};for _bdc < _cgf &&_gab [_ebeb ]<=_bdc {_ebeb +=2;};continue _bac ;case _dedd :_ebeb ++;_bdc =_gab [_ebeb ];_ebeb ++;continue _bac ;case _ce :_bdc =_gab [_ebeb ]+2;case _af :_bdc =_gab [_ebeb ]-2;case _gf :_bdc =_gab [_ebeb ]+3;case _gb :_bdc =_gab [_ebeb ]-3;default:if _gag ._gbf ==12&&_ad ._da ==EOL {_gag ._gbf =0;if _ ,_ee =_caf .uncompress1d (_gag ,_gab ,_cgf );_ee !=nil {return 0,_ee ;};_gag ._gbf ++;if _ ,_ee =_caf .uncompress1d (_gag ,_efb ,_cgf );_ee !=nil {return 0,_ee ;};_ccb ,_efg :=_caf .uncompress1d (_gag ,_gab ,_cgf );if _efg !=nil {return EOF ,_efg ;};_gag ._gbf ++;return _ccb ,nil ;};_bdc =_cgf ;continue _bac ;};if _bdc <=_cgf {_bfg =!_bfg ;_efb [_dg ]=_bdc ;_dg ++;if _ebeb > 0{_ebeb --;}else {_ebeb ++;};for _bdc < _cgf &&_gab [_ebeb ]<=_bdc {_ebeb +=2;};};};if _efb [_dg ]!=_cgf {_efb [_dg ]=_cgf ;};if _ad ==nil {return EOL ,nil ;};return _dg ,nil ;};func (_dbd *Decoder )UncompressMMR ()(_fbc *_ded .Bitmap ,_be error ){_fbc =_ded .New (_dbd ._cbg ,_dbd ._edd );_cca :=make ([]int ,_fbc .Width +5);_bc :=make ([]int ,_fbc .Width +5);_bc [0]=_fbc .Width ;_dab :=1;var _ddg int ;for _eaa :=0;_eaa < _fbc .Height ;_eaa ++{_ddg ,_be =_dbd .uncompress2d (_dbd ._ec ,_bc ,_dab ,_cca ,_fbc .Width );if _be !=nil {return nil ,_be ;};if _ddg ==EOF {break ;};if _ddg > 0{_be =_dbd .fillBitmap (_fbc ,_eaa ,_cca ,_ddg );if _be !=nil {return nil ,_be ;};};_bc ,_cca =_cca ,_bc ;_dab =_ddg ;};if _be =_dbd .detectAndSkipEOL ();_be !=nil {return nil ,_be ;};_dbd ._ec .align ();return _fbc ,nil ;};const (_dda int =1024<<7;_bdcf int =3;_cd uint =24;);func (_ffad *Decoder )fillBitmap (_bb *_ded .Bitmap ,_ba int ,_feaa []int ,_ebe int )error {var _ab byte ;_afb :=0;_bde :=_bb .GetByteIndex (_afb ,_ba );for _cg :=0;_cg < _ebe ;_cg ++{_ae :=byte (1);_ccaf :=_feaa [_cg ];if (_cg &1)==0{_ae =0;};for _afb < _ccaf {_ab =(_ab <<1)|_ae ;_afb ++;if (_afb &7)==0{if _fgb :=_bb .SetByte (_bde ,_ab );_fgb !=nil {return _fgb ;};_bde ++;_ab =0;};};};if (_afb &7)!=0{_ab <<=uint (8-(_afb &7));if _cf :=_bb .SetByte (_bde ,_ab );_cf !=nil {return _cf ;};};return nil ;};func _ge (_c ,_bd int )int {if _c > _bd {return _bd ;};return _c ;};func New (r _de .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_bgef :=&Decoder {_cbg :width ,_edd :height };_fb ,_fd :=_de .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _fd !=nil {return nil ,_fd ;};_fda ,_fd :=_bfcg (_fb );if _fd !=nil {return nil ,_fd ;};_bgef ._ec =_fda ;if _fa :=_bgef .initTables ();_fa !=nil {return nil ,_fa ;};return _bgef ,nil ;};func (_bfb *Decoder )initTables ()(_gfd error ){if _bfb ._dbg ==nil {_bfb ._dbg ,_gfd =_bfb .createLittleEndianTable (_fg );if _gfd !=nil {return ;};_bfb ._fge ,_gfd =_bfb .createLittleEndianTable (_ef );if _gfd !=nil {return ;};_bfb ._gad ,_gfd =_bfb .createLittleEndianTable (_eab );if _gfd !=nil {return ;};};return nil ;};const (_dedd mmrCode =iota ;_cb ;_cc ;_db ;_ce ;_gf ;_ca ;_af ;_gb ;_bge ;_eb ;);const (EOF =-3;_gg =-2;EOL =-1;_dfa =8;_cce =(1<<_dfa )-1;_cac =5;_cef =(1<<_cac )-1;);var (_eab =[][3]int {{4,0x1,int (_dedd )},{3,0x1,int (_cb )},{1,0x1,int (_cc )},{3,0x3,int (_db )},{6,0x3,int (_ce )},{7,0x3,int (_gf )},{3,0x2,int (_ca )},{6,0x2,int (_af )},{7,0x2,int (_gb )},{10,0xf,int (_bge )},{12,0xf,int (_eb )},{12,0x1,int (EOL )}};_fg =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_gg },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_gg },{11,0x01,_gg },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};_ef =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_gg },{9,0x18,15},{10,0x01,_gg },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_gg },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};);func (_gd *Decoder )detectAndSkipEOL ()error {for {_gadb ,_eg :=_gd ._ec .uncompressGetCode (_gd ._gad );if _eg !=nil {return _eg ;};if _gadb !=nil &&_gadb ._da ==EOL {_gd ._ec ._gbf +=_gadb ._ed ;}else {return nil ;};};};func (_df *code )String ()string {return _b .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_df ._ed ,_df ._dd ,_df ._da );};func (_cdg *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_ceg :=_cdg ._gbf -_cdg ._ecc ;if _ceg < 0||_ceg > 24{_agd :=(_cdg ._gbf >>3)-_cdg ._afd ;if _agd >=_cdg ._fbcd {_agd +=_cdg ._afd ;if _faad :=_cdg .fillBuffer (_agd );_faad !=nil {return 0,_faad ;};_agd -=_cdg ._afd ;};_bceg :=(uint32 (_cdg ._fbg [_agd ]&0xFF)<<16)|(uint32 (_cdg ._fbg [_agd +1]&0xFF)<<8)|(uint32 (_cdg ._fbg [_agd +2]&0xFF));_ebb :=uint32 (_cdg ._gbf &7);_bceg <<=_ebb ;_cdg ._aff =int (_bceg );}else {_gbfc :=_cdg ._ecc &7;_gda :=7-_gbfc ;if _ceg <=_gda {_cdg ._aff <<=uint (_ceg );}else {_gee :=(_cdg ._ecc >>3)+3-_cdg ._afd ;if _gee >=_cdg ._fbcd {_gee +=_cdg ._afd ;if _faag :=_cdg .fillBuffer (_gee );_faag !=nil {return 0,_faag ;};_gee -=_cdg ._afd ;};_gbfc =8-_gbfc ;for {_cdg ._aff <<=uint (_gbfc );_cdg ._aff |=int (uint (_cdg ._fbg [_gee ])&0xFF);_ceg -=_gbfc ;_gee ++;_gbfc =8;if !(_ceg >=8){break ;};};_cdg ._aff <<=uint (_ceg );};};_cdg ._ecc =_cdg ._gbf ;return _cdg ._aff ,nil ;};func _bg (_bfc ,_a int )int {if _bfc < _a {return _a ;};return _bfc ;};func _bfcg (_efe *_de .SubstreamReader )(*runData ,error ){_ddga :=&runData {_aa :_efe ,_gbf :0,_ecc :1};_aaf :=_ge (_bg (_bdcf ,int (_efe .Length ())),_dda );_ddga ._fbg =make ([]byte ,_aaf );if _dfg :=_ddga .fillBuffer (0);_dfg !=nil {if _dfg ==_d .EOF {_ddga ._fbg =make ([]byte ,10);_bf .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_dfg );}else {return nil ,_dfg ;};};return _ddga ,nil ;};func (_gac *runData )uncompressGetCodeLittleEndian (_cgg []*code )(*code ,error ){_cad ,_adg :=_gac .uncompressGetNextCodeLittleEndian ();if _adg !=nil {_bf .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_adg );return nil ,_adg ;};_cad &=0xffffff;_gde :=_cad >>(_cd -_dfa );_acf :=_cgg [_gde ];if _acf !=nil &&_acf ._ga {_gde =(_cad >>(_cd -_dfa -_cac ))&_cef ;_acf =_acf ._ea [_gde ];};return _acf ,nil ;};func (_cfd *Decoder )uncompress1d (_cfdd *runData ,_fad []int ,_aeg int )(int ,error ){var (_fbf =true ;_bda int ;_beg *code ;_bcc int ;_ddb error ;);_gbd :for _bda < _aeg {_bff :for {if _fbf {_beg ,_ddb =_cfdd .uncompressGetCode (_cfd ._dbg );if _ddb !=nil {return 0,_ddb ;};}else {_beg ,_ddb =_cfdd .uncompressGetCode (_cfd ._fge );if _ddb !=nil {return 0,_ddb ;};};_cfdd ._gbf +=_beg ._ed ;if _beg ._da < 0{break _gbd ;};_bda +=_beg ._da ;if _beg ._da < 64{_fbf =!_fbf ;_fad [_bcc ]=_bda ;_bcc ++;break _bff ;};};};if _fad [_bcc ]!=_aeg {_fad [_bcc ]=_aeg ;};_ccef :=EOL ;if _beg !=nil &&_beg ._da !=EOL {_ccef =_bcc ;};return _ccef ,nil ;};func (_gacf *runData )fillBuffer (_eee int )error {_gacf ._afd =_eee ;_ ,_ggc :=_gacf ._aa .Seek (int64 (_eee ),_d .SeekStart );if _ggc !=nil {if _ggc ==_d .EOF {_bf .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_gacf ._fbcd =-1;}else {return _ggc ;};};if _ggc ==nil {_gacf ._fbcd ,_ggc =_gacf ._aa .Read (_gacf ._fbg );if _ggc !=nil {if _ggc ==_d .EOF {_bf .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_gacf ._fbcd =-1;}else {return _ggc ;};};};if _gacf ._fbcd > -1&&_gacf ._fbcd < 3{for _gacf ._fbcd < 3{_cgc ,_gacc :=_gacf ._aa .ReadByte ();if _gacc !=nil {if _gacc ==_d .EOF {_gacf ._fbg [_gacf ._fbcd ]=0;}else {return _gacc ;};}else {_gacf ._fbg [_gacf ._fbcd ]=_cgc &0xFF;};_gacf ._fbcd ++;};};_gacf ._fbcd -=3;if _gacf ._fbcd < 0{_gacf ._fbg =make ([]byte ,len (_gacf ._fbg ));_gacf ._fbcd =len (_gacf ._fbg )-3;};return nil ;};type runData struct{_aa *_de .SubstreamReader ;_gbf int ;_ecc int ;_aff int ;_fbg []byte ;_afd int ;_fbcd int ;};