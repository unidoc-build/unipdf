//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_f "errors";_a "fmt";_c "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_ea "io";);func _ae (_eg [3]int )*code {return &code {_gc :_eg [0],_cd :_eg [1],_b :_eg [2]}};
const (_dd mmrCode =iota ;_cee ;_aa ;_aec ;_fg ;_fb ;_cf ;_bd ;_cc ;_cff ;_ee ;);const (EOF =-3;_dg =-2;EOL =-1;_cec =8;_ag =(1<<_cec )-1;_ba =5;_gb =(1<<_ba )-1;);func _da (_gf ,_eac int )int {if _gf > _eac {return _eac ;};return _gf ;};func (_ddf *Decoder )createLittleEndianTable (_cece [][3]int )([]*code ,error ){_fdd :=make ([]*code ,_ag +1);
for _gfe :=0;_gfe < len (_cece );_gfe ++{_gga :=_ae (_cece [_gfe ]);if _gga ._gc <=_cec {_ggc :=_cec -_gga ._gc ;_cg :=_gga ._cd <<uint (_ggc );for _cdf :=(1<<uint (_ggc ))-1;_cdf >=0;_cdf --{_ccd :=_cg |_cdf ;_fdd [_ccd ]=_gga ;};}else {_beg :=_gga ._cd >>uint (_gga ._gc -_cec );
if _fdd [_beg ]==nil {var _ca =_ae ([3]int {});_ca ._ac =make ([]*code ,_gb +1);_fdd [_beg ]=_ca ;};if _gga ._gc <=_cec +_ba {_db :=_cec +_ba -_gga ._gc ;_cgf :=(_gga ._cd <<uint (_db ))&_gb ;_fdd [_beg ]._bb =true ;for _gag :=(1<<uint (_db ))-1;_gag >=0;
_gag --{_fdd [_beg ]._ac [_cgf |_gag ]=_gga ;};}else {return nil ,_f .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _fdd ,nil ;};func (_fdee *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_gfg :=_fdee ._adg -_fdee ._dce ;if _gfg < 0||_gfg > 24{_aeg :=(_fdee ._adg >>3)-_fdee ._cfd ;if _aeg >=_fdee ._ggf {_aeg +=_fdee ._cfd ;if _gbe :=_fdee .fillBuffer (_aeg );
_gbe !=nil {return 0,_gbe ;};_aeg -=_fdee ._cfd ;};_afdga :=(uint32 (_fdee ._aae [_aeg ]&0xFF)<<16)|(uint32 (_fdee ._aae [_aeg +1]&0xFF)<<8)|(uint32 (_fdee ._aae [_aeg +2]&0xFF));_eb :=uint32 (_fdee ._adg &7);_afdga <<=_eb ;_fdee ._cca =int (_afdga );}else {_eae :=_fdee ._dce &7;
_gdee :=7-_eae ;if _gfg <=_gdee {_fdee ._cca <<=uint (_gfg );}else {_egc :=(_fdee ._dce >>3)+3-_fdee ._cfd ;if _egc >=_fdee ._ggf {_egc +=_fdee ._cfd ;if _cad :=_fdee .fillBuffer (_egc );_cad !=nil {return 0,_cad ;};_egc -=_fdee ._cfd ;};_eae =8-_eae ;
for {_fdee ._cca <<=uint (_eae );_fdee ._cca |=int (uint (_fdee ._aae [_egc ])&0xFF);_gfg -=_eae ;_egc ++;_eae =8;if !(_gfg >=8){break ;};};_fdee ._cca <<=uint (_gfg );};};_fdee ._dce =_fdee ._adg ;return _fdee ._cca ,nil ;};func (_gca *runData )align (){_gca ._adg =((_gca ._adg +7)>>3)<<3};
type runData struct{_caac *_d .SubstreamReader ;_adg int ;_dce int ;_cca int ;_aae []byte ;_cfd int ;_ggf int ;};type Decoder struct{_ed ,_de int ;_ceb *runData ;_fd []*code ;_eec []*code ;_ccb []*code ;};type code struct{_gc int ;_cd int ;_b int ;_ac []*code ;
_bb bool ;};func (_geb *runData )uncompressGetCodeLittleEndian (_cacf []*code )(*code ,error ){_fbe ,_fde :=_geb .uncompressGetNextCodeLittleEndian ();if _fde !=nil {_c .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_fde );
return nil ,_fde ;};_fbe &=0xffffff;_agg :=_fbe >>(_dge -_cec );_edgf :=_cacf [_agg ];if _edgf !=nil &&_edgf ._bb {_agg =(_fbe >>(_dge -_cec -_ba ))&_gb ;_edgf =_edgf ._ac [_agg ];};return _edgf ,nil ;};func _fe (_bf ,_ce int )int {if _bf < _ce {return _ce ;
};return _bf ;};var (_fc =[][3]int {{4,0x1,int (_dd )},{3,0x1,int (_cee )},{1,0x1,int (_aa )},{3,0x3,int (_aec )},{6,0x3,int (_fg )},{7,0x3,int (_fb )},{3,0x2,int (_cf )},{6,0x2,int (_bd )},{7,0x2,int (_cc )},{10,0xf,int (_cff )},{12,0xf,int (_ee )},{12,0x1,int (EOL )}};
_ad =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_dg },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_dg },{11,0x01,_dg },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_ga =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_dg },{9,0x18,15},{10,0x01,_dg },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_dg },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_ggd *Decoder )uncompress2d (_gbd *runData ,_fgd []int ,_dgb int ,_aed []int ,_bge int )(int ,error ){var (_gceb int ;_baf int ;_gbb int ;_fcg =true ;_fa error ;_fbg *code ;);_fgd [_dgb ]=_bge ;_fgd [_dgb +1]=_bge ;_fgd [_dgb +2]=_bge +1;_fgd [_dgb +3]=_bge +1;
_efc :for _gbb < _bge {_fbg ,_fa =_gbd .uncompressGetCode (_ggd ._ccb );if _fa !=nil {return EOL ,nil ;};if _fbg ==nil {_gbd ._adg ++;break _efc ;};_gbd ._adg +=_fbg ._gc ;switch mmrCode (_fbg ._b ){case _aa :_gbb =_fgd [_gceb ];case _aec :_gbb =_fgd [_gceb ]+1;
case _cf :_gbb =_fgd [_gceb ]-1;case _cee :for {var _bdg []*code ;if _fcg {_bdg =_ggd ._fd ;}else {_bdg =_ggd ._eec ;};_fbg ,_fa =_gbd .uncompressGetCode (_bdg );if _fa !=nil {return 0,_fa ;};if _fbg ==nil {break _efc ;};_gbd ._adg +=_fbg ._gc ;if _fbg ._b < 64{if _fbg ._b < 0{_aed [_baf ]=_gbb ;
_baf ++;_fbg =nil ;break _efc ;};_gbb +=_fbg ._b ;_aed [_baf ]=_gbb ;_baf ++;break ;};_gbb +=_fbg ._b ;};_deb :=_gbb ;_df :for {var _bcg []*code ;if !_fcg {_bcg =_ggd ._fd ;}else {_bcg =_ggd ._eec ;};_fbg ,_fa =_gbd .uncompressGetCode (_bcg );if _fa !=nil {return 0,_fa ;
};if _fbg ==nil {break _efc ;};_gbd ._adg +=_fbg ._gc ;if _fbg ._b < 64{if _fbg ._b < 0{_aed [_baf ]=_gbb ;_baf ++;break _efc ;};_gbb +=_fbg ._b ;if _gbb < _bge ||_gbb !=_deb {_aed [_baf ]=_gbb ;_baf ++;};break _df ;};_gbb +=_fbg ._b ;};for _gbb < _bge &&_fgd [_gceb ]<=_gbb {_gceb +=2;
};continue _efc ;case _dd :_gceb ++;_gbb =_fgd [_gceb ];_gceb ++;continue _efc ;case _fg :_gbb =_fgd [_gceb ]+2;case _bd :_gbb =_fgd [_gceb ]-2;case _fb :_gbb =_fgd [_gceb ]+3;case _cc :_gbb =_fgd [_gceb ]-3;default:if _gbd ._adg ==12&&_fbg ._b ==EOL {_gbd ._adg =0;
if _ ,_fa =_ggd .uncompress1d (_gbd ,_fgd ,_bge );_fa !=nil {return 0,_fa ;};_gbd ._adg ++;if _ ,_fa =_ggd .uncompress1d (_gbd ,_aed ,_bge );_fa !=nil {return 0,_fa ;};_acd ,_ge :=_ggd .uncompress1d (_gbd ,_fgd ,_bge );if _ge !=nil {return EOF ,_ge ;};
_gbd ._adg ++;return _acd ,nil ;};_gbb =_bge ;continue _efc ;};if _gbb <=_bge {_fcg =!_fcg ;_aed [_baf ]=_gbb ;_baf ++;if _gceb > 0{_gceb --;}else {_gceb ++;};for _gbb < _bge &&_fgd [_gceb ]<=_gbb {_gceb +=2;};};};if _aed [_baf ]!=_bge {_aed [_baf ]=_bge ;
};if _fbg ==nil {return EOL ,nil ;};return _baf ,nil ;};func (_aea *Decoder )fillBitmap (_gce *_g .Bitmap ,_caa int ,_gcf []int ,_bfa int )error {var _ec byte ;_fgb :=0;_afdg :=_gce .GetByteIndex (_fgb ,_caa );for _gfa :=0;_gfa < _bfa ;_gfa ++{_ab :=byte (1);
_gfea :=_gcf [_gfa ];if (_gfa &1)==0{_ab =0;};for _fgb < _gfea {_ec =(_ec <<1)|_ab ;_fgb ++;if (_fgb &7)==0{if _egf :=_gce .SetByte (_afdg ,_ec );_egf !=nil {return _egf ;};_afdg ++;_ec =0;};};};if (_fgb &7)!=0{_ec <<=uint (8-(_fgb &7));if _bbe :=_gce .SetByte (_afdg ,_ec );
_bbe !=nil {return _bbe ;};};return nil ;};type mmrCode int ;func (_afg *Decoder )uncompress1d (_dga *runData ,_cae []int ,_eda int )(int ,error ){var (_ccf =true ;_gde int ;_ceee *code ;_gfb int ;_cac error ;);_eacg :for _gde < _eda {_cb :for {if _ccf {_ceee ,_cac =_dga .uncompressGetCode (_afg ._fd );
if _cac !=nil {return 0,_cac ;};}else {_ceee ,_cac =_dga .uncompressGetCode (_afg ._eec );if _cac !=nil {return 0,_cac ;};};_dga ._adg +=_ceee ._gc ;if _ceee ._b < 0{break _eacg ;};_gde +=_ceee ._b ;if _ceee ._b < 64{_ccf =!_ccf ;_cae [_gfb ]=_gde ;_gfb ++;
break _cb ;};};};if _cae [_gfb ]!=_eda {_cae [_gfb ]=_eda ;};_acf :=EOL ;if _ceee !=nil &&_ceee ._b !=EOL {_acf =_gfb ;};return _acf ,nil ;};func (_afd *Decoder )detectAndSkipEOL ()error {for {_aff ,_aac :=_afd ._ceb .uncompressGetCode (_afd ._ccb );if _aac !=nil {return _aac ;
};if _aff !=nil &&_aff ._b ==EOL {_afd ._ceb ._adg +=_aff ._gc ;}else {return nil ;};};};const (_ege int =1024<<7;_dgf int =3;_dge uint =24;);func (_dab *runData )uncompressGetCode (_dbc []*code )(*code ,error ){return _dab .uncompressGetCodeLittleEndian (_dbc );
};func _ddfg (_ffg *_d .SubstreamReader )(*runData ,error ){_edg :=&runData {_caac :_ffg ,_adg :0,_dce :1};_dda :=_da (_fe (_dgf ,int (_ffg .Length ())),_ege );_edg ._aae =make ([]byte ,_dda );if _agd :=_edg .fillBuffer (0);_agd !=nil {if _agd ==_ea .EOF {_edg ._aae =make ([]byte ,10);
_c .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_agd );}else {return nil ,_agd ;};};return _edg ,nil ;};func (_eeb *runData )fillBuffer (_afgb int )error {_eeb ._cfd =_afgb ;_ ,_adgb :=_eeb ._caac .Seek (int64 (_afgb ),_ea .SeekStart );
if _adgb !=nil {if _adgb ==_ea .EOF {_c .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_eeb ._ggf =-1;}else {return _adgb ;};};if _adgb ==nil {_eeb ._ggf ,_adgb =_eeb ._caac .Read (_eeb ._aae );if _adgb !=nil {if _adgb ==_ea .EOF {_c .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");
_eeb ._ggf =-1;}else {return _adgb ;};};};if _eeb ._ggf > -1&&_eeb ._ggf < 3{for _eeb ._ggf < 3{_ffe ,_ecb :=_eeb ._caac .ReadByte ();if _ecb !=nil {if _ecb ==_ea .EOF {_eeb ._aae [_eeb ._ggf ]=0;}else {return _ecb ;};}else {_eeb ._aae [_eeb ._ggf ]=_ffe &0xFF;
};_eeb ._ggf ++;};};_eeb ._ggf -=3;if _eeb ._ggf < 0{_eeb ._aae =make ([]byte ,len (_eeb ._aae ));_eeb ._ggf =len (_eeb ._aae )-3;};return nil ;};func (_dee *Decoder )UncompressMMR ()(_be *_g .Bitmap ,_bfb error ){_be =_g .New (_dee ._ed ,_dee ._de );_aaf :=make ([]int ,_be .Width +5);
_ff :=make ([]int ,_be .Width +5);_ff [0]=_be .Width ;_gg :=1;var _gd int ;for _ef :=0;_ef < _be .Height ;_ef ++{_gd ,_bfb =_dee .uncompress2d (_dee ._ceb ,_ff ,_gg ,_aaf ,_be .Width );if _bfb !=nil {return nil ,_bfb ;};if _gd ==EOF {break ;};if _gd > 0{_bfb =_dee .fillBitmap (_be ,_ef ,_aaf ,_gd );
if _bfb !=nil {return nil ,_bfb ;};};_ff ,_aaf =_aaf ,_ff ;_gg =_gd ;};if _bfb =_dee .detectAndSkipEOL ();_bfb !=nil {return nil ,_bfb ;};_dee ._ceb .align ();return _be ,nil ;};func (_cfe *Decoder )initTables ()(_ece error ){if _cfe ._fd ==nil {_cfe ._fd ,_ece =_cfe .createLittleEndianTable (_ad );
if _ece !=nil {return ;};_cfe ._eec ,_ece =_cfe .createLittleEndianTable (_ga );if _ece !=nil {return ;};_cfe ._ccb ,_ece =_cfe .createLittleEndianTable (_fc );if _ece !=nil {return ;};};return nil ;};func (_bg *code )String ()string {return _a .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bg ._gc ,_bg ._cd ,_bg ._b );
};func New (r _d .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_af :=&Decoder {_ed :width ,_de :height };_dc ,_bc :=_d .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _bc !=nil {return nil ,_bc ;
};_fdb ,_bc :=_ddfg (_dc );if _bc !=nil {return nil ,_bc ;};_af ._ceb =_fdb ;if _fge :=_af .initTables ();_fge !=nil {return nil ,_fge ;};return _af ,nil ;};