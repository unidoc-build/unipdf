//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_f "errors";_g "fmt";_ff "github.com/unidoc/unipdf/v3/common";_fe "github.com/unidoc/unipdf/v3/internal/bitwise";_ad "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_a "io";);type mmrCode int ;func (_dca *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_efa :=_dca ._eaa -_dca ._daf ;
if _efa < 0||_efa > 24{_gdag :=(_dca ._eaa >>3)-_dca ._dfb ;if _gdag >=_dca ._bdc {_gdag +=_dca ._dfb ;if _abae :=_dca .fillBuffer (_gdag );_abae !=nil {return 0,_abae ;};_gdag -=_dca ._dfb ;};_gfa :=(uint32 (_dca ._cee [_gdag ]&0xFF)<<16)|(uint32 (_dca ._cee [_gdag +1]&0xFF)<<8)|(uint32 (_dca ._cee [_gdag +2]&0xFF));
_cad :=uint32 (_dca ._eaa &7);_gfa <<=_cad ;_dca ._bff =int (_gfa );}else {_cdd :=_dca ._daf &7;_af :=7-_cdd ;if _efa <=_af {_dca ._bff <<=uint (_efa );}else {_gbf :=(_dca ._daf >>3)+3-_dca ._dfb ;if _gbf >=_dca ._bdc {_gbf +=_dca ._dfb ;if _cag :=_dca .fillBuffer (_gbf );
_cag !=nil {return 0,_cag ;};_gbf -=_dca ._dfb ;};_cdd =8-_cdd ;for {_dca ._bff <<=uint (_cdd );_dca ._bff |=int (uint (_dca ._cee [_gbf ])&0xFF);_efa -=_cdd ;_gbf ++;_cdd =8;if !(_efa >=8){break ;};};_dca ._bff <<=uint (_efa );};};_dca ._daf =_dca ._eaa ;
return _dca ._bff ,nil ;};const (_gaf mmrCode =iota ;_fea ;_ec ;_cb ;_cd ;_bg ;_gg ;_fg ;_gf ;_aba ;_ge ;);type Decoder struct{_gb ,_ag int ;_feg *runData ;_aed []*code ;_de []*code ;_abac []*code ;};func (_ea *Decoder )createLittleEndianTable (_abb [][3]int )([]*code ,error ){_fc :=make ([]*code ,_eg +1);
for _abdd :=0;_abdd < len (_abb );_abdd ++{_agg :=_aee (_abb [_abdd ]);if _agg ._ab <=_abf {_cf :=_abf -_agg ._ab ;_ac :=_agg ._c <<uint (_cf );for _dfa :=(1<<uint (_cf ))-1;_dfa >=0;_dfa --{_cdf :=_ac |_dfa ;_fc [_cdf ]=_agg ;};}else {_ceb :=_agg ._c >>uint (_agg ._ab -_abf );
if _fc [_ceb ]==nil {var _cfc =_aee ([3]int {});_cfc ._fd =make ([]*code ,_ed +1);_fc [_ceb ]=_cfc ;};if _agg ._ab <=_abf +_gdd {_ba :=_abf +_gdd -_agg ._ab ;_fga :=(_agg ._c <<uint (_ba ))&_ed ;_fc [_ceb ]._ae =true ;for _dadf :=(1<<uint (_ba ))-1;_dadf >=0;
_dadf --{_fc [_ceb ]._fd [_fga |_dadf ]=_agg ;};}else {return nil ,_f .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");
};};};return _fc ,nil ;};func New (r _fe .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_dad :=&Decoder {_gb :width ,_ag :height };_cbg ,_geg :=_fe .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _geg !=nil {return nil ,_geg ;
};_ffg ,_geg :=_egge (_cbg );if _geg !=nil {return nil ,_geg ;};_dad ._feg =_ffg ;if _bga :=_dad .initTables ();_bga !=nil {return nil ,_bga ;};return _dad ,nil ;};func (_ede *Decoder )fillBitmap (_bdb *_ad .Bitmap ,_egg int ,_efed []int ,_aga int )error {var _gff byte ;
_efg :=0;_cg :=_bdb .GetByteIndex (_efg ,_egg );for _ecd :=0;_ecd < _aga ;_ecd ++{_dd :=byte (1);_ece :=_efed [_ecd ];if (_ecd &1)==0{_dd =0;};for _efg < _ece {_gff =(_gff <<1)|_dd ;_efg ++;if (_efg &7)==0{if _bag :=_bdb .SetByte (_cg ,_gff );_bag !=nil {return _bag ;
};_cg ++;_gff =0;};};};if (_efg &7)!=0{_gff <<=uint (8-(_efg &7));if _bgb :=_bdb .SetByte (_cg ,_gff );_bgb !=nil {return _bgb ;};};return nil ;};func (_gba *Decoder )initTables ()(_gde error ){if _gba ._aed ==nil {_gba ._aed ,_gde =_gba .createLittleEndianTable (_dbg );
if _gde !=nil {return ;};_gba ._de ,_gde =_gba .createLittleEndianTable (_efe );if _gde !=nil {return ;};_gba ._abac ,_gde =_gba .createLittleEndianTable (_cba );if _gde !=nil {return ;};};return nil ;};func _aee (_d [3]int )*code {return &code {_ab :_d [0],_c :_d [1],_e :_d [2]}};
func (_bce *runData )align (){_bce ._eaa =((_bce ._eaa +7)>>3)<<3};func (_dfd *Decoder )uncompress2d (_cfg *runData ,_aeec []int ,_bcb int ,_efb []int ,_ebf int )(int ,error ){var (_agd int ;_dbc int ;_eafg int ;_ega =true ;_dff error ;_ebb *code ;);_aeec [_bcb ]=_ebf ;
_aeec [_bcb +1]=_ebf ;_aeec [_bcb +2]=_ebf +1;_aeec [_bcb +3]=_ebf +1;_dbgb :for _eafg < _ebf {_ebb ,_dff =_cfg .uncompressGetCode (_dfd ._abac );if _dff !=nil {return EOL ,nil ;};if _ebb ==nil {_cfg ._eaa ++;break _dbgb ;};_cfg ._eaa +=_ebb ._ab ;switch mmrCode (_ebb ._e ){case _ec :_eafg =_aeec [_agd ];
case _cb :_eafg =_aeec [_agd ]+1;case _gg :_eafg =_aeec [_agd ]-1;case _fea :for {var _abfe []*code ;if _ega {_abfe =_dfd ._aed ;}else {_abfe =_dfd ._de ;};_ebb ,_dff =_cfg .uncompressGetCode (_abfe );if _dff !=nil {return 0,_dff ;};if _ebb ==nil {break _dbgb ;
};_cfg ._eaa +=_ebb ._ab ;if _ebb ._e < 64{if _ebb ._e < 0{_efb [_dbc ]=_eafg ;_dbc ++;_ebb =nil ;break _dbgb ;};_eafg +=_ebb ._e ;_efb [_dbc ]=_eafg ;_dbc ++;break ;};_eafg +=_ebb ._e ;};_bf :=_eafg ;_ca :for {var _ced []*code ;if !_ega {_ced =_dfd ._aed ;
}else {_ced =_dfd ._de ;};_ebb ,_dff =_cfg .uncompressGetCode (_ced );if _dff !=nil {return 0,_dff ;};if _ebb ==nil {break _dbgb ;};_cfg ._eaa +=_ebb ._ab ;if _ebb ._e < 64{if _ebb ._e < 0{_efb [_dbc ]=_eafg ;_dbc ++;break _dbgb ;};_eafg +=_ebb ._e ;if _eafg < _ebf ||_eafg !=_bf {_efb [_dbc ]=_eafg ;
_dbc ++;};break _ca ;};_eafg +=_ebb ._e ;};for _eafg < _ebf &&_aeec [_agd ]<=_eafg {_agd +=2;};continue _dbgb ;case _gaf :_agd ++;_eafg =_aeec [_agd ];_agd ++;continue _dbgb ;case _cd :_eafg =_aeec [_agd ]+2;case _fg :_eafg =_aeec [_agd ]-2;case _bg :_eafg =_aeec [_agd ]+3;
case _gf :_eafg =_aeec [_agd ]-3;default:if _cfg ._eaa ==12&&_ebb ._e ==EOL {_cfg ._eaa =0;if _ ,_dff =_dfd .uncompress1d (_cfg ,_aeec ,_ebf );_dff !=nil {return 0,_dff ;};_cfg ._eaa ++;if _ ,_dff =_dfd .uncompress1d (_cfg ,_efb ,_ebf );_dff !=nil {return 0,_dff ;
};_ggb ,_bb :=_dfd .uncompress1d (_cfg ,_aeec ,_ebf );if _bb !=nil {return EOF ,_bb ;};_cfg ._eaa ++;return _ggb ,nil ;};_eafg =_ebf ;continue _dbgb ;};if _eafg <=_ebf {_ega =!_ega ;_efb [_dbc ]=_eafg ;_dbc ++;if _agd > 0{_agd --;}else {_agd ++;};for _eafg < _ebf &&_aeec [_agd ]<=_eafg {_agd +=2;
};};};if _efb [_dbc ]!=_ebf {_efb [_dbc ]=_ebf ;};if _ebb ==nil {return EOL ,nil ;};return _dbc ,nil ;};const (EOF =-3;_gd =-2;EOL =-1;_abf =8;_eg =(1<<_abf )-1;_gdd =5;_ed =(1<<_gdd )-1;);func (_bgd *Decoder )UncompressMMR ()(_bd *_ad .Bitmap ,_ecb error ){_bd =_ad .New (_bgd ._gb ,_bgd ._ag );
_adb :=make ([]int ,_bd .Width +5);_abd :=make ([]int ,_bd .Width +5);_abd [0]=_bd .Width ;_fec :=1;var _ce int ;for _efea :=0;_efea < _bd .Height ;_efea ++{_ce ,_ecb =_bgd .uncompress2d (_bgd ._feg ,_abd ,_fec ,_adb ,_bd .Width );if _ecb !=nil {return nil ,_ecb ;
};if _ce ==EOF {break ;};if _ce > 0{_ecb =_bgd .fillBitmap (_bd ,_efea ,_adb ,_ce );if _ecb !=nil {return nil ,_ecb ;};};_abd ,_adb =_adb ,_abd ;_fec =_ce ;};if _ecb =_bgd .detectAndSkipEOL ();_ecb !=nil {return nil ,_ecb ;};_bgd ._feg .align ();return _bd ,nil ;
};const (_gdb int =1024<<7;_dg int =3;_aa uint =24;);func (_fb *Decoder )uncompress1d (_dc *runData ,_gae []int ,_fcd int )(int ,error ){var (_efc =true ;_dea int ;_cc *code ;_bc int ;_be error ;);_gda :for _dea < _fcd {_gbe :for {if _efc {_cc ,_be =_dc .uncompressGetCode (_fb ._aed );
if _be !=nil {return 0,_be ;};}else {_cc ,_be =_dc .uncompressGetCode (_fb ._de );if _be !=nil {return 0,_be ;};};_dc ._eaa +=_cc ._ab ;if _cc ._e < 0{break _gda ;};_dea +=_cc ._e ;if _cc ._e < 64{_efc =!_efc ;_gae [_bc ]=_dea ;_bc ++;break _gbe ;};};};
if _gae [_bc ]!=_fcd {_gae [_bc ]=_fcd ;};_gaff :=EOL ;if _cc !=nil &&_cc ._e !=EOL {_gaff =_bc ;};return _gaff ,nil ;};func (_cgc *runData )uncompressGetCode (_dgd []*code )(*code ,error ){return _cgc .uncompressGetCodeLittleEndian (_dgd );};func (_eaf *Decoder )detectAndSkipEOL ()error {for {_eb ,_adff :=_eaf ._feg .uncompressGetCode (_eaf ._abac );
if _adff !=nil {return _adff ;};if _eb !=nil &&_eb ._e ==EOL {_eaf ._feg ._eaa +=_eb ._ab ;}else {return nil ;};};};func _egge (_ace *_fe .SubstreamReader )(*runData ,error ){_efd :=&runData {_bac :_ace ,_eaa :0,_daf :1};_fge :=_gc (_da (_dg ,int (_ace .Length ())),_gdb );
_efd ._cee =make ([]byte ,_fge );if _abe :=_efd .fillBuffer (0);_abe !=nil {if _abe ==_a .EOF {_efd ._cee =make ([]byte ,10);_ff .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_abe );
}else {return nil ,_abe ;};};return _efd ,nil ;};type code struct{_ab int ;_c int ;_e int ;_fd []*code ;_ae bool ;};var (_cba =[][3]int {{4,0x1,int (_gaf )},{3,0x1,int (_fea )},{1,0x1,int (_ec )},{3,0x3,int (_cb )},{6,0x3,int (_cd )},{7,0x3,int (_bg )},{3,0x2,int (_gg )},{6,0x2,int (_fg )},{7,0x2,int (_gf )},{10,0xf,int (_aba )},{12,0xf,int (_ge )},{12,0x1,int (EOL )}};
_dbg =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_gd },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_gd },{11,0x01,_gd },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_efe =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_gd },{9,0x18,15},{10,0x01,_gd },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_gd },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_geb *runData )fillBuffer (_efgd int )error {_geb ._dfb =_efgd ;_ ,_abddf :=_geb ._bac .Seek (int64 (_efgd ),_a .SeekStart );if _abddf !=nil {if _abddf ==_a .EOF {_ff .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_geb ._bdc =-1;
}else {return _abddf ;};};if _abddf ==nil {_geb ._bdc ,_abddf =_geb ._bac .Read (_geb ._cee );if _abddf !=nil {if _abddf ==_a .EOF {_ff .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_geb ._bdc =-1;}else {return _abddf ;};};};if _geb ._bdc > -1&&_geb ._bdc < 3{for _geb ._bdc < 3{_fdg ,_aeb :=_geb ._bac .ReadByte ();
if _aeb !=nil {if _aeb ==_a .EOF {_geb ._cee [_geb ._bdc ]=0;}else {return _aeb ;};}else {_geb ._cee [_geb ._bdc ]=_fdg &0xFF;};_geb ._bdc ++;};};_geb ._bdc -=3;if _geb ._bdc < 0{_geb ._cee =make ([]byte ,len (_geb ._cee ));_geb ._bdc =len (_geb ._cee )-3;
};return nil ;};func _gc (_ef ,_db int )int {if _ef > _db {return _db ;};return _ef ;};func (_aced *runData )uncompressGetCodeLittleEndian (_baf []*code )(*code ,error ){_cga ,_fda :=_aced .uncompressGetNextCodeLittleEndian ();if _fda !=nil {_ff .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_fda );
return nil ,_fda ;};_cga &=0xffffff;_fgg :=_cga >>(_aa -_abf );_ggc :=_baf [_fgg ];if _ggc !=nil &&_ggc ._ae {_fgg =(_cga >>(_aa -_abf -_gdd ))&_ed ;_ggc =_ggc ._fd [_fgg ];};return _ggc ,nil ;};func _da (_df ,_adf int )int {if _df < _adf {return _adf ;
};return _df ;};type runData struct{_bac *_fe .SubstreamReader ;_eaa int ;_daf int ;_bff int ;_cee []byte ;_dfb int ;_bdc int ;};func (_ga *code )String ()string {return _g .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_ga ._ab ,_ga ._c ,_ga ._e );
};