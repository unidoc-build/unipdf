//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_eg "errors";_b "fmt";_f "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/internal/bitwise";_ba "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_g "io";);func New (r *_bd .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_db :=&Decoder {_dfa :width ,_ab :height };
_dac ,_ff :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _ff !=nil {return nil ,_ff ;};_ad ,_ff :=_agaa (_dac );if _ff !=nil {return nil ,_ff ;};_ ,_ff =r .Seek (_dac .RelativePosition (),_g .SeekCurrent );if _ff !=nil {return nil ,_ff ;
};_db ._ceg =_ad ;if _aeg :=_db .initTables ();_aeg !=nil {return nil ,_aeg ;};return _db ,nil ;};func (_cg *Decoder )createLittleEndianTable (_cab [][3]int )([]*code ,error ){_bg :=make ([]*code ,_ae +1);for _cfb :=0;_cfb < len (_cab );_cfb ++{_gd :=_df (_cab [_cfb ]);
if _gd ._fb <=_gebc {_ggc :=_gebc -_gd ._fb ;_ac :=_gd ._gg <<uint (_ggc );for _fdf :=(1<<uint (_ggc ))-1;_fdf >=0;_fdf --{_dee :=_ac |_fdf ;_bg [_dee ]=_gd ;};}else {_fcb :=_gd ._gg >>uint (_gd ._fb -_gebc );if _bg [_fcb ]==nil {var _bda =_df ([3]int {});
_bda ._ef =make ([]*code ,_efb +1);_bg [_fcb ]=_bda ;};if _gd ._fb <=_gebc +_fga {_fa :=_gebc +_fga -_gd ._fb ;_af :=(_gd ._gg <<uint (_fa ))&_efb ;_bg [_fcb ]._ec =true ;for _fce :=(1<<uint (_fa ))-1;_fce >=0;_fce --{_bg [_fcb ]._ef [_af |_fce ]=_gd ;
};}else {return nil ,_eg .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _bg ,nil ;};const (_deb int =1024<<7;
_cgg int =3;_bdg uint =24;);func _fd (_a ,_fc int )int {if _a > _fc {return _fc ;};return _a ;};const (_ca mmrCode =iota ;_ce ;_cf ;_da ;_ega ;_bc ;_ee ;_geb ;_bca ;_egf ;_de ;);func (_aga *Decoder )detectAndSkipEOL ()error {for {_aed ,_eed :=_aga ._ceg .uncompressGetCode (_aga ._dfc );
if _eed !=nil {return _eed ;};if _aed !=nil &&_aed ._d ==EOL {_aga ._ceg ._cfg +=_aed ._fb ;}else {return nil ;};};};type mmrCode int ;func (_bad *code )String ()string {return _b .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bad ._fb ,_bad ._gg ,_bad ._d );
};type code struct{_fb int ;_gg int ;_d int ;_ef []*code ;_ec bool ;};func (_gcf *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_dcae :=_gcf ._cfg -_gcf ._ebg ;if _dcae < 0||_dcae > 24{_dbd :=(_gcf ._cfg >>3)-_gcf ._ggd ;if _dbd >=_gcf ._fbeg {_dbd +=_gcf ._ggd ;
if _dgcg :=_gcf .fillBuffer (_dbd );_dgcg !=nil {return 0,_dgcg ;};_dbd -=_gcf ._ggd ;};_ggec :=(uint32 (_gcf ._ebb [_dbd ]&0xFF)<<16)|(uint32 (_gcf ._ebb [_dbd +1]&0xFF)<<8)|(uint32 (_gcf ._ebb [_dbd +2]&0xFF));_cad :=uint32 (_gcf ._cfg &7);_ggec <<=_cad ;
_gcf ._cdb =int (_ggec );}else {_gga :=_gcf ._ebg &7;_gfb :=7-_gga ;if _dcae <=_gfb {_gcf ._cdb <<=uint (_dcae );}else {_bb :=(_gcf ._ebg >>3)+3-_gcf ._ggd ;if _bb >=_gcf ._fbeg {_bb +=_gcf ._ggd ;if _bcdf :=_gcf .fillBuffer (_bb );_bcdf !=nil {return 0,_bcdf ;
};_bb -=_gcf ._ggd ;};_gga =8-_gga ;for {_gcf ._cdb <<=uint (_gga );_gcf ._cdb |=int (uint (_gcf ._ebb [_bb ])&0xFF);_dcae -=_gga ;_bb ++;_gga =8;if !(_dcae >=8){break ;};};_gcf ._cdb <<=uint (_dcae );};};_gcf ._ebg =_gcf ._cfg ;return _gcf ._cdb ,nil ;
};func (_dec *Decoder )uncompress1d (_ggb *runData ,_fag []int ,_fde int )(int ,error ){var (_ada =true ;_aegf int ;_aff *code ;_acc int ;_cga error ;);_fe :for _aegf < _fde {_eedg :for {if _ada {_aff ,_cga =_ggb .uncompressGetCode (_dec ._dg );if _cga !=nil {return 0,_cga ;
};}else {_aff ,_cga =_ggb .uncompressGetCode (_dec ._baa );if _cga !=nil {return 0,_cga ;};};_ggb ._cfg +=_aff ._fb ;if _aff ._d < 0{break _fe ;};_aegf +=_aff ._d ;if _aff ._d < 64{_ada =!_ada ;_fag [_acc ]=_aegf ;_acc ++;break _eedg ;};};};if _fag [_acc ]!=_fde {_fag [_acc ]=_fde ;
};_cceg :=EOL ;if _aff !=nil &&_aff ._d !=EOL {_cceg =_acc ;};return _cceg ,nil ;};func (_caa *Decoder )initTables ()(_geag error ){if _caa ._dg ==nil {_caa ._dg ,_geag =_caa .createLittleEndianTable (_fdg );if _geag !=nil {return ;};_caa ._baa ,_geag =_caa .createLittleEndianTable (_dc );
if _geag !=nil {return ;};_caa ._dfc ,_geag =_caa .createLittleEndianTable (_eeg );if _geag !=nil {return ;};};return nil ;};type Decoder struct{_dfa ,_ab int ;_ceg *runData ;_dg []*code ;_baa []*code ;_dfc []*code ;};func (_ag *Decoder )UncompressMMR ()(_dag *_ba .Bitmap ,_gebg error ){_dag =_ba .New (_ag ._dfa ,_ag ._ab );
_eb :=make ([]int ,_dag .Width +5);_fda :=make ([]int ,_dag .Width +5);_fda [0]=_dag .Width ;_bce :=1;var _gea int ;for _dad :=0;_dad < _dag .Height ;_dad ++{_gea ,_gebg =_ag .uncompress2d (_ag ._ceg ,_fda ,_bce ,_eb ,_dag .Width );if _gebg !=nil {return nil ,_gebg ;
};if _gea ==EOF {break ;};if _gea > 0{_gebg =_ag .fillBitmap (_dag ,_dad ,_eb ,_gea );if _gebg !=nil {return nil ,_gebg ;};};_fda ,_eb =_eb ,_fda ;_bce =_gea ;};if _gebg =_ag .detectAndSkipEOL ();_gebg !=nil {return nil ,_gebg ;};_ag ._ceg .align ();return _dag ,nil ;
};const (EOF =-3;_cc =-2;EOL =-1;_gebc =8;_ae =(1<<_gebc )-1;_fga =5;_efb =(1<<_fga )-1;);func _agaa (_gc *_bd .Reader )(*runData ,error ){_def :=&runData {_fgaf :_gc ,_cfg :0,_ebg :1};_fcea :=_fd (_bf (_cgg ,int (_gc .Length ())),_deb );_def ._ebb =make ([]byte ,_fcea );
if _ed :=_def .fillBuffer (0);_ed !=nil {if _ed ==_g .EOF {_def ._ebb =make ([]byte ,10);_f .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_ed );}else {return nil ,_ed ;};};return _def ,nil ;
};func (_gba *runData )uncompressGetCode (_ade []*code )(*code ,error ){return _gba .uncompressGetCodeLittleEndian (_ade );};type runData struct{_fgaf *_bd .Reader ;_cfg int ;_ebg int ;_cdb int ;_ebb []byte ;_ggd int ;_fbeg int ;};func (_cdc *runData )fillBuffer (_cag int )error {_cdc ._ggd =_cag ;
_ ,_efd :=_cdc ._fgaf .Seek (int64 (_cag ),_g .SeekStart );if _efd !=nil {if _efd ==_g .EOF {_f .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_cdc ._fbeg =-1;}else {return _efd ;};};if _efd ==nil {_cdc ._fbeg ,_efd =_cdc ._fgaf .Read (_cdc ._ebb );
if _efd !=nil {if _efd ==_g .EOF {_f .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_cdc ._fbeg =-1;}else {return _efd ;};};};if _cdc ._fbeg > -1&&_cdc ._fbeg < 3{for _cdc ._fbeg < 3{_ecb ,_fea :=_cdc ._fgaf .ReadByte ();if _fea !=nil {if _fea ==_g .EOF {_cdc ._ebb [_cdc ._fbeg ]=0;
}else {return _fea ;};}else {_cdc ._ebb [_cdc ._fbeg ]=_ecb &0xFF;};_cdc ._fbeg ++;};};_cdc ._fbeg -=3;if _cdc ._fbeg < 0{_cdc ._ebb =make ([]byte ,len (_cdc ._ebb ));_cdc ._fbeg =len (_cdc ._ebb )-3;};return nil ;};func _bf (_ge ,_c int )int {if _ge < _c {return _c ;
};return _ge ;};func (_gf *Decoder )uncompress2d (_aeb *runData ,_dce []int ,_dgc int ,_cb []int ,_fbg int )(int ,error ){var (_aee int ;_dbf int ;_agg int ;_gee =true ;_fcf error ;_efa *code ;);_dce [_dgc ]=_fbg ;_dce [_dgc +1]=_fbg ;_dce [_dgc +2]=_fbg +1;
_dce [_dgc +3]=_fbg +1;_aa :for _agg < _fbg {_efa ,_fcf =_aeb .uncompressGetCode (_gf ._dfc );if _fcf !=nil {return EOL ,nil ;};if _efa ==nil {_aeb ._cfg ++;break _aa ;};_aeb ._cfg +=_efa ._fb ;switch mmrCode (_efa ._d ){case _cf :_agg =_dce [_aee ];case _da :_agg =_dce [_aee ]+1;
case _ee :_agg =_dce [_aee ]-1;case _ce :for {var _ded []*code ;if _gee {_ded =_gf ._dg ;}else {_ded =_gf ._baa ;};_efa ,_fcf =_aeb .uncompressGetCode (_ded );if _fcf !=nil {return 0,_fcf ;};if _efa ==nil {break _aa ;};_aeb ._cfg +=_efa ._fb ;if _efa ._d < 64{if _efa ._d < 0{_cb [_dbf ]=_agg ;
_dbf ++;_efa =nil ;break _aa ;};_agg +=_efa ._d ;_cb [_dbf ]=_agg ;_dbf ++;break ;};_agg +=_efa ._d ;};_dcf :=_agg ;_dd :for {var _gec []*code ;if !_gee {_gec =_gf ._dg ;}else {_gec =_gf ._baa ;};_efa ,_fcf =_aeb .uncompressGetCode (_gec );if _fcf !=nil {return 0,_fcf ;
};if _efa ==nil {break _aa ;};_aeb ._cfg +=_efa ._fb ;if _efa ._d < 64{if _efa ._d < 0{_cb [_dbf ]=_agg ;_dbf ++;break _aa ;};_agg +=_efa ._d ;if _agg < _fbg ||_agg !=_dcf {_cb [_dbf ]=_agg ;_dbf ++;};break _dd ;};_agg +=_efa ._d ;};for _agg < _fbg &&_dce [_aee ]<=_agg {_aee +=2;
};continue _aa ;case _ca :_aee ++;_agg =_dce [_aee ];_aee ++;continue _aa ;case _ega :_agg =_dce [_aee ]+2;case _geb :_agg =_dce [_aee ]-2;case _bc :_agg =_dce [_aee ]+3;case _bca :_agg =_dce [_aee ]-3;default:if _aeb ._cfg ==12&&_efa ._d ==EOL {_aeb ._cfg =0;
if _ ,_fcf =_gf .uncompress1d (_aeb ,_dce ,_fbg );_fcf !=nil {return 0,_fcf ;};_aeb ._cfg ++;if _ ,_fcf =_gf .uncompress1d (_aeb ,_cb ,_fbg );_fcf !=nil {return 0,_fcf ;};_gb ,_cda :=_gf .uncompress1d (_aeb ,_dce ,_fbg );if _cda !=nil {return EOF ,_cda ;
};_aeb ._cfg ++;return _gb ,nil ;};_agg =_fbg ;continue _aa ;};if _agg <=_fbg {_gee =!_gee ;_cb [_dbf ]=_agg ;_dbf ++;if _aee > 0{_aee --;}else {_aee ++;};for _agg < _fbg &&_dce [_aee ]<=_agg {_aee +=2;};};};if _cb [_dbf ]!=_fbg {_cb [_dbf ]=_fbg ;};if _efa ==nil {return EOL ,nil ;
};return _dbf ,nil ;};var (_eeg =[][3]int {{4,0x1,int (_ca )},{3,0x1,int (_ce )},{1,0x1,int (_cf )},{3,0x3,int (_da )},{6,0x3,int (_ega )},{7,0x3,int (_bc )},{3,0x2,int (_ee )},{6,0x2,int (_geb )},{7,0x2,int (_bca )},{10,0xf,int (_egf )},{12,0xf,int (_de )},{12,0x1,int (EOL )}};
_fdg =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_cc },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_cc },{11,0x01,_cc },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_dc =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_cc },{9,0x18,15},{10,0x01,_cc },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_cc },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_aaa *runData )align (){_aaa ._cfg =((_aaa ._cfg +7)>>3)<<3};func (_bcd *runData )uncompressGetCodeLittleEndian (_cbf []*code )(*code ,error ){_bcdg ,_ffb :=_bcd .uncompressGetNextCodeLittleEndian ();if _ffb !=nil {_f .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_ffb );
return nil ,_ffb ;};_bcdg &=0xffffff;_agb :=_bcdg >>(_bdg -_gebc );_egc :=_cbf [_agb ];if _egc !=nil &&_egc ._ec {_agb =(_bcdg >>(_bdg -_gebc -_fga ))&_efb ;_egc =_egc ._ef [_agb ];};return _egc ,nil ;};func (_ccb *Decoder )fillBitmap (_ceb *_ba .Bitmap ,_fbe int ,_cce []int ,_gdg int )error {var _ga byte ;
_ced :=0;_daa :=_ceb .GetByteIndex (_ced ,_fbe );for _cd :=0;_cd < _gdg ;_cd ++{_bab :=byte (1);_cfbc :=_cce [_cd ];if (_cd &1)==0{_bab =0;};for _ced < _cfbc {_ga =(_ga <<1)|_bab ;_ced ++;if (_ced &7)==0{if _gge :=_ceb .SetByte (_daa ,_ga );_gge !=nil {return _gge ;
};_daa ++;_ga =0;};};};if (_ced &7)!=0{_ga <<=uint (8-(_ced &7));if _dca :=_ceb .SetByte (_daa ,_ga );_dca !=nil {return _dca ;};};return nil ;};func _df (_fg [3]int )*code {return &code {_fb :_fg [0],_gg :_fg [1],_d :_fg [2]}};