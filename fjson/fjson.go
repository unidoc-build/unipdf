//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_a "encoding/json";_f "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/model";_c "io";_af "os";);

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_egf *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_afe ,_cgc :=_af .Open (imagePath );if _cgc !=nil {return _cgc ;};defer _afe .Close ();_aab ,_cgc :=_g .ImageHandling .Read (_afe );if _cgc !=nil {_f .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_cgc );
return _cgc ;};return _egf .SetImage (fieldName ,_aab ,opt );};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_be ,_eef :=_af .Open (filePath );if _eef !=nil {return nil ,_eef ;};defer _be .Close ();return LoadFromPDF (_be );};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _c .ReadSeeker )(*FieldData ,error ){_dc ,_ae :=_g .NewPdfReader (rs );if _ae !=nil {return nil ,_ae ;};if _dc .AcroForm ==nil {return nil ,nil ;};var _ea []fieldValue ;_db :=_dc .AcroForm .AllFields ();for _ ,_ac :=range _db {var _acd []string ;
_cc :=make (map[string ]struct{});_gc ,_cf :=_ac .FullName ();if _cf !=nil {return nil ,_cf ;};if _dd ,_ef :=_ac .V .(*_e .PdfObjectString );_ef {_ea =append (_ea ,fieldValue {Name :_gc ,Value :_dd .Decoded ()});continue ;};var _eaf string ;for _ ,_gd :=range _ac .Annotations {_afd ,_df :=_e .GetName (_gd .AS );
if _df {_eaf =_afd .String ();};_aea ,_eg :=_e .GetDict (_gd .AP );if !_eg {continue ;};_bbg ,_ :=_e .GetDict (_aea .Get ("\u004e"));for _ ,_bc :=range _bbg .Keys (){_cfb :=_bc .String ();if _ ,_ee :=_cc [_cfb ];!_ee {_acd =append (_acd ,_cfb );_cc [_cfb ]=struct{}{};
};};_aca ,_ :=_e .GetDict (_aea .Get ("\u0044"));for _ ,_fb :=range _aca .Keys (){_de :=_fb .String ();if _ ,_dcb :=_cc [_de ];!_dcb {_acd =append (_acd ,_de );_cc [_de ]=struct{}{};};};};_deg :=fieldValue {Name :_gc ,Value :_eaf ,Options :_acd };_ea =append (_ea ,_deg );
};_aa :=FieldData {_ff :_ea };return &_aa ,nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_ff []fieldValue };

// SetImage assign model.Image to a specific field identified by fieldName.
func (_cfe *FieldData )SetImage (fieldName string ,img *_g .Image ,opt []string )error {_cbb :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_cfe ._ff =append (_cfe ._ff ,_cbb );return nil ;};

// JSON returns the field data as a string in JSON format.
func (_cb FieldData )JSON ()(string ,error ){_fbe ,_fc :=_a .MarshalIndent (_cb ._ff ,"","\u0020\u0020\u0020\u0020");return string (_fbe ),_fc ;};

// FieldImageValues implements model.FieldImageProvider interface.
func (_bba *FieldData )FieldImageValues ()(map[string ]*_g .Image ,error ){_bbe :=make (map[string ]*_g .Image );for _ ,_cg :=range _bba ._ff {if _cg .ImageValue !=nil {_bbe [_cg .Name ]=_cg .ImageValue ;};};return _bbe ,nil ;};type fieldValue struct{Name string `json:"name"`;
Value string `json:"value"`;ImageValue *_g .Image `json:"-"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldValues implements model.FieldValueProvider interface.
func (_cfc *FieldData )FieldValues ()(map[string ]_e .PdfObject ,error ){_ace :=make (map[string ]_e .PdfObject );for _ ,_aeac :=range _cfc ._ff {if len (_aeac .Value )> 0{_ace [_aeac .Name ]=_e .MakeString (_aeac .Value );};};return _ace ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _c .Reader )(*FieldData ,error ){var _ab FieldData ;_ge :=_a .NewDecoder (r ).Decode (&_ab ._ff );if _ge !=nil {return nil ,_ge ;};return &_ab ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_d ,_bb :=_af .Open (filePath );if _bb !=nil {return nil ,_bb ;};defer _d .Close ();return LoadFromJSON (_d );};