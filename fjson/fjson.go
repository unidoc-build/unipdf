//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_e "encoding/json";_f "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/model";_c "io";_gb "os";);type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _c .ReadSeeker )(*FieldData ,error ){_eb ,_ce :=_b .NewPdfReader (rs );if _ce !=nil {return nil ,_ce ;};if _eb .AcroForm ==nil {return nil ,nil ;};var _bg []fieldValue ;_cb :=_eb .AcroForm .AllFields ();for _ ,_eg :=range _cb {var _de []string ;_ac :=make (map[string ]struct{});_ca ,_ec :=_eg .FullName ();if _ec !=nil {return nil ,_ec ;};if _fc ,_cef :=_eg .V .(*_f .PdfObjectString );_cef {_bg =append (_bg ,fieldValue {Name :_ca ,Value :_fc .Decoded ()});continue ;};var _ad string ;for _ ,_egd :=range _eg .Annotations {_fg ,_cf :=_f .GetName (_egd .AS );if _cf {_ad =_fg .String ();};_ba ,_fe :=_f .GetDict (_egd .AP );if !_fe {continue ;};_bfb ,_ :=_f .GetDict (_ba .Get ("\u004e"));for _ ,_eeg :=range _bfb .Keys (){_bed :=_eeg .String ();if _ ,_ga :=_ac [_bed ];!_ga {_de =append (_de ,_bed );_ac [_bed ]=struct{}{};};};_ecd ,_ :=_f .GetDict (_ba .Get ("\u0044"));for _ ,_db :=range _ecd .Keys (){_ea :=_db .String ();if _ ,_fea :=_ac [_ea ];!_fea {_de =append (_de ,_ea );_ac [_ea ]=struct{}{};};};};_dg :=fieldValue {Name :_ca ,Value :_ad ,Options :_de };_bg =append (_bg ,_dg );};_ab :=FieldData {_fa :_bg };return &_ab ,nil ;};

// JSON returns the field data as a string in JSON format.
func (_aaf FieldData )JSON ()(string ,error ){_acg ,_gd :=_e .MarshalIndent (_aaf ._fa ,"","\u0020\u0020\u0020\u0020");return string (_acg ),_gd ;};

// FieldValues implements model.FieldValueProvider interface.
func (_bfd *FieldData )FieldValues ()(map[string ]_f .PdfObject ,error ){_bfc :=make (map[string ]_f .PdfObject );for _ ,_dcb :=range _bfd ._fa {if len (_dcb .Value )> 0{_bfc [_dcb .Name ]=_f .MakeString (_dcb .Value );};};return _bfc ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ag ,_d :=_gb .Open (filePath );if _d !=nil {return nil ,_d ;};defer _ag .Close ();return LoadFromJSON (_ag );};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_dc ,_bc :=_gb .Open (filePath );if _bc !=nil {return nil ,_bc ;};defer _dc .Close ();return LoadFromPDF (_dc );};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _c .Reader )(*FieldData ,error ){var _be FieldData ;_a :=_e .NewDecoder (r ).Decode (&_be ._fa );if _a !=nil {return nil ,_a ;};return &_be ,nil ;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_fa []fieldValue };