//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_d "encoding/json";_a "github.com/unidoc/unipdf/v3/core";_ab "github.com/unidoc/unipdf/v3/model";_e "io";_b "os";);type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_eb []fieldValue };

// JSON returns the field data as a string in JSON format.
func (_def FieldData )JSON ()(string ,error ){_fgb ,_gbe :=_d .MarshalIndent (_def ._eb ,"","\u0020\u0020\u0020\u0020");return string (_fgb ),_gbe ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _e .ReadSeeker )(*FieldData ,error ){_bb ,_geb :=_ab .NewPdfReader (rs );if _geb !=nil {return nil ,_geb ;};if _bb .AcroForm ==nil {return nil ,nil ;};var _c []fieldValue ;_gb :=_bb .AcroForm .AllFields ();for _ ,_ee :=range _gb {var _bg []string ;_fg :=make (map[string ]struct{});_gd ,_cg :=_ee .FullName ();if _cg !=nil {return nil ,_cg ;};if _ec ,_ea :=_ee .V .(*_a .PdfObjectString );_ea {_c =append (_c ,fieldValue {Name :_gd ,Value :_ec .Decoded ()});continue ;};var _bbb string ;for _ ,_ga :=range _ee .Annotations {_eca ,_aba :=_a .GetName (_ga .AS );if _aba {_bbb =_eca .String ();};_gbb ,_ag :=_a .GetDict (_ga .AP );if !_ag {continue ;};_de ,_ :=_a .GetDict (_gbb .Get ("\u004e"));for _ ,_fe :=range _de .Keys (){_fbd :=_fe .String ();if _ ,_adc :=_fg [_fbd ];!_adc {_bg =append (_bg ,_fbd );_fg [_fbd ]=struct{}{};};};_ba ,_ :=_a .GetDict (_gbb .Get ("\u0044"));for _ ,_ff :=range _ba .Keys (){_gfe :=_ff .String ();if _ ,_eag :=_fg [_gfe ];!_eag {_bg =append (_bg ,_gfe );_fg [_gfe ]=struct{}{};};};};_dd :=fieldValue {Name :_gd ,Value :_bbb ,Options :_bg };_c =append (_c ,_dd );};_bf :=FieldData {_eb :_c };return &_bf ,nil ;};

// FieldValues implements model.FieldValueProvider interface.
func (_dcf *FieldData )FieldValues ()(map[string ]_a .PdfObject ,error ){_bc :=make (map[string ]_a .PdfObject );for _ ,_fd :=range _dcf ._eb {if len (_fd .Value )> 0{_bc [_fd .Name ]=_a .MakeString (_fd .Value );};};return _bc ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_gf ,_ge :=_b .Open (filePath );if _ge !=nil {return nil ,_ge ;};defer _gf .Close ();return LoadFromJSON (_gf );};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_bag ,_dc :=_b .Open (filePath );if _dc !=nil {return nil ,_dc ;};defer _bag .Close ();return LoadFromPDF (_bag );};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _e .Reader )(*FieldData ,error ){var _gg FieldData ;_f :=_d .NewDecoder (r ).Decode (&_gg ._eb );if _f !=nil {return nil ,_f ;};return &_gg ,nil ;};