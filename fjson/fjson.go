//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_b "encoding/json";_bf "github.com/unidoc/unipdf/v3/common";_c "github.com/unidoc/unipdf/v3/core";_d "github.com/unidoc/unipdf/v3/model";_gd "io";_g "os";);type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;
ImageValue *_d .Image `json:"-"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_f []fieldValue };

// FieldValues implements model.FieldValueProvider interface.
func (_baf *FieldData )FieldValues ()(map[string ]_c .PdfObject ,error ){_ege :=make (map[string ]_c .PdfObject );for _ ,_ad :=range _baf ._f {if len (_ad .Value )> 0{_ege [_ad .Name ]=_c .MakeString (_ad .Value );};};return _ege ,nil ;};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _gd .ReadSeeker )(*FieldData ,error ){_ef ,_ec :=_d .NewPdfReader (rs );if _ec !=nil {return nil ,_ec ;};if _ef .AcroForm ==nil {return nil ,nil ;};var _bg []fieldValue ;_a :=_ef .AcroForm .AllFields ();for _ ,_bb :=range _a {var _be []string ;
_aa :=make (map[string ]struct{});_cbd ,_gg :=_bb .FullName ();if _gg !=nil {return nil ,_gg ;};if _eg ,_gc :=_bb .V .(*_c .PdfObjectString );_gc {_bg =append (_bg ,fieldValue {Name :_cbd ,Value :_eg .Decoded ()});continue ;};var _egd string ;for _ ,_bdb :=range _bb .Annotations {_ba ,_ce :=_c .GetName (_bdb .AS );
if _ce {_egd =_ba .String ();};_gde ,_ece :=_c .GetDict (_bdb .AP );if !_ece {continue ;};_cea ,_ :=_c .GetDict (_gde .Get ("\u004e"));for _ ,_ac :=range _cea .Keys (){_efa :=_ac .String ();if _ ,_db :=_aa [_efa ];!_db {_be =append (_be ,_efa );_aa [_efa ]=struct{}{};
};};_bae ,_ :=_c .GetDict (_gde .Get ("\u0044"));for _ ,_ag :=range _bae .Keys (){_ed :=_ag .String ();if _ ,_ca :=_aa [_ed ];!_ca {_be =append (_be ,_ed );_aa [_ed ]=struct{}{};};};};_fe :=fieldValue {Name :_cbd ,Value :_egd ,Options :_be };_bg =append (_bg ,_fe );
};_baec :=FieldData {_f :_bg };return &_baec ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_ea ,_cb :=_g .Open (filePath );if _cb !=nil {return nil ,_cb ;};defer _ea .Close ();return LoadFromJSON (_ea );};

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_cab ,_eaf :=_g .Open (filePath );if _eaf !=nil {return nil ,_eaf ;};defer _cab .Close ();return LoadFromPDF (_cab );};

// FieldImageValues implements model.FieldImageProvider interface.
func (_ceb *FieldData )FieldImageValues ()(map[string ]*_d .Image ,error ){_ff :=make (map[string ]*_d .Image );for _ ,_bda :=range _ceb ._f {if _bda .ImageValue !=nil {_ff [_bda .Name ]=_bda .ImageValue ;};};return _ff ,nil ;};

// SetImageFromFile assign image file to a specific field identified by fieldName.
func (_cebd *FieldData )SetImageFromFile (fieldName string ,imagePath string ,opt []string )error {_gf ,_aca :=_g .Open (imagePath );if _aca !=nil {return _aca ;};defer _gf .Close ();_ab ,_aca :=_d .ImageHandling .Read (_gf );if _aca !=nil {_bf .Log .Error ("\u0045\u0072\u0072or\u0020\u006c\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_aca );
return _aca ;};return _cebd .SetImage (fieldName ,_ab ,opt );};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _gd .Reader )(*FieldData ,error ){var _dc FieldData ;_bd :=_b .NewDecoder (r ).Decode (&_dc ._f );if _bd !=nil {return nil ,_bd ;};return &_dc ,nil ;};

// JSON returns the field data as a string in JSON format.
func (_ee FieldData )JSON ()(string ,error ){_cd ,_de :=_b .MarshalIndent (_ee ._f ,"","\u0020\u0020\u0020\u0020");return string (_cd ),_de ;};

// SetImage assign model.Image to a specific field identified by fieldName.
func (_fg *FieldData )SetImage (fieldName string ,img *_d .Image ,opt []string )error {_fdd :=fieldValue {Name :fieldName ,ImageValue :img ,Options :opt };_fg ._f =append (_fg ._f ,_fdd );return nil ;};