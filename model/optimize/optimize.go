//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_ad "bytes";_fb "crypto/md5";_gb "errors";_g "fmt";_gf "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/contentstream";_a "github.com/unidoc/unipdf/v3/core";_ee "github.com/unidoc/unipdf/v3/extractor";_e "github.com/unidoc/unipdf/v3/internal/textencoding";_da "github.com/unidoc/unipdf/v3/model";_ed "github.com/unidoc/unitype";_ba "golang.org/x/image/draw";_c "image";_f "math";);

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _ebad (_cbfb []_a .PdfObject ,_ebef map[_a .PdfObject ]_a .PdfObject ){if len (_ebef )==0{return ;};for _bad ,_cgcb :=range _cbfb {if _edgd ,_abdf :=_ebef [_cgcb ];_abdf {_cbfb [_bad ]=_edgd ;continue ;};_ebef [_cgcb ]=_cgcb ;switch _cbg :=_cgcb .(type ){case *_a .PdfObjectArray :_cceb :=make ([]_a .PdfObject ,_cbg .Len ());copy (_cceb ,_cbg .Elements ());_ebad (_cceb ,_ebef );for _gecg ,_gdb :=range _cceb {_cbg .Set (_gecg ,_gdb );};case *_a .PdfObjectStreams :_ebad (_cbg .Elements (),_ebef );case *_a .PdfObjectStream :_fegb :=[]_a .PdfObject {_cbg .PdfObjectDictionary };_ebad (_fegb ,_ebef );_cbg .PdfObjectDictionary =_fegb [0].(*_a .PdfObjectDictionary );case *_a .PdfObjectDictionary :_egb :=_cbg .Keys ();_fggg :=make ([]_a .PdfObject ,len (_egb ));for _gfa ,_gabe :=range _egb {_fggg [_gfa ]=_cbg .Get (_gabe );};_ebad (_fggg ,_ebef );for _adbg ,_ffdf :=range _egb {_cbg .Set (_ffdf ,_fggg [_adbg ]);};case *_a .PdfIndirectObject :_ffc :=[]_a .PdfObject {_cbg .PdfObject };_ebad (_ffc ,_ebef );_cbg .PdfObject =_ffc [0];};};};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_dg []_da .Optimizer };func _fdaa (_feeg []_a .PdfObject ){for _ceb ,_efg :=range _feeg {switch _dce :=_efg .(type ){case *_a .PdfIndirectObject :_dce .ObjectNumber =int64 (_ceb +1);_dce .GenerationNumber =0;case *_a .PdfObjectStream :_dce .ObjectNumber =int64 (_ceb +1);_dce .GenerationNumber =0;case *_a .PdfObjectStreams :_dce .ObjectNumber =int64 (_ceb +1);_dce .GenerationNumber =0;};};};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};type content struct{_bbb string ;_dda *_da .PdfPageResources ;};

// Append appends optimizers to the chain.
func (_gbd *Chain )Append (optimizers ..._da .Optimizer ){_gbd ._dg =append (_gbd ._dg ,optimizers ...)};func _adeg (_dff *_a .PdfObjectStream ,_gaad float64 )error {_bgb ,_gcbd :=_da .NewXObjectImageFromStream (_dff );if _gcbd !=nil {return _gcbd ;};_gaeb ,_gcbd :=_bgb .ToImage ();if _gcbd !=nil {return _gcbd ;};_aed ,_gcbd :=_gaeb .ToGoImage ();if _gcbd !=nil {return _gcbd ;};_fed :=int (_f .RoundToEven (float64 (_gaeb .Width )*_gaad ));_eceg :=int (_f .RoundToEven (float64 (_gaeb .Height )*_gaad ));_gcg :=_c .Rect (0,0,_fed ,_eceg );var _ecf _ba .Image ;var _ddae func (_c .Image )(*_da .Image ,error );switch _bgb .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_ecf =_c .NewRGBA (_gcg );_ddae =_da .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_ecf =_c .NewGray (_gcg );_ddae =_da .ImageHandling .NewGrayImageFromGoImage ;default:return _g .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_bgb .ColorSpace .String ());};_ba .CatmullRom .Scale (_ecf ,_ecf .Bounds (),_aed ,_aed .Bounds (),_ba .Over ,&_ba .Options {});if _gaeb ,_gcbd =_ddae (_ecf );_gcbd !=nil {return _gcbd ;};_fedg :=_a .MakeDict ();_fedg .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_a .MakeInteger (100));_fedg .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_a .MakeInteger (1));_bgb .Filter .UpdateParams (_fedg );if _gcbd =_bgb .SetImage (_gaeb ,nil );_gcbd !=nil {return _gcbd ;};_bgb .ToPdfObject ();return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gbdgd *CombineDuplicateStreams )Optimize (objects []_a .PdfObject )(_adcd []_a .PdfObject ,_efd error ){_gec :=make (map[_a .PdfObject ]_a .PdfObject );_bcad :=make (map[_a .PdfObject ]struct{});_dfb :=make (map[string ][]*_a .PdfObjectStream );for _ ,_dcf :=range objects {if _cabc ,_cad :=_dcf .(*_a .PdfObjectStream );_cad {_fab :=_fb .New ();_fab .Write (_cabc .Stream );_bccb :=string (_fab .Sum (nil ));_dfb [_bccb ]=append (_dfb [_bccb ],_cabc );};};for _ ,_gegg :=range _dfb {if len (_gegg )< 2{continue ;};_ccg :=_gegg [0];for _eaf :=1;_eaf < len (_gegg );_eaf ++{_ceca :=_gegg [_eaf ];_gec [_ceca ]=_ccg ;_bcad [_ceca ]=struct{}{};};};_adcd =make ([]_a .PdfObject ,0,len (objects )-len (_bcad ));for _ ,_dga :=range objects {if _ ,_gdg :=_bcad [_dga ];_gdg {continue ;};_adcd =append (_adcd ,_dga );};_ebad (_adcd ,_gec );return _adcd ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _aabf (_cced []_a .PdfObject )objectStructure {_fcaa :=objectStructure {};_dbdg :=false ;for _ ,_faee :=range _cced {switch _efce :=_faee .(type ){case *_a .PdfIndirectObject :_fcgd ,_fgcd :=_a .GetDict (_efce );if !_fgcd {continue ;};_fece ,_fgcd :=_a .GetName (_fcgd .Get ("\u0054\u0079\u0070\u0065"));if !_fgcd {continue ;};switch _fece .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_fcaa ._abb =_fcgd ;_dbdg =true ;};};if _dbdg {break ;};};if !_dbdg {return _fcaa ;};_fcdb ,_aac :=_a .GetDict (_fcaa ._abb .Get ("\u0050\u0061\u0067e\u0073"));if !_aac {return _fcaa ;};_fcaa ._fbb =_fcdb ;_caef ,_aac :=_a .GetArray (_fcdb .Get ("\u004b\u0069\u0064\u0073"));if !_aac {return _fcaa ;};for _ ,_dbg :=range _caef .Elements (){_fbdb ,_bcg :=_a .GetIndirect (_dbg );if !_bcg {break ;};_fcaa ._gef =append (_fcaa ._gef ,_fbdb );};return _fcaa ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gd *CleanFonts )Optimize (objects []_a .PdfObject )(_dgc []_a .PdfObject ,_cae error ){var _bdb map[*_a .PdfObjectStream ]struct{};if _gd .Subset {var _ae error ;_bdb ,_ae =_bdfd (objects );if _ae !=nil {return nil ,_ae ;};};for _ ,_bg :=range objects {_ece ,_cfe :=_a .GetStream (_bg );if !_cfe {continue ;};if _ ,_debe :=_bdb [_ece ];_debe {continue ;};_fgf ,_gdd :=_a .NewEncoderFromStream (_ece );if _gdd !=nil {_gf .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_gdd );continue ;};_bgc ,_gdd :=_fgf .DecodeStream (_ece );if _gdd !=nil {_gf .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_gdd );continue ;};if len (_bgc )< 4{continue ;};_efb :=string (_bgc [:4]);if _efb =="\u004f\u0054\u0054\u004f"{continue ;};if _efb !="\u0000\u0001\u0000\u0000"&&_efb !="\u0074\u0072\u0075\u0065"{continue ;};_dad ,_gdd :=_ed .Parse (_ad .NewReader (_bgc ));if _gdd !=nil {_gf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gdd );continue ;};_gdd =_dad .Optimize ();if _gdd !=nil {continue ;};var _fefc _ad .Buffer ;_gdd =_dad .Write (&_fefc );if _gdd !=nil {_gf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_gdd );continue ;};if _fefc .Len ()> len (_bgc ){_gf .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_bga ,_gdd :=_a .MakeStream (_fefc .Bytes (),_a .NewFlateEncoder ());if _gdd !=nil {continue ;};*_ece =*_bga ;_ece .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_a .MakeInteger (int64 (_fefc .Len ())));};return objects ,nil ;};func _bdfd (_fa []_a .PdfObject )(_fcd map[*_a .PdfObjectStream ]struct{},_bac error ){_fcd =map[*_a .PdfObjectStream ]struct{}{};_bb :=map[*_da .PdfFont ]struct{}{};_ded :=_aabf (_fa );for _ ,_deg :=range _ded ._gef {_cge ,_bag :=_a .GetDict (_deg .PdfObject );if !_bag {continue ;};_fd ,_bag :=_a .GetDict (_cge .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bag {continue ;};_cc ,_ :=_facc (_cge .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cfb ,_daa :=_da .NewPdfPageResourcesFromDict (_fd );if _daa !=nil {return nil ,_daa ;};_fad :=[]content {{_bbb :_cc ,_dda :_cfb }};_bba :=_gda (_cge .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _bba !=nil {_fad =append (_fad ,_bba ...);};for _ ,_gea :=range _fad {_baf ,_bcc :=_ee .NewFromContents (_gea ._bbb ,_gea ._dda );if _bcc !=nil {return nil ,_bcc ;};_geg ,_ ,_ ,_bcc :=_baf .ExtractPageText ();if _bcc !=nil {return nil ,_bcc ;};for _ ,_dea :=range _geg .Marks ().Elements (){if _dea .Font ==nil {continue ;};if _ ,_ecg :=_bb [_dea .Font ];!_ecg {_bb [_dea .Font ]=struct{}{};};};};};_ffdc :=map[*_a .PdfObjectStream ][]*_da .PdfFont {};for _dc :=range _bb {_dd :=_dc .FontDescriptor ();if _dd ==nil ||_dd .FontFile2 ==nil {continue ;};_cfa ,_bee :=_a .GetStream (_dd .FontFile2 );if !_bee {continue ;};_ffdc [_cfa ]=append (_ffdc [_cfa ],_dc );};for _ada :=range _ffdc {var _dbf []rune ;var _geb []_ed .GlyphIndex ;for _ ,_eab :=range _ffdc [_ada ]{switch _ffa :=_eab .Encoder ().(type ){case *_e .IdentityEncoder :_fag :=_ffa .RegisteredRunes ();_dba :=make ([]_ed .GlyphIndex ,len (_fag ));for _ace ,_eeba :=range _fag {_dba [_ace ]=_ed .GlyphIndex (_eeba );};_geb =append (_geb ,_dba ...);case *_e .TrueTypeFontEncoder :_ab :=_ffa .RegisteredRunes ();_dbf =append (_dbf ,_ab ...);case _e .SimpleEncoder :_ef :=_ffa .Charcodes ();for _ ,_gcf :=range _ef {_adaa ,_babe :=_ffa .CharcodeToRune (_gcf );if !_babe {_gf .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_gcf );continue ;};_dbf =append (_dbf ,_adaa );};};};_bac =_abc (_ada ,_dbf ,_geb );if _bac !=nil {_gf .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bac );return nil ,_bac ;};_fcd [_ada ]=struct{}{};};return _fcd ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gaa *CombineDuplicateDirectObjects )Optimize (objects []_a .PdfObject )(_efe []_a .PdfObject ,_baba error ){_fdaa (objects );_gag :=make (map[string ][]*_a .PdfObjectDictionary );var _gccg func (_ebe *_a .PdfObjectDictionary );_gccg =func (_gbdg *_a .PdfObjectDictionary ){for _ ,_cab :=range _gbdg .Keys (){_bafc :=_gbdg .Get (_cab );if _cdf ,_fffg :=_bafc .(*_a .PdfObjectDictionary );_fffg {_gba :=_fb .New ();_gba .Write ([]byte (_cdf .WriteString ()));_abdc :=string (_gba .Sum (nil ));_gag [_abdc ]=append (_gag [_abdc ],_cdf );_gccg (_cdf );};};};for _ ,_eg :=range objects {_bda ,_edg :=_eg .(*_a .PdfIndirectObject );if !_edg {continue ;};if _cbf ,_gce :=_bda .PdfObject .(*_a .PdfObjectDictionary );_gce {_gccg (_cbf );};};_bbbd :=make ([]_a .PdfObject ,0,len (_gag ));_fceb :=make (map[_a .PdfObject ]_a .PdfObject );for _ ,_bdd :=range _gag {if len (_bdd )< 2{continue ;};_aae :=_a .MakeDict ();_aae .Merge (_bdd [0]);_cba :=_a .MakeIndirectObject (_aae );_bbbd =append (_bbbd ,_cba );for _bca :=0;_bca < len (_bdd );_bca ++{_dab :=_bdd [_bca ];_fceb [_dab ]=_cba ;};};_efe =make ([]_a .PdfObject ,len (objects ));copy (_efe ,objects );_efe =append (_bbbd ,_efe ...);_ebad (_efe ,_fceb );return _efe ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edb *CleanContentstream )Optimize (objects []_a .PdfObject )(_ag []_a .PdfObject ,_eed error ){_eba :=map[*_a .PdfObjectStream ]struct{}{};var _fc []*_a .PdfObjectStream ;_dgg :=func (_eec *_a .PdfObjectStream ){if _ ,_fgd :=_eba [_eec ];!_fgd {_eba [_eec ]=struct{}{};_fc =append (_fc ,_eec );};};for _ ,_bab :=range objects {switch _ffd :=_bab .(type ){case *_a .PdfIndirectObject :switch _bce :=_ffd .PdfObject .(type ){case *_a .PdfObjectDictionary :if _df ,_gc :=_a .GetName (_bce .Get ("\u0054\u0079\u0070\u0065"));!_gc ||_df .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ede ,_fe :=_a .GetStream (_bce .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_fe {_dgg (_ede );}else if _ac ,_cec :=_a .GetArray (_bce .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cec {for _ ,_gcd :=range _ac .Elements (){if _aa ,_cf :=_a .GetStream (_gcd );_cf {_dgg (_aa );};};};};case *_a .PdfObjectStream :if _db ,_fef :=_a .GetName (_ffd .Get ("\u0054\u0079\u0070\u0065"));!_fef ||_db .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _cg ,_edd :=_a .GetName (_ffd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_edd ||_cg .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_dgg (_ffd );};};for _ ,_bdf :=range _fc {_eed =_ff (_bdf );if _eed !=nil {return nil ,_eed ;};};return objects ,nil ;};func _gda (_acb _a .PdfObject )[]content {if _acb ==nil {return nil ;};_cce ,_fcg :=_a .GetArray (_acb );if !_fcg {_gf .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _baa []content ;for _ ,_abd :=range _cce .Elements (){_fge ,_agb :=_a .GetDict (_abd );if !_agb {_gf .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_ade ,_agb :=_a .GetDict (_fge .Get ("\u0041\u0050"));if !_agb {_gf .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dfd :=_a .TraceToDirectObject (_ade .Get ("\u004e"));if _dfd ==nil {_gf .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _bef *_a .PdfObjectStream ;switch _dfc :=_dfd .(type ){case *_a .PdfObjectDictionary :_fce ,_fdd :=_a .GetName (_fge .Get ("\u0041\u0053"));if !_fdd {_gf .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_bef ,_fdd =_a .GetStream (_dfc .Get (*_fce ));if !_fdd {_gf .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_a .PdfObjectStream :_bef =_dfc ;};if _bef ==nil {_gf .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_eaa ,_cfd :=_da .NewXObjectFormFromStream (_bef );if _cfd !=nil {_gf .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cfd );continue ;};_add ,_cfd :=_eaa .GetContentStream ();if _cfd !=nil {_gf .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_cfd );continue ;};_baa =append (_baa ,content {_bbb :string (_add ),_dda :_eaa .Resources });};return _baa ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_daba :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_daba .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_daba .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_agg :=new (ImagePPI );_agg .ImageUpperPPI =options .ImageUpperPPI ;_daba .Append (_agg );};if options .ImageQuality > 0{_fba :=new (Image );_fba .ImageQuality =options .ImageQuality ;_daba .Append (_fba );};if options .CombineDuplicateDirectObjects {_daba .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_daba .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_daba .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_daba .Append (new (ObjectStreams ));};if options .CompressStreams {_daba .Append (new (CompressStreams ));};return _daba ;};type objectStructure struct{_abb *_a .PdfObjectDictionary ;_fbb *_a .PdfObjectDictionary ;_gef []*_a .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ecc *ObjectStreams )Optimize (objects []_a .PdfObject )(_cedb []_a .PdfObject ,_bbgd error ){_dcba :=&_a .PdfObjectStreams {};_bfbb :=make ([]_a .PdfObject ,0,len (objects ));for _ ,_fae :=range objects {if _acg ,_eegb :=_fae .(*_a .PdfIndirectObject );_eegb &&_acg .GenerationNumber ==0{_dcba .Append (_fae );}else {_bfbb =append (_bfbb ,_fae );};};if _dcba .Len ()==0{return _bfbb ,nil ;};_cedb =make ([]_a .PdfObject ,0,len (_bfbb )+_dcba .Len ()+1);if _dcba .Len ()> 1{_cedb =append (_cedb ,_dcba );};_cedb =append (_cedb ,_dcba .Elements ()...);_cedb =append (_cedb ,_bfbb ...);return _cedb ,nil ;};type imageInfo struct{ColorSpace _a .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_a .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gdf *CompressStreams )Optimize (objects []_a .PdfObject )(_afc []_a .PdfObject ,_beg error ){_afc =make ([]_a .PdfObject ,len (objects ));copy (_afc ,objects );for _ ,_baaf :=range objects {_bbac ,_aga :=_a .GetStream (_baaf );if !_aga {continue ;};if _cgc :=_bbac .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_cgc !=nil {if _ ,_bfc :=_a .GetName (_cgc );_bfc {continue ;};if _fffb ,_fgc :=_a .GetArray (_cgc );_fgc &&_fffb .Len ()> 0{continue ;};};_dfdd :=_a .NewFlateEncoder ();var _ccea []byte ;_ccea ,_beg =_dfdd .EncodeBytes (_bbac .Stream );if _beg !=nil {return _afc ,_beg ;};_gbaf :=_dfdd .MakeStreamDict ();if len (_ccea )+len (_gbaf .WriteString ())< len (_bbac .Stream ){_bbac .Stream =_ccea ;_bbac .PdfObjectDictionary .Merge (_gbaf );_bbac .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_a .MakeInteger (int64 (len (_bbac .Stream ))));};};return _afc ,nil ;};func _facc (_dfcf _a .PdfObject )(_feef string ,_caea []_a .PdfObject ){var _ffca _ad .Buffer ;switch _fdb :=_dfcf .(type ){case *_a .PdfIndirectObject :_caea =append (_caea ,_fdb );_dfcf =_fdb .PdfObject ;};switch _ebab :=_dfcf .(type ){case *_a .PdfObjectStream :if _caca ,_aace :=_a .DecodeStream (_ebab );_aace ==nil {_ffca .Write (_caca );_caea =append (_caea ,_ebab );};case *_a .PdfObjectArray :for _ ,_gegc :=range _ebab .Elements (){switch _faga :=_gegc .(type ){case *_a .PdfObjectStream :if _bgf ,_efba :=_a .DecodeStream (_faga );_efba ==nil {_ffca .Write (_bgf );_caea =append (_caea ,_faga );};};};};return _ffca .String (),_caea ;};func _ff (_bc *_a .PdfObjectStream )error {_gfgb ,_edf :=_a .DecodeStream (_bc );if _edf !=nil {return _edf ;};_ebc :=_d .NewContentStreamParser (string (_gfgb ));_adb ,_edf :=_ebc .Parse ();if _edf !=nil {return _edf ;};_adb =_eb (_adb );_cee :=_adb .Bytes ();if len (_cee )>=len (_gfgb ){return nil ;};_eeb ,_edf :=_a .MakeStream (_adb .Bytes (),_a .NewFlateEncoder ());if _edf !=nil {return _edf ;};_bc .Stream =_eeb .Stream ;_bc .Merge (_eeb .PdfObjectDictionary );return nil ;};func _eb (_be *_d .ContentStreamOperations )*_d .ContentStreamOperations {if _be ==nil {return nil ;};_ga :=_d .ContentStreamOperations {};for _ ,_gfg :=range *_be {switch _gfg .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_gfg .Params )==6{if _ge ,_ce :=_a .GetNumbersAsFloat (_gfg .Params );_ce ==nil {if _ge [0]==1&&_ge [1]==0&&_ge [2]==0&&_ge [3]==1{_gfg =&_d .ContentStreamOperation {Params :[]_a .PdfObject {_gfg .Params [4],_gfg .Params [5]},Operand :"\u0054\u0064"};};};};};_ga =append (_ga ,_gfg );};return &_ga ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ecee *ImagePPI )Optimize (objects []_a .PdfObject )(_bgbc []_a .PdfObject ,_bae error ){if _ecee .ImageUpperPPI <=0{return objects ,nil ;};_ceeg :=_ebag (objects );if len (_ceeg )==0{return objects ,nil ;};_ddd :=make (map[_a .PdfObject ]struct{});for _ ,_acce :=range _ceeg {_bge :=_acce .Stream .PdfObjectDictionary .Get (_a .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_ddd [_bge ]=struct{}{};};_caa :=make (map[*_a .PdfObjectStream ]*imageInfo );for _ ,_efbe :=range _ceeg {_caa [_efbe .Stream ]=_efbe ;};var _ccb *_a .PdfObjectDictionary ;for _ ,_gade :=range objects {if _dgaf ,_edgc :=_a .GetDict (_gade );_ccb ==nil &&_edgc {if _cbc ,_eca :=_a .GetName (_dgaf .Get (_a .PdfObjectName ("\u0054\u0079\u0070\u0065")));_eca &&*_cbc =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_ccb =_dgaf ;};};};if _ccb ==nil {return objects ,nil ;};_abac ,_fbgd :=_a .GetDict (_ccb .Get (_a .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_fbgd {return objects ,nil ;};_gcfde ,_fbgec :=_a .GetArray (_abac .Get (_a .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_fbgec {return objects ,nil ;};_bgad :=make (map[string ]*imageInfo );for _ ,_dbe :=range _gcfde .Elements (){_fabe ,_feg :=_a .GetDict (_dbe );if !_feg {continue ;};_edac ,_ddb :=_a .GetArray (_fabe .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_ddb {continue ;};_cgbd ,_bgae :=_a .GetDict (_fabe .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bgae {continue ;};_eac ,_cff :=_a .GetDict (_cgbd .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cff {continue ;};_ged :=_eac .Keys ();for _ ,_dde :=range _ged {if _ddg ,_fdc :=_a .GetStream (_eac .Get (_dde ));_fdc {if _cbfe ,_ggc :=_caa [_ddg ];_ggc {_bgad [string (_dde )]=_cbfe ;};};};for _ ,_gab :=range _edac .Elements (){if _afgd ,_ffag :=_a .GetStream (_gab );_ffag {_fdgd ,_ffb :=_a .NewEncoderFromStream (_afgd );if _ffb !=nil {return nil ,_ffb ;};_aaa ,_ffb :=_fdgd .DecodeStream (_afgd );if _ffb !=nil {return nil ,_ffb ;};_dcc :=_d .NewContentStreamParser (string (_aaa ));_gde ,_ffb :=_dcc .Parse ();if _ffb !=nil {return nil ,_ffb ;};_eecd ,_bdge :=1.0,1.0;for _ ,_ced :=range *_gde {if _ced .Operand =="\u0051"{_eecd ,_bdge =1.0,1.0;};if _ced .Operand =="\u0063\u006d"&&len (_ced .Params )==6{if _edc ,_eacc :=_a .GetFloatVal (_ced .Params [0]);_eacc {_eecd =_eecd *_edc ;};if _cfce ,_beec :=_a .GetFloatVal (_ced .Params [3]);_beec {_bdge =_bdge *_cfce ;};if _cdc ,_geda :=_a .GetIntVal (_ced .Params [0]);_geda {_eecd =_eecd *float64 (_cdc );};if _gaefg ,_geba :=_a .GetIntVal (_ced .Params [3]);_geba {_bdge =_bdge *float64 (_gaefg );};};if _ced .Operand =="\u0044\u006f"&&len (_ced .Params )==1{_caee ,_efbd :=_a .GetName (_ced .Params [0]);if !_efbd {continue ;};if _dgae ,_cbb :=_bgad [string (*_caee )];_cbb {_ffg ,_ceef :=_eecd /72.0,_bdge /72.0;_baca ,_ggf :=float64 (_dgae .Width )/_ffg ,float64 (_dgae .Height )/_ceef ;if _ffg ==0||_ceef ==0{_baca =72.0;_ggf =72.0;};_dgae .PPI =_f .Max (_dgae .PPI ,_baca );_dgae .PPI =_f .Max (_dgae .PPI ,_ggf );};};};};};};for _ ,_gdgg :=range _ceeg {if _ ,_gaae :=_ddd [_gdgg .Stream ];_gaae {continue ;};if _gdgg .PPI <=_ecee .ImageUpperPPI {continue ;};_fee :=_ecee .ImageUpperPPI /_gdgg .PPI ;if _bcf :=_adeg (_gdgg .Stream ,_fee );_bcf !=nil {_gf .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_bcf );}else {if _eef ,_acf :=_a .GetStream (_gdgg .Stream .PdfObjectDictionary .Get (_a .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_acf {if _adea :=_adeg (_eef ,_fee );_adea !=nil {return nil ,_adea ;};};};};return objects ,nil ;};func _abc (_bf *_a .PdfObjectStream ,_gcc []rune ,_bde []_ed .GlyphIndex )error {_bf ,_cfbc :=_a .GetStream (_bf );if !_cfbc {_gf .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _gb .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_fff ,_gbe :=_a .DecodeStream (_bf );if _gbe !=nil {_gf .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_gbe );return _gbe ;};_ebd ,_gbe :=_ed .Parse (_ad .NewReader (_fff ));if _gbe !=nil {_gf .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bf .Stream ));return _gbe ;};_fcb :=_bde ;if len (_gcc )> 0{_ddf :=_ebd .LookupRunes (_gcc );_fcb =append (_fcb ,_ddf ...);};_ebd ,_gbe =_ebd .SubsetKeepIndices (_fcb );if _gbe !=nil {_gf .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_gbe );return _gbe ;};var _afe _ad .Buffer ;_gbe =_ebd .Write (&_afe );if _gbe !=nil {_gf .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gbe );return _gbe ;};if _afe .Len ()> len (_fff ){_gf .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_dbd ,_gbe :=_a .MakeStream (_afe .Bytes (),_a .NewFlateEncoder ());if _gbe !=nil {_gf .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gbe );return _gbe ;};*_bf =*_dbd ;_bf .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_a .MakeInteger (int64 (_afe .Len ())));return nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dec *Image )Optimize (objects []_a .PdfObject )(_bdeg []_a .PdfObject ,_cdfg error ){if _dec .ImageQuality <=0{return objects ,nil ;};_gcfd :=_ebag (objects );if len (_gcfd )==0{return objects ,nil ;};_facg :=make (map[_a .PdfObject ]_a .PdfObject );_afd :=make (map[_a .PdfObject ]struct{});for _ ,_dfe :=range _gcfd {_fcbg :=_dfe .Stream .PdfObjectDictionary .Get (_a .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_afd [_fcbg ]=struct{}{};};for _ead ,_faf :=range _gcfd {_fgcf :=_faf .Stream ;if _ ,_efc :=_afd [_fgcf ];_efc {continue ;};_cfbd ,_deaa :=_a .NewEncoderFromStream (_fgcf );if _deaa !=nil {_gf .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_gadb ,_deaa :=_cfbd .DecodeStream (_fgcf );if _deaa !=nil {_gf .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_dee :=_a .NewDCTEncoder ();_dee .ColorComponents =_faf .ColorComponents ;_dee .Quality =_dec .ImageQuality ;_dee .BitsPerComponent =_faf .BitsPerComponent ;_dee .Width =_faf .Width ;_dee .Height =_faf .Height ;_deac ,_deaa :=_dee .EncodeBytes (_gadb );if _deaa !=nil {_gf .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_deaa );return nil ,_deaa ;};var _cgba _a .StreamEncoder ;_cgba =_dee ;{_adaag :=_a .NewFlateEncoder ();_bfe :=_a .NewMultiEncoder ();_bfe .AddEncoder (_adaag );_bfe .AddEncoder (_dee );_egf ,_ege :=_bfe .EncodeBytes (_gadb );if _ege !=nil {return nil ,_ege ;};if len (_egf )< len (_deac ){_gf .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_deac ),len (_egf ),len (_fgcf .Stream ));_deac =_egf ;_cgba =_bfe ;};};_cac :=len (_fgcf .Stream );if _cac < len (_deac ){continue ;};_bbg :=&_a .PdfObjectStream {Stream :_deac };_bbg .PdfObjectReference =_fgcf .PdfObjectReference ;_bbg .PdfObjectDictionary =_a .MakeDict ();_bbg .Merge (_fgcf .PdfObjectDictionary );_bbg .Merge (_cgba .MakeStreamDict ());_bbg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_a .MakeInteger (int64 (len (_deac ))));_facg [_fgcf ]=_bbg ;_gcfd [_ead ].Stream =_bbg ;};_bdeg =make ([]_a .PdfObject ,len (objects ));copy (_bdeg ,objects );_ebad (_bdeg ,_facg );return _bdeg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ca *Chain )Optimize (objects []_a .PdfObject )(_bd []_a .PdfObject ,_fg error ){_bd =objects ;for _ ,_caf :=range _ca ._dg {_bd ,_fg =_caf .Optimize (_bd );if _fg !=nil {return _bd ,_fg ;};};return _bd ,nil ;};func _ebag (_fac []_a .PdfObject )[]*imageInfo {_aag :=_a .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_bagd :=make (map[*_a .PdfObjectStream ]struct{});var _fffa error ;var _cgf []*imageInfo ;for _ ,_adg :=range _fac {_cea ,_ggd :=_a .GetStream (_adg );if !_ggd {continue ;};if _ ,_fecc :=_bagd [_cea ];_fecc {continue ;};_bagd [_cea ]=struct{}{};_fdf :=_cea .PdfObjectDictionary .Get (_aag );_cbd ,_ggd :=_a .GetName (_fdf );if !_ggd ||string (*_cbd )!="\u0049\u006d\u0061g\u0065"{continue ;};_egg :=&imageInfo {BitsPerComponent :8,Stream :_cea };if _egg .ColorSpace ,_fffa =_da .DetermineColorspaceNameFromPdfObject (_cea .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_fffa !=nil {_gf .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_fffa );continue ;};if _bdg ,_fggc :=_a .GetIntVal (_cea .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_fggc {_egg .BitsPerComponent =_bdg ;};if _dfdc ,_dae :=_a .GetIntVal (_cea .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_dae {_egg .Width =_dfdc ;};if _ebege ,_aba :=_a .GetIntVal (_cea .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_aba {_egg .Height =_ebege ;};switch _egg .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_egg .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_egg .ColorComponents =1;default:_gf .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_egg .ColorSpace );continue ;};_cgf =append (_cgf ,_egg );};return _cgf ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbg *CombineIdenticalIndirectObjects )Optimize (objects []_a .PdfObject )(_gccc []_a .PdfObject ,_gae error ){_fdaa (objects );_bgd :=make (map[_a .PdfObject ]_a .PdfObject );_fda :=make (map[_a .PdfObject ]struct{});_aca :=make (map[string ][]*_a .PdfIndirectObject );for _ ,_cafe :=range objects {_gcb ,_fcef :=_cafe .(*_a .PdfIndirectObject );if !_fcef {continue ;};if _fdg ,_bgcf :=_gcb .PdfObject .(*_a .PdfObjectDictionary );_bgcf {if _dfa ,_ecga :=_fdg .Get ("\u0054\u0079\u0070\u0065").(*_a .PdfObjectName );_ecga &&*_dfa =="\u0050\u0061\u0067\u0065"{continue ;};_aab :=_fb .New ();_aab .Write ([]byte (_fdg .WriteString ()));_gaef :=string (_aab .Sum (nil ));_aca [_gaef ]=append (_aca [_gaef ],_gcb );};};for _ ,_bfb :=range _aca {if len (_bfb )< 2{continue ;};_babae :=_bfb [0];for _dcb :=1;_dcb < len (_bfb );_dcb ++{_age :=_bfb [_dcb ];_bgd [_age ]=_babae ;_fda [_age ]=struct{}{};};};_gccc =make ([]_a .PdfObject ,0,len (objects )-len (_fda ));for _ ,_bbbdg :=range objects {if _ ,_acc :=_fda [_bbbdg ];_acc {continue ;};_gccc =append (_gccc ,_bbbdg );};_ebad (_gccc ,_bgd );return _gccc ,nil ;};