//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_gfg "bytes";_ea "crypto/md5";_gd "errors";_g "github.com/unidoc/unipdf/v3/common";_fc "github.com/unidoc/unipdf/v3/contentstream";_e "github.com/unidoc/unipdf/v3/core";_aa "github.com/unidoc/unipdf/v3/extractor";_ae "github.com/unidoc/unipdf/v3/internal/imageutil";
_a "github.com/unidoc/unipdf/v3/internal/textencoding";_ad "github.com/unidoc/unipdf/v3/model";_gf "github.com/unidoc/unitype";_d "golang.org/x/image/draw";_f "math";);func _bfff (_dgcc []_e .PdfObject )[]*imageInfo {_fecb :=_e .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");
_bde :=make (map[*_e .PdfObjectStream ]struct{});var _ebae error ;var _bccb []*imageInfo ;for _ ,_fdd :=range _dgcc {_ebef ,_ecg :=_e .GetStream (_fdd );if !_ecg {continue ;};if _ ,_abdb :=_bde [_ebef ];_abdb {continue ;};_bde [_ebef ]=struct{}{};_fcgg :=_ebef .PdfObjectDictionary .Get (_fecb );
_eca ,_ecg :=_e .GetName (_fcgg );if !_ecg ||string (*_eca )!="\u0049\u006d\u0061g\u0065"{continue ;};_fae :=&imageInfo {BitsPerComponent :8,Stream :_ebef };if _fae .ColorSpace ,_ebae =_ad .DetermineColorspaceNameFromPdfObject (_ebef .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
_ebae !=nil {_g .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_ebae );continue ;};if _fadd ,_fab :=_e .GetIntVal (_ebef .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));
_fab {_fae .BitsPerComponent =_fadd ;};if _bffe ,_cde :=_e .GetIntVal (_ebef .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_cde {_fae .Width =_bffe ;};if _cdb ,_ccb :=_e .GetIntVal (_ebef .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));
_ccb {_fae .Height =_cdb ;};switch _fae .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fae .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fae .ColorComponents =1;default:_g .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_fae .ColorSpace );
continue ;};_bccb =append (_bccb ,_fae );};return _bccb ;};type imageInfo struct{ColorSpace _e .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_e .PdfObjectStream ;PPI float64 ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _cdge (_eff *_ad .XObjectImage ,_gcg imageModifications )error {_eaga ,_aac :=_eff .ToImage ();if _aac !=nil {return _aac ;};if _gcg .Scale !=0{_eaga ,_aac =_add (_eaga ,_gcg .Scale );if _aac !=nil {return _aac ;};};if _gcg .Encoding !=nil {_eff .Filter =_gcg .Encoding ;
};_dcd :=_e .MakeDict ();_dcd .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_e .MakeInteger (100));_dcd .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_e .MakeInteger (1));_eff .Decode =nil ;if _aac =_eff .SetImage (_eaga ,nil );_aac !=nil {return _aac ;
};_eff .ToPdfObject ();return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cee *CleanContentstream )Optimize (objects []_e .PdfObject )(_cbc []_e .PdfObject ,_be error ){_dc :=map[*_e .PdfObjectStream ]struct{}{};var _af []*_e .PdfObjectStream ;_ff :=func (_gg *_e .PdfObjectStream ){if _ ,_ebg :=_dc [_gg ];!_ebg {_dc [_gg ]=struct{}{};
_af =append (_af ,_gg );};};for _ ,_bed :=range objects {switch _aagf :=_bed .(type ){case *_e .PdfIndirectObject :switch _ba :=_aagf .PdfObject .(type ){case *_e .PdfObjectDictionary :if _bca ,_ca :=_e .GetName (_ba .Get ("\u0054\u0079\u0070\u0065"));
!_ca ||_bca .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _aea ,_fe :=_e .GetStream (_ba .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_fe {_ff (_aea );}else if _bb ,_ebb :=_e .GetArray (_ba .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ebb {for _ ,_bf :=range _bb .Elements (){if _bee ,_ebe :=_e .GetStream (_bf );_ebe {_ff (_bee );};};};};case *_e .PdfObjectStream :if _aff ,_gaf :=_e .GetName (_aagf .Get ("\u0054\u0079\u0070\u0065"));!_gaf ||_aff .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;
};if _gfd ,_adb :=_e .GetName (_aagf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_adb ||_gfd .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ff (_aagf );};};for _ ,_agb :=range _af {_be =_ga (_agb );if _be !=nil {return nil ,_be ;};};return objects ,nil ;
};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_dd []_ad .Optimizer };

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};func _add (_gbc *_ad .Image ,_aeb float64 )(*_ad .Image ,error ){_cbbg ,_daaa :=_gbc .ToGoImage ();if _daaa !=nil {return nil ,_daaa ;};var _fbgdd _ae .Image ;_ffg ,_agefa :=_cbbg .(*_ae .Monochrome );if _agefa {if _daaa =_ffg .ResolveDecode ();
_daaa !=nil {return nil ,_daaa ;};_fbgdd ,_daaa =_ffg .Scale (_aeb );if _daaa !=nil {return nil ,_daaa ;};}else {_daac :=int (_f .RoundToEven (float64 (_gbc .Width )*_aeb ));_dbbd :=int (_f .RoundToEven (float64 (_gbc .Height )*_aeb ));_fbgdd ,_daaa =_ae .NewImage (_daac ,_dbbd ,int (_gbc .BitsPerComponent ),_gbc .ColorComponents ,nil ,nil ,nil );
if _daaa !=nil {return nil ,_daaa ;};_d .CatmullRom .Scale (_fbgdd ,_fbgdd .Bounds (),_cbbg ,_cbbg .Bounds (),_d .Over ,&_d .Options {});};_eef :=_fbgdd .Base ();_abad :=&_ad .Image {Width :int64 (_eef .Width ),Height :int64 (_eef .Height ),BitsPerComponent :int64 (_eef .BitsPerComponent ),ColorComponents :_eef .ColorComponents ,Data :_eef .Data };
_abad .SetDecode (_eef .Decode );_abad .SetAlpha (_eef .Alpha );return _abad ,nil ;};func _dgbd (_ccbf []_e .PdfObject )objectStructure {_bgc :=objectStructure {};_egcg :=false ;for _ ,_dfgaf :=range _ccbf {switch _fabc :=_dfgaf .(type ){case *_e .PdfIndirectObject :_cdadd ,_ebc :=_e .GetDict (_fabc );
if !_ebc {continue ;};_facg ,_ebc :=_e .GetName (_cdadd .Get ("\u0054\u0079\u0070\u0065"));if !_ebc {continue ;};switch _facg .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_bgc ._adfg =_cdadd ;_egcg =true ;};};if _egcg {break ;};};if !_egcg {return _bgc ;
};_gda ,_gfdd :=_e .GetDict (_bgc ._adfg .Get ("\u0050\u0061\u0067e\u0073"));if !_gfdd {return _bgc ;};_bgc ._bdag =_gda ;_dca ,_gfdd :=_e .GetArray (_gda .Get ("\u004b\u0069\u0064\u0073"));if !_gfdd {return _bgc ;};for _ ,_gbe :=range _dca .Elements (){_bbbg ,_gcca :=_e .GetIndirect (_gbe );
if !_gcca {break ;};_bgc ._fge =append (_bgc ._fge ,_bbbg );};return _bgc ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _bbb (_aef []_e .PdfObject )(_afg map[*_e .PdfObjectStream ]struct{},_fcd error ){_afg =map[*_e .PdfObjectStream ]struct{}{};_adf :=map[*_ad .PdfFont ]struct{}{};_de :=_dgbd (_aef );for _ ,_dba :=range _de ._fge {_eg ,_bcd :=_e .GetDict (_dba .PdfObject );
if !_bcd {continue ;};_bac ,_bcd :=_e .GetDict (_eg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bcd {continue ;};_cdg ,_ :=_fedf (_eg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ge ,_gaa :=_ad .NewPdfPageResourcesFromDict (_bac );
if _gaa !=nil {return nil ,_gaa ;};_ceg :=[]content {{_baa :_cdg ,_fbf :_ge }};_ed :=_cc (_eg .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ed !=nil {_ceg =append (_ceg ,_ed ...);};for _ ,_bga :=range _ceg {_baf ,_dbc :=_aa .NewFromContents (_bga ._baa ,_bga ._fbf );
if _dbc !=nil {return nil ,_dbc ;};_ggg ,_ ,_ ,_dbc :=_baf .ExtractPageText ();if _dbc !=nil {return nil ,_dbc ;};for _ ,_fdb :=range _ggg .Marks ().Elements (){if _fdb .Font ==nil {continue ;};if _ ,_cea :=_adf [_fdb .Font ];!_cea {_adf [_fdb .Font ]=struct{}{};
};};};};_ggb :=map[*_e .PdfObjectStream ][]*_ad .PdfFont {};for _cdf :=range _adf {_ecd :=_cdf .FontDescriptor ();if _ecd ==nil ||_ecd .FontFile2 ==nil {continue ;};_fac ,_cac :=_e .GetStream (_ecd .FontFile2 );if !_cac {continue ;};_ggb [_fac ]=append (_ggb [_fac ],_cdf );
};for _dfg :=range _ggb {var _faf []rune ;var _edf []_gf .GlyphIndex ;for _ ,_gfb :=range _ggb [_dfg ]{switch _ffc :=_gfb .Encoder ().(type ){case *_a .IdentityEncoder :_eac :=_ffc .RegisteredRunes ();_caf :=make ([]_gf .GlyphIndex ,len (_eac ));for _fb ,_afga :=range _eac {_caf [_fb ]=_gf .GlyphIndex (_afga );
};_edf =append (_edf ,_caf ...);case *_a .TrueTypeFontEncoder :_fcdb :=_ffc .RegisteredRunes ();_faf =append (_faf ,_fcdb ...);case _a .SimpleEncoder :_cad :=_ffc .Charcodes ();for _ ,_gea :=range _cad {_cdgc ,_ecb :=_ffc .CharcodeToRune (_gea );if !_ecb {_g .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_gea );
continue ;};_faf =append (_faf ,_cdgc );};};};_fcd =_def (_dfg ,_faf ,_edf );if _fcd !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_fcd );
return nil ,_fcd ;};_afg [_dfg ]=struct{}{};};return _afg ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};func _fedf (_beb _e .PdfObject )(_eccc string ,_cacg []_e .PdfObject ){var _fccb _gfg .Buffer ;switch _dbcc :=_beb .(type ){case *_e .PdfIndirectObject :_cacg =append (_cacg ,_dbcc );_beb =_dbcc .PdfObject ;};
switch _afdd :=_beb .(type ){case *_e .PdfObjectStream :if _bbcg ,_cega :=_e .DecodeStream (_afdd );_cega ==nil {_fccb .Write (_bbcg );_cacg =append (_cacg ,_afdd );};case *_e .PdfObjectArray :for _ ,_aaba :=range _afdd .Elements (){switch _bcca :=_aaba .(type ){case *_e .PdfObjectStream :if _fgafe ,_bgdbd :=_e .DecodeStream (_bcca );
_bgdbd ==nil {_fccb .Write (_fgafe );_cacg =append (_cacg ,_bcca );};};};};return _fccb .String (),_cacg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dg *CleanFonts )Optimize (objects []_e .PdfObject )(_bce []_e .PdfObject ,_fbb error ){var _cff map[*_e .PdfObjectStream ]struct{};if _dg .Subset {var _bd error ;_cff ,_bd =_bbb (objects );if _bd !=nil {return nil ,_bd ;};};for _ ,_ab :=range objects {_fad ,_ceb :=_e .GetStream (_ab );
if !_ceb {continue ;};if _ ,_bff :=_cff [_fad ];_bff {continue ;};_gdb ,_ef :=_e .NewEncoderFromStream (_fad );if _ef !=nil {_g .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_ef );
continue ;};_adfa ,_ef :=_gdb .DecodeStream (_fad );if _ef !=nil {_g .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_ef );
continue ;};if len (_adfa )< 4{continue ;};_dce :=string (_adfa [:4]);if _dce =="\u004f\u0054\u0054\u004f"{continue ;};if _dce !="\u0000\u0001\u0000\u0000"&&_dce !="\u0074\u0072\u0075\u0065"{continue ;};_cg ,_ef :=_gf .Parse (_gfg .NewReader (_adfa ));
if _ef !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ef );continue ;};_ef =_cg .Optimize ();
if _ef !=nil {continue ;};var _gfbb _gfg .Buffer ;_ef =_cg .Write (&_gfbb );if _ef !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ef );
continue ;};if _gfbb .Len ()> len (_adfa ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_gad ,_ef :=_e .MakeStream (_gfbb .Bytes (),_e .NewFlateEncoder ());if _ef !=nil {continue ;};*_fad =*_gad ;_fad .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_e .MakeInteger (int64 (_gfbb .Len ())));};return objects ,nil ;};func _ee (_b *_fc .ContentStreamOperations )*_fc .ContentStreamOperations {if _b ==nil {return nil ;
};_cb :=_fc .ContentStreamOperations {};for _ ,_fa :=range *_b {switch _fa .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_fa .Params )==6{if _ce ,_db :=_e .GetNumbersAsFloat (_fa .Params );
_db ==nil {if _ce [0]==1&&_ce [1]==0&&_ce [2]==0&&_ce [3]==1{_fa =&_fc .ContentStreamOperation {Params :[]_e .PdfObject {_fa .Params [4],_fa .Params [5]},Operand :"\u0054\u0064"};};};};};_cb =append (_cb ,_fa );};return &_cb ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dcc *CombineDuplicateStreams )Optimize (objects []_e .PdfObject )(_bbd []_e .PdfObject ,_beee error ){_eab :=make (map[_e .PdfObject ]_e .PdfObject );_dag :=make (map[_e .PdfObject ]struct{});_eabb :=make (map[string ][]*_e .PdfObjectStream );for _ ,_bgb :=range objects {if _fbc ,_bafe :=_bgb .(*_e .PdfObjectStream );
_bafe {_fag :=_ea .New ();_fag .Write (_fbc .Stream );_fag .Write ([]byte (_fbc .PdfObjectDictionary .WriteString ()));_gb :=string (_fag .Sum (nil ));_eabb [_gb ]=append (_eabb [_gb ],_fbc );};};for _ ,_efe :=range _eabb {if len (_efe )< 2{continue ;};
_agef :=_efe [0];for _bcgf :=1;_bcgf < len (_efe );_bcgf ++{_cfg :=_efe [_bcgf ];_eab [_cfg ]=_agef ;_dag [_cfg ]=struct{}{};};};_bbd =make ([]_e .PdfObject ,0,len (objects )-len (_dag ));for _ ,_bcb :=range objects {if _ ,_dcf :=_dag [_bcb ];_dcf {continue ;
};_bbd =append (_bbd ,_bcb );};_bdg (_bbd ,_eab );return _bbd ,nil ;};type imageModifications struct{Scale float64 ;Encoding _e .StreamEncoder ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bcc *CompressStreams )Optimize (objects []_e .PdfObject )(_cecc []_e .PdfObject ,_fbd error ){_cecc =make ([]_e .PdfObject ,len (objects ));copy (_cecc ,objects );for _ ,_eea :=range objects {_efa ,_becf :=_e .GetStream (_eea );if !_becf {continue ;
};if _ceac :=_efa .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_ceac !=nil {if _ ,_bbc :=_e .GetName (_ceac );_bbc {continue ;};if _cga ,_ebf :=_e .GetArray (_ceac );_ebf &&_cga .Len ()> 0{continue ;};};_dde :=_e .NewFlateEncoder ();var _cdgb []byte ;
_cdgb ,_fbd =_dde .EncodeBytes (_efa .Stream );if _fbd !=nil {return _cecc ,_fbd ;};_gcb :=_dde .MakeStreamDict ();if len (_cdgb )+len (_gcb .WriteString ())< len (_efa .Stream ){_efa .Stream =_cdgb ;_efa .PdfObjectDictionary .Merge (_gcb );_efa .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_e .MakeInteger (int64 (len (_efa .Stream ))));
};};return _cecc ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_gcce :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_gcce .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_gcce .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ffgg :=new (ImagePPI );
_ffgg .ImageUpperPPI =options .ImageUpperPPI ;_gcce .Append (_ffgg );};if options .ImageQuality > 0{_cdef :=new (Image );_cdef .ImageQuality =options .ImageQuality ;_gcce .Append (_cdef );};if options .CombineDuplicateDirectObjects {_gcce .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_gcce .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_gcce .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_gcce .Append (new (ObjectStreams ));
};if options .CompressStreams {_gcce .Append (new (CompressStreams ));};return _gcce ;};

// Append appends optimizers to the chain.
func (_aag *Chain )Append (optimizers ..._ad .Optimizer ){_aag ._dd =append (_aag ._dd ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eb *Chain )Optimize (objects []_e .PdfObject )(_ec []_e .PdfObject ,_df error ){_ec =objects ;for _ ,_dfa :=range _eb ._dd {_ec ,_df =_dfa .Optimize (_ec );if _df !=nil {return _ec ,_df ;};};return _ec ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbfa *CombineIdenticalIndirectObjects )Optimize (objects []_e .PdfObject )(_afd []_e .PdfObject ,_dgc error ){_bgdb (objects );_dfba :=make (map[_e .PdfObject ]_e .PdfObject );_ece :=make (map[_e .PdfObject ]struct{});_dcg :=make (map[string ][]*_e .PdfIndirectObject );
for _ ,_fga :=range objects {_aed ,_fbe :=_fga .(*_e .PdfIndirectObject );if !_fbe {continue ;};if _fbgd ,_deg :=_aed .PdfObject .(*_e .PdfObjectDictionary );_deg {if _cgf ,_bcad :=_fbgd .Get ("\u0054\u0079\u0070\u0065").(*_e .PdfObjectName );_bcad &&*_cgf =="\u0050\u0061\u0067\u0065"{continue ;
};_bege :=_ea .New ();_bege .Write ([]byte (_fbgd .WriteString ()));_geb :=string (_bege .Sum (nil ));_dcg [_geb ]=append (_dcg [_geb ],_aed );};};for _ ,_fbga :=range _dcg {if len (_fbga )< 2{continue ;};_dfee :=_fbga [0];for _bge :=1;_bge < len (_fbga );
_bge ++{_cdga :=_fbga [_bge ];_dfba [_cdga ]=_dfee ;_ece [_cdga ]=struct{}{};};};_afd =make ([]_e .PdfObject ,0,len (objects )-len (_ece ));for _ ,_bbf :=range objects {if _ ,_feb :=_ece [_bbf ];_feb {continue ;};_afd =append (_afd ,_bbf );};_bdg (_afd ,_dfba );
return _afd ,nil ;};type content struct{_baa string ;_fbf *_ad .PdfPageResources ;};func _def (_afe *_e .PdfObjectStream ,_aagd []rune ,_gfge []_gf .GlyphIndex )error {_afe ,_gfgc :=_e .GetStream (_afe );if !_gfgc {_g .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _gd .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_fcdf ,_cacf :=_e .DecodeStream (_afe );if _cacf !=nil {_g .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_cacf );
return _cacf ;};_eba ,_cacf :=_gf .Parse (_gfg .NewReader (_fcdf ));if _cacf !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_afe .Stream ));
return _cacf ;};_eag :=_gfge ;if len (_aagd )> 0{_dff :=_eba .LookupRunes (_aagd );_eag =append (_eag ,_dff ...);};_eba ,_cacf =_eba .SubsetKeepIndices (_eag );if _cacf !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_cacf );
return _cacf ;};var _ffcd _gfg .Buffer ;_cacf =_eba .Write (&_ffcd );if _cacf !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cacf );return _cacf ;};if _ffcd .Len ()> len (_fcdf ){_g .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_bcag ,_cacf :=_e .MakeStream (_ffcd .Bytes (),_e .NewFlateEncoder ());if _cacf !=nil {_g .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_cacf );return _cacf ;
};*_afe =*_bcag ;_afe .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_e .MakeInteger (int64 (_ffcd .Len ())));return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdad *ImagePPI )Optimize (objects []_e .PdfObject )(_ced []_e .PdfObject ,_dgb error ){if _cdad .ImageUpperPPI <=0{return objects ,nil ;};_effc :=_bfff (objects );if len (_effc )==0{return objects ,nil ;};_egdb :=make (map[_e .PdfObject ]struct{});
for _ ,_cag :=range _effc {_bbbc :=_cag .Stream .PdfObjectDictionary .Get (_e .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_egdb [_bbbc ]=struct{}{};};_bdb :=make (map[*_e .PdfObjectStream ]*imageInfo );for _ ,_agfa :=range _effc {_bdb [_agfa .Stream ]=_agfa ;
};var _bdeb *_e .PdfObjectDictionary ;for _ ,_eeg :=range objects {if _gfbbd ,_cbbc :=_e .GetDict (_eeg );_bdeb ==nil &&_cbbc {if _gcc ,_cce :=_e .GetName (_gfbbd .Get (_e .PdfObjectName ("\u0054\u0079\u0070\u0065")));_cce &&*_gcc =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_bdeb =_gfbbd ;
};};};if _bdeb ==nil {return objects ,nil ;};_fff ,_ffb :=_e .GetDict (_bdeb .Get (_e .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_ffb {return objects ,nil ;};_bcbf ,_gga :=_e .GetArray (_fff .Get (_e .PdfObjectName ("\u004b\u0069\u0064\u0073")));
if !_gga {return objects ,nil ;};_adc :=make (map[string ]*imageInfo );for _ ,_adce :=range _bcbf .Elements (){_bfg ,_ggf :=_e .GetDict (_adce );if !_ggf {continue ;};_feg ,_fgge :=_e .GetArray (_bfg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
if !_fgge {continue ;};_aeg ,_efeg :=_e .GetDict (_bfg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_efeg {continue ;};_bcea ,_dbfa :=_e .GetDict (_aeg .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_dbfa {continue ;};_fcga :=_bcea .Keys ();
for _ ,_gdfd :=range _fcga {if _gae ,_eced :=_e .GetStream (_bcea .Get (_gdfd ));_eced {if _dgbe ,_cdfeg :=_bdb [_gae ];_cdfeg {_adc [string (_gdfd )]=_dgbe ;};};};for _ ,_cadc :=range _feg .Elements (){if _fba ,_fgb :=_e .GetStream (_cadc );_fgb {_ccbd ,_fdce :=_e .NewEncoderFromStream (_fba );
if _fdce !=nil {return nil ,_fdce ;};_efee ,_fdce :=_ccbd .DecodeStream (_fba );if _fdce !=nil {return nil ,_fdce ;};_gegc :=_fc .NewContentStreamParser (string (_efee ));_ceceb ,_fdce :=_gegc .Parse ();if _fdce !=nil {return nil ,_fdce ;};_bbe ,_agg :=1.0,1.0;
for _ ,_eeef :=range *_ceceb {if _eeef .Operand =="\u0051"{_bbe ,_agg =1.0,1.0;};if _eeef .Operand =="\u0063\u006d"&&len (_eeef .Params )==6{if _fcb ,_bdad :=_e .GetFloatVal (_eeef .Params [0]);_bdad {_bbe =_bbe *_fcb ;};if _aacd ,_aab :=_e .GetFloatVal (_eeef .Params [3]);
_aab {_agg =_agg *_aacd ;};if _acg ,_dge :=_e .GetIntVal (_eeef .Params [0]);_dge {_bbe =_bbe *float64 (_acg );};if _dcfd ,_gbce :=_e .GetIntVal (_eeef .Params [3]);_gbce {_agg =_agg *float64 (_dcfd );};};if _eeef .Operand =="\u0044\u006f"&&len (_eeef .Params )==1{_efea ,_ggbc :=_e .GetName (_eeef .Params [0]);
if !_ggbc {continue ;};if _efc ,_ecbe :=_adc [string (*_efea )];_ecbe {_gde ,_bcaf :=_bbe /72.0,_agg /72.0;_bgdc ,_effb :=float64 (_efc .Width )/_gde ,float64 (_efc .Height )/_bcaf ;if _gde ==0||_bcaf ==0{_bgdc =72.0;_effb =72.0;};_efc .PPI =_f .Max (_efc .PPI ,_bgdc );
_efc .PPI =_f .Max (_efc .PPI ,_effb );};};};};};};for _ ,_edeb :=range _effc {if _ ,_faeb :=_egdb [_edeb .Stream ];_faeb {continue ;};if _edeb .PPI <=_cdad .ImageUpperPPI {continue ;};_aaed ,_gbg :=_ad .NewXObjectImageFromStream (_edeb .Stream );if _gbg !=nil {return nil ,_gbg ;
};var _ceaf imageModifications ;_ceaf .Scale =_cdad .ImageUpperPPI /_edeb .PPI ;if _edeb .BitsPerComponent ==1&&_edeb .ColorComponents ==1{_fede :=_f .Round (_edeb .PPI /_cdad .ImageUpperPPI );_aad :=_ae .NextPowerOf2 (uint (_fede ));if _ae .InDelta (float64 (_aad ),1/_ceaf .Scale ,0.3){_ceaf .Scale =float64 (1)/float64 (_aad );
};if _ ,_cdfg :=_aaed .Filter .(*_e .JBIG2Encoder );!_cdfg {_ceaf .Encoding =_e .NewJBIG2Encoder ();};};if _gbg =_cdge (_aaed ,_ceaf );_gbg !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_gbg );
continue ;};_ceaf .Encoding =nil ;if _caa ,_dgf :=_e .GetStream (_edeb .Stream .PdfObjectDictionary .Get (_e .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_dgf {_ggbg ,_gfbc :=_ad .NewXObjectImageFromStream (_caa );if _gfbc !=nil {return nil ,_gfbc ;};
if _gfbc =_cdge (_ggbg ,_ceaf );_gfbc !=nil {return nil ,_gfbc ;};};};return objects ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};func _bdg (_gedg []_e .PdfObject ,_acf map[_e .PdfObject ]_e .PdfObject ){if len (_acf )==0{return ;};for _ega ,_eabd :=range _gedg {if _edfe ,_abc :=_acf [_eabd ];_abc {_gedg [_ega ]=_edfe ;continue ;};_acf [_eabd ]=_eabd ;switch _gebf :=_eabd .(type ){case *_e .PdfObjectArray :_dfef :=make ([]_e .PdfObject ,_gebf .Len ());
copy (_dfef ,_gebf .Elements ());_bdg (_dfef ,_acf );for _gbd ,_dbbg :=range _dfef {_gebf .Set (_gbd ,_dbbg );};case *_e .PdfObjectStreams :_bdg (_gebf .Elements (),_acf );case *_e .PdfObjectStream :_fdf :=[]_e .PdfObject {_gebf .PdfObjectDictionary };
_bdg (_fdf ,_acf );_gebf .PdfObjectDictionary =_fdf [0].(*_e .PdfObjectDictionary );case *_e .PdfObjectDictionary :_fcc :=_gebf .Keys ();_daf :=make ([]_e .PdfObject ,len (_fcc ));for _eaca ,_dgccc :=range _fcc {_daf [_eaca ]=_gebf .Get (_dgccc );};_bdg (_daf ,_acf );
for _aeag ,_dgg :=range _fcc {_gebf .Set (_dgg ,_daf [_aeag ]);};case *_e .PdfIndirectObject :_cada :=[]_e .PdfObject {_gebf .PdfObject };_bdg (_cada ,_acf );_gebf .PdfObject =_cada [0];};};};type objectStructure struct{_adfg *_e .PdfObjectDictionary ;
_bdag *_e .PdfObjectDictionary ;_fge []*_e .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aagfb *ObjectStreams )Optimize (objects []_e .PdfObject )(_bcf []_e .PdfObject ,_gef error ){_dgba :=&_e .PdfObjectStreams {};_dea :=make ([]_e .PdfObject ,0,len (objects ));for _ ,_bgaa :=range objects {if _dae ,_fedb :=_bgaa .(*_e .PdfIndirectObject );
_fedb &&_dae .GenerationNumber ==0{_dgba .Append (_bgaa );}else {_dea =append (_dea ,_bgaa );};};if _dgba .Len ()==0{return _dea ,nil ;};_bcf =make ([]_e .PdfObject ,0,len (_dea )+_dgba .Len ()+1);if _dgba .Len ()> 1{_bcf =append (_bcf ,_dgba );};_bcf =append (_bcf ,_dgba .Elements ()...);
_bcf =append (_bcf ,_dea ...);return _bcf ,nil ;};func _bgdb (_cfbg []_e .PdfObject ){for _bgba ,_bbcf :=range _cfbg {switch _afae :=_bbcf .(type ){case *_e .PdfIndirectObject :_afae .ObjectNumber =int64 (_bgba +1);_afae .GenerationNumber =0;case *_e .PdfObjectStream :_afae .ObjectNumber =int64 (_bgba +1);
_afae .GenerationNumber =0;case *_e .PdfObjectStreams :_afae .ObjectNumber =int64 (_bgba +1);_afae .GenerationNumber =0;};};};func _ga (_bg *_e .PdfObjectStream )error {_bc ,_cd :=_e .DecodeStream (_bg );if _cd !=nil {return _cd ;};_cf :=_fc .NewContentStreamParser (string (_bc ));
_gc ,_cd :=_cf .Parse ();if _cd !=nil {return _cd ;};_gc =_ee (_gc );_cec :=_gc .Bytes ();if len (_cec )>=len (_bc ){return nil ;};_dbb ,_cd :=_e .MakeStream (_gc .Bytes (),_e .NewFlateEncoder ());if _cd !=nil {return _cd ;};_bg .Stream =_dbb .Stream ;
_bg .Merge (_dbb .PdfObjectDictionary );return nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_abg *CombineDuplicateDirectObjects )Optimize (objects []_e .PdfObject )(_dbac []_e .PdfObject ,_fg error ){_bgdb (objects );_cfc :=make (map[string ][]*_e .PdfObjectDictionary );var _adg func (_cdfe *_e .PdfObjectDictionary );_adg =func (_ccd *_e .PdfObjectDictionary ){for _ ,_ggc :=range _ccd .Keys (){_ffcg :=_ccd .Get (_ggc );
if _cda ,_aae :=_ffcg .(*_e .PdfObjectDictionary );_aae {_gca :=_ea .New ();_gca .Write ([]byte (_cda .WriteString ()));_adbe :=string (_gca .Sum (nil ));_cfc [_adbe ]=append (_cfc [_adbe ],_cda );_adg (_cda );};};};for _ ,_eee :=range objects {_egc ,_ebad :=_eee .(*_e .PdfIndirectObject );
if !_ebad {continue ;};if _bgdf ,_bgde :=_egc .PdfObject .(*_e .PdfObjectDictionary );_bgde {_adg (_bgdf );};};_fec :=make ([]_e .PdfObject ,0,len (_cfc ));_abd :=make (map[_e .PdfObject ]_e .PdfObject );for _ ,_cbg :=range _cfc {if len (_cbg )< 2{continue ;
};_gdf :=_e .MakeDict ();_gdf .Merge (_cbg [0]);_fgg :=_e .MakeIndirectObject (_gdf );_fec =append (_fec ,_fgg );for _geg :=0;_geg < len (_cbg );_geg ++{_eec :=_cbg [_geg ];_abd [_eec ]=_fgg ;};};_dbac =make ([]_e .PdfObject ,len (objects ));copy (_dbac ,objects );
_dbac =append (_fec ,_dbac ...);_bdg (_dbac ,_abd );return _dbac ,nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _cc (_dfea _e .PdfObject )[]content {if _dfea ==nil {return nil ;};_agbe ,_gdba :=_e .GetArray (_dfea );if !_gdba {_g .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _eed []content ;for _ ,_gcd :=range _agbe .Elements (){_beg ,_cgd :=_e .GetDict (_gcd );if !_cgd {_g .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_bda ,_cgd :=_e .GetDict (_beg .Get ("\u0041\u0050"));if !_cgd {_g .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_aagb :=_e .TraceToDirectObject (_bda .Get ("\u004e"));
if _aagb ==nil {_g .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _fbg *_e .PdfObjectStream ;switch _eedf :=_aagb .(type ){case *_e .PdfObjectDictionary :_gee ,_dfb :=_e .GetName (_beg .Get ("\u0041\u0053"));
if !_dfb {_g .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fbg ,_dfb =_e .GetStream (_eedf .Get (*_gee ));if !_dfb {_g .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_e .PdfObjectStream :_fbg =_eedf ;};if _fbg ==nil {_g .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_afa ,_fbbg :=_ad .NewXObjectFormFromStream (_fbg );if _fbbg !=nil {_g .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fbbg );
continue ;};_defc ,_fbbg :=_afa .GetContentStream ();if _fbbg !=nil {_g .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_fbbg );continue ;};_eed =append (_eed ,content {_baa :string (_defc ),_fbf :_afa .Resources });
};return _eed ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ada *Image )Optimize (objects []_e .PdfObject )(_dab []_e .PdfObject ,_fda error ){if _ada .ImageQuality <=0{return objects ,nil ;};_bdf :=_bfff (objects );if len (_bdf )==0{return objects ,nil ;};_ecc :=make (map[_e .PdfObject ]_e .PdfObject );
_bbgg :=make (map[_e .PdfObject ]struct{});for _ ,_bcgc :=range _bdf {_ede :=_bcgc .Stream .PdfObjectDictionary .Get (_e .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_bbgg [_ede ]=struct{}{};};for _gcf ,_gdc :=range _bdf {_efd :=_gdc .Stream ;if _ ,_cece :=_bbgg [_efd ];
_cece {continue ;};_fgab ,_baad :=_e .NewEncoderFromStream (_efd );if _baad !=nil {_g .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");
continue ;};_gfea ,_baad :=_fgab .DecodeStream (_efd );if _baad !=nil {_g .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");
continue ;};_fggd :=_e .NewDCTEncoder ();_fggd .ColorComponents =_gdc .ColorComponents ;_fggd .Quality =_ada .ImageQuality ;_fggd .BitsPerComponent =_gdc .BitsPerComponent ;_fggd .Width =_gdc .Width ;_fggd .Height =_gdc .Height ;_agd ,_baad :=_fggd .EncodeBytes (_gfea );
if _baad !=nil {_g .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_baad );return nil ,_baad ;};var _ggd _e .StreamEncoder ;_ggd =_fggd ;{_cge :=_e .NewFlateEncoder ();_fbdc :=_e .NewMultiEncoder ();_fbdc .AddEncoder (_cge );_fbdc .AddEncoder (_fggd );
_gcfd ,_cdeb :=_fbdc .EncodeBytes (_gfea );if _cdeb !=nil {return nil ,_cdeb ;};if len (_gcfd )< len (_agd ){_g .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_agd ),len (_gcfd ),len (_efd .Stream ));
_agd =_gcfd ;_ggd =_fbdc ;};};_cbd :=len (_efd .Stream );if _cbd < len (_agd ){continue ;};_agf :=&_e .PdfObjectStream {Stream :_agd };_agf .PdfObjectReference =_efd .PdfObjectReference ;_agf .PdfObjectDictionary =_e .MakeDict ();_agf .Merge (_efd .PdfObjectDictionary );
_agf .Merge (_ggd .MakeStreamDict ());_agf .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_e .MakeInteger (int64 (len (_agd ))));_ecc [_efd ]=_agf ;_bdf [_gcf ].Stream =_agf ;};_dab =make ([]_e .PdfObject ,len (objects ));copy (_dab ,objects );_bdg (_dab ,_ecc );
return _dab ,nil ;};