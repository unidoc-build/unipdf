//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_cc "bytes";_bc "crypto/md5";_bd "errors";_d "fmt";_f "github.com/unidoc/unipdf/v3/common";_fd "github.com/unidoc/unipdf/v3/contentstream";_ga "github.com/unidoc/unipdf/v3/core";_ca "github.com/unidoc/unipdf/v3/extractor";_c "github.com/unidoc/unipdf/v3/internal/imageutil";
_ae "github.com/unidoc/unipdf/v3/internal/textencoding";_e "github.com/unidoc/unipdf/v3/model";_db "github.com/unidoc/unitype";_b "golang.org/x/image/draw";_a "math";_ba "strings";);

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cbd *CombineDuplicateStreams )Optimize (objects []_ga .PdfObject )(_abee []_ga .PdfObject ,_bgga error ){_fece :=make (map[_ga .PdfObject ]_ga .PdfObject );_ace :=make (map[_ga .PdfObject ]struct{});_bca :=make (map[string ][]*_ga .PdfObjectStream );
for _ ,_cfge :=range objects {if _afef ,_dfff :=_cfge .(*_ga .PdfObjectStream );_dfff {_gbff :=_bc .New ();_gbff .Write (_afef .Stream );_gbff .Write ([]byte (_afef .PdfObjectDictionary .WriteString ()));_efbd :=string (_gbff .Sum (nil ));_bca [_efbd ]=append (_bca [_efbd ],_afef );
};};for _ ,_eae :=range _bca {if len (_eae )< 2{continue ;};_gfba :=_eae [0];for _dcb :=1;_dcb < len (_eae );_dcb ++{_ebfd :=_eae [_dcb ];_fece [_ebfd ]=_gfba ;_ace [_ebfd ]=struct{}{};};};_abee =make ([]_ga .PdfObject ,0,len (objects )-len (_ace ));for _ ,_agab :=range objects {if _ ,_fgdc :=_ace [_agab ];
_fgdc {continue ;};_abee =append (_abee ,_agab );};_dabca (_abee ,_fece );return _abee ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aagc *CleanFonts )Optimize (objects []_ga .PdfObject )(_cbg []_ga .PdfObject ,_cbe error ){var _beaa map[*_ga .PdfObjectStream ]struct{};if _aagc .Subset {var _cfc error ;_beaa ,_cfc =_adg (objects );if _cfc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_cfc );
return nil ,_cfc ;};};for _ ,_ceec :=range objects {_gca ,_aaf :=_ga .GetStream (_ceec );if !_aaf {continue ;};if _ ,_efb :=_beaa [_gca ];_efb {continue ;};_acb ,_ddc :=_ga .NewEncoderFromStream (_gca );if _ddc !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_ddc );
continue ;};_afa ,_ddc :=_acb .DecodeStream (_gca );if _ddc !=nil {_f .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_ddc );
continue ;};if len (_afa )< 4{continue ;};_ccf :=string (_afa [:4]);if _ccf =="\u004f\u0054\u0054\u004f"{continue ;};if _ccf !="\u0000\u0001\u0000\u0000"&&_ccf !="\u0074\u0072\u0075\u0065"{continue ;};_dab ,_ddc :=_db .Parse (_cc .NewReader (_afa ));if _ddc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ddc );
continue ;};_ddc =_dab .Optimize ();if _ddc !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_ddc );continue ;};var _bdb _cc .Buffer ;
_ddc =_dab .Write (&_bdb );if _ddc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ddc );continue ;
};if _bdb .Len ()> len (_afa ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_ebf ,_ddc :=_ga .MakeStream (_bdb .Bytes (),_ga .NewFlateEncoder ());if _ddc !=nil {continue ;};*_gca =*_ebf ;_gca .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ga .MakeInteger (int64 (_bdb .Len ())));};return objects ,nil ;};func _aaab (_ffb []_ga .PdfObject )(map[_ga .PdfObject ]struct{},error ){_ebe :=_begd (_ffb );
_egad :=_ebe ._bdda ;_cfg :=make (map[_ga .PdfObject ]struct{});_gafg :=_deea (_egad );for _ ,_faf :=range _egad {_ddcb ,_dac :=_ga .GetDict (_faf .PdfObject );if !_dac {continue ;};_agfa ,_dac :=_ga .GetDict (_ddcb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_dac {continue ;};_gdbb :=_gafg ["\u0058O\u0062\u006a\u0065\u0063\u0074"];_beaae ,_dac :=_ga .GetDict (_agfa .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if _dac {_gcg :=_eba (_beaae );for _ ,_dbe :=range _gcg {if _cfcf (_dbe ,_gdbb ){continue ;
};_aebe :=*_ga .MakeName (_dbe );_ead :=_beaae .Get (_aebe );_cfg [_ead ]=struct{}{};_beaae .Remove (_aebe );_aafa :=_cfb (_ead ,_cfg );if _aafa !=nil {_f .Log .Debug ("\u0066\u0061\u0069\u006ce\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065r\u0073e\u0020\u006f\u0062\u006a\u0065\u0063\u0074 \u0025\u0076",_ead );
};};};_fda ,_dac :=_ga .GetDict (_agfa .Get ("\u0046\u006f\u006e\u0074"));_dge :=_gafg ["\u0046\u006f\u006e\u0074"];if _dac {_gga :=_eba (_fda );for _ ,_dabe :=range _gga {if _cfcf (_dabe ,_dge ){continue ;};_cgdd :=*_ga .MakeName (_dabe );_fef :=_fda .Get (_cgdd );
_cfg [_fef ]=struct{}{};_fda .Remove (_cgdd );_daf :=_cfb (_fef ,_cfg );if _daf !=nil {_f .Log .Debug ("\u0046\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_fef );
};};};_cec ,_dac :=_ga .GetDict (_agfa .Get ("\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"));if _dac {_abe :=_eba (_cec );_cbbc :=_gafg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];for _ ,_fecd :=range _abe {if _cfcf (_fecd ,_cbbc ){continue ;};_agea :=*_ga .MakeName (_fecd );
_fdf :=_cec .Get (_agea );_cfg [_fdf ]=struct{}{};_cec .Remove (_agea );_gdgd :=_cfb (_fdf ,_cfg );if _gdgd !=nil {_f .Log .Debug ("\u0066\u0061i\u006c\u0065\u0064\u0020\u0074\u006f\u0020\u0074\u0072\u0061\u0076\u0065\u0072\u0073\u0065\u0020\u006f\u0062\u006a\u0065\u0063\u0074 %\u0076\u000a",_fdf );
};};};};return _cfg ,nil ;};func _cfcf (_gfbe string ,_ccc []string )bool {for _ ,_cgg :=range _ccc {if _gfbe ==_cgg {return true ;};};return false ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fdg *ImagePPI )Optimize (objects []_ga .PdfObject )(_egff []_ga .PdfObject ,_dga error ){if _fdg .ImageUpperPPI <=0{return objects ,nil ;};_gbae :=_bfca (objects );if len (_gbae )==0{return objects ,nil ;};_gaca :=make (map[_ga .PdfObject ]struct{});
for _ ,_dffff :=range _gbae {_dbcd :=_dffff .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_gaca [_dbcd ]=struct{}{};};_cdg :=make (map[*_ga .PdfObjectStream ]*imageInfo );for _ ,_eeg :=range _gbae {_cdg [_eeg .Stream ]=_eeg ;};var _gedd *_ga .PdfObjectDictionary ;
for _ ,_gfcd :=range objects {if _gcb ,_bafc :=_ga .GetDict (_gfcd );_gedd ==nil &&_bafc {if _egcbf ,_bfcb :=_ga .GetName (_gcb .Get ("\u0054\u0079\u0070\u0065"));_bfcb &&*_egcbf =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_gedd =_gcb ;};};};if _gedd ==nil {return objects ,nil ;
};_bcgc ,_ebaf :=_ga .GetDict (_gedd .Get ("\u0050\u0061\u0067e\u0073"));if !_ebaf {return objects ,nil ;};_gdd ,_cebd :=_ga .GetArray (_bcgc .Get ("\u004b\u0069\u0064\u0073"));if !_cebd {return objects ,nil ;};for _ ,_edbf :=range _gdd .Elements (){_afdg :=make (map[string ]*imageInfo );
_dbg ,_bdfb :=_ga .GetDict (_edbf );if !_bdfb {continue ;};_gdaf ,_ :=_gedb (_dbg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_gdaf )==0{continue ;};_ffab ,_bbe :=_ga .GetDict (_dbg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_bbe {continue ;};_aaee ,_dcgd :=_e .NewPdfPageResourcesFromDict (_ffab );if _dcgd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_dcgd );
continue ;};_gacg ,_cfda :=_ga .GetDict (_ffab .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cfda {continue ;};_fge :=_gacg .Keys ();for _ ,_cab :=range _fge {if _fgf ,_gegc :=_ga .GetStream (_gacg .Get (_cab ));_gegc {if _eeee ,_affe :=_cdg [_fgf ];
_affe {_afdg [string (_cab )]=_eeee ;};};};_agg :=_fd .NewContentStreamParser (_gdaf );_bed ,_dcgd :=_agg .Parse ();if _dcgd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_dcgd );continue ;};_add :=_fd .NewContentStreamProcessor (*_bed );
_add .AddHandler (_fd .HandlerConditionEnumAllOperands ,"",func (_bedf *_fd .ContentStreamOperation ,_abf _fd .GraphicsState ,_gdab *_e .PdfPageResources )error {switch _bedf .Operand {case "\u0044\u006f":if len (_bedf .Params )!=1{_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_ece ,_bgac :=_ga .GetName (_bedf .Params [0]);if !_bgac {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _edcf ,_gabd :=_afdg [string (*_ece )];_gabd {_dafb :=_abf .CTM .ScalingFactorX ();_gdgg :=_abf .CTM .ScalingFactorY ();_gded ,_dbf :=_dafb /72.0,_gdgg /72.0;_aabd ,_ffg :=float64 (_edcf .Width )/_gded ,float64 (_edcf .Height )/_dbf ;if _gded ==0||_dbf ==0{_aabd =72.0;
_ffg =72.0;};_edcf .PPI =_a .Max (_edcf .PPI ,_aabd );_edcf .PPI =_a .Max (_edcf .PPI ,_ffg );};};return nil ;});_dcgd =_add .Process (_aaee );if _dcgd !=nil {_f .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_dcgd );
continue ;};};for _ ,_geef :=range _gbae {if _ ,_dcac :=_gaca [_geef .Stream ];_dcac {continue ;};if _geef .PPI <=_fdg .ImageUpperPPI {continue ;};_faecf ,_cff :=_e .NewXObjectImageFromStream (_geef .Stream );if _cff !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_cff );
continue ;};var _fac imageModifications ;_fac .Scale =_fdg .ImageUpperPPI /_geef .PPI ;if _geef .BitsPerComponent ==1&&_geef .ColorComponents ==1{_cag :=_a .Round (_geef .PPI /_fdg .ImageUpperPPI );_deac :=_c .NextPowerOf2 (uint (_cag ));if _c .InDelta (float64 (_deac ),1/_fac .Scale ,0.3){_fac .Scale =float64 (1)/float64 (_deac );
};if _ ,_fdc :=_faecf .Filter .(*_ga .JBIG2Encoder );!_fdc {_fac .Encoding =_ga .NewJBIG2Encoder ();};};if _cff =_ccbef (_faecf ,_fac );_cff !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_cff );
continue ;};_fac .Encoding =nil ;if _abc ,_aggb :=_ga .GetStream (_geef .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_aggb {_eegd ,_aced :=_e .NewXObjectImageFromStream (_abc );if _aced !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aced );
continue ;};if _aced =_ccbef (_eegd ,_fac );_aced !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aced );continue ;};};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_efg *CleanContentstream )Optimize (objects []_ga .PdfObject )(_dee []_ga .PdfObject ,_eg error ){_fbd :=map[*_ga .PdfObjectStream ]struct{}{};var _ded []*_ga .PdfObjectStream ;_ac :=func (_gg *_ga .PdfObjectStream ){if _ ,_ab :=_fbd [_gg ];!_ab {_fbd [_gg ]=struct{}{};
_ded =append (_ded ,_gg );};};_cd :=map[_ga .PdfObject ]bool {};_cca :=map[_ga .PdfObject ]bool {};for _ ,_fg :=range objects {switch _ega :=_fg .(type ){case *_ga .PdfIndirectObject :switch _gd :=_ega .PdfObject .(type ){case *_ga .PdfObjectDictionary :if _aae ,_ad :=_ga .GetName (_gd .Get ("\u0054\u0079\u0070\u0065"));
!_ad ||_aae .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _dea ,_abg :=_ga .GetStream (_gd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_abg {_ac (_dea );}else if _dcd ,_eed :=_ga .GetArray (_gd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_eed {var _ed []*_ga .PdfObjectStream ;for _ ,_eeb :=range _dcd .Elements (){if _efa ,_cgb :=_ga .GetStream (_eeb );_cgb {_ed =append (_ed ,_efa );};};if len (_ed )> 0{var _dcg _cc .Buffer ;for _ ,_deae :=range _ed {if _egd ,_aga :=_ga .DecodeStream (_deae );
_aga ==nil {_dcg .Write (_egd );};_cd [_deae ]=true ;};_cb ,_bfc :=_ga .MakeStream (_dcg .Bytes (),_ga .NewFlateEncoder ());if _bfc !=nil {return nil ,_bfc ;};_cca [_cb ]=true ;_gd .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_cb );_ac (_cb );
};};};case *_ga .PdfObjectStream :if _bga ,_efc :=_ga .GetName (_ega .Get ("\u0054\u0079\u0070\u0065"));!_efc ||_bga .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _bag ,_adb :=_ga .GetName (_ega .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_adb ||_bag .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_ac (_ega );};};for _ ,_ccac :=range _ded {_eg =_af (_ccac );if _eg !=nil {return nil ,_eg ;};};_dee =nil ;for _ ,_gab :=range objects {if _cd [_gab ]{continue ;};_dee =append (_dee ,_gab );
};for _be :=range _cca {_dee =append (_dee ,_be );};return _dee ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cgbg *CombineDuplicateDirectObjects )Optimize (objects []_ga .PdfObject )(_fad []_ga .PdfObject ,_aebc error ){_aceb (objects );_feab :=make (map[string ][]*_ga .PdfObjectDictionary );var _fdd func (_cdafb *_ga .PdfObjectDictionary );_fdd =func (_ebfb *_ga .PdfObjectDictionary ){for _ ,_fgd :=range _ebfb .Keys (){_adee :=_ebfb .Get (_fgd );
if _bgaa ,_cgca :=_adee .(*_ga .PdfObjectDictionary );_cgca {_egcbd :=_bc .New ();_egcbd .Write ([]byte (_bgaa .WriteString ()));_caa :=string (_egcbd .Sum (nil ));_feab [_caa ]=append (_feab [_caa ],_bgaa );_fdd (_bgaa );};};};for _ ,_eage :=range objects {_adba ,_ddf :=_eage .(*_ga .PdfIndirectObject );
if !_ddf {continue ;};if _bbg ,_ecaf :=_adba .PdfObject .(*_ga .PdfObjectDictionary );_ecaf {_fdd (_bbg );};};_bce :=make ([]_ga .PdfObject ,0,len (_feab ));_bgg :=make (map[_ga .PdfObject ]_ga .PdfObject );for _ ,_fcf :=range _feab {if len (_fcf )< 2{continue ;
};_bef :=_ga .MakeDict ();_bef .Merge (_fcf [0]);_ggag :=_ga .MakeIndirectObject (_bef );_bce =append (_bce ,_ggag );for _bcd :=0;_bcd < len (_fcf );_bcd ++{_dbed :=_fcf [_bcd ];_bgg [_dbed ]=_ggag ;};};_fad =make ([]_ga .PdfObject ,len (objects ));copy (_fad ,objects );
_fad =append (_bce ,_fad ...);_dabca (_fad ,_bgg );return _fad ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_faa *CombineIdenticalIndirectObjects )Optimize (objects []_ga .PdfObject )(_bge []_ga .PdfObject ,_daeg error ){_aceb (objects );_bgf :=make (map[_ga .PdfObject ]_ga .PdfObject );_beec :=make (map[_ga .PdfObject ]struct{});_agac :=make (map[string ][]*_ga .PdfIndirectObject );
for _ ,_edf :=range objects {_bgc ,_dfa :=_edf .(*_ga .PdfIndirectObject );if !_dfa {continue ;};if _ffbf ,_fdfc :=_bgc .PdfObject .(*_ga .PdfObjectDictionary );_fdfc {if _ffef ,_adab :=_ffbf .Get ("\u0054\u0079\u0070\u0065").(*_ga .PdfObjectName );_adab &&*_ffef =="\u0050\u0061\u0067\u0065"{continue ;
};_aec :=_bc .New ();_aec .Write ([]byte (_ffbf .WriteString ()));_gdbe :=string (_aec .Sum (nil ));_agac [_gdbe ]=append (_agac [_gdbe ],_bgc );};};for _ ,_daba :=range _agac {if len (_daba )< 2{continue ;};_ced :=_daba [0];for _ccbb :=1;_ccbb < len (_daba );
_ccbb ++{_gfad :=_daba [_ccbb ];_bgf [_gfad ]=_ced ;_beec [_gfad ]=struct{}{};};};_bge =make ([]_ga .PdfObject ,0,len (objects )-len (_beec ));for _ ,_dcae :=range objects {if _ ,_aff :=_beec [_dcae ];_aff {continue ;};_bge =append (_bge ,_dcae );};_dabca (_bge ,_bgf );
return _bge ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_gebg :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_gebg .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_gebg .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_efe :=new (ImagePPI );
_efe .ImageUpperPPI =options .ImageUpperPPI ;_gebg .Append (_efe );};if options .ImageQuality > 0{_bda :=new (Image );_bda .ImageQuality =options .ImageQuality ;_gebg .Append (_bda );};if options .CombineDuplicateDirectObjects {_gebg .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_gebg .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_gebg .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_gebg .Append (new (ObjectStreams ));
};if options .CompressStreams {_gebg .Append (new (CompressStreams ));};if options .CleanUnusedResources {_gebg .Append (new (CleanUnusedResources ));};return _gebg ;};func _cf (_ade *_ga .PdfObjectStream ,_fgb []rune ,_gbf []_db .GlyphIndex )error {_ade ,_bgb :=_ga .GetStream (_ade );
if !_bgb {_f .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _bd .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_geb ,_egf :=_ga .DecodeStream (_ade );if _egf !=nil {_f .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_egf );
return _egf ;};_dfd ,_egf :=_db .Parse (_cc .NewReader (_geb ));if _egf !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_ade .Stream ));
return _egf ;};_baa :=_gbf ;if len (_fgb )> 0{_cbbd :=_dfd .LookupRunes (_fgb );_baa =append (_baa ,_cbbd ...);};_dfd ,_egf =_dfd .SubsetKeepIndices (_baa );if _egf !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_egf );
return _egf ;};var _gada _cc .Buffer ;_egf =_dfd .Write (&_gada );if _egf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_egf );return _egf ;};if _gada .Len ()> len (_geb ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_gdf ,_egf :=_ga .MakeStream (_gada .Bytes (),_ga .NewFlateEncoder ());if _egf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_egf );return _egf ;
};*_ade =*_gdf ;_ade .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ga .MakeInteger (int64 (_gada .Len ())));return nil ;};func _afeg (_ffe _ga .PdfObject )(string ,error ){_egcb :=_ga .TraceToDirectObject (_ffe );switch _cdc :=_egcb .(type ){case *_ga .PdfObjectString :return _cdc .Str (),nil ;
case *_ga .PdfObjectStream :_accf ,_abba :=_ga .DecodeStream (_cdc );if _abba !=nil {return "",_abba ;};return string (_accf ),nil ;};return "",_d .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0073\u0074\u0072e\u0061\u006d\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0068\u006f\u006c\u0064\u0065\u0072\u0020\u0028\u0025\u0054\u0029",_egcb );
};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gbdg *Image )Optimize (objects []_ga .PdfObject )(_bfa []_ga .PdfObject ,_bdg error ){if _gbdg .ImageQuality <=0{return objects ,nil ;};_accfa :=_bfca (objects );if len (_accfa )==0{return objects ,nil ;};_bae :=make (map[_ga .PdfObject ]_ga .PdfObject );
_afag :=make (map[_ga .PdfObject ]struct{});for _ ,_bdd :=range _accfa {_bceg :=_bdd .Stream .Get ("\u0053\u004d\u0061s\u006b");_afag [_bceg ]=struct{}{};};for _ddfg ,_fcc :=range _accfa {_dcf :=_fcc .Stream ;if _ ,_bgd :=_afag [_dcf ];_bgd {continue ;
};_affb ,_ged :=_e .NewXObjectImageFromStream (_dcf );if _ged !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ged );continue ;};switch _affb .Filter .(type ){case *_ga .JBIG2Encoder :continue ;case *_ga .CCITTFaxEncoder :continue ;
};_aege ,_ged :=_affb .ToImage ();if _ged !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ged );continue ;};_fddb :=_ga .NewDCTEncoder ();_fddb .ColorComponents =_aege .ColorComponents ;_fddb .Quality =_gbdg .ImageQuality ;
_fddb .BitsPerComponent =_fcc .BitsPerComponent ;_fddb .Width =_fcc .Width ;_fddb .Height =_fcc .Height ;_dfeb ,_ged :=_fddb .EncodeBytes (_aege .Data );if _ged !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ged );
continue ;};var _cga _ga .StreamEncoder ;_cga =_fddb ;{_ecbe :=_ga .NewFlateEncoder ();_cdf :=_ga .NewMultiEncoder ();_cdf .AddEncoder (_ecbe );_cdf .AddEncoder (_fddb );_bec ,_gdbec :=_cdf .EncodeBytes (_aege .Data );if _gdbec !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_gdbec );
continue ;};if len (_bec )< len (_dfeb ){_f .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dfeb ),len (_bec ),len (_dcf .Stream ));
_dfeb =_bec ;_cga =_cdf ;};};_aagg :=len (_dcf .Stream );if _aagg < len (_dfeb ){continue ;};_daca :=&_ga .PdfObjectStream {Stream :_dfeb };_daca .PdfObjectReference =_dcf .PdfObjectReference ;_daca .PdfObjectDictionary =_ga .MakeDict ();_daca .Merge (_dcf .PdfObjectDictionary );
_daca .Merge (_cga .MakeStreamDict ());_daca .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ga .MakeInteger (int64 (len (_dfeb ))));_bae [_dcf ]=_daca ;_accfa [_ddfg ].Stream =_daca ;};_bfa =make ([]_ga .PdfObject ,len (objects ));copy (_bfa ,objects );
_dabca (_bfa ,_bae );return _bfa ,nil ;};func _deea (_gfg []*_ga .PdfIndirectObject )map[string ][]string {_ebg :=map[string ][]string {};for _ ,_dage :=range _gfg {_agb ,_dead :=_ga .GetDict (_dage .PdfObject );if !_dead {continue ;};_fcae :=_agb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073");
_edc :=_ga .TraceToDirectObject (_fcae );var _cadb []string ;if _afe ,_cfga :=_edc .(*_ga .PdfObjectArray );_cfga {for _ ,_geg :=range _afe .Elements (){_dagd ,_gcea :=_afeg (_geg );if _gcea !=nil {continue ;};_cadb =append (_cadb ,_dagd );};};_cea :=_ba .Join (_cadb ,"\u0020");
_cfgf :=_fd .NewContentStreamParser (_cea );_gfab ,_fea :=_cfgf .Parse ();if _fea !=nil {continue ;};for _ ,_afd :=range *_gfab {_gbg :=_afd .Operand ;_cada :=_afd .Params ;switch _gbg {case "\u0044\u006f":_cfd :=_cada [0].String ();if _ ,_fga :=_ebg ["\u0058O\u0062\u006a\u0065\u0063\u0074"];
!_fga {_ebg ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=[]string {_cfd };}else {_ebg ["\u0058O\u0062\u006a\u0065\u0063\u0074"]=append (_ebg ["\u0058O\u0062\u006a\u0065\u0063\u0074"],_cfd );};case "\u0054\u0066":_eca :=_cada [0].String ();if _ ,_deeb :=_ebg ["\u0046\u006f\u006e\u0074"];
!_deeb {_ebg ["\u0046\u006f\u006e\u0074"]=[]string {_eca };}else {_ebg ["\u0046\u006f\u006e\u0074"]=append (_ebg ["\u0046\u006f\u006e\u0074"],_eca );};case "\u0067\u0073":_cgf :=_cada [0].String ();if _ ,_ggd :=_ebg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"];
!_ggd {_ebg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=[]string {_cgf };}else {_ebg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"]=append (_ebg ["\u0045x\u0074\u0047\u0053\u0074\u0061\u0074e"],_cgf );};};};};return _ebg ;};

// GetOptimizers gets the list of optimizers in chain `c`.
func (_fde *Chain )GetOptimizers ()[]_e .Optimizer {return _fde ._dc };

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_ga .PdfObjectStream ;PPI float64 ;};func _af (_ag *_ga .PdfObjectStream )error {_gf ,_eb :=_ga .DecodeStream (_ag );
if _eb !=nil {return _eb ;};_bf :=_fd .NewContentStreamParser (string (_gf ));_gc ,_eb :=_bf .Parse ();if _eb !=nil {return _eb ;};_gc =_fb (_gc );_dff :=_gc .Bytes ();if len (_dff )>=len (_gf ){return nil ;};_dde ,_eb :=_ga .MakeStream (_gc .Bytes (),_ga .NewFlateEncoder ());
if _eb !=nil {return _eb ;};_ag .Stream =_dde .Stream ;_ag .Merge (_dde .PdfObjectDictionary );return nil ;};func _edde (_dbc *_e .Image ,_cba float64 )(*_e .Image ,error ){_eaea ,_cfe :=_dbc .ToGoImage ();if _cfe !=nil {return nil ,_cfe ;};var _aab _c .Image ;
_gba ,_cfee :=_eaea .(*_c .Monochrome );if _cfee {if _cfe =_gba .ResolveDecode ();_cfe !=nil {return nil ,_cfe ;};_aab ,_cfe =_gba .Scale (_cba );if _cfe !=nil {return nil ,_cfe ;};}else {_bbbg :=int (_a .RoundToEven (float64 (_dbc .Width )*_cba ));_bfb :=int (_a .RoundToEven (float64 (_dbc .Height )*_cba ));
_aab ,_cfe =_c .NewImage (_bbbg ,_bfb ,int (_dbc .BitsPerComponent ),_dbc .ColorComponents ,nil ,nil ,nil );if _cfe !=nil {return nil ,_cfe ;};_b .CatmullRom .Scale (_aab ,_aab .Bounds (),_eaea ,_eaea .Bounds (),_b .Over ,&_b .Options {});};_acbf :=_aab .Base ();
_cgbge :=&_e .Image {Width :int64 (_acbf .Width ),Height :int64 (_acbf .Height ),BitsPerComponent :int64 (_acbf .BitsPerComponent ),ColorComponents :_acbf .ColorComponents ,Data :_acbf .Data };_cgbge .SetDecode (_acbf .Decode );_cgbge .SetAlpha (_acbf .Alpha );
return _cgbge ,nil ;};func _bfca (_cecf []_ga .PdfObject )[]*imageInfo {_agag :=_ga .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_dabg :=make (map[*_ga .PdfObjectStream ]struct{});var _bbc []*imageInfo ;for _ ,_gde :=range _cecf {_gbdb ,_eff :=_ga .GetStream (_gde );
if !_eff {continue ;};if _ ,_gge :=_dabg [_gbdb ];_gge {continue ;};_dabg [_gbdb ]=struct{}{};_bgeg :=_gbdb .PdfObjectDictionary .Get (_agag );_gece ,_eff :=_ga .GetName (_bgeg );if !_eff ||string (*_gece )!="\u0049\u006d\u0061g\u0065"{continue ;};_adag :=&imageInfo {Stream :_gbdb ,BitsPerComponent :8};
if _ccfd ,_ddfe :=_ga .GetIntVal (_gbdb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_ddfe {_adag .BitsPerComponent =_ccfd ;};if _edcb ,_cade :=_ga .GetIntVal (_gbdb .Get ("\u0057\u0069\u0064t\u0068"));
_cade {_adag .Width =_edcb ;};if _gbfg ,_daea :=_ga .GetIntVal (_gbdb .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_daea {_adag .Height =_gbfg ;};_ggdf ,_ccbe :=_e .NewPdfColorspaceFromPdfObject (_gbdb .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _ccbe !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ccbe );continue ;};if _ggdf ==nil {_cbc ,_gcd :=_ga .GetName (_gbdb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _gcd {switch _cbc .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_ggdf =_e .NewPdfColorspaceDeviceGray ();
_adag .BitsPerComponent =1;};};};switch _agd :=_ggdf .(type ){case *_e .PdfColorspaceDeviceRGB :_adag .ColorComponents =3;case *_e .PdfColorspaceDeviceGray :_adag .ColorComponents =1;default:_f .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_agd );
continue ;};_bbc =append (_bbc ,_adag );};return _bbc ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// Optimize implements Optimizer interface.
func (_ecc *CleanUnusedResources )Optimize (objects []_ga .PdfObject )(_bgae []_ga .PdfObject ,_gce error ){_agc ,_gce :=_aaab (objects );if _gce !=nil {return nil ,_gce ;};_gbd :=[]_ga .PdfObject {};for _ ,_aba :=range objects {_ ,_fae :=_agc [_aba ];
if _fae {continue ;};_gbd =append (_gbd ,_aba );};return _gbd ,nil ;};type content struct{_fbf string ;_eac *_e .PdfPageResources ;};func _begd (_cgfe []_ga .PdfObject )objectStructure {_bfg :=objectStructure {};_ccce :=false ;for _ ,_gcfe :=range _cgfe {switch _bgda :=_gcfe .(type ){case *_ga .PdfIndirectObject :_gfdb ,_abad :=_ga .GetDict (_bgda );
if !_abad {continue ;};_ebec ,_abad :=_ga .GetName (_gfdb .Get ("\u0054\u0079\u0070\u0065"));if !_abad {continue ;};switch _ebec .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_bfg ._fdde =_gfdb ;_ccce =true ;};};if _ccce {break ;};};if !_ccce {return _bfg ;
};_gbbf ,_badg :=_ga .GetDict (_bfg ._fdde .Get ("\u0050\u0061\u0067e\u0073"));if !_badg {return _bfg ;};_bfg ._ccff =_gbbf ;_abea ,_badg :=_ga .GetArray (_gbbf .Get ("\u004b\u0069\u0064\u0073"));if !_badg {return _bfg ;};for _ ,_fce :=range _abea .Elements (){_febf ,_cbdc :=_ga .GetIndirect (_fce );
if !_cbdc {break ;};_bfg ._bdda =append (_bfg ._bdda ,_febf );};return _bfg ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _gedb (_baea _ga .PdfObject )(_gff string ,_beagc []_ga .PdfObject ){var _ccfc _cc .Buffer ;switch _cced :=_baea .(type ){case *_ga .PdfIndirectObject :_beagc =append (_beagc ,_cced );_baea =_cced .PdfObject ;};switch _gcag :=_baea .(type ){case *_ga .PdfObjectStream :if _bfd ,_eea :=_ga .DecodeStream (_gcag );
_eea ==nil {_ccfc .Write (_bfd );_beagc =append (_beagc ,_gcag );};case *_ga .PdfObjectArray :for _ ,_febfb :=range _gcag .Elements (){switch _dgeg :=_febfb .(type ){case *_ga .PdfObjectStream :if _ecag ,_dce :=_ga .DecodeStream (_dgeg );_dce ==nil {_ccfc .Write (_ecag );
_beagc =append (_beagc ,_dgeg );};};};};return _ccfc .String (),_beagc ;};

// Append appends optimizers to the chain.
func (_de *Chain )Append (optimizers ..._e .Optimizer ){_de ._dc =append (_de ._dc ,optimizers ...)};func _adg (_dgd []_ga .PdfObject )(_cde map[*_ga .PdfObjectStream ]struct{},_bea error ){_cde =map[*_ga .PdfObjectStream ]struct{}{};_dae :=map[*_e .PdfFont ]struct{}{};
_acd :=_begd (_dgd );for _ ,_cgc :=range _acd ._bdda {_bbb ,_cee :=_ga .GetDict (_cgc .PdfObject );if !_cee {continue ;};_gdb ,_cee :=_ga .GetDict (_bbb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_cee {continue ;};_gaf ,_ :=_gedb (_bbb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_ddb ,_eag :=_e .NewPdfPageResourcesFromDict (_gdb );if _eag !=nil {return nil ,_eag ;};_acg :=[]content {{_fbf :_gaf ,_eac :_ddb }};_aac :=_gac (_bbb .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _aac !=nil {_acg =append (_acg ,_aac ...);};for _ ,_ecb :=range _acg {_aeb ,_gad :=_ca .NewFromContents (_ecb ._fbf ,_ecb ._eac );
if _gad !=nil {return nil ,_gad ;};_ede ,_ ,_ ,_gad :=_aeb .ExtractPageText ();if _gad !=nil {return nil ,_gad ;};for _ ,_gdg :=range _ede .Marks ().Elements (){if _gdg .Font ==nil {continue ;};if _ ,_cbb :=_dae [_gdg .Font ];!_cbb {_dae [_gdg .Font ]=struct{}{};
};};};};_adbg :=map[*_ga .PdfObjectStream ][]*_e .PdfFont {};for _edb :=range _dae {_bdc :=_edb .FontDescriptor ();if _bdc ==nil ||_bdc .FontFile2 ==nil {continue ;};_gb ,_aag :=_ga .GetStream (_bdc .FontFile2 );if !_aag {continue ;};_adbg [_gb ]=append (_adbg [_gb ],_edb );
};for _daa :=range _adbg {var _ge []rune ;var _cgd []_db .GlyphIndex ;for _ ,_gfc :=range _adbg [_daa ]{switch _ddbf :=_gfc .Encoder ().(type ){case *_ae .IdentityEncoder :_dag :=_ddbf .RegisteredRunes ();_ebc :=make ([]_db .GlyphIndex ,len (_dag ));for _cda ,_dgda :=range _dag {_ebc [_cda ]=_db .GlyphIndex (_dgda );
};_cgd =append (_cgd ,_ebc ...);case *_ae .TrueTypeFontEncoder :_bdf :=_ddbf .RegisteredRunes ();_ge =append (_ge ,_bdf ...);case _ae .SimpleEncoder :_eab :=_ddbf .Charcodes ();for _ ,_ceb :=range _eab {_fca ,_gee :=_ddbf .CharcodeToRune (_ceb );if !_gee {_f .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_ceb );
continue ;};_ge =append (_ge ,_fca );};};};_bea =_cf (_daa ,_ge ,_cgd );if _bea !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bea );
return nil ,_bea ;};_cde [_daa ]=struct{}{};};return _cde ,nil ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// CleanUnusedResources represents an optimizer used to clean unused resources.
type CleanUnusedResources struct{};func _fb (_ee *_fd .ContentStreamOperations )*_fd .ContentStreamOperations {if _ee ==nil {return nil ;};_ff :=_fd .ContentStreamOperations {};for _ ,_ea :=range *_ee {switch _ea .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_ea .Params )==6{if _cg ,_aa :=_ga .GetNumbersAsFloat (_ea .Params );_aa ==nil {if _cg [0]==1&&_cg [1]==0&&_cg [2]==0&&_cg [3]==1{_ea =&_fd .ContentStreamOperation {Params :[]_ga .PdfObject {_ea .Params [4],_ea .Params [5]},Operand :"\u0054\u0064"};
};};};};_ff =append (_ff ,_ea );};return &_ff ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_dc []_e .Optimizer };func _dabca (_cffe []_ga .PdfObject ,_dgg map[_ga .PdfObject ]_ga .PdfObject ){if len (_dgg )==0{return ;};for _cgbb ,_dfab :=range _cffe {if _eedb ,_bfbf :=_dgg [_dfab ];_bfbf {_cffe [_cgbb ]=_eedb ;continue ;};
_dgg [_dfab ]=_dfab ;switch _ceaf :=_dfab .(type ){case *_ga .PdfObjectArray :_fcge :=make ([]_ga .PdfObject ,_ceaf .Len ());copy (_fcge ,_ceaf .Elements ());_dabca (_fcge ,_dgg );for _eaf ,_cffg :=range _fcge {_ceaf .Set (_eaf ,_cffg );};case *_ga .PdfObjectStreams :_dabca (_ceaf .Elements (),_dgg );
case *_ga .PdfObjectStream :_gace :=[]_ga .PdfObject {_ceaf .PdfObjectDictionary };_dabca (_gace ,_dgg );_ceaf .PdfObjectDictionary =_gace [0].(*_ga .PdfObjectDictionary );case *_ga .PdfObjectDictionary :_dbcdd :=_ceaf .Keys ();_gfgc :=make ([]_ga .PdfObject ,len (_dbcdd ));
for _bbca ,_gfaa :=range _dbcdd {_gfgc [_bbca ]=_ceaf .Get (_gfaa );};_dabca (_gfgc ,_dgg );for _gafa ,_gbeb :=range _dbcdd {_ceaf .Set (_gbeb ,_gfgc [_gafa ]);};case *_ga .PdfIndirectObject :_aggc :=[]_ga .PdfObject {_ceaf .PdfObject };_dabca (_aggc ,_dgg );
_ceaf .PdfObject =_aggc [0];};};};func _ccbef (_fag *_e .XObjectImage ,_feae imageModifications )error {_aee ,_egcbdb :=_fag .ToImage ();if _egcbdb !=nil {return _egcbdb ;};if _feae .Scale !=0{_aee ,_egcbdb =_edde (_aee ,_feae .Scale );if _egcbdb !=nil {return _egcbdb ;
};};if _feae .Encoding !=nil {_fag .Filter =_feae .Encoding ;};_fag .Decode =nil ;switch _bcab :=_fag .Filter .(type ){case *_ga .FlateEncoder :if _bcab .Predictor !=1&&_bcab .Predictor !=11{_bcab .Predictor =1;};};if _egcbdb =_fag .SetImage (_aee ,nil );
_egcbdb !=nil {_f .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_egcbdb );return _egcbdb ;};_fag .ToPdfObject ();return nil ;};type objectStructure struct{_fdde *_ga .PdfObjectDictionary ;
_ccff *_ga .PdfObjectDictionary ;_bdda []*_ga .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_adf *ObjectStreams )Optimize (objects []_ga .PdfObject )(_eaga []_ga .PdfObject ,_fgfg error ){_adc :=&_ga .PdfObjectStreams {};_dcbe :=make ([]_ga .PdfObject ,0,len (objects ));for _ ,_gaa :=range objects {if _bddb ,_bab :=_gaa .(*_ga .PdfIndirectObject );
_bab &&_bddb .GenerationNumber ==0{_adc .Append (_gaa );}else {_dcbe =append (_dcbe ,_gaa );};};if _adc .Len ()==0{return _dcbe ,nil ;};_eaga =make ([]_ga .PdfObject ,0,len (_dcbe )+_adc .Len ()+1);if _adc .Len ()> 1{_eaga =append (_eaga ,_adc );};_eaga =append (_eaga ,_adc .Elements ()...);
_eaga =append (_eaga ,_dcbe ...);return _eaga ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bb *Chain )Optimize (objects []_ga .PdfObject )(_dd []_ga .PdfObject ,_da error ){_fe :=objects ;for _ ,_ce :=range _bb ._dc {_cad ,_df :=_ce .Optimize (_fe );if _df !=nil {_f .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_df );
continue ;};_fe =_cad ;};return _fe ,nil ;};type imageModifications struct{Scale float64 ;Encoding _ga .StreamEncoder ;};func _gac (_bad _ga .PdfObject )[]content {if _bad ==nil {return nil ;};_gef ,_aaa :=_ga .GetArray (_bad );if !_aaa {_f .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _cdae []content ;for _ ,_gfa :=range _gef .Elements (){_bba ,_deg :=_ga .GetDict (_gfa );if !_deg {_f .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_eef ,_deg :=_ga .GetDict (_bba .Get ("\u0041\u0050"));if !_deg {_f .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_cdaf :=_ga .TraceToDirectObject (_eef .Get ("\u004e"));
if _cdaf ==nil {_f .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _age *_ga .PdfObjectStream ;switch _fba :=_cdaf .(type ){case *_ga .PdfObjectDictionary :_aea ,_agf :=_ga .GetName (_bba .Get ("\u0041\u0053"));
if !_agf {_f .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_age ,_agf =_ga .GetStream (_fba .Get (*_aea ));if !_agf {_f .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_ga .PdfObjectStream :_age =_fba ;};if _age ==nil {_f .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_egc ,_ccg :=_e .NewXObjectFormFromStream (_age );if _ccg !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_ccg );
continue ;};_fec ,_ccg :=_egc .GetContentStream ();if _ccg !=nil {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_ccg );continue ;};_cdae =append (_cdae ,content {_fbf :string (_fec ),_eac :_egc .Resources });
};return _cdae ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bff *CompressStreams )Optimize (objects []_ga .PdfObject )(_fdb []_ga .PdfObject ,_afc error ){_fdb =make ([]_ga .PdfObject ,len (objects ));copy (_fdb ,objects );for _ ,_cedg :=range objects {_gae ,_dgf :=_ga .GetStream (_cedg );if !_dgf {continue ;
};if _fbg :=_gae .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fbg !=nil {if _ ,_geec :=_ga .GetName (_fbg );_geec {continue ;};if _fbgc ,_gdfd :=_ga .GetArray (_fbg );_gdfd &&_fbgc .Len ()> 0{continue ;};};_ccca :=_ga .NewFlateEncoder ();var _bffe []byte ;
_bffe ,_afc =_ccca .EncodeBytes (_gae .Stream );if _afc !=nil {return _fdb ,_afc ;};_fbab :=_ccca .MakeStreamDict ();if len (_bffe )+len (_fbab .WriteString ())< len (_gae .Stream ){_gae .Stream =_bffe ;_gae .PdfObjectDictionary .Merge (_fbab );_gae .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ga .MakeInteger (int64 (len (_gae .Stream ))));
};};return _fdb ,nil ;};func _aceb (_gcgb []_ga .PdfObject ){for _gfdc ,_bdfc :=range _gcgb {switch _ebgc :=_bdfc .(type ){case *_ga .PdfIndirectObject :_ebgc .ObjectNumber =int64 (_gfdc +1);_ebgc .GenerationNumber =0;case *_ga .PdfObjectStream :_ebgc .ObjectNumber =int64 (_gfdc +1);
_ebgc .GenerationNumber =0;case *_ga .PdfObjectStreams :_ebgc .ObjectNumber =int64 (_gfdc +1);_ebgc .GenerationNumber =0;};};};func _eba (_gda *_ga .PdfObjectDictionary )[]string {_cdd :=[]string {};for _ ,_feg :=range _gda .Keys (){_cdd =append (_cdd ,_feg .String ());
};return _cdd ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
CleanUnusedResources bool ;};func _cfb (_fdae _ga .PdfObject ,_fbdb map[_ga .PdfObject ]struct{})error {if _dba ,_eee :=_fdae .(*_ga .PdfIndirectObject );_eee {_fbdb [_fdae ]=struct{}{};_gdc :=_cfb (_dba .PdfObject ,_fbdb );if _gdc !=nil {return _gdc ;
};return nil ;};if _acf ,_gfgg :=_fdae .(*_ga .PdfObjectStream );_gfgg {_fbdb [_acf ]=struct{}{};_dfe :=_cfb (_acf .PdfObjectDictionary ,_fbdb );if _dfe !=nil {return _dfe ;};return nil ;};if _bcg ,_aaabe :=_fdae .(*_ga .PdfObjectDictionary );_aaabe {for _ ,_ada :=range _bcg .Keys (){_feb :=_bcg .Get (_ada );
_ =_feb ;if _fdad ,_ccb :=_feb .(*_ga .PdfObjectReference );_ccb {_feb =_fdad .Resolve ();_bcg .Set (_ada ,_feb );};if _ada !="\u0050\u0061\u0072\u0065\u006e\u0074"{if _gcc :=_cfb (_feb ,_fbdb );_gcc !=nil {return _gcc ;};};};return nil ;};if _fbae ,_beg :=_fdae .(*_ga .PdfObjectArray );
_beg {if _fbae ==nil {return _bd .New ("\u0061\u0072\u0072a\u0079\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};for _abb ,_acgf :=range _fbae .Elements (){if _fgc ,_agcf :=_acgf .(*_ga .PdfObjectReference );_agcf {_acgf =_fgc .Resolve ();_fbae .Set (_abb ,_acgf );
};if _faec :=_cfb (_acgf ,_fbdb );_faec !=nil {return _faec ;};};return nil ;};return nil ;};