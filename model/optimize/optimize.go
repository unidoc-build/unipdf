//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_f "bytes";_ge "crypto/md5";_gdb "errors";_ce "fmt";_ca "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/contentstream";_gg "github.com/unidoc/unipdf/v3/core";_a "github.com/unidoc/unipdf/v3/extractor";_dg "github.com/unidoc/unipdf/v3/internal/textencoding";_cg "github.com/unidoc/unipdf/v3/model";_b "github.com/unidoc/unitype";_c "golang.org/x/image/draw";_d "image";_gd "math";);

// Optimize optimizes PDF objects to decrease PDF size.
func (_feg *CombineDuplicateStreams )Optimize (objects []_gg .PdfObject )(_aefe []_gg .PdfObject ,_dag error ){_cec :=make (map[_gg .PdfObject ]_gg .PdfObject );_ffa :=make (map[_gg .PdfObject ]struct{});_bbab :=make (map[string ][]*_gg .PdfObjectStream );for _ ,_fdb :=range objects {if _dfc ,_bdf :=_fdb .(*_gg .PdfObjectStream );_bdf {_ebb :=_ge .New ();_ebb .Write (_dfc .Stream );_ede :=string (_ebb .Sum (nil ));_bbab [_ede ]=append (_bbab [_ede ],_dfc );};};for _ ,_cbc :=range _bbab {if len (_cbc )< 2{continue ;};_daa :=_cbc [0];for _bffa :=1;_bffa < len (_cbc );_bffa ++{_aeg :=_cbc [_bffa ];_cec [_aeg ]=_daa ;_ffa [_aeg ]=struct{}{};};};_aefe =make ([]_gg .PdfObject ,0,len (objects )-len (_ffa ));for _ ,_bdd :=range objects {if _ ,_gbe :=_ffa [_bdd ];_gbe {continue ;};_aefe =append (_aefe ,_bdd );};_ece (_aefe ,_cec );return _aefe ,nil ;};

// Append appends optimizers to the chain.
func (_cc *Chain )Append (optimizers ..._cg .Optimizer ){_cc ._gb =append (_cc ._gb ,optimizers ...)};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gf *CleanContentstream )Optimize (objects []_gg .PdfObject )(_ag []_gg .PdfObject ,_ec error ){_ccb :=map[*_gg .PdfObjectStream ]struct{}{};var _cfa []*_gg .PdfObjectStream ;_da :=func (_aga *_gg .PdfObjectStream ){if _ ,_efc :=_ccb [_aga ];!_efc {_ccb [_aga ]=struct{}{};_cfa =append (_cfa ,_aga );};};for _ ,_aaa :=range objects {switch _ccd :=_aaa .(type ){case *_gg .PdfIndirectObject :switch _bf :=_ccd .PdfObject .(type ){case *_gg .PdfObjectDictionary :if _dc ,_daf :=_gg .GetName (_bf .Get ("\u0054\u0079\u0070\u0065"));!_daf ||_dc .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _ccg ,_bcc :=_gg .GetStream (_bf .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_bcc {_da (_ccg );}else if _ccba ,_fg :=_gg .GetArray (_bf .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_fg {for _ ,_gdcf :=range _ccba .Elements (){if _aad ,_dcf :=_gg .GetStream (_gdcf );_dcf {_da (_aad );};};};};case *_gg .PdfObjectStream :if _ced ,_eb :=_gg .GetName (_ccd .Get ("\u0054\u0079\u0070\u0065"));!_eb ||_ced .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _fga ,_ed :=_gg .GetName (_ccd .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_ed ||_fga .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_da (_ccd );};};for _ ,_dcg :=range _cfa {_ec =_fb (_dcg );if _ec !=nil {return nil ,_ec ;};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfd *CombineDuplicateDirectObjects )Optimize (objects []_gg .PdfObject )(_edd []_gg .PdfObject ,_gdf error ){_eab (objects );_aabda :=make (map[string ][]*_gg .PdfObjectDictionary );var _dafc func (_ffg *_gg .PdfObjectDictionary );_dafc =func (_fcfb *_gg .PdfObjectDictionary ){for _ ,_cgdb :=range _fcfb .Keys (){_cbfg :=_fcfb .Get (_cgdb );if _cgg ,_eag :=_cbfg .(*_gg .PdfObjectDictionary );_eag {_agd :=_ge .New ();_agd .Write ([]byte (_cgg .WriteString ()));_ffe :=string (_agd .Sum (nil ));_aabda [_ffe ]=append (_aabda [_ffe ],_cgg );_dafc (_cgg );};};};for _ ,_afe :=range objects {_bge ,_dfg :=_afe .(*_gg .PdfIndirectObject );if !_dfg {continue ;};if _ba ,_aae :=_bge .PdfObject .(*_gg .PdfObjectDictionary );_aae {_dafc (_ba );};};_fcb :=make ([]_gg .PdfObject ,0,len (_aabda ));_caa :=make (map[_gg .PdfObject ]_gg .PdfObject );for _ ,_ebg :=range _aabda {if len (_ebg )< 2{continue ;};_ac :=_gg .MakeDict ();_ac .Merge (_ebg [0]);_bgea :=_gg .MakeIndirectObject (_ac );_fcb =append (_fcb ,_bgea );for _gfa :=0;_gfa < len (_ebg );_gfa ++{_becb :=_ebg [_gfa ];_caa [_becb ]=_bgea ;};};_edd =make ([]_gg .PdfObject ,len (objects ));copy (_edd ,objects );_edd =append (_fcb ,_edd ...);_ece (_edd ,_caa );return _edd ,nil ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edc *CleanFonts )Optimize (objects []_gg .PdfObject )(_ad []_gg .PdfObject ,_bba error ){var _efdd map[*_gg .PdfObjectStream ]struct{};if _edc .Subset {var _dgcc error ;_efdd ,_dgcc =_fba (objects );if _dgcc !=nil {return nil ,_dgcc ;};};for _ ,_fee :=range objects {_cca ,_fgga :=_gg .GetStream (_fee );if !_fgga {continue ;};if _ ,_ggd :=_efdd [_cca ];_ggd {continue ;};_ddb ,_aef :=_gg .NewEncoderFromStream (_cca );if _aef !=nil {_ca .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_aef );continue ;};_db ,_aef :=_ddb .DecodeStream (_cca );if _aef !=nil {_ca .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_aef );continue ;};if len (_db )< 4{continue ;};_fad :=string (_db [:4]);if _fad =="\u004f\u0054\u0054\u004f"{continue ;};if _fad !="\u0000\u0001\u0000\u0000"&&_fad !="\u0074\u0072\u0075\u0065"{continue ;};_adgd ,_aef :=_b .Parse (_f .NewReader (_db ));if _aef !=nil {_ca .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_aef );continue ;};_aef =_adgd .Optimize ();if _aef !=nil {continue ;};var _ccdc _f .Buffer ;_aef =_adgd .Write (&_ccdc );if _aef !=nil {_ca .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_aef );continue ;};if _ccdc .Len ()> len (_db ){_ca .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_aec ,_aef :=_gg .MakeStream (_ccdc .Bytes (),_gg .NewFlateEncoder ());if _aef !=nil {continue ;};*_cca =*_aec ;_cca .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gg .MakeInteger (int64 (_ccdc .Len ())));};return objects ,nil ;};func _be (_cf *_e .ContentStreamOperations )*_e .ContentStreamOperations {if _cf ==nil {return nil ;};_feb :=_e .ContentStreamOperations {};for _ ,_gc :=range *_cf {switch _gc .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_gc .Params )==6{if _ef ,_geb :=_gg .GetNumbersAsFloat (_gc .Params );_geb ==nil {if _ef [0]==1&&_ef [1]==0&&_ef [2]==0&&_ef [3]==1{_gc =&_e .ContentStreamOperation {Params :[]_gg .PdfObject {_gc .Params [4],_gc .Params [5]},Operand :"\u0054\u0064"};};};};};_feb =append (_feb ,_gc );};return &_feb ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};type imageInfo struct{ColorSpace _gg .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_gg .PdfObjectStream ;PPI float64 ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};func _edbf (_bcg []_gg .PdfObject )objectStructure {_bdeg :=objectStructure {};_aece :=false ;for _ ,_fafee :=range _bcg {switch _aca :=_fafee .(type ){case *_gg .PdfIndirectObject :_dced ,_efdf :=_gg .GetDict (_aca );if !_efdf {continue ;};_ebfc ,_efdf :=_gg .GetName (_dced .Get ("\u0054\u0079\u0070\u0065"));if !_efdf {continue ;};switch _ebfc .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_bdeg ._bfaf =_dced ;_aece =true ;};};if _aece {break ;};};if !_aece {return _bdeg ;};_ada ,_gfg :=_gg .GetDict (_bdeg ._bfaf .Get ("\u0050\u0061\u0067e\u0073"));if !_gfg {return _bdeg ;};_bdeg ._cagb =_ada ;_faeg ,_gfg :=_gg .GetArray (_ada .Get ("\u004b\u0069\u0064\u0073"));if !_gfg {return _bdeg ;};for _ ,_ggad :=range _faeg .Elements (){_gba ,_dac :=_gg .GetIndirect (_ggad );if !_dac {break ;};_bdeg ._feeb =append (_bdeg ._feeb ,_gba );};return _bdeg ;};func _gbga (_cbef []_gg .PdfObject )[]*imageInfo {_fca :=_gg .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_afda :=make (map[*_gg .PdfObjectStream ]struct{});var _dbba error ;var _eec []*imageInfo ;for _ ,_agaa :=range _cbef {_cac ,_fdd :=_gg .GetStream (_agaa );if !_fdd {continue ;};if _ ,_fce :=_afda [_cac ];_fce {continue ;};_afda [_cac ]=struct{}{};_abe :=_cac .PdfObjectDictionary .Get (_fca );_bcae ,_fdd :=_gg .GetName (_abe );if !_fdd ||string (*_bcae )!="\u0049\u006d\u0061g\u0065"{continue ;};_cag :=&imageInfo {BitsPerComponent :8,Stream :_cac };if _cag .ColorSpace ,_dbba =_cg .DetermineColorspaceNameFromPdfObject (_cac .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_dbba !=nil {_ca .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_dbba );continue ;};if _abb ,_dfb :=_gg .GetIntVal (_cac .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_dfb {_cag .BitsPerComponent =_abb ;};if _gbb ,_eac :=_gg .GetIntVal (_cac .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_eac {_cag .Width =_gbb ;};if _fbf ,_bea :=_gg .GetIntVal (_cac .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_bea {_cag .Height =_fbf ;};switch _cag .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_cag .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_cag .ColorComponents =1;default:_ca .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_cag .ColorSpace );continue ;};_eec =append (_eec ,_cag );};return _eec ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_gb []_cg .Optimizer };func _eab (_caba []_gg .PdfObject ){for _deda ,_cacc :=range _caba {switch _geg :=_cacc .(type ){case *_gg .PdfIndirectObject :_geg .ObjectNumber =int64 (_deda +1);_geg .GenerationNumber =0;case *_gg .PdfObjectStream :_geg .ObjectNumber =int64 (_deda +1);_geg .GenerationNumber =0;case *_gg .PdfObjectStreams :_geg .ObjectNumber =int64 (_deda +1);_geg .GenerationNumber =0;};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eebb *ImagePPI )Optimize (objects []_gg .PdfObject )(_fdg []_gg .PdfObject ,_bggg error ){if _eebb .ImageUpperPPI <=0{return objects ,nil ;};_dggf :=_gbga (objects );if len (_dggf )==0{return objects ,nil ;};_dbfa :=make (map[_gg .PdfObject ]struct{});for _ ,_gdg :=range _dggf {_bdgf :=_gdg .Stream .PdfObjectDictionary .Get (_gg .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_dbfa [_bdgf ]=struct{}{};};_defe :=make (map[*_gg .PdfObjectStream ]*imageInfo );for _ ,_gdca :=range _dggf {_defe [_gdca .Stream ]=_gdca ;};var _adc *_gg .PdfObjectDictionary ;for _ ,_gcf :=range objects {if _bfc ,_gfda :=_gg .GetDict (_gcf );_adc ==nil &&_gfda {if _eeeeb ,_gea :=_gg .GetName (_bfc .Get (_gg .PdfObjectName ("\u0054\u0079\u0070\u0065")));_gea &&*_eeeeb =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_adc =_bfc ;};};};if _adc ==nil {return objects ,nil ;};_cebd ,_gfcc :=_gg .GetDict (_adc .Get (_gg .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_gfcc {return objects ,nil ;};_dgfa ,_fdbe :=_gg .GetArray (_cebd .Get (_gg .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_fdbe {return objects ,nil ;};_ggc :=make (map[string ]*imageInfo );for _ ,_edff :=range _dgfa .Elements (){_abfe ,_ebbb :=_gg .GetDict (_edff );if !_ebbb {continue ;};_bgc ,_fae :=_gg .GetArray (_abfe .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_fae {continue ;};_dba ,_gfed :=_gg .GetDict (_abfe .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_gfed {continue ;};_dbg ,_dfa :=_gg .GetDict (_dba .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_dfa {continue ;};_becg :=_dbg .Keys ();for _ ,_ceg :=range _becg {if _fgge ,_cff :=_gg .GetStream (_dbg .Get (_ceg ));_cff {if _gbd ,_dfbg :=_defe [_fgge ];_dfbg {_ggc [string (_ceg )]=_gbd ;};};};for _ ,_eea :=range _bgc .Elements (){if _geaa ,_dea :=_gg .GetStream (_eea );_dea {_ccf ,_aacb :=_gg .NewEncoderFromStream (_geaa );if _aacb !=nil {return nil ,_aacb ;};_abg ,_aacb :=_ccf .DecodeStream (_geaa );if _aacb !=nil {return nil ,_aacb ;};_aeea :=_e .NewContentStreamParser (string (_abg ));_aabc ,_aacb :=_aeea .Parse ();if _aacb !=nil {return nil ,_aacb ;};_cfag ,_ccdg :=1.0,1.0;for _ ,_gcgg :=range *_aabc {if _gcgg .Operand =="\u0051"{_cfag ,_ccdg =1.0,1.0;};if _gcgg .Operand =="\u0063\u006d"&&len (_gcgg .Params )==6{if _ggf ,_dbfb :=_gg .GetFloatVal (_gcgg .Params [0]);_dbfb {_cfag =_cfag *_ggf ;};if _gfdd ,_ecbc :=_gg .GetFloatVal (_gcgg .Params [3]);_ecbc {_ccdg =_ccdg *_gfdd ;};if _gggg ,_gccc :=_gg .GetIntVal (_gcgg .Params [0]);_gccc {_cfag =_cfag *float64 (_gggg );};if _dbc ,_gfeg :=_gg .GetIntVal (_gcgg .Params [3]);_gfeg {_ccdg =_ccdg *float64 (_dbc );};};if _gcgg .Operand =="\u0044\u006f"&&len (_gcgg .Params )==1{_dagf ,_cdfb :=_gg .GetName (_gcgg .Params [0]);if !_cdfb {continue ;};if _agge ,_fgaa :=_ggc [string (*_dagf )];_fgaa {_eagb ,_cab :=_cfag /72.0,_ccdg /72.0;_bfff ,_aaaa :=float64 (_agge .Width )/_eagb ,float64 (_agge .Height )/_cab ;if _eagb ==0||_cab ==0{_bfff =72.0;_aaaa =72.0;};_agge .PPI =_gd .Max (_agge .PPI ,_bfff );_agge .PPI =_gd .Max (_agge .PPI ,_aaaa );};};};};};};for _ ,_ccgb :=range _dggf {if _ ,_gef :=_dbfa [_ccgb .Stream ];_gef {continue ;};if _ccgb .PPI <=_eebb .ImageUpperPPI {continue ;};_defeg :=_eebb .ImageUpperPPI /_ccgb .PPI ;if _ccgg :=_deg (_ccgb .Stream ,_defeg );_ccgg !=nil {_ca .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ccgg );}else {if _cdfg ,_gcce :=_gg .GetStream (_ccgb .Stream .PdfObjectDictionary .Get (_gg .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_gcce {if _aaac :=_deg (_cdfg ,_defeg );_aaac !=nil {return nil ,_aaac ;};};};};return objects ,nil ;};func _efb (_ebba _gg .PdfObject )(_bfafa string ,_dgb []_gg .PdfObject ){var _ecec _f .Buffer ;switch _ddbb :=_ebba .(type ){case *_gg .PdfIndirectObject :_dgb =append (_dgb ,_ddbb );_ebba =_ddbb .PdfObject ;};switch _agcb :=_ebba .(type ){case *_gg .PdfObjectStream :if _afa ,_geaf :=_gg .DecodeStream (_agcb );_geaf ==nil {_ecec .Write (_afa );_dgb =append (_dgb ,_agcb );};case *_gg .PdfObjectArray :for _ ,_dcfd :=range _agcb .Elements (){switch _dae :=_dcfd .(type ){case *_gg .PdfObjectStream :if _bbe ,_daeg :=_gg .DecodeStream (_dae );_daeg ==nil {_ecec .Write (_bbe );_dgb =append (_dgb ,_dae );};};};};return _ecec .String (),_dgb ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eaec *Image )Optimize (objects []_gg .PdfObject )(_cdc []_gg .PdfObject ,_cedc error ){if _eaec .ImageQuality <=0{return objects ,nil ;};_ggaf :=_gbga (objects );if len (_ggaf )==0{return objects ,nil ;};_ade :=make (map[_gg .PdfObject ]_gg .PdfObject );_fbfg :=make (map[_gg .PdfObject ]struct{});for _ ,_cef :=range _ggaf {_gcae :=_cef .Stream .PdfObjectDictionary .Get (_gg .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_fbfg [_gcae ]=struct{}{};};for _fbg ,_cdcc :=range _ggaf {_dcab :=_cdcc .Stream ;if _ ,_gbfe :=_fbfg [_dcab ];_gbfe {continue ;};_cbb ,_gcgb :=_gg .NewEncoderFromStream (_dcab );if _gcgb !=nil {_ca .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_gcc ,_gcgb :=_cbb .DecodeStream (_dcab );if _gcgb !=nil {_ca .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_acf :=_gg .NewDCTEncoder ();_acf .ColorComponents =_cdcc .ColorComponents ;_acf .Quality =_eaec .ImageQuality ;_acf .BitsPerComponent =_cdcc .BitsPerComponent ;_acf .Width =_cdcc .Width ;_acf .Height =_cdcc .Height ;_dce ,_gcgb :=_acf .EncodeBytes (_gcc );if _gcgb !=nil {_ca .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gcgb );return nil ,_gcgb ;};var _eba _gg .StreamEncoder ;_eba =_acf ;{_afeg :=_gg .NewFlateEncoder ();_edee :=_gg .NewMultiEncoder ();_edee .AddEncoder (_afeg );_edee .AddEncoder (_acf );_cbeg ,_ega :=_edee .EncodeBytes (_gcc );if _ega !=nil {return nil ,_ega ;};if len (_cbeg )< len (_dce ){_ca .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_dce ),len (_cbeg ),len (_dcab .Stream ));_dce =_cbeg ;_eba =_edee ;};};_dec :=len (_dcab .Stream );if _dec < len (_dce ){continue ;};_fafe :=&_gg .PdfObjectStream {Stream :_dce };_fafe .PdfObjectReference =_dcab .PdfObjectReference ;_fafe .PdfObjectDictionary =_gg .MakeDict ();_fafe .Merge (_dcab .PdfObjectDictionary );_fafe .Merge (_eba .MakeStreamDict ());_fafe .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gg .MakeInteger (int64 (len (_dce ))));_ade [_dcab ]=_fafe ;_ggaf [_fbg ].Stream =_fafe ;};_cdc =make ([]_gg .PdfObject ,len (objects ));copy (_cdc ,objects );_ece (_cdc ,_ade );return _cdc ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _deg (_fcec *_gg .PdfObjectStream ,_cfd float64 )error {_afc ,_geda :=_cg .NewXObjectImageFromStream (_fcec );if _geda !=nil {return _geda ;};_ebe ,_geda :=_afc .ToImage ();if _geda !=nil {return _geda ;};_age ,_geda :=_ebe .ToGoImage ();if _geda !=nil {return _geda ;};_agg :=int (_gd .RoundToEven (float64 (_ebe .Width )*_cfd ));_fbdc :=int (_gd .RoundToEven (float64 (_ebe .Height )*_cfd ));_eecc :=_d .Rect (0,0,_agg ,_fbdc );var _cgfa _c .Image ;var _bab func (_d .Image )(*_cg .Image ,error );switch _afc .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_cgfa =_d .NewRGBA (_eecc );_bab =_cg .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_cgfa =_d .NewGray (_eecc );_bab =_cg .ImageHandling .NewGrayImageFromGoImage ;default:return _ce .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_afc .ColorSpace .String ());};_c .CatmullRom .Scale (_cgfa ,_cgfa .Bounds (),_age ,_age .Bounds (),_c .Over ,&_c .Options {});if _ebe ,_geda =_bab (_cgfa );_geda !=nil {return _geda ;};_gbbd :=_gg .MakeDict ();_gbbd .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_gg .MakeInteger (100));_gbbd .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_gg .MakeInteger (1));_afc .Filter .UpdateParams (_gbbd );if _geda =_afc .SetImage (_ebe ,nil );_geda !=nil {return _geda ;};_afc .ToPdfObject ();return nil ;};func _fba (_agc []_gg .PdfObject )(_ee map[*_gg .PdfObjectStream ]struct{},_ccbe error ){_ee =map[*_gg .PdfObjectStream ]struct{}{};_fgg :=map[*_cg .PdfFont ]struct{}{};_ebf :=_edbf (_agc );for _ ,_ebd :=range _ebf ._feeb {_dgc ,_dgeg :=_gg .GetDict (_ebd .PdfObject );if !_dgeg {continue ;};_eg ,_dgeg :=_gg .GetDict (_dgc .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dgeg {continue ;};_ggg ,_ :=_efb (_dgc .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gfe ,_fa :=_cg .NewPdfPageResourcesFromDict (_eg );if _fa !=nil {return nil ,_fa ;};_gede :=[]content {{_efa :_ggg ,_aee :_gfe }};_ff :=_gdcd (_dgc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _ff !=nil {_gede =append (_gede ,_ff ...);};for _ ,_gfb :=range _gede {_bec ,_bg :=_a .NewFromContents (_gfb ._efa ,_gfb ._aee );if _bg !=nil {return nil ,_bg ;};_fbd ,_ ,_ ,_bg :=_bec .ExtractPageText ();if _bg !=nil {return nil ,_bg ;};for _ ,_fac :=range _fbd .Marks ().Elements (){if _fac .Font ==nil {continue ;};if _ ,_bb :=_fgg [_fac .Font ];!_bb {_fgg [_fac .Font ]=struct{}{};};};};};_gda :=map[*_gg .PdfObjectStream ][]*_cg .PdfFont {};for _ebda :=range _fgg {_aab :=_ebda .FontDescriptor ();if _aab ==nil ||_aab .FontFile2 ==nil {continue ;};_efd ,_faf :=_gg .GetStream (_aab .FontFile2 );if !_faf {continue ;};_gda [_efd ]=append (_gda [_efd ],_ebda );};for _bbf :=range _gda {var _egg []rune ;var _aabd []_b .GlyphIndex ;for _ ,_fafd :=range _gda [_bbf ]{switch _fd :=_fafd .Encoder ().(type ){case *_dg .IdentityEncoder :_ae :=_fd .RegisteredRunes ();_bd :=make ([]_b .GlyphIndex ,len (_ae ));for _afd ,_ecb :=range _ae {_bd [_afd ]=_b .GlyphIndex (_ecb );};_aabd =append (_aabd ,_bd ...);case *_dg .TrueTypeFontEncoder :_ded :=_fd .RegisteredRunes ();_egg =append (_egg ,_ded ...);case _dg .SimpleEncoder :_cae :=_fd .Charcodes ();for _ ,_dd :=range _cae {_fc ,_def :=_fd .CharcodeToRune (_dd );if !_def {_ca .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_dd );continue ;};_egg =append (_egg ,_fc );};};};_ccbe =_ebfg (_bbf ,_egg ,_aabd );if _ccbe !=nil {_ca .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ccbe );return nil ,_ccbe ;};_ee [_bbf ]=struct{}{};};return _ee ,nil ;};type objectStructure struct{_bfaf *_gg .PdfObjectDictionary ;_cagb *_gg .PdfObjectDictionary ;_feeb []*_gg .PdfIndirectObject ;};type content struct{_efa string ;_aee *_cg .PdfPageResources ;};func _fb (_gdc *_gg .PdfObjectStream )error {_dge ,_bcd :=_gg .DecodeStream (_gdc );if _bcd !=nil {return _bcd ;};_cad :=_e .NewContentStreamParser (string (_dge ));_cce ,_bcd :=_cad .Parse ();if _bcd !=nil {return _bcd ;};_cce =_be (_cce );_gga :=_cce .Bytes ();if len (_gga )>=len (_dge ){return nil ;};_efe ,_bcd :=_gg .MakeStream (_cce .Bytes (),_gg .NewFlateEncoder ());if _bcd !=nil {return _bcd ;};_gdc .Stream =_efe .Stream ;_gdc .Merge (_efe .PdfObjectDictionary );return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cgf *CombineIdenticalIndirectObjects )Optimize (objects []_gg .PdfObject )(_ccad []_gg .PdfObject ,_eae error ){_eab (objects );_gdd :=make (map[_gg .PdfObject ]_gg .PdfObject );_cda :=make (map[_gg .PdfObject ]struct{});_ccdd :=make (map[string ][]*_gg .PdfIndirectObject );for _ ,_cdf :=range objects {_bgg ,_ga :=_cdf .(*_gg .PdfIndirectObject );if !_ga {continue ;};if _bce ,_gec :=_bgg .PdfObject .(*_gg .PdfObjectDictionary );_gec {if _eeg ,_eeee :=_bce .Get ("\u0054\u0079\u0070\u0065").(*_gg .PdfObjectName );_eeee &&*_eeg =="\u0050\u0061\u0067\u0065"{continue ;};_cbfc :=_ge .New ();_cbfc .Write ([]byte (_bce .WriteString ()));_gbc :=string (_cbfc .Sum (nil ));_ccdd [_gbc ]=append (_ccdd [_gbc ],_bgg );};};for _ ,_fggae :=range _ccdd {if len (_fggae )< 2{continue ;};_bfa :=_fggae [0];for _ddg :=1;_ddg < len (_fggae );_ddg ++{_ccea :=_fggae [_ddg ];_gdd [_ccea ]=_bfa ;_cda [_ccea ]=struct{}{};};};_ccad =make ([]_gg .PdfObject ,0,len (objects )-len (_cda ));for _ ,_cbe :=range objects {if _ ,_abf :=_cda [_cbe ];_abf {continue ;};_ccad =append (_ccad ,_cbe );};_ece (_ccad ,_gdd );return _ccad ,nil ;};func _ece (_cfg []_gg .PdfObject ,_ebdfa map[_gg .PdfObject ]_gg .PdfObject ){if len (_ebdfa )==0{return ;};for _gdcg ,_eegb :=range _cfg {if _faa ,_aggb :=_ebdfa [_eegb ];_aggb {_cfg [_gdcg ]=_faa ;continue ;};_ebdfa [_eegb ]=_eegb ;switch _aebb :=_eegb .(type ){case *_gg .PdfObjectArray :_agef :=make ([]_gg .PdfObject ,_aebb .Len ());copy (_agef ,_aebb .Elements ());_ece (_agef ,_ebdfa );for _bcce ,_aaga :=range _agef {_aebb .Set (_bcce ,_aaga );};case *_gg .PdfObjectStreams :_ece (_aebb .Elements (),_ebdfa );case *_gg .PdfObjectStream :_cceae :=[]_gg .PdfObject {_aebb .PdfObjectDictionary };_ece (_cceae ,_ebdfa );_aebb .PdfObjectDictionary =_cceae [0].(*_gg .PdfObjectDictionary );case *_gg .PdfObjectDictionary :_agacg :=_aebb .Keys ();_fgaaf :=make ([]_gg .PdfObject ,len (_agacg ));for _bgb ,_ebgd :=range _agacg {_fgaaf [_bgb ]=_aebb .Get (_ebgd );};_ece (_fgaaf ,_ebdfa );for _gcdc ,_fff :=range _agacg {_aebb .Set (_fff ,_fgaaf [_gcdc ]);};case *_gg .PdfIndirectObject :_cfgd :=[]_gg .PdfObject {_aebb .PdfObject };_ece (_cfgd ,_ebdfa );_aebb .PdfObject =_cfgd [0];};};};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_aefdc :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_aefdc .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_aefdc .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_bga :=new (ImagePPI );_bga .ImageUpperPPI =options .ImageUpperPPI ;_aefdc .Append (_bga );};if options .ImageQuality > 0{_aafe :=new (Image );_aafe .ImageQuality =options .ImageQuality ;_aefdc .Append (_aafe );};if options .CombineDuplicateDirectObjects {_aefdc .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_aefdc .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_aefdc .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_aefdc .Append (new (ObjectStreams ));};if options .CompressStreams {_aefdc .Append (new (CompressStreams ));};return _aefdc ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_efddf *ObjectStreams )Optimize (objects []_gg .PdfObject )(_bgge []_gg .PdfObject ,_aeead error ){_bgd :=&_gg .PdfObjectStreams {};_fgad :=make ([]_gg .PdfObject ,0,len (objects ));for _ ,_fbfd :=range objects {if _dcd ,_eed :=_fbfd .(*_gg .PdfIndirectObject );_eed &&_dcd .GenerationNumber ==0{_bgd .Append (_fbfd );}else {_fgad =append (_fgad ,_fbfd );};};if _bgd .Len ()==0{return _fgad ,nil ;};_bgge =make ([]_gg .PdfObject ,0,len (_fgad )+_bgd .Len ()+1);if _bgd .Len ()> 1{_bgge =append (_bgge ,_bgd );};_bgge =append (_bgge ,_bgd .Elements ()...);_bgge =append (_bgge ,_fgad ...);return _bgge ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bad *CompressStreams )Optimize (objects []_gg .PdfObject )(_dcaf []_gg .PdfObject ,_ccec error ){_dcaf =make ([]_gg .PdfObject ,len (objects ));copy (_dcaf ,objects );for _ ,_bca :=range objects {_fec ,_egb :=_gg .GetStream (_bca );if !_egb {continue ;};if _gaf :=_fec .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_gaf !=nil {if _ ,_badf :=_gg .GetName (_gaf );_badf {continue ;};if _dbf ,_ceb :=_gg .GetArray (_gaf );_ceb &&_dbf .Len ()> 0{continue ;};};_aefd :=_gg .NewFlateEncoder ();var _bbb []byte ;_bbb ,_ccec =_aefd .EncodeBytes (_fec .Stream );if _ccec !=nil {return _dcaf ,_ccec ;};_egd :=_aefd .MakeStreamDict ();if len (_bbb )+len (_egd .WriteString ())< len (_fec .Stream ){_fec .Stream =_bbb ;_fec .PdfObjectDictionary .Merge (_egd );_fec .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gg .MakeInteger (int64 (len (_fec .Stream ))));};};return _dcaf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cd *Chain )Optimize (objects []_gg .PdfObject )(_bc []_gg .PdfObject ,_ged error ){_bc =objects ;for _ ,_fe :=range _cd ._gb {_bc ,_ged =_fe .Optimize (_bc );if _ged !=nil {return _bc ,_ged ;};};return _bc ,nil ;};func _ebfg (_bed *_gg .PdfObjectStream ,_gbff []rune ,_eee []_b .GlyphIndex )error {_bed ,_fcf :=_gg .GetStream (_bed );if !_fcf {_ca .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _gdb .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_edf ,_dgg :=_gg .DecodeStream (_bed );if _dgg !=nil {_ca .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_dgg );return _dgg ;};_gfc ,_dgg :=_b .Parse (_f .NewReader (_edf ));if _dgg !=nil {_ca .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bed .Stream ));return _dgg ;};_ea :=_eee ;if len (_gbff )> 0{_bff :=_gfc .LookupRunes (_gbff );_ea =append (_ea ,_bff ...);};_gfc ,_dgg =_gfc .SubsetKeepIndices (_ea );if _dgg !=nil {_ca .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_dgg );return _dgg ;};var _gbg _f .Buffer ;_dgg =_gfc .Write (&_gbg );if _dgg !=nil {_ca .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dgg );return _dgg ;};if _gbg .Len ()> len (_edf ){_ca .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_ege ,_dgg :=_gg .MakeStream (_gbg .Bytes (),_gg .NewFlateEncoder ());if _dgg !=nil {_ca .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dgg );return _dgg ;};*_bed =*_ege ;_bed .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gg .MakeInteger (int64 (_gbg .Len ())));return nil ;};func _gdcd (_gbgc _gg .PdfObject )[]content {if _gbgc ==nil {return nil ;};_dca ,_cb :=_gg .GetArray (_gbgc );if !_cb {_ca .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _afb []content ;for _ ,_cbf :=range _dca .Elements (){_aac ,_aag :=_gg .GetDict (_cbf );if !_aag {_ca .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_ffc ,_aag :=_gg .GetDict (_aac .Get ("\u0041\u0050"));if !_aag {_ca .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_gcg :=_gg .TraceToDirectObject (_ffc .Get ("\u004e"));if _gcg ==nil {_ca .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _dcc *_gg .PdfObjectStream ;switch _aeb :=_gcg .(type ){case *_gg .PdfObjectDictionary :_bdg ,_dbb :=_gg .GetName (_aac .Get ("\u0041\u0053"));if !_dbb {_ca .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_dcc ,_dbb =_gg .GetStream (_aeb .Get (*_bdg ));if !_dbb {_ca .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_gg .PdfObjectStream :_dcc =_aeb ;};if _dcc ==nil {_ca .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_gff ,_fbc :=_cg .NewXObjectFormFromStream (_dcc );if _fbc !=nil {_ca .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fbc );continue ;};_agae ,_fbc :=_gff .GetContentStream ();if _fbc !=nil {_ca .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_fbc );continue ;};_afb =append (_afb ,content {_efa :string (_agae ),_aee :_gff .Resources });};return _afb ;};