//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_fc "bytes";_g "crypto/md5";_gf "errors";_f "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/contentstream";_gad "github.com/unidoc/unipdf/v3/core";_ga "github.com/unidoc/unipdf/v3/extractor";_dd "github.com/unidoc/unipdf/v3/internal/imageutil";
_ge "github.com/unidoc/unipdf/v3/internal/textencoding";_fa "github.com/unidoc/unipdf/v3/model";_ee "github.com/unidoc/unitype";_d "golang.org/x/image/draw";_df "math";);

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdf *CombineDuplicateDirectObjects )Optimize (objects []_gad .PdfObject )(_bdf []_gad .PdfObject ,_gfgb error ){_bacf (objects );_ede :=make (map[string ][]*_gad .PdfObjectDictionary );var _dbg func (_aaa *_gad .PdfObjectDictionary );_dbg =func (_bfeg *_gad .PdfObjectDictionary ){for _ ,_bbb :=range _bfeg .Keys (){_cfa :=_bfeg .Get (_bbb );
if _efgd ,_cgaf :=_cfa .(*_gad .PdfObjectDictionary );_cgaf {_cbd :=_g .New ();_cbd .Write ([]byte (_efgd .WriteString ()));_ebga :=string (_cbd .Sum (nil ));_ede [_ebga ]=append (_ede [_ebga ],_efgd );_dbg (_efgd );};};};for _ ,_dcb :=range objects {_bcbc ,_abb :=_dcb .(*_gad .PdfIndirectObject );
if !_abb {continue ;};if _eccf ,_cfcd :=_bcbc .PdfObject .(*_gad .PdfObjectDictionary );_cfcd {_dbg (_eccf );};};_edg :=make ([]_gad .PdfObject ,0,len (_ede ));_ggc :=make (map[_gad .PdfObject ]_gad .PdfObject );for _ ,_bde :=range _ede {if len (_bde )< 2{continue ;
};_ggbg :=_gad .MakeDict ();_ggbg .Merge (_bde [0]);_cdb :=_gad .MakeIndirectObject (_ggbg );_edg =append (_edg ,_cdb );for _fgdc :=0;_fgdc < len (_bde );_fgdc ++{_fbgd :=_bde [_fgdc ];_ggc [_fbgd ]=_cdb ;};};_bdf =make ([]_gad .PdfObject ,len (objects ));
copy (_bdf ,objects );_bdf =append (_edg ,_bdf ...);_bbef (_bdf ,_ggc );return _bdf ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_gc []_fa .Optimizer };func _dad (_cfbg []_gad .PdfObject )objectStructure {_efde :=objectStructure {};_gdfe :=false ;for _ ,_aegb :=range _cfbg {switch _bdag :=_aegb .(type ){case *_gad .PdfIndirectObject :_ggbge ,_dbba :=_gad .GetDict (_bdag );
if !_dbba {continue ;};_bbea ,_dbba :=_gad .GetName (_ggbge .Get ("\u0054\u0079\u0070\u0065"));if !_dbba {continue ;};switch _bbea .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_efde ._cfcg =_ggbge ;_gdfe =true ;};};if _gdfe {break ;};};if !_gdfe {return _efde ;
};_cbbg ,_agc :=_gad .GetDict (_efde ._cfcg .Get ("\u0050\u0061\u0067e\u0073"));if !_agc {return _efde ;};_efde ._afgg =_cbbg ;_faad ,_agc :=_gad .GetArray (_cbbg .Get ("\u004b\u0069\u0064\u0073"));if !_agc {return _efde ;};for _ ,_cggd :=range _faad .Elements (){_ddcd ,_ccf :=_gad .GetIndirect (_cggd );
if !_ccf {break ;};_efde ._efd =append (_efde ._efd ,_ddcd );};return _efde ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dbcg *CombineIdenticalIndirectObjects )Optimize (objects []_gad .PdfObject )(_cdg []_gad .PdfObject ,_fcgg error ){_bacf (objects );_fee :=make (map[_gad .PdfObject ]_gad .PdfObject );_gfdd :=make (map[_gad .PdfObject ]struct{});_cbb :=make (map[string ][]*_gad .PdfIndirectObject );
for _ ,_cfg :=range objects {_dgb ,_cfcc :=_cfg .(*_gad .PdfIndirectObject );if !_cfcc {continue ;};if _bab ,_decc :=_dgb .PdfObject .(*_gad .PdfObjectDictionary );_decc {if _fbb ,_bae :=_bab .Get ("\u0054\u0079\u0070\u0065").(*_gad .PdfObjectName );_bae &&*_fbb =="\u0050\u0061\u0067\u0065"{continue ;
};_cca :=_g .New ();_cca .Write ([]byte (_bab .WriteString ()));_cgdg :=string (_cca .Sum (nil ));_cbb [_cgdg ]=append (_cbb [_cgdg ],_dgb );};};for _ ,_ecba :=range _cbb {if len (_ecba )< 2{continue ;};_abe :=_ecba [0];for _abc :=1;_abc < len (_ecba );
_abc ++{_edgc :=_ecba [_abc ];_fee [_edgc ]=_abe ;_gfdd [_edgc ]=struct{}{};};};_cdg =make ([]_gad .PdfObject ,0,len (objects )-len (_gfdd ));for _ ,_deff :=range objects {if _ ,_ffdd :=_gfdd [_deff ];_ffdd {continue ;};_cdg =append (_cdg ,_deff );};_bbef (_cdg ,_fee );
return _cdg ,nil ;};

// Append appends optimizers to the chain.
func (_gd *Chain )Append (optimizers ..._fa .Optimizer ){_gd ._gc =append (_gd ._gc ,optimizers ...)};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fbbb *CompressStreams )Optimize (objects []_gad .PdfObject )(_dcg []_gad .PdfObject ,_gaa error ){_dcg =make ([]_gad .PdfObject ,len (objects ));copy (_dcg ,objects );for _ ,_ccab :=range objects {_cab ,_ae :=_gad .GetStream (_ccab );if !_ae {continue ;
};if _fbd :=_cab .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fbd !=nil {if _ ,_eaab :=_gad .GetName (_fbd );_eaab {continue ;};if _dfga ,_abcb :=_gad .GetArray (_fbd );_abcb &&_dfga .Len ()> 0{continue ;};};_fgc :=_gad .NewFlateEncoder ();var _baf []byte ;
_baf ,_gaa =_fgc .EncodeBytes (_cab .Stream );if _gaa !=nil {return _dcg ,_gaa ;};_daa :=_fgc .MakeStreamDict ();if len (_baf )+len (_daa .WriteString ())< len (_cab .Stream ){_cab .Stream =_baf ;_cab .PdfObjectDictionary .Merge (_daa );_cab .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gad .MakeInteger (int64 (len (_cab .Stream ))));
};};return _dcg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ad *CleanContentstream )Optimize (objects []_gad .PdfObject )(_bg []_gad .PdfObject ,_ag error ){_bf :=map[*_gad .PdfObjectStream ]struct{}{};var _eb []*_gad .PdfObjectStream ;_efg :=func (_db *_gad .PdfObjectStream ){if _ ,_dc :=_bf [_db ];!_dc {_bf [_db ]=struct{}{};
_eb =append (_eb ,_db );};};_ecb :=map[_gad .PdfObject ]bool {};_dec :=map[_gad .PdfObject ]bool {};for _ ,_eg :=range objects {switch _gb :=_eg .(type ){case *_gad .PdfIndirectObject :switch _gcbb :=_gb .PdfObject .(type ){case *_gad .PdfObjectDictionary :if _ed ,_ecc :=_gad .GetName (_gcbb .Get ("\u0054\u0079\u0070\u0065"));
!_ecc ||_ed .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _gfg ,_gbg :=_gad .GetStream (_gcbb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gbg {_efg (_gfg );}else if _bc ,_be :=_gad .GetArray (_gcbb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_be {var _ebg []*_gad .PdfObjectStream ;for _ ,_bgb :=range _bc .Elements (){if _faf ,_ca :=_gad .GetStream (_bgb );_ca {_ebg =append (_ebg ,_faf );};};if len (_ebg )> 0{var _afd _fc .Buffer ;for _ ,_gg :=range _ebg {if _agd ,_cg :=_gad .DecodeStream (_gg );
_cg ==nil {_afd .Write (_agd );};_ecb [_gg ]=true ;};_egc ,_gbf :=_gad .MakeStream (_afd .Bytes (),_gad .NewFlateEncoder ());if _gbf !=nil {return nil ,_gbf ;};_dec [_egc ]=true ;_gcbb .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_egc );_efg (_egc );
};};};case *_gad .PdfObjectStream :if _cea ,_bgf :=_gad .GetName (_gb .Get ("\u0054\u0079\u0070\u0065"));!_bgf ||_cea .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _ac ,_cb :=_gad .GetName (_gb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_cb ||_ac .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_efg (_gb );};};for _ ,_ceb :=range _eb {_ag =_fcb (_ceb );if _ag !=nil {return nil ,_ag ;};};_bg =nil ;for _ ,_cga :=range objects {if _ecb [_cga ]{continue ;};_bg =append (_bg ,_cga );};for _bce :=range _dec {_bg =append (_bg ,_bce );
};return _bg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_afag *ImagePPI )Optimize (objects []_gad .PdfObject )(_cbcc []_gad .PdfObject ,_aeg error ){if _afag .ImageUpperPPI <=0{return objects ,nil ;};_eea :=_bed (objects );if len (_eea )==0{return objects ,nil ;};_ggga :=make (map[_gad .PdfObject ]struct{});
for _ ,_beb :=range _eea {_edaff :=_beb .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_ggga [_edaff ]=struct{}{};};_ddb :=make (map[*_gad .PdfObjectStream ]*imageInfo );for _ ,_ggff :=range _eea {_ddb [_ggff .Stream ]=_ggff ;};var _dbge *_gad .PdfObjectDictionary ;
for _ ,_ddd :=range objects {if _edc ,_egfa :=_gad .GetDict (_ddd );_dbge ==nil &&_egfa {if _gdd ,_cdcg :=_gad .GetName (_edc .Get ("\u0054\u0079\u0070\u0065"));_cdcg &&*_gdd =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_dbge =_edc ;};};};if _dbge ==nil {return objects ,nil ;
};_ddbc ,_bdeb :=_gad .GetDict (_dbge .Get ("\u0050\u0061\u0067e\u0073"));if !_bdeb {return objects ,nil ;};_dbae ,_gdef :=_gad .GetArray (_ddbc .Get ("\u004b\u0069\u0064\u0073"));if !_gdef {return objects ,nil ;};for _ ,_ece :=range _dbae .Elements (){_fbde :=make (map[string ]*imageInfo );
_gce ,_ddae :=_gad .GetDict (_ece );if !_ddae {continue ;};_gcd ,_ :=_bceg (_gce .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_gcd )==0{continue ;};_fafg ,_dbbc :=_gad .GetDict (_gce .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_dbbc {continue ;};_fbbe ,_edae :=_fa .NewPdfPageResourcesFromDict (_fafg );if _edae !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_edae );
continue ;};_dcf ,_cccf :=_gad .GetDict (_fafg .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_cccf {continue ;};_afgd :=_dcf .Keys ();for _ ,_adf :=range _afgd {if _fdef ,_bga :=_gad .GetStream (_dcf .Get (_adf ));_bga {if _bbde ,_fadd :=_ddb [_fdef ];
_fadd {_fbde [string (_adf )]=_bbde ;};};};_bbfb :=_b .NewContentStreamParser (_gcd );_aada ,_edae :=_bbfb .Parse ();if _edae !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_edae );continue ;};_bff :=_b .NewContentStreamProcessor (*_aada );
_bff .AddHandler (_b .HandlerConditionEnumAllOperands ,"",func (_abbe *_b .ContentStreamOperation ,_edgg _b .GraphicsState ,_gggb *_fa .PdfPageResources )error {switch _abbe .Operand {case "\u0044\u006f":if len (_abbe .Params )!=1{_f .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_fcbc ,_baa :=_gad .GetName (_abbe .Params [0]);if !_baa {_f .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _cefe ,_acd :=_fbde [string (*_fcbc )];_acd {_eag :=_edgg .CTM .ScalingFactorX ();_ddff :=_edgg .CTM .ScalingFactorY ();_gcdd ,_add :=_eag /72.0,_ddff /72.0;_cfd ,_gcfa :=float64 (_cefe .Width )/_gcdd ,float64 (_cefe .Height )/_add ;if _gcdd ==0||_add ==0{_cfd =72.0;
_gcfa =72.0;};_cefe .PPI =_df .Max (_cefe .PPI ,_cfd );_cefe .PPI =_df .Max (_cefe .PPI ,_gcfa );};};return nil ;});_edae =_bff .Process (_fbbe );if _edae !=nil {_f .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_edae );
continue ;};};for _ ,_dbf :=range _eea {if _ ,_cge :=_ggga [_dbf .Stream ];_cge {continue ;};if _dbf .PPI <=_afag .ImageUpperPPI {continue ;};_cce ,_aee :=_fa .NewXObjectImageFromStream (_dbf .Stream );if _aee !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aee );
continue ;};var _bfd imageModifications ;_bfd .Scale =_afag .ImageUpperPPI /_dbf .PPI ;if _dbf .BitsPerComponent ==1&&_dbf .ColorComponents ==1{_bcd :=_df .Round (_dbf .PPI /_afag .ImageUpperPPI );_fgdf :=_dd .NextPowerOf2 (uint (_bcd ));if _dd .InDelta (float64 (_fgdf ),1/_bfd .Scale ,0.3){_bfd .Scale =float64 (1)/float64 (_fgdf );
};if _ ,_bffg :=_cce .Filter .(*_gad .JBIG2Encoder );!_bffg {_bfd .Encoding =_gad .NewJBIG2Encoder ();};};if _aee =_bbf (_cce ,_bfd );_aee !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_aee );
continue ;};_bfd .Encoding =nil ;if _ecgg ,_bedf :=_gad .GetStream (_dbf .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_bedf {_ceba ,_ffb :=_fa .NewXObjectImageFromStream (_ecgg );if _ffb !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ffb );
continue ;};if _ffb =_bbf (_ceba ,_bfd );_ffb !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ffb );continue ;};};};return objects ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_bfa :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_bfa .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_bfa .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ebgb :=new (ImagePPI );
_ebgb .ImageUpperPPI =options .ImageUpperPPI ;_bfa .Append (_ebgb );};if options .ImageQuality > 0{_fafd :=new (Image );_fafd .ImageQuality =options .ImageQuality ;_bfa .Append (_fafd );};if options .CombineDuplicateDirectObjects {_bfa .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_bfa .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_bfa .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_bfa .Append (new (ObjectStreams ));
};if options .CompressStreams {_bfa .Append (new (CompressStreams ));};return _bfa ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_gad .PdfObjectStream ;PPI float64 ;};func _ddc (_aeb *_fa .Image ,_dgbf float64 )(*_fa .Image ,error ){_eaag ,_ege :=_aeb .ToGoImage ();
if _ege !=nil {return nil ,_ege ;};var _fdgc _dd .Image ;_daf ,_dcgf :=_eaag .(*_dd .Monochrome );if _dcgf {if _ege =_daf .ResolveDecode ();_ege !=nil {return nil ,_ege ;};_fdgc ,_ege =_daf .Scale (_dgbf );if _ege !=nil {return nil ,_ege ;};}else {_gde :=int (_df .RoundToEven (float64 (_aeb .Width )*_dgbf ));
_bbgd :=int (_df .RoundToEven (float64 (_aeb .Height )*_dgbf ));_fdgc ,_ege =_dd .NewImage (_gde ,_bbgd ,int (_aeb .BitsPerComponent ),_aeb .ColorComponents ,nil ,nil ,nil );if _ege !=nil {return nil ,_ege ;};_d .CatmullRom .Scale (_fdgc ,_fdgc .Bounds (),_eaag ,_eaag .Bounds (),_d .Over ,&_d .Options {});
};_ggg :=_fdgc .Base ();_fae :=&_fa .Image {Width :int64 (_ggg .Width ),Height :int64 (_ggg .Height ),BitsPerComponent :int64 (_ggg .BitsPerComponent ),ColorComponents :_ggg .ColorComponents ,Data :_ggg .Data };_fae .SetDecode (_ggg .Decode );_fae .SetAlpha (_ggg .Alpha );
return _fae ,nil ;};func _dg (_cf *_b .ContentStreamOperations )*_b .ContentStreamOperations {if _cf ==nil {return nil ;};_af :=_b .ContentStreamOperations {};for _ ,_fcg :=range *_cf {switch _fcg .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_fcg .Params )==6{if _eed ,_bb :=_gad .GetNumbersAsFloat (_fcg .Params );_bb ==nil {if _eed [0]==1&&_eed [1]==0&&_eed [2]==0&&_eed [3]==1{_fcg =&_b .ContentStreamOperation {Params :[]_gad .PdfObject {_fcg .Params [4],_fcg .Params [5]},Operand :"\u0054\u0064"};
};};};};_af =append (_af ,_fcg );};return &_af ;};func _fcb (_fde *_gad .PdfObjectStream )error {_ce ,_ba :=_gad .DecodeStream (_fde );if _ba !=nil {return _ba ;};_bd :=_b .NewContentStreamParser (string (_ce ));_ff ,_ba :=_bd .Parse ();if _ba !=nil {return _ba ;
};_ff =_dg (_ff );_ef :=_ff .Bytes ();if len (_ef )>=len (_ce ){return nil ;};_de ,_ba :=_gad .MakeStream (_ff .Bytes (),_gad .NewFlateEncoder ());if _ba !=nil {return _ba ;};_fde .Stream =_de .Stream ;_fde .Merge (_de .PdfObjectDictionary );return nil ;
};func _bbf (_gcg *_fa .XObjectImage ,_ceab imageModifications )error {_edd ,_cdbf :=_gcg .ToImage ();if _cdbf !=nil {return _cdbf ;};if _ceab .Scale !=0{_edd ,_cdbf =_ddc (_edd ,_ceab .Scale );if _cdbf !=nil {return _cdbf ;};};if _ceab .Encoding !=nil {_gcg .Filter =_ceab .Encoding ;
};_gcg .Decode =nil ;switch _egf :=_gcg .Filter .(type ){case *_gad .FlateEncoder :if _egf .Predictor !=1&&_egf .Predictor !=11{_egf .Predictor =1;};};if _cdbf =_gcg .SetImage (_edd ,nil );_cdbf !=nil {_f .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_cdbf );
return _cdbf ;};_gcg .ToPdfObject ();return nil ;};func _dgd (_eee *_gad .PdfObjectStream ,_cee []rune ,_bbc []_ee .GlyphIndex )error {_eee ,_ebe :=_gad .GetStream (_eee );if !_ebe {_f .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _gf .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cfc ,_gecc :=_gad .DecodeStream (_eee );if _gecc !=nil {_f .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_gecc );
return _gecc ;};_dbc ,_gecc :=_ee .Parse (_fc .NewReader (_cfc ));if _gecc !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_eee .Stream ));
return _gecc ;};_gadd :=_bbc ;if len (_cee )> 0{_bgd :=_dbc .LookupRunes (_cee );_gadd =append (_gadd ,_bgd ...);};_dbc ,_gecc =_dbc .SubsetKeepIndices (_gadd );if _gecc !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_gecc );
return _gecc ;};var _afg _fc .Buffer ;_gecc =_dbc .Write (&_afg );if _gecc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gecc );return _gecc ;};if _afg .Len ()> len (_cfc ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_ggf ,_gecc :=_gad .MakeStream (_afg .Bytes (),_gad .NewFlateEncoder ());if _gecc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_gecc );return _gecc ;
};*_eee =*_ggf ;_eee .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gad .MakeInteger (int64 (_afg .Len ())));return nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};type objectStructure struct{_cfcg *_gad .PdfObjectDictionary ;_afgg *_gad .PdfObjectDictionary ;_efd []*_gad .PdfIndirectObject ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dee *CleanFonts )Optimize (objects []_gad .PdfObject )(_acbc []_gad .PdfObject ,_bgg error ){var _dge map[*_gad .PdfObjectStream ]struct{};if _dee .Subset {var _cbc error ;_dge ,_cbc =_fe (objects );if _cbc !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_cbc );
return nil ,_cbc ;};};for _ ,_dca :=range objects {_bbe ,_dgf :=_gad .GetStream (_dca );if !_dgf {continue ;};if _ ,_ab :=_dge [_bbe ];_ab {continue ;};_fea ,_bbd :=_gad .NewEncoderFromStream (_bbe );if _bbd !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_bbd );
continue ;};_bgdb ,_bbd :=_fea .DecodeStream (_bbe );if _bbd !=nil {_f .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_bbd );
continue ;};if len (_bgdb )< 4{continue ;};_fgd :=string (_bgdb [:4]);if _fgd =="\u004f\u0054\u0054\u004f"{continue ;};if _fgd !="\u0000\u0001\u0000\u0000"&&_fgd !="\u0074\u0072\u0075\u0065"{continue ;};_dgfb ,_bbd :=_ee .Parse (_fc .NewReader (_bgdb ));
if _bbd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bbd );continue ;};_bbd =_dgfb .Optimize ();
if _bbd !=nil {_f .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_bbd );continue ;};var _adg _fc .Buffer ;_bbd =_dgfb .Write (&_adg );
if _bbd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_bbd );continue ;};if _adg .Len ()> len (_bgdb ){_f .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_fab ,_bbd :=_gad .MakeStream (_adg .Bytes (),_gad .NewFlateEncoder ());if _bbd !=nil {continue ;};*_bbe =*_fab ;_bbe .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_gad .MakeInteger (int64 (_adg .Len ())));};return objects ,nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};func _cgd (_bag _gad .PdfObject )[]content {if _bag ==nil {return nil ;};_ebee ,_afgf :=_gad .GetArray (_bag );if !_afgf {_f .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _dba []content ;for _ ,_cgc :=range _ebee .Elements (){_dag ,_egg :=_gad .GetDict (_cgc );if !_egg {_f .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_gca ,_egg :=_gad .GetDict (_dag .Get ("\u0041\u0050"));if !_egg {_f .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fbg :=_gad .TraceToDirectObject (_gca .Get ("\u004e"));
if _fbg ==nil {_f .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _feae *_gad .PdfObjectStream ;switch _cef :=_fbg .(type ){case *_gad .PdfObjectDictionary :_deb ,_ebeb :=_gad .GetName (_dag .Get ("\u0041\u0053"));
if !_ebeb {_f .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_feae ,_ebeb =_gad .GetStream (_cef .Get (*_deb ));if !_ebeb {_f .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_gad .PdfObjectStream :_feae =_cef ;};if _feae ==nil {_f .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_fdb ,_dfe :=_fa .NewXObjectFormFromStream (_feae );if _dfe !=nil {_f .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dfe );
continue ;};_cdc ,_dfe :=_fdb .GetContentStream ();if _dfe !=nil {_f .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_dfe );continue ;};_dba =append (_dba ,content {_dfa :string (_cdc ),_feg :_fdb .Resources });
};return _dba ;};func _bceg (_ccaf _gad .PdfObject )(_gba string ,_afc []_gad .PdfObject ){var _ccea _fc .Buffer ;switch _fdbf :=_ccaf .(type ){case *_gad .PdfIndirectObject :_afc =append (_afc ,_fdbf );_ccaf =_fdbf .PdfObject ;};switch _feeb :=_ccaf .(type ){case *_gad .PdfObjectStream :if _ddba ,_efgb :=_gad .DecodeStream (_feeb );
_efgb ==nil {_ccea .Write (_ddba );_afc =append (_afc ,_feeb );};case *_gad .PdfObjectArray :for _ ,_egb :=range _feeb .Elements (){switch _fdac :=_egb .(type ){case *_gad .PdfObjectStream :if _fbdd ,_gfgc :=_gad .DecodeStream (_fdac );_gfgc ==nil {_ccea .Write (_fbdd );
_afc =append (_afc ,_fdac );};};};};return _ccea .String (),_afc ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};type content struct{_dfa string ;_feg *_fa .PdfPageResources ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edef *CombineDuplicateStreams )Optimize (objects []_gad .PdfObject )(_gee []_gad .PdfObject ,_eaba error ){_fgb :=make (map[_gad .PdfObject ]_gad .PdfObject );_efb :=make (map[_gad .PdfObject ]struct{});_cfca :=make (map[string ][]*_gad .PdfObjectStream );
for _ ,_baca :=range objects {if _agdb ,_bbdb :=_baca .(*_gad .PdfObjectStream );_bbdb {_ccc :=_g .New ();_ccc .Write (_agdb .Stream );_ccc .Write ([]byte (_agdb .PdfObjectDictionary .WriteString ()));_def :=string (_ccc .Sum (nil ));_cfca [_def ]=append (_cfca [_def ],_agdb );
};};for _ ,_ebfc :=range _cfca {if len (_ebfc )< 2{continue ;};_dcd :=_ebfc [0];for _ffc :=1;_ffc < len (_ebfc );_ffc ++{_ebeba :=_ebfc [_ffc ];_fgb [_ebeba ]=_dcd ;_efb [_ebeba ]=struct{}{};};};_gee =make ([]_gad .PdfObject ,0,len (objects )-len (_efb ));
for _ ,_ceaa :=range objects {if _ ,_aba :=_efb [_ceaa ];_aba {continue ;};_gee =append (_gee ,_ceaa );};_bbef (_gee ,_fgb );return _gee ,nil ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};func _bacf (_dcbg []_gad .PdfObject ){for _bcef ,_egd :=range _dcbg {switch _fcdg :=_egd .(type ){case *_gad .PdfIndirectObject :_fcdg .ObjectNumber =int64 (_bcef +1);_fcdg .GenerationNumber =0;case *_gad .PdfObjectStream :_fcdg .ObjectNumber =int64 (_bcef +1);
_fcdg .GenerationNumber =0;case *_gad .PdfObjectStreams :_fcdg .ObjectNumber =int64 (_bcef +1);_fcdg .GenerationNumber =0;};};};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_c *Chain )Optimize (objects []_gad .PdfObject )(_ea []_gad .PdfObject ,_fag error ){_a :=objects ;for _ ,_gcb :=range _c ._gc {_fd ,_ec :=_gcb .Optimize (_a );if _ec !=nil {_f .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_ec );
continue ;};_a =_fd ;};return _a ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_faa *Image )Optimize (objects []_gad .PdfObject )(_debb []_gad .PdfObject ,_caf error ){if _faa .ImageQuality <=0{return objects ,nil ;};_dbag :=_bed (objects );if len (_dbag )==0{return objects ,nil ;};_deca :=make (map[_gad .PdfObject ]_gad .PdfObject );
_ffg :=make (map[_gad .PdfObject ]struct{});for _ ,_edgf :=range _dbag {_bee :=_edgf .Stream .Get ("\u0053\u004d\u0061s\u006b");_ffg [_bee ]=struct{}{};};for _cfe ,_bbg :=range _dbag {_afa :=_bbg .Stream ;if _ ,_ggfb :=_ffg [_afa ];_ggfb {continue ;};_cgdge ,_aaf :=_fa .NewXObjectImageFromStream (_afa );
if _aaf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aaf );continue ;};switch _cgdge .Filter .(type ){case *_gad .JBIG2Encoder :continue ;case *_gad .CCITTFaxEncoder :continue ;};_feec ,_aaf :=_cgdge .ToImage ();
if _aaf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aaf );continue ;};_agbe :=_gad .NewDCTEncoder ();_agbe .ColorComponents =_feec .ColorComponents ;_agbe .Quality =_faa .ImageQuality ;_agbe .BitsPerComponent =_bbg .BitsPerComponent ;
_agbe .Width =_bbg .Width ;_agbe .Height =_bbg .Height ;_eeg ,_aaf :=_agbe .EncodeBytes (_feec .Data );if _aaf !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_aaf );continue ;};var _ceee _gad .StreamEncoder ;_ceee =_agbe ;
{_gbb :=_gad .NewFlateEncoder ();_afdd :=_gad .NewMultiEncoder ();_afdd .AddEncoder (_gbb );_afdd .AddEncoder (_agbe );_cedf ,_fcbe :=_afdd .EncodeBytes (_feec .Data );if _fcbe !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fcbe );
continue ;};if len (_cedf )< len (_eeg ){_f .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_eeg ),len (_cedf ),len (_afa .Stream ));
_eeg =_cedf ;_ceee =_afdd ;};};_cfgc :=len (_afa .Stream );if _cfgc < len (_eeg ){continue ;};_aaed :=&_gad .PdfObjectStream {Stream :_eeg };_aaed .PdfObjectReference =_afa .PdfObjectReference ;_aaed .PdfObjectDictionary =_gad .MakeDict ();_aaed .Merge (_afa .PdfObjectDictionary );
_aaed .Merge (_ceee .MakeStreamDict ());_aaed .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_gad .MakeInteger (int64 (len (_eeg ))));_deca [_afa ]=_aaed ;_dbag [_cfe ].Stream =_aaed ;};_debb =make ([]_gad .PdfObject ,len (objects ));copy (_debb ,objects );
_bbef (_debb ,_deca );return _debb ,nil ;};func _bbef (_dagb []_gad .PdfObject ,_abd map[_gad .PdfObject ]_gad .PdfObject ){if len (_abd )==0{return ;};for _feef ,_ddffb :=range _dagb {if _cff ,_gdf :=_abd [_ddffb ];_gdf {_dagb [_feef ]=_cff ;continue ;
};_abd [_ddffb ]=_ddffb ;switch _fbgc :=_ddffb .(type ){case *_gad .PdfObjectArray :_dcae :=make ([]_gad .PdfObject ,_fbgc .Len ());copy (_dcae ,_fbgc .Elements ());_bbef (_dcae ,_abd );for _bad ,_bca :=range _dcae {_fbgc .Set (_bad ,_bca );};case *_gad .PdfObjectStreams :_bbef (_fbgc .Elements (),_abd );
case *_gad .PdfObjectStream :_fege :=[]_gad .PdfObject {_fbgc .PdfObjectDictionary };_bbef (_fege ,_abd );_fbgc .PdfObjectDictionary =_fege [0].(*_gad .PdfObjectDictionary );case *_gad .PdfObjectDictionary :_fdga :=_fbgc .Keys ();_fbc :=make ([]_gad .PdfObject ,len (_fdga ));
for _deg ,_ada :=range _fdga {_fbc [_deg ]=_fbgc .Get (_ada );};_bbef (_fbc ,_abd );for _fgda ,_gdc :=range _fdga {_fbgc .Set (_gdc ,_fbc [_fgda ]);};case *_gad .PdfIndirectObject :_cgcc :=[]_gad .PdfObject {_fbgc .PdfObject };_bbef (_cgcc ,_abd );_fbgc .PdfObject =_cgcc [0];
};};};func _bed (_fba []_gad .PdfObject )[]*imageInfo {_fbed :=_gad .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_agg :=make (map[*_gad .PdfObjectStream ]struct{});var _cfgb []*imageInfo ;for _ ,_dda :=range _fba {_fcd ,_faffd :=_gad .GetStream (_dda );
if !_faffd {continue ;};if _ ,_cebe :=_agg [_fcd ];_cebe {continue ;};_agg [_fcd ]=struct{}{};_agb :=_fcd .PdfObjectDictionary .Get (_fbed );_cdca ,_faffd :=_gad .GetName (_agb );if !_faffd ||string (*_cdca )!="\u0049\u006d\u0061g\u0065"{continue ;};_cfb :=&imageInfo {Stream :_fcd ,BitsPerComponent :8};
if _gabd ,_cad :=_gad .GetIntVal (_fcd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_cad {_cfb .BitsPerComponent =_gabd ;};if _ecbe ,_gae :=_gad .GetIntVal (_fcd .Get ("\u0057\u0069\u0064t\u0068"));_gae {_cfb .Width =_ecbe ;
};if _ecf ,_dga :=_gad .GetIntVal (_fcd .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_dga {_cfb .Height =_ecf ;};_cdgd ,_ecg :=_fa .NewPdfColorspaceFromPdfObject (_fcd .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));if _ecg !=nil {_f .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_ecg );
continue ;};if _cdgd ==nil {_gcbd ,_bccb :=_gad .GetName (_fcd .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _bccb {switch _gcbd .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_cdgd =_fa .NewPdfColorspaceDeviceGray ();
_cfb .BitsPerComponent =1;};};};switch _dbac :=_cdgd .(type ){case *_fa .PdfColorspaceDeviceRGB :_cfb .ColorComponents =3;case *_fa .PdfColorspaceDeviceGray :_cfb .ColorComponents =1;default:_f .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_dbac );
continue ;};_cfgb =append (_cfgb ,_cfb );};return _cfgb ;};func _fe (_ged []_gad .PdfObject )(_gfd map[*_gad .PdfObjectStream ]struct{},_ggd error ){_gfd =map[*_gad .PdfObjectStream ]struct{}{};_fg :=map[*_fa .PdfFont ]struct{}{};_cebg :=_dad (_ged );for _ ,_bfe :=range _cebg ._efd {_gec ,_bda :=_gad .GetDict (_bfe .PdfObject );
if !_bda {continue ;};_fec ,_bda :=_gad .GetDict (_gec .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bda {continue ;};_ebf ,_ :=_bceg (_gec .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gece ,_eab :=_fa .NewPdfPageResourcesFromDict (_fec );
if _eab !=nil {return nil ,_eab ;};_bfb :=[]content {{_dfa :_ebf ,_feg :_gece }};_gadg :=_cgd (_gec .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _gadg !=nil {_bfb =append (_bfb ,_gadg ...);};for _ ,_da :=range _bfb {_fad ,_bac :=_ga .NewFromContents (_da ._dfa ,_da ._feg );
if _bac !=nil {return nil ,_bac ;};_aa ,_ ,_ ,_bac :=_fad .ExtractPageText ();if _bac !=nil {return nil ,_bac ;};for _ ,_fda :=range _aa .Marks ().Elements (){if _fda .Font ==nil {continue ;};if _ ,_afb :=_fg [_fda .Font ];!_afb {_fg [_fda .Font ]=struct{}{};
};};};};_gfba :=map[*_gad .PdfObjectStream ][]*_fa .PdfFont {};for _eeda :=range _fg {_ebb :=_eeda .FontDescriptor ();if _ebb ==nil ||_ebb .FontFile2 ==nil {continue ;};_bgbe ,_dgg :=_gad .GetStream (_ebb .FontFile2 );if !_dgg {continue ;};_gfba [_bgbe ]=append (_gfba [_bgbe ],_eeda );
};for _eba :=range _gfba {var _acg []rune ;var _fdg []_ee .GlyphIndex ;for _ ,_bcb :=range _gfba [_eba ]{switch _fbe :=_bcb .Encoder ().(type ){case *_ge .IdentityEncoder :_bfg :=_fbe .RegisteredRunes ();_dbb :=make ([]_ee .GlyphIndex ,len (_bfg ));for _cbg ,_fed :=range _bfg {_dbb [_cbg ]=_ee .GlyphIndex (_fed );
};_fdg =append (_fdg ,_dbb ...);case *_ge .TrueTypeFontEncoder :_feba :=_fbe .RegisteredRunes ();_acg =append (_acg ,_feba ...);case _ge .SimpleEncoder :_eccb :=_fbe .Charcodes ();for _ ,_eff :=range _eccb {_cbgd ,_gcf :=_fbe .CharcodeToRune (_eff );if !_gcf {_f .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_eff );
continue ;};_acg =append (_acg ,_cbgd );};};};_ggd =_dgd (_eba ,_acg ,_fdg );if _ggd !=nil {_f .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ggd );
return nil ,_ggd ;};_gfd [_eba ]=struct{}{};};return _gfd ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};type imageModifications struct{Scale float64 ;Encoding _gad .StreamEncoder ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eega *ObjectStreams )Optimize (objects []_gad .PdfObject )(_fbeb []_gad .PdfObject ,_ccb error ){_bge :=&_gad .PdfObjectStreams {};_fgcg :=make ([]_gad .PdfObject ,0,len (objects ));for _ ,_cafe :=range objects {if _fcf ,_ffge :=_cafe .(*_gad .PdfIndirectObject );
_ffge &&_fcf .GenerationNumber ==0{_bge .Append (_cafe );}else {_fgcg =append (_fgcg ,_cafe );};};if _bge .Len ()==0{return _fgcg ,nil ;};_fbeb =make ([]_gad .PdfObject ,0,len (_fgcg )+_bge .Len ()+1);if _bge .Len ()> 1{_fbeb =append (_fbeb ,_bge );};_fbeb =append (_fbeb ,_bge .Elements ()...);
_fbeb =append (_fbeb ,_fgcg ...);return _fbeb ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};