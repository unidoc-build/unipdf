//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_aa "bytes";_ed "crypto/md5";_f "errors";_eb "fmt";_ee "github.com/unidoc/unipdf/v3/common";_de "github.com/unidoc/unipdf/v3/contentstream";_e "github.com/unidoc/unipdf/v3/core";_a "github.com/unidoc/unipdf/v3/extractor";_bg "github.com/unidoc/unipdf/v3/internal/textencoding";_ebf "github.com/unidoc/unipdf/v3/model";_d "github.com/unidoc/unitype";_eg "golang.org/x/image/draw";_g "image";_ec "math";);func _daag (_cfg _e .PdfObject )(_cbbb string ,_acc []_e .PdfObject ){var _baba _aa .Buffer ;switch _cdfd :=_cfg .(type ){case *_e .PdfIndirectObject :_acc =append (_acc ,_cdfd );_cfg =_cdfd .PdfObject ;};switch _gfd :=_cfg .(type ){case *_e .PdfObjectStream :if _gbag ,_geg :=_e .DecodeStream (_gfd );_geg ==nil {_baba .Write (_gbag );_acc =append (_acc ,_gfd );};case *_e .PdfObjectArray :for _ ,_gbfe :=range _gfd .Elements (){switch _ebcf :=_gbfe .(type ){case *_e .PdfObjectStream :if _fcde ,_bdg :=_e .DecodeStream (_ebcf );_bdg ==nil {_baba .Write (_fcde );_acc =append (_acc ,_ebcf );};};};};return _baba .String (),_acc ;};func _fgad (_fabe []_e .PdfObject )[]*imageInfo {_fge :=_e .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_aad :=make (map[*_e .PdfObjectStream ]struct{});var _babe error ;var _cegc []*imageInfo ;for _ ,_cafa :=range _fabe {_fea ,_fdg :=_e .GetStream (_cafa );if !_fdg {continue ;};if _ ,_bdbc :=_aad [_fea ];_bdbc {continue ;};_aad [_fea ]=struct{}{};_aacf :=_fea .PdfObjectDictionary .Get (_fge );_fdb ,_fdg :=_e .GetName (_aacf );if !_fdg ||string (*_fdb )!="\u0049\u006d\u0061g\u0065"{continue ;};_fbc :=&imageInfo {BitsPerComponent :8,Stream :_fea };if _fbc .ColorSpace ,_babe =_ebf .DetermineColorspaceNameFromPdfObject (_fea .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_babe !=nil {_ee .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_babe );continue ;};if _ffg ,_ddf :=_e .GetIntVal (_fea .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_ddf {_fbc .BitsPerComponent =_ffg ;};if _ddc ,_cbdb :=_e .GetIntVal (_fea .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_cbdb {_fbc .Width =_ddc ;};if _dcfd ,_ddag :=_e .GetIntVal (_fea .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_ddag {_fbc .Height =_dcfd ;};switch _fbc .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fbc .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fbc .ColorComponents =1;default:_ee .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_fbc .ColorSpace );continue ;};_cegc =append (_cegc ,_fbc );};return _cegc ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eedb *CombineDuplicateStreams )Optimize (objects []_e .PdfObject )(_gbb []_e .PdfObject ,_cad error ){_fgc :=make (map[_e .PdfObject ]_e .PdfObject );_gcg :=make (map[_e .PdfObject ]struct{});_cfd :=make (map[string ][]*_e .PdfObjectStream );for _ ,_bcb :=range objects {if _add ,_faf :=_bcb .(*_e .PdfObjectStream );_faf {_bgcc :=_ed .New ();_bgcc .Write (_add .Stream );_abf :=string (_bgcc .Sum (nil ));_cfd [_abf ]=append (_cfd [_abf ],_add );};};for _ ,_abb :=range _cfd {if len (_abb )< 2{continue ;};_aeee :=_abb [0];for _ddad :=1;_ddad < len (_abb );_ddad ++{_efcc :=_abb [_ddad ];_fgc [_efcc ]=_aeee ;_gcg [_efcc ]=struct{}{};};};_gbb =make ([]_e .PdfObject ,0,len (objects )-len (_gcg ));for _ ,_fce :=range objects {if _ ,_caee :=_gcg [_fce ];_caee {continue ;};_gbb =append (_gbb ,_fce );};_fddd (_gbb ,_fgc );return _gbb ,nil ;};

// Append appends optimizers to the chain.
func (_egd *Chain )Append (optimizers ..._ebf .Optimizer ){_egd ._bc =append (_egd ._bc ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fa *CleanContentstream )Optimize (objects []_e .PdfObject )(_fd []_e .PdfObject ,_edd error ){_ac :=map[*_e .PdfObjectStream ]struct{}{};var _ebfd []*_e .PdfObjectStream ;_dfg :=func (_bce *_e .PdfObjectStream ){if _ ,_fg :=_ac [_bce ];!_fg {_ac [_bce ]=struct{}{};_ebfd =append (_ebfd ,_bce );};};for _ ,_ba :=range objects {switch _cb :=_ba .(type ){case *_e .PdfIndirectObject :switch _dd :=_cb .PdfObject .(type ){case *_e .PdfObjectDictionary :if _abg ,_bae :=_e .GetName (_dd .Get ("\u0054\u0079\u0070\u0065"));!_bae ||_abg .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _af ,_cd :=_e .GetStream (_dd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_cd {_dfg (_af );}else if _gg ,_ae :=_e .GetArray (_dd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ae {for _ ,_aef :=range _gg .Elements (){if _dca ,_acg :=_e .GetStream (_aef );_acg {_dfg (_dca );};};};};case *_e .PdfObjectStream :if _cbc ,_ggf :=_e .GetName (_cb .Get ("\u0054\u0079\u0070\u0065"));!_ggf ||_cbc .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _ef ,_cg :=_e .GetName (_cb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_cg ||_ef .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_dfg (_cb );};};for _ ,_ffa :=range _ebfd {_edd =_df (_ffa );if _edd !=nil {return nil ,_edd ;};};return objects ,nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};func _cgab (_adgg []_e .PdfObject ){for _abe ,_dddb :=range _adgg {switch _afc :=_dddb .(type ){case *_e .PdfIndirectObject :_afc .ObjectNumber =int64 (_abe +1);_afc .GenerationNumber =0;case *_e .PdfObjectStream :_afc .ObjectNumber =int64 (_abe +1);_afc .GenerationNumber =0;case *_e .PdfObjectStreams :_afc .ObjectNumber =int64 (_abe +1);_afc .GenerationNumber =0;};};};type imageInfo struct{ColorSpace _e .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_e .PdfObjectStream ;PPI float64 ;};func _aaa (_fad *_e .PdfObjectStream ,_ede float64 )error {_fdd ,_bdeb :=_ebf .NewXObjectImageFromStream (_fad );if _bdeb !=nil {return _bdeb ;};_bad ,_bdeb :=_fdd .ToImage ();if _bdeb !=nil {return _bdeb ;};_caeeb ,_bdeb :=_bad .ToGoImage ();if _bdeb !=nil {return _bdeb ;};_aca :=int (_ec .RoundToEven (float64 (_bad .Width )*_ede ));_ege :=int (_ec .RoundToEven (float64 (_bad .Height )*_ede ));_agb :=_g .Rect (0,0,_aca ,_ege );var _fbb _eg .Image ;var _daf func (_g .Image )(*_ebf .Image ,error );switch _fdd .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fbb =_g .NewRGBA (_agb );_daf =_ebf .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fbb =_g .NewGray (_agb );_daf =_ebf .ImageHandling .NewGrayImageFromGoImage ;default:return _eb .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_fdd .ColorSpace .String ());};_eg .CatmullRom .Scale (_fbb ,_fbb .Bounds (),_caeeb ,_caeeb .Bounds (),_eg .Over ,&_eg .Options {});if _bad ,_bdeb =_daf (_fbb );_bdeb !=nil {return _bdeb ;};_eged :=_e .MakeDict ();_eged .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_e .MakeInteger (100));_eged .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_e .MakeInteger (1));_fdd .Filter .UpdateParams (_eged );if _bdeb =_fdd .SetImage (_bad ,nil );_bdeb !=nil {return _bdeb ;};_fdd .ToPdfObject ();return nil ;};func _afb (_ea []_e .PdfObject )(_gcb map[*_e .PdfObjectStream ]struct{},_bb error ){_gcb =map[*_e .PdfObjectStream ]struct{}{};_ca :=map[*_ebf .PdfFont ]struct{}{};_dbf :=_cffa (_ea );for _ ,_cgd :=range _dbf ._dac {_ffae ,_dcac :=_e .GetDict (_cgd .PdfObject );if !_dcac {continue ;};_fde ,_dcac :=_e .GetDict (_ffae .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_dcac {continue ;};_bgf ,_ :=_daag (_ffae .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gd ,_fe :=_ebf .NewPdfPageResourcesFromDict (_fde );if _fe !=nil {return nil ,_fe ;};_deg :=[]content {{_egc :_bgf ,_ebd :_gd }};_cfe :=_fag (_ffae .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _cfe !=nil {_deg =append (_deg ,_cfe ...);};for _ ,_gfa :=range _deg {_fgb ,_aacd :=_a .NewFromContents (_gfa ._egc ,_gfa ._ebd );if _aacd !=nil {return nil ,_aacd ;};_efe ,_ ,_ ,_aacd :=_fgb .ExtractPageText ();if _aacd !=nil {return nil ,_aacd ;};for _ ,_gb :=range _efe .Marks ().Elements (){if _gb .Font ==nil {continue ;};if _ ,_cff :=_ca [_gb .Font ];!_cff {_ca [_gb .Font ]=struct{}{};};};};};_gfg :=map[*_e .PdfObjectStream ][]*_ebf .PdfFont {};for _eef :=range _ca {_bab :=_eef .FontDescriptor ();if _bab ==nil ||_bab .FontFile2 ==nil {continue ;};_baa ,_cea :=_e .GetStream (_bab .FontFile2 );if !_cea {continue ;};_gfg [_baa ]=append (_gfg [_baa ],_eef );};for _efc :=range _gfg {var _ecf []rune ;var _dad []_d .GlyphIndex ;for _ ,_beb :=range _gfg [_efc ]{switch _cgdd :=_beb .Encoder ().(type ){case *_bg .IdentityEncoder :_bbg :=_cgdd .RegisteredRunes ();_cdd :=make ([]_d .GlyphIndex ,len (_bbg ));for _gab ,_abc :=range _bbg {_cdd [_gab ]=_d .GlyphIndex (_abc );};_dad =append (_dad ,_cdd ...);case *_bg .TrueTypeFontEncoder :_ecff :=_cgdd .RegisteredRunes ();_ecf =append (_ecf ,_ecff ...);case _bg .SimpleEncoder :_bef :=_cgdd .Charcodes ();for _ ,_dg :=range _bef {_ag ,_gdg :=_cgdd .CharcodeToRune (_dg );if !_gdg {_ee .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_dg );continue ;};_ecf =append (_ecf ,_ag );};};};_bb =_dag (_efc ,_ecf ,_dad );if _bb !=nil {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_bb );return nil ,_bb ;};_gcb [_efc ]=struct{}{};};return _gcb ,nil ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dec *CombineDuplicateDirectObjects )Optimize (objects []_e .PdfObject )(_agd []_e .PdfObject ,_cbcg error ){_cgab (objects );_baee :=make (map[string ][]*_e .PdfObjectDictionary );var _eed func (_ceg *_e .PdfObjectDictionary );_eed =func (_gec *_e .PdfObjectDictionary ){for _ ,_bebb :=range _gec .Keys (){_aacb :=_gec .Get (_bebb );if _gae ,_abdd :=_aacb .(*_e .PdfObjectDictionary );_abdd {_bdb :=_ed .New ();_bdb .Write ([]byte (_gae .WriteString ()));_bfa :=string (_bdb .Sum (nil ));_baee [_bfa ]=append (_baee [_bfa ],_gae );_eed (_gae );};};};for _ ,_adba :=range objects {_ada ,_fcg :=_adba .(*_e .PdfIndirectObject );if !_fcg {continue ;};if _bde ,_gfag :=_ada .PdfObject .(*_e .PdfObjectDictionary );_gfag {_eed (_bde );};};_fab :=make ([]_e .PdfObject ,0,len (_baee ));_bge :=make (map[_e .PdfObject ]_e .PdfObject );for _ ,_dgd :=range _baee {if len (_dgd )< 2{continue ;};_fgf :=_e .MakeDict ();_fgf .Merge (_dgd [0]);_acb :=_e .MakeIndirectObject (_fgf );_fab =append (_fab ,_acb );for _eff :=0;_eff < len (_dgd );_eff ++{_bebc :=_dgd [_eff ];_bge [_bebc ]=_acb ;};};_agd =make ([]_e .PdfObject ,len (objects ));copy (_agd ,objects );_agd =append (_fab ,_agd ...);_fddd (_agd ,_bge );return _agd ,nil ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bada *ImagePPI )Optimize (objects []_e .PdfObject )(_fbcd []_e .PdfObject ,_cega error ){if _bada .ImageUpperPPI <=0{return objects ,nil ;};_aeaf :=_fgad (objects );if len (_aeaf )==0{return objects ,nil ;};_fbea :=make (map[_e .PdfObject ]struct{});for _ ,_aff :=range _aeaf {_afd :=_aff .Stream .PdfObjectDictionary .Get (_e .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_fbea [_afd ]=struct{}{};};_ccf :=make (map[*_e .PdfObjectStream ]*imageInfo );for _ ,_dab :=range _aeaf {_ccf [_dab .Stream ]=_dab ;};var _ccff *_e .PdfObjectDictionary ;for _ ,_ddbc :=range objects {if _dbcg ,_cdf :=_e .GetDict (_ddbc );_ccff ==nil &&_cdf {if _edge ,_ffd :=_e .GetName (_dbcg .Get (_e .PdfObjectName ("\u0054\u0079\u0070\u0065")));_ffd &&*_edge =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_ccff =_dbcg ;};};};if _ccff ==nil {return objects ,nil ;};_bdfa ,_gadg :=_e .GetDict (_ccff .Get (_e .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_gadg {return objects ,nil ;};_dfgb ,_ebbg :=_e .GetArray (_bdfa .Get (_e .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_ebbg {return objects ,nil ;};_bfd :=make (map[string ]*imageInfo );for _ ,_fgaa :=range _dfgb .Elements (){_fdeb ,_bced :=_e .GetDict (_fgaa );if !_bced {continue ;};_ebc ,_ceb :=_e .GetArray (_fdeb .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_ceb {continue ;};_gebdf ,_ceab :=_e .GetDict (_fdeb .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ceab {continue ;};_faef ,_bfgf :=_e .GetDict (_gebdf .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_bfgf {continue ;};_gcfac :=_faef .Keys ();for _ ,_cee :=range _gcfac {if _ddba ,_gdb :=_e .GetStream (_faef .Get (_cee ));_gdb {if _gda ,_addf :=_ccf [_ddba ];_addf {_bfd [string (_cee )]=_gda ;};};};for _ ,_adbg :=range _ebc .Elements (){if _cbfc ,_aaaf :=_e .GetStream (_adbg );_aaaf {_cadc ,_agg :=_e .NewEncoderFromStream (_cbfc );if _agg !=nil {return nil ,_agg ;};_abdc ,_agg :=_cadc .DecodeStream (_cbfc );if _agg !=nil {return nil ,_agg ;};_edec :=_de .NewContentStreamParser (string (_abdc ));_fgd ,_agg :=_edec .Parse ();if _agg !=nil {return nil ,_agg ;};_bbgf ,_aed :=1.0,1.0;for _ ,_aefa :=range *_fgd {if _aefa .Operand =="\u0051"{_bbgf ,_aed =1.0,1.0;};if _aefa .Operand =="\u0063\u006d"&&len (_aefa .Params )==6{if _bea ,_effg :=_e .GetFloatVal (_aefa .Params [0]);_effg {_bbgf =_bbgf *_bea ;};if _affg ,_dgdd :=_e .GetFloatVal (_aefa .Params [3]);_dgdd {_aed =_aed *_affg ;};if _fceb ,_fgbe :=_e .GetIntVal (_aefa .Params [0]);_fgbe {_bbgf =_bbgf *float64 (_fceb );};if _cegb ,_edgg :=_e .GetIntVal (_aefa .Params [3]);_edgg {_aed =_aed *float64 (_cegb );};};if _aefa .Operand =="\u0044\u006f"&&len (_aefa .Params )==1{_caeg ,_bfc :=_e .GetName (_aefa .Params [0]);if !_bfc {continue ;};if _effd ,_fgda :=_bfd [string (*_caeg )];_fgda {_ecg ,_fff :=_bbgf /72.0,_aed /72.0;_eec ,_afdf :=float64 (_effd .Width )/_ecg ,float64 (_effd .Height )/_fff ;if _ecg ==0||_fff ==0{_eec =72.0;_afdf =72.0;};_effd .PPI =_ec .Max (_effd .PPI ,_eec );_effd .PPI =_ec .Max (_effd .PPI ,_afdf );};};};};};};for _ ,_eddd :=range _aeaf {if _ ,_gdge :=_fbea [_eddd .Stream ];_gdge {continue ;};if _eddd .PPI <=_bada .ImageUpperPPI {continue ;};_cbe :=_bada .ImageUpperPPI /_eddd .PPI ;if _fcggc :=_aaa (_eddd .Stream ,_cbe );_fcggc !=nil {_ee .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_fcggc );}else {if _feg ,_fbcf :=_e .GetStream (_eddd .Stream .PdfObjectDictionary .Get (_e .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_fbcf {if _debd :=_aaa (_feg ,_cbe );_debd !=nil {return nil ,_debd ;};};};};return objects ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};func _df (_cc *_e .PdfObjectStream )error {_da ,_gef :=_e .DecodeStream (_cc );if _gef !=nil {return _gef ;};_cf :=_de .NewContentStreamParser (string (_da ));_be ,_gef :=_cf .Parse ();if _gef !=nil {return _gef ;};_be =_bcc (_be );_ff :=_be .Bytes ();if len (_ff )>=len (_da ){return nil ;};_fb ,_gef :=_e .MakeStream (_be .Bytes (),_e .NewFlateEncoder ());if _gef !=nil {return _gef ;};_cc .Stream =_fb .Stream ;_cc .Merge (_fb .PdfObjectDictionary );return nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_bee :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_bee .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_bee .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ggac :=new (ImagePPI );_ggac .ImageUpperPPI =options .ImageUpperPPI ;_bee .Append (_ggac );};if options .ImageQuality > 0{_bcd :=new (Image );_bcd .ImageQuality =options .ImageQuality ;_bee .Append (_bcd );};if options .CombineDuplicateDirectObjects {_bee .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_bee .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_bee .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_bee .Append (new (ObjectStreams ));};if options .CompressStreams {_bee .Append (new (CompressStreams ));};return _bee ;};func _dag (_bga *_e .PdfObjectStream ,_dfb []rune ,_ad []_d .GlyphIndex )error {_bga ,_ebb :=_e .GetStream (_bga );if !_ebb {_ee .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _f .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gce ,_feb :=_e .DecodeStream (_bga );if _feb !=nil {_ee .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_feb );return _feb ;};_dbff ,_feb :=_d .Parse (_aa .NewReader (_gce ));if _feb !=nil {_ee .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bga .Stream ));return _feb ;};_edb :=_ad ;if len (_dfb )> 0{_geb :=_dbff .LookupRunes (_dfb );_edb =append (_edb ,_geb ...);};_dbff ,_feb =_dbff .SubsetKeepIndices (_edb );if _feb !=nil {_ee .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_feb );return _feb ;};var _gca _aa .Buffer ;_feb =_dbff .Write (&_gca );if _feb !=nil {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_feb );return _feb ;};if _gca .Len ()> len (_gce ){_ee .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_dcf ,_feb :=_e .MakeStream (_gca .Bytes (),_e .NewFlateEncoder ());if _feb !=nil {_ee .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_feb );return _feb ;};*_bga =*_dcf ;_bga .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_e .MakeInteger (int64 (_gca .Len ())));return nil ;};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};type objectStructure struct{_eeed *_e .PdfObjectDictionary ;_fcfe *_e .PdfObjectDictionary ;_dac []*_e .PdfIndirectObject ;};func _cffa (_dcb []_e .PdfObject )objectStructure {_ddbac :=objectStructure {};_eea :=false ;for _ ,_fbbf :=range _dcb {switch _fffd :=_fbbf .(type ){case *_e .PdfIndirectObject :_bba ,_eecg :=_e .GetDict (_fffd );if !_eecg {continue ;};_aace ,_eecg :=_e .GetName (_bba .Get ("\u0054\u0079\u0070\u0065"));if !_eecg {continue ;};switch _aace .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_ddbac ._eeed =_bba ;_eea =true ;};};if _eea {break ;};};if !_eea {return _ddbac ;};_fcfeg ,_fged :=_e .GetDict (_ddbac ._eeed .Get ("\u0050\u0061\u0067e\u0073"));if !_fged {return _ddbac ;};_ddbac ._fcfe =_fcfeg ;_daa ,_fged :=_e .GetArray (_fcfeg .Get ("\u004b\u0069\u0064\u0073"));if !_fged {return _ddbac ;};for _ ,_fegd :=range _daa .Elements (){_fcdd ,_fdef :=_e .GetIndirect (_fegd );if !_fdef {break ;};_ddbac ._dac =append (_ddbac ._dac ,_fcdd );};return _ddbac ;};func _fag (_cbf _e .PdfObject )[]content {if _cbf ==nil {return nil ;};_ecb ,_bbf :=_e .GetArray (_cbf );if !_bbf {_ee .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _cbcd []content ;for _ ,_fga :=range _ecb .Elements (){_fda ,_ddg :=_e .GetDict (_fga );if !_ddg {_ee .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_bdf ,_ddg :=_e .GetDict (_fda .Get ("\u0041\u0050"));if !_ddg {_ee .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_bbc :=_e .TraceToDirectObject (_bdf .Get ("\u004e"));if _bbc ==nil {_ee .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _efcb *_e .PdfObjectStream ;switch _adb :=_bbc .(type ){case *_e .PdfObjectDictionary :_gcff ,_cgg :=_e .GetName (_fda .Get ("\u0041\u0053"));if !_cgg {_ee .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_efcb ,_cgg =_e .GetStream (_adb .Get (*_gcff ));if !_cgg {_ee .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_e .PdfObjectStream :_efcb =_adb ;};if _efcb ==nil {_ee .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_gff ,_efb :=_ebf .NewXObjectFormFromStream (_efcb );if _efb !=nil {_ee .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_efb );continue ;};_fbe ,_efb :=_gff .GetContentStream ();if _efb !=nil {_ee .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_efb );continue ;};_cbcd =append (_cbcd ,content {_egc :string (_fbe ),_ebd :_gff .Resources });};return _cbcd ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_aagb *Image )Optimize (objects []_e .PdfObject )(_fggc []_e .PdfObject ,_faa error ){if _aagb .ImageQuality <=0{return objects ,nil ;};_fcdc :=_fgad (objects );if len (_fcdc )==0{return objects ,nil ;};_eab :=make (map[_e .PdfObject ]_e .PdfObject );_dba :=make (map[_e .PdfObject ]struct{});for _ ,_cabc :=range _fcdc {_fcb :=_cabc .Stream .PdfObjectDictionary .Get (_e .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_dba [_fcb ]=struct{}{};};for _gcdb ,_eeg :=range _fcdc {_bfb :=_eeg .Stream ;if _ ,_cge :=_dba [_bfb ];_cge {continue ;};_ccbe ,_gbc :=_e .NewEncoderFromStream (_bfb );if _gbc !=nil {_ee .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_cbdbc ,_gbc :=_ccbe .DecodeStream (_bfb );if _gbc !=nil {_ee .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_ebda :=_e .NewDCTEncoder ();_ebda .ColorComponents =_eeg .ColorComponents ;_ebda .Quality =_aagb .ImageQuality ;_ebda .BitsPerComponent =_eeg .BitsPerComponent ;_ebda .Width =_eeg .Width ;_ebda .Height =_eeg .Height ;_eba ,_gbc :=_ebda .EncodeBytes (_cbdbc );if _gbc !=nil {_ee .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gbc );return nil ,_gbc ;};var _dgdg _e .StreamEncoder ;_dgdg =_ebda ;{_gea :=_e .NewFlateEncoder ();_fee :=_e .NewMultiEncoder ();_fee .AddEncoder (_gea );_fee .AddEncoder (_ebda );_bdfd ,_bgab :=_fee .EncodeBytes (_cbdbc );if _bgab !=nil {return nil ,_bgab ;};if len (_bdfd )< len (_eba ){_ee .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_eba ),len (_bdfd ),len (_bfb .Stream ));_eba =_bdfd ;_dgdg =_fee ;};};_fcf :=len (_bfb .Stream );if _fcf < len (_eba ){continue ;};_fed :=&_e .PdfObjectStream {Stream :_eba };_fed .PdfObjectReference =_bfb .PdfObjectReference ;_fed .PdfObjectDictionary =_e .MakeDict ();_fed .Merge (_bfb .PdfObjectDictionary );_fed .Merge (_dgdg .MakeStreamDict ());_fed .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_e .MakeInteger (int64 (len (_eba ))));_eab [_bfb ]=_fed ;_fcdc [_gcdb ].Stream =_fed ;};_fggc =make ([]_e .PdfObject ,len (objects ));copy (_fggc ,objects );_fddd (_fggc ,_eab );return _fggc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfbf *CleanFonts )Optimize (objects []_e .PdfObject )(_aee []_e .PdfObject ,_gcf error ){var _gabf map[*_e .PdfObjectStream ]struct{};if _dfbf .Subset {var _ced error ;_gabf ,_ced =_afb (objects );if _ced !=nil {return nil ,_ced ;};};for _ ,_edg :=range objects {_fcd ,_cae :=_e .GetStream (_edg );if !_cae {continue ;};if _ ,_dda :=_gabf [_fcd ];_dda {continue ;};_bfe ,_dbc :=_e .NewEncoderFromStream (_fcd );if _dbc !=nil {_ee .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_dbc );continue ;};_gga ,_dbc :=_bfe .DecodeStream (_fcd );if _dbc !=nil {_ee .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_dbc );continue ;};if len (_gga )< 4{continue ;};_ggb :=string (_gga [:4]);if _ggb =="\u004f\u0054\u0054\u004f"{continue ;};if _ggb !="\u0000\u0001\u0000\u0000"&&_ggb !="\u0074\u0072\u0075\u0065"{continue ;};_ddb ,_dbc :=_d .Parse (_aa .NewReader (_gga ));if _dbc !=nil {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dbc );continue ;};_dbc =_ddb .Optimize ();if _dbc !=nil {continue ;};var _ebg _aa .Buffer ;_dbc =_ddb .Write (&_ebg );if _dbc !=nil {_ee .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_dbc );continue ;};if _ebg .Len ()> len (_gga ){_ee .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_eda ,_dbc :=_e .MakeStream (_ebg .Bytes (),_e .NewFlateEncoder ());if _dbc !=nil {continue ;};*_fcd =*_eda ;_fcd .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_e .MakeInteger (int64 (_ebg .Len ())));};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_decf *CompressStreams )Optimize (objects []_e .PdfObject )(_dcd []_e .PdfObject ,_caa error ){_dcd =make ([]_e .PdfObject ,len (objects ));copy (_dcd ,objects );for _ ,_ebff :=range objects {_ffb ,_aag :=_e .GetStream (_ebff );if !_aag {continue ;};if _ecc :=_ffb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_ecc !=nil {if _ ,_gcfa :=_e .GetName (_ecc );_gcfa {continue ;};if _cffc ,_cba :=_e .GetArray (_ecc );_cba &&_cffc .Len ()> 0{continue ;};};_gcd :=_e .NewFlateEncoder ();var _cggc []byte ;_cggc ,_caa =_gcd .EncodeBytes (_ffb .Stream );if _caa !=nil {return _dcd ,_caa ;};_gad :=_gcd .MakeStreamDict ();if len (_cggc )+len (_gad .WriteString ())< len (_ffb .Stream ){_ffb .Stream =_cggc ;_ffb .PdfObjectDictionary .Merge (_gad );_ffb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_e .MakeInteger (int64 (len (_ffb .Stream ))));};};return _dcd ,nil ;};type content struct{_egc string ;_ebd *_ebf .PdfPageResources ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};func _bcc (_ece *_de .ContentStreamOperations )*_de .ContentStreamOperations {if _ece ==nil {return nil ;};_gf :=_de .ContentStreamOperations {};for _ ,_c :=range *_ece {switch _c .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_c .Params )==6{if _dc ,_ce :=_e .GetNumbersAsFloat (_c .Params );_ce ==nil {if _dc [0]==1&&_dc [1]==0&&_dc [2]==0&&_dc [3]==1{_c =&_de .ContentStreamOperation {Params :[]_e .PdfObject {_c .Params [4],_c .Params [5]},Operand :"\u0054\u0064"};};};};};_gf =append (_gf ,_c );};return &_gf ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_bbcg *CombineIdenticalIndirectObjects )Optimize (objects []_e .PdfObject )(_gfc []_e .PdfObject ,_bfec error ){_cgab (objects );_edc :=make (map[_e .PdfObject ]_e .PdfObject );_ddd :=make (map[_e .PdfObject ]struct{});_gba :=make (map[string ][]*_e .PdfIndirectObject );for _ ,_eae :=range objects {_ddda ,_fdaa :=_eae .(*_e .PdfIndirectObject );if !_fdaa {continue ;};if _fcgg ,_ecfb :=_ddda .PdfObject .(*_e .PdfObjectDictionary );_ecfb {if _fcc ,_fba :=_fcgg .Get ("\u0054\u0079\u0070\u0065").(*_e .PdfObjectName );_fba &&*_fcc =="\u0050\u0061\u0067\u0065"{continue ;};_cga :=_ed .New ();_cga .Write ([]byte (_fcgg .WriteString ()));_ged :=string (_cga .Sum (nil ));_gba [_ged ]=append (_gba [_ged ],_ddda );};};for _ ,_acga :=range _gba {if len (_acga )< 2{continue ;};_afg :=_acga [0];for _ggad :=1;_ggad < len (_acga );_ggad ++{_acf :=_acga [_ggad ];_edc [_acf ]=_afg ;_ddd [_acf ]=struct{}{};};};_gfc =make ([]_e .PdfObject ,0,len (objects )-len (_ddd ));for _ ,_bbgc :=range objects {if _ ,_fae :=_ddd [_bbgc ];_fae {continue ;};_gfc =append (_gfc ,_bbgc );};_fddd (_gfc ,_edc );return _gfc ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gdc *ObjectStreams )Optimize (objects []_e .PdfObject )(_ebe []_e .PdfObject ,_fec error ){_fdaag :=&_e .PdfObjectStreams {};_cgb :=make ([]_e .PdfObject ,0,len (objects ));for _ ,_cfc :=range objects {if _acab ,_bff :=_cfc .(*_e .PdfIndirectObject );_bff &&_acab .GenerationNumber ==0{_fdaag .Append (_cfc );}else {_cgb =append (_cgb ,_cfc );};};if _fdaag .Len ()==0{return _cgb ,nil ;};_ebe =make ([]_e .PdfObject ,0,len (_cgb )+_fdaag .Len ()+1);if _fdaag .Len ()> 1{_ebe =append (_ebe ,_fdaag );};_ebe =append (_ebe ,_fdaag .Elements ()...);_ebe =append (_ebe ,_cgb ...);return _ebe ,nil ;};func _fddd (_ddcb []_e .PdfObject ,_gde map[_e .PdfObject ]_e .PdfObject ){if len (_gde )==0{return ;};for _fecb ,_adg :=range _ddcb {if _ffbe ,_gefg :=_gde [_adg ];_gefg {_ddcb [_fecb ]=_ffbe ;continue ;};_gde [_adg ]=_adg ;switch _dgdc :=_adg .(type ){case *_e .PdfObjectArray :_bdaa :=make ([]_e .PdfObject ,_dgdc .Len ());copy (_bdaa ,_dgdc .Elements ());_fddd (_bdaa ,_gde );for _faae ,_cgec :=range _bdaa {_dgdc .Set (_faae ,_cgec );};case *_e .PdfObjectStreams :_fddd (_dgdc .Elements (),_gde );case *_e .PdfObjectStream :_cbbe :=[]_e .PdfObject {_dgdc .PdfObjectDictionary };_fddd (_cbbe ,_gde );_dgdc .PdfObjectDictionary =_cbbe [0].(*_e .PdfObjectDictionary );case *_e .PdfObjectDictionary :_eaef :=_dgdc .Keys ();_bdd :=make ([]_e .PdfObject ,len (_eaef ));for _dgb ,_cgf :=range _eaef {_bdd [_dgb ]=_dgdc .Get (_cgf );};_fddd (_bdd ,_gde );for _adf ,_abdda :=range _eaef {_dgdc .Set (_abdda ,_bdd [_adf ]);};case *_e .PdfIndirectObject :_ebbd :=[]_e .PdfObject {_dgdc .PdfObject };_fddd (_ebbd ,_gde );_dgdc .PdfObject =_ebbd [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_db *Chain )Optimize (objects []_e .PdfObject )(_fc []_e .PdfObject ,_ab error ){_fc =objects ;for _ ,_gc :=range _db ._bc {_fc ,_ab =_gc .Optimize (_fc );if _ab !=nil {return _fc ,_ab ;};};return _fc ,nil ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_bc []_ebf .Optimizer };

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};