//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_aec "bytes";_d "crypto/md5";_de "errors";_a "github.com/unidoc/unipdf/v3/common";_bg "github.com/unidoc/unipdf/v3/contentstream";_ee "github.com/unidoc/unipdf/v3/core";_e "github.com/unidoc/unipdf/v3/extractor";_bb "github.com/unidoc/unipdf/v3/internal/imageutil";
_ag "github.com/unidoc/unipdf/v3/internal/textencoding";_fd "github.com/unidoc/unipdf/v3/model";_bbb "github.com/unidoc/unitype";_f "golang.org/x/image/draw";_ae "math";);

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_c []_fd .Optimizer };

// New creates a optimizers chain from options.
func New (options Options )*Chain {_egd :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_egd .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_egd .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_ddb :=new (ImagePPI );
_ddb .ImageUpperPPI =options .ImageUpperPPI ;_egd .Append (_ddb );};if options .ImageQuality > 0{_dbb :=new (Image );_dbb .ImageQuality =options .ImageQuality ;_egd .Append (_dbb );};if options .CombineDuplicateDirectObjects {_egd .Append (new (CombineDuplicateDirectObjects ));
};if options .CombineDuplicateStreams {_egd .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_egd .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_egd .Append (new (ObjectStreams ));
};if options .CompressStreams {_egd .Append (new (CompressStreams ));};return _egd ;};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};func _ccd (_bdf _ee .PdfObject )(_cbdd string ,_gfga []_ee .PdfObject ){var _ddbg _aec .Buffer ;switch _bfba :=_bdf .(type ){case *_ee .PdfIndirectObject :_gfga =append (_gfga ,_bfba );_bdf =_bfba .PdfObject ;};switch _gad :=_bdf .(type ){case *_ee .PdfObjectStream :if _ebgf ,_abga :=_ee .DecodeStream (_gad );
_abga ==nil {_ddbg .Write (_ebgf );_gfga =append (_gfga ,_gad );};case *_ee .PdfObjectArray :for _ ,_dfgb :=range _gad .Elements (){switch _bddf :=_dfgb .(type ){case *_ee .PdfObjectStream :if _fbcdg ,_gdda :=_ee .DecodeStream (_bddf );_gdda ==nil {_ddbg .Write (_fbcdg );
_gfga =append (_gfga ,_bddf );};};};};return _ddbg .String (),_gfga ;};func _efg (_edd *_fd .Image ,_ggf float64 )(*_fd .Image ,error ){_acf ,_gced :=_edd .ToGoImage ();if _gced !=nil {return nil ,_gced ;};var _ffac _bb .Image ;_ggcgg ,_eaf :=_acf .(*_bb .Monochrome );
if _eaf {if _gced =_ggcgg .ResolveDecode ();_gced !=nil {return nil ,_gced ;};_ffac ,_gced =_ggcgg .Scale (_ggf );if _gced !=nil {return nil ,_gced ;};}else {_dcg :=int (_ae .RoundToEven (float64 (_edd .Width )*_ggf ));_dcfa :=int (_ae .RoundToEven (float64 (_edd .Height )*_ggf ));
_ffac ,_gced =_bb .NewImage (_dcg ,_dcfa ,int (_edd .BitsPerComponent ),_edd .ColorComponents ,nil ,nil ,nil );if _gced !=nil {return nil ,_gced ;};_f .CatmullRom .Scale (_ffac ,_ffac .Bounds (),_acf ,_acf .Bounds (),_f .Over ,&_f .Options {});};_ccc :=_ffac .Base ();
_bda :=&_fd .Image {Width :int64 (_ccc .Width ),Height :int64 (_ccc .Height ),BitsPerComponent :int64 (_ccc .BitsPerComponent ),ColorComponents :_ccc .ColorComponents ,Data :_ccc .Data };_bda .SetDecode (_ccc .Decode );_bda .SetAlpha (_ccc .Alpha );return _bda ,nil ;
};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;
};func _fff (_cbbf []_ee .PdfObject )[]*imageInfo {_dcd :=_ee .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_ede :=make (map[*_ee .PdfObjectStream ]struct{});var _fec []*imageInfo ;for _ ,_bag :=range _cbbf {_egfd ,_dde :=_ee .GetStream (_bag );
if !_dde {continue ;};if _ ,_ggcc :=_ede [_egfd ];_ggcc {continue ;};_ede [_egfd ]=struct{}{};_eeac :=_egfd .PdfObjectDictionary .Get (_dcd );_bdgd ,_dde :=_ee .GetName (_eeac );if !_dde ||string (*_bdgd )!="\u0049\u006d\u0061g\u0065"{continue ;};_cacd :=&imageInfo {Stream :_egfd ,BitsPerComponent :8};
if _afab ,_ead :=_ee .GetIntVal (_egfd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_ead {_cacd .BitsPerComponent =_afab ;};if _cbfc ,_acbe :=_ee .GetIntVal (_egfd .Get ("\u0057\u0069\u0064t\u0068"));
_acbe {_cacd .Width =_cbfc ;};if _fbcd ,_ddf :=_ee .GetIntVal (_egfd .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_ddf {_cacd .Height =_fbcd ;};_ada ,_bcc :=_fd .NewPdfColorspaceFromPdfObject (_egfd .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));
if _bcc !=nil {_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_bcc );continue ;};if _ada ==nil {_dfg ,_eade :=_ee .GetName (_egfd .Get ("\u0046\u0069\u006c\u0074\u0065\u0072"));if _eade {switch _dfg .String (){case "\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065","J\u0042\u0049\u0047\u0032\u0044\u0065\u0063\u006f\u0064\u0065":_ada =_fd .NewPdfColorspaceDeviceGray ();
_cacd .BitsPerComponent =1;};};};switch _caf :=_ada .(type ){case *_fd .PdfColorspaceDeviceRGB :_cacd .ColorComponents =3;case *_fd .PdfColorspaceDeviceGray :_cacd .ColorComponents =1;default:_a .Log .Debug ("\u004f\u0070\u0074\u0069\u006d\u0069\u007aa\u0074\u0069\u006fn\u0020\u0069\u0073 \u006e\u006ft\u0020\u0073\u0075\u0070\u0070\u006fr\u0074ed\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0054\u0020\u002d\u0020\u0073\u006b\u0069\u0070",_caf );
continue ;};_fec =append (_fec ,_cacd );};return _fec ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gfe *CombineDuplicateDirectObjects )Optimize (objects []_ee .PdfObject )(_dbaf []_ee .PdfObject ,_acb error ){_afbc (objects );_gge :=make (map[string ][]*_ee .PdfObjectDictionary );var _ecf func (_fagg *_ee .PdfObjectDictionary );_ecf =func (_ggcg *_ee .PdfObjectDictionary ){for _ ,_cfg :=range _ggcg .Keys (){_bgb :=_ggcg .Get (_cfg );
if _egf ,_cgbe :=_bgb .(*_ee .PdfObjectDictionary );_cgbe {_fcc :=_d .New ();_fcc .Write ([]byte (_egf .WriteString ()));_aafe :=string (_fcc .Sum (nil ));_gge [_aafe ]=append (_gge [_aafe ],_egf );_ecf (_egf );};};};for _ ,_bcb :=range objects {_cgbd ,_aaea :=_bcb .(*_ee .PdfIndirectObject );
if !_aaea {continue ;};if _dgff ,_ccee :=_cgbd .PdfObject .(*_ee .PdfObjectDictionary );_ccee {_ecf (_dgff );};};_gffg :=make ([]_ee .PdfObject ,0,len (_gge ));_cfd :=make (map[_ee .PdfObject ]_ee .PdfObject );for _ ,_dgc :=range _gge {if len (_dgc )< 2{continue ;
};_cdb :=_ee .MakeDict ();_cdb .Merge (_dgc [0]);_cff :=_ee .MakeIndirectObject (_cdb );_gffg =append (_gffg ,_cff );for _cefc :=0;_cefc < len (_dgc );_cefc ++{_ccg :=_dgc [_cefc ];_cfd [_ccg ]=_cff ;};};_dbaf =make ([]_ee .PdfObject ,len (objects ));copy (_dbaf ,objects );
_dbaf =append (_gffg ,_dbaf ...);_edeg (_dbaf ,_cfd );return _dbaf ,nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfbe *CombineDuplicateStreams )Optimize (objects []_ee .PdfObject )(_egc []_ee .PdfObject ,_gdf error ){_gbg :=make (map[_ee .PdfObject ]_ee .PdfObject );_beab :=make (map[_ee .PdfObject ]struct{});_aebf :=make (map[string ][]*_ee .PdfObjectStream );
for _ ,_gba :=range objects {if _ggab ,_dff :=_gba .(*_ee .PdfObjectStream );_dff {_fce :=_d .New ();_fce .Write (_ggab .Stream );_fce .Write ([]byte (_ggab .PdfObjectDictionary .WriteString ()));_eed :=string (_fce .Sum (nil ));_aebf [_eed ]=append (_aebf [_eed ],_ggab );
};};for _ ,_feb :=range _aebf {if len (_feb )< 2{continue ;};_gcaa :=_feb [0];for _gfaa :=1;_gfaa < len (_feb );_gfaa ++{_fgd :=_feb [_gfaa ];_gbg [_fgd ]=_gcaa ;_beab [_fgd ]=struct{}{};};};_egc =make ([]_ee .PdfObject ,0,len (objects )-len (_beab ));
for _ ,_afb :=range objects {if _ ,_efa :=_beab [_afb ];_efa {continue ;};_egc =append (_egc ,_afb );};_edeg (_egc ,_gbg );return _egc ,nil ;};func _ffd (_gfdf []_ee .PdfObject )objectStructure {_gfcg :=objectStructure {};_cfe :=false ;for _ ,_dcae :=range _gfdf {switch _dfgf :=_dcae .(type ){case *_ee .PdfIndirectObject :_dbad ,_dfff :=_ee .GetDict (_dfgf );
if !_dfff {continue ;};_fgdd ,_dfff :=_ee .GetName (_dbad .Get ("\u0054\u0079\u0070\u0065"));if !_dfff {continue ;};switch _fgdd .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_gfcg ._gdd =_dbad ;_cfe =true ;};};if _cfe {break ;};};if !_cfe {return _gfcg ;
};_ebe ,_fdb :=_ee .GetDict (_gfcg ._gdd .Get ("\u0050\u0061\u0067e\u0073"));if !_fdb {return _gfcg ;};_gfcg ._dca =_ebe ;_cccbe ,_fdb :=_ee .GetArray (_ebe .Get ("\u004b\u0069\u0064\u0073"));if !_fdb {return _gfcg ;};for _ ,_bcg :=range _cccbe .Elements (){_bddad ,_ded :=_ee .GetIndirect (_bcg );
if !_ded {break ;};_gfcg ._fge =append (_gfcg ._fge ,_bddad );};return _gfcg ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_abg *CombineIdenticalIndirectObjects )Optimize (objects []_ee .PdfObject )(_gfag []_ee .PdfObject ,_fda error ){_afbc (objects );_gfb :=make (map[_ee .PdfObject ]_ee .PdfObject );_gfc :=make (map[_ee .PdfObject ]struct{});_cge :=make (map[string ][]*_ee .PdfIndirectObject );
for _ ,_bee :=range objects {_gcdf ,_fcbb :=_bee .(*_ee .PdfIndirectObject );if !_fcbb {continue ;};if _bec ,_adca :=_gcdf .PdfObject .(*_ee .PdfObjectDictionary );_adca {if _dcef ,_baf :=_bec .Get ("\u0054\u0079\u0070\u0065").(*_ee .PdfObjectName );_baf &&*_dcef =="\u0050\u0061\u0067\u0065"{continue ;
};_dag :=_d .New ();_dag .Write ([]byte (_bec .WriteString ()));_aca :=string (_dag .Sum (nil ));_cge [_aca ]=append (_cge [_aca ],_gcdf );};};for _ ,_bebc :=range _cge {if len (_bebc )< 2{continue ;};_acad :=_bebc [0];for _fcad :=1;_fcad < len (_bebc );
_fcad ++{_dcc :=_bebc [_fcad ];_gfb [_dcc ]=_acad ;_gfc [_dcc ]=struct{}{};};};_gfag =make ([]_ee .PdfObject ,0,len (objects )-len (_gfc ));for _ ,_cea :=range objects {if _ ,_gbf :=_gfc [_cea ];_gbf {continue ;};_gfag =append (_gfag ,_cea );};_edeg (_gfag ,_gfb );
return _gfag ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edac *ObjectStreams )Optimize (objects []_ee .PdfObject )(_dge []_ee .PdfObject ,_fggd error ){_dgd :=&_ee .PdfObjectStreams {};_eddd :=make ([]_ee .PdfObject ,0,len (objects ));for _ ,_efcb :=range objects {if _ced ,_deb :=_efcb .(*_ee .PdfIndirectObject );
_deb &&_ced .GenerationNumber ==0{_dgd .Append (_efcb );}else {_eddd =append (_eddd ,_efcb );};};if _dgd .Len ()==0{return _eddd ,nil ;};_dge =make ([]_ee .PdfObject ,0,len (_eddd )+_dgd .Len ()+1);if _dgd .Len ()> 1{_dge =append (_dge ,_dgd );};_dge =append (_dge ,_dgd .Elements ()...);
_dge =append (_dge ,_eddd ...);return _dge ,nil ;};func _ceea (_adc _ee .PdfObject )[]content {if _adc ==nil {return nil ;};_bfe ,_ecd :=_ee .GetArray (_adc );if !_ecd {_a .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
return nil ;};var _dcb []content ;for _ ,_cbdg :=range _bfe .Elements (){_dec ,_dgfa :=_ee .GetDict (_cbdg );if !_dgfa {_a .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");
continue ;};_bae ,_dgfa :=_ee .GetDict (_dec .Get ("\u0041\u0050"));if !_dgfa {_a .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_fafa :=_ee .TraceToDirectObject (_bae .Get ("\u004e"));
if _fafa ==nil {_a .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _eca *_ee .PdfObjectStream ;switch _cbb :=_fafa .(type ){case *_ee .PdfObjectDictionary :_dd ,_gb :=_ee .GetName (_dec .Get ("\u0041\u0053"));
if !_gb {_a .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_eca ,_gb =_ee .GetStream (_cbb .Get (*_dd ));if !_gb {_a .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");
continue ;};case *_ee .PdfObjectStream :_eca =_cbb ;};if _eca ==nil {_a .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");
continue ;};_eda ,_eacf :=_fd .NewXObjectFormFromStream (_eca );if _eacf !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_eacf );
continue ;};_bdc ,_eacf :=_eda .GetContentStream ();if _eacf !=nil {_a .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_eacf );continue ;};_dcb =append (_dcb ,content {_bfb :string (_bdc ),_cee :_eda .Resources });
};return _dcb ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};type imageInfo struct{BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_ee .PdfObjectStream ;PPI float64 ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_g *Chain )Optimize (objects []_ee .PdfObject )(_bgd []_ee .PdfObject ,_cg error ){_dg :=objects ;for _ ,_faa :=range _g ._c {_be ,_ab :=_faa .Optimize (_dg );if _ab !=nil {_a .Log .Debug ("\u0045\u0052\u0052OR\u0020\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u002b\u0076",_ab );
continue ;};_dg =_be ;};return _dg ,nil ;};func _bdgf (_gga *_ee .PdfObjectStream ,_ggc []rune ,_adf []_bbb .GlyphIndex )error {_gga ,_dfc :=_ee .GetStream (_gga );if !_dfc {_a .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");
return _de .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_caa ,_dce :=_ee .DecodeStream (_gga );if _dce !=nil {_a .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_dce );
return _dce ;};_ce ,_dce :=_bbb .Parse (_aec .NewReader (_caa ));if _dce !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_gga .Stream ));
return _dce ;};_ggag :=_adf ;if len (_ggc )> 0{_cfa :=_ce .LookupRunes (_ggc );_ggag =append (_ggag ,_cfa ...);};_ce ,_dce =_ce .SubsetKeepIndices (_ggag );if _dce !=nil {_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_dce );
return _dce ;};var _gfg _aec .Buffer ;_dce =_ce .Write (&_gfg );if _dce !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dce );return _dce ;};if _gfg .Len ()> len (_caa ){_a .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
return nil ;};_bbef ,_dce :=_ee .MakeStream (_gfg .Bytes (),_ee .NewFlateEncoder ());if _dce !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_dce );return _dce ;
};*_gga =*_bbef ;_gga .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ee .MakeInteger (int64 (_gfg .Len ())));return nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_deff *ImagePPI )Optimize (objects []_ee .PdfObject )(_aed []_ee .PdfObject ,_ebca error ){if _deff .ImageUpperPPI <=0{return objects ,nil ;};_ddd :=_fff (objects );if len (_ddd )==0{return objects ,nil ;};_abb :=make (map[_ee .PdfObject ]struct{});
for _ ,_edaa :=range _ddd {_adab :=_edaa .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b");_abb [_adab ]=struct{}{};};_gbe :=make (map[*_ee .PdfObjectStream ]*imageInfo );for _ ,_baab :=range _ddd {_gbe [_baab .Stream ]=_baab ;};var _egff *_ee .PdfObjectDictionary ;
for _ ,_cfac :=range objects {if _fgbd ,_dafe :=_ee .GetDict (_cfac );_egff ==nil &&_dafe {if _bfbb ,_cccb :=_ee .GetName (_fgbd .Get ("\u0054\u0079\u0070\u0065"));_cccb &&*_bfbb =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_egff =_fgbd ;};};};if _egff ==nil {return objects ,nil ;
};_eaca ,_acaf :=_ee .GetDict (_egff .Get ("\u0050\u0061\u0067e\u0073"));if !_acaf {return objects ,nil ;};_eab ,_ecab :=_ee .GetArray (_eaca .Get ("\u004b\u0069\u0064\u0073"));if !_ecab {return objects ,nil ;};for _ ,_cdc :=range _eab .Elements (){_fdc :=make (map[string ]*imageInfo );
_cceg ,_gbed :=_ee .GetDict (_cdc );if !_gbed {continue ;};_ffg ,_ :=_ccd (_cceg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if len (_ffg )==0{continue ;};_acc ,_dbda :=_ee .GetDict (_cceg .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));
if !_dbda {continue ;};_bccf ,_bbed :=_fd .NewPdfPageResourcesFromDict (_acc );if _bbed !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073\u0020-\u0020\u0069\u0067\u006e\u006fr\u0069\u006eg\u003a\u0020\u0025\u0076",_bbed );
continue ;};_cbbfe ,_dae :=_ee .GetDict (_acc .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_dae {continue ;};_gdg :=_cbbfe .Keys ();for _ ,_ceb :=range _gdg {if _dbc ,_bfgd :=_ee .GetStream (_cbbfe .Get (_ceb ));_bfgd {if _dfae ,_dab :=_gbe [_dbc ];
_dab {_fdc [string (_ceb )]=_dfae ;};};};_baef :=_bg .NewContentStreamParser (_ffg );_cec ,_bbed :=_baef .Parse ();if _bbed !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bbed );continue ;};_acbd :=_bg .NewContentStreamProcessor (*_cec );
_acbd .AddHandler (_bg .HandlerConditionEnumAllOperands ,"",func (_fed *_bg .ContentStreamOperation ,_eee _bg .GraphicsState ,_acaa *_fd .PdfPageResources )error {switch _fed .Operand {case "\u0044\u006f":if len (_fed .Params )!=1{_a .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020w\u0069\u0074\u0068\u0020\u006c\u0065\u006e\u0028\u0070\u0061ra\u006d\u0073\u0029 \u0021=\u0020\u0031");
return nil ;};_egag ,_dbcb :=_ee .GetName (_fed .Params [0]);if !_dbcb {_a .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0044\u006f\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f\u006e\u0020\u004e\u0061\u006d\u0065\u0020p\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072");
return nil ;};if _gffd ,_ecfdc :=_fdc [string (*_egag )];_ecfdc {_aedd :=_eee .CTM .ScalingFactorX ();_dcefc :=_eee .CTM .ScalingFactorY ();_cba ,_abe :=_aedd /72.0,_dcefc /72.0;_gbcg ,_bdda :=float64 (_gffd .Width )/_cba ,float64 (_gffd .Height )/_abe ;
if _cba ==0||_abe ==0{_gbcg =72.0;_bdda =72.0;};_gffd .PPI =_ae .Max (_gffd .PPI ,_gbcg );_gffd .PPI =_ae .Max (_gffd .PPI ,_bdda );};};return nil ;});_bbed =_acbd .Process (_bccf );if _bbed !=nil {_a .Log .Debug ("E\u0052\u0052\u004f\u0052 p\u0072o\u0063\u0065\u0073\u0073\u0069n\u0067\u003a\u0020\u0025\u002b\u0076",_bbed );
continue ;};};for _ ,_cfc :=range _ddd {if _ ,_dgb :=_abb [_cfc .Stream ];_dgb {continue ;};if _cfc .PPI <=_deff .ImageUpperPPI {continue ;};_acbb ,_edf :=_fd .NewXObjectImageFromStream (_cfc .Stream );if _edf !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_edf );
continue ;};var _fab imageModifications ;_fab .Scale =_deff .ImageUpperPPI /_cfc .PPI ;if _cfc .BitsPerComponent ==1&&_cfc .ColorComponents ==1{_afg :=_ae .Round (_cfc .PPI /_deff .ImageUpperPPI );_eddf :=_bb .NextPowerOf2 (uint (_afg ));if _bb .InDelta (float64 (_eddf ),1/_fab .Scale ,0.3){_fab .Scale =float64 (1)/float64 (_eddf );
};if _ ,_ggg :=_acbb .Filter .(*_ee .JBIG2Encoder );!_ggg {_fab .Encoding =_ee .NewJBIG2Encoder ();};};if _edf =_bdge (_acbb ,_fab );_edf !=nil {_a .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_edf );
continue ;};_fab .Encoding =nil ;if _cace ,_eae :=_ee .GetStream (_cfc .Stream .PdfObjectDictionary .Get ("\u0053\u004d\u0061s\u006b"));_eae {_adg ,_fbb :=_fd .NewXObjectImageFromStream (_cace );if _fbb !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fbb );
continue ;};if _fbb =_bdge (_adg ,_fab );_fbb !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_fbb );continue ;};};};return objects ,nil ;};func _deg (_fad *_ee .PdfObjectStream )error {_da ,_fdg :=_ee .DecodeStream (_fad );
if _fdg !=nil {return _fdg ;};_ga :=_bg .NewContentStreamParser (string (_da ));_dee ,_fdg :=_ga .Parse ();if _fdg !=nil {return _fdg ;};_dee =_bd (_dee );_fg :=_dee .Bytes ();if len (_fg )>=len (_da ){return nil ;};_bea ,_fdg :=_ee .MakeStream (_dee .Bytes (),_ee .NewFlateEncoder ());
if _fdg !=nil {return _fdg ;};_fad .Stream =_bea .Stream ;_fad .Merge (_bea .PdfObjectDictionary );return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Append appends optimizers to the chain.
func (_bbbg *Chain )Append (optimizers ..._fd .Optimizer ){_bbbg ._c =append (_bbbg ._c ,optimizers ...)};func _edeg (_dgcf []_ee .PdfObject ,_ebg map[_ee .PdfObject ]_ee .PdfObject ){if len (_ebg )==0{return ;};for _bce ,_fba :=range _dgcf {if _fcg ,_bfcf :=_ebg [_fba ];
_bfcf {_dgcf [_bce ]=_fcg ;continue ;};_ebg [_fba ]=_fba ;switch _ccbc :=_fba .(type ){case *_ee .PdfObjectArray :_cedg :=make ([]_ee .PdfObject ,_ccbc .Len ());copy (_cedg ,_ccbc .Elements ());_edeg (_cedg ,_ebg );for _dddg ,_aggg :=range _cedg {_ccbc .Set (_dddg ,_aggg );
};case *_ee .PdfObjectStreams :_edeg (_ccbc .Elements (),_ebg );case *_ee .PdfObjectStream :_afce :=[]_ee .PdfObject {_ccbc .PdfObjectDictionary };_edeg (_afce ,_ebg );_ccbc .PdfObjectDictionary =_afce [0].(*_ee .PdfObjectDictionary );case *_ee .PdfObjectDictionary :_cgg :=_ccbc .Keys ();
_gbd :=make ([]_ee .PdfObject ,len (_cgg ));for _ggaf ,_ccga :=range _cgg {_gbd [_ggaf ]=_ccbc .Get (_ccga );};_edeg (_gbd ,_ebg );for _gcb ,_gfff :=range _cgg {_ccbc .Set (_gfff ,_gbd [_gcb ]);};case *_ee .PdfIndirectObject :_fbf :=[]_ee .PdfObject {_ccbc .PdfObject };
_edeg (_fbf ,_ebg );_ccbc .PdfObject =_fbf [0];};};};func _bdge (_ecfd *_fd .XObjectImage ,_ccb imageModifications )error {_ebfg ,_bbbb :=_ecfd .ToImage ();if _bbbb !=nil {return _bbbb ;};if _ccb .Scale !=0{_ebfg ,_bbbb =_efg (_ebfg ,_ccb .Scale );if _bbbb !=nil {return _bbbb ;
};};if _ccb .Encoding !=nil {_ecfd .Filter =_ccb .Encoding ;};_ecfd .Decode =nil ;switch _dcf :=_ecfd .Filter .(type ){case *_ee .FlateEncoder :if _dcf .Predictor !=1&&_dcf .Predictor !=11{_dcf .Predictor =1;};};if _bbbb =_ecfd .SetImage (_ebfg ,nil );
_bbbb !=nil {_a .Log .Debug ("\u0045\u0072\u0072or\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0076",_bbbb );return _bbbb ;};_ecfd .ToPdfObject ();return nil ;};type content struct{_bfb string ;
_cee *_fd .PdfPageResources ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dga *Image )Optimize (objects []_ee .PdfObject )(_dbdf []_ee .PdfObject ,_egfc error ){if _dga .ImageQuality <=0{return objects ,nil ;};_ebc :=_fff (objects );if len (_ebc )==0{return objects ,nil ;};_ddc :=make (map[_ee .PdfObject ]_ee .PdfObject );
_cga :=make (map[_ee .PdfObject ]struct{});for _ ,_eeb :=range _ebc {_eedb :=_eeb .Stream .Get ("\u0053\u004d\u0061s\u006b");_cga [_eedb ]=struct{}{};};for _bcdf ,_ddcf :=range _ebc {_ebf :=_ddcf .Stream ;if _ ,_gdcf :=_cga [_ebf ];_gdcf {continue ;};_defc ,_ega :=_fd .NewXObjectImageFromStream (_ebf );
if _ega !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ega );continue ;};switch _defc .Filter .(type ){case *_ee .JBIG2Encoder :continue ;case *_ee .CCITTFaxEncoder :continue ;};_agg ,_ega :=_defc .ToImage ();if _ega !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ega );
continue ;};_cfae :=_ee .NewDCTEncoder ();_cfae .ColorComponents =_agg .ColorComponents ;_cfae .Quality =_dga .ImageQuality ;_cfae .BitsPerComponent =_ddcf .BitsPerComponent ;_cfae .Width =_ddcf .Width ;_cfae .Height =_ddcf .Height ;_cgeg ,_ega :=_cfae .EncodeBytes (_agg .Data );
if _ega !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_ega );continue ;};var _faggd _ee .StreamEncoder ;_faggd =_cfae ;{_defd :=_ee .NewFlateEncoder ();_efaa :=_ee .NewMultiEncoder ();_efaa .AddEncoder (_defd );_efaa .AddEncoder (_cfae );
_bfc ,_bgfb :=_efaa .EncodeBytes (_agg .Data );if _bgfb !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u002b\u0076",_bgfb );continue ;};if len (_bfc )< len (_cgeg ){_a .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_cgeg ),len (_bfc ),len (_ebf .Stream ));
_cgeg =_bfc ;_faggd =_efaa ;};};_bgg :=len (_ebf .Stream );if _bgg < len (_cgeg ){continue ;};_fbg :=&_ee .PdfObjectStream {Stream :_cgeg };_fbg .PdfObjectReference =_ebf .PdfObjectReference ;_fbg .PdfObjectDictionary =_ee .MakeDict ();_fbg .Merge (_ebf .PdfObjectDictionary );
_fbg .Merge (_faggd .MakeStreamDict ());_fbg .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ee .MakeInteger (int64 (len (_cgeg ))));_ddc [_ebf ]=_fbg ;_ebc [_bcdf ].Stream =_fbg ;};_dbdf =make ([]_ee .PdfObject ,len (objects ));copy (_dbdf ,objects );_edeg (_dbdf ,_ddc );
return _dbdf ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_eg *CleanFonts )Optimize (objects []_ee .PdfObject )(_addg []_ee .PdfObject ,_ebd error ){var _cgf map[*_ee .PdfObjectStream ]struct{};if _eg .Subset {var _gdc error ;_cgf ,_gdc =_daf (objects );if _gdc !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u0020\u0073u\u0062s\u0065\u0074\u0074\u0069\u006e\u0067\u003a \u0025\u0076",_gdc );
return nil ,_gdc ;};};for _ ,_dbg :=range objects {_cadb ,_bad :=_ee .GetStream (_dbg );if !_bad {continue ;};if _ ,_aecf :=_cgf [_cadb ];_aecf {continue ;};_cef ,_cgdc :=_ee .NewEncoderFromStream (_cadb );if _cgdc !=nil {_a .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_cgdc );
continue ;};_ffaa ,_cgdc :=_cef .DecodeStream (_cadb );if _cgdc !=nil {_a .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_cgdc );
continue ;};if len (_ffaa )< 4{continue ;};_fbe :=string (_ffaa [:4]);if _fbe =="\u004f\u0054\u0054\u004f"{continue ;};if _fbe !="\u0000\u0001\u0000\u0000"&&_fbe !="\u0074\u0072\u0075\u0065"{continue ;};_faf ,_cgdc :=_bbb .Parse (_aec .NewReader (_ffaa ));
if _cgdc !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cgdc );continue ;};_cgdc =_faf .Optimize ();
if _cgdc !=nil {_a .Log .Debug ("\u0045\u0052RO\u0052\u0020\u004fp\u0074\u0069\u006d\u0069zin\u0067 f\u006f\u006e\u0074\u003a\u0020\u0025\u0076 -\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067",_cgdc );continue ;};var _bgfa _aec .Buffer ;_cgdc =_faf .Write (&_bgfa );
if _cgdc !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_cgdc );continue ;};if _bgfa .Len ()> len (_ffaa ){_a .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");
continue ;};_dfcf ,_cgdc :=_ee .MakeStream (_bgfa .Bytes (),_ee .NewFlateEncoder ());if _cgdc !=nil {continue ;};*_cadb =*_dfcf ;_cadb .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_ee .MakeInteger (int64 (_bgfa .Len ())));};return objects ,nil ;};func _afbc (_bca []_ee .PdfObject ){for _fdaa ,_bccb :=range _bca {switch _cfgf :=_bccb .(type ){case *_ee .PdfIndirectObject :_cfgf .ObjectNumber =int64 (_fdaa +1);
_cfgf .GenerationNumber =0;case *_ee .PdfObjectStream :_cfgf .ObjectNumber =int64 (_fdaa +1);_cfgf .GenerationNumber =0;case *_ee .PdfObjectStreams :_cfgf .ObjectNumber =int64 (_fdaa +1);_cfgf .GenerationNumber =0;};};};type objectStructure struct{_gdd *_ee .PdfObjectDictionary ;
_dca *_ee .PdfObjectDictionary ;_fge []*_ee .PdfIndirectObject ;};type imageModifications struct{Scale float64 ;Encoding _ee .StreamEncoder ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cbc *CleanContentstream )Optimize (objects []_ee .PdfObject )(_df []_ee .PdfObject ,_cgb error ){_ad :=map[*_ee .PdfObjectStream ]struct{}{};var _fca []*_ee .PdfObjectStream ;_bde :=func (_dfa *_ee .PdfObjectStream ){if _ ,_dc :=_ad [_dfa ];!_dc {_ad [_dfa ]=struct{}{};
_fca =append (_fca ,_dfa );};};_ff :=map[_ee .PdfObject ]bool {};_ge :=map[_ee .PdfObject ]bool {};for _ ,_agb :=range objects {switch _bgf :=_agb .(type ){case *_ee .PdfIndirectObject :switch _dfab :=_bgf .PdfObject .(type ){case *_ee .PdfObjectDictionary :if _fag ,_db :=_ee .GetName (_dfab .Get ("\u0054\u0079\u0070\u0065"));
!_db ||_fag .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _gac ,_aeb :=_ee .GetStream (_dfab .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_aeb {_bde (_gac );}else if _dba ,_cbf :=_ee .GetArray (_dfab .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cbf {var _ca []*_ee .PdfObjectStream ;for _ ,_cf :=range _dba .Elements (){if _bfa ,_dgf :=_ee .GetStream (_cf );_dgf {_ca =append (_ca ,_bfa );};};if len (_ca )> 0{var _gf _aec .Buffer ;for _ ,_gca :=range _ca {if _dad ,_ed :=_ee .DecodeStream (_gca );
_ed ==nil {_gf .Write (_dad );};_ff [_gca ]=true ;};_abc ,_fgg :=_ee .MakeStream (_gf .Bytes (),_ee .NewFlateEncoder ());if _fgg !=nil {return nil ,_fgg ;};_ge [_abc ]=true ;_dfab .Set ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073",_abc );_bde (_abc );
};};};case *_ee .PdfObjectStream :if _fb ,_cd :=_ee .GetName (_bgf .Get ("\u0054\u0079\u0070\u0065"));!_cd ||_fb .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _gfa ,_cbe :=_ee .GetName (_bgf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
!_cbe ||_gfa .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_bde (_bgf );};};for _ ,_bbc :=range _fca {_cgb =_deg (_bbc );if _cgb !=nil {return nil ,_cgb ;};};_df =nil ;for _ ,_bcd :=range objects {if _ff [_bcd ]{continue ;};_df =append (_df ,_bcd );
};for _aa :=range _ge {_df =append (_df ,_aa );};return _df ,nil ;};func _daf (_dfb []_ee .PdfObject )(_fe map[*_ee .PdfObjectStream ]struct{},_aae error ){_fe =map[*_ee .PdfObjectStream ]struct{}{};_dbfc :=map[*_fd .PdfFont ]struct{}{};_cgd :=_ffd (_dfb );
for _ ,_aaf :=range _cgd ._fge {_dade ,_bcdg :=_ee .GetDict (_aaf .PdfObject );if !_bcdg {continue ;};_gab ,_bcdg :=_ee .GetDict (_dade .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_bcdg {continue ;};_add ,_ :=_ccd (_dade .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));
_cc ,_ffa :=_fd .NewPdfPageResourcesFromDict (_gab );if _ffa !=nil {return nil ,_ffa ;};_degd :=[]content {{_bfb :_add ,_cee :_cc }};_fgb :=_ceea (_dade .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _fgb !=nil {_degd =append (_degd ,_fgb ...);};for _ ,_eac :=range _degd {_gg ,_fgf :=_e .NewFromContents (_eac ._bfb ,_eac ._cee );
if _fgf !=nil {return nil ,_fgf ;};_cbd ,_ ,_ ,_fgf :=_gg .ExtractPageText ();if _fgf !=nil {return nil ,_fgf ;};for _ ,_ec :=range _cbd .Marks ().Elements (){if _ec .Font ==nil {continue ;};if _ ,_cdd :=_dbfc [_ec .Font ];!_cdd {_dbfc [_ec .Font ]=struct{}{};
};};};};_dfd :=map[*_ee .PdfObjectStream ][]*_fd .PdfFont {};for _cdf :=range _dbfc {_cbcc :=_cdf .FontDescriptor ();if _cbcc ==nil ||_cbcc .FontFile2 ==nil {continue ;};_bge ,_cad :=_ee .GetStream (_cbcc .FontFile2 );if !_cad {continue ;};_dfd [_bge ]=append (_dfd [_bge ],_cdf );
};for _bdd :=range _dfd {var _gae []rune ;var _gee []_bbb .GlyphIndex ;for _ ,_eb :=range _dfd [_bdd ]{switch _cce :=_eb .Encoder ().(type ){case *_ag .IdentityEncoder :_ef :=_cce .RegisteredRunes ();_bdg :=make ([]_bbb .GlyphIndex ,len (_ef ));for _fae ,_fbc :=range _ef {_bdg [_fae ]=_bbb .GlyphIndex (_fbc );
};_gee =append (_gee ,_bdg ...);case *_ag .TrueTypeFontEncoder :_def :=_cce .RegisteredRunes ();_gae =append (_gae ,_def ...);case _ag .SimpleEncoder :_ebb :=_cce .Charcodes ();for _ ,_fcd :=range _ebb {_af ,_afa :=_cce .CharcodeToRune (_fcd );if !_afa {_a .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_fcd );
continue ;};_gae =append (_gae ,_af );};};};_aae =_bdgf (_bdd ,_gae ,_gee );if _aae !=nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_aae );
return nil ,_aae ;};_fe [_bdd ]=struct{}{};};return _fe ,nil ;};func _bd (_cb *_bg .ContentStreamOperations )*_bg .ContentStreamOperations {if _cb ==nil {return nil ;};_ac :=_bg .ContentStreamOperations {};for _ ,_bc :=range *_cb {switch _bc .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;
case "\u0054\u006d":if len (_bc .Params )==6{if _fc ,_gc :=_ee .GetNumbersAsFloat (_bc .Params );_gc ==nil {if _fc [0]==1&&_fc [1]==0&&_fc [2]==0&&_fc [3]==1{_bc =&_bg .ContentStreamOperation {Params :[]_ee .PdfObject {_bc .Params [4],_bc .Params [5]},Operand :"\u0054\u0064"};
};};};};_ac =append (_ac ,_bc );};return &_ac ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dbd *CompressStreams )Optimize (objects []_ee .PdfObject )(_dfaf []_ee .PdfObject ,_ggd error ){_dfaf =make ([]_ee .PdfObject ,len (objects ));copy (_dfaf ,objects );for _ ,_cda :=range objects {_bafb ,_fcbbe :=_ee .GetStream (_cda );if !_fcbbe {continue ;
};if _dceg :=_bafb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_dceg !=nil {if _ ,_gce :=_ee .GetName (_dceg );_gce {continue ;};if _bdb ,_abgg :=_ee .GetArray (_dceg );_abgg &&_bdb .Len ()> 0{continue ;};};_bgff :=_ee .NewFlateEncoder ();var _aee []byte ;
_aee ,_ggd =_bgff .EncodeBytes (_bafb .Stream );if _ggd !=nil {return _dfaf ,_ggd ;};_eff :=_bgff .MakeStreamDict ();if len (_aee )+len (_eff .WriteString ())< len (_bafb .Stream ){_bafb .Stream =_aee ;_bafb .PdfObjectDictionary .Merge (_eff );_bafb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_ee .MakeInteger (int64 (len (_bafb .Stream ))));
};};return _dfaf ,nil ;};

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};