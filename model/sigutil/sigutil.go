//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_c "bytes";_gb "crypto";_bf "crypto/x509";_f "encoding/pem";_a "errors";_df "fmt";_fg "github.com/unidoc/unipdf/v3/common";_ca "golang.org/x/crypto/ocsp";_d "io/ioutil";_gc "net/http";_b "time";);

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_bb *CertClient )IsCA (cert *_bf .Certificate )bool {return cert .IsCA &&_c .Equal (cert .RawIssuer ,cert .RawSubject );};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_aef (),Hash :_gb .SHA1 }};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_gc .Client ;};

// Get retrieves the certificate at the specified URL.
func (_bc *CertClient )Get (url string )(*_bf .Certificate ,error ){if _bc .HTTPClient ==nil {_bc .HTTPClient =_aef ();};_dc ,_aa :=_bc .HTTPClient .Get (url );if _aa !=nil {return nil ,_aa ;};defer _dc .Body .Close ();_e ,_aa :=_d .ReadAll (_dc .Body );if _aa !=nil {return nil ,_aa ;};if _cb ,_ :=_f .Decode (_e );_cb !=nil {_e =_cb .Bytes ;};_gg ,_aa :=_bf .ParseCertificate (_e );if _aa !=nil {return nil ,_aa ;};return _gg ,nil ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ed *CertClient )GetIssuer (cert *_bf .Certificate )(*_bf .Certificate ,error ){for _ ,_ee :=range cert .IssuingCertificateURL {_gcf ,_ggb :=_ed .Get (_ee );if _ggb !=nil {_fg .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_ggb );continue ;};return _gcf ,nil ;};return nil ,_df .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_aef ()}};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_gc .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _gb .Hash ;};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_aag *CRLClient )MakeRequest (serverURL string ,cert *_bf .Certificate )([]byte ,error ){if _aag .HTTPClient ==nil {_aag .HTTPClient =_aef ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_a .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");};serverURL =cert .CRLDistributionPoints [0];};_ad ,_ef :=_aag .HTTPClient .Get (serverURL );if _ef !=nil {return nil ,_ef ;};defer _ad .Body .Close ();_gd ,_ef :=_d .ReadAll (_ad .Body );if _ef !=nil {return nil ,_ef ;};if _ge ,_ :=_f .Decode (_gd );_ge !=nil {_gd =_ge .Bytes ;};return _gd ,nil ;};func _aef ()*_gc .Client {return &_gc .Client {Timeout :5*_b .Second }};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_gc .Client ;};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_dg *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_bf .Certificate )(*_ca .Response ,[]byte ,error ){if _dg .HTTPClient ==nil {_dg .HTTPClient =_aef ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_a .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");};serverURL =cert .OCSPServer [0];};_ag ,_ae :=_ca .CreateRequest (cert ,issuer ,&_ca .RequestOptions {Hash :_dg .Hash });if _ae !=nil {return nil ,nil ,_ae ;};_aae ,_ae :=_dg .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_c .NewReader (_ag ));if _ae !=nil {return nil ,nil ,_ae ;};defer _aae .Body .Close ();_eg ,_ae :=_d .ReadAll (_aae .Body );if _ae !=nil {return nil ,nil ,_ae ;};if _edf ,_ :=_f .Decode (_eg );_edf !=nil {_eg =_edf .Bytes ;};_ffd ,_ae :=_ca .ParseResponseForCert (_eg ,cert ,issuer );if _ae !=nil {return nil ,nil ,_ae ;};return _ffd ,_eg ,nil ;};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_aef ()}};