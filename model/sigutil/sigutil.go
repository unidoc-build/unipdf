//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_a "bytes";_ad "crypto";_db "crypto/x509";_fa "encoding/asn1";_f "encoding/pem";_c "errors";_g "fmt";_ac "github.com/unidoc/timestamp";_b "github.com/unidoc/unipdf/v3/common";_aca "golang.org/x/crypto/ocsp";_ecg "io";_d "io/ioutil";
_eb "net/http";_ec "time";);

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_cgf *CertClient )IsCA (cert *_db .Certificate )bool {return cert .IsCA &&_a .Equal (cert .RawIssuer ,cert .RawSubject );};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_eda ()}};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_eda ()}};

// Get retrieves the certificate at the specified URL.
func (_cc *CertClient )Get (url string )(*_db .Certificate ,error ){if _cc .HTTPClient ==nil {_cc .HTTPClient =_eda ();};_ge ,_aa :=_cc .HTTPClient .Get (url );if _aa !=nil {return nil ,_aa ;};defer _ge .Body .Close ();_dc ,_aa :=_d .ReadAll (_ge .Body );
if _aa !=nil {return nil ,_aa ;};if _fc ,_ :=_f .Decode (_dc );_fc !=nil {_dc =_fc .Bytes ;};_dd ,_aa :=_db .ParseCertificate (_dc );if _aa !=nil {return nil ,_aa ;};return _dd ,nil ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_cg *CertClient )GetIssuer (cert *_db .Certificate )(*_db .Certificate ,error ){for _ ,_df :=range cert .IssuingCertificateURL {_de ,_ecf :=_cg .Get (_df );if _ecf !=nil {_b .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_ecf );
continue ;};return _de ,nil ;};return nil ,_g .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_fcb *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_db .Certificate )(*_aca .Response ,[]byte ,error ){if _fcb .HTTPClient ==nil {_fcb .HTTPClient =_eda ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_c .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_dbe ,_cgc :=_aca .CreateRequest (cert ,issuer ,&_aca .RequestOptions {Hash :_fcb .Hash });if _cgc !=nil {return nil ,nil ,_cgc ;};_ef ,_cgc :=_fcb .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_a .NewReader (_dbe ));
if _cgc !=nil {return nil ,nil ,_cgc ;};defer _ef .Body .Close ();_ed ,_cgc :=_d .ReadAll (_ef .Body );if _cgc !=nil {return nil ,nil ,_cgc ;};if _cga ,_ :=_f .Decode (_ed );_cga !=nil {_ed =_cga .Bytes ;};_gc ,_cgc :=_aca .ParseResponseForCert (_ed ,cert ,issuer );
if _cgc !=nil {return nil ,nil ,_cgc ;};return _gc ,_ed ,nil ;};func _eda ()*_eb .Client {return &_eb .Client {Timeout :5*_ec .Second }};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_gce *TimestampClient )GetEncodedToken (serverURL string ,req *_ac .Request )([]byte ,error ){if serverURL ==""{return nil ,_g .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_g .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_fe ,_dbd :=req .Marshal ();if _dbd !=nil {return nil ,_dbd ;
};_eeg ,_dbd :=_eb .NewRequest ("\u0050\u004f\u0053\u0054",serverURL ,_a .NewBuffer (_fe ));if _dbd !=nil {return nil ,_dbd ;};_eeg .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079");
if _gce .BeforeHTTPRequest !=nil {if _ade :=_gce .BeforeHTTPRequest (_eeg );_ade !=nil {return nil ,_ade ;};};_ffa :=_gce .HTTPClient ;if _ffa ==nil {_ffa =_eda ();};_eca ,_dbd :=_ffa .Do (_eeg );if _dbd !=nil {return nil ,_dbd ;};defer _eca .Body .Close ();
_af ,_dbd :=_d .ReadAll (_eca .Body );if _dbd !=nil {return nil ,_dbd ;};if _eca .StatusCode !=_eb .StatusOK {return nil ,_g .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_eca .StatusCode );
};var _ded struct{Version _fa .RawValue ;Content _fa .RawValue ;};if _ ,_dbd =_fa .Unmarshal (_af ,&_ded );_dbd !=nil {return nil ,_dbd ;};return _ded .Content .FullBytes ,nil ;};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_eda (),Hash :_ad .SHA1 }};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eb .Client ;

// Callbacks.
BeforeHTTPRequest func (_ffe *_eb .Request )error ;};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_gf *CRLClient )MakeRequest (serverURL string ,cert *_db .Certificate )([]byte ,error ){if _gf .HTTPClient ==nil {_gf .HTTPClient =_eda ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_c .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_fb ,_fd :=_gf .HTTPClient .Get (serverURL );if _fd !=nil {return nil ,_fd ;};defer _fb .Body .Close ();_ff ,_fd :=_d .ReadAll (_fb .Body );if _fd !=nil {return nil ,_fd ;};if _gfc ,_ :=_f .Decode (_ff );_gfc !=nil {_ff =_gfc .Bytes ;
};return _ff ,nil ;};

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _ecg .Reader ,opts *_ac .RequestOptions )(*_ac .Request ,error ){if opts ==nil {opts =&_ac .RequestOptions {};};if opts .Hash ==0{opts .Hash =_ad .SHA256 ;};if !opts .Hash .Available (){return nil ,_db .ErrUnsupportedAlgorithm ;
};_fcc :=opts .Hash .New ();if _ ,_dfb :=_ecg .Copy (_fcc ,body );_dfb !=nil {return nil ,_dfb ;};return &_ac .Request {HashAlgorithm :opts .Hash ,HashedMessage :_fcc .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eb .Client ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_eda ()}};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eb .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _ad .Hash ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_eb .Client ;};