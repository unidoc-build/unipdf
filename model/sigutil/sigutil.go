//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_e "bytes";_ga "crypto";_cc "crypto/x509";_df "encoding/asn1";_ge "encoding/pem";_dc "errors";_db "fmt";_f "github.com/unidoc/timestamp";_a "github.com/unidoc/unipdf/v3/common";_gf "golang.org/x/crypto/ocsp";_eg "io";_cd "io/ioutil";
_c "net/http";_g "time";);

// NewTimestampRequest returns a new timestamp request based
// on the specified options.
func NewTimestampRequest (body _eg .Reader ,opts *_f .RequestOptions )(*_f .Request ,error ){if opts ==nil {opts =&_f .RequestOptions {};};if opts .Hash ==0{opts .Hash =_ga .SHA256 ;};if !opts .Hash .Available (){return nil ,_cc .ErrUnsupportedAlgorithm ;
};_fgc :=opts .Hash .New ();if _ ,_cb :=_eg .Copy (_fgc ,body );_cb !=nil {return nil ,_cb ;};return &_f .Request {HashAlgorithm :opts .Hash ,HashedMessage :_fgc .Sum (nil ),Certificates :opts .Certificates ,TSAPolicyOID :opts .TSAPolicyOID ,Nonce :opts .Nonce },nil ;
};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _ga .Hash ;};

// Get retrieves the certificate at the specified URL.
func (_b *CertClient )Get (url string )(*_cc .Certificate ,error ){if _b .HTTPClient ==nil {_b .HTTPClient =_dab ();};_dfg ,_gg :=_b .HTTPClient .Get (url );if _gg !=nil {return nil ,_gg ;};defer _dfg .Body .Close ();_gd ,_gg :=_cd .ReadAll (_dfg .Body );
if _gg !=nil {return nil ,_gg ;};if _cg ,_ :=_ge .Decode (_gd );_cg !=nil {_gd =_cg .Bytes ;};_ba ,_gg :=_cc .ParseCertificate (_gd );if _gg !=nil {return nil ,_gg ;};return _ba ,nil ;};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_fc *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_cc .Certificate )(*_gf .Response ,[]byte ,error ){if _fc .HTTPClient ==nil {_fc .HTTPClient =_dab ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_dc .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");
};serverURL =cert .OCSPServer [0];};_fg ,_bbf :=_gf .CreateRequest (cert ,issuer ,&_gf .RequestOptions {Hash :_fc .Hash });if _bbf !=nil {return nil ,nil ,_bbf ;};_dg ,_bbf :=_fc .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_e .NewReader (_fg ));
if _bbf !=nil {return nil ,nil ,_bbf ;};defer _dg .Body .Close ();_fcg ,_bbf :=_cd .ReadAll (_dg .Body );if _bbf !=nil {return nil ,nil ,_bbf ;};if _caa ,_ :=_ge .Decode (_fcg );_caa !=nil {_fcg =_caa .Bytes ;};_fba ,_bbf :=_gf .ParseResponseForCert (_fcg ,cert ,issuer );
if _bbf !=nil {return nil ,nil ,_bbf ;};return _fba ,_fcg ,nil ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_abb *CertClient )IsCA (cert *_cc .Certificate )bool {return cert .IsCA &&_e .Equal (cert .RawIssuer ,cert .RawSubject );};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_bb *CRLClient )MakeRequest (serverURL string ,cert *_cc .Certificate )([]byte ,error ){if _bb .HTTPClient ==nil {_bb .HTTPClient =_dab ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_dc .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");
};serverURL =cert .CRLDistributionPoints [0];};_dcb ,_dba :=_bb .HTTPClient .Get (serverURL );if _dba !=nil {return nil ,_dba ;};defer _dcb .Body .Close ();_bg ,_dba :=_cd .ReadAll (_dcb .Body );if _dba !=nil {return nil ,_dba ;};if _de ,_ :=_ge .Decode (_bg );
_de !=nil {_bg =_de .Bytes ;};return _bg ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};

// NewTimestampClient returns a new timestamp client.
func NewTimestampClient ()*TimestampClient {return &TimestampClient {HTTPClient :_dab ()}};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_dab ()}};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_dab (),Hash :_ga .SHA1 }};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ca *CertClient )GetIssuer (cert *_cc .Certificate )(*_cc .Certificate ,error ){for _ ,_ec :=range cert .IssuingCertificateURL {_bd ,_bag :=_ca .Get (_ec );if _bag !=nil {_a .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_bag );
continue ;};return _bd ,nil ;};return nil ,_db .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};

// GetEncodedToken executes the timestamp request and returns the DER encoded
// timestamp token bytes.
func (_ea *TimestampClient )GetEncodedToken (serverURL string ,req *_f .Request )([]byte ,error ){if serverURL ==""{return nil ,_db .Errorf ("\u006d\u0075\u0073\u0074\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0020\u0074\u0069\u006d\u0065\u0073\u0074\u0061m\u0070\u0020\u0073\u0065\u0072\u0076\u0065r\u0020\u0055\u0052\u004c");
};if req ==nil {return nil ,_db .Errorf ("\u0074\u0069\u006de\u0073\u0074\u0061\u006dp\u0020\u0072\u0065\u0071\u0075\u0065\u0073t\u0020\u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0069\u006c");};_bc ,_fd :=req .Marshal ();if _fd !=nil {return nil ,_fd ;
};_dfd :=_ea .HTTPClient ;if _dfd ==nil {_dfd =_dab ();};_bac ,_fd :=_dfd .Post (serverURL ,"a\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0074\u0069\u006d\u0065\u0073t\u0061\u006d\u0070-\u0071u\u0065\u0072\u0079",_e .NewBuffer (_bc ));
if _fd !=nil {return nil ,_fd ;};defer _bac .Body .Close ();_fcb ,_fd :=_cd .ReadAll (_bac .Body );if _fd !=nil {return nil ,_fd ;};if _bac .StatusCode !=_c .StatusOK {return nil ,_db .Errorf ("\u0075\u006e\u0065x\u0070\u0065\u0063\u0074e\u0064\u0020\u0048\u0054\u0054\u0050\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0064",_bac .StatusCode );
};var _da struct{Version _df .RawValue ;Content _df .RawValue ;};if _ ,_fd =_df .Unmarshal (_fcb ,&_da );_fd !=nil {return nil ,_fd ;};return _da .Content .FullBytes ,nil ;};

// TimestampClient represents a RFC 3161 timestamp client.
// It is used to obtain signed tokens from timestamp authority servers.
type TimestampClient struct{

// HTTPClient is the HTTP client used to make timestamp requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_c .Client ;};func _dab ()*_c .Client {return &_c .Client {Timeout :5*_g .Second }};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_dab ()}};