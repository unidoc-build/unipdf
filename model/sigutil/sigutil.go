//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_g "bytes";_cf "crypto";_eca "crypto/x509";_ec "encoding/pem";_ge "errors";_ed "fmt";_ea "github.com/unidoc/unipdf/v3/common";_a "golang.org/x/crypto/ocsp";_ff "io/ioutil";_e "net/http";_c "time";);

// Get retrieves the certificate at the specified URL.
func (_b *CertClient )Get (url string )(*_eca .Certificate ,error ){if _b .HTTPClient ==nil {_b .HTTPClient =_ce ();};_ffg ,_ga :=_b .HTTPClient .Get (url );if _ga !=nil {return nil ,_ga ;};defer _ffg .Body .Close ();_gb ,_ga :=_ff .ReadAll (_ffg .Body );if _ga !=nil {return nil ,_ga ;};if _gg ,_ :=_ec .Decode (_gb );_gg !=nil {_gb =_gg .Bytes ;};_cc ,_ga :=_eca .ParseCertificate (_gb );if _ga !=nil {return nil ,_ga ;};return _cc ,nil ;};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_fg *CertClient )IsCA (cert *_eca .Certificate )bool {return cert .IsCA &&_g .Equal (cert .RawIssuer ,cert .RawSubject );};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;};func _ce ()*_e .Client {return &_e .Client {Timeout :5*_c .Second }};

// GetIssuer retrieves the issuer of the provided certificate.
func (_fbg *CertClient )GetIssuer (cert *_eca .Certificate )(*_eca .Certificate ,error ){for _ ,_fbe :=range cert .IssuingCertificateURL {_ab ,_fa :=_fbg .Get (_fbe );if _fa !=nil {_ea .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_fa );continue ;};return _ab ,nil ;};return nil ,_ed .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_ee *CRLClient )MakeRequest (serverURL string ,cert *_eca .Certificate )([]byte ,error ){if _ee .HTTPClient ==nil {_ee .HTTPClient =_ce ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_ge .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");};serverURL =cert .CRLDistributionPoints [0];};_bbc ,_bd :=_ee .HTTPClient .Get (serverURL );if _bd !=nil {return nil ,_bd ;};defer _bbc .Body .Close ();_fd ,_bd :=_ff .ReadAll (_bbc .Body );if _bd !=nil {return nil ,_bd ;};if _ae ,_ :=_ec .Decode (_fd );_ae !=nil {_fd =_ae .Bytes ;};return _fd ,nil ;};

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_ggg *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_eca .Certificate )(*_a .Response ,[]byte ,error ){if _ggg .HTTPClient ==nil {_ggg .HTTPClient =_ce ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_ge .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");};serverURL =cert .OCSPServer [0];};_gag ,_cg :=_a .CreateRequest (cert ,issuer ,&_a .RequestOptions {Hash :_ggg .Hash });if _cg !=nil {return nil ,nil ,_cg ;};_fdd ,_cg :=_ggg .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_g .NewReader (_gag ));if _cg !=nil {return nil ,nil ,_cg ;};defer _fdd .Body .Close ();_ccg ,_cg :=_ff .ReadAll (_fdd .Body );if _cg !=nil {return nil ,nil ,_cg ;};if _eb ,_ :=_ec .Decode (_ccg );_eb !=nil {_ccg =_eb .Bytes ;};_ef ,_cg :=_a .ParseResponseForCert (_ccg ,cert ,issuer );if _cg !=nil {return nil ,nil ,_cg ;};return _ef ,_ccg ,nil ;};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_ce ()}};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_ce (),Hash :_cf .SHA1 }};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_ce ()}};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _cf .Hash ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_e .Client ;};