//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_a "bytes";_c "crypto";_ea "crypto/x509";_e "encoding/pem";_af "errors";_b "fmt";_ae "github.com/unidoc/unipdf/v3/common";_gc "golang.org/x/crypto/ocsp";_aa "io/ioutil";_ad "net/http";_gg "time";);

// MakeRequest makes a OCSP request to the specified server and returns
// the parsed and raw responses. If a server URL is not provided, it is
// extracted from the certificate.
func (_bf *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_ea .Certificate )(*_gc .Response ,[]byte ,error ){if _bf .HTTPClient ==nil {_bf .HTTPClient =_fg ();};if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_af .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");};serverURL =cert .OCSPServer [0];};_eae ,_eg :=_gc .CreateRequest (cert ,issuer ,&_gc .RequestOptions {Hash :_bf .Hash });if _eg !=nil {return nil ,nil ,_eg ;};_ed ,_eg :=_bf .HTTPClient .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_a .NewReader (_eae ));if _eg !=nil {return nil ,nil ,_eg ;};defer _ed .Body .Close ();_cf ,_eg :=_aa .ReadAll (_ed .Body );if _eg !=nil {return nil ,nil ,_eg ;};if _gcc ,_ :=_e .Decode (_cf );_gcc !=nil {_cf =_gcc .Bytes ;};_bc ,_eg :=_gc .ParseResponseForCert (_cf ,cert ,issuer );if _eg !=nil {return nil ,nil ,_eg ;};return _bc ,_cf ,nil ;};

// GetIssuer retrieves the issuer of the provided certificate.
func (_ggg *CertClient )GetIssuer (cert *_ea .Certificate )(*_ea .Certificate ,error ){for _ ,_f :=range cert .IssuingCertificateURL {_bb ,_gf :=_ggg .Get (_f );if _gf !=nil {_ae .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_gf );continue ;};return _bb ,nil ;};return nil ,_b .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};

// NewOCSPClient returns a new OCSP client.
func NewOCSPClient ()*OCSPClient {return &OCSPClient {HTTPClient :_fg (),Hash :_c .SHA1 }};func _fg ()*_ad .Client {return &_ad .Client {Timeout :5*_gg .Second }};

// NewCRLClient returns a new CRL client.
func NewCRLClient ()*CRLClient {return &CRLClient {HTTPClient :_fg ()}};

// IsCA returns true if the provided certificate appears to be a CA certificate.
func (_db *CertClient )IsCA (cert *_ea .Certificate )bool {return cert .IsCA &&_a .Equal (cert .RawIssuer ,cert .RawSubject );};

// CertClient represents a X.509 certificate client. Its primary purpose
// is to download certificates.
type CertClient struct{

// HTTPClient is the HTTP client used to make certificate requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_ad .Client ;};

// NewCertClient returns a new certificate client.
func NewCertClient ()*CertClient {return &CertClient {HTTPClient :_fg ()}};

// OCSPClient represents a OCSP (Online Certificate Status Protocol) client.
// It is used to request revocation data from OCSP servers.
type OCSPClient struct{

// HTTPClient is the HTTP client used to make OCSP requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_ad .Client ;

// Hash is the hash function  used when constructing the OCSP
// requests. If zero, SHA-1 will be used.
Hash _c .Hash ;};

// Get retrieves the certificate at the specified URL.
func (_ag *CertClient )Get (url string )(*_ea .Certificate ,error ){if _ag .HTTPClient ==nil {_ag .HTTPClient =_fg ();};_d ,_ee :=_ag .HTTPClient .Get (url );if _ee !=nil {return nil ,_ee ;};defer _d .Body .Close ();_agf ,_ee :=_aa .ReadAll (_d .Body );if _ee !=nil {return nil ,_ee ;};if _agc ,_ :=_e .Decode (_agf );_agc !=nil {_agf =_agc .Bytes ;};_ge ,_ee :=_ea .ParseCertificate (_agf );if _ee !=nil {return nil ,_ee ;};return _ge ,nil ;};

// MakeRequest makes a CRL request to the specified server and returns the
// response. If a server URL is not provided, it is extracted from the certificate.
func (_gb *CRLClient )MakeRequest (serverURL string ,cert *_ea .Certificate )([]byte ,error ){if _gb .HTTPClient ==nil {_gb .HTTPClient =_fg ();};if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_af .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");};serverURL =cert .CRLDistributionPoints [0];};_fa ,_dd :=_gb .HTTPClient .Get (serverURL );if _dd !=nil {return nil ,_dd ;};defer _fa .Body .Close ();_ddd ,_dd :=_aa .ReadAll (_fa .Body );if _dd !=nil {return nil ,_dd ;};if _bd ,_ :=_e .Decode (_ddd );_bd !=nil {_ddd =_bd .Bytes ;};return _ddd ,nil ;};

// CRLClient represents a CRL (Certificate revocation list) client.
// It is used to request revocation data from CRL servers.
type CRLClient struct{

// HTTPClient is the HTTP client used to make CRL requests.
// By default, an HTTP client with a 5 second timeout per request is used.
HTTPClient *_ad .Client ;};