//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_c "errors";_f "fmt";_ca "github.com/unidoc/unipdf/v3/core";);func (_fcb *DiffResults )addWarningWithDescription (_fbbe int ,_cbg string ){if _fcb .Warnings ==nil {_fcb .Warnings =make ([]*DiffResult ,0);};_fcb .Warnings =append (_fcb .Warnings ,&DiffResult {Revision :_fbbe ,Description :_cbg });
};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func _ebdf (_cfg _ca .PdfObject )([]_ca .PdfObject ,error ){_dda :=make ([]_ca .PdfObject ,0);if _cfg !=nil {_bcb :=_cfg ;
if _baf ,_baee :=_ca .GetIndirect (_cfg );_baee {_bcb =_baf .PdfObject ;};if _acc ,_cb :=_ca .GetArray (_bcb );_cb {_dda =_acc .Elements ();}else {return nil ,_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");
};};return _dda ,nil ;};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_b *defaultDiffPolicy )ReviewFile (oldParser *_ca .PdfParser ,newParser *_ca .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_c .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_c .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_b ._dc =NoRestrictions ;}else {_b ._dc =params .DocMDPLevel ;};_bd :=&DiffResults {};for _g :=oldParser .GetRevisionNumber ()+1;_g <=newParser .GetRevisionNumber ();_g ++{_fg ,_a :=newParser .GetRevision (_g -1);
if _a !=nil {return nil ,_a ;};_ag ,_a :=newParser .GetRevision (_g );if _a !=nil {return nil ,_a ;};_eg ,_a :=_b .compareRevisions (_fg ,_ag );if _a !=nil {return nil ,_a ;};_bd .Warnings =append (_bd .Warnings ,_eg .Warnings ...);_bd .Errors =append (_bd .Errors ,_eg .Errors ...);
};return _bd ,nil ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_bcf *_ca .PdfParser ,_bde *_ca .PdfParser ,_edb *MDPParameters )(*DiffResults ,error );};func (_dfdb *DiffResults )addError (_fce *DiffResult ){if _dfdb .Errors ==nil {_dfdb .Errors =make ([]*DiffResult ,0);};_dfdb .Errors =append (_dfdb .Errors ,_fce );
};func (_cff *defaultDiffPolicy )compareFields (_dag int ,_ebb ,_dcf []_ca .PdfObject )error {_dg :=make (map[int64 ]*_ca .PdfObjectDictionary );for _ ,_db :=range _ebb {_ebc ,_ddb :=_ca .GetIndirect (_db );if !_ddb {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ff ,_ddb :=_ca .GetDict (_ebc .PdfObject );if !_ddb {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_dg [_ebc .ObjectNumber ]=_ff ;
};for _ ,_ee :=range _dcf {_gfe ,_cef :=_ca .GetIndirect (_ee );if !_cef {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bf ,_cef :=_ca .GetDict (_gfe .PdfObject );
if !_cef {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_bf .Get ("\u0054");if _ ,_dgc :=_cff ._cf [_gfe .ObjectNumber ];_dgc {switch _cff ._dc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cff ._e .addWarningWithDescription (_dag ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_cff ._e .addErrorWithDescription (_dag ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_egg :=_dg [_gfe .ObjectNumber ];!_egg {switch _cff ._dc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cff ._e .addWarningWithDescription (_dag ,_f .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bf .Get ("\u0054")));
default:_cff ._e .addErrorWithDescription (_dag ,_f .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_bf .Get ("\u0054")));};}else {delete (_dg ,_gfe .ObjectNumber );if _ ,_ebd :=_cff ._cf [_gfe .ObjectNumber ];
_ebd {switch _cff ._dc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cff ._e .addWarningWithDescription (_dag ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_bf .Get ("\u0054")));
default:_cff ._e .addErrorWithDescription (_dag ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_bf .Get ("\u0054")));};};};if FT ,_egb :=_ca .GetNameVal (_bf .Get ("\u0046\u0054"));_egb {if FT =="\u0053\u0069\u0067"{if _fee ,_gdf :=_ca .GetIndirect (_bf .Get ("\u0056"));
_gdf {if _ ,_daga :=_cff ._cf [_fee .ObjectNumber ];_daga {switch _cff ._dc {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_cff ._e .addWarningWithDescription (_dag ,_f .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_cff ._e .addErrorWithDescription (_dag ,_f .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_ed :=range _dg {switch _cff ._dc {case NoRestrictions :_cff ._e .addWarningWithDescription (_dag ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ed .Get ("\u0054")));default:_cff ._e .addErrorWithDescription (_dag ,_f .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ed .Get ("\u0054")));
};};return nil ;};

// IsPermitted returns true if changes permitted.
func (_cfb *DiffResults )IsPermitted ()bool {return len (_cfb .Errors )==0};func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_cf :nil ,_e :&DiffResults {},_dc :0};};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_bfd *defaultDiffPolicy )comparePages (_aac int ,_aag ,_fdb *_ca .PdfIndirectObject )error {if _ ,_ea :=_bfd ._cf [_fdb .ObjectNumber ];_ea {_bfd ._e .addErrorWithDescription (_aac ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_df ,_aec :=_ca .GetDict (_fdb .PdfObject );_be ,_bb :=_ca .GetDict (_aag .PdfObject );if !_aec ||!_bb {return _c .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ga ,_aec :=_ca .GetArray (_df .Get ("\u004b\u0069\u0064\u0073"));_bab ,_bb :=_ca .GetArray (_be .Get ("\u004b\u0069\u0064\u0073"));if !_aec ||!_bb {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_aae :=_ga .Len ();if _aae > _bab .Len (){_aae =_bab .Len ();};for _bad :=0;_bad < _aae ;_bad ++{_cac ,_de :=_ca .GetIndirect (_ca .ResolveReference (_bab .Get (_bad )));_dbd ,_cec :=_ca .GetIndirect (_ca .ResolveReference (_ga .Get (_bad )));if !_de ||!_cec {return _c .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _cac .ObjectNumber !=_dbd .ObjectNumber {_bfd ._e .addErrorWithDescription (_aac ,_f .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_bad ));};_fbe ,_de :=_ca .GetDict (_dbd );_ccd ,_cec :=_ca .GetDict (_cac );
if !_de ||!_cec {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_eac ,_gge :=_ebdf (_fbe .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _gge !=nil {return _gge ;};_eba ,_gge :=_ebdf (_ccd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _gge !=nil {return _gge ;};if _cd :=_bfd .compareAnnots (_aac ,_eba ,_eac );_cd !=nil {return _cd ;};};for _dcc :=_aae +1;_dcc <=_ga .Len ();_dcc ++{_bfd ._e .addErrorWithDescription (_aac ,_f .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_dcc ));
};for _abe :=_aae +1;_abe <=_bab .Len ();_abe ++{_bfd ._e .addErrorWithDescription (_aac ,_f .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_abe ));};return nil ;};func (_cc *defaultDiffPolicy )compareRevisions (_da *_ca .PdfParser ,_gf *_ca .PdfParser )(*DiffResults ,error ){var _af error ;
_cc ._cf ,_af =_gf .GetUpdatedObjects (_da );if _af !=nil {return &DiffResults {},_af ;};if len (_cc ._cf )==0{return &DiffResults {},nil ;};_daf :=_gf .GetRevisionNumber ();_ce ,_fb :=_ca .GetIndirect (_ca .ResolveReference (_da .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
_gg ,_aa :=_ca .GetIndirect (_ca .ResolveReference (_gf .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));if !_fb ||!_aa {return &DiffResults {},_c .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_fd ,_fb :=_ca .GetDict (_ca .ResolveReference (_ce .PdfObject ));_ad ,_aa :=_ca .GetDict (_ca .ResolveReference (_gg .PdfObject ));if !_fb ||!_aa {return &DiffResults {},_c .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _ae ,_fe :=_ca .GetIndirect (_ad .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fe {_cea ,_aee :=_ca .GetDict (_ae );if !_aee {return &DiffResults {},_c .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_fbg :=make ([]_ca .PdfObject ,0);if _afg ,_fa :=_ca .GetIndirect (_fd .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_fa {if _cg ,_ba :=_ca .GetDict (_afg );_ba {if _cfa ,_eb :=_ca .GetArray (_cg .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_eb {_fbg =_cfa .Elements ();};};};_ggb ,_aee :=_ca .GetArray (_cea .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_aee {return &DiffResults {},_c .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _gd :=_cc .compareFields (_daf ,_fbg ,_ggb .Elements ());_gd !=nil {return &DiffResults {},_gd ;};};_ef ,_ebf :=_ca .GetIndirect (_ad .Get ("\u0050\u0061\u0067e\u0073"));if !_ebf {return &DiffResults {},_c .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_fc ,_ebf :=_ca .GetIndirect (_fd .Get ("\u0050\u0061\u0067e\u0073"));if !_ebf {return &DiffResults {},_c .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _dd :=_cc .comparePages (_daf ,_fc ,_ef );_dd !=nil {return &DiffResults {},_dd ;};return _cc ._e ,nil ;};func (_acb *DiffResults )addErrorWithDescription (_agd int ,_dfb string ){if _acb .Errors ==nil {_acb .Errors =make ([]*DiffResult ,0);};_acb .Errors =append (_acb .Errors ,&DiffResult {Revision :_agd ,Description :_dfb });
};func (_gga *DiffResults )addWarning (_fbed *DiffResult ){if _gga .Warnings ==nil {_gga .Warnings =make ([]*DiffResult ,0);};_gga .Warnings =append (_gga .Warnings ,_fbed );};func (_dbc *defaultDiffPolicy )compareAnnots (_fdba int ,_dccf ,_ffa []_ca .PdfObject )error {_ccg :=make (map[int64 ]*_ca .PdfObjectDictionary );
for _ ,_bc :=range _dccf {_gc ,_baa :=_ca .GetIndirect (_bc );if !_baa {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_bcd ,_baa :=_ca .GetDict (_gc .PdfObject );
if !_baa {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ccg [_gc .ObjectNumber ]=_bcd ;};for _ ,_gb :=range _ffa {_egf ,_cgc :=_ca .GetIndirect (_gb );
if !_cgc {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_aacg ,_cgc :=_ca .GetDict (_egf .PdfObject );if !_cgc {return _c .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_cdf ,_ :=_ca .GetStringVal (_aacg .Get ("\u0054"));_dgg ,_ :=_ca .GetNameVal (_aacg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_ec :=_ccg [_egf .ObjectNumber ];!_ec {switch _dbc ._dc {case NoRestrictions ,FillFormsAndAnnots :_dbc ._e .addWarningWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dgg ,_cdf ));
default:_fef ,_ffd :=_ca .GetDict (_egf .PdfObject );if !_ffd {return _c .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_cgcg ,_ffd :=_ca .GetNameVal (_fef .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_ffd {return _c .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _cgcg =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _dbc ._dc {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_dbc ._e .addWarningWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dgg ,_cdf ));
default:_dbc ._e .addErrorWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dgg ,_cdf ));};}else {_dbc ._e .addErrorWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_dgg ,_cdf ));
};};}else {delete (_ccg ,_egf .ObjectNumber );if _bfe ,_ffac :=_dbc ._cf [_egf .ObjectNumber ];_ffac {switch _dbc ._dc {case NoRestrictions ,FillFormsAndAnnots :_dbc ._e .addWarningWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dgg ,_cdf ));
default:_dfd ,_fag :=_ca .GetIndirect (_bfe );if !_fag {return _c .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_dga ,_fag :=_ca .GetDict (_dfd .PdfObject );if !_fag {return _c .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_eea ,_fag :=_ca .GetNameVal (_dga .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_fag {return _c .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _eea =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _dbc ._dc {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_dbc ._e .addWarningWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dgg ,_cdf ));
default:_dbc ._e .addErrorWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dgg ,_cdf ));};}else {_dbc ._e .addErrorWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_dgg ,_cdf ));
};};};};};for _ ,_bae :=range _ccg {_efg ,_ :=_ca .GetStringVal (_bae .Get ("\u0054"));_ddd ,_ :=_ca .GetNameVal (_bae .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _dbc ._dc {case NoRestrictions ,FillFormsAndAnnots :_dbc ._e .addWarningWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ddd ,_efg ));
default:_dbc ._e .addErrorWithDescription (_fdba ,_f .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_ddd ,_efg ));};};return nil ;};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};type defaultDiffPolicy struct{_cf map[int64 ]_ca .PdfObject ;_e *DiffResults ;_dc DocMDPPermission ;};

// String returns the state of the warning.
func (_eef *DiffResult )String ()string {return _f .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_eef .Description ,_eef .Revision );};