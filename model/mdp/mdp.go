//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_b "errors";_a "fmt";_dg "github.com/unidoc/unipdf/v3/core";);func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_g :nil ,_ge :&DiffResults {},_f :0};};func (_eb *DiffResults )addWarningWithDescription (_bca int ,_gea string ){if _eb .Warnings ==nil {_eb .Warnings =make ([]*DiffResult ,0);
};_eb .Warnings =append (_eb .Warnings ,&DiffResult {Revision :_bca ,Description :_gea });};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_c *defaultDiffPolicy )ReviewFile (oldParser *_dg .PdfParser ,newParser *_dg .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_b .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_b .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_c ._f =NoRestrictions ;}else {_c ._f =params .DocMDPLevel ;};_ab :=&DiffResults {};for _e :=oldParser .GetRevisionNumber ()+1;_e <=newParser .GetRevisionNumber ();_e ++{_bd ,_ad :=newParser .GetRevision (_e -1);
if _ad !=nil {return nil ,_ad ;};_bdf ,_ad :=newParser .GetRevision (_e );if _ad !=nil {return nil ,_ad ;};_bg ,_ad :=_c .compareRevisions (_bd ,_bdf );if _ad !=nil {return nil ,_ad ;};_ab .Warnings =append (_ab .Warnings ,_bg .Warnings ...);_ab .Errors =append (_ab .Errors ,_bg .Errors ...);
};return _ab ,nil ;};func (_dbf *DiffResults )addErrorWithDescription (_fbf int ,_eed string ){if _dbf .Errors ==nil {_dbf .Errors =make ([]*DiffResult ,0);};_dbf .Errors =append (_dbf .Errors ,&DiffResult {Revision :_fbf ,Description :_eed });};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_egb *_dg .PdfParser ,_aff *_dg .PdfParser ,_dga *MDPParameters )(*DiffResults ,error );};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_aa *defaultDiffPolicy )compareRevisions (_af *_dg .PdfParser ,_de *_dg .PdfParser )(*DiffResults ,error ){var _ee error ;_aa ._g ,_ee =_de .GetUpdatedObjects (_af );if _ee !=nil {return &DiffResults {},_ee ;
};if len (_aa ._g )==0{return &DiffResults {},nil ;};_cg :=_de .GetRevisionNumber ();_cc ,_dc :=_dg .GetIndirect (_dg .ResolveReference (_af .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ag ,_ff :=_dg .GetIndirect (_dg .ResolveReference (_de .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_dc ||!_ff {return &DiffResults {},_b .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_ce ,_dc :=_dg .GetDict (_dg .ResolveReference (_cc .PdfObject ));
_ca ,_ff :=_dg .GetDict (_dg .ResolveReference (_ag .PdfObject ));if !_dc ||!_ff {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _cb ,_ffc :=_dg .GetIndirect (_ca .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ffc {_db ,_ed :=_dg .GetDict (_cb );if !_ed {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_eg :=make ([]_dg .PdfObject ,0);if _aae ,_ef :=_dg .GetIndirect (_ce .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ef {if _fe ,_geb :=_dg .GetDict (_aae );_geb {if _edb ,_ba :=_dg .GetArray (_fe .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_ba {_eg =_edb .Elements ();};};};_aac ,_ed :=_dg .GetArray (_db .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_ed {return &DiffResults {},_b .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _aga :=_aa .compareFields (_cg ,_eg ,_aac .Elements ());_aga !=nil {return &DiffResults {},_aga ;};};_afb ,_dd :=_dg .GetIndirect (_ca .Get ("\u0050\u0061\u0067e\u0073"));if !_dd {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_bf ,_dd :=_dg .GetIndirect (_ce .Get ("\u0050\u0061\u0067e\u0073"));if !_dd {return &DiffResults {},_b .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _gf :=_aa .comparePages (_cg ,_bf ,_afb );_gf !=nil {return &DiffResults {},_gf ;};return _aa ._ge ,nil ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;
);func (_gff *defaultDiffPolicy )compareAnnots (_caa int ,_dag ,_fed []_dg .PdfObject )error {_fgc :=make (map[int64 ]*_dg .PdfObjectDictionary );for _ ,_fae :=range _dag {_bc ,_baea :=_dg .GetIndirect (_fae );if !_baea {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_dgf ,_baea :=_dg .GetDict (_bc .PdfObject );if !_baea {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fgc [_bc .ObjectNumber ]=_dgf ;
};for _ ,_efa :=range _fed {_fdb ,_dcgb :=_dg .GetIndirect (_efa );if !_dcgb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fgg ,_dcgb :=_dg .GetDict (_fdb .PdfObject );
if !_dcgb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fbge ,_ :=_dg .GetStringVal (_fgg .Get ("\u0054"));_efb ,_ :=_dg .GetNameVal (_fgg .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if _ ,_efbe :=_fgc [_fdb .ObjectNumber ];!_efbe {switch _gff ._f {case NoRestrictions ,FillFormsAndAnnots :_gff ._ge .addWarningWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_efb ,_fbge ));
default:_ffgb ,_ada :=_dg .GetDict (_fdb .PdfObject );if !_ada {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_bbc ,_ada :=_dg .GetNameVal (_ffgb .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_ada {return _b .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _bbc =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _gff ._f {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_gff ._ge .addWarningWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_efb ,_fbge ));
default:_gff ._ge .addErrorWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_efb ,_fbge ));};}else {_gff ._ge .addErrorWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_efb ,_fbge ));
};};}else {delete (_fgc ,_fdb .ObjectNumber );if _aad ,_dedd :=_gff ._g [_fdb .ObjectNumber ];_dedd {switch _gff ._f {case NoRestrictions ,FillFormsAndAnnots :_gff ._ge .addWarningWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_efb ,_fbge ));
default:_cfc ,_acd :=_dg .GetIndirect (_aad );if !_acd {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_bcf ,_acd :=_dg .GetDict (_cfc .PdfObject );if !_acd {return _b .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_adb ,_acd :=_dg .GetNameVal (_bcf .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_acd {return _b .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _adb =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _gff ._f {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_gff ._ge .addWarningWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_efb ,_fbge ));
default:_gff ._ge .addErrorWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_efb ,_fbge ));};}else {_gff ._ge .addErrorWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_efb ,_fbge ));
};};};};};for _ ,_eff :=range _fgc {_fda ,_ :=_dg .GetStringVal (_eff .Get ("\u0054"));_bfd ,_ :=_dg .GetNameVal (_eff .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _gff ._f {case NoRestrictions ,FillFormsAndAnnots :_gff ._ge .addWarningWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_bfd ,_fda ));
default:_gff ._ge .addErrorWithDescription (_caa ,_a .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_bfd ,_fda ));};};return nil ;};func (_ffe *DiffResults )addError (_bcb *DiffResult ){if _ffe .Errors ==nil {_ffe .Errors =make ([]*DiffResult ,0);
};_ffe .Errors =append (_ffe .Errors ,_bcb );};

// IsPermitted returns true if changes permitted.
func (_dbg *DiffResults )IsPermitted ()bool {return len (_dbg .Errors )==0};type defaultDiffPolicy struct{_g map[int64 ]_dg .PdfObject ;_ge *DiffResults ;_f DocMDPPermission ;};func (_cgc *DiffResults )addWarning (_eedf *DiffResult ){if _cgc .Warnings ==nil {_cgc .Warnings =make ([]*DiffResult ,0);
};_cgc .Warnings =append (_cgc .Warnings ,_eedf );};func (_dcg *defaultDiffPolicy )compareFields (_afe int ,_abd ,_bb []_dg .PdfObject )error {_aaf :=make (map[int64 ]*_dg .PdfObjectDictionary );for _ ,_egc :=range _abd {_ec ,_gb :=_dg .GetIndirect (_egc );
if !_gb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gfg ,_gb :=_dg .GetDict (_ec .PdfObject );if !_gb {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_aaf [_ec .ObjectNumber ]=_gfg ;};for _ ,_cee :=range _bb {_ffg ,_ea :=_dg .GetIndirect (_cee );if !_ea {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_ac ,_ea :=_dg .GetDict (_ffg .PdfObject );if !_ea {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};T :=_ac .Get ("\u0054");if _ ,_gg :=_dcg ._g [_ffg .ObjectNumber ];
_gg {switch _dcg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_dcg ._ge .addWarningWithDescription (_afe ,_a .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));default:_dcg ._ge .addErrorWithDescription (_afe ,_a .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
};};if _ ,_abg :=_aaf [_ffg .ObjectNumber ];!_abg {switch _dcg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_dcg ._ge .addWarningWithDescription (_afe ,_a .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ac .Get ("\u0054")));
default:_dcg ._ge .addErrorWithDescription (_afe ,_a .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ac .Get ("\u0054")));};}else {delete (_aaf ,_ffg .ObjectNumber );if _ ,_da :=_dcg ._g [_ffg .ObjectNumber ];
_da {switch _dcg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_dcg ._ge .addWarningWithDescription (_afe ,_a .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ac .Get ("\u0054")));default:_dcg ._ge .addErrorWithDescription (_afe ,_a .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ac .Get ("\u0054")));
};};};if FT ,_bag :=_dg .GetNameVal (_ac .Get ("\u0046\u0054"));_bag {if FT =="\u0053\u0069\u0067"{if _dgb ,_cf :=_dg .GetIndirect (_ac .Get ("\u0056"));_cf {if _ ,_gc :=_dcg ._g [_dgb .ObjectNumber ];_gc {switch _dcg ._f {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_dcg ._ge .addWarningWithDescription (_afe ,_a .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_dcg ._ge .addErrorWithDescription (_afe ,_a .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_ae :=range _aaf {switch _dcg ._f {case NoRestrictions :_dcg ._ge .addWarningWithDescription (_afe ,_a .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ae .Get ("\u0054")));default:_dcg ._ge .addErrorWithDescription (_afe ,_a .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_ae .Get ("\u0054")));
};};return nil ;};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};func (_ecf *defaultDiffPolicy )comparePages (_ceb int ,_ece ,_gcc *_dg .PdfIndirectObject )error {if _ ,_egd :=_ecf ._g [_gcc .ObjectNumber ];_egd {_ecf ._ge .addErrorWithDescription (_ceb ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_ead ,_gec :=_dg .GetDict (_gcc .PdfObject );_fa ,_bga :=_dg .GetDict (_ece .PdfObject );if !_gec ||!_bga {return _b .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_bae ,_gec :=_dg .GetArray (_ead .Get ("\u004b\u0069\u0064\u0073"));_bbgb ,_bga :=_dg .GetArray (_fa .Get ("\u004b\u0069\u0064\u0073"));if !_gec ||!_bga {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_aee :=_bae .Len ();if _aee > _bbgb .Len (){_aee =_bbgb .Len ();};for _fbg :=0;_fbg < _aee ;_fbg ++{_eae ,_abe :=_dg .GetIndirect (_dg .ResolveReference (_bbgb .Get (_fbg )));_fd ,_ded :=_dg .GetIndirect (_dg .ResolveReference (_bae .Get (_fbg )));if !_abe ||!_ded {return _b .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _eae .ObjectNumber !=_fd .ObjectNumber {_ecf ._ge .addErrorWithDescription (_ceb ,_a .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_fbg ));};_edc ,_abe :=_dg .GetDict (_fd );_gd ,_ded :=_dg .GetDict (_eae );
if !_abe ||!_ded {return _b .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_fdd ,_df :=_be (_edc .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _df !=nil {return _df ;};_fc ,_df :=_be (_gd .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _df !=nil {return _df ;};if _cd :=_ecf .compareAnnots (_ceb ,_fc ,_fdd );_cd !=nil {return _cd ;};};for _fce :=_aee +1;_fce <=_bae .Len ();_fce ++{_ecf ._ge .addErrorWithDescription (_ceb ,_a .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_fce ));
};for _add :=_aee +1;_add <=_bbgb .Len ();_add ++{_ecf ._ge .addErrorWithDescription (_ceb ,_a .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_add ));};return nil ;};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;

// String returns the state of the warning.
func (_dcb *DiffResult )String ()string {return _a .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_dcb .Description ,_dcb .Revision );};func _be (_efe _dg .PdfObject )([]_dg .PdfObject ,error ){_edg :=make ([]_dg .PdfObject ,0);
if _efe !=nil {_fdde :=_efe ;if _fff ,_ceeb :=_dg .GetIndirect (_efe );_ceeb {_fdde =_fff .PdfObject ;};if _dgc ,_aed :=_dg .GetArray (_fdde );_aed {_edg =_dgc .Elements ();}else {return nil ,_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");
};};return _edg ,nil ;};