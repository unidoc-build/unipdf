//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_dd "bufio";_ef "bytes";_d "encoding/hex";_f "errors";_fe "fmt";_fd "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/core";_b "github.com/unidoc/unipdf/v3/internal/imageutil";_fg "github.com/unidoc/unipdf/v3/internal/transform";_cgc "github.com/unidoc/unipdf/v3/model";_fbb "image/color";_ee "image/jpeg";_e "io";_cg "math";_fb "strconv";);

// String is same as Bytes() except returns as a string for convenience.
func (_ebb *ContentCreator )String ()string {return string (_ebb ._faf .Bytes ())};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_egd *ContentCreator )SetNonStrokingColor (color _cgc .PdfColor )*ContentCreator {switch _aae :=color .(type ){case *_cgc .PdfColorDeviceGray :_egd .Add_g (_aae .Val ());case *_cgc .PdfColorDeviceRGB :_egd .Add_rg (_aae .R (),_aae .G (),_aae .B ());case *_cgc .PdfColorDeviceCMYK :_egd .Add_k (_aae .C (),_aae .M (),_aae .Y (),_aae .K ());default:_fd .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_aae );};return _egd ;};func (_bgg *ContentStreamParser )parseName ()(_a .PdfObjectName ,error ){_gaca :="";_edcb :=false ;for {_gfb ,_cff :=_bgg ._bcdd .Peek (1);if _cff ==_e .EOF {break ;};if _cff !=nil {return _a .PdfObjectName (_gaca ),_cff ;};if !_edcb {if _gfb [0]=='/'{_edcb =true ;_bgg ._bcdd .ReadByte ();}else {_fd .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_gfb ,_gfb );return _a .PdfObjectName (_gaca ),_fe .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gfb [0]);};}else {if _a .IsWhiteSpace (_gfb [0]){break ;}else if (_gfb [0]=='/')||(_gfb [0]=='[')||(_gfb [0]=='(')||(_gfb [0]==']')||(_gfb [0]=='<')||(_gfb [0]=='>'){break ;}else if _gfb [0]=='#'{_cbg ,_eece :=_bgg ._bcdd .Peek (3);if _eece !=nil {return _a .PdfObjectName (_gaca ),_eece ;};_bgg ._bcdd .Discard (3);_ecg ,_eece :=_d .DecodeString (string (_cbg [1:3]));if _eece !=nil {return _a .PdfObjectName (_gaca ),_eece ;};_gaca +=string (_ecg );}else {_bdgg ,_ :=_bgg ._bcdd .ReadByte ();_gaca +=string (_bdgg );};};};return _a .PdfObjectName (_gaca ),nil ;};func (_aabd *ContentStreamInlineImage )String ()string {_ddga :=_fe .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_aabd ._cdc ));if _aabd .BitsPerComponent !=nil {_ddga +="\u002d\u0020\u0042\u0050\u0043\u0020"+_aabd .BitsPerComponent .WriteString ()+"\u000a";};if _aabd .ColorSpace !=nil {_ddga +="\u002d\u0020\u0043S\u0020"+_aabd .ColorSpace .WriteString ()+"\u000a";};if _aabd .Decode !=nil {_ddga +="\u002d\u0020\u0044\u0020"+_aabd .Decode .WriteString ()+"\u000a";};if _aabd .DecodeParms !=nil {_ddga +="\u002d\u0020\u0044P\u0020"+_aabd .DecodeParms .WriteString ()+"\u000a";};if _aabd .Filter !=nil {_ddga +="\u002d\u0020\u0046\u0020"+_aabd .Filter .WriteString ()+"\u000a";};if _aabd .Height !=nil {_ddga +="\u002d\u0020\u0048\u0020"+_aabd .Height .WriteString ()+"\u000a";};if _aabd .ImageMask !=nil {_ddga +="\u002d\u0020\u0049M\u0020"+_aabd .ImageMask .WriteString ()+"\u000a";};if _aabd .Intent !=nil {_ddga +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_aabd .Intent .WriteString ()+"\u000a";};if _aabd .Interpolate !=nil {_ddga +="\u002d\u0020\u0049\u0020"+_aabd .Interpolate .WriteString ()+"\u000a";};if _aabd .Width !=nil {_ddga +="\u002d\u0020\u0057\u0020"+_aabd .Width .WriteString ()+"\u000a";};return _ddga ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ega *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_gdga :=ContentStreamOperation {};_gdga .Operand ="\u0063";_gdga .Params =_fbg ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_ega ._faf =append (_ega ._faf ,&_gdga );return _ega ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_ebc *ContentCreator )Add_Do (name _a .PdfObjectName )*ContentCreator {_eeg :=ContentStreamOperation {};_eeg .Operand ="\u0044\u006f";_eeg .Params =_adge ([]_a .PdfObjectName {name });_ebc ._faf =append (_ebc ._faf ,&_eeg );return _ebc ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_add *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_bdb :=ContentStreamOperation {};_bdb .Operand ="\u006b";_bdb .Params =_fbg ([]float64 {c ,m ,y ,k });_add ._faf =append (_add ._faf ,&_bdb );return _add ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_fgg *ContentStreamInlineImage )IsMask ()(bool ,error ){if _fgg .ImageMask !=nil {_gdc ,_efbf :=_fgg .ImageMask .(*_a .PdfObjectBool );if !_efbf {_fd .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_f .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_gdc ),nil ;};return false ,nil ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_abg HandlerConditionEnum )All ()bool {return _abg ==HandlerConditionEnumAllOperands };

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bd *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_ace :=ContentStreamOperation {};_ace .Operand ="\u006a";_ace .Params =_adge ([]_a .PdfObjectName {_a .PdfObjectName (lineJoinStyle )});_bd ._faf =append (_bd ._faf ,&_ace );return _bd ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_ebdb :=ContentStreamParser {};_ggbb :=_ef .NewBufferString (contentStr +"\u000a");_ebdb ._bcdd =_dd .NewReader (_ggbb );return &_ebdb ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ggg *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_cacd :=ContentStreamOperation {};_cacd .Operand ="\u0054\u0073";_cacd .Params =_fbg ([]float64 {rise });_ggg ._faf =append (_ggg ._faf ,&_cacd );return _ggg ;};var _cgbc =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};func (_gbda *ContentStreamProcessor )handleCommand_rg (_cggf *ContentStreamOperation ,_beded *_cgc .PdfPageResources )error {_fef :=_cgc .NewPdfColorspaceDeviceRGB ();if len (_cggf .Params )!=_fef .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cggf .Params ),_fef );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gga ,_cggb :=_fef .ColorFromPdfObjects (_cggf .Params );if _cggb !=nil {return _cggb ;};_gbda ._ecge .ColorspaceNonStroking =_fef ;_gbda ._ecge .ColorNonStroking =_gga ;return nil ;};func (_fdaf *ContentStreamProcessor )handleCommand_G (_gffd *ContentStreamOperation ,_ecd *_cgc .PdfPageResources )error {_ecdb :=_cgc .NewPdfColorspaceDeviceGray ();if len (_gffd .Params )!=_ecdb .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gffd .Params ),_ecdb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cdecg ,_eab :=_ecdb .ColorFromPdfObjects (_gffd .Params );if _eab !=nil {return _eab ;};_fdaf ._ecge .ColorspaceStroking =_ecdb ;_fdaf ._ecge .ColorStroking =_cdecg ;return nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bbe *ContentCreator )Add_f_starred ()*ContentCreator {_ecb :=ContentStreamOperation {};_ecb .Operand ="\u0066\u002a";_bbe ._faf =append (_bbe ._faf ,&_ecb );return _bbe ;};func (_fge *ContentStreamOperations )isWrapped ()bool {if len (*_fge )< 2{return false ;};_dg :=0;for _ ,_bg :=range *_fge {if _bg .Operand =="\u0071"{_dg ++;}else if _bg .Operand =="\u0051"{_dg --;}else {if _dg < 1{return false ;};};};return _dg ==0;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fgf *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_bdd :=ContentStreamOperation {};_bdd .Operand ="\u0079";_bdd .Params =_fbg ([]float64 {x1 ,y1 ,x3 ,y3 });_fgf ._faf =append (_fgf ._faf ,&_bdd );return _fgf ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_be *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0072\u0067";_dga .Params =_fbg ([]float64 {r ,g ,b });_be ._faf =append (_be ._faf ,&_dga );return _be ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cf *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_ffg :=ContentStreamOperation {};_ffg .Operand ="\u0054\u0077";_ffg .Params =_fbg ([]float64 {wordSpace });_cf ._faf =append (_cf ._faf ,&_ffg );return _cf ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cc *ContentCreator )Add_Q ()*ContentCreator {_dac :=ContentStreamOperation {};_dac .Operand ="\u0051";_cc ._faf =append (_cc ._faf ,&_dac );return _cc ;};func (_fcd *ContentStreamProcessor )handleCommand_cm (_gcce *ContentStreamOperation ,_bcag *_cgc .PdfPageResources )error {if len (_gcce .Params )!=6{_fd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_gcce .Params ));return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cbcb ,_cfd :=_a .GetNumbersAsFloat (_gcce .Params );if _cfd !=nil {return _cfd ;};_cdea :=_fg .NewMatrix (_cbcb [0],_cbcb [1],_cbcb [2],_cbcb [3],_cbcb [4],_cbcb [5]);_fcd ._ecge .CTM .Concat (_cdea );return nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cgf *ContentCreator )Add_Tj (textstr _a .PdfObjectString )*ContentCreator {_cacb :=ContentStreamOperation {};_cacb .Operand ="\u0054\u006a";_cacb .Params =_egc ([]_a .PdfObjectString {textstr });_cgf ._faf =append (_cgf ._faf ,&_cacb );return _cgf ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_aceb *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_ebgbg :=handlerEntry {};_ebgbg .Condition =condition ;_ebgbg .Operand =operand ;_ebgbg .Handler =handler ;_aceb ._cgfb =append (_aceb ._cgfb ,_ebgbg );};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_g *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_g )==0{return _g ;};if _g .isWrapped (){return _g ;};*_g =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_g ...);_fee :=0;for _ ,_eb :=range *_g {if _eb .Operand =="\u0071"{_fee ++;}else if _eb .Operand =="\u0051"{_fee --;};};for _fee > 0{*_g =append (*_g ,&ContentStreamOperation {Operand :"\u0051"});_fee --;};return _g ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_de *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_gda :=ContentStreamOperation {};_gda .Operand ="\u006d";_gda .Params =_fbg ([]float64 {x ,y });_de ._faf =append (_de ._faf ,&_gda );return _de ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_bc *ContentStreamOperations )Bytes ()[]byte {var _fbc _ef .Buffer ;for _ ,_aa :=range *_bc {if _aa ==nil {continue ;};if _aa .Operand =="\u0042\u0049"{_fbc .WriteString (_aa .Operand +"\u000a");_fbc .WriteString (_aa .Params [0].WriteString ());}else {for _ ,_aag :=range _aa .Params {_fbc .WriteString (_aag .WriteString ());_fbc .WriteString ("\u0020");};_fbc .WriteString (_aa .Operand +"\u000a");};};return _fbc .Bytes ();};func (_eaf *ContentStreamParser )skipComments ()error {if _ ,_gfdd :=_eaf .skipSpaces ();_gfdd !=nil {return _gfdd ;};_fag :=true ;for {_cgga ,_cacbg :=_eaf ._bcdd .Peek (1);if _cacbg !=nil {_fd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cacbg .Error ());return _cacbg ;};if _fag &&_cgga [0]!='%'{return nil ;};_fag =false ;if (_cgga [0]!='\r')&&(_cgga [0]!='\n'){_eaf ._bcdd .ReadByte ();}else {break ;};};return _eaf .skipComments ();};func _gce (_ebbg string )bool {_ ,_ddec :=_cgbc [_ebbg ];return _ddec };

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ed *ContentCreator )Add_scn_pattern (name _a .PdfObjectName ,c ...float64 )*ContentCreator {_cce :=ContentStreamOperation {};_cce .Operand ="\u0073\u0063\u006e";_cce .Params =_fbg (c );_cce .Params =append (_cce .Params ,_a .MakeName (string (name )));_ed ._faf =append (_ed ._faf ,&_cce );return _ed ;};

// GetColorSpace returns the colorspace of the inline image.
func (_eec *ContentStreamInlineImage )GetColorSpace (resources *_cgc .PdfPageResources )(_cgc .PdfColorspace ,error ){if _eec .ColorSpace ==nil {_fd .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _cgc .NewPdfColorspaceDeviceGray (),nil ;};if _gffg ,_edab :=_eec .ColorSpace .(*_a .PdfObjectArray );_edab {return _fdbc (_gffg );};_fdaef ,_dbb :=_eec .ColorSpace .(*_a .PdfObjectName );if !_dbb {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_eec .ColorSpace ,_eec .ColorSpace );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fdaef =="\u0047"||*_fdaef =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _cgc .NewPdfColorspaceDeviceGray (),nil ;}else if *_fdaef =="\u0052\u0047\u0042"||*_fdaef =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _cgc .NewPdfColorspaceDeviceRGB (),nil ;}else if *_fdaef =="\u0043\u004d\u0059\u004b"||*_fdaef =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _cgc .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_fdaef =="\u0049"||*_fdaef =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_f .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_fd .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_fdaef );return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_fff ,_gadcc :=resources .GetColorspaceByName (*_fdaef );if !_gadcc {_fd .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_fdaef );return nil ,_f .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _fff ,nil ;};};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_aed *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_gfd :=ContentStreamOperation {};_gfd .Operand ="\u0054\u0044";_gfd .Params =_fbg ([]float64 {tx ,ty });_aed ._faf =append (_aed ._faf ,&_gfd );return _aed ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_baef *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_fdgf :=ContentStreamInlineImage {};for {_baef .skipSpaces ();_aba ,_ded ,_fafg :=_baef .parseObject ();if _fafg !=nil {return nil ,_fafg ;};if !_ded {_dgff ,_gdd :=_a .GetName (_aba );if !_gdd {_fd .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_aba );return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_aba );};_gfg ,_dde ,_feeg :=_baef .parseObject ();if _feeg !=nil {return nil ,_feeg ;};if _dde {return nil ,_fe .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_dgff {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_fdgf .BitsPerComponent =_gfg ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_fdgf .ColorSpace =_gfg ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_fdgf .Decode =_gfg ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_fdgf .DecodeParms =_gfg ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_fdgf .Filter =_gfg ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_fdgf .Height =_gfg ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_fdgf .ImageMask =_gfg ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_fdgf .Intent =_gfg ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_fdgf .Interpolate =_gfg ;case "\u0057","\u0057\u0069\u0064t\u0068":_fdgf .Width =_gfg ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_fd .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_dgff );default:return nil ,_fe .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_dgff );};};if _ded {_fab ,_ccdf :=_aba .(*_a .PdfObjectString );if !_ccdf {return nil ,_fe .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _fab .Str ()=="\u0045\u0049"{_fd .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_fdgf ,nil ;}else if _fab .Str ()=="\u0049\u0044"{_fd .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_febc ,_bbbc :=_baef ._bcdd .Peek (1);if _bbbc !=nil {return nil ,_bbbc ;};if _a .IsWhiteSpace (_febc [0]){_baef ._bcdd .Discard (1);};_fdgf ._cdc =[]byte {};_egad :=0;var _fgce []byte ;for {_ccb ,_bec :=_baef ._bcdd .ReadByte ();if _bec !=nil {_fd .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_bec ;};if _egad ==0{if _a .IsWhiteSpace (_ccb ){_fgce =[]byte {};_fgce =append (_fgce ,_ccb );_egad =1;}else if _ccb =='E'{_fgce =append (_fgce ,_ccb );_egad =2;}else {_fdgf ._cdc =append (_fdgf ._cdc ,_ccb );};}else if _egad ==1{_fgce =append (_fgce ,_ccb );if _ccb =='E'{_egad =2;}else {_fdgf ._cdc =append (_fdgf ._cdc ,_fgce ...);_fgce =[]byte {};if _a .IsWhiteSpace (_ccb ){_egad =1;}else {_egad =0;};};}else if _egad ==2{_fgce =append (_fgce ,_ccb );if _ccb =='I'{_egad =3;}else {_fdgf ._cdc =append (_fdgf ._cdc ,_fgce ...);_fgce =[]byte {};_egad =0;};}else if _egad ==3{_fgce =append (_fgce ,_ccb );if _a .IsWhiteSpace (_ccb ){_cgfe ,_gab :=_baef ._bcdd .Peek (20);if _gab !=nil &&_gab !=_e .EOF {return nil ,_gab ;};_agfg :=NewContentStreamParser (string (_cgfe ));_ggbe :=true ;for _dafc :=0;_dafc < 3;_dafc ++{_bced ,_bcb ,_adgc :=_agfg .parseObject ();if _adgc !=nil {if _adgc ==_e .EOF {break ;};continue ;};if _bcb &&!_gce (_bced .String ()){_ggbe =false ;break ;};};if _ggbe {if len (_fdgf ._cdc )> 100{_fd .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_fdgf ._cdc ),_fdgf ._cdc [:100]);}else {_fd .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_fdgf ._cdc ),_fdgf ._cdc );};return &_fdgf ,nil ;};};_fdgf ._cdc =append (_fdgf ._cdc ,_fgce ...);_fgce =[]byte {};_egad =0;};};};};};};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_efa *ContentCreator )Add_ET ()*ContentCreator {_gec :=ContentStreamOperation {};_gec .Operand ="\u0045\u0054";_efa ._faf =append (_efa ._faf ,&_gec );return _efa ;};func _adge (_bfda []_a .PdfObjectName )[]_a .PdfObject {var _beed []_a .PdfObject ;for _ ,_fac :=range _bfda {_beed =append (_beed ,_a .MakeName (string (_fac )));};return _beed ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;func (_aagg *ContentStreamProcessor )getInitialColor (_gadce _cgc .PdfColorspace )(_cgc .PdfColor ,error ){switch _agca :=_gadce .(type ){case *_cgc .PdfColorspaceDeviceGray :return _cgc .NewPdfColorDeviceGray (0.0),nil ;case *_cgc .PdfColorspaceDeviceRGB :return _cgc .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_cgc .PdfColorspaceDeviceCMYK :return _cgc .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_cgc .PdfColorspaceCalGray :return _cgc .NewPdfColorCalGray (0.0),nil ;case *_cgc .PdfColorspaceCalRGB :return _cgc .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_cgc .PdfColorspaceLab :_bda :=0.0;_fabe :=0.0;_beaa :=0.0;if _agca .Range [0]> 0{_bda =_agca .Range [0];};if _agca .Range [2]> 0{_fabe =_agca .Range [2];};return _cgc .NewPdfColorLab (_bda ,_fabe ,_beaa ),nil ;case *_cgc .PdfColorspaceICCBased :if _agca .Alternate ==nil {_fd .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_agca .N );if _agca .N ==1{_fd .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _aagg .getInitialColor (_cgc .NewPdfColorspaceDeviceGray ());}else if _agca .N ==3{_fd .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _aagg .getInitialColor (_cgc .NewPdfColorspaceDeviceRGB ());}else if _agca .N ==4{_fd .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _aagg .getInitialColor (_cgc .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_f .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _aagg .getInitialColor (_agca .Alternate );case *_cgc .PdfColorspaceSpecialIndexed :if _agca .Base ==nil {return nil ,_f .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _aagg .getInitialColor (_agca .Base );case *_cgc .PdfColorspaceSpecialSeparation :if _agca .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _aagg .getInitialColor (_agca .AlternateSpace );case *_cgc .PdfColorspaceDeviceN :if _agca .AlternateSpace ==nil {return nil ,_f .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _aagg .getInitialColor (_agca .AlternateSpace );case *_cgc .PdfColorspaceSpecialPattern :return nil ,nil ;};_fd .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_gadce );return nil ,_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};func (_dccg *ContentStreamParser )parseObject ()(_ade _a .PdfObject ,_bcfe bool ,_egg error ){_dccg .skipSpaces ();for {_cebd ,_cbd :=_dccg ._bcdd .Peek (2);if _cbd !=nil {return nil ,false ,_cbd ;};_fd .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cebd ));if _cebd [0]=='%'{_dccg .skipComments ();continue ;}else if _cebd [0]=='/'{_bcfa ,_baed :=_dccg .parseName ();_fd .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_bcfa );return &_bcfa ,false ,_baed ;}else if _cebd [0]=='('{_fd .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_bfbb ,_caad :=_dccg .parseString ();return _bfbb ,false ,_caad ;}else if _cebd [0]=='<'&&_cebd [1]!='<'{_fd .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_fcc ,_ebgb :=_dccg .parseHexString ();return _fcc ,false ,_ebgb ;}else if _cebd [0]=='['{_fd .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_gdgb ,_afef :=_dccg .parseArray ();return _gdgb ,false ,_afef ;}else if _a .IsFloatDigit (_cebd [0])||(_cebd [0]=='-'&&_a .IsFloatDigit (_cebd [1])){_fd .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_faga ,_bff :=_dccg .parseNumber ();return _faga ,false ,_bff ;}else if _cebd [0]=='<'&&_cebd [1]=='<'{_cgfef ,_gge :=_dccg .parseDict ();return _cgfef ,false ,_gge ;}else {_fd .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_cebd ,_ =_dccg ._bcdd .Peek (5);_cbc :=string (_cebd );_fd .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_cbc );if (len (_cbc )> 3)&&(_cbc [:4]=="\u006e\u0075\u006c\u006c"){_fga ,_gfa :=_dccg .parseNull ();return &_fga ,false ,_gfa ;}else if (len (_cbc )> 4)&&(_cbc [:5]=="\u0066\u0061\u006cs\u0065"){_ddac ,_fdac :=_dccg .parseBool ();return &_ddac ,false ,_fdac ;}else if (len (_cbc )> 3)&&(_cbc [:4]=="\u0074\u0072\u0075\u0065"){_gcea ,_bede :=_dccg .parseBool ();return &_gcea ,false ,_bede ;};_gddg ,_cfag :=_dccg .parseOperand ();if _cfag !=nil {return _gddg ,false ,_cfag ;};if len (_gddg .String ())< 1{return _gddg ,false ,ErrInvalidOperand ;};return _gddg ,true ,nil ;};};};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ebg *ContentCreator )Add_TJ (vals ..._a .PdfObject )*ContentCreator {_gbe :=ContentStreamOperation {};_gbe .Operand ="\u0054\u004a";_gbe .Params =[]_a .PdfObject {_a .MakeArray (vals ...)};_ebg ._faf =append (_ebg ._faf ,&_gbe );return _ebg ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fgcg *ContentCreator )Add_B ()*ContentCreator {_ab :=ContentStreamOperation {};_ab .Operand ="\u0042";_fgcg ._faf =append (_fgcg ._faf ,&_ab );return _fgcg ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ced *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_bf :=ContentStreamOperation {};_bf .Operand ="\u0072\u0065";_bf .Params =_fbg ([]float64 {x ,y ,width ,height });_ced ._faf =append (_ced ._faf ,&_bf );return _ced ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dge *ContentCreator )Add_n ()*ContentCreator {_abce :=ContentStreamOperation {};_abce .Operand ="\u006e";_dge ._faf =append (_dge ._faf ,&_abce );return _dge ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;func (_ccbc *ContentStreamProcessor )handleCommand_sc (_beag *ContentStreamOperation ,_ede *_cgc .PdfPageResources )error {_dec :=_ccbc ._ecge .ColorspaceNonStroking ;if !_dggb (_dec ){if len (_beag .Params )!=_dec .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_beag .Params ),_dec );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_cccca ,_eggb :=_dec .ColorFromPdfObjects (_beag .Params );if _eggb !=nil {return _eggb ;};_ccbc ._ecge .ColorNonStroking =_cccca ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_dad *ContentStreamInlineImage )ToImage (resources *_cgc .PdfPageResources )(*_cgc .Image ,error ){_ebcg ,_edc :=_dad .toImageBase (resources );if _edc !=nil {return nil ,_edc ;};_fae ,_edc :=_afa (_dad );if _edc !=nil {return nil ,_edc ;};_fd .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_fae ,_fae );_fd .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_dad );_eege ,_edc :=_fae .DecodeBytes (_dad ._cdc );if _edc !=nil {return nil ,_edc ;};_dgg :=&_cgc .Image {Width :int64 (_ebcg .Width ),Height :int64 (_ebcg .Height ),BitsPerComponent :int64 (_ebcg .BitsPerComponent ),ColorComponents :_ebcg .ColorComponents ,Data :_eege };if len (_ebcg .Decode )> 0{for _afge :=0;_afge < len (_ebcg .Decode );_afge ++{_ebcg .Decode [_afge ]*=float64 ((int (1)<<uint (_ebcg .BitsPerComponent ))-1);};_dgg .SetDecode (_ebcg .Decode );};return _dgg ,nil ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_geca *ContentCreator )Add_quote (textstr _a .PdfObjectString )*ContentCreator {_cddc :=ContentStreamOperation {};_cddc .Operand ="\u0027";_cddc .Params =_egc ([]_a .PdfObjectString {textstr });_geca ._faf =append (_geca ._faf ,&_cddc );return _geca ;};func (_dca *ContentStreamProcessor )getColorspace (_affe string ,_dadd *_cgc .PdfPageResources )(_cgc .PdfColorspace ,error ){switch _affe {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _cgc .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _cgc .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _cgc .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _cgc .NewPdfColorspaceSpecialPattern (),nil ;};_bfdf ,_deg :=_dadd .GetColorspaceByName (_a .PdfObjectName (_affe ));if _deg {return _bfdf ,nil ;};switch _affe {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _cgc .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _cgc .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _cgc .NewPdfColorspaceLab (),nil ;};_fd .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_affe );return nil ,_fe .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_affe );};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gca *ContentCreator )Add_gs (dictName _a .PdfObjectName )*ContentCreator {_bbc :=ContentStreamOperation {};_bbc .Operand ="\u0067\u0073";_bbc .Params =_adge ([]_a .PdfObjectName {dictName });_gca ._faf =append (_gca ._faf ,&_bbc );return _gca ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ada *ContentCreator )Add_ri (intent _a .PdfObjectName )*ContentCreator {_bgc :=ContentStreamOperation {};_bgc .Operand ="\u0072\u0069";_bgc .Params =_adge ([]_a .PdfObjectName {intent });_ada ._faf =append (_ada ._faf ,&_bgc );return _ada ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fea *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u0054\u006d";_ffe .Params =_fbg ([]float64 {a ,b ,c ,d ,e ,f });_fea ._faf =append (_fea ._faf ,&_ffe );return _fea ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_da :=&ContentCreator {};_da ._faf =ContentStreamOperations {};return _da ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eef *ContentCreator )Add_SCN_pattern (name _a .PdfObjectName ,c ...float64 )*ContentCreator {_faag :=ContentStreamOperation {};_faag .Operand ="\u0053\u0043\u004e";_faag .Params =_fbg (c );_faag .Params =append (_faag .Params ,_a .MakeName (string (name )));_eef ._faf =append (_eef ._faf ,&_faag );return _eef ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dce *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u0054\u0063";_gcd .Params =_fbg ([]float64 {charSpace });_dce ._faf =append (_dce ._faf ,&_gcd );return _dce ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _cgc .Image ,encoder _a .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_a .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_egag :=ContentStreamInlineImage {};if img .ColorComponents ==1{_egag .ColorSpace =_a .MakeName ("\u0047");}else if img .ColorComponents ==3{_egag .ColorSpace =_a .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_egag .ColorSpace =_a .MakeName ("\u0043\u004d\u0059\u004b");}else {_fd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_egag .BitsPerComponent =_a .MakeInteger (img .BitsPerComponent );_egag .Width =_a .MakeInteger (img .Width );_egag .Height =_a .MakeInteger (img .Height );_gbeg ,_cfe :=encoder .EncodeBytes (img .Data );if _cfe !=nil {return nil ,_cfe ;};_egag ._cdc =_gbeg ;_agfe :=encoder .GetFilterName ();if _agfe !=_a .StreamEncodingFilterNameRaw {_egag .Filter =_a .MakeName (_agfe );};return &_egag ,nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ddg *ContentCreator )Add_q ()*ContentCreator {_cde :=ContentStreamOperation {};_cde .Operand ="\u0071";_ddg ._faf =append (_ddg ._faf ,&_cde );return _ddg ;};func _geb (_aac *ContentStreamInlineImage ,_aaaed *_a .PdfObjectDictionary )(*_a .LZWEncoder ,error ){_fdae :=_a .NewLZWEncoder ();if _aaaed ==nil {if _aac .DecodeParms !=nil {_abba ,_caec :=_a .GetDict (_aac .DecodeParms );if !_caec {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_aac .DecodeParms );return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_aaaed =_abba ;};};if _aaaed ==nil {return _fdae ,nil ;};_ccc :=_aaaed .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _ccc !=nil {_ebf ,_bcg :=_ccc .(*_a .PdfObjectInteger );if !_bcg {_fd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_ccc );return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_ebf !=0&&*_ebf !=1{return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_fdae .EarlyChange =int (*_ebf );}else {_fdae .EarlyChange =1;};_ccc =_aaaed .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ccc !=nil {_cdec ,_cef :=_ccc .(*_a .PdfObjectInteger );if !_cef {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ccc );return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_fdae .Predictor =int (*_cdec );};_ccc =_aaaed .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _ccc !=nil {_adff ,_gadc :=_ccc .(*_a .PdfObjectInteger );if !_gadc {_fd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_fe .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_fdae .BitsPerComponent =int (*_adff );};if _fdae .Predictor > 1{_fdae .Columns =1;_ccc =_aaaed .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _ccc !=nil {_fca ,_fcba :=_ccc .(*_a .PdfObjectInteger );if !_fcba {return nil ,_fe .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_fdae .Columns =int (*_fca );};_fdae .Colors =1;_ccc =_aaaed .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _ccc !=nil {_ddb ,_bcd :=_ccc .(*_a .PdfObjectInteger );if !_bcd {return nil ,_fe .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_fdae .Colors =int (*_ddb );};};_fd .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_aaaed .String ());return _fdae ,nil ;};

// String returns `ops.Bytes()` as a string.
func (_gc *ContentStreamOperations )String ()string {return string (_gc .Bytes ())};func _dggb (_cgcd _cgc .PdfColorspace )bool {_ ,_dfa :=_cgcd .(*_cgc .PdfColorspaceSpecialPattern );return _dfa ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_fbeb :=ContentStreamProcessor {};_fbeb ._ege =GraphicStateStack {};_egbc :=GraphicsState {};_fbeb ._ecge =_egbc ;_fbeb ._cgfb =[]handlerEntry {};_fbeb ._ddee =0;_fbeb ._adeb =ops ;return &_fbeb ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_ffag *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _ffag .CTM .Transform (x ,y );};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_aeg *ContentCreator )Add_b_starred ()*ContentCreator {_abc :=ContentStreamOperation {};_abc .Operand ="\u0062\u002a";_aeg ._faf =append (_aeg ._faf ,&_abc );return _aeg ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_bae *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _bae .Add_cm (1,0,0,1,tx ,ty );};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bde *ContentCreator )Add_Tstar ()*ContentCreator {_fdb :=ContentStreamOperation {};_fdb .Operand ="\u0054\u002a";_bde ._faf =append (_bde ._faf ,&_fdb );return _bde ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dfgc *ContentCreator )Add_Tf (fontName _a .PdfObjectName ,fontSize float64 )*ContentCreator {_daa :=ContentStreamOperation {};_daa .Operand ="\u0054\u0066";_daa .Params =_adge ([]_a .PdfObjectName {fontName });_daa .Params =append (_daa .Params ,_fbg ([]float64 {fontSize })...);_dfgc ._faf =append (_dfgc ._faf ,&_daa );return _dfgc ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_deb *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_ebe :=ContentStreamOperation {};_ebe .Operand ="\u006c";_ebe .Params =_fbg ([]float64 {x ,y });_deb ._faf =append (_deb ._faf ,&_ebe );return _deb ;};func (_feed *ContentStreamParser )parseHexString ()(*_a .PdfObjectString ,error ){_feed ._bcdd .ReadByte ();_gefb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _aabe []byte ;for {_feed .skipSpaces ();_cbb ,_gdag :=_feed ._bcdd .Peek (1);if _gdag !=nil {return _a .MakeString (""),_gdag ;};if _cbb [0]=='>'{_feed ._bcdd .ReadByte ();break ;};_aaaf ,_ :=_feed ._bcdd .ReadByte ();if _ef .IndexByte (_gefb ,_aaaf )>=0{_aabe =append (_aabe ,_aaaf );};};if len (_aabe )%2==1{_aabe =append (_aabe ,'0');};_aeb ,_ :=_d .DecodeString (string (_aabe ));return _a .MakeHexString (string (_aeb )),nil ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efc *ContentCreator )Add_G (gray float64 )*ContentCreator {_cae :=ContentStreamOperation {};_cae .Operand ="\u0047";_cae .Params =_fbg ([]float64 {gray });_efc ._faf =append (_efc ._faf ,&_cae );return _efc ;};func _fbg (_dcfa []float64 )[]_a .PdfObject {var _bedg []_a .PdfObject ;for _ ,_aef :=range _dcfa {_bedg =append (_bedg ,_a .MakeFloat (_aef ));};return _bedg ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dbe *ContentCreator )Add_BMC (tag _a .PdfObjectName )*ContentCreator {_fbd :=ContentStreamOperation {};_fbd .Operand ="\u0042\u004d\u0043";_fbd .Params =_adge ([]_a .PdfObjectName {tag });_dbe ._faf =append (_dbe ._faf ,&_fbd );return _dbe ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_ga *ContentCreator )Add_sh (name _a .PdfObjectName )*ContentCreator {_gef :=ContentStreamOperation {};_gef .Operand ="\u0073\u0068";_gef .Params =_adge ([]_a .PdfObjectName {name });_ga ._faf =append (_ga ._faf ,&_gef );return _ga ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ged *ContentCreator )Add_g (gray float64 )*ContentCreator {_bcec :=ContentStreamOperation {};_bcec .Operand ="\u0067";_bcec .Params =_fbg ([]float64 {gray });_ged ._faf =append (_ged ._faf ,&_bcec );return _ged ;};func (_dee *ContentStreamProcessor )handleCommand_g (_dccf *ContentStreamOperation ,_gbb *_cgc .PdfPageResources )error {_bgfc :=_cgc .NewPdfColorspaceDeviceGray ();if len (_dccf .Params )!=_bgfc .GetNumComponents (){_fd .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dccf .Params ),_bgfc );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_affc ,_bcc :=_bgfc .ColorFromPdfObjects (_dccf .Params );if _bcc !=nil {_fd .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_bgfc ,_dccf ,_bcc );return _bcc ;};_dee ._ecge .ColorspaceNonStroking =_bgfc ;_dee ._ecge .ColorNonStroking =_affc ;return nil ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gcag *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_bbcf :=ContentStreamOperation {};_bbcf .Operand ="\u0054\u007a";_bbcf .Params =_fbg ([]float64 {scale });_gcag ._faf =append (_gcag ._faf ,&_bbcf );return _gcag ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_faa *ContentCreator )Add_h ()*ContentCreator {_cga :=ContentStreamOperation {};_cga .Operand ="\u0068";_faa ._faf =append (_faa ._faf ,&_cga );return _faa ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dda *ContentCreator )Add_S ()*ContentCreator {_efg :=ContentStreamOperation {};_efg .Operand ="\u0053";_dda ._faf =append (_dda ._faf ,&_efg );return _dda ;};func (_ffd *ContentStreamParser )parseNumber ()(_a .PdfObject ,error ){return _a .ParseNumber (_ffd ._bcdd );};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cdde *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_dgaf :=ContentStreamOperation {};_dgaf .Operand ="\u004b";_dgaf .Params =_fbg ([]float64 {c ,m ,y ,k });_cdde ._faf =append (_cdde ._faf ,&_dgaf );return _cdde ;};func (_eecc *ContentStreamProcessor )handleCommand_SCN (_egbcf *ContentStreamOperation ,_eeb *_cgc .PdfPageResources )error {_dbga :=_eecc ._ecge .ColorspaceStroking ;if !_dggb (_dbga ){if len (_egbcf .Params )!=_dbga .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_egbcf .Params ),_dbga );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fdaca ,_dcga :=_dbga .ColorFromPdfObjects (_egbcf .Params );if _dcga !=nil {return _dcga ;};_eecc ._ecge .ColorStroking =_fdaca ;return nil ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_adf *ContentCreator )Add_W_starred ()*ContentCreator {_def :=ContentStreamOperation {};_def .Operand ="\u0057\u002a";_adf ._faf =append (_adf ._faf ,&_def );return _adf ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_cd *ContentStreamParser )ExtractText ()(string ,error ){_efb ,_ba :=_cd .Parse ();if _ba !=nil {return "",_ba ;};_ca :=false ;_ag ,_gb :=float64 (-1),float64 (-1);_ebd :="";for _ ,_df :=range *_efb {if _df .Operand =="\u0042\u0054"{_ca =true ;}else if _df .Operand =="\u0045\u0054"{_ca =false ;};if _df .Operand =="\u0054\u0064"||_df .Operand =="\u0054\u0044"||_df .Operand =="\u0054\u002a"{_ebd +="\u000a";};if _df .Operand =="\u0054\u006d"{if len (_df .Params )!=6{continue ;};_ggc ,_ce :=_df .Params [4].(*_a .PdfObjectFloat );if !_ce {_acg ,_bb :=_df .Params [4].(*_a .PdfObjectInteger );if !_bb {continue ;};_ggc =_a .MakeFloat (float64 (*_acg ));};_dfg ,_ce :=_df .Params [5].(*_a .PdfObjectFloat );if !_ce {_ddd ,_fa :=_df .Params [5].(*_a .PdfObjectInteger );if !_fa {continue ;};_dfg =_a .MakeFloat (float64 (*_ddd ));};if _gb ==-1{_gb =float64 (*_dfg );}else if _gb > float64 (*_dfg ){_ebd +="\u000a";_ag =float64 (*_ggc );_gb =float64 (*_dfg );continue ;};if _ag ==-1{_ag =float64 (*_ggc );}else if _ag < float64 (*_ggc ){_ebd +="\u0009";_ag =float64 (*_ggc );};};if _ca &&_df .Operand =="\u0054\u004a"{if len (_df .Params )< 1{continue ;};_ge ,_acd :=_df .Params [0].(*_a .PdfObjectArray );if !_acd {return "",_fe .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_df .Params [0]);};for _ ,_eea :=range _ge .Elements (){switch _fgc :=_eea .(type ){case *_a .PdfObjectString :_ebd +=_fgc .Str ();case *_a .PdfObjectFloat :if *_fgc < -100{_ebd +="\u0020";};case *_a .PdfObjectInteger :if *_fgc < -100{_ebd +="\u0020";};};};}else if _ca &&_df .Operand =="\u0054\u006a"{if len (_df .Params )< 1{continue ;};_caa ,_feb :=_df .Params [0].(*_a .PdfObjectString );if !_feb {return "",_fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_df .Params [0]);};_ebd +=_caa .Str ();};};return _ebd ,nil ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_daf *ContentCreator )Wrap (){_daf ._faf .WrapIfNeeded ()};func (_gaff *ContentStreamProcessor )handleCommand_CS (_fdaec *ContentStreamOperation ,_edaba *_cgc .PdfPageResources )error {if len (_fdaec .Params )< 1{_fd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_fdaec .Params )> 1{_fd .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_acbf ,_aaed :=_fdaec .Params [0].(*_a .PdfObjectName );if !_aaed {_fd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_dgac ,_gbfg :=_gaff .getColorspace (string (*_acbf ),_edaba );if _gbfg !=nil {return _gbfg ;};_gaff ._ecge .ColorspaceStroking =_dgac ;_gafe ,_gbfg :=_gaff .getInitialColor (_dgac );if _gbfg !=nil {return _gbfg ;};_gaff ._ecge .ColorStroking =_gafe ;return nil ;};func _egc (_gde []_a .PdfObjectString )[]_a .PdfObject {var _eddg []_a .PdfObject ;for _ ,_fced :=range _gde {_eddg =append (_eddg ,_a .MakeString (_fced .Str ()));};return _eddg ;};func (_ceb *ContentStreamParser )parseString ()(*_a .PdfObjectString ,error ){_ceb ._bcdd .ReadByte ();var _gece []byte ;_gdf :=1;for {_bdf ,_dfge :=_ceb ._bcdd .Peek (1);if _dfge !=nil {return _a .MakeString (string (_gece )),_dfge ;};if _bdf [0]=='\\'{_ceb ._bcdd .ReadByte ();_bdge ,_ffgf :=_ceb ._bcdd .ReadByte ();if _ffgf !=nil {return _a .MakeString (string (_gece )),_ffgf ;};if _a .IsOctalDigit (_bdge ){_afc ,_aca :=_ceb ._bcdd .Peek (2);if _aca !=nil {return _a .MakeString (string (_gece )),_aca ;};var _debf []byte ;_debf =append (_debf ,_bdge );for _ ,_bfgd :=range _afc {if _a .IsOctalDigit (_bfgd ){_debf =append (_debf ,_bfgd );}else {break ;};};_ceb ._bcdd .Discard (len (_debf )-1);_fd .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_debf );_dfff ,_aca :=_fb .ParseUint (string (_debf ),8,32);if _aca !=nil {return _a .MakeString (string (_gece )),_aca ;};_gece =append (_gece ,byte (_dfff ));continue ;};switch _bdge {case 'n':_gece =append (_gece ,'\n');case 'r':_gece =append (_gece ,'\r');case 't':_gece =append (_gece ,'\t');case 'b':_gece =append (_gece ,'\b');case 'f':_gece =append (_gece ,'\f');case '(':_gece =append (_gece ,'(');case ')':_gece =append (_gece ,')');case '\\':_gece =append (_gece ,'\\');};continue ;}else if _bdf [0]=='('{_gdf ++;}else if _bdf [0]==')'{_gdf --;if _gdf ==0{_ceb ._bcdd .ReadByte ();break ;};};_cee ,_ :=_ceb ._bcdd .ReadByte ();_gece =append (_gece ,_cee );};return _a .MakeString (string (_gece )),nil ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_fce *ContentStreamProcessor )Process (resources *_cgc .PdfPageResources )error {_fce ._ecge .ColorspaceStroking =_cgc .NewPdfColorspaceDeviceGray ();_fce ._ecge .ColorspaceNonStroking =_cgc .NewPdfColorspaceDeviceGray ();_fce ._ecge .ColorStroking =_cgc .NewPdfColorDeviceGray (0);_fce ._ecge .ColorNonStroking =_cgc .NewPdfColorDeviceGray (0);_fce ._ecge .CTM =_fg .IdentityMatrix ();for _ ,_dbec :=range _fce ._adeb {var _cdded error ;switch _dbec .Operand {case "\u0071":_fce ._ege .Push (_fce ._ecge );case "\u0051":if len (_fce ._ege )==0{_fd .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_fce ._ecge =_fce ._ege .Pop ();case "\u0043\u0053":_cdded =_fce .handleCommand_CS (_dbec ,resources );case "\u0063\u0073":_cdded =_fce .handleCommand_cs (_dbec ,resources );case "\u0053\u0043":_cdded =_fce .handleCommand_SC (_dbec ,resources );case "\u0053\u0043\u004e":_cdded =_fce .handleCommand_SCN (_dbec ,resources );case "\u0073\u0063":_cdded =_fce .handleCommand_sc (_dbec ,resources );case "\u0073\u0063\u006e":_cdded =_fce .handleCommand_scn (_dbec ,resources );case "\u0047":_cdded =_fce .handleCommand_G (_dbec ,resources );case "\u0067":_cdded =_fce .handleCommand_g (_dbec ,resources );case "\u0052\u0047":_cdded =_fce .handleCommand_RG (_dbec ,resources );case "\u0072\u0067":_cdded =_fce .handleCommand_rg (_dbec ,resources );case "\u004b":_cdded =_fce .handleCommand_K (_dbec ,resources );case "\u006b":_cdded =_fce .handleCommand_k (_dbec ,resources );case "\u0063\u006d":_cdded =_fce .handleCommand_cm (_dbec ,resources );};if _cdded !=nil {_fd .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_dbec .Operand ,_cdded );_fd .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_dbec .Operand );return _cdded ;};for _ ,_gfdcc :=range _fce ._cgfb {var _fdfe error ;if _gfdcc .Condition .All (){_fdfe =_gfdcc .Handler (_dbec ,_fce ._ecge ,resources );}else if _gfdcc .Condition .Operand ()&&_dbec .Operand ==_gfdcc .Operand {_fdfe =_gfdcc .Handler (_dbec ,_fce ._ecge ,resources );};if _fdfe !=nil {_fd .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_fdfe );return _fdfe ;};};};return nil ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gea *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_egb :=ContentStreamOperation {};_egb .Operand ="\u0076";_egb .Params =_fbg ([]float64 {x2 ,y2 ,x3 ,y3 });_gea ._faf =append (_gea ._faf ,&_egb );return _gea ;};func (_gbd *ContentStreamProcessor )handleCommand_SC (_aaag *ContentStreamOperation ,_bgb *_cgc .PdfPageResources )error {_gefg :=_gbd ._ecge .ColorspaceStroking ;if len (_aaag .Params )!=_gefg .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aaag .Params ),_gefg );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eegfe ,_eefg :=_gefg .ColorFromPdfObjects (_aaag .Params );if _eefg !=nil {return _eefg ;};_gbd ._ecge .ColorStroking =_eegfe ;return nil ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ffa *ContentCreator )Add_s ()*ContentCreator {_bdc :=ContentStreamOperation {};_bdc .Operand ="\u0073";_ffa ._faf =append (_ffa ._faf ,&_bdc );return _ffa ;};func _fda (_eefc *ContentStreamInlineImage ,_fec *_a .PdfObjectDictionary )(*_a .FlateEncoder ,error ){_cea :=_a .NewFlateEncoder ();if _eefc ._ccdc !=nil {_cea .SetImage (_eefc ._ccdc );};if _fec ==nil {_cfg :=_eefc .DecodeParms ;if _cfg !=nil {_cad ,_agf :=_a .GetDict (_cfg );if !_agf {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_cfg );return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_fec =_cad ;};};if _fec ==nil {return _cea ,nil ;};_fd .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_fec .String ());_ece :=_fec .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ece ==nil {_fd .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_ceae ,_aaa :=_ece .(*_a .PdfObjectInteger );if !_aaa {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ece );return nil ,_fe .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_cea .Predictor =int (*_ceae );};_ece =_fec .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _ece !=nil {_fdce ,_eced :=_ece .(*_a .PdfObjectInteger );if !_eced {_fd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_fe .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_cea .BitsPerComponent =int (*_fdce );};if _cea .Predictor > 1{_cea .Columns =1;_ece =_fec .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _ece !=nil {_acde ,_fgec :=_ece .(*_a .PdfObjectInteger );if !_fgec {return nil ,_fe .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_cea .Columns =int (*_acde );};_cea .Colors =1;_gccd :=_fec .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _gccd !=nil {_afd ,_aaae :=_gccd .(*_a .PdfObjectInteger );if !_aaae {return nil ,_fe .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_cea .Colors =int (*_afd );};};return _cea ,nil ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_agd *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_dccd :=ContentStreamOperation {};_dccd .Operand ="\u0052\u0047";_dccd .Params =_fbg ([]float64 {r ,g ,b });_agd ._faf =append (_agd ._faf ,&_dccd );return _agd ;};func (_feea *ContentStreamProcessor )handleCommand_cs (_adfd *ContentStreamOperation ,_ead *_cgc .PdfPageResources )error {if len (_adfd .Params )< 1{_fd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _f .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_adfd .Params )> 1{_fd .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _f .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_aagd ,_ccfd :=_adfd .Params [0].(*_a .PdfObjectName );if !_ccfd {_fd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_ebdf ,_eadg :=_feea .getColorspace (string (*_aagd ),_ead );if _eadg !=nil {return _eadg ;};_feea ._ecge .ColorspaceNonStroking =_ebdf ;_bffd ,_eadg :=_feea .getInitialColor (_ebdf );if _eadg !=nil {return _eadg ;};_feea ._ecge .ColorNonStroking =_bffd ;return nil ;};func _daad (_dff *ContentStreamInlineImage )(*_a .DCTEncoder ,error ){_bdg :=_a .NewDCTEncoder ();_aga :=_ef .NewReader (_dff ._cdc );_fdd ,_gcca :=_ee .DecodeConfig (_aga );if _gcca !=nil {_fd .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_gcca );return nil ,_gcca ;};switch _fdd .ColorModel {case _fbb .RGBAModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =3;case _fbb .RGBA64Model :_bdg .BitsPerComponent =16;_bdg .ColorComponents =3;case _fbb .GrayModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =1;case _fbb .Gray16Model :_bdg .BitsPerComponent =16;_bdg .ColorComponents =1;case _fbb .CMYKModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =4;case _fbb .YCbCrModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =3;default:return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_bdg .Width =_fdd .Width ;_bdg .Height =_fdd .Height ;_fd .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_bdg );return _bdg ,nil ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_defg *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_ccf :=ContentStreamOperation {};_ccf .Operand ="\u0053\u0043\u004e";_ccf .Params =_fbg (c );_defg ._faf =append (_defg ._faf ,&_ccf );return _defg ;};func (_acea *ContentStreamParser )skipSpaces ()(int ,error ){_egac :=0;for {_eead ,_adfe :=_acea ._bcdd .Peek (1);if _adfe !=nil {return 0,_adfe ;};if _a .IsWhiteSpace (_eead [0]){_acea ._bcdd .ReadByte ();_egac ++;}else {break ;};};return _egac ,nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fcb *ContentCreator )Add_i (flatness float64 )*ContentCreator {_ae :=ContentStreamOperation {};_ae .Operand ="\u0069";_ae .Params =_fbg ([]float64 {flatness });_fcb ._faf =append (_fcb ._faf ,&_ae );return _fcb ;};func (_fgcb *ContentStreamParser )parseOperand ()(*_a .PdfObjectString ,error ){var _aagf []byte ;for {_dcg ,_feba :=_fgcb ._bcdd .Peek (1);if _feba !=nil {return _a .MakeString (string (_aagf )),_feba ;};if _a .IsDelimiter (_dcg [0]){break ;};if _a .IsWhiteSpace (_dcg [0]){break ;};_ecaa ,_ :=_fgcb ._bcdd .ReadByte ();_aagf =append (_aagf ,_ecaa );};return _a .MakeString (string (_aagf )),nil ;};

// AddOperand adds a specified operand.
func (_gd *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_gd ._faf =append (_gd ._faf ,&op );return _gd ;};

// Push pushes `gs` on the `gsStack`.
func (_gfdc *GraphicStateStack )Push (gs GraphicsState ){*_gfdc =append (*_gfdc ,gs )};func (_geba *ContentStreamProcessor )handleCommand_scn (_afag *ContentStreamOperation ,_gdb *_cgc .PdfPageResources )error {_geeb :=_geba ._ecge .ColorspaceNonStroking ;if !_dggb (_geeb ){if len (_afag .Params )!=_geeb .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_afag .Params ),_geeb );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fafe ,_acc :=_geeb .ColorFromPdfObjects (_afag .Params );if _acc !=nil {_fd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_afag .Params ,_geeb );return _acc ;};_geba ._ecge .ColorNonStroking =_fafe ;return nil ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bgf *ContentCreator )Add_cs (name _a .PdfObjectName )*ContentCreator {_bge :=ContentStreamOperation {};_bge .Operand ="\u0063\u0073";_bge .Params =_adge ([]_a .PdfObjectName {name });_bgf ._faf =append (_bgf ._faf ,&_bge );return _bgf ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cbe *ContentCreator )Add_TL (leading float64 )*ContentCreator {_afe :=ContentStreamOperation {};_afe .Operand ="\u0054\u004c";_afe .Params =_fbg ([]float64 {leading });_cbe ._faf =append (_cbe ._faf ,&_afe );return _cbe ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_ffc *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_baf :=ContentStreamOperations {};for {_daeg :=ContentStreamOperation {};for {_gbf ,_bdcf ,_abf :=_ffc .parseObject ();if _abf !=nil {if _abf ==_e .EOF {return &_baf ,nil ;};return &_baf ,_abf ;};if _bdcf {_daeg .Operand ,_ =_a .GetStringVal (_gbf );_baf =append (_baf ,&_daeg );break ;}else {_daeg .Params =append (_daeg .Params ,_gbf );};};if _daeg .Operand =="\u0042\u0049"{_bbcff ,_gac :=_ffc .ParseInlineImage ();if _gac !=nil {return &_baf ,_gac ;};_daeg .Params =append (_daeg .Params ,_bbcff );};};};func (_dab *ContentStreamProcessor )handleCommand_k (_ecc *ContentStreamOperation ,_dada *_cgc .PdfPageResources )error {_fafea :=_cgc .NewPdfColorspaceDeviceCMYK ();if len (_ecc .Params )!=_fafea .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ecc .Params ),_fafea );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ggae ,_bga :=_fafea .ColorFromPdfObjects (_ecc .Params );if _bga !=nil {return _bga ;};_dab ._ecge .ColorspaceNonStroking =_fafea ;_dab ._ecge .ColorNonStroking =_ggae ;return nil ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_faf ContentStreamOperations };type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};func _cbf (_cab []int64 )[]_a .PdfObject {var _gbbc []_a .PdfObject ;for _ ,_cgfa :=range _cab {_gbbc =append (_gbbc ,_a .MakeInteger (_cgfa ));};return _gbbc ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_egf *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_dc :=ContentStreamOperation {};_dc .Operand ="\u0077";_dc .Params =_fbg ([]float64 {lineWidth });_egf ._faf =append (_egf ._faf ,&_dc );return _egf ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gee *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_af :=ContentStreamOperation {};_af .Operand ="\u004a";_af .Params =_adge ([]_a .PdfObjectName {_a .PdfObjectName (lineCapStyle )});_gee ._faf =append (_gee ._faf ,&_af );return _gee ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_bcdd *_dd .Reader };func (_bgcd *ContentStreamParser )parseArray ()(*_a .PdfObjectArray ,error ){_agc :=_a .MakeArray ();_bgcd ._bcdd .ReadByte ();for {_bgcd .skipSpaces ();_bebd ,_edd :=_bgcd ._bcdd .Peek (1);if _edd !=nil {return _agc ,_edd ;};if _bebd [0]==']'{_bgcd ._bcdd .ReadByte ();break ;};_edac ,_ ,_edd :=_bgcd .parseObject ();if _edd !=nil {return _agc ,_edd ;};_agc .Append (_edac );};return _agc ,nil ;};

// WriteString outputs the object as it is to be written to file.
func (_efcg *ContentStreamInlineImage )WriteString ()string {var _adg _ef .Buffer ;_eee :="";if _efcg .BitsPerComponent !=nil {_eee +="\u002f\u0042\u0050C\u0020"+_efcg .BitsPerComponent .WriteString ()+"\u000a";};if _efcg .ColorSpace !=nil {_eee +="\u002f\u0043\u0053\u0020"+_efcg .ColorSpace .WriteString ()+"\u000a";};if _efcg .Decode !=nil {_eee +="\u002f\u0044\u0020"+_efcg .Decode .WriteString ()+"\u000a";};if _efcg .DecodeParms !=nil {_eee +="\u002f\u0044\u0050\u0020"+_efcg .DecodeParms .WriteString ()+"\u000a";};if _efcg .Filter !=nil {_eee +="\u002f\u0046\u0020"+_efcg .Filter .WriteString ()+"\u000a";};if _efcg .Height !=nil {_eee +="\u002f\u0048\u0020"+_efcg .Height .WriteString ()+"\u000a";};if _efcg .ImageMask !=nil {_eee +="\u002f\u0049\u004d\u0020"+_efcg .ImageMask .WriteString ()+"\u000a";};if _efcg .Intent !=nil {_eee +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_efcg .Intent .WriteString ()+"\u000a";};if _efcg .Interpolate !=nil {_eee +="\u002f\u0049\u0020"+_efcg .Interpolate .WriteString ()+"\u000a";};if _efcg .Width !=nil {_eee +="\u002f\u0057\u0020"+_efcg .Width .WriteString ()+"\u000a";};_adg .WriteString (_eee );_adg .WriteString ("\u0049\u0044\u0020");_adg .Write (_efcg ._cdc );_adg .WriteString ("\u000a\u0045\u0049\u000a");return _adg .String ();};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_feg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u004d";_dgb .Params =_fbg ([]float64 {miterlimit });_feg ._faf =append (_feg ._faf ,&_dgb );return _feg ;};

// Operations returns the list of operations.
func (_ec *ContentCreator )Operations ()*ContentStreamOperations {return &_ec ._faf };

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_efe *ContentCreator )Add_Tr (render int64 )*ContentCreator {_eca :=ContentStreamOperation {};_eca .Operand ="\u0054\u0072";_eca .Params =_cbf ([]int64 {render });_efe ._faf =append (_efe ._faf ,&_eca );return _efe ;};func (_bfd *ContentStreamInlineImage )toImageBase (_febf *_cgc .PdfPageResources )(*_b .ImageBase ,error ){if _bfd ._ccdc !=nil {return _bfd ._ccdc ,nil ;};_feca :=_b .ImageBase {};if _bfd .Height ==nil {return nil ,_f .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_agb ,_cbec :=_bfd .Height .(*_a .PdfObjectInteger );if !_cbec {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_feca .Height =int (*_agb );if _bfd .Width ==nil {return nil ,_f .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_beb ,_cbec :=_bfd .Width .(*_a .PdfObjectInteger );if !_cbec {return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_feca .Width =int (*_beb );_fgb ,_ebec :=_bfd .IsMask ();if _ebec !=nil {return nil ,_ebec ;};if _fgb {_feca .BitsPerComponent =1;_feca .ColorComponents =1;}else {if _bfd .BitsPerComponent ==nil {_fd .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_feca .BitsPerComponent =8;}else {_aaf ,_gcf :=_bfd .BitsPerComponent .(*_a .PdfObjectInteger );if !_gcf {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bfd .BitsPerComponent );return nil ,_f .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_feca .BitsPerComponent =int (*_aaf );};if _bfd .ColorSpace !=nil {_bee ,_eff :=_bfd .GetColorSpace (_febf );if _eff !=nil {return nil ,_eff ;};_feca .ColorComponents =_bee .GetNumComponents ();}else {_fd .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_feca .ColorComponents =1;};};if _bea ,_dace :=_a .GetArray (_bfd .Decode );_dace {_feca .Decode ,_ebec =_bea .ToFloat64Array ();if _ebec !=nil {return nil ,_ebec ;};};_bfd ._ccdc =&_feca ;return _bfd ._ccdc ,nil ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_bfg *ContentCreator )Add_W ()*ContentCreator {_eegf :=ContentStreamOperation {};_eegf .Operand ="\u0057";_bfg ._faf =append (_bfg ._faf ,&_eegf );return _bfg ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gcc *ContentCreator )Add_quotes (textstr _a .PdfObjectString ,aw ,ac float64 )*ContentCreator {_cgb :=ContentStreamOperation {};_cgb .Operand ="\u0022";_cgb .Params =_fbg ([]float64 {aw ,ac });_cgb .Params =append (_cgb .Params ,_egc ([]_a .PdfObjectString {textstr })...);_gcc ._faf =append (_gcc ._faf ,&_cgb );return _gcc ;};func _fdbc (_aced _a .PdfObject )(_cgc .PdfColorspace ,error ){_daadb ,_eebg :=_aced .(*_a .PdfObjectArray );if !_eebg {_fd .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_aced );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _daadb .Len ()!=4{_fd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_daadb .Len ());return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_egfg ,_eebg :=_daadb .Get (0).(*_a .PdfObjectName );if !_eebg {_fd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_daadb );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_egfg !="\u0049"&&*_egfg !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_fd .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_egfg );return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_egfg ,_eebg =_daadb .Get (1).(*_a .PdfObjectName );if !_eebg {_fd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_daadb );return nil ,_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_egfg !="\u0047"&&*_egfg !="\u0052\u0047\u0042"&&*_egfg !="\u0043\u004d\u0059\u004b"&&*_egfg !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_egfg !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_egfg !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_fd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_egfg );return nil ,_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_dfb :="";switch *_egfg {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_dfb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_dfb ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_dfb ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_bcgf :=_a .MakeArray (_a .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_a .MakeName (_dfb ),_daadb .Get (2),_daadb .Get (3));return _cgc .NewPdfColorspaceFromPdfObject (_bcgf );};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_geec HandlerConditionEnum )Operand ()bool {return _geec ==HandlerConditionEnumOperand };

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gf *ContentCreator )Add_b ()*ContentCreator {_fdf :=ContentStreamOperation {};_fdf .Operand ="\u0062";_gf ._faf =append (_gf ._faf ,&_fdf );return _gf ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _a .PdfObject ;ColorSpace _a .PdfObject ;Decode _a .PdfObject ;DecodeParms _a .PdfObject ;Filter _a .PdfObject ;Height _a .PdfObject ;ImageMask _a .PdfObject ;Intent _a .PdfObject ;Interpolate _a .PdfObject ;Width _a .PdfObject ;_cdc []byte ;_ccdc *_b .ImageBase ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_ege GraphicStateStack ;_adeb []*ContentStreamOperation ;_ecge GraphicsState ;_cgfb []handlerEntry ;_ddee int ;};func (_eefgc *ContentStreamProcessor )handleCommand_RG (_bfa *ContentStreamOperation ,_dgd *_cgc .PdfPageResources )error {_afaf :=_cgc .NewPdfColorspaceDeviceRGB ();if len (_bfa .Params )!=_afaf .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bfa .Params ),_afaf );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eae ,_bfc :=_afaf .ColorFromPdfObjects (_bfa .Params );if _bfc !=nil {return _bfc ;};_eefgc ._ecge .ColorspaceStroking =_afaf ;_eefgc ._ecge .ColorStroking =_eae ;return nil ;};func _afa (_gaf *ContentStreamInlineImage )(_a .StreamEncoder ,error ){if _gaf .Filter ==nil {return _a .NewRawEncoder (),nil ;};_cge ,_gad :=_gaf .Filter .(*_a .PdfObjectName );if !_gad {_dbc ,_fdc :=_gaf .Filter .(*_a .PdfObjectArray );if !_fdc {return nil ,_fe .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _dbc .Len ()==0{return _a .NewRawEncoder (),nil ;};if _dbc .Len ()!=1{_afg ,_abb :=_aaca (_gaf );if _abb !=nil {_fd .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_abb );return nil ,_abb ;};_fd .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_afg );return _afg ,nil ;};_gdgae :=_dbc .Get (0);_cge ,_fdc =_gdgae .(*_a .PdfObjectName );if !_fdc {return nil ,_fe .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_cge {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _a .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _a .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _daad (_gaf );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _fda (_gaf ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _geb (_gaf ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _a .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _a .NewRunLengthEncoder (),nil ;default:_fd .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_cge );return nil ,_f .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efga *ContentCreator )Add_CS (name _a .PdfObjectName )*ContentCreator {_gff :=ContentStreamOperation {};_gff .Operand ="\u0043\u0053";_gff .Params =_adge ([]_a .PdfObjectName {name });_efga ._faf =append (_efga ._faf ,&_gff );return _efga ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_cceb *ContentStreamOperation ,_dadf GraphicsState ,_ggbbb *_cgc .PdfPageResources )error ;

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bce *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bcf :=ContentStreamOperation {};_bcf .Operand ="\u0063\u006d";_bcf .Params =_fbg ([]float64 {a ,b ,c ,d ,e ,f });_bce ._faf =append (_bce ._faf ,&_bcf );return _bce ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_bgff *GraphicStateStack )Pop ()GraphicsState {_fccg :=(*_bgff )[len (*_bgff )-1];*_bgff =(*_bgff )[:len (*_bgff )-1];return _fccg ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dcd *ContentCreator )Add_B_starred ()*ContentCreator {_cedd :=ContentStreamOperation {};_cedd .Operand ="\u0042\u002a";_dcd ._faf =append (_dcd ._faf ,&_cedd );return _dcd ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdg *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_ea :=ContentStreamOperation {};_ea .Operand ="\u0064";_ea .Params =[]_a .PdfObject {};_ea .Params =append (_ea .Params ,_a .MakeArrayFromIntegers64 (dashArray ));_ea .Params =append (_ea .Params ,_a .MakeInteger (dashPhase ));_gdg ._faf =append (_gdg ._faf ,&_ea );return _gdg ;};

// Scale applies x-y scaling to the transformation matrix.
func (_aage *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _aage .Add_cm (sx ,0,0,sy ,0,0);};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_a .PdfObject ;Operand string ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_fdg *ContentCreator )Add_EMC ()*ContentCreator {_gcg :=ContentStreamOperation {};_gcg .Operand ="\u0045\u004d\u0043";_fdg ._faf =append (_fdg ._faf ,&_gcg );return _fdg ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_dgaa *ContentCreator )Add_BT ()*ContentCreator {_cda :=ContentStreamOperation {};_cda .Operand ="\u0042\u0054";_dgaa ._faf =append (_dgaa ._faf ,&_cda );return _dgaa ;};var (ErrInvalidOperand =_f .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););func (_beae *ContentStreamParser )parseDict ()(*_a .PdfObjectDictionary ,error ){_fd .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_cbgg :=_a .MakeDict ();_eaa ,_ :=_beae ._bcdd .ReadByte ();if _eaa !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_eaa ,_ =_beae ._bcdd .ReadByte ();if _eaa !='<'{return nil ,_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_beae .skipSpaces ();_ffeb ,_edf :=_beae ._bcdd .Peek (2);if _edf !=nil {return nil ,_edf ;};_fd .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_ffeb ),string (_ffeb ));if (_ffeb [0]=='>')&&(_ffeb [1]=='>'){_fd .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_beae ._bcdd .ReadByte ();_beae ._bcdd .ReadByte ();break ;};_fd .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_fdgg ,_edf :=_beae .parseName ();_fd .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fdgg );if _edf !=nil {_fd .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_edf );return nil ,_edf ;};if len (_fdgg )> 4&&_fdgg [len (_fdgg )-4:]=="\u006e\u0075\u006c\u006c"{_bdeg :=_fdgg [0:len (_fdgg )-4];_fd .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_fdgg );_fd .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_bdeg );_beae .skipSpaces ();_fcf ,_ :=_beae ._bcdd .Peek (1);if _fcf [0]=='/'{_cbgg .Set (_bdeg ,_a .MakeNull ());continue ;};};_beae .skipSpaces ();_dded ,_ ,_edf :=_beae .parseObject ();if _edf !=nil {return nil ,_edf ;};_cbgg .Set (_fdgg ,_dded );_fd .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_fdgg ,_dded .String ());};return _cbgg ,nil ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gbc *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_dafe :=ContentStreamOperation {};_dafe .Operand ="\u0053\u0043";_dafe .Params =_fbg (c );_gbc ._faf =append (_gbc ._faf ,&_dafe );return _gbc ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dgf *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_aea :=ContentStreamOperation {};_aea .Operand ="\u0054\u0064";_aea .Params =_fbg ([]float64 {tx ,ty });_dgf ._faf =append (_dgf ._faf ,&_aea );return _dgf ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_fbe *ContentCreator )SetStrokingColor (color _cgc .PdfColor )*ContentCreator {switch _eefd :=color .(type ){case *_cgc .PdfColorDeviceGray :_fbe .Add_G (_eefd .Val ());case *_cgc .PdfColorDeviceRGB :_fbe .Add_RG (_eefd .R (),_eefd .G (),_eefd .B ());case *_cgc .PdfColorDeviceCMYK :_fbe .Add_K (_eefd .C (),_eefd .M (),_eefd .Y (),_eefd .K ());default:_fd .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_eefd );};return _fbe ;};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dcc *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_dae :=ContentStreamOperation {};_dae .Operand ="\u0073\u0063\u006e";_dae .Params =_fbg (c );_dcc ._faf =append (_dcc ._faf ,&_dae );return _dcc ;};func _aaca (_ecf *ContentStreamInlineImage )(*_a .MultiEncoder ,error ){_eda :=_a .NewMultiEncoder ();var _fbba *_a .PdfObjectDictionary ;var _ccd []_a .PdfObject ;if _cfa :=_ecf .DecodeParms ;_cfa !=nil {_ccfb ,_dcf :=_cfa .(*_a .PdfObjectDictionary );if _dcf {_fbba =_ccfb ;};_bfe ,_aff :=_cfa .(*_a .PdfObjectArray );if _aff {for _ ,_bed :=range _bfe .Elements (){if _ceg ,_eegb :=_bed .(*_a .PdfObjectDictionary );_eegb {_ccd =append (_ccd ,_ceg );}else {_ccd =append (_ccd ,nil );};};};};_eba :=_ecf .Filter ;if _eba ==nil {return nil ,_fe .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_cgg ,_cgbe :=_eba .(*_a .PdfObjectArray );if !_cgbe {return nil ,_fe .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _dbg ,_bca :=range _cgg .Elements (){_bbd ,_ggb :=_bca .(*_a .PdfObjectName );if !_ggb {return nil ,_fe .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _cccc _a .PdfObject ;if _fbba !=nil {_cccc =_fbba ;}else {if len (_ccd )> 0{if _dbg >=len (_ccd ){return nil ,_fe .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_cccc =_ccd [_dbg ];};};var _caaf *_a .PdfObjectDictionary ;if _ebcc ,_abe :=_cccc .(*_a .PdfObjectDictionary );_abe {_caaf =_ebcc ;};if *_bbd ==_a .StreamEncodingFilterNameFlate ||*_bbd =="\u0046\u006c"{_cgd ,_fafb :=_fda (_ecf ,_caaf );if _fafb !=nil {return nil ,_fafb ;};_eda .AddEncoder (_cgd );}else if *_bbd ==_a .StreamEncodingFilterNameLZW {_aaea ,_bdcd :=_geb (_ecf ,_caaf );if _bdcd !=nil {return nil ,_bdcd ;};_eda .AddEncoder (_aaea );}else if *_bbd ==_a .StreamEncodingFilterNameASCIIHex {_gdad :=_a .NewASCIIHexEncoder ();_eda .AddEncoder (_gdad );}else if *_bbd ==_a .StreamEncodingFilterNameASCII85 ||*_bbd =="\u0041\u0038\u0035"{_gecf :=_a .NewASCII85Encoder ();_eda .AddEncoder (_gecf );}else {_fd .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_bbd );return nil ,_fe .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _eda ,nil ;};

// GetEncoder returns the encoder of the inline image.
func (_bbb *ContentStreamInlineImage )GetEncoder ()(_a .StreamEncoder ,error ){return _afa (_bbb )};

// RotateDeg applies a rotation to the transformation matrix.
func (_fc *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_cb :=_cg .Cos (angle *_cg .Pi /180.0);_aab :=_cg .Sin (angle *_cg .Pi /180.0);_age :=-_cg .Sin (angle *_cg .Pi /180.0);_ad :=_cg .Cos (angle *_cg .Pi /180.0);return _fc .Add_cm (_cb ,_aab ,_age ,_ad ,0,0);};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;func (_ecec *ContentStreamProcessor )handleCommand_K (_dag *ContentStreamOperation ,_gecb *_cgc .PdfPageResources )error {_ggd :=_cgc .NewPdfColorspaceDeviceCMYK ();if len (_dag .Params )!=_ggd .GetNumComponents (){_fd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_fd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dag .Params ),_ggd );return _f .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fcee ,_fdba :=_ggd .ColorFromPdfObjects (_dag .Params );if _fdba !=nil {return _fdba ;};_ecec ._ecge .ColorspaceStroking =_ggd ;_ecec ._ecge .ColorStroking =_fcee ;return nil ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_bbg *ContentCreator )Bytes ()[]byte {return _bbg ._faf .Bytes ()};func (_bgec *ContentStreamParser )parseBool ()(_a .PdfObjectBool ,error ){_ddgb ,_fegf :=_bgec ._bcdd .Peek (4);if _fegf !=nil {return _a .PdfObjectBool (false ),_fegf ;};if (len (_ddgb )>=4)&&(string (_ddgb [:4])=="\u0074\u0072\u0075\u0065"){_bgec ._bcdd .Discard (4);return _a .PdfObjectBool (true ),nil ;};_ddgb ,_fegf =_bgec ._bcdd .Peek (5);if _fegf !=nil {return _a .PdfObjectBool (false ),_fegf ;};if (len (_ddgb )>=5)&&(string (_ddgb [:5])=="\u0066\u0061\u006cs\u0065"){_bgec ._bcdd .Discard (5);return _a .PdfObjectBool (false ),nil ;};return _a .PdfObjectBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_bfb *ContentStreamParser )parseNull ()(_a .PdfObjectNull ,error ){_ ,_gddb :=_bfb ._bcdd .Discard (4);return _a .PdfObjectNull {},_gddb ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _cgc .PdfColorspace ;ColorspaceNonStroking _cgc .PdfColorspace ;ColorStroking _cgc .PdfColor ;ColorNonStroking _cgc .PdfColor ;CTM _fg .Matrix ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_db *ContentCreator )Add_f ()*ContentCreator {_cac :=ContentStreamOperation {};_cac .Operand ="\u0066";_db ._faf =append (_db ._faf ,&_cac );return _db ;};