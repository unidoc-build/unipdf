//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_f "bufio";_eb "bytes";_g "encoding/hex";_d "errors";_ad "fmt";_ab "github.com/unidoc/unipdf/v3/common";_ag "github.com/unidoc/unipdf/v3/core";_ef "github.com/unidoc/unipdf/v3/internal/imageutil";_ae "github.com/unidoc/unipdf/v3/internal/transform";
_c "github.com/unidoc/unipdf/v3/model";_fa "image/color";_gg "image/jpeg";_dg "io";_a "math";_e "strconv";);

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bge *ContentCreator )Add_Q ()*ContentCreator {_de :=ContentStreamOperation {};_de .Operand ="\u0051";_bge ._fc =append (_bge ._fc ,&_de );return _bge ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_dfa :=ContentStreamParser {};_bdb :=_eb .NewBufferString (contentStr +"\u000a");_dfa ._geb =_f .NewReader (_bdb );return &_dfa ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cec *ContentCreator )Add_TL (leading float64 )*ContentCreator {_adae :=ContentStreamOperation {};_adae .Operand ="\u0054\u004c";_adae .Params =_fbgda ([]float64 {leading });_cec ._fc =append (_cec ._fc ,&_adae );return _cec ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bab *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_cef :=ContentStreamOperation {};_cef .Operand ="\u006c";_cef .Params =_fbgda ([]float64 {x ,y });_bab ._fc =append (_bab ._fc ,&_cef );return _bab ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bga *ContentCreator )Add_S ()*ContentCreator {_eece :=ContentStreamOperation {};_eece .Operand ="\u0053";_bga ._fc =append (_bga ._fc ,&_eece );return _bga ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gda *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cgc :=ContentStreamOperation {};_cgc .Operand ="\u0054\u0072";_cgc .Params =_cacg ([]int64 {render });_gda ._fc =append (_gda ._fc ,&_cgc );return _gda ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_agcf *ContentStreamProcessor )Process (resources *_c .PdfPageResources )error {_agcf ._gef .ColorspaceStroking =_c .NewPdfColorspaceDeviceGray ();_agcf ._gef .ColorspaceNonStroking =_c .NewPdfColorspaceDeviceGray ();_agcf ._gef .ColorStroking =_c .NewPdfColorDeviceGray (0);
_agcf ._gef .ColorNonStroking =_c .NewPdfColorDeviceGray (0);_agcf ._gef .CTM =_ae .IdentityMatrix ();for _ ,_cac :=range _agcf ._ccaae {var _afcfc error ;switch _cac .Operand {case "\u0071":_agcf ._fabee .Push (_agcf ._gef );case "\u0051":if len (_agcf ._fabee )==0{_ab .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_agcf ._gef =_agcf ._fabee .Pop ();case "\u0043\u0053":_afcfc =_agcf .handleCommand_CS (_cac ,resources );case "\u0063\u0073":_afcfc =_agcf .handleCommand_cs (_cac ,resources );case "\u0053\u0043":_afcfc =_agcf .handleCommand_SC (_cac ,resources );
case "\u0053\u0043\u004e":_afcfc =_agcf .handleCommand_SCN (_cac ,resources );case "\u0073\u0063":_afcfc =_agcf .handleCommand_sc (_cac ,resources );case "\u0073\u0063\u006e":_afcfc =_agcf .handleCommand_scn (_cac ,resources );case "\u0047":_afcfc =_agcf .handleCommand_G (_cac ,resources );
case "\u0067":_afcfc =_agcf .handleCommand_g (_cac ,resources );case "\u0052\u0047":_afcfc =_agcf .handleCommand_RG (_cac ,resources );case "\u0072\u0067":_afcfc =_agcf .handleCommand_rg (_cac ,resources );case "\u004b":_afcfc =_agcf .handleCommand_K (_cac ,resources );
case "\u006b":_afcfc =_agcf .handleCommand_k (_cac ,resources );case "\u0063\u006d":_afcfc =_agcf .handleCommand_cm (_cac ,resources );};if _afcfc !=nil {_ab .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_cac .Operand ,_afcfc );
_ab .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_cac .Operand );return _afcfc ;};for _ ,_adc :=range _agcf ._bfec {var _fagb error ;if _adc .Condition .All (){_fagb =_adc .Handler (_cac ,_agcf ._gef ,resources );}else if _adc .Condition .Operand ()&&_cac .Operand ==_adc .Operand {_fagb =_adc .Handler (_cac ,_agcf ._gef ,resources );
};if _fagb !=nil {_ab .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_fagb );return _fagb ;};};};return nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cfc *ContentCreator )Add_TJ (vals ..._ag .PdfObject )*ContentCreator {_cgg :=ContentStreamOperation {};_cgg .Operand ="\u0054\u004a";_cgg .Params =[]_ag .PdfObject {_ag .MakeArray (vals ...)};_cfc ._fc =append (_cfc ._fc ,&_cgg );return _cfc ;};
func _gffc (_aaae []_ag .PdfObjectName )[]_ag .PdfObject {var _agag []_ag .PdfObject ;for _ ,_aecf :=range _aaae {_agag =append (_agag ,_ag .MakeName (string (_aecf )));};return _agag ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_ag .PdfObject ;Operand string ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_fc ContentStreamOperations };func (_cadd *ContentStreamProcessor )handleCommand_cm (_gdcf *ContentStreamOperation ,_eabg *_c .PdfPageResources )error {if len (_gdcf .Params )!=6{_ab .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_gdcf .Params ));
return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fga ,_gdea :=_ag .GetNumbersAsFloat (_gdcf .Params );if _gdea !=nil {return _gdea ;
};_gcg :=_ae .NewMatrix (_fga [0],_fga [1],_fga [2],_fga [3],_fga [4],_fga [5]);_cadd ._gef .CTM .Concat (_gcg );return nil ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_aec *ContentCreator )Add_i (flatness float64 )*ContentCreator {_bgg :=ContentStreamOperation {};_bgg .Operand ="\u0069";_bgg .Params =_fbgda ([]float64 {flatness });_aec ._fc =append (_aec ._fc ,&_bgg );return _aec ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_abgg *ContentCreator )Add_ri (intent _ag .PdfObjectName )*ContentCreator {_cfd :=ContentStreamOperation {};_cfd .Operand ="\u0072\u0069";_cfd .Params =_gffc ([]_ag .PdfObjectName {intent });_abgg ._fc =append (_abgg ._fc ,&_cfd );return _abgg ;};


// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_ggbb :=ContentStreamOperation {};_ggbb .Operand ="\u004d";_ggbb .Params =_fbgda ([]float64 {miterlimit });_eg ._fc =append (_eg ._fc ,&_ggbb );return _eg ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _c .PdfColorspace ;ColorspaceNonStroking _c .PdfColorspace ;ColorStroking _c .PdfColor ;ColorNonStroking _c .PdfColor ;CTM _ae .Matrix ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gc *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_fbc :=ContentStreamOperation {};_fbc .Operand ="\u006a";_fbc .Params =_gffc ([]_ag .PdfObjectName {_ag .PdfObjectName (lineJoinStyle )});_gc ._fc =append (_gc ._fc ,&_fbc );return _gc ;
};

// Scale applies x-y scaling to the transformation matrix.
func (_fb *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _fb .Add_cm (sx ,0,0,sy ,0,0);};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_eee *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_fee :=ContentStreamOperation {};_fee .Operand ="\u0076";_fee .Params =_fbgda ([]float64 {x2 ,y2 ,x3 ,y3 });_eee ._fc =append (_eee ._fc ,&_fee );return _eee ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_fabee GraphicStateStack ;_ccaae []*ContentStreamOperation ;_gef GraphicsState ;_bfec []handlerEntry ;_ecec int ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_bda *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_bdaf :=ContentStreamOperations {};for {_eed :=ContentStreamOperation {};for {_eedc ,_fbcf ,_agd :=_bda .parseObject ();if _agd !=nil {if _agd ==_dg .EOF {return &_bdaf ,nil ;};
return &_bdaf ,_agd ;};if _fbcf {_eed .Operand ,_ =_ag .GetStringVal (_eedc );_bdaf =append (_bdaf ,&_eed );break ;}else {_eed .Params =append (_eed .Params ,_eedc );};};if _eed .Operand =="\u0042\u0049"{_gfb ,_fec :=_bda .ParseInlineImage ();if _fec !=nil {return &_bdaf ,_fec ;
};_eed .Params =append (_eed .Params ,_gfb );};};};func (_bafe *ContentStreamProcessor )handleCommand_g (_gee *ContentStreamOperation ,_efda *_c .PdfPageResources )error {_ggd :=_c .NewPdfColorspaceDeviceGray ();if len (_gee .Params )!=_ggd .GetNumComponents (){_ab .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gee .Params ),_ggd );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cbd ,_acga :=_ggd .ColorFromPdfObjects (_gee .Params );if _acga !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ggd ,_gee ,_acga );
return _acga ;};_bafe ._gef .ColorspaceNonStroking =_ggd ;_bafe ._gef .ColorNonStroking =_cbd ;return nil ;};

// AddOperand adds a specified operand.
func (_bc *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_bc ._fc =append (_bc ._fc ,&op );return _bc ;};func _dfac (_acgf _ag .PdfObject )(_c .PdfColorspace ,error ){_edd ,_gceb :=_acgf .(*_ag .PdfObjectArray );if !_gceb {_ab .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_acgf );
return nil ,_d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _edd .Len ()!=4{_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_edd .Len ());
return nil ,_d .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fbab ,_gceb :=_edd .Get (0).(*_ag .PdfObjectName );if !_gceb {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_edd );
return nil ,_d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fbab !="\u0049"&&*_fbab !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_ab .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_fbab );
return nil ,_d .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fbab ,_gceb =_edd .Get (1).(*_ag .PdfObjectName );if !_gceb {_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_edd );
return nil ,_d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fbab !="\u0047"&&*_fbab !="\u0052\u0047\u0042"&&*_fbab !="\u0043\u004d\u0059\u004b"&&*_fbab !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_fbab !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_fbab !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_fbab );
return nil ,_d .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_afa :="";switch *_fbab {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_afa ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_afa ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_afa ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_fac :=_ag .MakeArray (_ag .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_ag .MakeName (_afa ),_edd .Get (2),_edd .Get (3));return _c .NewPdfColorspaceFromPdfObject (_fac );};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_aaf *ContentCreator )Add_gs (dictName _ag .PdfObjectName )*ContentCreator {_ebfb :=ContentStreamOperation {};_ebfb .Operand ="\u0067\u0073";_ebfb .Params =_gffc ([]_ag .PdfObjectName {dictName });_aaf ._fc =append (_aaf ._fc ,&_ebfb );return _aaf ;
};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_geb *_f .Reader };

// Operations returns the list of operations.
func (_aee *ContentCreator )Operations ()*ContentStreamOperations {return &_aee ._fc };

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bee *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_acd :=ContentStreamOperation {};_acd .Operand ="\u0054\u0064";_acd .Params =_fbgda ([]float64 {tx ,ty });_bee ._fc =append (_bee ._fc ,&_acd );return _bee ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dbb *ContentCreator )Add_f ()*ContentCreator {_dfea :=ContentStreamOperation {};_dfea .Operand ="\u0066";_dbb ._fc =append (_dbb ._fc ,&_dfea );return _dbb ;};func (_ebaf *ContentStreamProcessor )handleCommand_scn (_bgfag *ContentStreamOperation ,_efbf *_c .PdfPageResources )error {_ffad :=_ebaf ._gef .ColorspaceNonStroking ;
if !_dgcf (_ffad ){if len (_bgfag .Params )!=_ffad .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgfag .Params ),_ffad );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_gafa ,_dcbd :=_ffad .ColorFromPdfObjects (_bgfag .Params );if _dcbd !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_bgfag .Params ,_ffad );
return _dcbd ;};_ebaf ._gef .ColorNonStroking =_gafa ;return nil ;};func (_acfc *ContentStreamProcessor )handleCommand_SCN (_acca *ContentStreamOperation ,_fagd *_c .PdfPageResources )error {_dcbb :=_acfc ._gef .ColorspaceStroking ;if !_dgcf (_dcbb ){if len (_acca .Params )!=_dcbb .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_acca .Params ),_dcbb );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_eef ,_bbafc :=_dcbb .ColorFromPdfObjects (_acca .Params );if _bbafc !=nil {return _bbafc ;};_acfc ._gef .ColorStroking =_eef ;return nil ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eag *ContentCreator )Add_q ()*ContentCreator {_bbd :=ContentStreamOperation {};_bbd .Operand ="\u0071";_eag ._fc =append (_eag ._fc ,&_bbd );return _eag ;};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ddb *ContentCreator )Add_n ()*ContentCreator {_fef :=ContentStreamOperation {};_fef .Operand ="\u006e";_ddb ._fc =append (_ddb ._fc ,&_fef );return _ddb ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_aac *ContentCreator )SetNonStrokingColor (color _c .PdfColor )*ContentCreator {switch _dae :=color .(type ){case *_c .PdfColorDeviceGray :_aac .Add_g (_dae .Val ());case *_c .PdfColorDeviceRGB :_aac .Add_rg (_dae .R (),_dae .G (),_dae .B ());case *_c .PdfColorDeviceCMYK :_aac .Add_k (_dae .C (),_dae .M (),_dae .Y (),_dae .K ());
default:_ab .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_dae );
};return _aac ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_debe :=ContentStreamProcessor {};_debe ._fabee =GraphicStateStack {};_dfdb :=GraphicsState {};_debe ._gef =_dfdb ;_debe ._bfec =[]handlerEntry {};_debe ._ecec =0;_debe ._ccaae =ops ;
return &_debe ;};func (_ebfd *ContentStreamProcessor )handleCommand_sc (_adaa *ContentStreamOperation ,_afeb *_c .PdfPageResources )error {_cdb :=_ebfd ._gef .ColorspaceNonStroking ;if !_dgcf (_cdb ){if len (_adaa .Params )!=_cdb .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_adaa .Params ),_cdb );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_dfbc ,_dbbf :=_cdb .ColorFromPdfObjects (_adaa .Params );if _dbbf !=nil {return _dbbf ;};_ebfd ._gef .ColorNonStroking =_dfbc ;return nil ;};func _ccg (_dbfg *ContentStreamInlineImage )(*_ag .MultiEncoder ,error ){_edcf :=_ag .NewMultiEncoder ();var _agg *_ag .PdfObjectDictionary ;
var _eccc []_ag .PdfObject ;if _gabc :=_dbfg .DecodeParms ;_gabc !=nil {_fgef ,_def :=_gabc .(*_ag .PdfObjectDictionary );if _def {_agg =_fgef ;};_egd ,_faa :=_gabc .(*_ag .PdfObjectArray );if _faa {for _ ,_aca :=range _egd .Elements (){if _adad ,_adaf :=_aca .(*_ag .PdfObjectDictionary );
_adaf {_eccc =append (_eccc ,_adad );}else {_eccc =append (_eccc ,nil );};};};};_abfc :=_dbfg .Filter ;if _abfc ==nil {return nil ,_ad .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_bccb ,_cecg :=_abfc .(*_ag .PdfObjectArray );
if !_cecg {return nil ,_ad .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};
for _ge ,_bccc :=range _bccb .Elements (){_beb ,_eea :=_bccc .(*_ag .PdfObjectName );if !_eea {return nil ,_ad .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");
};var _cgcg _ag .PdfObject ;if _agg !=nil {_cgcg =_agg ;}else {if len (_eccc )> 0{if _ge >=len (_eccc ){return nil ,_ad .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_cgcg =_eccc [_ge ];};};var _fbe *_ag .PdfObjectDictionary ;if _beg ,_bbfd :=_cgcg .(*_ag .PdfObjectDictionary );_bbfd {_fbe =_beg ;};if *_beb ==_ag .StreamEncodingFilterNameFlate ||*_beb =="\u0046\u006c"{_cce ,_abd :=_dbf (_dbfg ,_fbe );if _abd !=nil {return nil ,_abd ;
};_edcf .AddEncoder (_cce );}else if *_beb ==_ag .StreamEncodingFilterNameLZW {_bfg ,_fccf :=_eeceb (_dbfg ,_fbe );if _fccf !=nil {return nil ,_fccf ;};_edcf .AddEncoder (_bfg );}else if *_beb ==_ag .StreamEncodingFilterNameASCIIHex {_ebc :=_ag .NewASCIIHexEncoder ();
_edcf .AddEncoder (_ebc );}else if *_beb ==_ag .StreamEncodingFilterNameASCII85 ||*_beb =="\u0041\u0038\u0035"{_dbc :=_ag .NewASCII85Encoder ();_edcf .AddEncoder (_dbc );}else {_ab .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_beb );
return nil ,_ad .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _edcf ,nil ;};func (_efec *ContentStreamParser )parseOperand ()(*_ag .PdfObjectString ,error ){var _dbbd []byte ;
for {_gff ,_accd :=_efec ._geb .Peek (1);if _accd !=nil {return _ag .MakeString (string (_dbbd )),_accd ;};if _ag .IsDelimiter (_gff [0]){break ;};if _ag .IsWhiteSpace (_gff [0]){break ;};_agaf ,_ :=_efec ._geb .ReadByte ();_dbbd =append (_dbbd ,_agaf );
};return _ag .MakeString (string (_dbbd )),nil ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_egc *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_bgad :=ContentStreamOperation {};_bgad .Operand ="\u0052\u0047";_bgad .Params =_fbgda ([]float64 {r ,g ,b });_egc ._fc =append (_egc ._fc ,&_bgad );return _egc ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eeg *ContentCreator )Add_cs (name _ag .PdfObjectName )*ContentCreator {_fed :=ContentStreamOperation {};_fed .Operand ="\u0063\u0073";_fed .Params =_gffc ([]_ag .PdfObjectName {name });_eeg ._fc =append (_eeg ._fc ,&_fed );return _eeg ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;
HandlerConditionEnumAllOperands ;);func (_dbcc *ContentStreamParser )parseDict ()(*_ag .PdfObjectDictionary ,error ){_ab .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_dbbe :=_ag .MakeDict ();_fdb ,_ :=_dbcc ._geb .ReadByte ();if _fdb !='<'{return nil ,_d .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_fdb ,_ =_dbcc ._geb .ReadByte ();if _fdb !='<'{return nil ,_d .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_dbcc .skipSpaces ();_ecbc ,_fada :=_dbcc ._geb .Peek (2);if _fada !=nil {return nil ,_fada ;};_ab .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_ecbc ),string (_ecbc ));if (_ecbc [0]=='>')&&(_ecbc [1]=='>'){_ab .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_dbcc ._geb .ReadByte ();_dbcc ._geb .ReadByte ();break ;};_ab .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_fefb ,_fada :=_dbcc .parseName ();_ab .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_fefb );
if _fada !=nil {_ab .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_fada );return nil ,_fada ;};if len (_fefb )> 4&&_fefb [len (_fefb )-4:]=="\u006e\u0075\u006c\u006c"{_bebf :=_fefb [0:len (_fefb )-4];
_ab .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_fefb );_ab .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_bebf );
_dbcc .skipSpaces ();_efeg ,_ :=_dbcc ._geb .Peek (1);if _efeg [0]=='/'{_dbbe .Set (_bebf ,_ag .MakeNull ());continue ;};};_dbcc .skipSpaces ();_aeae ,_ ,_fada :=_dbcc .parseObject ();if _fada !=nil {return nil ,_fada ;};_dbbe .Set (_fefb ,_aeae );_ab .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_fefb ,_aeae .String ());
};return _dbbe ,nil ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bgea *ContentCreator )Add_b_starred ()*ContentCreator {_dd :=ContentStreamOperation {};_dd .Operand ="\u0062\u002a";_bgea ._fc =append (_bgea ._fc ,&_dd );return _bgea ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_faf :=&ContentCreator {};_faf ._fc =ContentStreamOperations {};return _faf ;};func (_cfeb *ContentStreamParser )parseBool ()(_ag .PdfObjectBool ,error ){_daf ,_cga :=_cfeb ._geb .Peek (4);if _cga !=nil {return _ag .PdfObjectBool (false ),_cga ;
};if (len (_daf )>=4)&&(string (_daf [:4])=="\u0074\u0072\u0075\u0065"){_cfeb ._geb .Discard (4);return _ag .PdfObjectBool (true ),nil ;};_daf ,_cga =_cfeb ._geb .Peek (5);if _cga !=nil {return _ag .PdfObjectBool (false ),_cga ;};if (len (_daf )>=5)&&(string (_daf [:5])=="\u0066\u0061\u006cs\u0065"){_cfeb ._geb .Discard (5);
return _ag .PdfObjectBool (false ),nil ;};return _ag .PdfObjectBool (false ),_d .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gdf *ContentCreator )Add_scn_pattern (name _ag .PdfObjectName ,c ...float64 )*ContentCreator {_cc :=ContentStreamOperation {};_cc .Operand ="\u0073\u0063\u006e";_cc .Params =_fbgda (c );_cc .Params =append (_cc .Params ,_ag .MakeName (string (name )));
_gdf ._fc =append (_gdf ._fc ,&_cc );return _gdf ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_abe *ContentCreator )Bytes ()[]byte {return _abe ._fc .Bytes ()};func _dbf (_ggfb *ContentStreamInlineImage ,_ecb *_ag .PdfObjectDictionary )(*_ag .FlateEncoder ,error ){_abf :=_ag .NewFlateEncoder ();if _ggfb ._fcb !=nil {_abf .SetImage (_ggfb ._fcb );
};if _ecb ==nil {_ega :=_ggfb .DecodeParms ;if _ega !=nil {_fge ,_aage :=_ag .GetDict (_ega );if !_aage {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_ega );
return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_ecb =_fge ;};};if _ecb ==nil {return _abf ,nil ;};_ab .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_ecb .String ());
_egcb :=_ecb .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _egcb ==nil {_ab .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_gaba ,_dfd :=_egcb .(*_ag .PdfObjectInteger );if !_dfd {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_egcb );
return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_abf .Predictor =int (*_gaba );};_egcb =_ecb .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _egcb !=nil {_cfa ,_baf :=_egcb .(*_ag .PdfObjectInteger );if !_baf {_ab .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ad .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_abf .BitsPerComponent =int (*_cfa );};if _abf .Predictor > 1{_abf .Columns =1;_egcb =_ecb .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _egcb !=nil {_gca ,_fabe :=_egcb .(*_ag .PdfObjectInteger );if !_fabe {return nil ,_ad .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_abf .Columns =int (*_gca );
};_abf .Colors =1;_dcd :=_ecb .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dcd !=nil {_ece ,_bce :=_dcd .(*_ag .PdfObjectInteger );if !_bce {return nil ,_ad .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_abf .Colors =int (*_ece );};};return _abf ,nil ;};func (_gbaa *ContentStreamParser )parseHexString ()(*_ag .PdfObjectString ,error ){_gbaa ._geb .ReadByte ();_dfab :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
var _fbg []byte ;for {_gbaa .skipSpaces ();_fdef ,_fba :=_gbaa ._geb .Peek (1);if _fba !=nil {return _ag .MakeString (""),_fba ;};if _fdef [0]=='>'{_gbaa ._geb .ReadByte ();break ;};_caac ,_ :=_gbaa ._geb .ReadByte ();if _eb .IndexByte (_dfab ,_caac )>=0{_fbg =append (_fbg ,_caac );
};};if len (_fbg )%2==1{_fbg =append (_fbg ,'0');};_ffaf ,_ :=_g .DecodeString (string (_fbg ));return _ag .MakeHexString (string (_ffaf )),nil ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bcd *ContentCreator )Add_g (gray float64 )*ContentCreator {_edc :=ContentStreamOperation {};_edc .Operand ="\u0067";_edc .Params =_fbgda ([]float64 {gray });_bcd ._fc =append (_bcd ._fc ,&_edc );return _bcd ;};func _eeceb (_afg *ContentStreamInlineImage ,_aff *_ag .PdfObjectDictionary )(*_ag .LZWEncoder ,error ){_adf :=_ag .NewLZWEncoder ();
if _aff ==nil {if _afg .DecodeParms !=nil {_gbc ,_fbd :=_ag .GetDict (_afg .DecodeParms );if !_fbd {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_afg .DecodeParms );
return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_aff =_gbc ;};};if _aff ==nil {return _adf ,nil ;};_ggbd :=_aff .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _ggbd !=nil {_ebde ,_cge :=_ggbd .(*_ag .PdfObjectInteger );if !_cge {_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_ggbd );
return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_ebde !=0&&*_ebde !=1{return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_adf .EarlyChange =int (*_ebde );}else {_adf .EarlyChange =1;};_ggbd =_aff .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ggbd !=nil {_dfeg ,_cfce :=_ggbd .(*_ag .PdfObjectInteger );if !_cfce {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ggbd );
return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_adf .Predictor =int (*_dfeg );};_ggbd =_aff .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _ggbd !=nil {_aagg ,_bdf :=_ggbd .(*_ag .PdfObjectInteger );if !_bdf {_ab .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_ad .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_adf .BitsPerComponent =int (*_aagg );};if _adf .Predictor > 1{_adf .Columns =1;_ggbd =_aff .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _ggbd !=nil {_fefe ,_bfa :=_ggbd .(*_ag .PdfObjectInteger );if !_bfa {return nil ,_ad .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_adf .Columns =int (*_fefe );
};_adf .Colors =1;_ggbd =_aff .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _ggbd !=nil {_gabb ,_bde :=_ggbd .(*_ag .PdfObjectInteger );if !_bde {return nil ,_ad .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_adf .Colors =int (*_gabb );};};_ab .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_aff .String ());return _adf ,nil ;};func (_bgc *ContentStreamProcessor )getColorspace (_bbcb string ,_bgcb *_c .PdfPageResources )(_c .PdfColorspace ,error ){switch _bbcb {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _c .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _c .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _c .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _c .NewPdfColorspaceSpecialPattern (),nil ;
};_aeeb ,_ebdg :=_bgcb .GetColorspaceByName (_ag .PdfObjectName (_bbcb ));if _ebdg {return _aeeb ,nil ;};switch _bbcb {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _c .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _c .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _c .NewPdfColorspaceLab (),nil ;};_ab .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_bbcb );
return nil ,_ad .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_bbcb );};func (_cca *ContentStreamInlineImage )toImageBase (_ccef *_c .PdfPageResources )(*_ef .ImageBase ,error ){if _cca ._fcb !=nil {return _cca ._fcb ,nil ;
};_acbe :=_ef .ImageBase {};if _cca .Height ==nil {return nil ,_d .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_gbf ,_ddg :=_cca .Height .(*_ag .PdfObjectInteger );
if !_ddg {return nil ,_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_acbe .Height =int (*_gbf );if _cca .Width ==nil {return nil ,_d .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_gba ,_ddg :=_cca .Width .(*_ag .PdfObjectInteger );if !_ddg {return nil ,_d .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_acbe .Width =int (*_gba );_feec ,_bebg :=_cca .IsMask ();if _bebg !=nil {return nil ,_bebg ;
};if _feec {_acbe .BitsPerComponent =1;_acbe .ColorComponents =1;}else {if _cca .BitsPerComponent ==nil {_ab .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_acbe .BitsPerComponent =8;}else {_abfe ,_adede :=_cca .BitsPerComponent .(*_ag .PdfObjectInteger );if !_adede {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cca .BitsPerComponent );
return nil ,_d .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_acbe .BitsPerComponent =int (*_abfe );};if _cca .ColorSpace !=nil {_dab ,_gfa :=_cca .GetColorSpace (_ccef );if _gfa !=nil {return nil ,_gfa ;};_acbe .ColorComponents =_dab .GetNumComponents ();
}else {_ab .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_acbe .ColorComponents =1;};};if _ecef ,_fda :=_ag .GetArray (_cca .Decode );_fda {_acbe .Decode ,_bebg =_ecef .ToFloat64Array ();if _bebg !=nil {return nil ,_bebg ;};};_cca ._fcb =&_acbe ;return _cca ._fcb ,nil ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_efa *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u006d";_gcd .Params =_fbgda ([]float64 {x ,y });_efa ._fc =append (_efa ._fc ,&_gcd );return _efa ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dcf *ContentCreator )Add_b ()*ContentCreator {_gab :=ContentStreamOperation {};_gab .Operand ="\u0062";_dcf ._fc =append (_dcf ._fc ,&_gab );return _dcf ;};func (_gge *ContentStreamProcessor )handleCommand_SC (_eaa *ContentStreamOperation ,_gcbg *_c .PdfPageResources )error {_bdeb :=_gge ._gef .ColorspaceStroking ;
if len (_eaa .Params )!=_bdeb .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_eaa .Params ),_bdeb );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_bgfa ,_eecc :=_bdeb .ColorFromPdfObjects (_eaa .Params );if _eecc !=nil {return _eecc ;};_gge ._gef .ColorStroking =_bgfa ;return nil ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ec *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_acf :=ContentStreamOperation {};_acf .Operand ="\u004a";_acf .Params =_gffc ([]_ag .PdfObjectName {_ag .PdfObjectName (lineCapStyle )});_ec ._fc =append (_ec ._fc ,&_acf );return _ec ;
};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_aa *ContentCreator )Wrap (){_aa ._fc .WrapIfNeeded ()};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bgb *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_aba :=ContentStreamOperation {};_aba .Operand ="\u0072\u0065";_aba .Params =_fbgda ([]float64 {x ,y ,width ,height });_bgb ._fc =append (_bgb ._fc ,&_aba );return _bgb ;
};func _ggfg (_dcbc string )bool {_ ,_ddbbg :=_fad [_dcbc ];return _ddbbg };func _fcc (_bac *ContentStreamInlineImage )(_ag .StreamEncoder ,error ){if _bac .Filter ==nil {return _ag .NewRawEncoder (),nil ;};_aag ,_ffb :=_bac .Filter .(*_ag .PdfObjectName );
if !_ffb {_aded ,_eca :=_bac .Filter .(*_ag .PdfObjectArray );if !_eca {return nil ,_ad .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _aded .Len ()==0{return _ag .NewRawEncoder (),nil ;};if _aded .Len ()!=1{_ecfe ,_fgbc :=_ccg (_bac );if _fgbc !=nil {_ab .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_fgbc );
return nil ,_fgbc ;};_ab .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_ecfe );return _ecfe ,nil ;};_bef :=_aded .Get (0);_aag ,_eca =_bef .(*_ag .PdfObjectName );if !_eca {return nil ,_ad .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_aag {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _ag .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _ag .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _eacf (_bac );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _dbf (_bac ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _eeceb (_bac ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _ag .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _ag .NewRunLengthEncoder (),nil ;
default:_ab .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_aag );
return nil ,_d .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Push pushes `gs` on the `gsStack`.
func (_bgga *GraphicStateStack )Push (gs GraphicsState ){*_bgga =append (*_bgga ,gs )};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_feee *ContentCreator )Add_G (gray float64 )*ContentCreator {_gfd :=ContentStreamOperation {};_gfd .Operand ="\u0047";_gfd .Params =_fbgda ([]float64 {gray });_feee ._fc =append (_feee ._fc ,&_gfd );return _feee ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ecc *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_fcfe :=ContentStreamOperation {};_fcfe .Operand ="\u0054\u0063";_fcfe .Params =_fbgda ([]float64 {charSpace });_ecc ._fc =append (_ecc ._fc ,&_fcfe );return _ecc ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_abec *ContentCreator )Add_B ()*ContentCreator {_bcc :=ContentStreamOperation {};_bcc .Operand ="\u0042";_abec ._fc =append (_abec ._fc ,&_bcc );return _abec ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcf *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_bgeag :=ContentStreamOperation {};_bgeag .Operand ="\u006b";_bgeag .Params =_fbgda ([]float64 {c ,m ,y ,k });_fcf ._fc =append (_fcf ._fc ,&_bgeag );return _fcf ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_fdda *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_age :=handlerEntry {};_age .Condition =condition ;_age .Operand =operand ;_age .Handler =handler ;_fdda ._bfec =append (_fdda ._bfec ,_age );
};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_gead *ContentStreamOperation ,_bbe GraphicsState ,_bfcd *_c .PdfPageResources )error ;

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_fea *ContentCreator )Add_W_starred ()*ContentCreator {_gfg :=ContentStreamOperation {};_gfg .Operand ="\u0057\u002a";_fea ._fc =append (_fea ._fc ,&_gfg );return _fea ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _c .Image ,encoder _ag .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_ag .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_fcd :=ContentStreamInlineImage {};if img .ColorComponents ==1{_fcd .ColorSpace =_ag .MakeName ("\u0047");
}else if img .ColorComponents ==3{_fcd .ColorSpace =_ag .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_fcd .ColorSpace =_ag .MakeName ("\u0043\u004d\u0059\u004b");}else {_ab .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_d .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_fcd .BitsPerComponent =_ag .MakeInteger (img .BitsPerComponent );
_fcd .Width =_ag .MakeInteger (img .Width );_fcd .Height =_ag .MakeInteger (img .Height );_dda ,_adg :=encoder .EncodeBytes (img .Data );if _adg !=nil {return nil ,_adg ;};_fcd ._bca =_dda ;_dfb :=encoder .GetFilterName ();if _dfb !=_ag .StreamEncodingFilterNameRaw {_fcd .Filter =_ag .MakeName (_dfb );
};return &_fcd ,nil ;};func (_gbda *ContentStreamProcessor )handleCommand_G (_egag *ContentStreamOperation ,_afcc *_c .PdfPageResources )error {_aegc :=_c .NewPdfColorspaceDeviceGray ();if len (_egag .Params )!=_aegc .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_egag .Params ),_aegc );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_gacg ,_adga :=_aegc .ColorFromPdfObjects (_egag .Params );if _adga !=nil {return _adga ;};_gbda ._gef .ColorspaceStroking =_aegc ;_gbda ._gef .ColorStroking =_gacg ;return nil ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_fafb *ContentCreator )Add_W ()*ContentCreator {_acg :=ContentStreamOperation {};_acg .Operand ="\u0057";_fafb ._fc =append (_fafb ._fc ,&_acg );return _fafb ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dgd *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_ebd :=ContentStreamOperation {};_ebd .Operand ="\u0054\u0077";_ebd .Params =_fbgda ([]float64 {wordSpace });_dgd ._fc =append (_dgd ._fc ,&_ebd );return _dgd ;};func (_gcf *ContentStreamProcessor )handleCommand_CS (_cfef *ContentStreamOperation ,_ded *_c .PdfPageResources )error {if len (_cfef .Params )< 1{_ab .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _d .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_cfef .Params )> 1{_ab .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _d .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_efb ,_dca :=_cfef .Params [0].(*_ag .PdfObjectName );if !_dca {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_gbd ,_fedg :=_gcf .getColorspace (string (*_efb ),_ded );if _fedg !=nil {return _fedg ;};_gcf ._gef .ColorspaceStroking =_gbd ;_caf ,_fedg :=_gcf .getInitialColor (_gbd );
if _fedg !=nil {return _fedg ;};_gcf ._gef .ColorStroking =_caf ;return nil ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_bec *ContentCreator )Add_EMC ()*ContentCreator {_eacd :=ContentStreamOperation {};_eacd .Operand ="\u0045\u004d\u0043";_bec ._fc =append (_bec ._fc ,&_eacd );return _bec ;};func (_ccc *ContentStreamProcessor )handleCommand_K (_bbdb *ContentStreamOperation ,_gcdc *_c .PdfPageResources )error {_ffafa :=_c .NewPdfColorspaceDeviceCMYK ();
if len (_bbdb .Params )!=_ffafa .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bbdb .Params ),_ffafa );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cgag ,_fdea :=_ffafa .ColorFromPdfObjects (_bbdb .Params );if _fdea !=nil {return _fdea ;};_ccc ._gef .ColorspaceStroking =_ffafa ;_ccc ._gef .ColorStroking =_cgag ;return nil ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ggf *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_afe :=ContentStreamOperation {};_afe .Operand ="\u0064";_afe .Params =[]_ag .PdfObject {};_afe .Params =append (_afe .Params ,_ag .MakeArrayFromIntegers64 (dashArray ));
_afe .Params =append (_afe .Params ,_ag .MakeInteger (dashPhase ));_ggf ._fc =append (_ggf ._fc ,&_afe );return _ggf ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// String returns `ops.Bytes()` as a string.
func (_dfc *ContentStreamOperations )String ()string {return string (_dfc .Bytes ())};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eac *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_edf :=ContentStreamOperation {};_edf .Operand ="\u0073\u0063\u006e";_edf .Params =_fbgda (c );_eac ._fc =append (_eac ._fc ,&_edf );return _eac ;};

// String is same as Bytes() except returns as a string for convenience.
func (_bad *ContentCreator )String ()string {return string (_bad ._fc .Bytes ())};func (_bgbf *ContentStreamProcessor )handleCommand_rg (_bfea *ContentStreamOperation ,_fead *_c .PdfPageResources )error {_agf :=_c .NewPdfColorspaceDeviceRGB ();if len (_bfea .Params )!=_agf .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bfea .Params ),_agf );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dgg ,_cbe :=_agf .ColorFromPdfObjects (_bfea .Params );if _cbe !=nil {return _cbe ;};_bgbf ._gef .ColorspaceNonStroking =_agf ;_bgbf ._gef .ColorNonStroking =_dgg ;return nil ;};func (_beec *ContentStreamParser )parseObject ()(_gdcg _ag .PdfObject ,_egcf bool ,_gbbg error ){_beec .skipSpaces ();
for {_afbc ,_bbfeb :=_beec ._geb .Peek (2);if _bbfeb !=nil {return nil ,false ,_bbfeb ;};_ab .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_afbc ));if _afbc [0]=='%'{_beec .skipComments ();continue ;
}else if _afbc [0]=='/'{_baeb ,_bccg :=_beec .parseName ();_ab .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_baeb );return &_baeb ,false ,_bccg ;}else if _afbc [0]=='('{_ab .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");
_fgcf ,_ccea :=_beec .parseString ();return _fgcf ,false ,_ccea ;}else if _afbc [0]=='<'&&_afbc [1]!='<'{_ab .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_ecd ,_begb :=_beec .parseHexString ();return _ecd ,false ,_begb ;
}else if _afbc [0]=='['{_ab .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_ffdd ,_faba :=_beec .parseArray ();return _ffdd ,false ,_faba ;}else if _ag .IsFloatDigit (_afbc [0])||(_afbc [0]=='-'&&_ag .IsFloatDigit (_afbc [1]))||(_afbc [0]=='+'&&_ag .IsFloatDigit (_afbc [1])){_ab .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_fddb ,_dgf :=_beec .parseNumber ();return _fddb ,false ,_dgf ;}else if _afbc [0]=='<'&&_afbc [1]=='<'{_cbad ,_cbgd :=_beec .parseDict ();return _cbad ,false ,_cbgd ;}else {_ab .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_afbc ,_ =_beec ._geb .Peek (5);_feb :=string (_afbc );_ab .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_feb );if (len (_feb )> 3)&&(_feb [:4]=="\u006e\u0075\u006c\u006c"){_fdf ,_gea :=_beec .parseNull ();
return &_fdf ,false ,_gea ;}else if (len (_feb )> 4)&&(_feb [:5]=="\u0066\u0061\u006cs\u0065"){_gdca ,_aaa :=_beec .parseBool ();return &_gdca ,false ,_aaa ;}else if (len (_feb )> 3)&&(_feb [:4]=="\u0074\u0072\u0075\u0065"){_bggd ,_gde :=_beec .parseBool ();
return &_bggd ,false ,_gde ;};_fabab ,_cbag :=_beec .parseOperand ();if _cbag !=nil {return _fabab ,false ,_cbag ;};if len (_fabab .String ())< 1{return _fabab ,false ,ErrInvalidOperand ;};return _fabab ,true ,nil ;};};};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_bg *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_bg )==0{return _bg ;};if _bg .isWrapped (){return _bg ;};*_bg =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_bg ...);_gd :=0;for _ ,_ebf :=range *_bg {if _ebf .Operand =="\u0071"{_gd ++;
}else if _ebf .Operand =="\u0051"{_gd --;};};for _gd > 0{*_bg =append (*_bg ,&ContentStreamOperation {Operand :"\u0051"});_gd --;};return _bg ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_bbb *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_fab :=_a .Cos (angle *_a .Pi /180.0);_ff :=_a .Sin (angle *_a .Pi /180.0);_deb :=-_a .Sin (angle *_a .Pi /180.0);_da :=_a .Cos (angle *_a .Pi /180.0);return _bbb .Add_cm (_fab ,_ff ,_deb ,_da ,0,0);
};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dag *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_ggc :=ContentStreamOperation {};_ggc .Operand ="\u0054\u0073";_ggc .Params =_fbgda ([]float64 {rise });_dag ._fc =append (_dag ._fc ,&_ggc );return _dag ;};func (_gaf *ContentStreamParser )parseString ()(*_ag .PdfObjectString ,error ){_gaf ._geb .ReadByte ();
var _dbea []byte ;_dce :=1;for {_abca ,_babg :=_gaf ._geb .Peek (1);if _babg !=nil {return _ag .MakeString (string (_dbea )),_babg ;};if _abca [0]=='\\'{_gaf ._geb .ReadByte ();_aed ,_gfe :=_gaf ._geb .ReadByte ();if _gfe !=nil {return _ag .MakeString (string (_dbea )),_gfe ;
};if _ag .IsOctalDigit (_aed ){_cefa ,_dgc :=_gaf ._geb .Peek (2);if _dgc !=nil {return _ag .MakeString (string (_dbea )),_dgc ;};var _dbbb []byte ;_dbbb =append (_dbbb ,_aed );for _ ,_egdc :=range _cefa {if _ag .IsOctalDigit (_egdc ){_dbbb =append (_dbbb ,_egdc );
}else {break ;};};_gaf ._geb .Discard (len (_dbbb )-1);_ab .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_dbbb );_dbca ,_dgc :=_e .ParseUint (string (_dbbb ),8,32);if _dgc !=nil {return _ag .MakeString (string (_dbea )),_dgc ;
};_dbea =append (_dbea ,byte (_dbca ));continue ;};switch _aed {case 'n':_dbea =append (_dbea ,'\n');case 'r':_dbea =append (_dbea ,'\r');case 't':_dbea =append (_dbea ,'\t');case 'b':_dbea =append (_dbea ,'\b');case 'f':_dbea =append (_dbea ,'\f');case '(':_dbea =append (_dbea ,'(');
case ')':_dbea =append (_dbea ,')');case '\\':_dbea =append (_dbea ,'\\');};continue ;}else if _abca [0]=='('{_dce ++;}else if _abca [0]==')'{_dce --;if _dce ==0{_gaf ._geb .ReadByte ();break ;};};_agab ,_ :=_gaf ._geb .ReadByte ();_dbea =append (_dbea ,_agab );
};return _ag .MakeString (string (_dbea )),nil ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bag *ContentCreator )Add_s ()*ContentCreator {_dfe :=ContentStreamOperation {};_dfe .Operand ="\u0073";_bag ._fc =append (_bag ._fc ,&_dfe );return _bag ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bcb *ContentCreator )Add_quotes (textstr _ag .PdfObjectString ,aw ,ac float64 )*ContentCreator {_gcef :=ContentStreamOperation {};_gcef .Operand ="\u0022";_gcef .Params =_fbgda ([]float64 {aw ,ac });_gcef .Params =append (_gcef .Params ,_bcccg ([]_ag .PdfObjectString {textstr })...);
_bcb ._fc =append (_bcb ._fc ,&_gcef );return _bcb ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgf *ContentCreator )Add_SCN_pattern (name _ag .PdfObjectName ,c ...float64 )*ContentCreator {_fgb :=ContentStreamOperation {};_fgb .Operand ="\u0053\u0043\u004e";_fgb .Params =_fbgda (c );_fgb .Params =append (_fgb .Params ,_ag .MakeName (string (name )));
_cgf ._fc =append (_cgf ._fc ,&_fgb );return _cgf ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cee *ContentCreator )Add_B_starred ()*ContentCreator {_bgf :=ContentStreamOperation {};_bgf .Operand ="\u0042\u002a";_cee ._fc =append (_cee ._fc ,&_bgf );return _cee ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_cg *ContentStreamOperations )Bytes ()[]byte {var _df _eb .Buffer ;for _ ,_fd :=range *_cg {if _fd ==nil {continue ;};if _fd .Operand =="\u0042\u0049"{_df .WriteString (_fd .Operand +"\u000a");_df .WriteString (_fd .Params [0].WriteString ());}else {for _ ,_cf :=range _fd .Params {_df .WriteString (_cf .WriteString ());
_df .WriteString ("\u0020");};_df .WriteString (_fd .Operand +"\u000a");};};return _df .Bytes ();};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eaga *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_ada :=ContentStreamOperation {};_ada .Operand ="\u0054\u007a";_ada .Params =_fbgda ([]float64 {scale });_eaga ._fc =append (_eaga ._fc ,&_ada );return _eaga ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_cdg *ContentCreator )Add_Tstar ()*ContentCreator {_afed :=ContentStreamOperation {};_afed .Operand ="\u0054\u002a";_cdg ._fc =append (_cdg ._fc ,&_afed );return _cdg ;};func _eacf (_ffa *ContentStreamInlineImage )(*_ag .DCTEncoder ,error ){_fcce :=_ag .NewDCTEncoder ();
_edg :=_eb .NewReader (_ffa ._bca );_cbg ,_cea :=_gg .DecodeConfig (_edg );if _cea !=nil {_ab .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_cea );return nil ,_cea ;
};switch _cbg .ColorModel {case _fa .RGBAModel :_fcce .BitsPerComponent =8;_fcce .ColorComponents =3;case _fa .RGBA64Model :_fcce .BitsPerComponent =16;_fcce .ColorComponents =3;case _fa .GrayModel :_fcce .BitsPerComponent =8;_fcce .ColorComponents =1;
case _fa .Gray16Model :_fcce .BitsPerComponent =16;_fcce .ColorComponents =1;case _fa .CMYKModel :_fcce .BitsPerComponent =8;_fcce .ColorComponents =4;case _fa .YCbCrModel :_fcce .BitsPerComponent =8;_fcce .ColorComponents =3;default:return nil ,_d .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_fcce .Width =_cbg .Width ;_fcce .Height =_cbg .Height ;_ab .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_fcce );return _fcce ,nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_abgc *ContentCreator )Add_ET ()*ContentCreator {_cae :=ContentStreamOperation {};_cae .Operand ="\u0045\u0054";_abgc ._fc =append (_abgc ._fc ,&_cae );return _abgc ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fag *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_dff :=ContentStreamOperation {};_dff .Operand ="\u0063\u006d";_dff .Params =_fbgda ([]float64 {a ,b ,c ,d ,e ,f });_fag ._fc =append (_fag ._fc ,&_dff );return _fag ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_aab *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_efee :=ContentStreamOperation {};_efee .Operand ="\u0053\u0043\u004e";_efee .Params =_fbgda (c );_aab ._fc =append (_aab ._fc ,&_efee );return _aab ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_geab HandlerConditionEnum )All ()bool {return _geab ==HandlerConditionEnumAllOperands };

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bbf *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_fdd :=ContentStreamOperation {};_fdd .Operand ="\u0079";_fdd .Params =_fbgda ([]float64 {x1 ,y1 ,x3 ,y3 });_bbf ._fc =append (_bbf ._fc ,&_fdd );return _bbf ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_acc *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_aecd :=ContentStreamOperation {};_aecd .Operand ="\u0063";_aecd .Params =_fbgda ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_acc ._fc =append (_acc ._fc ,&_aecd );return _acc ;
};func (_gcb *ContentStreamParser )parseArray ()(*_ag .PdfObjectArray ,error ){_ffbb :=_ag .MakeArray ();_gcb ._geb .ReadByte ();for {_gcb .skipSpaces ();_dbd ,_aafa :=_gcb ._geb .Peek (1);if _aafa !=nil {return _ffbb ,_aafa ;};if _dbd [0]==']'{_gcb ._geb .ReadByte ();
break ;};_dcg ,_ ,_aafa :=_gcb .parseObject ();if _aafa !=nil {return _ffbb ,_aafa ;};_ffbb .Append (_dcg );};return _ffbb ,nil ;};

// GetEncoder returns the encoder of the inline image.
func (_cfge *ContentStreamInlineImage )GetEncoder ()(_ag .StreamEncoder ,error ){return _fcc (_cfge )};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_efag *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_bfc :=ContentStreamOperation {};_bfc .Operand ="\u0054\u0044";_bfc .Params =_fbgda ([]float64 {tx ,ty });_efag ._fc =append (_efag ._fc ,&_bfc );return _efag ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fca *ContentCreator )Add_BT ()*ContentCreator {_ecf :=ContentStreamOperation {};_ecf .Operand ="\u0042\u0054";_fca ._fc =append (_fca ._fc ,&_ecf );return _fca ;};func (_egf *ContentStreamParser )skipComments ()error {if _ ,_fefa :=_egf .skipSpaces ();
_fefa !=nil {return _fefa ;};_ccaa :=true ;for {_faab ,_eeef :=_egf ._geb .Peek (1);if _eeef !=nil {_ab .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_eeef .Error ());return _eeef ;};if _ccaa &&_faab [0]!='%'{return nil ;};_ccaa =false ;
if (_faab [0]!='\r')&&(_faab [0]!='\n'){_egf ._geb .ReadByte ();}else {break ;};};return _egf .skipComments ();};

// WriteString outputs the object as it is to be written to file.
func (_feda *ContentStreamInlineImage )WriteString ()string {var _feeb _eb .Buffer ;_gac :="";if _feda .BitsPerComponent !=nil {_gac +="\u002f\u0042\u0050C\u0020"+_feda .BitsPerComponent .WriteString ()+"\u000a";};if _feda .ColorSpace !=nil {_gac +="\u002f\u0043\u0053\u0020"+_feda .ColorSpace .WriteString ()+"\u000a";
};if _feda .Decode !=nil {_gac +="\u002f\u0044\u0020"+_feda .Decode .WriteString ()+"\u000a";};if _feda .DecodeParms !=nil {_gac +="\u002f\u0044\u0050\u0020"+_feda .DecodeParms .WriteString ()+"\u000a";};if _feda .Filter !=nil {_gac +="\u002f\u0046\u0020"+_feda .Filter .WriteString ()+"\u000a";
};if _feda .Height !=nil {_gac +="\u002f\u0048\u0020"+_feda .Height .WriteString ()+"\u000a";};if _feda .ImageMask !=nil {_gac +="\u002f\u0049\u004d\u0020"+_feda .ImageMask .WriteString ()+"\u000a";};if _feda .Intent !=nil {_gac +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_feda .Intent .WriteString ()+"\u000a";
};if _feda .Interpolate !=nil {_gac +="\u002f\u0049\u0020"+_feda .Interpolate .WriteString ()+"\u000a";};if _feda .Width !=nil {_gac +="\u002f\u0057\u0020"+_feda .Width .WriteString ()+"\u000a";};_feeb .WriteString (_gac );_feeb .WriteString ("\u0049\u0044\u0020");
_feeb .Write (_feda ._bca );_feeb .WriteString ("\u000a\u0045\u0049\u000a");return _feeb .String ();};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_ebfa *ContentStreamInlineImage )IsMask ()(bool ,error ){if _ebfa .ImageMask !=nil {_bcab ,_befb :=_ebfa .ImageMask .(*_ag .PdfObjectBool );if !_befb {_ab .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_d .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_bcab ),nil ;};return false ,nil ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_ede *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _ede .CTM .Transform (x ,y );};func (_afcf *ContentStreamParser )parseNull ()(_ag .PdfObjectNull ,error ){_ ,_ffd :=_afcf ._geb .Discard (4);return _ag .PdfObjectNull {},_ffd ;
};func _dgcf (_cagg _c .PdfColorspace )bool {_ ,_cgb :=_cagg .(*_c .PdfColorspaceSpecialPattern );return _cgb ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_aebb *ContentCreator )Add_Tf (fontName _ag .PdfObjectName ,fontSize float64 )*ContentCreator {_fgd :=ContentStreamOperation {};_fgd .Operand ="\u0054\u0066";_fgd .Params =_gffc ([]_ag .PdfObjectName {fontName });_fgd .Params =append (_fgd .Params ,_fbgda ([]float64 {fontSize })...);
_aebb ._fc =append (_aebb ._fc ,&_fgd );return _aebb ;};

// GetColorSpace returns the colorspace of the inline image.
func (_fgea *ContentStreamInlineImage )GetColorSpace (resources *_c .PdfPageResources )(_c .PdfColorspace ,error ){if _fgea .ColorSpace ==nil {_ab .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _c .NewPdfColorspaceDeviceGray (),nil ;};if _affa ,_aga :=_fgea .ColorSpace .(*_ag .PdfObjectArray );_aga {return _dfac (_affa );};_eba ,_cda :=_fgea .ColorSpace .(*_ag .PdfObjectName );if !_cda {_ab .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_fgea .ColorSpace ,_fgea .ColorSpace );
return nil ,_d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_eba =="\u0047"||*_eba =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _c .NewPdfColorspaceDeviceGray (),nil ;}else if *_eba =="\u0052\u0047\u0042"||*_eba =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _c .NewPdfColorspaceDeviceRGB (),nil ;
}else if *_eba =="\u0043\u004d\u0059\u004b"||*_eba =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _c .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_eba =="\u0049"||*_eba =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_d .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");
}else {if resources .ColorSpace ==nil {_ab .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_eba );
return nil ,_d .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_fgc ,_agc :=resources .GetColorspaceByName (*_eba );if !_agc {_ab .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_eba );
return nil ,_d .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _fgc ,nil ;};};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fae *ContentCreator )Add_quote (textstr _ag .PdfObjectString )*ContentCreator {_efg :=ContentStreamOperation {};_efg .Operand ="\u0027";_efg .Params =_bcccg ([]_ag .PdfObjectString {textstr });_fae ._fc =append (_fae ._fc ,&_efg );return _fae ;};


// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_abee *ContentCreator )Add_CS (name _ag .PdfObjectName )*ContentCreator {_bae :=ContentStreamOperation {};_bae .Operand ="\u0043\u0053";_bae .Params =_gffc ([]_ag .PdfObjectName {name });_abee ._fc =append (_abee ._fc ,&_bae );return _abee ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_afb *ContentCreator )Add_BMC (tag _ag .PdfObjectName )*ContentCreator {_deg :=ContentStreamOperation {};_deg .Operand ="\u0042\u004d\u0043";_deg .Params =_gffc ([]_ag .PdfObjectName {tag });_afb ._fc =append (_afb ._fc ,&_deg );return _afb ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_efd *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _efd .Add_cm (1,0,0,1,tx ,ty );};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_aea *ContentStreamParser )ExtractText ()(string ,error ){_ee ,_fe :=_aea .Parse ();if _fe !=nil {return "",_fe ;};_ade :=false ;_ggg ,_db :=float64 (-1),float64 (-1);_dbe :="";for _ ,_ac :=range *_ee {if _ac .Operand =="\u0042\u0054"{_ade =true ;
}else if _ac .Operand =="\u0045\u0054"{_ade =false ;};if _ac .Operand =="\u0054\u0064"||_ac .Operand =="\u0054\u0044"||_ac .Operand =="\u0054\u002a"{_dbe +="\u000a";};if _ac .Operand =="\u0054\u006d"{if len (_ac .Params )!=6{continue ;};_ba ,_acb :=_ac .Params [4].(*_ag .PdfObjectFloat );
if !_acb {_ggb ,_ebe :=_ac .Params [4].(*_ag .PdfObjectInteger );if !_ebe {continue ;};_ba =_ag .MakeFloat (float64 (*_ggb ));};_efe ,_acb :=_ac .Params [5].(*_ag .PdfObjectFloat );if !_acb {_abg ,_aeb :=_ac .Params [5].(*_ag .PdfObjectInteger );if !_aeb {continue ;
};_efe =_ag .MakeFloat (float64 (*_abg ));};if _db ==-1{_db =float64 (*_efe );}else if _db > float64 (*_efe ){_dbe +="\u000a";_ggg =float64 (*_ba );_db =float64 (*_efe );continue ;};if _ggg ==-1{_ggg =float64 (*_ba );}else if _ggg < float64 (*_ba ){_dbe +="\u0009";
_ggg =float64 (*_ba );};};if _ade &&_ac .Operand =="\u0054\u004a"{if len (_ac .Params )< 1{continue ;};_cd ,_ea :=_ac .Params [0].(*_ag .PdfObjectArray );if !_ea {return "",_ad .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ac .Params [0]);
};for _ ,_ce :=range _cd .Elements (){switch _bf :=_ce .(type ){case *_ag .PdfObjectString :_dbe +=_bf .Str ();case *_ag .PdfObjectFloat :if *_bf < -100{_dbe +="\u0020";};case *_ag .PdfObjectInteger :if *_bf < -100{_dbe +="\u0020";};};};}else if _ade &&_ac .Operand =="\u0054\u006a"{if len (_ac .Params )< 1{continue ;
};_eab ,_gf :=_ac .Params [0].(*_ag .PdfObjectString );if !_gf {return "",_ad .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ac .Params [0]);
};_dbe +=_eab .Str ();};};return _dbe ,nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dbeg *ContentCreator )Add_Tj (textstr _ag .PdfObjectString )*ContentCreator {_dcb :=ContentStreamOperation {};_dcb .Operand ="\u0054\u006a";_dcb .Params =_bcccg ([]_ag .PdfObjectString {textstr });_dbeg ._fc =append (_dbeg ._fc ,&_dcb );return _dbeg ;
};var _fad =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};


// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_aae HandlerConditionEnum )Operand ()bool {return _aae ==HandlerConditionEnumOperand };func (_aeg *ContentStreamInlineImage )String ()string {_bbbf :=_ad .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_aeg ._bca ));
if _aeg .BitsPerComponent !=nil {_bbbf +="\u002d\u0020\u0042\u0050\u0043\u0020"+_aeg .BitsPerComponent .WriteString ()+"\u000a";};if _aeg .ColorSpace !=nil {_bbbf +="\u002d\u0020\u0043S\u0020"+_aeg .ColorSpace .WriteString ()+"\u000a";};if _aeg .Decode !=nil {_bbbf +="\u002d\u0020\u0044\u0020"+_aeg .Decode .WriteString ()+"\u000a";
};if _aeg .DecodeParms !=nil {_bbbf +="\u002d\u0020\u0044P\u0020"+_aeg .DecodeParms .WriteString ()+"\u000a";};if _aeg .Filter !=nil {_bbbf +="\u002d\u0020\u0046\u0020"+_aeg .Filter .WriteString ()+"\u000a";};if _aeg .Height !=nil {_bbbf +="\u002d\u0020\u0048\u0020"+_aeg .Height .WriteString ()+"\u000a";
};if _aeg .ImageMask !=nil {_bbbf +="\u002d\u0020\u0049M\u0020"+_aeg .ImageMask .WriteString ()+"\u000a";};if _aeg .Intent !=nil {_bbbf +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_aeg .Intent .WriteString ()+"\u000a";};if _aeg .Interpolate !=nil {_bbbf +="\u002d\u0020\u0049\u0020"+_aeg .Interpolate .WriteString ()+"\u000a";
};if _aeg .Width !=nil {_bbbf +="\u002d\u0020\u0057\u0020"+_aeg .Width .WriteString ()+"\u000a";};return _bbbf ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gce *ContentCreator )Add_h ()*ContentCreator {_afc :=ContentStreamOperation {};_afc .Operand ="\u0068";_gce ._fc =append (_gce ._fc ,&_afc );return _gce ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_ddag *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_cfbe :=ContentStreamInlineImage {};for {_ddag .skipSpaces ();_gabbc ,_aggg ,_cfe :=_ddag .parseObject ();if _cfe !=nil {return nil ,_cfe ;};if !_aggg {_eagg ,_bba :=_ag .GetName (_gabbc );
if !_bba {_ab .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gabbc );
return nil ,_ad .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gabbc );
};_adfg ,_badf ,_gdd :=_ddag .parseObject ();if _gdd !=nil {return nil ,_gdd ;};if _badf {return nil ,_ad .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};switch *_eagg {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_cfbe .BitsPerComponent =_adfg ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_cfbe .ColorSpace =_adfg ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_cfbe .Decode =_adfg ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_cfbe .DecodeParms =_adfg ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_cfbe .Filter =_adfg ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_cfbe .Height =_adfg ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_cfbe .ImageMask =_adfg ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_cfbe .Intent =_adfg ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_cfbe .Interpolate =_adfg ;
case "\u0057","\u0057\u0069\u0064t\u0068":_cfbe .Width =_adfg ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_ab .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_eagg );
default:return nil ,_ad .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_eagg );};};if _aggg {_dfbf ,_bfe :=_gabbc .(*_ag .PdfObjectString );
if !_bfe {return nil ,_ad .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _dfbf .Str ()=="\u0045\u0049"{_ab .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_cfbe ,nil ;}else if _dfbf .Str ()=="\u0049\u0044"{_ab .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_bfd ,_fdg :=_ddag ._geb .Peek (1);if _fdg !=nil {return nil ,_fdg ;};if _ag .IsWhiteSpace (_bfd [0]){_ddag ._geb .Discard (1);};_cfbe ._bca =[]byte {};_degd :=0;var _efaa []byte ;for {_caa ,_efea :=_ddag ._geb .ReadByte ();if _efea !=nil {_ab .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_efea ;};if _degd ==0{if _ag .IsWhiteSpace (_caa ){_efaa =[]byte {};_efaa =append (_efaa ,_caa );_degd =1;}else if _caa =='E'{_efaa =append (_efaa ,_caa );_degd =2;}else {_cfbe ._bca =append (_cfbe ._bca ,_caa );};}else if _degd ==1{_efaa =append (_efaa ,_caa );
if _caa =='E'{_degd =2;}else {_cfbe ._bca =append (_cfbe ._bca ,_efaa ...);_efaa =[]byte {};if _ag .IsWhiteSpace (_caa ){_degd =1;}else {_degd =0;};};}else if _degd ==2{_efaa =append (_efaa ,_caa );if _caa =='I'{_degd =3;}else {_cfbe ._bca =append (_cfbe ._bca ,_efaa ...);
_efaa =[]byte {};_degd =0;};}else if _degd ==3{_efaa =append (_efaa ,_caa );if _ag .IsWhiteSpace (_caa ){_egdg ,_bgeg :=_ddag ._geb .Peek (20);if _bgeg !=nil &&_bgeg !=_dg .EOF {return nil ,_bgeg ;};_cad :=NewContentStreamParser (string (_egdg ));_acad :=true ;
for _deba :=0;_deba < 3;_deba ++{_bacd ,_dcfec ,_afgd :=_cad .parseObject ();if _afgd !=nil {if _afgd ==_dg .EOF {break ;};_acad =false ;continue ;};if _dcfec &&!_ggfg (_bacd .String ()){_acad =false ;break ;};};if _acad {if len (_cfbe ._bca )> 100{_ab .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_cfbe ._bca ),_cfbe ._bca [:100]);
}else {_ab .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_cfbe ._bca ),_cfbe ._bca );};return &_cfbe ,nil ;};};_cfbe ._bca =append (_cfbe ._bca ,_efaa ...);_efaa =[]byte {};
_degd =0;};};};};};};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_cag *ContentCreator )SetStrokingColor (color _c .PdfColor )*ContentCreator {switch _gae :=color .(type ){case *_c .PdfColorDeviceGray :_cag .Add_G (_gae .Val ());case *_c .PdfColorDeviceRGB :_cag .Add_RG (_gae .R (),_gae .G (),_gae .B ());case *_c .PdfColorDeviceCMYK :_cag .Add_K (_gae .C (),_gae .M (),_gae .Y (),_gae .K ());
default:_ab .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_gae );
};return _cag ;};func (_adb *ContentStreamOperations )isWrapped ()bool {if len (*_adb )< 2{return false ;};_cb :=0;for _ ,_dc :=range *_adb {if _dc .Operand =="\u0071"{_cb ++;}else if _dc .Operand =="\u0051"{_cb --;}else {if _cb < 1{return false ;};};};
return _cb ==0;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_egca *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_fde :=ContentStreamOperation {};_fde .Operand ="\u0054\u006d";_fde .Params =_fbgda ([]float64 {a ,b ,c ,d ,e ,f });_egca ._fc =append (_egca ._fc ,&_fde );return _egca ;};


// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_bd *ContentCreator )Add_Do (name _ag .PdfObjectName )*ContentCreator {_daa :=ContentStreamOperation {};_daa .Operand ="\u0044\u006f";_daa .Params =_gffc ([]_ag .PdfObjectName {name });_bd ._fc =append (_bd ._fc ,&_daa );return _bd ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fbf *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_eege :=ContentStreamOperation {};_eege .Operand ="\u0053\u0043";_eege .Params =_fbgda (c );_fbf ._fc =append (_fbf ._fc ,&_eege );return _fbf ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ed *ContentCreator )Add_f_starred ()*ContentCreator {_fg :=ContentStreamOperation {};_fg .Operand ="\u0066\u002a";_ed ._fc =append (_ed ._fc ,&_fg );return _ed ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_dge *ContentCreator )Add_sh (name _ag .PdfObjectName )*ContentCreator {_dcfe :=ContentStreamOperation {};_dcfe .Operand ="\u0073\u0068";_dcfe .Params =_gffc ([]_ag .PdfObjectName {name });_dge ._fc =append (_dge ._fc ,&_dcfe );return _dge ;};func (_fbgd *ContentStreamProcessor )getInitialColor (_bbafd _c .PdfColorspace )(_c .PdfColor ,error ){switch _fgdg :=_bbafd .(type ){case *_c .PdfColorspaceDeviceGray :return _c .NewPdfColorDeviceGray (0.0),nil ;
case *_c .PdfColorspaceDeviceRGB :return _c .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_c .PdfColorspaceDeviceCMYK :return _c .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_c .PdfColorspaceCalGray :return _c .NewPdfColorCalGray (0.0),nil ;case *_c .PdfColorspaceCalRGB :return _c .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;
case *_c .PdfColorspaceLab :_feac :=0.0;_acgb :=0.0;_ddaga :=0.0;if _fgdg .Range [0]> 0{_feac =_fgdg .Range [0];};if _fgdg .Range [2]> 0{_acgb =_fgdg .Range [2];};return _c .NewPdfColorLab (_feac ,_acgb ,_ddaga ),nil ;case *_c .PdfColorspaceICCBased :if _fgdg .Alternate ==nil {_ab .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_fgdg .N );
if _fgdg .N ==1{_ab .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _fbgd .getInitialColor (_c .NewPdfColorspaceDeviceGray ());}else if _fgdg .N ==3{_ab .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _fbgd .getInitialColor (_c .NewPdfColorspaceDeviceRGB ());}else if _fgdg .N ==4{_ab .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _fbgd .getInitialColor (_c .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_d .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _fbgd .getInitialColor (_fgdg .Alternate );case *_c .PdfColorspaceSpecialIndexed :if _fgdg .Base ==nil {return nil ,_d .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _fbgd .getInitialColor (_fgdg .Base );case *_c .PdfColorspaceSpecialSeparation :if _fgdg .AlternateSpace ==nil {return nil ,_d .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _fbgd .getInitialColor (_fgdg .AlternateSpace );case *_c .PdfColorspaceDeviceN :if _fgdg .AlternateSpace ==nil {return nil ,_d .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _fbgd .getInitialColor (_fgdg .AlternateSpace );case *_c .PdfColorspaceSpecialPattern :return nil ,nil ;};_ab .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bbafd );
return nil ,_d .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};func (_dcbg *ContentStreamProcessor )handleCommand_RG (_cgfg *ContentStreamOperation ,_fabae *_c .PdfPageResources )error {_bdd :=_c .NewPdfColorspaceDeviceRGB ();
if len (_cgfg .Params )!=_bdd .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cgfg .Params ),_bdd );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_fcfef ,_ddga :=_bdd .ColorFromPdfObjects (_cgfg .Params );if _ddga !=nil {return _ddga ;};_dcbg ._gef .ColorspaceStroking =_bdd ;_dcbg ._gef .ColorStroking =_fcfef ;return nil ;};func (_cfdc *ContentStreamParser )parseName ()(_ag .PdfObjectName ,error ){_ggbg :="";
_aaca :=false ;for {_dac ,_fddc :=_cfdc ._geb .Peek (1);if _fddc ==_dg .EOF {break ;};if _fddc !=nil {return _ag .PdfObjectName (_ggbg ),_fddc ;};if !_aaca {if _dac [0]=='/'{_aaca =true ;_cfdc ._geb .ReadByte ();}else {_ab .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_dac ,_dac );
return _ag .PdfObjectName (_ggbg ),_ad .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_dac [0]);};}else {if _ag .IsWhiteSpace (_dac [0]){break ;}else if (_dac [0]=='/')||(_dac [0]=='[')||(_dac [0]=='(')||(_dac [0]==']')||(_dac [0]=='<')||(_dac [0]=='>'){break ;
}else if _dac [0]=='#'{_bdfd ,_aggd :=_cfdc ._geb .Peek (3);if _aggd !=nil {return _ag .PdfObjectName (_ggbg ),_aggd ;};_cfdc ._geb .Discard (3);_bgac ,_aggd :=_g .DecodeString (string (_bdfd [1:3]));if _aggd !=nil {return _ag .PdfObjectName (_ggbg ),_aggd ;
};_ggbg +=string (_bgac );}else {_adeg ,_ :=_cfdc ._geb .ReadByte ();_ggbg +=string (_adeg );};};};return _ag .PdfObjectName (_ggbg ),nil ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_bdbf *GraphicStateStack )Pop ()GraphicsState {_afgc :=(*_bdbf )[len (*_bdbf )-1];*_bdbf =(*_bdbf )[:len (*_bdbf )-1];return _afgc ;};func _bcccg (_fgbd []_ag .PdfObjectString )[]_ag .PdfObject {var _gfeb []_ag .PdfObject ;for _ ,_gefd :=range _fgbd {_gfeb =append (_gfeb ,_ag .MakeString (_gefd .Str ()));
};return _gfeb ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cfg *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_eda :=ContentStreamOperation {};_eda .Operand ="\u004b";_eda .Params =_fbgda ([]float64 {c ,m ,y ,k });_cfg ._fc =append (_cfg ._fc ,&_eda );return _cfg ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efad *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_abc :=ContentStreamOperation {};_abc .Operand ="\u0072\u0067";_abc .Params =_fbgda ([]float64 {r ,g ,b });_efad ._fc =append (_efad ._fc ,&_abc );return _efad ;};func _fbgda (_daff []float64 )[]_ag .PdfObject {var _aefe []_ag .PdfObject ;
for _ ,_ebb :=range _daff {_aefe =append (_aefe ,_ag .MakeFloat (_ebb ));};return _aefe ;};func (_edgc *ContentStreamProcessor )handleCommand_k (_bdbd *ContentStreamOperation ,_ebfba *_c .PdfPageResources )error {_edcg :=_c .NewPdfColorspaceDeviceCMYK ();
if len (_bdbd .Params )!=_edcg .GetNumComponents (){_ab .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_ab .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bdbd .Params ),_edcg );return _d .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_cdae ,_geee :=_edcg .ColorFromPdfObjects (_bdbd .Params );if _geee !=nil {return _geee ;};_edgc ._gef .ColorspaceNonStroking =_edcg ;_edgc ._gef .ColorNonStroking =_cdae ;return nil ;};var (ErrInvalidOperand =_d .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
);

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_gfab *ContentStreamInlineImage )ToImage (resources *_c .PdfPageResources )(*_c .Image ,error ){_begd ,_gdc :=_gfab .toImageBase (resources );if _gdc !=nil {return nil ,_gdc ;};_caed ,_gdc :=_fcc (_gfab );if _gdc !=nil {return nil ,_gdc ;};_ebg ,_dad :=_ag .GetDict (_gfab .DecodeParms );
if _dad {_caed .UpdateParams (_ebg );};_ab .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_caed ,_caed );_ab .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_gfab );
_bbc ,_gdc :=_caed .DecodeBytes (_gfab ._bca );if _gdc !=nil {return nil ,_gdc ;};_ddbb :=&_c .Image {Width :int64 (_begd .Width ),Height :int64 (_begd .Height ),BitsPerComponent :int64 (_begd .BitsPerComponent ),ColorComponents :_begd .ColorComponents ,Data :_bbc };
if len (_begd .Decode )> 0{for _cfb :=0;_cfb < len (_begd .Decode );_cfb ++{_begd .Decode [_cfb ]*=float64 ((int (1)<<uint (_begd .BitsPerComponent ))-1);};_ddbb .SetDecode (_begd .Decode );};return _ddbb ,nil ;};func (_abcf *ContentStreamParser )skipSpaces ()(int ,error ){_gbb :=0;
for {_bbaf ,_bbfe :=_abcf ._geb .Peek (1);if _bbfe !=nil {return 0,_bbfe ;};if _ag .IsWhiteSpace (_bbaf [0]){_abcf ._geb .ReadByte ();_gbb ++;}else {break ;};};return _gbb ,nil ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _ag .PdfObject ;ColorSpace _ag .PdfObject ;Decode _ag .PdfObject ;DecodeParms _ag .PdfObject ;Filter _ag .PdfObject ;Height _ag .PdfObject ;ImageMask _ag .PdfObject ;Intent _ag .PdfObject ;Interpolate _ag .PdfObject ;
Width _ag .PdfObject ;_bca []byte ;_fcb *_ef .ImageBase ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bcf *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_gb :=ContentStreamOperation {};_gb .Operand ="\u0077";_gb .Params =_fbgda ([]float64 {lineWidth });_bcf ._fc =append (_bcf ._fc ,&_gb );return _bcf ;};func (_beeg *ContentStreamProcessor )handleCommand_cs (_bfb *ContentStreamOperation ,_gbg *_c .PdfPageResources )error {if len (_bfb .Params )< 1{_ab .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _d .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_bfb .Params )> 1{_ab .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _d .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dee ,_ccf :=_bfb .Params [0].(*_ag .PdfObjectName );if !_ccf {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _d .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_afd ,_ccee :=_beeg .getColorspace (string (*_dee ),_gbg );if _ccee !=nil {return _ccee ;};_beeg ._gef .ColorspaceNonStroking =_afd ;_fcae ,_ccee :=_beeg .getInitialColor (_afd );
if _ccee !=nil {return _ccee ;};_beeg ._gef .ColorNonStroking =_fcae ;return nil ;};func (_dbef *ContentStreamParser )parseNumber ()(_ag .PdfObject ,error ){return _ag .ParseNumber (_dbef ._geb );};func _cacg (_dedc []int64 )[]_ag .PdfObject {var _befa []_ag .PdfObject ;
for _ ,_cefb :=range _dedc {_befa =append (_befa ,_ag .MakeInteger (_cefb ));};return _befa ;};