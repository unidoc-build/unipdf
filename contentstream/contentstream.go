//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_cb "bufio";_cc "bytes";_b "encoding/hex";_c "errors";_cg "fmt";_ea "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/core";_ce "github.com/unidoc/unipdf/v3/internal/imageutil";_ed "github.com/unidoc/unipdf/v3/internal/transform";_cgg "github.com/unidoc/unipdf/v3/model";_be "image/color";_ad "image/jpeg";_e "io";_eg "math";_a "strconv";);

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_adef *ContentCreator )Add_g (gray float64 )*ContentCreator {_dcg :=ContentStreamOperation {};_dcg .Operand ="\u0067";_dcg .Params =_faa ([]float64 {gray });_adef ._fae =append (_adef ._fae ,&_dcg );return _adef ;};

// String is same as Bytes() except returns as a string for convenience.
func (_db *ContentCreator )String ()string {return string (_db ._fae .Bytes ())};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bge *ContentCreator )Add_q ()*ContentCreator {_ff :=ContentStreamOperation {};_ff .Operand ="\u0071";_bge ._fae =append (_bge ._fae ,&_ff );return _bge ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cgd *ContentCreator )Add_quote (textstr _bd .PdfObjectString )*ContentCreator {_ggc :=ContentStreamOperation {};_ggc .Operand ="\u0027";_ggc .Params =_gegb ([]_bd .PdfObjectString {textstr });_cgd ._fae =append (_cgd ._fae ,&_ggc );return _cgd ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_ef *ContentCreator )Add_Do (name _bd .PdfObjectName )*ContentCreator {_acec :=ContentStreamOperation {};_acec .Operand ="\u0044\u006f";_acec .Params =_adf ([]_bd .PdfObjectName {name });_ef ._fae =append (_ef ._fae ,&_acec );return _ef ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_addb *ContentCreator )Bytes ()[]byte {return _addb ._fae .Bytes ()};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cce *ContentCreator )Add_G (gray float64 )*ContentCreator {_eb :=ContentStreamOperation {};_eb .Operand ="\u0047";_eb .Params =_faa ([]float64 {gray });_cce ._fae =append (_cce ._fae ,&_eb );return _cce ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dac *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_cdc :=ContentStreamOperation {};_cdc .Operand ="\u004b";_cdc .Params =_faa ([]float64 {c ,m ,y ,k });_dac ._fae =append (_dac ._fae ,&_cdc );return _dac ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dda *ContentCreator )Add_EMC ()*ContentCreator {_adb :=ContentStreamOperation {};_adb .Operand ="\u0045\u004d\u0043";_dda ._fae =append (_dda ._fae ,&_adb );return _dda ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_eac *ContentStreamInlineImage )ToImage (resources *_cgg .PdfPageResources )(*_cgg .Image ,error ){_cfcc ,_adgd :=_eac .toImageBase (resources );if _adgd !=nil {return nil ,_adgd ;};_gdcc ,_adgd :=_bgb (_eac );if _adgd !=nil {return nil ,_adgd ;};_ea .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_gdcc ,_gdcc );_ea .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_eac );_ddc ,_adgd :=_gdcc .DecodeBytes (_eac ._ebc );if _adgd !=nil {return nil ,_adgd ;};_dbc :=&_cgg .Image {Width :int64 (_cfcc .Width ),Height :int64 (_cfcc .Height ),BitsPerComponent :int64 (_cfcc .BitsPerComponent ),ColorComponents :_cfcc .ColorComponents ,Data :_ddc };if len (_cfcc .Decode )> 0{for _fabc :=0;_fabc < len (_cfcc .Decode );_fabc ++{_cfcc .Decode [_fabc ]*=float64 ((int (1)<<uint (_cfcc .BitsPerComponent ))-1);};_dbc .SetDecode (_cfcc .Decode );};return _dbc ,nil ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_daac *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_fbd :=ContentStreamOperation {};_fbd .Operand ="\u0079";_fbd .Params =_faa ([]float64 {x1 ,y1 ,x3 ,y3 });_daac ._fae =append (_daac ._fae ,&_fbd );return _daac ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_daa *ContentCreator )Add_gs (dictName _bd .PdfObjectName )*ContentCreator {_bga :=ContentStreamOperation {};_bga .Operand ="\u0067\u0073";_bga .Params =_adf ([]_bd .PdfObjectName {dictName });_daa ._fae =append (_daa ._fae ,&_bga );return _daa ;};func (_ecbd *ContentStreamProcessor )handleCommand_SC (_bgege *ContentStreamOperation ,_dceb *_cgg .PdfPageResources )error {_dacbd :=_ecbd ._cadd .ColorspaceStroking ;if len (_bgege .Params )!=_dacbd .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgege .Params ),_dacbd );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fggb ,_aee :=_dacbd .ColorFromPdfObjects (_bgege .Params );if _aee !=nil {return _aee ;};_ecbd ._cadd .ColorStroking =_fggb ;return nil ;};

// GetEncoder returns the encoder of the inline image.
func (_fcce *ContentStreamInlineImage )GetEncoder ()(_bd .StreamEncoder ,error ){return _bgb (_fcce )};func _gegb (_fadg []_bd .PdfObjectString )[]_bd .PdfObject {var _aecd []_bd .PdfObject ;for _ ,_agca :=range _fadg {_aecd =append (_aecd ,_bd .MakeString (_agca .Str ()));};return _aecd ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afb *ContentCreator )Add_scn_pattern (name _bd .PdfObjectName ,c ...float64 )*ContentCreator {_ddd :=ContentStreamOperation {};_ddd .Operand ="\u0073\u0063\u006e";_ddd .Params =_faa (c );_ddd .Params =append (_ddd .Params ,_bd .MakeName (string (name )));_afb ._fae =append (_afb ._fae ,&_ddd );return _afb ;};var _dbdc =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dfd *ContentCreator )Add_n ()*ContentCreator {_eea :=ContentStreamOperation {};_eea .Operand ="\u006e";_dfd ._fae =append (_dfd ._fae ,&_eea );return _dfd ;};func (_egbd *ContentStreamProcessor )handleCommand_g (_fbddd *ContentStreamOperation ,_bcd *_cgg .PdfPageResources )error {_aacb :=_cgg .NewPdfColorspaceDeviceGray ();if len (_fbddd .Params )!=_aacb .GetNumComponents (){_ea .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fbddd .Params ),_aacb );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gef ,_gfg :=_aacb .ColorFromPdfObjects (_fbddd .Params );if _gfg !=nil {_ea .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_aacb ,_fbddd ,_gfg );return _gfg ;};_egbd ._cadd .ColorspaceNonStroking =_aacb ;_egbd ._cadd .ColorNonStroking =_gef ;return nil ;};func (_aced *ContentStreamProcessor )handleCommand_RG (_beca *ContentStreamOperation ,_cggff *_cgg .PdfPageResources )error {_bbag :=_cgg .NewPdfColorspaceDeviceRGB ();if len (_beca .Params )!=_bbag .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_beca .Params ),_bbag );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gbae ,_fdb :=_bbag .ColorFromPdfObjects (_beca .Params );if _fdb !=nil {return _fdb ;};_aced ._cadd .ColorspaceStroking =_bbag ;_aced ._cadd .ColorStroking =_gbae ;return nil ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_eeef *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_dbfd :=ContentStreamInlineImage {};for {_eeef .skipSpaces ();_ccgb ,_ccce ,_fdag :=_eeef .parseObject ();if _fdag !=nil {return nil ,_fdag ;};if !_ccce {_gbe ,_ggdb :=_bd .GetName (_ccgb );if !_ggdb {_ea .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ccgb );return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_ccgb );};_bfd ,_ega ,_dcge :=_eeef .parseObject ();if _dcge !=nil {return nil ,_dcge ;};if _ega {return nil ,_cg .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_gbe {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_dbfd .BitsPerComponent =_bfd ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_dbfd .ColorSpace =_bfd ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_dbfd .Decode =_bfd ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_dbfd .DecodeParms =_bfd ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_dbfd .Filter =_bfd ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_dbfd .Height =_bfd ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_dbfd .ImageMask =_bfd ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_dbfd .Intent =_bfd ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_dbfd .Interpolate =_bfd ;case "\u0057","\u0057\u0069\u0064t\u0068":_dbfd .Width =_bfd ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_ea .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_gbe );default:return nil ,_cg .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_gbe );};};if _ccce {_ggf ,_cfff :=_ccgb .(*_bd .PdfObjectString );if !_cfff {return nil ,_cg .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _ggf .Str ()=="\u0045\u0049"{_ea .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_dbfd ,nil ;}else if _ggf .Str ()=="\u0049\u0044"{_ea .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_fgfg ,_cdab :=_eeef ._eafb .Peek (1);if _cdab !=nil {return nil ,_cdab ;};if _bd .IsWhiteSpace (_fgfg [0]){_eeef ._eafb .Discard (1);};_dbfd ._ebc =[]byte {};_gecg :=0;var _bffb []byte ;for {_agf ,_eebc :=_eeef ._eafb .ReadByte ();if _eebc !=nil {_ea .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_eebc ;};if _gecg ==0{if _bd .IsWhiteSpace (_agf ){_bffb =[]byte {};_bffb =append (_bffb ,_agf );_gecg =1;}else if _agf =='E'{_bffb =append (_bffb ,_agf );_gecg =2;}else {_dbfd ._ebc =append (_dbfd ._ebc ,_agf );};}else if _gecg ==1{_bffb =append (_bffb ,_agf );if _agf =='E'{_gecg =2;}else {_dbfd ._ebc =append (_dbfd ._ebc ,_bffb ...);_bffb =[]byte {};if _bd .IsWhiteSpace (_agf ){_gecg =1;}else {_gecg =0;};};}else if _gecg ==2{_bffb =append (_bffb ,_agf );if _agf =='I'{_gecg =3;}else {_dbfd ._ebc =append (_dbfd ._ebc ,_bffb ...);_bffb =[]byte {};_gecg =0;};}else if _gecg ==3{_bffb =append (_bffb ,_agf );if _bd .IsWhiteSpace (_agf ){_bbf ,_fee :=_eeef ._eafb .Peek (20);if _fee !=nil &&_fee !=_e .EOF {return nil ,_fee ;};_abe :=NewContentStreamParser (string (_bbf ));_gggd :=true ;for _abgb :=0;_abgb < 3;_abgb ++{_ffga ,_aac ,_egb :=_abe .parseObject ();if _egb !=nil {if _egb ==_e .EOF {break ;};continue ;};if _aac &&!_eebb (_ffga .String ()){_gggd =false ;break ;};};if _gggd {if len (_dbfd ._ebc )> 100{_ea .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_dbfd ._ebc ),_dbfd ._ebc [:100]);}else {_ea .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_dbfd ._ebc ),_dbfd ._ebc );};return &_dbfd ,nil ;};};_dbfd ._ebc =append (_dbfd ._ebc ,_bffb ...);_bffb =[]byte {};_gecg =0;};};};};};};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_efd *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_fbb :=ContentStreamOperation {};_fbb .Operand ="\u0054\u0077";_fbb .Params =_faa ([]float64 {wordSpace });_efd ._fae =append (_efd ._fae ,&_fbb );return _efd ;};func _aaa (_gec *ContentStreamInlineImage )(*_bd .MultiEncoder ,error ){_dgf :=_bd .NewMultiEncoder ();var _gdg *_bd .PdfObjectDictionary ;var _edf []_bd .PdfObject ;if _fbga :=_gec .DecodeParms ;_fbga !=nil {_gdd ,_affd :=_fbga .(*_bd .PdfObjectDictionary );if _affd {_gdg =_gdd ;};_bbcd ,_cdf :=_fbga .(*_bd .PdfObjectArray );if _cdf {for _ ,_aceg :=range _bbcd .Elements (){if _bgee ,_dbd :=_aceg .(*_bd .PdfObjectDictionary );_dbd {_edf =append (_edf ,_bgee );}else {_edf =append (_edf ,nil );};};};};_ggd :=_gec .Filter ;if _ggd ==nil {return nil ,_cg .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_ffgb ,_acg :=_ggd .(*_bd .PdfObjectArray );if !_acg {return nil ,_cg .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _feaa ,_acece :=range _ffgb .Elements (){_aeaf ,_fffd :=_acece .(*_bd .PdfObjectName );if !_fffd {return nil ,_cg .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _bgba _bd .PdfObject ;if _gdg !=nil {_bgba =_gdg ;}else {if len (_edf )> 0{if _feaa >=len (_edf ){return nil ,_cg .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_bgba =_edf [_feaa ];};};var _cfeg *_bd .PdfObjectDictionary ;if _acea ,_bbb :=_bgba .(*_bd .PdfObjectDictionary );_bbb {_cfeg =_acea ;};if *_aeaf ==_bd .StreamEncodingFilterNameFlate ||*_aeaf =="\u0046\u006c"{_cabe ,_bgfd :=_gabf (_gec ,_cfeg );if _bgfd !=nil {return nil ,_bgfd ;};_dgf .AddEncoder (_cabe );}else if *_aeaf ==_bd .StreamEncodingFilterNameLZW {_bfaa ,_abg :=_ead (_gec ,_cfeg );if _abg !=nil {return nil ,_abg ;};_dgf .AddEncoder (_bfaa );}else if *_aeaf ==_bd .StreamEncodingFilterNameASCIIHex {_bbbc :=_bd .NewASCIIHexEncoder ();_dgf .AddEncoder (_bbbc );}else if *_aeaf ==_bd .StreamEncodingFilterNameASCII85 ||*_aeaf =="\u0041\u0038\u0035"{_cea :=_bd .NewASCII85Encoder ();_dgf .AddEncoder (_cea );}else {_ea .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_aeaf );return nil ,_cg .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _dgf ,nil ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_bd .PdfObject ;Operand string ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_geg *ContentCreator )Add_f ()*ContentCreator {_eebf :=ContentStreamOperation {};_eebf .Operand ="\u0066";_geg ._fae =append (_geg ._fae ,&_eebf );return _geg ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_bed *ContentCreator )SetStrokingColor (color _cgg .PdfColor )*ContentCreator {switch _gfe :=color .(type ){case *_cgg .PdfColorDeviceGray :_bed .Add_G (_gfe .Val ());case *_cgg .PdfColorDeviceRGB :_bed .Add_RG (_gfe .R (),_gfe .G (),_gfe .B ());case *_cgg .PdfColorDeviceCMYK :_bed .Add_K (_gfe .C (),_gfe .M (),_gfe .Y (),_gfe .K ());default:_ea .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_gfe );};return _bed ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bfga *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_ada :=ContentStreamOperation {};_ada .Operand ="\u006b";_ada .Params =_faa ([]float64 {c ,m ,y ,k });_bfga ._fae =append (_bfga ._fae ,&_ada );return _bfga ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fbe *ContentCreator )Add_ri (intent _bd .PdfObjectName )*ContentCreator {_faeg :=ContentStreamOperation {};_faeg .Operand ="\u0072\u0069";_faeg .Params =_adf ([]_bd .PdfObjectName {intent });_fbe ._fae =append (_fbe ._fae ,&_faeg );return _fbe ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efg *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_caf :=ContentStreamOperation {};_caf .Operand ="\u0053\u0043";_caf .Params =_faa (c );_efg ._fae =append (_efg ._fae ,&_caf );return _efg ;};

// WriteString outputs the object as it is to be written to file.
func (_cgec *ContentStreamInlineImage )WriteString ()string {var _acaa _cc .Buffer ;_gbde :="";if _cgec .BitsPerComponent !=nil {_gbde +="\u002f\u0042\u0050C\u0020"+_cgec .BitsPerComponent .WriteString ()+"\u000a";};if _cgec .ColorSpace !=nil {_gbde +="\u002f\u0043\u0053\u0020"+_cgec .ColorSpace .WriteString ()+"\u000a";};if _cgec .Decode !=nil {_gbde +="\u002f\u0044\u0020"+_cgec .Decode .WriteString ()+"\u000a";};if _cgec .DecodeParms !=nil {_gbde +="\u002f\u0044\u0050\u0020"+_cgec .DecodeParms .WriteString ()+"\u000a";};if _cgec .Filter !=nil {_gbde +="\u002f\u0046\u0020"+_cgec .Filter .WriteString ()+"\u000a";};if _cgec .Height !=nil {_gbde +="\u002f\u0048\u0020"+_cgec .Height .WriteString ()+"\u000a";};if _cgec .ImageMask !=nil {_gbde +="\u002f\u0049\u004d\u0020"+_cgec .ImageMask .WriteString ()+"\u000a";};if _cgec .Intent !=nil {_gbde +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_cgec .Intent .WriteString ()+"\u000a";};if _cgec .Interpolate !=nil {_gbde +="\u002f\u0049\u0020"+_cgec .Interpolate .WriteString ()+"\u000a";};if _cgec .Width !=nil {_gbde +="\u002f\u0057\u0020"+_cgec .Width .WriteString ()+"\u000a";};_acaa .WriteString (_gbde );_acaa .WriteString ("\u0049\u0044\u0020");_acaa .Write (_cgec ._ebc );_acaa .WriteString ("\u000a\u0045\u0049\u000a");return _acaa .String ();};

// AddOperand adds a specified operand.
func (_bg *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_bg ._fae =append (_bg ._fae ,&op );return _bg ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ecga *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cab :=ContentStreamOperation {};_cab .Operand ="\u0054\u0072";_cab .Params =_bfe ([]int64 {render });_ecga ._fae =append (_ecga ._fae ,&_cab );return _ecga ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_cbfb *ContentCreator )Add_TJ (vals ..._bd .PdfObject )*ContentCreator {_eed :=ContentStreamOperation {};_eed .Operand ="\u0054\u004a";_eed .Params =[]_bd .PdfObject {_bd .MakeArray (vals ...)};_cbfb ._fae =append (_cbfb ._fae ,&_eed );return _cbfb ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_aea *ContentCreator )Add_sh (name _bd .PdfObjectName )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0073\u0068";_efb .Params =_adf ([]_bd .PdfObjectName {name });_aea ._fae =append (_aea ._fae ,&_efb );return _aea ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_dgb *ContentCreator )Add_W_starred ()*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u0057\u002a";_dgb ._fae =append (_dgb ._fae ,&_agc );return _dgb ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fff *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_gbg :=ContentStreamOperation {};_gbg .Operand ="\u0054\u0073";_gbg .Params =_faa ([]float64 {rise });_fff ._fae =append (_fff ._fae ,&_gbg );return _fff ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fe *ContentCreator )Add_CS (name _bd .PdfObjectName )*ContentCreator {_ccbg :=ContentStreamOperation {};_ccbg .Operand ="\u0043\u0053";_ccbg .Params =_adf ([]_bd .PdfObjectName {name });_fe ._fae =append (_fe ._fae ,&_ccbg );return _fe ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _bd .PdfObject ;ColorSpace _bd .PdfObject ;Decode _bd .PdfObject ;DecodeParms _bd .PdfObject ;Filter _bd .PdfObject ;Height _bd .PdfObject ;ImageMask _bd .PdfObject ;Intent _bd .PdfObject ;Interpolate _bd .PdfObject ;Width _bd .PdfObject ;_ebc []byte ;_ebf *_ce .ImageBase ;};func _eebb (_gcg string )bool {_ ,_efge :=_dbdc [_gcg ];return _efge };

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dbeb *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u0054\u0044";_ffe .Params =_faa ([]float64 {tx ,ty });_dbeb ._fae =append (_dbeb ._fae ,&_ffe );return _dbeb ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_edc *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _edc .Add_cm (1,0,0,1,tx ,ty );};func (_ddcb *ContentStreamProcessor )handleCommand_SCN (_afd *ContentStreamOperation ,_gdce *_cgg .PdfPageResources )error {_dcbd :=_ddcb ._cadd .ColorspaceStroking ;if !_dcga (_dcbd ){if len (_afd .Params )!=_dcbd .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_afd .Params ),_dcbd );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_cbe ,_cdae :=_dcbd .ColorFromPdfObjects (_afd .Params );if _cdae !=nil {return _cdae ;};_ddcb ._cadd .ColorStroking =_cbe ;return nil ;};func (_eacg *ContentStreamParser )parseName ()(_bd .PdfObjectName ,error ){_ddf :="";_egc :=false ;for {_ddfg ,_fcad :=_eacg ._eafb .Peek (1);if _fcad ==_e .EOF {break ;};if _fcad !=nil {return _bd .PdfObjectName (_ddf ),_fcad ;};if !_egc {if _ddfg [0]=='/'{_egc =true ;_eacg ._eafb .ReadByte ();}else {_ea .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_ddfg ,_ddfg );return _bd .PdfObjectName (_ddf ),_cg .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_ddfg [0]);};}else {if _bd .IsWhiteSpace (_ddfg [0]){break ;}else if (_ddfg [0]=='/')||(_ddfg [0]=='[')||(_ddfg [0]=='(')||(_ddfg [0]==']')||(_ddfg [0]=='<')||(_ddfg [0]=='>'){break ;}else if _ddfg [0]=='#'{_aacd ,_bgad :=_eacg ._eafb .Peek (3);if _bgad !=nil {return _bd .PdfObjectName (_ddf ),_bgad ;};_eacg ._eafb .Discard (3);_bdgc ,_bgad :=_b .DecodeString (string (_aacd [1:3]));if _bgad !=nil {return _bd .PdfObjectName (_ddf ),_bgad ;};_ddf +=string (_bdgc );}else {_cbb ,_ :=_eacg ._eafb .ReadByte ();_ddf +=string (_cbb );};};};return _bd .PdfObjectName (_ddf ),nil ;};func _ead (_eaf *ContentStreamInlineImage ,_cfe *_bd .PdfObjectDictionary )(*_bd .LZWEncoder ,error ){_efe :=_bd .NewLZWEncoder ();if _cfe ==nil {if _eaf .DecodeParms !=nil {_geb ,_ffgge :=_bd .GetDict (_eaf .DecodeParms );if !_ffgge {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_eaf .DecodeParms );return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_cfe =_geb ;};};if _cfe ==nil {return _efe ,nil ;};_dff :=_cfe .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _dff !=nil {_gdc ,_ceg :=_dff .(*_bd .PdfObjectInteger );if !_ceg {_ea .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_dff );return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_gdc !=0&&*_gdc !=1{return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_efe .EarlyChange =int (*_gdc );}else {_efe .EarlyChange =1;};_dff =_cfe .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _dff !=nil {_dcc ,_dab :=_dff .(*_bd .PdfObjectInteger );if !_dab {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dff );return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_efe .Predictor =int (*_dcc );};_dff =_cfe .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _dff !=nil {_efa ,_bcbd :=_dff .(*_bd .PdfObjectInteger );if !_bcbd {_ea .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_cg .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_efe .BitsPerComponent =int (*_efa );};if _efe .Predictor > 1{_efe .Columns =1;_dff =_cfe .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _dff !=nil {_fde ,_eee :=_dff .(*_bd .PdfObjectInteger );if !_eee {return nil ,_cg .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_efe .Columns =int (*_fde );};_efe .Colors =1;_dff =_cfe .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dff !=nil {_gagd ,_abf :=_dff .(*_bd .PdfObjectInteger );if !_abf {return nil ,_cg .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_efe .Colors =int (*_gagd );};};_ea .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_cfe .String ());return _efe ,nil ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ga *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bcb :=ContentStreamOperation {};_bcb .Operand ="\u0063\u006d";_bcb .Params =_faa ([]float64 {a ,b ,c ,d ,e ,f });_ga ._fae =append (_ga ._fae ,&_bcb );return _ga ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dgc *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_bb :=ContentStreamOperation {};_bb .Operand ="\u006a";_bb .Params =_adf ([]_bd .PdfObjectName {_bd .PdfObjectName (lineJoinStyle )});_dgc ._fae =append (_dgc ._fae ,&_bb );return _dgc ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_degb HandlerConditionEnum )Operand ()bool {return _degb ==HandlerConditionEnumOperand };

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dad *ContentCreator )Add_B ()*ContentCreator {_cge :=ContentStreamOperation {};_cge .Operand ="\u0042";_dad ._fae =append (_dad ._fae ,&_cge );return _dad ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dbe *ContentCreator )Add_b_starred ()*ContentCreator {_gbd :=ContentStreamOperation {};_gbd .Operand ="\u0062\u002a";_dbe ._fae =append (_dbe ._fae ,&_gbd );return _dbe ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _cgg .PdfColorspace ;ColorspaceNonStroking _cgg .PdfColorspace ;ColorStroking _cgg .PdfColor ;ColorNonStroking _cgg .PdfColor ;CTM _ed .Matrix ;};func (_fccf *ContentStreamInlineImage )toImageBase (_fag *_cgg .PdfPageResources )(*_ce .ImageBase ,error ){if _fccf ._ebf !=nil {return _fccf ._ebf ,nil ;};_feg :=_ce .ImageBase {};if _fccf .Height ==nil {return nil ,_c .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_bbd ,_aae :=_fccf .Height .(*_bd .PdfObjectInteger );if !_aae {return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_feg .Height =int (*_bbd );if _fccf .Width ==nil {return nil ,_c .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_ffbe ,_aae :=_fccf .Width .(*_bd .PdfObjectInteger );if !_aae {return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_feg .Width =int (*_ffbe );_ebe ,_afbf :=_fccf .IsMask ();if _afbf !=nil {return nil ,_afbf ;};if _ebe {_feg .BitsPerComponent =1;_feg .ColorComponents =1;}else {if _fccf .BitsPerComponent ==nil {_ea .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_feg .BitsPerComponent =8;}else {_ecgg ,_bbdc :=_fccf .BitsPerComponent .(*_bd .PdfObjectInteger );if !_bbdc {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fccf .BitsPerComponent );return nil ,_c .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_feg .BitsPerComponent =int (*_ecgg );};if _fccf .ColorSpace !=nil {_dba ,_agdd :=_fccf .GetColorSpace (_fag );if _agdd !=nil {return nil ,_agdd ;};_feg .ColorComponents =_dba .GetNumComponents ();}else {_ea .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_feg .ColorComponents =1;};};if _dcca ,_cff :=_bd .GetArray (_fccf .Decode );_cff {_feg .Decode ,_afbf =_dcca .ToFloat64Array ();if _afbf !=nil {return nil ,_afbf ;};};_fccf ._ebf =&_feg ;return _fccf ._ebf ,nil ;};func _gabf (_fdc *ContentStreamInlineImage ,_dae *_bd .PdfObjectDictionary )(*_bd .FlateEncoder ,error ){_dgag :=_bd .NewFlateEncoder ();if _fdc ._ebf !=nil {_dgag .SetImage (_fdc ._ebf );};if _dae ==nil {_aefa :=_fdc .DecodeParms ;if _aefa !=nil {_cae ,_dacb :=_bd .GetDict (_aefa );if !_dacb {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_aefa );return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_dae =_cae ;};};if _dae ==nil {return _dgag ,nil ;};_ea .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dae .String ());_gff :=_dae .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _gff ==nil {_ea .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_dfdbf ,_fbdd :=_gff .(*_bd .PdfObjectInteger );if !_fbdd {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_gff );return nil ,_cg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_dgag .Predictor =int (*_dfdbf );};_gff =_dae .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _gff !=nil {_adeg ,_gag :=_gff .(*_bd .PdfObjectInteger );if !_gag {_ea .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_cg .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_dgag .BitsPerComponent =int (*_adeg );};if _dgag .Predictor > 1{_dgag .Columns =1;_gff =_dae .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _gff !=nil {_cfd ,_fea :=_gff .(*_bd .PdfObjectInteger );if !_fea {return nil ,_cg .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_dgag .Columns =int (*_cfd );};_dgag .Colors =1;_eca :=_dae .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _eca !=nil {_gba ,_adg :=_eca .(*_bd .PdfObjectInteger );if !_adg {return nil ,_cg .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_dgag .Colors =int (*_gba );};};return _dgag ,nil ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ab *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ab )==0{return _ab ;};if _ab .isWrapped (){return _ab ;};*_ab =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ab ...);_bf :=0;for _ ,_ac :=range *_ab {if _ac .Operand =="\u0071"{_bf ++;}else if _ac .Operand =="\u0051"{_bf --;};};for _bf > 0{*_ab =append (*_ab ,&ContentStreamOperation {Operand :"\u0051"});_bf --;};return _ab ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eae *ContentCreator )Add_TL (leading float64 )*ContentCreator {_gfa :=ContentStreamOperation {};_gfa .Operand ="\u0054\u004c";_gfa .Params =_faa ([]float64 {leading });_eae ._fae =append (_eae ._fae ,&_gfa );return _eae ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_cee :=&ContentCreator {};_cee ._fae =ContentStreamOperations {};return _cee ;};func _dcga (_fada _cgg .PdfColorspace )bool {_ ,_ffgd :=_fada .(*_cgg .PdfColorspaceSpecialPattern );return _ffgd ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gc *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_ffc :=ContentStreamOperation {};_ffc .Operand ="\u0054\u007a";_ffc .Params =_faa ([]float64 {scale });_gc ._fae =append (_gc ._fae ,&_ffc );return _gc ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bfg *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_aca :=ContentStreamOperation {};_aca .Operand ="\u006c";_aca .Params =_faa ([]float64 {x ,y });_bfg ._fae =append (_bfg ._fae ,&_aca );return _bfg ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_bfb :=ContentStreamProcessor {};_bfb ._caad =GraphicStateStack {};_cffd :=GraphicsState {};_bfb ._cadd =_cffd ;_bfb ._ccbf =[]handlerEntry {};_bfb ._addgb =0;_bfb ._cbg =ops ;return &_bfb ;};func (_ee *ContentStreamOperations )isWrapped ()bool {if len (*_ee )< 2{return false ;};_add :=0;for _ ,_aa :=range *_ee {if _aa .Operand =="\u0071"{_add ++;}else if _aa .Operand =="\u0051"{_add --;}else {if _add < 1{return false ;};};};return _add ==0;};func _faa (_dbae []float64 )[]_bd .PdfObject {var _addc []_bd .PdfObject ;for _ ,_gbba :=range _dbae {_addc =append (_addc ,_bd .MakeFloat (_gbba ));};return _addc ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_eafb *_cb .Reader };

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efc *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0052\u0047";_dga .Params =_faa ([]float64 {r ,g ,b });_efc ._fae =append (_efc ._fae ,&_dga );return _efc ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_de *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_dc :=ContentStreamOperation {};_dc .Operand ="\u004a";_dc .Params =_adf ([]_bd .PdfObjectName {_bd .PdfObjectName (lineCapStyle )});_de ._fae =append (_de ._fae ,&_dc );return _de ;};func (_dcf *ContentStreamProcessor )handleCommand_K (_fdd *ContentStreamOperation ,_gbc *_cgg .PdfPageResources )error {_fgcac :=_cgg .NewPdfColorspaceDeviceCMYK ();if len (_fdd .Params )!=_fgcac .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fdd .Params ),_fgcac );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cgc ,_gbgc :=_fgcac .ColorFromPdfObjects (_fdd .Params );if _gbgc !=nil {return _gbgc ;};_dcf ._cadd .ColorspaceStroking =_fgcac ;_dcf ._cadd .ColorStroking =_cgc ;return nil ;};func (_fccg *ContentStreamProcessor )handleCommand_sc (_cbca *ContentStreamOperation ,_fege *_cgg .PdfPageResources )error {_dbfef :=_fccg ._cadd .ColorspaceNonStroking ;if !_dcga (_dbfef ){if len (_cbca .Params )!=_dbfef .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cbca .Params ),_dbfef );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_acbf ,_ffee :=_dbfef .ColorFromPdfObjects (_cbca .Params );if _ffee !=nil {return _ffee ;};_fccg ._cadd .ColorNonStroking =_acbf ;return nil ;};func _adf (_fbf []_bd .PdfObjectName )[]_bd .PdfObject {var _ccbd []_bd .PdfObject ;for _ ,_cfb :=range _fbf {_ccbd =append (_ccbd ,_bd .MakeName (string (_cfb )));};return _ccbd ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _cgg .Image ,encoder _bd .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_bd .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_cggf :=ContentStreamInlineImage {};if img .ColorComponents ==1{_cggf .ColorSpace =_bd .MakeName ("\u0047");}else if img .ColorComponents ==3{_cggf .ColorSpace =_bd .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_cggf .ColorSpace =_bd .MakeName ("\u0043\u004d\u0059\u004b");}else {_ea .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_cggf .BitsPerComponent =_bd .MakeInteger (img .BitsPerComponent );_cggf .Width =_bd .MakeInteger (img .Width );_cggf .Height =_bd .MakeInteger (img .Height );_gfac ,_aab :=encoder .EncodeBytes (img .Data );if _aab !=nil {return nil ,_aab ;};_cggf ._ebc =_gfac ;_bag :=encoder .GetFilterName ();if _bag !=_bd .StreamEncodingFilterNameRaw {_cggf .Filter =_bd .MakeName (_bag );};return &_cggf ,nil ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;func (_fab *ContentStreamInlineImage )String ()string {_fbdc :=_cg .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_fab ._ebc ));if _fab .BitsPerComponent !=nil {_fbdc +="\u002d\u0020\u0042\u0050\u0043\u0020"+_fab .BitsPerComponent .WriteString ()+"\u000a";};if _fab .ColorSpace !=nil {_fbdc +="\u002d\u0020\u0043S\u0020"+_fab .ColorSpace .WriteString ()+"\u000a";};if _fab .Decode !=nil {_fbdc +="\u002d\u0020\u0044\u0020"+_fab .Decode .WriteString ()+"\u000a";};if _fab .DecodeParms !=nil {_fbdc +="\u002d\u0020\u0044P\u0020"+_fab .DecodeParms .WriteString ()+"\u000a";};if _fab .Filter !=nil {_fbdc +="\u002d\u0020\u0046\u0020"+_fab .Filter .WriteString ()+"\u000a";};if _fab .Height !=nil {_fbdc +="\u002d\u0020\u0048\u0020"+_fab .Height .WriteString ()+"\u000a";};if _fab .ImageMask !=nil {_fbdc +="\u002d\u0020\u0049M\u0020"+_fab .ImageMask .WriteString ()+"\u000a";};if _fab .Intent !=nil {_fbdc +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_fab .Intent .WriteString ()+"\u000a";};if _fab .Interpolate !=nil {_fbdc +="\u002d\u0020\u0049\u0020"+_fab .Interpolate .WriteString ()+"\u000a";};if _fab .Width !=nil {_fbdc +="\u002d\u0020\u0057\u0020"+_fab .Width .WriteString ()+"\u000a";};return _fbdc ;};func (_bef *ContentStreamParser )parseDict ()(*_bd .PdfObjectDictionary ,error ){_ea .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_agdda :=_bd .MakeDict ();_fba ,_ :=_bef ._eafb .ReadByte ();if _fba !='<'{return nil ,_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_fba ,_ =_bef ._eafb .ReadByte ();if _fba !='<'{return nil ,_c .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_bef .skipSpaces ();_gga ,_fcg :=_bef ._eafb .Peek (2);if _fcg !=nil {return nil ,_fcg ;};_ea .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_gga ),string (_gga ));if (_gga [0]=='>')&&(_gga [1]=='>'){_ea .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_bef ._eafb .ReadByte ();_bef ._eafb .ReadByte ();break ;};_ea .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_cbcb ,_fcg :=_bef .parseName ();_ea .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_cbcb );if _fcg !=nil {_ea .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_fcg );return nil ,_fcg ;};if len (_cbcb )> 4&&_cbcb [len (_cbcb )-4:]=="\u006e\u0075\u006c\u006c"{_bgaf :=_cbcb [0:len (_cbcb )-4];_ea .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_cbcb );_ea .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_bgaf );_bef .skipSpaces ();_cfg ,_ :=_bef ._eafb .Peek (1);if _cfg [0]=='/'{_agdda .Set (_bgaf ,_bd .MakeNull ());continue ;};};_bef .skipSpaces ();_fed ,_ ,_fcg :=_bef .parseObject ();if _fcg !=nil {return nil ,_fcg ;};_agdda .Set (_cbcb ,_fed );_ea .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_cbcb ,_fed .String ());};return _agdda ,nil ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fbc *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_dgg :=ContentStreamOperation {};_dgg .Operand ="\u0072\u0065";_dgg .Params =_faa ([]float64 {x ,y ,width ,height });_fbc ._fae =append (_fbc ._fae ,&_dgg );return _fbc ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_fad *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_bfa :=_eg .Cos (angle *_eg .Pi /180.0);_fgf :=_eg .Sin (angle *_eg .Pi /180.0);_gb :=-_eg .Sin (angle *_eg .Pi /180.0);_fgca :=_eg .Cos (angle *_eg .Pi /180.0);return _fad .Add_cm (_bfa ,_fgf ,_gb ,_fgca ,0,0);};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_ded HandlerConditionEnum )All ()bool {return _ded ==HandlerConditionEnumAllOperands };func (_edad *ContentStreamProcessor )getColorspace (_gfc string ,_cade *_cgg .PdfPageResources )(_cgg .PdfColorspace ,error ){switch _gfc {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _cgg .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _cgg .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _cgg .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _cgg .NewPdfColorspaceSpecialPattern (),nil ;};_bgc ,_egag :=_cade .GetColorspaceByName (_bd .PdfObjectName (_gfc ));if _egag {return _bgc ,nil ;};switch _gfc {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _cgg .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _cgg .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _cgg .NewPdfColorspaceLab (),nil ;};_ea .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_gfc );return nil ,_cg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_gfc );};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_dabd *ContentStreamProcessor )Process (resources *_cgg .PdfPageResources )error {_dabd ._cadd .ColorspaceStroking =_cgg .NewPdfColorspaceDeviceGray ();_dabd ._cadd .ColorspaceNonStroking =_cgg .NewPdfColorspaceDeviceGray ();_dabd ._cadd .ColorStroking =_cgg .NewPdfColorDeviceGray (0);_dabd ._cadd .ColorNonStroking =_cgg .NewPdfColorDeviceGray (0);_dabd ._cadd .CTM =_ed .IdentityMatrix ();for _ ,_cecc :=range _dabd ._cbg {var _dcgf error ;switch _cecc .Operand {case "\u0071":_dabd ._caad .Push (_dabd ._cadd );case "\u0051":if len (_dabd ._caad )==0{_ea .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_dabd ._cadd =_dabd ._caad .Pop ();case "\u0043\u0053":_dcgf =_dabd .handleCommand_CS (_cecc ,resources );case "\u0063\u0073":_dcgf =_dabd .handleCommand_cs (_cecc ,resources );case "\u0053\u0043":_dcgf =_dabd .handleCommand_SC (_cecc ,resources );case "\u0053\u0043\u004e":_dcgf =_dabd .handleCommand_SCN (_cecc ,resources );case "\u0073\u0063":_dcgf =_dabd .handleCommand_sc (_cecc ,resources );case "\u0073\u0063\u006e":_dcgf =_dabd .handleCommand_scn (_cecc ,resources );case "\u0047":_dcgf =_dabd .handleCommand_G (_cecc ,resources );case "\u0067":_dcgf =_dabd .handleCommand_g (_cecc ,resources );case "\u0052\u0047":_dcgf =_dabd .handleCommand_RG (_cecc ,resources );case "\u0072\u0067":_dcgf =_dabd .handleCommand_rg (_cecc ,resources );case "\u004b":_dcgf =_dabd .handleCommand_K (_cecc ,resources );case "\u006b":_dcgf =_dabd .handleCommand_k (_cecc ,resources );case "\u0063\u006d":_dcgf =_dabd .handleCommand_cm (_cecc ,resources );};if _dcgf !=nil {_ea .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_cecc .Operand ,_dcgf );_ea .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_cecc .Operand );return _dcgf ;};for _ ,_dceg :=range _dabd ._ccbf {var _degbd error ;if _dceg .Condition .All (){_degbd =_dceg .Handler (_cecc ,_dabd ._cadd ,resources );}else if _dceg .Condition .Operand ()&&_cecc .Operand ==_dceg .Operand {_degbd =_dceg .Handler (_cecc ,_dabd ._cadd ,resources );};if _degbd !=nil {_ea .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_degbd );return _degbd ;};};};return nil ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_fdad *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_fbde :=ContentStreamOperations {};for {_gaeg :=ContentStreamOperation {};for {_dgd ,_gdbc ,_efdd :=_fdad .parseObject ();if _efdd !=nil {if _efdd ==_e .EOF {return &_fbde ,nil ;};return &_fbde ,_efdd ;};if _gdbc {_gaeg .Operand ,_ =_bd .GetStringVal (_dgd );_fbde =append (_fbde ,&_gaeg );break ;}else {_gaeg .Params =append (_gaeg .Params ,_dgd );};};if _gaeg .Operand =="\u0042\u0049"{_bgff ,_fgb :=_fdad .ParseInlineImage ();if _fgb !=nil {return &_fbde ,_fgb ;};_gaeg .Params =append (_gaeg .Params ,_bgff );};};};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_caa *ContentCreator )Add_quotes (textstr _bd .PdfObjectString ,aw ,ac float64 )*ContentCreator {_affa :=ContentStreamOperation {};_affa .Operand ="\u0022";_affa .Params =_faa ([]float64 {aw ,ac });_affa .Params =append (_affa .Params ,_gegb ([]_bd .PdfObjectString {textstr })...);_caa ._fae =append (_caa ._fae ,&_affa );return _caa ;};func (_bda *ContentStreamParser )skipSpaces ()(int ,error ){_cbfc :=0;for {_aec ,_ged :=_bda ._eafb .Peek (1);if _ged !=nil {return 0,_ged ;};if _bd .IsWhiteSpace (_aec [0]){_bda ._eafb .ReadByte ();_cbfc ++;}else {break ;};};return _cbfc ,nil ;};

// GetColorSpace returns the colorspace of the inline image.
func (_ceab *ContentStreamInlineImage )GetColorSpace (resources *_cgg .PdfPageResources )(_cgg .PdfColorspace ,error ){if _ceab .ColorSpace ==nil {_ea .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _cgg .NewPdfColorspaceDeviceGray (),nil ;};if _dbfe ,_gabb :=_ceab .ColorSpace .(*_bd .PdfObjectArray );_gabb {return _cbbg (_dbfe );};_fcf ,_fca :=_ceab .ColorSpace .(*_bd .PdfObjectName );if !_fca {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_ceab .ColorSpace ,_ceab .ColorSpace );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_fcf =="\u0047"||*_fcf =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _cgg .NewPdfColorspaceDeviceGray (),nil ;}else if *_fcf =="\u0052\u0047\u0042"||*_fcf =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _cgg .NewPdfColorspaceDeviceRGB (),nil ;}else if *_fcf =="\u0043\u004d\u0059\u004b"||*_fcf =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _cgg .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_fcf =="\u0049"||*_fcf =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_c .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_ea .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_fcf );return nil ,_c .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_fgg ,_cbaa :=resources .GetColorspaceByName (*_fcf );if !_cbaa {_ea .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_fcf );return nil ,_c .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _fgg ,nil ;};};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bffe *ContentCreator )Add_h ()*ContentCreator {_eeb :=ContentStreamOperation {};_eeb .Operand ="\u0068";_bffe ._fae =append (_bffe ._fae ,&_eeb );return _bffe ;};func (_ffa *ContentStreamParser )skipComments ()error {if _ ,_aba :=_ffa .skipSpaces ();_aba !=nil {return _aba ;};_cgdf :=true ;for {_cgb ,_fcac :=_ffa ._eafb .Peek (1);if _fcac !=nil {_ea .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fcac .Error ());return _fcac ;};if _cgdf &&_cgb [0]!='%'{return nil ;};_cgdf =false ;if (_cgb [0]!='\r')&&(_cgb [0]!='\n'){_ffa ._eafb .ReadByte ();}else {break ;};};return _ffa .skipComments ();};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bdc *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_ba :=ContentStreamOperation {};_ba .Operand ="\u004d";_ba .Params =_faa ([]float64 {miterlimit });_bdc ._fae =append (_bdc ._fae ,&_ba );return _bdc ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_fa *ContentStreamParser )ExtractText ()(string ,error ){_ag ,_af :=_fa .Parse ();if _af !=nil {return "",_af ;};_fd :=false ;_egg ,_ge :=float64 (-1),float64 (-1);_ec :="";for _ ,_ecg :=range *_ag {if _ecg .Operand =="\u0042\u0054"{_fd =true ;}else if _ecg .Operand =="\u0045\u0054"{_fd =false ;};if _ecg .Operand =="\u0054\u0064"||_ecg .Operand =="\u0054\u0044"||_ecg .Operand =="\u0054\u002a"{_ec +="\u000a";};if _ecg .Operand =="\u0054\u006d"{if len (_ecg .Params )!=6{continue ;};_fgc ,_ade :=_ecg .Params [4].(*_bd .PdfObjectFloat );if !_ade {_ca ,_agb :=_ecg .Params [4].(*_bd .PdfObjectInteger );if !_agb {continue ;};_fgc =_bd .MakeFloat (float64 (*_ca ));};_gg ,_ade :=_ecg .Params [5].(*_bd .PdfObjectFloat );if !_ade {_agg ,_bc :=_ecg .Params [5].(*_bd .PdfObjectInteger );if !_bc {continue ;};_gg =_bd .MakeFloat (float64 (*_agg ));};if _ge ==-1{_ge =float64 (*_gg );}else if _ge > float64 (*_gg ){_ec +="\u000a";_egg =float64 (*_fgc );_ge =float64 (*_gg );continue ;};if _egg ==-1{_egg =float64 (*_fgc );}else if _egg < float64 (*_fgc ){_ec +="\u0009";_egg =float64 (*_fgc );};};if _fd &&_ecg .Operand =="\u0054\u004a"{if len (_ecg .Params )< 1{continue ;};_bcf ,_dg :=_ecg .Params [0].(*_bd .PdfObjectArray );if !_dg {return "",_cg .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ecg .Params [0]);};for _ ,_cda :=range _bcf .Elements (){switch _dd :=_cda .(type ){case *_bd .PdfObjectString :_ec +=_dd .Str ();case *_bd .PdfObjectFloat :if *_dd < -100{_ec +="\u0020";};case *_bd .PdfObjectInteger :if *_dd < -100{_ec +="\u0020";};};};}else if _fd &&_ecg .Operand =="\u0054\u006a"{if len (_ecg .Params )< 1{continue ;};_agd ,_ggg :=_ecg .Params [0].(*_bd .PdfObjectString );if !_ggg {return "",_cg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ecg .Params [0]);};_ec +=_agd .Str ();};};return _ec ,nil ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_bff *ContentCreator )Wrap (){_bff ._fae .WrapIfNeeded ()};

// Push pushes `gs` on the `gsStack`.
func (_dbea *GraphicStateStack )Push (gs GraphicsState ){*_dbea =append (*_dbea ,gs )};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_fae ContentStreamOperations };

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bcbe *ContentCreator )Add_f_starred ()*ContentCreator {_bea :=ContentStreamOperation {};_bea .Operand ="\u0066\u002a";_bcbe ._fae =append (_bcbe ._fae ,&_bea );return _bcbe ;};func _cbbg (_adda _bd .PdfObject )(_cgg .PdfColorspace ,error ){_dade ,_ffbc :=_adda .(*_bd .PdfObjectArray );if !_ffbc {_ea .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_adda );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _dade .Len ()!=4{_ea .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_dade .Len ());return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_ecec ,_ffbc :=_dade .Get (0).(*_bd .PdfObjectName );if !_ffbc {_ea .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_dade );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_ecec !="\u0049"&&*_ecec !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_ea .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_ecec );return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_ecec ,_ffbc =_dade .Get (1).(*_bd .PdfObjectName );if !_ffbc {_ea .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_dade );return nil ,_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_ecec !="\u0047"&&*_ecec !="\u0052\u0047\u0042"&&*_ecec !="\u0043\u004d\u0059\u004b"&&*_ecec !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_ecec !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_ecec !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_ea .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_ecec );return nil ,_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_abdd :="";switch *_ecec {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_abdd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_abdd ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_abdd ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_gaf :=_bd .MakeArray (_bd .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_bd .MakeName (_abdd ),_dade .Get (2),_dade .Get (3));return _cgg .NewPdfColorspaceFromPdfObject (_gaf );};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_gcef *ContentStreamOperation ,_edb GraphicsState ,_fegb *_cgg .PdfPageResources )error ;func (_cbdb *ContentStreamParser )parseObject ()(_bec _bd .PdfObject ,_fgcd bool ,_egcf error ){_cbdb .skipSpaces ();for {_adga ,_bfcd :=_cbdb ._eafb .Peek (2);if _bfcd !=nil {return nil ,false ,_bfcd ;};_ea .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_adga ));if _adga [0]=='%'{_cbdb .skipComments ();continue ;}else if _adga [0]=='/'{_dfa ,_gffc :=_cbdb .parseName ();_ea .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_dfa );return &_dfa ,false ,_gffc ;}else if _adga [0]=='('{_ea .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_aacf ,_abdc :=_cbdb .parseString ();return _aacf ,false ,_abdc ;}else if _adga [0]=='<'&&_adga [1]!='<'{_ea .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_gdeb ,_adgf :=_cbdb .parseHexString ();return _gdeb ,false ,_adgf ;}else if _adga [0]=='['{_ea .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_egaf ,_eff :=_cbdb .parseArray ();return _egaf ,false ,_eff ;}else if _bd .IsFloatDigit (_adga [0])||(_adga [0]=='-'&&_bd .IsFloatDigit (_adga [1])){_ea .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_bdf ,_bdb :=_cbdb .parseNumber ();return _bdf ,false ,_bdb ;}else if _adga [0]=='<'&&_adga [1]=='<'{_gdf ,_gbdc :=_cbdb .parseDict ();return _gdf ,false ,_gbdc ;}else {_ea .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_adga ,_ =_cbdb ._eafb .Peek (5);_cde :=string (_adga );_ea .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_cde );if (len (_cde )> 3)&&(_cde [:4]=="\u006e\u0075\u006c\u006c"){_ecb ,_bfaf :=_cbdb .parseNull ();return &_ecb ,false ,_bfaf ;}else if (len (_cde )> 4)&&(_cde [:5]=="\u0066\u0061\u006cs\u0065"){_acga ,_gggg :=_cbdb .parseBool ();return &_acga ,false ,_gggg ;}else if (len (_cde )> 3)&&(_cde [:4]=="\u0074\u0072\u0075\u0065"){_cfdb ,_degf :=_cbdb .parseBool ();return &_cfdb ,false ,_degf ;};_dgfe ,_gceb :=_cbdb .parseOperand ();if _gceb !=nil {return _dgfe ,false ,_gceb ;};if len (_dgfe .String ())< 1{return _dgfe ,false ,ErrInvalidOperand ;};return _dgfe ,true ,nil ;};};};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bgf *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_fda :=ContentStreamOperation {};_fda .Operand ="\u006d";_fda .Params =_faa ([]float64 {x ,y });_bgf ._fae =append (_bgf ._fae ,&_fda );return _bgf ;};func (_bgaa *ContentStreamParser )parseOperand ()(*_bd .PdfObjectString ,error ){var _bagc []byte ;for {_bedb ,_fccfg :=_bgaa ._eafb .Peek (1);if _fccfg !=nil {return _bd .MakeString (string (_bagc )),_fccfg ;};if _bd .IsDelimiter (_bedb [0]){break ;};if _bd .IsWhiteSpace (_bedb [0]){break ;};_ggb ,_ :=_bgaa ._eafb .ReadByte ();_bagc =append (_bagc ,_ggb );};return _bd .MakeString (string (_bagc )),nil ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_fcaf :=ContentStreamParser {};_cef :=_cc .NewBufferString (contentStr +"\u000a");_fcaf ._eafb =_cb .NewReader (_cef );return &_fcaf ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_caad GraphicStateStack ;_cbg []*ContentStreamOperation ;_cadd GraphicsState ;_ccbf []handlerEntry ;_addgb int ;};func (_feaf *ContentStreamProcessor )handleCommand_cs (_aeafb *ContentStreamOperation ,_ffff *_cgg .PdfPageResources )error {if len (_aeafb .Params )< 1{_ea .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _c .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_aeafb .Params )> 1{_ea .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _c .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_bdbf ,_cffdd :=_aeafb .Params [0].(*_bd .PdfObjectName );if !_cffdd {_ea .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_gda ,_cfaf :=_feaf .getColorspace (string (*_bdbf ),_ffff );if _cfaf !=nil {return _cfaf ;};_feaf ._cadd .ColorspaceNonStroking =_gda ;_afgd ,_cfaf :=_feaf .getInitialColor (_gda );if _cfaf !=nil {return _cfaf ;};_feaf ._cadd .ColorNonStroking =_afgd ;return nil ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cca *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_cfa :=ContentStreamOperation {};_cfa .Operand ="\u0053\u0043\u004e";_cfa .Params =_faa (c );_cca ._fae =append (_cca ._fae ,&_cfa );return _cca ;};func (_edcf *ContentStreamProcessor )handleCommand_cm (_efdab *ContentStreamOperation ,_bgffd *_cgg .PdfPageResources )error {if len (_efdab .Params )!=6{_ea .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_efdab .Params ));return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_ebb ,_afc :=_bd .GetNumbersAsFloat (_efdab .Params );if _afc !=nil {return _afc ;};_gabff :=_ed .NewMatrix (_ebb [0],_ebb [1],_ebb [2],_ebb [3],_ebb [4],_ebb [5]);_edcf ._cadd .CTM .Concat (_gabff );return nil ;};func (_ddfb *ContentStreamParser )parseHexString ()(*_bd .PdfObjectString ,error ){_ddfb ._eafb .ReadByte ();_bcfa :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _cbab []byte ;for {_ddfb .skipSpaces ();_bcc ,_eaa :=_ddfb ._eafb .Peek (1);if _eaa !=nil {return _bd .MakeString (""),_eaa ;};if _bcc [0]=='>'{_ddfb ._eafb .ReadByte ();break ;};_dgcg ,_ :=_ddfb ._eafb .ReadByte ();if _cc .IndexByte (_bcfa ,_dgcg )>=0{_cbab =append (_cbab ,_dgcg );};};if len (_cbab )%2==1{_cbab =append (_cbab ,'0');};_dfdg ,_ :=_b .DecodeString (string (_cbab ));return _bd .MakeHexString (string (_dfdg )),nil ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_aaag *GraphicStateStack )Pop ()GraphicsState {_ggag :=(*_aaag )[len (*_aaag )-1];*_aaag =(*_aaag )[:len (*_aaag )-1];return _ggag ;};func (_bba *ContentStreamProcessor )handleCommand_G (_acf *ContentStreamOperation ,_bbce *_cgg .PdfPageResources )error {_gcb :=_cgg .NewPdfColorspaceDeviceGray ();if len (_acf .Params )!=_gcb .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_acf .Params ),_gcb );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_acbfg ,_aga :=_gcb .ColorFromPdfObjects (_acf .Params );if _aga !=nil {return _aga ;};_bba ._cadd .ColorspaceStroking =_gcb ;_bba ._cadd .ColorStroking =_acbfg ;return nil ;};var (ErrInvalidOperand =_c .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_acc *ContentCreator )Add_cs (name _bd .PdfObjectName )*ContentCreator {_ffgg :=ContentStreamOperation {};_ffgg .Operand ="\u0063\u0073";_ffgg .Params =_adf ([]_bd .PdfObjectName {name });_acc ._fae =append (_acc ._fae ,&_ffgg );return _acc ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bdcc *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_dfg :=ContentStreamOperation {};_dfg .Operand ="\u0054\u0064";_dfg .Params =_faa ([]float64 {tx ,ty });_bdcc ._fae =append (_bdcc ._fae ,&_dfg );return _bdcc ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ffg *ContentCreator )Add_B_starred ()*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u0042\u002a";_ffg ._fae =append (_ffg ._fae ,&_bce );return _ffg ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_bcbg *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_acaf :=ContentStreamOperation {};_acaf .Operand ="\u0063";_acaf .Params =_faa ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_bcbg ._fae =append (_bcbg ._fae ,&_acaf );return _bcbg ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_cac *ContentCreator )Add_W ()*ContentCreator {_gf :=ContentStreamOperation {};_gf .Operand ="\u0057";_cac ._fae =append (_cac ._fae ,&_gf );return _cac ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};func (_gde *ContentStreamParser )parseNull ()(_bd .PdfObjectNull ,error ){_ ,_gfae :=_gde ._eafb .Discard (4);return _bd .PdfObjectNull {},_gfae ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fc *ContentCreator )Add_Q ()*ContentCreator {_gd :=ContentStreamOperation {};_gd .Operand ="\u0051";_fc ._fae =append (_fc ._fae ,&_gd );return _fc ;};func _acca (_cfdg *ContentStreamInlineImage )(*_bd .DCTEncoder ,error ){_fbg :=_bd .NewDCTEncoder ();_bgbf :=_cc .NewReader (_cfdg ._ebc );_fdae ,_bbc :=_ad .DecodeConfig (_bgbf );if _bbc !=nil {_ea .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_bbc );return nil ,_bbc ;};switch _fdae .ColorModel {case _be .RGBAModel :_fbg .BitsPerComponent =8;_fbg .ColorComponents =3;case _be .RGBA64Model :_fbg .BitsPerComponent =16;_fbg .ColorComponents =3;case _be .GrayModel :_fbg .BitsPerComponent =8;_fbg .ColorComponents =1;case _be .Gray16Model :_fbg .BitsPerComponent =16;_fbg .ColorComponents =1;case _be .CMYKModel :_fbg .BitsPerComponent =8;_fbg .ColorComponents =4;case _be .YCbCrModel :_fbg .BitsPerComponent =8;_fbg .ColorComponents =3;default:return nil ,_c .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_fbg .Width =_fdae .Width ;_fbg .Height =_fdae .Height ;_ea .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_fbg );return _fbg ,nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbe *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_dea :=ContentStreamOperation {};_dea .Operand ="\u0072\u0067";_dea .Params =_faa ([]float64 {r ,g ,b });_bbe ._fae =append (_bbe ._fae ,&_dea );return _bbe ;};func (_bfag *ContentStreamProcessor )handleCommand_CS (_cffb *ContentStreamOperation ,_fgaf *_cgg .PdfPageResources )error {if len (_cffb .Params )< 1{_ea .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _c .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_cffb .Params )> 1{_ea .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _c .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_dfb ,_gcac :=_cffb .Params [0].(*_bd .PdfObjectName );if !_gcac {_ea .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_gfaa ,_fbeb :=_bfag .getColorspace (string (*_dfb ),_fgaf );if _fbeb !=nil {return _fbeb ;};_bfag ._cadd .ColorspaceStroking =_gfaa ;_ffbd ,_fbeb :=_bfag .getInitialColor (_gfaa );if _fbeb !=nil {return _fbeb ;};_bfag ._cadd .ColorStroking =_ffbd ;return nil ;};

// Operations returns the list of operations.
func (_df *ContentCreator )Operations ()*ContentStreamOperations {return &_df ._fae };

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ccb *ContentCreator )Add_s ()*ContentCreator {_dge :=ContentStreamOperation {};_dge .Operand ="\u0073";_ccb ._fae =append (_ccb ._fae ,&_dge );return _ccb ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_dfdb *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_dcb :=ContentStreamOperation {};_dcb .Operand ="\u0054\u006d";_dcb .Params =_faa ([]float64 {a ,b ,c ,d ,e ,f });_dfdb ._fae =append (_dfdb ._fae ,&_dcb );return _dfdb ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fb *ContentStreamOperations )Bytes ()[]byte {var _ae _cc .Buffer ;for _ ,_cd :=range *_fb {if _cd ==nil {continue ;};if _cd .Operand =="\u0042\u0049"{_ae .WriteString (_cd .Operand +"\u000a");_ae .WriteString (_cd .Params [0].WriteString ());}else {for _ ,_da :=range _cd .Params {_ae .WriteString (_da .WriteString ());_ae .WriteString ("\u0020");};_ae .WriteString (_cd .Operand +"\u000a");};};return _ae .Bytes ();};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dbf *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_edg :=ContentStreamOperation {};_edg .Operand ="\u0054\u0063";_edg .Params =_faa ([]float64 {charSpace });_dbf ._fae =append (_dbf ._fae ,&_edg );return _dbf ;};

// String returns `ops.Bytes()` as a string.
func (_cbf *ContentStreamOperations )String ()string {return string (_cbf .Bytes ())};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cgf *ContentCreator )Add_b ()*ContentCreator {_addg :=ContentStreamOperation {};_addg .Operand ="\u0062";_cgf ._fae =append (_cgf ._fae ,&_addg );return _cgf ;};func (_bdaf *ContentStreamProcessor )handleCommand_rg (_dgfb *ContentStreamOperation ,_bbfa *_cgg .PdfPageResources )error {_adge :=_cgg .NewPdfColorspaceDeviceRGB ();if len (_dgfb .Params )!=_adge .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dgfb .Params ),_adge );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_agge ,_afda :=_adge .ColorFromPdfObjects (_dgfb .Params );if _afda !=nil {return _afda ;};_bdaf ._cadd .ColorspaceNonStroking =_adge ;_bdaf ._cadd .ColorNonStroking =_agge ;return nil ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_ccg *ContentCreator )Add_BT ()*ContentCreator {_aef :=ContentStreamOperation {};_aef .Operand ="\u0042\u0054";_ccg ._fae =append (_ccg ._fae ,&_aef );return _ccg ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Scale applies x-y scaling to the transformation matrix.
func (_ace *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _ace .Add_cm (sx ,0,0,sy ,0,0);};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_dgba *ContentCreator )Add_BMC (tag _bd .PdfObjectName )*ContentCreator {_ebg :=ContentStreamOperation {};_ebg .Operand ="\u0042\u004d\u0043";_ebg .Params =_adf ([]_bd .PdfObjectName {tag });_dgba ._fae =append (_dgba ._fae ,&_ebg );return _dgba ;};func _bgb (_bdg *ContentStreamInlineImage )(_bd .StreamEncoder ,error ){if _bdg .Filter ==nil {return _bd .NewRawEncoder (),nil ;};_eda ,_gdba :=_bdg .Filter .(*_bd .PdfObjectName );if !_gdba {_adad ,_bgd :=_bdg .Filter .(*_bd .PdfObjectArray );if !_bgd {return nil ,_cg .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _adad .Len ()==0{return _bd .NewRawEncoder (),nil ;};if _adad .Len ()!=1{_acbg ,_gca :=_aaa (_bdg );if _gca !=nil {_ea .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_gca );return nil ,_gca ;};_ea .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_acbg );return _acbg ,nil ;};_eeag :=_adad .Get (0);_eda ,_bgd =_eeag .(*_bd .PdfObjectName );if !_bgd {return nil ,_cg .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_eda {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _bd .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _bd .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _acca (_bdg );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _gabf (_bdg ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _ead (_bdg ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _bd .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _bd .NewRunLengthEncoder (),nil ;default:_ea .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_eda );return nil ,_c .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fcc *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_fgcf :=ContentStreamOperation {};_fgcf .Operand ="\u0073\u0063\u006e";_fgcf .Params =_faa (c );_fcc ._fae =append (_fcc ._fae ,&_fgcf );return _fcc ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_edd *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_gbgb :=handlerEntry {};_gbgb .Condition =condition ;_gbgb .Operand =operand ;_gbgb .Handler =handler ;_edd ._ccbf =append (_edd ._ccbf ,_gbgb );};func _bfe (_adac []int64 )[]_bd .PdfObject {var _gbeg []_bd .PdfObject ;for _ ,_aggd :=range _adac {_gbeg =append (_gbeg ,_bd .MakeInteger (_aggd ));};return _gbeg ;};func (_aabff *ContentStreamProcessor )handleCommand_k (_efcg *ContentStreamOperation ,_addga *_cgg .PdfPageResources )error {_effe :=_cgg .NewPdfColorspaceDeviceCMYK ();if len (_efcg .Params )!=_effe .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_efcg .Params ),_effe );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_fbcf ,_edbd :=_effe .ColorFromPdfObjects (_efcg .Params );if _edbd !=nil {return _edbd ;};_aabff ._cadd .ColorspaceNonStroking =_effe ;_aabff ._cadd .ColorNonStroking =_fbcf ;return nil ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_cfc *ContentStreamInlineImage )IsMask ()(bool ,error ){if _cfc .ImageMask !=nil {_afe ,_ceag :=_cfc .ImageMask .(*_bd .PdfObjectBool );if !_ceag {_ea .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_c .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_afe ),nil ;};return false ,nil ;};func (_beaa *ContentStreamParser )parseArray ()(*_bd .PdfObjectArray ,error ){_cbd :=_bd .MakeArray ();_beaa ._eafb .ReadByte ();for {_beaa .skipSpaces ();_ggfd ,_daadb :=_beaa ._eafb .Peek (1);if _daadb !=nil {return _cbd ,_daadb ;};if _ggfd [0]==']'{_beaa ._eafb .ReadByte ();break ;};_fga ,_ ,_daadb :=_beaa .parseObject ();if _daadb !=nil {return _cbd ,_daadb ;};_cbd .Append (_fga );};return _cbd ,nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_gae *ContentCreator )Add_ET ()*ContentCreator {_bfc :=ContentStreamOperation {};_bfc .Operand ="\u0045\u0054";_gae ._fae =append (_gae ._fae ,&_bfc );return _gae ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_gea *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _gea .CTM .Transform (x ,y );};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gab *ContentCreator )SetNonStrokingColor (color _cgg .PdfColor )*ContentCreator {switch _gdb :=color .(type ){case *_cgg .PdfColorDeviceGray :_gab .Add_g (_gdb .Val ());case *_cgg .PdfColorDeviceRGB :_gab .Add_rg (_gdb .R (),_gdb .G (),_gdb .B ());case *_cgg .PdfColorDeviceCMYK :_gab .Add_k (_gdb .C (),_gdb .M (),_gdb .Y (),_gdb .K ());default:_ea .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_gdb );};return _gab ;};func (_dffg *ContentStreamParser )parseBool ()(_bd .PdfObjectBool ,error ){_egcd ,_cbc :=_dffg ._eafb .Peek (4);if _cbc !=nil {return _bd .PdfObjectBool (false ),_cbc ;};if (len (_egcd )>=4)&&(string (_egcd [:4])=="\u0074\u0072\u0075\u0065"){_dffg ._eafb .Discard (4);return _bd .PdfObjectBool (true ),nil ;};_egcd ,_cbc =_dffg ._eafb .Peek (5);if _cbc !=nil {return _bd .PdfObjectBool (false ),_cbc ;};if (len (_egcd )>=5)&&(string (_egcd [:5])=="\u0066\u0061\u006cs\u0065"){_dffg ._eafb .Discard (5);return _bd .PdfObjectBool (false ),nil ;};return _bd .PdfObjectBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_aaeg *ContentStreamProcessor )getInitialColor (_bfcg _cgg .PdfColorspace )(_cgg .PdfColor ,error ){switch _dbca :=_bfcg .(type ){case *_cgg .PdfColorspaceDeviceGray :return _cgg .NewPdfColorDeviceGray (0.0),nil ;case *_cgg .PdfColorspaceDeviceRGB :return _cgg .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_cgg .PdfColorspaceDeviceCMYK :return _cgg .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_cgg .PdfColorspaceCalGray :return _cgg .NewPdfColorCalGray (0.0),nil ;case *_cgg .PdfColorspaceCalRGB :return _cgg .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_cgg .PdfColorspaceLab :_fdadd :=0.0;_ecc :=0.0;_afg :=0.0;if _dbca .Range [0]> 0{_fdadd =_dbca .Range [0];};if _dbca .Range [2]> 0{_ecc =_dbca .Range [2];};return _cgg .NewPdfColorLab (_fdadd ,_ecc ,_afg ),nil ;case *_cgg .PdfColorspaceICCBased :if _dbca .Alternate ==nil {_ea .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_dbca .N );if _dbca .N ==1{_ea .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _aaeg .getInitialColor (_cgg .NewPdfColorspaceDeviceGray ());}else if _dbca .N ==3{_ea .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _aaeg .getInitialColor (_cgg .NewPdfColorspaceDeviceRGB ());}else if _dbca .N ==4{_ea .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _aaeg .getInitialColor (_cgg .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_c .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _aaeg .getInitialColor (_dbca .Alternate );case *_cgg .PdfColorspaceSpecialIndexed :if _dbca .Base ==nil {return nil ,_c .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _aaeg .getInitialColor (_dbca .Base );case *_cgg .PdfColorspaceSpecialSeparation :if _dbca .AlternateSpace ==nil {return nil ,_c .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _aaeg .getInitialColor (_dbca .AlternateSpace );case *_cgg .PdfColorspaceDeviceN :if _dbca .AlternateSpace ==nil {return nil ,_c .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _aaeg .getInitialColor (_dbca .AlternateSpace );case *_cgg .PdfColorspaceSpecialPattern :return nil ,nil ;};_ea .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bfcg );return nil ,_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bedf *ContentCreator )Add_Tf (fontName _bd .PdfObjectName ,fontSize float64 )*ContentCreator {_afbb :=ContentStreamOperation {};_afbb .Operand ="\u0054\u0066";_afbb .Params =_adf ([]_bd .PdfObjectName {fontName });_afbb .Params =append (_afbb .Params ,_faa ([]float64 {fontSize })...);_bedf ._fae =append (_bedf ._fae ,&_afbb );return _bedf ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eab *ContentCreator )Add_i (flatness float64 )*ContentCreator {_dce :=ContentStreamOperation {};_dce .Operand ="\u0069";_dce .Params =_faa ([]float64 {flatness });_eab ._fae =append (_eab ._fae ,&_dce );return _eab ;};func (_dffe *ContentStreamProcessor )handleCommand_scn (_cag *ContentStreamOperation ,_bgeb *_cgg .PdfPageResources )error {_fef :=_dffe ._cadd .ColorspaceNonStroking ;if !_dcga (_fef ){if len (_cag .Params )!=_fef .GetNumComponents (){_ea .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_ea .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cag .Params ),_fef );return _c .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gdgd ,_efcf :=_fef .ColorFromPdfObjects (_cag .Params );if _efcf !=nil {_ea .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_cag .Params ,_fef );return _efcf ;};_dffe ._cadd .ColorNonStroking =_gdgd ;return nil ;};func (_cbbe *ContentStreamParser )parseString ()(*_bd .PdfObjectString ,error ){_cbbe ._eafb .ReadByte ();var _degg []byte ;_ced :=1;for {_fbgc ,_dcbb :=_cbbe ._eafb .Peek (1);if _dcbb !=nil {return _bd .MakeString (string (_degg )),_dcbb ;};if _fbgc [0]=='\\'{_cbbe ._eafb .ReadByte ();_ebeb ,_ccceg :=_cbbe ._eafb .ReadByte ();if _ccceg !=nil {return _bd .MakeString (string (_degg )),_ccceg ;};if _bd .IsOctalDigit (_ebeb ){_dcd ,_cec :=_cbbe ._eafb .Peek (2);if _cec !=nil {return _bd .MakeString (string (_degg )),_cec ;};var _acd []byte ;_acd =append (_acd ,_ebeb );for _ ,_aabc :=range _dcd {if _bd .IsOctalDigit (_aabc ){_acd =append (_acd ,_aabc );}else {break ;};};_cbbe ._eafb .Discard (len (_acd )-1);_ea .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_acd );_baa ,_cec :=_a .ParseUint (string (_acd ),8,32);if _cec !=nil {return _bd .MakeString (string (_degg )),_cec ;};_degg =append (_degg ,byte (_baa ));continue ;};switch _ebeb {case 'n':_degg =append (_degg ,'\n');case 'r':_degg =append (_degg ,'\r');case 't':_degg =append (_degg ,'\t');case 'b':_degg =append (_degg ,'\b');case 'f':_degg =append (_degg ,'\f');case '(':_degg =append (_degg ,'(');case ')':_degg =append (_degg ,')');case '\\':_degg =append (_degg ,'\\');};continue ;}else if _fbgc [0]=='('{_ced ++;}else if _fbgc [0]==')'{_ced --;if _ced ==0{_cbbe ._eafb .ReadByte ();break ;};};_daad ,_ :=_cbbe ._eafb .ReadByte ();_degg =append (_degg ,_daad );};return _bd .MakeString (string (_degg )),nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_ffb *ContentCreator )Add_Tj (textstr _bd .PdfObjectString )*ContentCreator {_bgec :=ContentStreamOperation {};_bgec .Operand ="\u0054\u006a";_bgec .Params =_gegb ([]_bd .PdfObjectString {textstr });_ffb ._fae =append (_ffb ._fae ,&_bgec );return _ffb ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_aded *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u0064";_ecd .Params =[]_bd .PdfObject {};_ecd .Params =append (_ecd .Params ,_bd .MakeArrayFromIntegers64 (dashArray ));_ecd .Params =append (_ecd .Params ,_bd .MakeInteger (dashPhase ));_aded ._fae =append (_aded ._fae ,&_ecd );return _aded ;};func (_caed *ContentStreamParser )parseNumber ()(_bd .PdfObject ,error ){return _bd .ParseNumber (_caed ._eafb );};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ege *ContentCreator )Add_S ()*ContentCreator {_acb :=ContentStreamOperation {};_acb .Operand ="\u0053";_ege ._fae =append (_ege ._fae ,&_acb );return _ege ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gbf *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_cad :=ContentStreamOperation {};_cad .Operand ="\u0076";_cad .Params =_faa ([]float64 {x2 ,y2 ,x3 ,y3 });_gbf ._fae =append (_gbf ._fae ,&_cad );return _gbf ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_deg *ContentCreator )Add_Tstar ()*ContentCreator {_caca :=ContentStreamOperation {};_caca .Operand ="\u0054\u002a";_deg ._fae =append (_deg ._fae ,&_caca );return _deg ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_abd *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_aff :=ContentStreamOperation {};_aff .Operand ="\u0077";_aff .Params =_faa ([]float64 {lineWidth });_abd ._fae =append (_abd ._fae ,&_aff );return _abd ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_faf *ContentCreator )Add_SCN_pattern (name _bd .PdfObjectName ,c ...float64 )*ContentCreator {_ccc :=ContentStreamOperation {};_ccc .Operand ="\u0053\u0043\u004e";_ccc .Params =_faa (c );_ccc .Params =append (_ccc .Params ,_bd .MakeName (string (name )));_faf ._fae =append (_faf ._fae ,&_ccc );return _faf ;};