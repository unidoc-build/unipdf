//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_ec "bufio";_fg "bytes";_b "encoding/hex";_e "errors";_f "fmt";_gd "github.com/unidoc/unipdf/v3/common";_ab "github.com/unidoc/unipdf/v3/core";_geg "github.com/unidoc/unipdf/v3/internal/imageutil";_gc "github.com/unidoc/unipdf/v3/internal/transform";_geb "github.com/unidoc/unipdf/v3/model";_ge "image/color";_gf "image/jpeg";_g "io";_cc "math";_c "strconv";);

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_deb *ContentCreator )Add_n ()*ContentCreator {_fge :=ContentStreamOperation {};_fge .Operand ="\u006e";_deb ._ba =append (_deb ._ba ,&_fge );return _deb ;};

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_acf *ContentCreator )Add_quotes (textstr _ab .PdfObjectString ,aw ,ac float64 )*ContentCreator {_beg :=ContentStreamOperation {};_beg .Operand ="\u0022";_beg .Params =_gbef ([]float64 {aw ,ac });_beg .Params =append (_beg .Params ,_beec ([]_ab .PdfObjectString {textstr })...);_acf ._ba =append (_acf ._ba ,&_beg );return _acf ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_dgga *ContentStreamProcessor )Process (resources *_geb .PdfPageResources )error {_dgga ._afc .ColorspaceStroking =_geb .NewPdfColorspaceDeviceGray ();_dgga ._afc .ColorspaceNonStroking =_geb .NewPdfColorspaceDeviceGray ();_dgga ._afc .ColorStroking =_geb .NewPdfColorDeviceGray (0);_dgga ._afc .ColorNonStroking =_geb .NewPdfColorDeviceGray (0);_dgga ._afc .CTM =_gc .IdentityMatrix ();for _ ,_bdad :=range _dgga ._eeag {var _adfb error ;switch _bdad .Operand {case "\u0071":_dgga ._dcba .Push (_dgga ._afc );case "\u0051":if len (_dgga ._dcba )==0{_gd .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_dgga ._afc =_dgga ._dcba .Pop ();case "\u0043\u0053":_adfb =_dgga .handleCommand_CS (_bdad ,resources );case "\u0063\u0073":_adfb =_dgga .handleCommand_cs (_bdad ,resources );case "\u0053\u0043":_adfb =_dgga .handleCommand_SC (_bdad ,resources );case "\u0053\u0043\u004e":_adfb =_dgga .handleCommand_SCN (_bdad ,resources );case "\u0073\u0063":_adfb =_dgga .handleCommand_sc (_bdad ,resources );case "\u0073\u0063\u006e":_adfb =_dgga .handleCommand_scn (_bdad ,resources );case "\u0047":_adfb =_dgga .handleCommand_G (_bdad ,resources );case "\u0067":_adfb =_dgga .handleCommand_g (_bdad ,resources );case "\u0052\u0047":_adfb =_dgga .handleCommand_RG (_bdad ,resources );case "\u0072\u0067":_adfb =_dgga .handleCommand_rg (_bdad ,resources );case "\u004b":_adfb =_dgga .handleCommand_K (_bdad ,resources );case "\u006b":_adfb =_dgga .handleCommand_k (_bdad ,resources );case "\u0063\u006d":_adfb =_dgga .handleCommand_cm (_bdad ,resources );};if _adfb !=nil {_gd .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_bdad .Operand ,_adfb );_gd .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_bdad .Operand );return _adfb ;};for _ ,_dfae :=range _dgga ._ggfg {var _ebb error ;if _dfae .Condition .All (){_ebb =_dfae .Handler (_bdad ,_dgga ._afc ,resources );}else if _dfae .Condition .Operand ()&&_bdad .Operand ==_dfae .Operand {_ebb =_dfae .Handler (_bdad ,_dgga ._afc ,resources );};if _ebb !=nil {_gd .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_ebb );return _ebb ;};};};return nil ;};func _gbef (_gdde []float64 )[]_ab .PdfObject {var _dcgd []_ab .PdfObject ;for _ ,_dbgg :=range _gdde {_dcgd =append (_dcgd ,_ab .MakeFloat (_dbgg ));};return _dcgd ;};func (_aegf *ContentStreamProcessor )handleCommand_cs (_egec *ContentStreamOperation ,_ece *_geb .PdfPageResources )error {if len (_egec .Params )< 1{_gd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _e .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_egec .Params )> 1{_gd .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _e .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_bgg ,_afca :=_egec .Params [0].(*_ab .PdfObjectName );if !_afca {_gd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fdg ,_gfdd :=_aegf .getColorspace (string (*_bgg ),_ece );if _gfdd !=nil {return _gfdd ;};_aegf ._afc .ColorspaceNonStroking =_fdg ;_dfdd ,_gfdd :=_aegf .getInitialColor (_fdg );if _gfdd !=nil {return _gfdd ;};_aegf ._afc .ColorNonStroking =_dfdd ;return nil ;};

// AddOperand adds a specified operand.
func (_da *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_da ._ba =append (_da ._ba ,&op );return _da ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cde *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_gcf :=ContentStreamOperation {};_gcf .Operand ="\u006c";_gcf .Params =_gbef ([]float64 {x ,y });_cde ._ba =append (_cde ._ba ,&_gcf );return _cde ;};func _eaae (_ccd *ContentStreamInlineImage )(_ab .StreamEncoder ,error ){if _ccd .Filter ==nil {return _ab .NewRawEncoder (),nil ;};_cac ,_caf :=_ccd .Filter .(*_ab .PdfObjectName );if !_caf {_beea ,_egd :=_ccd .Filter .(*_ab .PdfObjectArray );if !_egd {return nil ,_f .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _beea .Len ()==0{return _ab .NewRawEncoder (),nil ;};if _beea .Len ()!=1{_ggd ,_adb :=_gba (_ccd );if _adb !=nil {_gd .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_adb );return nil ,_adb ;};_gd .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_ggd );return _ggd ,nil ;};_fgd :=_beea .Get (0);_cac ,_egd =_fgd .(*_ab .PdfObjectName );if !_egd {return nil ,_f .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_cac {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _ab .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _ab .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _fed (_ccd );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _cbg (_ccd ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _gbg (_ccd ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _ab .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _ab .NewRunLengthEncoder (),nil ;default:_gd .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_cac );return nil ,_e .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func _gba (_fedc *ContentStreamInlineImage )(*_ab .MultiEncoder ,error ){_abec :=_ab .NewMultiEncoder ();var _fccf *_ab .PdfObjectDictionary ;var _dfea []_ab .PdfObject ;if _bcac :=_fedc .DecodeParms ;_bcac !=nil {_gac ,_eefd :=_bcac .(*_ab .PdfObjectDictionary );if _eefd {_fccf =_gac ;};_gacd ,_fcd :=_bcac .(*_ab .PdfObjectArray );if _fcd {for _ ,_fac :=range _gacd .Elements (){if _gaf ,_aacc :=_fac .(*_ab .PdfObjectDictionary );_aacc {_dfea =append (_dfea ,_gaf );}else {_dfea =append (_dfea ,nil );};};};};_ggbc :=_fedc .Filter ;if _ggbc ==nil {return nil ,_f .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_acfd ,_afbe :=_ggbc .(*_ab .PdfObjectArray );if !_afbe {return nil ,_f .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _fgcc ,_ede :=range _acfd .Elements (){_gcgc ,_cfd :=_ede .(*_ab .PdfObjectName );if !_cfd {return nil ,_f .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _bea _ab .PdfObject ;if _fccf !=nil {_bea =_fccf ;}else {if len (_dfea )> 0{if _fgcc >=len (_dfea ){return nil ,_f .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_bea =_dfea [_fgcc ];};};var _bceg *_ab .PdfObjectDictionary ;if _gfbd ,_aaa :=_bea .(*_ab .PdfObjectDictionary );_aaa {_bceg =_gfbd ;};if *_gcgc ==_ab .StreamEncodingFilterNameFlate ||*_gcgc =="\u0046\u006c"{_fca ,_cea :=_cbg (_fedc ,_bceg );if _cea !=nil {return nil ,_cea ;};_abec .AddEncoder (_fca );}else if *_gcgc ==_ab .StreamEncodingFilterNameLZW {_gbbe ,_efe :=_gbg (_fedc ,_bceg );if _efe !=nil {return nil ,_efe ;};_abec .AddEncoder (_gbbe );}else if *_gcgc ==_ab .StreamEncodingFilterNameASCIIHex {_fgda :=_ab .NewASCIIHexEncoder ();_abec .AddEncoder (_fgda );}else if *_gcgc ==_ab .StreamEncodingFilterNameASCII85 ||*_gcgc =="\u0041\u0038\u0035"{_baf :=_ab .NewASCII85Encoder ();_abec .AddEncoder (_baf );}else {_gd .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_gcgc );return nil ,_f .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _abec ,nil ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_df *ContentStreamParser )ExtractText ()(string ,error ){_aa ,_gb :=_df .Parse ();if _gb !=nil {return "",_gb ;};_bg :=false ;_ce ,_ag :=float64 (-1),float64 (-1);_ff :="";for _ ,_ae :=range *_aa {if _ae .Operand =="\u0042\u0054"{_bg =true ;}else if _ae .Operand =="\u0045\u0054"{_bg =false ;};if _ae .Operand =="\u0054\u0064"||_ae .Operand =="\u0054\u0044"||_ae .Operand =="\u0054\u002a"{_ff +="\u000a";};if _ae .Operand =="\u0054\u006d"{if len (_ae .Params )!=6{continue ;};_gbb ,_cd :=_ae .Params [4].(*_ab .PdfObjectFloat );if !_cd {_cbd ,_gdc :=_ae .Params [4].(*_ab .PdfObjectInteger );if !_gdc {continue ;};_gbb =_ab .MakeFloat (float64 (*_cbd ));};_dd ,_cd :=_ae .Params [5].(*_ab .PdfObjectFloat );if !_cd {_ac ,_acc :=_ae .Params [5].(*_ab .PdfObjectInteger );if !_acc {continue ;};_dd =_ab .MakeFloat (float64 (*_ac ));};if _ag ==-1{_ag =float64 (*_dd );}else if _ag > float64 (*_dd ){_ff +="\u000a";_ce =float64 (*_gbb );_ag =float64 (*_dd );continue ;};if _ce ==-1{_ce =float64 (*_gbb );}else if _ce < float64 (*_gbb ){_ff +="\u0009";_ce =float64 (*_gbb );};};if _bg &&_ae .Operand =="\u0054\u004a"{if len (_ae .Params )< 1{continue ;};_aeg ,_ad :=_ae .Params [0].(*_ab .PdfObjectArray );if !_ad {return "",_f .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_ae .Params [0]);};for _ ,_ace :=range _aeg .Elements (){switch _fga :=_ace .(type ){case *_ab .PdfObjectString :_ff +=_fga .Str ();case *_ab .PdfObjectFloat :if *_fga < -100{_ff +="\u0020";};case *_ab .PdfObjectInteger :if *_fga < -100{_ff +="\u0020";};};};}else if _bg &&_ae .Operand =="\u0054\u006a"{if len (_ae .Params )< 1{continue ;};_eg ,_aca :=_ae .Params [0].(*_ab .PdfObjectString );if !_aca {return "",_f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_ae .Params [0]);};_ff +=_eg .Str ();};};return _ff ,nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Push pushes `gs` on the `gsStack`.
func (_aada *GraphicStateStack )Push (gs GraphicsState ){*_aada =append (*_aada ,gs )};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_fbb :=&ContentCreator {};_fbb ._ba =ContentStreamOperations {};return _fbb ;};func (_acacaf *ContentStreamParser )parseObject ()(_cbde _ab .PdfObject ,_gca bool ,_aef error ){_acacaf .skipSpaces ();for {_dggg ,_feg :=_acacaf ._begg .Peek (2);if _feg !=nil {return nil ,false ,_feg ;};_gd .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dggg ));if _dggg [0]=='%'{_acacaf .skipComments ();continue ;}else if _dggg [0]=='/'{_aegeg ,_gfac :=_acacaf .parseName ();_gd .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_aegeg );return &_aegeg ,false ,_gfac ;}else if _dggg [0]=='('{_gd .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_gefd ,_dgd :=_acacaf .parseString ();return _gefd ,false ,_dgd ;}else if _dggg [0]=='<'&&_dggg [1]!='<'{_gd .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_gabb ,_cbga :=_acacaf .parseHexString ();return _gabb ,false ,_cbga ;}else if _dggg [0]=='['{_gd .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_aecc ,_gffg :=_acacaf .parseArray ();return _aecc ,false ,_gffg ;}else if _ab .IsFloatDigit (_dggg [0])||(_dggg [0]=='-'&&_ab .IsFloatDigit (_dggg [1])){_gd .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_gec ,_fgbg :=_acacaf .parseNumber ();return _gec ,false ,_fgbg ;}else if _dggg [0]=='<'&&_dggg [1]=='<'{_eegd ,_beed :=_acacaf .parseDict ();return _eegd ,false ,_beed ;}else {_gd .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dggg ,_ =_acacaf ._begg .Peek (5);_ffb :=string (_dggg );_gd .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_ffb );if (len (_ffb )> 3)&&(_ffb [:4]=="\u006e\u0075\u006c\u006c"){_gecb ,_begd :=_acacaf .parseNull ();return &_gecb ,false ,_begd ;}else if (len (_ffb )> 4)&&(_ffb [:5]=="\u0066\u0061\u006cs\u0065"){_fcb ,_cbc :=_acacaf .parseBool ();return &_fcb ,false ,_cbc ;}else if (len (_ffb )> 3)&&(_ffb [:4]=="\u0074\u0072\u0075\u0065"){_deaa ,_cbag :=_acacaf .parseBool ();return &_deaa ,false ,_cbag ;};_egeg ,_bcee :=_acacaf .parseOperand ();if _bcee !=nil {return _egeg ,false ,_bcee ;};if len (_egeg .String ())< 1{return _egeg ,false ,ErrInvalidOperand ;};return _egeg ,true ,nil ;};};};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gdbg *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ddc :=ContentStreamOperation {};_ddc .Operand ="\u0063\u006d";_ddc .Params =_gbef ([]float64 {a ,b ,c ,d ,e ,f });_gdbg ._ba =append (_gdbg ._ba ,&_ddc );return _gdbg ;};func (_dbge *ContentStreamProcessor )handleCommand_sc (_afde *ContentStreamOperation ,_fgaa *_geb .PdfPageResources )error {_ebeb :=_dbge ._afc .ColorspaceNonStroking ;if !_bfc (_ebeb ){if len (_afde .Params )!=_ebeb .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_afde .Params ),_ebeb );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_aaae ,_bcbb :=_ebeb .ColorFromPdfObjects (_afde .Params );if _bcbb !=nil {return _bcbb ;};_dbge ._afc .ColorNonStroking =_aaae ;return nil ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ea *ContentCreator )Add_f ()*ContentCreator {_eag :=ContentStreamOperation {};_eag .Operand ="\u0066";_ea ._ba =append (_ea ._ba ,&_eag );return _ea ;};func (_fbac *ContentStreamProcessor )handleCommand_SC (_dbg *ContentStreamOperation ,_ffc *_geb .PdfPageResources )error {_abbb :=_fbac ._afc .ColorspaceStroking ;if len (_dbg .Params )!=_abbb .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dbg .Params ),_abbb );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dfc ,_bgd :=_abbb .ColorFromPdfObjects (_dbg .Params );if _bgd !=nil {return _bgd ;};_fbac ._afc .ColorStroking =_dfc ;return nil ;};func (_egdd *ContentStreamInlineImage )toImageBase (_dee *_geb .PdfPageResources )(*_geg .ImageBase ,error ){if _egdd ._age !=nil {return _egdd ._age ,nil ;};_ddd :=_geg .ImageBase {};if _egdd .Height ==nil {return nil ,_e .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_ddf ,_dega :=_egdd .Height .(*_ab .PdfObjectInteger );if !_dega {return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_ddd .Height =int (*_ddf );if _egdd .Width ==nil {return nil ,_e .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_gdd ,_dega :=_egdd .Width .(*_ab .PdfObjectInteger );if !_dega {return nil ,_e .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_ddd .Width =int (*_gdd );_dab ,_ccde :=_egdd .IsMask ();if _ccde !=nil {return nil ,_ccde ;};if _dab {_ddd .BitsPerComponent =1;_ddd .ColorComponents =1;}else {if _egdd .BitsPerComponent ==nil {_gd .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_ddd .BitsPerComponent =8;}else {_ccg ,_cfc :=_egdd .BitsPerComponent .(*_ab .PdfObjectInteger );if !_cfc {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_egdd .BitsPerComponent );return nil ,_e .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_ddd .BitsPerComponent =int (*_ccg );};if _egdd .ColorSpace !=nil {_ccf ,_edb :=_egdd .GetColorSpace (_dee );if _edb !=nil {return nil ,_edb ;};_ddd .ColorComponents =_ccf .GetNumComponents ();}else {_gd .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_ddd .ColorComponents =1;};};if _cdg ,_bcd :=_ab .GetArray (_egdd .Decode );_bcd {_ddd .Decode ,_ccde =_cdg .ToFloat64Array ();if _ccde !=nil {return nil ,_ccde ;};};_egdd ._age =&_ddd ;return _egdd ._age ,nil ;};func (_fcac *ContentStreamProcessor )handleCommand_CS (_gbcg *ContentStreamOperation ,_dcfd *_geb .PdfPageResources )error {if len (_gbcg .Params )< 1{_gd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _e .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gbcg .Params )> 1{_gd .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _e .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_cfda ,_eca :=_gbcg .Params [0].(*_ab .PdfObjectName );if !_eca {_gd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_dddf ,_ddfc :=_fcac .getColorspace (string (*_cfda ),_dcfd );if _ddfc !=nil {return _ddfc ;};_fcac ._afc .ColorspaceStroking =_dddf ;_dccd ,_ddfc :=_fcac .getInitialColor (_dddf );if _ddfc !=nil {return _ddfc ;};_fcac ._afc .ColorStroking =_dccd ;return nil ;};func (_aadg *ContentStreamProcessor )handleCommand_rg (_ccga *ContentStreamOperation ,_gbed *_geb .PdfPageResources )error {_bece :=_geb .NewPdfColorspaceDeviceRGB ();if len (_ccga .Params )!=_bece .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ccga .Params ),_bece );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bbd ,_eggg :=_bece .ColorFromPdfObjects (_ccga .Params );if _eggg !=nil {return _eggg ;};_aadg ._afc .ColorspaceNonStroking =_bece ;_aadg ._afc .ColorNonStroking =_bbd ;return nil ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_aaff *ContentCreator )Add_quote (textstr _ab .PdfObjectString )*ContentCreator {_efa :=ContentStreamOperation {};_efa .Operand ="\u0027";_efa .Params =_beec ([]_ab .PdfObjectString {textstr });_aaff ._ba =append (_aaff ._ba ,&_efa );return _aaff ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fa *ContentCreator )Add_Q ()*ContentCreator {_ggb :=ContentStreamOperation {};_ggb .Operand ="\u0051";_fa ._ba =append (_fa ._ba ,&_ggb );return _fa ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ead *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_ced :=ContentStreamOperation {};_ced .Operand ="\u006b";_ced .Params =_gbef ([]float64 {c ,m ,y ,k });_ead ._ba =append (_ead ._ba ,&_ced );return _ead ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_bae *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_adcb :=ContentStreamOperation {};_adcb .Operand ="\u0054\u0044";_adcb .Params =_gbef ([]float64 {tx ,ty });_bae ._ba =append (_bae ._ba ,&_adcb );return _bae ;};func _dbbac (_beead _ab .PdfObject )(_geb .PdfColorspace ,error ){_fcf ,_facgc :=_beead .(*_ab .PdfObjectArray );if !_facgc {_gd .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_beead );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _fcf .Len ()!=4{_gd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_fcf .Len ());return nil ,_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_adbf ,_facgc :=_fcf .Get (0).(*_ab .PdfObjectName );if !_facgc {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_fcf );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_adbf !="\u0049"&&*_adbf !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_gd .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_adbf );return nil ,_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_adbf ,_facgc =_fcf .Get (1).(*_ab .PdfObjectName );if !_facgc {_gd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_fcf );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_adbf !="\u0047"&&*_adbf !="\u0052\u0047\u0042"&&*_adbf !="\u0043\u004d\u0059\u004b"&&*_adbf !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_adbf !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_adbf !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_gd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_adbf );return nil ,_e .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_fefg :="";switch *_adbf {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_fefg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_fefg ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_fefg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_cgc :=_ab .MakeArray (_ab .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_ab .MakeName (_fefg ),_fcf .Get (2),_fcf .Get (3));return _geb .NewPdfColorspaceFromPdfObject (_cgc );};

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_agfc *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_cfe :=ContentStreamOperation {};_cfe .Operand ="\u0073\u0063\u006e";_cfe .Params =_gbef (c );_agfc ._ba =append (_agfc ._ba ,&_cfe );return _agfc ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_fbd *ContentCreator )Add_BMC (tag _ab .PdfObjectName )*ContentCreator {_affd :=ContentStreamOperation {};_affd .Operand ="\u0042\u004d\u0043";_affd .Params =_bfe ([]_ab .PdfObjectName {tag });_fbd ._ba =append (_fbd ._ba ,&_affd );return _fbd ;};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ege *ContentCreator )Add_i (flatness float64 )*ContentCreator {_bc :=ContentStreamOperation {};_bc .Operand ="\u0069";_bc .Params =_gbef ([]float64 {flatness });_ege ._ba =append (_ege ._ba ,&_bc );return _ege ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fec *ContentCreator )Add_g (gray float64 )*ContentCreator {_aee :=ContentStreamOperation {};_aee .Operand ="\u0067";_aee .Params =_gbef ([]float64 {gray });_fec ._ba =append (_fec ._ba ,&_aee );return _fec ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_egf *ContentStreamInlineImage )IsMask ()(bool ,error ){if _egf .ImageMask !=nil {_ceb ,_fgaf :=_egf .ImageMask .(*_ab .PdfObjectBool );if !_fgaf {_gd .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_e .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_ceb ),nil ;};return false ,nil ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_bce *ContentCreator )Add_W ()*ContentCreator {_def :=ContentStreamOperation {};_def .Operand ="\u0057";_bce ._ba =append (_bce ._ba ,&_def );return _bce ;};func (_bcc *ContentStreamParser )skipComments ()error {if _ ,_bbb :=_bcc .skipSpaces ();_bbb !=nil {return _bbb ;};_gegb :=true ;for {_daae ,_cafa :=_bcc ._begg .Peek (1);if _cafa !=nil {_gd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cafa .Error ());return _cafa ;};if _gegb &&_daae [0]!='%'{return nil ;};_gegb =false ;if (_daae [0]!='\r')&&(_daae [0]!='\n'){_bcc ._begg .ReadByte ();}else {break ;};};return _bcc .skipComments ();};func (_bfg *ContentStreamInlineImage )String ()string {_gce :=_f .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_bfg ._aege ));if _bfg .BitsPerComponent !=nil {_gce +="\u002d\u0020\u0042\u0050\u0043\u0020"+_bfg .BitsPerComponent .WriteString ()+"\u000a";};if _bfg .ColorSpace !=nil {_gce +="\u002d\u0020\u0043S\u0020"+_bfg .ColorSpace .WriteString ()+"\u000a";};if _bfg .Decode !=nil {_gce +="\u002d\u0020\u0044\u0020"+_bfg .Decode .WriteString ()+"\u000a";};if _bfg .DecodeParms !=nil {_gce +="\u002d\u0020\u0044P\u0020"+_bfg .DecodeParms .WriteString ()+"\u000a";};if _bfg .Filter !=nil {_gce +="\u002d\u0020\u0046\u0020"+_bfg .Filter .WriteString ()+"\u000a";};if _bfg .Height !=nil {_gce +="\u002d\u0020\u0048\u0020"+_bfg .Height .WriteString ()+"\u000a";};if _bfg .ImageMask !=nil {_gce +="\u002d\u0020\u0049M\u0020"+_bfg .ImageMask .WriteString ()+"\u000a";};if _bfg .Intent !=nil {_gce +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_bfg .Intent .WriteString ()+"\u000a";};if _bfg .Interpolate !=nil {_gce +="\u002d\u0020\u0049\u0020"+_bfg .Interpolate .WriteString ()+"\u000a";};if _bfg .Width !=nil {_gce +="\u002d\u0020\u0057\u0020"+_bfg .Width .WriteString ()+"\u000a";};return _gce ;};func (_abgd *ContentStreamProcessor )handleCommand_cm (_cfb *ContentStreamOperation ,_gaaca *_geb .PdfPageResources )error {if len (_cfb .Params )!=6{_gd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_cfb .Params ));return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_aedd ,_fda :=_ab .GetNumbersAsFloat (_cfb .Params );if _fda !=nil {return _fda ;};_ccdf :=_gc .NewMatrix (_aedd [0],_aedd [1],_aedd [2],_aedd [3],_aedd [4],_aedd [5]);_abgd ._afc .CTM .Concat (_ccdf );return nil ;};func (_dggga *ContentStreamProcessor )handleCommand_g (_fag *ContentStreamOperation ,_ddgcc *_geb .PdfPageResources )error {_dgde :=_geb .NewPdfColorspaceDeviceGray ();if len (_fag .Params )!=_dgde .GetNumComponents (){_gd .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fag .Params ),_dgde );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gdda ,_gfgb :=_dgde .ColorFromPdfObjects (_fag .Params );if _gfgb !=nil {_gd .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_dgde ,_fag ,_gfgb );return _gfgb ;};_dggga ._afc .ColorspaceNonStroking =_dgde ;_dggga ._afc .ColorNonStroking =_gdda ;return nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cge *ContentCreator )Add_f_starred ()*ContentCreator {_aad :=ContentStreamOperation {};_aad .Operand ="\u0066\u002a";_cge ._ba =append (_cge ._ba ,&_aad );return _cge ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_aec *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_ee :=_cc .Cos (angle *_cc .Pi /180.0);_fd :=_cc .Sin (angle *_cc .Pi /180.0);_agf :=-_cc .Sin (angle *_cc .Pi /180.0);_dfa :=_cc .Cos (angle *_cc .Pi /180.0);return _aec .Add_cm (_ee ,_fd ,_agf ,_dfa ,0,0);};

// String is same as Bytes() except returns as a string for convenience.
func (_acac *ContentCreator )String ()string {return string (_acac ._ba .Bytes ())};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gbe *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_bac :=ContentStreamOperation {};_bac .Operand ="\u0054\u0077";_bac .Params =_gbef ([]float64 {wordSpace });_gbe ._ba =append (_gbe ._ba ,&_bac );return _gbe ;};func _gbg (_egge *ContentStreamInlineImage ,_bgae *_ab .PdfObjectDictionary )(*_ab .LZWEncoder ,error ){_ffe :=_ab .NewLZWEncoder ();if _bgae ==nil {if _egge .DecodeParms !=nil {_dafb ,_gffd :=_ab .GetDict (_egge .DecodeParms );if !_gffd {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_egge .DecodeParms );return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_bgae =_dafb ;};};if _bgae ==nil {return _ffe ,nil ;};_dad :=_bgae .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _dad !=nil {_bbf ,_cegb :=_dad .(*_ab .PdfObjectInteger );if !_cegb {_gd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_dad );return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_bbf !=0&&*_bbf !=1{return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_ffe .EarlyChange =int (*_bbf );}else {_ffe .EarlyChange =1;};_dad =_bgae .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _dad !=nil {_affb ,_accb :=_dad .(*_ab .PdfObjectInteger );if !_accb {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_dad );return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_ffe .Predictor =int (*_affb );};_dad =_bgae .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _dad !=nil {_dcg ,_fbdd :=_dad .(*_ab .PdfObjectInteger );if !_fbdd {_gd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_f .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_ffe .BitsPerComponent =int (*_dcg );};if _ffe .Predictor > 1{_ffe .Columns =1;_dad =_bgae .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _dad !=nil {_gga ,_abe :=_dad .(*_ab .PdfObjectInteger );if !_abe {return nil ,_f .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_ffe .Columns =int (*_gga );};_ffe .Colors =1;_dad =_bgae .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _dad !=nil {_degc ,_gef :=_dad .(*_ab .PdfObjectInteger );if !_gef {return nil ,_f .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_ffe .Colors =int (*_degc );};};_gd .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_bgae .String ());return _ffe ,nil ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gcg *ContentCreator )Add_B_starred ()*ContentCreator {_fab :=ContentStreamOperation {};_fab .Operand ="\u0042\u002a";_gcg ._ba =append (_gcg ._ba ,&_fab );return _gcg ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_ab .PdfObject ;Operand string ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_edf *ContentCreator )Add_W_starred ()*ContentCreator {_gfb :=ContentStreamOperation {};_gfb .Operand ="\u0057\u002a";_edf ._ba =append (_edf ._ba ,&_gfb );return _edf ;};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_caba *GraphicStateStack )Pop ()GraphicsState {_afda :=(*_caba )[len (*_caba )-1];*_caba =(*_caba )[:len (*_caba )-1];return _afda ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_cgfd *ContentCreator )Add_BT ()*ContentCreator {_cdac :=ContentStreamOperation {};_cdac .Operand ="\u0042\u0054";_cgfd ._ba =append (_cgfd ._ba ,&_cdac );return _cgfd ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_fcg *ContentCreator )Add_Tf (fontName _ab .PdfObjectName ,fontSize float64 )*ContentCreator {_dag :=ContentStreamOperation {};_dag .Operand ="\u0054\u0066";_dag .Params =_bfe ([]_ab .PdfObjectName {fontName });_dag .Params =append (_dag .Params ,_gbef ([]float64 {fontSize })...);_fcg ._ba =append (_fcg ._ba ,&_dag );return _fcg ;};

// GetColorSpace returns the colorspace of the inline image.
func (_baa *ContentStreamInlineImage )GetColorSpace (resources *_geb .PdfPageResources )(_geb .PdfColorspace ,error ){if _baa .ColorSpace ==nil {_gd .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _geb .NewPdfColorspaceDeviceGray (),nil ;};if _gag ,_dfdf :=_baa .ColorSpace .(*_ab .PdfObjectArray );_dfdf {return _dbbac (_gag );};_abf ,_efb :=_baa .ColorSpace .(*_ab .PdfObjectName );if !_efb {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_baa .ColorSpace ,_baa .ColorSpace );return nil ,_e .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_abf =="\u0047"||*_abf =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _geb .NewPdfColorspaceDeviceGray (),nil ;}else if *_abf =="\u0052\u0047\u0042"||*_abf =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _geb .NewPdfColorspaceDeviceRGB (),nil ;}else if *_abf =="\u0043\u004d\u0059\u004b"||*_abf =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _geb .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_abf =="\u0049"||*_abf =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_e .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_gd .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_abf );return nil ,_e .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_ega ,_acd :=resources .GetColorspaceByName (*_abf );if !_acd {_gd .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_abf );return nil ,_e .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _ega ,nil ;};};func _aabc (_fecfe []int64 )[]_ab .PdfObject {var _bfd []_ab .PdfObject ;for _ ,_gbaa :=range _fecfe {_bfd =append (_bfd ,_ab .MakeInteger (_gbaa ));};return _bfd ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_efd *ContentCreator )Add_h ()*ContentCreator {_fe :=ContentStreamOperation {};_fe .Operand ="\u0068";_efd ._ba =append (_efd ._ba ,&_fe );return _efd ;};func (_dae *ContentStreamProcessor )getColorspace (_ebgd string ,_adac *_geb .PdfPageResources )(_geb .PdfColorspace ,error ){switch _ebgd {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _geb .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _geb .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _geb .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _geb .NewPdfColorspaceSpecialPattern (),nil ;};_eac ,_afdc :=_adac .GetColorspaceByName (_ab .PdfObjectName (_ebgd ));if _afdc {return _eac ,nil ;};switch _ebgd {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _geb .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _geb .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _geb .NewPdfColorspaceLab (),nil ;};_gd .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_ebgd );return nil ,_f .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_ebgd );};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eee *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_fabd :=ContentStreamOperation {};_fabd .Operand ="\u004b";_fabd .Params =_gbef ([]float64 {c ,m ,y ,k });_eee ._ba =append (_eee ._ba ,&_fabd );return _eee ;};

// WriteString outputs the object as it is to be written to file.
func (_cdea *ContentStreamInlineImage )WriteString ()string {var _gcee _fg .Buffer ;_dac :="";if _cdea .BitsPerComponent !=nil {_dac +="\u002f\u0042\u0050C\u0020"+_cdea .BitsPerComponent .WriteString ()+"\u000a";};if _cdea .ColorSpace !=nil {_dac +="\u002f\u0043\u0053\u0020"+_cdea .ColorSpace .WriteString ()+"\u000a";};if _cdea .Decode !=nil {_dac +="\u002f\u0044\u0020"+_cdea .Decode .WriteString ()+"\u000a";};if _cdea .DecodeParms !=nil {_dac +="\u002f\u0044\u0050\u0020"+_cdea .DecodeParms .WriteString ()+"\u000a";};if _cdea .Filter !=nil {_dac +="\u002f\u0046\u0020"+_cdea .Filter .WriteString ()+"\u000a";};if _cdea .Height !=nil {_dac +="\u002f\u0048\u0020"+_cdea .Height .WriteString ()+"\u000a";};if _cdea .ImageMask !=nil {_dac +="\u002f\u0049\u004d\u0020"+_cdea .ImageMask .WriteString ()+"\u000a";};if _cdea .Intent !=nil {_dac +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_cdea .Intent .WriteString ()+"\u000a";};if _cdea .Interpolate !=nil {_dac +="\u002f\u0049\u0020"+_cdea .Interpolate .WriteString ()+"\u000a";};if _cdea .Width !=nil {_dac +="\u002f\u0057\u0020"+_cdea .Width .WriteString ()+"\u000a";};_gcee .WriteString (_dac );_gcee .WriteString ("\u0049\u0044\u0020");_gcee .Write (_cdea ._aege );_gcee .WriteString ("\u000a\u0045\u0049\u000a");return _gcee .String ();};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ef *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_gbbf :=ContentStreamOperation {};_gbbf .Operand ="\u0077";_gbbf .Params =_gbef ([]float64 {lineWidth });_ef ._ba =append (_ef ._ba ,&_gbbf );return _ef ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_dea *ContentCreator )SetStrokingColor (color _geb .PdfColor )*ContentCreator {switch _gbbd :=color .(type ){case *_geb .PdfColorDeviceGray :_dea .Add_G (_gbbd .Val ());case *_geb .PdfColorDeviceRGB :_dea .Add_RG (_gbbd .R (),_gbbd .G (),_gbbd .B ());case *_geb .PdfColorDeviceCMYK :_dea .Add_K (_gbbd .C (),_gbbd .M (),_gbbd .Y (),_gbbd .K ());default:_gd .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_gbbd );};return _dea ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_abc *ContentCreator )Add_sh (name _ab .PdfObjectName )*ContentCreator {_dbb :=ContentStreamOperation {};_dbb .Operand ="\u0073\u0068";_dbb .Params =_bfe ([]_ab .PdfObjectName {name });_abc ._ba =append (_abc ._ba ,&_dbb );return _abc ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ebec *ContentCreator )Add_TL (leading float64 )*ContentCreator {_cfg :=ContentStreamOperation {};_cfg .Operand ="\u0054\u004c";_cfg .Params =_gbef ([]float64 {leading });_ebec ._ba =append (_ebec ._ba ,&_cfg );return _ebec ;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_cdf *ContentCreator )SetNonStrokingColor (color _geb .PdfColor )*ContentCreator {switch _aff :=color .(type ){case *_geb .PdfColorDeviceGray :_cdf .Add_g (_aff .Val ());case *_geb .PdfColorDeviceRGB :_cdf .Add_rg (_aff .R (),_aff .G (),_aff .B ());case *_geb .PdfColorDeviceCMYK :_cdf .Add_k (_aff .C (),_aff .M (),_aff .Y (),_aff .K ());default:_gd .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_aff );};return _cdf ;};

// Operations returns the list of operations.
func (_gg *ContentCreator )Operations ()*ContentStreamOperations {return &_gg ._ba };type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};func (_cbdf *ContentStreamProcessor )handleCommand_G (_bbfd *ContentStreamOperation ,_dcfb *_geb .PdfPageResources )error {_adee :=_geb .NewPdfColorspaceDeviceGray ();if len (_bbfd .Params )!=_adee .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bbfd .Params ),_adee );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cacd ,_fgbca :=_adee .ColorFromPdfObjects (_bbfd .Params );if _fgbca !=nil {return _fgbca ;};_cbdf ._afc .ColorspaceStroking =_adee ;_cbdf ._afc .ColorStroking =_cacd ;return nil ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dcb *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_cga :=ContentStreamOperation {};_cga .Operand ="\u0072\u0067";_cga .Params =_gbef ([]float64 {r ,g ,b });_dcb ._ba =append (_dcb ._ba ,&_cga );return _dcb ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_gdf *ContentStreamInlineImage )ToImage (resources *_geb .PdfPageResources )(*_geb .Image ,error ){_abb ,_dga :=_gdf .toImageBase (resources );if _dga !=nil {return nil ,_dga ;};_dcbc ,_dga :=_eaae (_gdf );if _dga !=nil {return nil ,_dga ;};_gd .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_dcbc ,_dcbc );_gd .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_gdf );_cbge ,_dga :=_dcbc .DecodeBytes (_gdf ._aege );if _dga !=nil {return nil ,_dga ;};_afd :=&_geb .Image {Width :int64 (_abb .Width ),Height :int64 (_abb .Height ),BitsPerComponent :int64 (_abb .BitsPerComponent ),ColorComponents :_abb .ColorComponents ,Data :_cbge };if len (_abb .Decode )> 0{for _ecfb :=0;_ecfb < len (_abb .Decode );_ecfb ++{_abb .Decode [_ecfb ]*=float64 ((int (1)<<uint (_abb .BitsPerComponent ))-1);};_afd .SetDecode (_abb .Decode );};return _afd ,nil ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_afe HandlerConditionEnum )All ()bool {return _afe ==HandlerConditionEnumAllOperands };func (_dgff *ContentStreamParser )parseHexString ()(*_ab .PdfObjectString ,error ){_dgff ._begg .ReadByte ();_cad :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _fgdd []byte ;for {_dgff .skipSpaces ();_bdgc ,_bdc :=_dgff ._begg .Peek (1);if _bdc !=nil {return _ab .MakeString (""),_bdc ;};if _bdgc [0]=='>'{_dgff ._begg .ReadByte ();break ;};_dce ,_ :=_dgff ._begg .ReadByte ();if _fg .IndexByte (_cad ,_dce )>=0{_fgdd =append (_fgdd ,_dce );};};if len (_fgdd )%2==1{_fgdd =append (_fgdd ,'0');};_dca ,_ :=_b .DecodeString (string (_fgdd ));return _ab .MakeHexString (string (_dca )),nil ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_bee *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _bee .Add_cm (1,0,0,1,tx ,ty );};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_dgfd HandlerConditionEnum )Operand ()bool {return _dgfd ==HandlerConditionEnumOperand };

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_egg *ContentCreator )Add_gs (dictName _ab .PdfObjectName )*ContentCreator {_bca :=ContentStreamOperation {};_bca .Operand ="\u0067\u0073";_bca .Params =_bfe ([]_ab .PdfObjectName {dictName });_egg ._ba =append (_egg ._ba ,&_bca );return _egg ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_bdb *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_dddg :=ContentStreamInlineImage {};for {_bdb .skipSpaces ();_dbba ,_gaab ,_aed :=_bdb .parseObject ();if _aed !=nil {return nil ,_aed ;};if !_gaab {_bdgb ,_gae :=_ab .GetName (_dbba );if !_gae {_gd .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_dbba );return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_dbba );};_ffa ,_bec ,_bcf :=_bdb .parseObject ();if _bcf !=nil {return nil ,_bcf ;};if _bec {return nil ,_f .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_bdgb {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_dddg .BitsPerComponent =_ffa ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_dddg .ColorSpace =_ffa ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_dddg .Decode =_ffa ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_dddg .DecodeParms =_ffa ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_dddg .Filter =_ffa ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_dddg .Height =_ffa ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_dddg .ImageMask =_ffa ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_dddg .Intent =_ffa ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_dddg .Interpolate =_ffa ;case "\u0057","\u0057\u0069\u0064t\u0068":_dddg .Width =_ffa ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_gd .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_bdgb );default:return nil ,_f .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_bdgb );};};if _gaab {_ebfb ,_dgee :=_dbba .(*_ab .PdfObjectString );if !_dgee {return nil ,_f .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _ebfb .Str ()=="\u0045\u0049"{_gd .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_dddg ,nil ;}else if _ebfb .Str ()=="\u0049\u0044"{_gd .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_bbc ,_dgg :=_bdb ._begg .Peek (1);if _dgg !=nil {return nil ,_dgg ;};if _ab .IsWhiteSpace (_bbc [0]){_bdb ._begg .Discard (1);};_dddg ._aege =[]byte {};_gdfa :=0;var _cdb []byte ;for {_ddce ,_acg :=_bdb ._begg .ReadByte ();if _acg !=nil {_gd .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_acg ;};if _gdfa ==0{if _ab .IsWhiteSpace (_ddce ){_cdb =[]byte {};_cdb =append (_cdb ,_ddce );_gdfa =1;}else if _ddce =='E'{_cdb =append (_cdb ,_ddce );_gdfa =2;}else {_dddg ._aege =append (_dddg ._aege ,_ddce );};}else if _gdfa ==1{_cdb =append (_cdb ,_ddce );if _ddce =='E'{_gdfa =2;}else {_dddg ._aege =append (_dddg ._aege ,_cdb ...);_cdb =[]byte {};if _ab .IsWhiteSpace (_ddce ){_gdfa =1;}else {_gdfa =0;};};}else if _gdfa ==2{_cdb =append (_cdb ,_ddce );if _ddce =='I'{_gdfa =3;}else {_dddg ._aege =append (_dddg ._aege ,_cdb ...);_cdb =[]byte {};_gdfa =0;};}else if _gdfa ==3{_cdb =append (_cdb ,_ddce );if _ab .IsWhiteSpace (_ddce ){_eea ,_bgf :=_bdb ._begg .Peek (20);if _bgf !=nil &&_bgf !=_g .EOF {return nil ,_bgf ;};_dgfe :=NewContentStreamParser (string (_eea ));_cce :=true ;for _dfg :=0;_dfg < 3;_dfg ++{_bda ,_gfc ,_bged :=_dgfe .parseObject ();if _bged !=nil {if _bged ==_g .EOF {break ;};continue ;};if _gfc &&!_bgfb (_bda .String ()){_cce =false ;break ;};};if _cce {if len (_dddg ._aege )> 100{_gd .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_dddg ._aege ),_dddg ._aege [:100]);}else {_gd .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_dddg ._aege ),_dddg ._aege );};return &_dddg ,nil ;};};_dddg ._aege =append (_dddg ._aege ,_cdb ...);_cdb =[]byte {};_gdfa =0;};};};};};};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cf *ContentCreator )Add_b ()*ContentCreator {_dg :=ContentStreamOperation {};_dg .Operand ="\u0062";_cf ._ba =append (_cf ._ba ,&_dg );return _cf ;};func (_gfbe *ContentStreamParser )parseString ()(*_ab .PdfObjectString ,error ){_gfbe ._begg .ReadByte ();var _bgc []byte ;_beb :=1;for {_gbag ,_ccda :=_gfbe ._begg .Peek (1);if _ccda !=nil {return _ab .MakeString (string (_bgc )),_ccda ;};if _gbag [0]=='\\'{_gfbe ._begg .ReadByte ();_dggc ,_fcab :=_gfbe ._begg .ReadByte ();if _fcab !=nil {return _ab .MakeString (string (_bgc )),_fcab ;};if _ab .IsOctalDigit (_dggc ){_fba ,_ffd :=_gfbe ._begg .Peek (2);if _ffd !=nil {return _ab .MakeString (string (_bgc )),_ffd ;};var _adcg []byte ;_adcg =append (_adcg ,_dggc );for _ ,_egc :=range _fba {if _ab .IsOctalDigit (_egc ){_adcg =append (_adcg ,_egc );}else {break ;};};_gfbe ._begg .Discard (len (_adcg )-1);_gd .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_adcg );_gfca ,_ffd :=_c .ParseUint (string (_adcg ),8,32);if _ffd !=nil {return _ab .MakeString (string (_bgc )),_ffd ;};_bgc =append (_bgc ,byte (_gfca ));continue ;};switch _dggc {case 'n':_bgc =append (_bgc ,'\n');case 'r':_bgc =append (_bgc ,'\r');case 't':_bgc =append (_bgc ,'\t');case 'b':_bgc =append (_bgc ,'\b');case 'f':_bgc =append (_bgc ,'\f');case '(':_bgc =append (_bgc ,'(');case ')':_bgc =append (_bgc ,')');case '\\':_bgc =append (_bgc ,'\\');};continue ;}else if _gbag [0]=='('{_beb ++;}else if _gbag [0]==')'{_beb --;if _beb ==0{_gfbe ._begg .ReadByte ();break ;};};_edfc ,_ :=_gfbe ._begg .ReadByte ();_bgc =append (_bgc ,_edfc );};return _ab .MakeString (string (_bgc )),nil ;};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_adc *ContentCreator )Add_Do (name _ab .PdfObjectName )*ContentCreator {_dcc :=ContentStreamOperation {};_dcc .Operand ="\u0044\u006f";_dcc .Params =_bfe ([]_ab .PdfObjectName {name });_adc ._ba =append (_adc ._ba ,&_dcc );return _adc ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gbbda *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_agfb :=ContentStreamOperation {};_agfb .Operand ="\u0054\u0073";_agfb .Params =_gbef ([]float64 {rise });_gbbda ._ba =append (_gbbda ._ba ,&_agfb );return _gbbda ;};func (_gaac *ContentStreamParser )parseArray ()(*_ab .PdfObjectArray ,error ){_dbe :=_ab .MakeArray ();_gaac ._begg .ReadByte ();for {_gaac .skipSpaces ();_bdd ,_fgbc :=_gaac ._begg .Peek (1);if _fgbc !=nil {return _dbe ,_fgbc ;};if _bdd [0]==']'{_gaac ._begg .ReadByte ();break ;};_afff ,_ ,_fgbc :=_gaac .parseObject ();if _fgbc !=nil {return _dbe ,_fgbc ;};_dbe .Append (_afff );};return _dbe ,nil ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dfd *ContentCreator )Add_Tj (textstr _ab .PdfObjectString )*ContentCreator {_fdc :=ContentStreamOperation {};_fdc .Operand ="\u0054\u006a";_fdc .Params =_beec ([]_ab .PdfObjectString {textstr });_dfd ._ba =append (_dfd ._ba ,&_fdc );return _dfd ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _ab .PdfObject ;ColorSpace _ab .PdfObject ;Decode _ab .PdfObject ;DecodeParms _ab .PdfObject ;Filter _ab .PdfObject ;Height _ab .PdfObject ;ImageMask _ab .PdfObject ;Intent _ab .PdfObject ;Interpolate _ab .PdfObject ;Width _ab .PdfObject ;_aege []byte ;_age *_geg .ImageBase ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_agc *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_gfg :=ContentStreamOperation {};_gfg .Operand ="\u0079";_gfg .Params =_gbef ([]float64 {x1 ,y1 ,x3 ,y3 });_agc ._ba =append (_agc ._ba ,&_gfg );return _agc ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _geb .PdfColorspace ;ColorspaceNonStroking _geb .PdfColorspace ;ColorStroking _geb .PdfColor ;ColorNonStroking _geb .PdfColor ;CTM _gc .Matrix ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_aegd :=ContentStreamParser {};_ddgc :=_fg .NewBufferString (contentStr +"\u000a");_aegd ._begg =_ec .NewReader (_ddgc );return &_aegd ;};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_begg *_ec .Reader };func (_fef *ContentStreamParser )parseNull ()(_ab .PdfObjectNull ,error ){_ ,_gdfd :=_fef ._begg .Discard (4);return _ab .PdfObjectNull {},_gdfd ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_gebd *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _gebd .CTM .Transform (x ,y );};func (_fb *ContentStreamOperations )isWrapped ()bool {if len (*_fb )< 2{return false ;};_ga :=0;for _ ,_cb :=range *_fb {if _cb .Operand =="\u0071"{_ga ++;}else if _cb .Operand =="\u0051"{_ga --;}else {if _ga < 1{return false ;};};};return _ga ==0;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ba ContentStreamOperations };func _bfc (_gcbd _geb .PdfColorspace )bool {_ ,_gegg :=_gcbd .(*_geb .PdfColorspaceSpecialPattern );return _gegg ;};var (ErrInvalidOperand =_e .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgd *ContentCreator )Add_cs (name _ab .PdfObjectName )*ContentCreator {_efg :=ContentStreamOperation {};_efg .Operand ="\u0063\u0073";_efg .Params =_bfe ([]_ab .PdfObjectName {name });_cgd ._ba =append (_cgd ._ba ,&_efg );return _cgd ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_gad *ContentStreamOperations )Bytes ()[]byte {var _cca _fg .Buffer ;for _ ,_be :=range *_gad {if _be ==nil {continue ;};if _be .Operand =="\u0042\u0049"{_cca .WriteString (_be .Operand +"\u000a");_cca .WriteString (_be .Params [0].WriteString ());}else {for _ ,_ged :=range _be .Params {_cca .WriteString (_ged .WriteString ());_cca .WriteString ("\u0020");};_cca .WriteString (_be .Operand +"\u000a");};};return _cca .Bytes ();};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cbb *ContentCreator )Add_B ()*ContentCreator {_fgf :=ContentStreamOperation {};_fgf .Operand ="\u0042";_cbb ._ba =append (_cbb ._ba ,&_fgf );return _cbb ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ebf *ContentCreator )Add_ri (intent _ab .PdfObjectName )*ContentCreator {_dfe :=ContentStreamOperation {};_dfe .Operand ="\u0072\u0069";_dfe .Params =_bfe ([]_ab .PdfObjectName {intent });_ebf ._ba =append (_ebf ._ba ,&_dfe );return _ebf ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cec *ContentCreator )Add_G (gray float64 )*ContentCreator {_gcgd :=ContentStreamOperation {};_gcgd .Operand ="\u0047";_gcgd .Params =_gbef ([]float64 {gray });_cec ._ba =append (_cec ._ba ,&_gcgd );return _cec ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_daf *ContentCreator )Add_s ()*ContentCreator {_ffg :=ContentStreamOperation {};_ffg .Operand ="\u0073";_daf ._ba =append (_daf ._ba ,&_ffg );return _daf ;};func (_bege *ContentStreamParser )parseDict ()(*_ab .PdfObjectDictionary ,error ){_gd .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_adbd :=_ab .MakeDict ();_ffee ,_ :=_bege ._begg .ReadByte ();if _ffee !='<'{return nil ,_e .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_ffee ,_ =_bege ._begg .ReadByte ();if _ffee !='<'{return nil ,_e .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_bege .skipSpaces ();_cdd ,_fefc :=_bege ._begg .Peek (2);if _fefc !=nil {return nil ,_fefc ;};_gd .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_cdd ),string (_cdd ));if (_cdd [0]=='>')&&(_cdd [1]=='>'){_gd .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_bege ._begg .ReadByte ();_bege ._begg .ReadByte ();break ;};_gd .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_aeda ,_fefc :=_bege .parseName ();_gd .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_aeda );if _fefc !=nil {_gd .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_fefc );return nil ,_fefc ;};if len (_aeda )> 4&&_aeda [len (_aeda )-4:]=="\u006e\u0075\u006c\u006c"{_bcb :=_aeda [0:len (_aeda )-4];_gd .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_aeda );_gd .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_bcb );_bege .skipSpaces ();_efgg ,_ :=_bege ._begg .Peek (1);if _efgg [0]=='/'{_adbd .Set (_bcb ,_ab .MakeNull ());continue ;};};_bege .skipSpaces ();_fefd ,_ ,_fefc :=_bege .parseObject ();if _fefc !=nil {return nil ,_fefc ;};_adbd .Set (_aeda ,_fefd );_gd .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_aeda ,_fefd .String ());};return _adbd ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cda *ContentCreator )Add_CS (name _ab .PdfObjectName )*ContentCreator {_fea :=ContentStreamOperation {};_fea .Operand ="\u0043\u0053";_fea .Params =_bfe ([]_ab .PdfObjectName {name });_cda ._ba =append (_cda ._ba ,&_fea );return _cda ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gbce *ContentCreator )Add_Tstar ()*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0054\u002a";_gbce ._ba =append (_gbce ._ba ,&_eef );return _gbce ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dcf *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_eaa :=ContentStreamOperation {};_eaa .Operand ="\u0052\u0047";_eaa .Params =_gbef ([]float64 {r ,g ,b });_dcf ._ba =append (_dcf ._ba ,&_eaa );return _dcf ;};func (_caa *ContentStreamProcessor )handleCommand_K (_fgfdf *ContentStreamOperation ,_bad *_geb .PdfPageResources )error {_bacf :=_geb .NewPdfColorspaceDeviceCMYK ();if len (_fgfdf .Params )!=_bacf .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fgfdf .Params ),_bacf );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bccf ,_afdd :=_bacf .ColorFromPdfObjects (_fgfdf .Params );if _afdd !=nil {return _afdd ;};_caa ._afc .ColorspaceStroking =_bacf ;_caa ._afc .ColorStroking =_bccf ;return nil ;};var _egdc =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gda *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_agg :=ContentStreamOperation {};_agg .Operand ="\u0053\u0043";_agg .Params =_gbef (c );_gda ._ba =append (_gda ._ba ,&_agg );return _gda ;};

// String returns `ops.Bytes()` as a string.
func (_cgf *ContentStreamOperations )String ()string {return string (_cgf .Bytes ())};func _bfe (_aeaa []_ab .PdfObjectName )[]_ab .PdfObject {var _dcfg []_ab .PdfObject ;for _ ,_bab :=range _aeaa {_dcfg =append (_dcfg ,_ab .MakeName (string (_bab )));};return _dcfg ;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fcc *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_cgb :=ContentStreamOperation {};_cgb .Operand ="\u0054\u0064";_cgb .Params =_gbef ([]float64 {tx ,ty });_fcc ._ba =append (_fcc ._ba ,&_cgb );return _fcc ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_gdb *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_gdb )==0{return _gdb ;};if _gdb .isWrapped (){return _gdb ;};*_gdb =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_gdb ...);_ebe :=0;for _ ,_cg :=range *_gdb {if _cg .Operand =="\u0071"{_ebe ++;}else if _cg .Operand =="\u0051"{_ebe --;};};for _ebe > 0{*_gdb =append (*_gdb ,&ContentStreamOperation {Operand :"\u0051"});_ebe --;};return _gdb ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_aag *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u0076";_gcd .Params =_gbef ([]float64 {x2 ,y2 ,x3 ,y3 });_aag ._ba =append (_aag ._ba ,&_gcd );return _aag ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _geb .Image ,encoder _ab .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_ab .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_deac :=ContentStreamInlineImage {};if img .ColorComponents ==1{_deac .ColorSpace =_ab .MakeName ("\u0047");}else if img .ColorComponents ==3{_deac .ColorSpace =_ab .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_deac .ColorSpace =_ab .MakeName ("\u0043\u004d\u0059\u004b");}else {_gd .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_e .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_deac .BitsPerComponent =_ab .MakeInteger (img .BitsPerComponent );_deac .Width =_ab .MakeInteger (img .Width );_deac .Height =_ab .MakeInteger (img .Height );_aeb ,_fabdb :=encoder .EncodeBytes (img .Data );if _fabdb !=nil {return nil ,_fabdb ;};_deac ._aege =_aeb ;_ade :=encoder .GetFilterName ();if _ade !=_ab .StreamEncodingFilterNameRaw {_deac .Filter =_ab .MakeName (_ade );};return &_deac ,nil ;};func (_aea *ContentStreamParser )parseOperand ()(*_ab .PdfObjectString ,error ){var _efed []byte ;for {_cdde ,_aab :=_aea ._begg .Peek (1);if _aab !=nil {return _ab .MakeString (string (_efed )),_aab ;};if _ab .IsDelimiter (_cdde [0]){break ;};if _ab .IsWhiteSpace (_cdde [0]){break ;};_adce ,_ :=_aea ._begg .ReadByte ();_efed =append (_efed ,_adce );};return _ab .MakeString (string (_efed )),nil ;};func (_fceg *ContentStreamProcessor )handleCommand_SCN (_eced *ContentStreamOperation ,_dff *_geb .PdfPageResources )error {_cbcf :=_fceg ._afc .ColorspaceStroking ;if !_bfc (_cbcf ){if len (_eced .Params )!=_cbcf .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_eced .Params ),_cbcf );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_aecf ,_dcbf :=_cbcf .ColorFromPdfObjects (_eced .Params );if _dcbf !=nil {return _dcbf ;};_fceg ._afc .ColorStroking =_aecf ;return nil ;};func _fed (_aac *ContentStreamInlineImage )(*_ab .DCTEncoder ,error ){_bdg :=_ab .NewDCTEncoder ();_dda :=_fg .NewReader (_aac ._aege );_cff ,_add :=_gf .DecodeConfig (_dda );if _add !=nil {_gd .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_add );return nil ,_add ;};switch _cff .ColorModel {case _ge .RGBAModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =3;case _ge .RGBA64Model :_bdg .BitsPerComponent =16;_bdg .ColorComponents =3;case _ge .GrayModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =1;case _ge .Gray16Model :_bdg .BitsPerComponent =16;_bdg .ColorComponents =1;case _ge .CMYKModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =4;case _ge .YCbCrModel :_bdg .BitsPerComponent =8;_bdg .ColorComponents =3;default:return nil ,_e .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_bdg .Width =_cff .Width ;_bdg .Height =_cff .Height ;_gd .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_bdg );return _bdg ,nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_deg *ContentCreator )Add_TJ (vals ..._ab .PdfObject )*ContentCreator {_fgef :=ContentStreamOperation {};_fgef .Operand ="\u0054\u004a";_fgef .Params =[]_ab .PdfObject {_ab .MakeArray (vals ...)};_deg ._ba =append (_deg ._ba ,&_fgef );return _deg ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gaa *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_dc :=ContentStreamOperation {};_dc .Operand ="\u006d";_dc .Params =_gbef ([]float64 {x ,y });_gaa ._ba =append (_gaa ._ba ,&_dc );return _gaa ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_agff *ContentCreator )Add_ET ()*ContentCreator {_aceg :=ContentStreamOperation {};_aceg .Operand ="\u0045\u0054";_agff ._ba =append (_agff ._ba ,&_aceg );return _agff ;};

// GetEncoder returns the encoder of the inline image.
func (_dagd *ContentStreamInlineImage )GetEncoder ()(_ab .StreamEncoder ,error ){return _eaae (_dagd )};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ed *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_ceg :=ContentStreamOperation {};_ceg .Operand ="\u0063";_ceg .Params =_gbef ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_ed ._ba =append (_ed ._ba ,&_ceg );return _ed ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_dcba GraphicStateStack ;_eeag []*ContentStreamOperation ;_afc GraphicsState ;_ggfg []handlerEntry ;_abd int ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bb *ContentCreator )Add_q ()*ContentCreator {_dba :=ContentStreamOperation {};_dba .Operand ="\u0071";_bb ._ba =append (_bb ._ba ,&_dba );return _bb ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cdc *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_gdcg :=ContentStreamOperation {};_gdcg .Operand ="\u004d";_gdcg .Params =_gbef ([]float64 {miterlimit });_cdc ._ba =append (_cdc ._ba ,&_gdcg );return _cdc ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_acfa *ContentCreator )Add_EMC ()*ContentCreator {_eec :=ContentStreamOperation {};_eec .Operand ="\u0045\u004d\u0043";_acfa ._ba =append (_acfa ._ba ,&_eec );return _acfa ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_aaf *ContentCreator )Wrap (){_aaf ._ba .WrapIfNeeded ()};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_bbg *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_dceb :=handlerEntry {};_dceb .Condition =condition ;_dceb .Operand =operand ;_dceb .Handler =handler ;_bbg ._ggfg =append (_bbg ._ggfg ,_dceb );};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ddcg *ContentCreator )Add_b_starred ()*ContentCreator {_dfag :=ContentStreamOperation {};_dfag .Operand ="\u0062\u002a";_ddcg ._ba =append (_ddcg ._ba ,&_dfag );return _ddcg ;};func (_bbaf *ContentStreamProcessor )handleCommand_RG (_fadb *ContentStreamOperation ,_cbfb *_geb .PdfPageResources )error {_ffbf :=_geb .NewPdfColorspaceDeviceRGB ();if len (_fadb .Params )!=_ffbf .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fadb .Params ),_ffbf );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bfa ,_fgfd :=_ffbf .ColorFromPdfObjects (_fadb .Params );if _fgfd !=nil {return _fgfd ;};_bbaf ._afc .ColorspaceStroking =_ffbf ;_bbaf ._afc .ColorStroking =_bfa ;return nil ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ebg *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_gede :=ContentStreamOperation {};_gede .Operand ="\u0054\u007a";_gede .Params =_gbef ([]float64 {scale });_ebg ._ba =append (_ebg ._ba ,&_gede );return _ebg ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Parse parses all commands in content stream, returning a list of operation data.
func (_cbf *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_fbe :=ContentStreamOperations {};for {_gadc :=ContentStreamOperation {};for {_ddcea ,_cgbg ,_dcbg :=_cbf .parseObject ();if _dcbg !=nil {if _dcbg ==_g .EOF {return &_fbe ,nil ;};return &_fbe ,_dcbg ;};if _cgbg {_gadc .Operand ,_ =_ab .GetStringVal (_ddcea );_fbe =append (_fbe ,&_gadc );break ;}else {_gadc .Params =append (_gadc .Params ,_ddcea );};};if _gadc .Operand =="\u0042\u0049"{_cbgg ,_ccag :=_cbf .ParseInlineImage ();if _ccag !=nil {return &_fbe ,_ccag ;};_gadc .Params =append (_gadc .Params ,_cbgg );};};};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eff *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_ceca :=ContentStreamOperation {};_ceca .Operand ="\u0054\u0063";_ceca .Params =_gbef ([]float64 {charSpace });_eff ._ba =append (_eff ._ba ,&_ceca );return _eff ;};func (_gedg *ContentStreamProcessor )handleCommand_k (_fcaa *ContentStreamOperation ,_baae *_geb .PdfPageResources )error {_ffcb :=_geb .NewPdfColorspaceDeviceCMYK ();if len (_fcaa .Params )!=_ffcb .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fcaa .Params ),_ffcb );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gbgc ,_bbfb :=_ffcb .ColorFromPdfObjects (_fcaa .Params );if _bbfb !=nil {return _bbfb ;};_gedg ._afc .ColorspaceNonStroking =_ffcb ;_gedg ._afc .ColorNonStroking =_gbgc ;return nil ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_cgdg *ContentStreamOperation ,_efde GraphicsState ,_ebc *_geb .PdfPageResources )error ;

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ggbe *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_de :=ContentStreamOperation {};_de .Operand ="\u0064";_de .Params =[]_ab .PdfObject {};_de .Params =append (_de .Params ,_ab .MakeArrayFromIntegers64 (dashArray ));_de .Params =append (_de .Params ,_ab .MakeInteger (dashPhase ));_ggbe ._ba =append (_ggbe ._ba ,&_de );return _ggbe ;};

// Scale applies x-y scaling to the transformation matrix.
func (_fce *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _fce .Add_cm (sx ,0,0,sy ,0,0);};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gbf *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_bga :=ContentStreamOperation {};_bga .Operand ="\u0054\u006d";_bga .Params =_gbef ([]float64 {a ,b ,c ,d ,e ,f });_gbf ._ba =append (_gbf ._ba ,&_bga );return _gbf ;};func (_gfd *ContentStreamParser )parseBool ()(_ab .PdfObjectBool ,error ){_cdbd ,_becd :=_gfd ._begg .Peek (4);if _becd !=nil {return _ab .PdfObjectBool (false ),_becd ;};if (len (_cdbd )>=4)&&(string (_cdbd [:4])=="\u0074\u0072\u0075\u0065"){_gfd ._begg .Discard (4);return _ab .PdfObjectBool (true ),nil ;};_cdbd ,_becd =_gfd ._begg .Peek (5);if _becd !=nil {return _ab .PdfObjectBool (false ),_becd ;};if (len (_cdbd )>=5)&&(string (_cdbd [:5])=="\u0066\u0061\u006cs\u0065"){_gfd ._begg .Discard (5);return _ab .PdfObjectBool (false ),nil ;};return _ab .PdfObjectBool (false ),_e .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func _bgfb (_adf string )bool {_ ,_ddg :=_egdc [_adf ];return _ddg };

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_ca *ContentCreator )Bytes ()[]byte {return _ca ._ba .Bytes ()};func _beec (_ddga []_ab .PdfObjectString )[]_ab .PdfObject {var _ffdb []_ab .PdfObject ;for _ ,_fcegf :=range _ddga {_ffdb =append (_ffdb ,_ab .MakeString (_fcegf .Str ()));};return _ffdb ;};func (_defe *ContentStreamParser )parseNumber ()(_ab .PdfObject ,error ){return _ab .ParseNumber (_defe ._begg );};func (_gab *ContentStreamParser )parseName ()(_ab .PdfObjectName ,error ){_aaeb :="";_gcec :=false ;for {_aega ,_cbe :=_gab ._begg .Peek (1);if _cbe ==_g .EOF {break ;};if _cbe !=nil {return _ab .PdfObjectName (_aaeb ),_cbe ;};if !_gcec {if _aega [0]=='/'{_gcec =true ;_gab ._begg .ReadByte ();}else {_gd .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_aega ,_aega );return _ab .PdfObjectName (_aaeb ),_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_aega [0]);};}else {if _ab .IsWhiteSpace (_aega [0]){break ;}else if (_aega [0]=='/')||(_aega [0]=='[')||(_aega [0]=='(')||(_aega [0]==']')||(_aega [0]=='<')||(_aega [0]=='>'){break ;}else if _aega [0]=='#'{_acaca ,_abae :=_gab ._begg .Peek (3);if _abae !=nil {return _ab .PdfObjectName (_aaeb ),_abae ;};_gab ._begg .Discard (3);_cba ,_abae :=_b .DecodeString (string (_acaca [1:3]));if _abae !=nil {return _ab .PdfObjectName (_aaeb ),_abae ;};_aaeb +=string (_cba );}else {_cbggd ,_ :=_gab ._begg .ReadByte ();_aaeb +=string (_cbggd );};};};return _ab .PdfObjectName (_aaeb ),nil ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dbf *ContentCreator )Add_Tr (render int64 )*ContentCreator {_bge :=ContentStreamOperation {};_bge .Operand ="\u0054\u0072";_bge .Params =_aabc ([]int64 {render });_dbf ._ba =append (_dbf ._ba ,&_bge );return _dbf ;};func (_aecd *ContentStreamParser )skipSpaces ()(int ,error ){_faad :=0;for {_fecf ,_eggf :=_aecd ._begg .Peek (1);if _eggf !=nil {return 0,_eggf ;};if _ab .IsWhiteSpace (_fecf [0]){_aecd ._begg .ReadByte ();_faad ++;}else {break ;};};return _faad ,nil ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_af *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_bd :=ContentStreamOperation {};_bd .Operand ="\u0072\u0065";_bd .Params =_gbef ([]float64 {x ,y ,width ,height });_af ._ba =append (_af ._ba ,&_bd );return _af ;};

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ecf *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_aagd :=ContentStreamOperation {};_aagd .Operand ="\u0053\u0043\u004e";_aagd .Params =_gbef (c );_ecf ._ba =append (_ecf ._ba ,&_aagd );return _ecf ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ebd *ContentCreator )Add_S ()*ContentCreator {_afb :=ContentStreamOperation {};_afb .Operand ="\u0053";_ebd ._ba =append (_ebd ._ba ,&_afb );return _ebd ;};func _cbg (_fgc *ContentStreamInlineImage ,_bbe *_ab .PdfObjectDictionary )(*_ab .FlateEncoder ,error ){_daa :=_ab .NewFlateEncoder ();if _fgc ._age !=nil {_daa .SetImage (_fgc ._age );};if _bbe ==nil {_bf :=_fgc .DecodeParms ;if _bf !=nil {_ggf ,_ggbea :=_ab .GetDict (_bf );if !_ggbea {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_bf );return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_bbe =_ggf ;};};if _bbe ==nil {return _daa ,nil ;};_gd .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_bbe .String ());_agfg :=_bbe .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _agfg ==nil {_gd .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_ada ,_aba :=_agfg .(*_ab .PdfObjectInteger );if !_aba {_gd .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_agfg );return nil ,_f .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_daa .Predictor =int (*_ada );};_agfg =_bbe .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _agfg !=nil {_cab ,_gfa :=_agfg .(*_ab .PdfObjectInteger );if !_gfa {_gd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_f .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_daa .BitsPerComponent =int (*_cab );};if _daa .Predictor > 1{_daa .Columns =1;_agfg =_bbe .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _agfg !=nil {_defb ,_dde :=_agfg .(*_ab .PdfObjectInteger );if !_dde {return nil ,_f .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_daa .Columns =int (*_defb );};_daa .Colors =1;_cacc :=_bbe .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _cacc !=nil {_cdca ,_eeg :=_cacc .(*_ab .PdfObjectInteger );if !_eeg {return nil ,_f .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_daa .Colors =int (*_cdca );};};return _daa ,nil ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_faa *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_agb :=ContentStreamOperation {};_agb .Operand ="\u004a";_agb .Params =_bfe ([]_ab .PdfObjectName {_ab .PdfObjectName (lineCapStyle )});_faa ._ba =append (_faa ._ba ,&_agb );return _faa ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gff *ContentCreator )Add_scn_pattern (name _ab .PdfObjectName ,c ...float64 )*ContentCreator {_dge :=ContentStreamOperation {};_dge .Operand ="\u0073\u0063\u006e";_dge .Params =_gbef (c );_dge .Params =append (_dge .Params ,_ab .MakeName (string (name )));_gff ._ba =append (_gff ._ba ,&_dge );return _gff ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cdcg *ContentCreator )Add_SCN_pattern (name _ab .PdfObjectName ,c ...float64 )*ContentCreator {_eed :=ContentStreamOperation {};_eed .Operand ="\u0053\u0043\u004e";_eed .Params =_gbef (c );_eed .Params =append (_eed .Params ,_ab .MakeName (string (name )));_cdcg ._ba =append (_cdcg ._ba ,&_eed );return _cdcg ;};func (_facg *ContentStreamProcessor )handleCommand_scn (_dgb *ContentStreamOperation ,_ebdb *_geb .PdfPageResources )error {_fad :=_facg ._afc .ColorspaceNonStroking ;if !_bfc (_fad ){if len (_dgb .Params )!=_fad .GetNumComponents (){_gd .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_gd .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dgb .Params ),_fad );return _e .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_dgbb ,_ggbce :=_fad .ColorFromPdfObjects (_dgb .Params );if _ggbce !=nil {_gd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_dgb .Params ,_fad );return _ggbce ;};_facg ._afc .ColorNonStroking =_dgbb ;return nil ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ccb *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_aae :=ContentStreamOperation {};_aae .Operand ="\u006a";_aae .Params =_bfe ([]_ab .PdfObjectName {_ab .PdfObjectName (lineJoinStyle )});_ccb ._ba =append (_ccb ._ba ,&_aae );return _ccb ;};func (_aga *ContentStreamProcessor )getInitialColor (_bef _geb .PdfColorspace )(_geb .PdfColor ,error ){switch _feb :=_bef .(type ){case *_geb .PdfColorspaceDeviceGray :return _geb .NewPdfColorDeviceGray (0.0),nil ;case *_geb .PdfColorspaceDeviceRGB :return _geb .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_geb .PdfColorspaceDeviceCMYK :return _geb .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_geb .PdfColorspaceCalGray :return _geb .NewPdfColorCalGray (0.0),nil ;case *_geb .PdfColorspaceCalRGB :return _geb .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_geb .PdfColorspaceLab :_bgce :=0.0;_eege :=0.0;_ffab :=0.0;if _feb .Range [0]> 0{_bgce =_feb .Range [0];};if _feb .Range [2]> 0{_eege =_feb .Range [2];};return _geb .NewPdfColorLab (_bgce ,_eege ,_ffab ),nil ;case *_geb .PdfColorspaceICCBased :if _feb .Alternate ==nil {_gd .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_feb .N );if _feb .N ==1{_gd .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _aga .getInitialColor (_geb .NewPdfColorspaceDeviceGray ());}else if _feb .N ==3{_gd .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _aga .getInitialColor (_geb .NewPdfColorspaceDeviceRGB ());}else if _feb .N ==4{_gd .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _aga .getInitialColor (_geb .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_e .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _aga .getInitialColor (_feb .Alternate );case *_geb .PdfColorspaceSpecialIndexed :if _feb .Base ==nil {return nil ,_e .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _aga .getInitialColor (_feb .Base );case *_geb .PdfColorspaceSpecialSeparation :if _feb .AlternateSpace ==nil {return nil ,_e .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _aga .getInitialColor (_feb .AlternateSpace );case *_geb .PdfColorspaceDeviceN :if _feb .AlternateSpace ==nil {return nil ,_e .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _aga .getInitialColor (_feb .AlternateSpace );case *_geb .PdfColorspaceSpecialPattern :return nil ,nil ;};_gd .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bef );return nil ,_e .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_gfbf :=ContentStreamProcessor {};_gfbf ._dcba =GraphicStateStack {};_cdaa :=GraphicsState {};_gfbf ._afc =_cdaa ;_gfbf ._ggfg =[]handlerEntry {};_gfbf ._abd =0;_gfbf ._eeag =ops ;return &_gfbf ;};