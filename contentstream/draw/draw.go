//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_g "fmt";_b "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/internal/transform";_cd "github.com/unidoc/unipdf/v3/model";_c "math";);

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_dde Line )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){_deb ,_aeec :=_dde .X1 ,_dde .X2 ;_bea ,_baa :=_dde .Y1 ,_dde .Y2 ;_gegc :=_baa -_bea ;_bag :=_aeec -_deb ;_ddg :=_c .Atan2 (_gegc ,_bag );L :=_c .Sqrt (_c .Pow (_bag ,2.0)+_c .Pow (_gegc ,2.0));
_gggf :=_dde .LineWidth ;_bf :=_c .Pi ;_bgg :=1.0;if _bag < 0{_bgg *=-1.0;};if _gegc < 0{_bgg *=-1.0;};VsX :=_bgg *(-_gggf /2*_c .Cos (_ddg +_bf /2));VsY :=_bgg *(-_gggf /2*_c .Sin (_ddg +_bf /2)+_gggf *_c .Sin (_ddg +_bf /2));V1X :=VsX +_gggf /2*_c .Cos (_ddg +_bf /2);
V1Y :=VsY +_gggf /2*_c .Sin (_ddg +_bf /2);V2X :=VsX +_gggf /2*_c .Cos (_ddg +_bf /2)+L *_c .Cos (_ddg );V2Y :=VsY +_gggf /2*_c .Sin (_ddg +_bf /2)+L *_c .Sin (_ddg );V3X :=VsX +_gggf /2*_c .Cos (_ddg +_bf /2)+L *_c .Cos (_ddg )+_gggf *_c .Cos (_ddg -_bf /2);
V3Y :=VsY +_gggf /2*_c .Sin (_ddg +_bf /2)+L *_c .Sin (_ddg )+_gggf *_c .Sin (_ddg -_bf /2);V4X :=VsX +_gggf /2*_c .Cos (_ddg -_bf /2);V4Y :=VsY +_gggf /2*_c .Sin (_ddg -_bf /2);_edd :=NewPath ();_edd =_edd .AppendPoint (NewPoint (V1X ,V1Y ));_edd =_edd .AppendPoint (NewPoint (V2X ,V2Y ));
_edd =_edd .AppendPoint (NewPoint (V3X ,V3Y ));_edd =_edd .AppendPoint (NewPoint (V4X ,V4Y ));_acf :=_dde .LineEndingStyle1 ;_cdfe :=_dde .LineEndingStyle2 ;_bab :=3*_gggf ;_gdc :=3*_gggf ;_cgg :=(_gdc -_gggf )/2;if _cdfe ==LineEndingStyleArrow {_cgd :=_edd .GetPointNumber (2);
_eec :=NewVectorPolar (_bab ,_ddg +_bf );_fbf :=_cgd .AddVector (_eec );_gac :=NewVectorPolar (_gdc /2,_ddg +_bf /2);_bbf :=NewVectorPolar (_bab ,_ddg );_fee :=NewVectorPolar (_cgg ,_ddg +_bf /2);_eab :=_fbf .AddVector (_fee );_fca :=_bbf .Add (_gac .Flip ());
_gcf :=_eab .AddVector (_fca );_dce :=_gac .Scale (2).Flip ().Add (_fca .Flip ());_bge :=_gcf .AddVector (_dce );_ged :=_fbf .AddVector (NewVectorPolar (_gggf ,_ddg -_bf /2));_dag :=NewPath ();_dag =_dag .AppendPoint (_edd .GetPointNumber (1));_dag =_dag .AppendPoint (_fbf );
_dag =_dag .AppendPoint (_eab );_dag =_dag .AppendPoint (_gcf );_dag =_dag .AppendPoint (_bge );_dag =_dag .AppendPoint (_ged );_dag =_dag .AppendPoint (_edd .GetPointNumber (4));_edd =_dag ;};if _acf ==LineEndingStyleArrow {_bdg :=_edd .GetPointNumber (1);
_agc :=_edd .GetPointNumber (_edd .Length ());_egg :=NewVectorPolar (_gggf /2,_ddg +_bf +_bf /2);_acd :=_bdg .AddVector (_egg );_abb :=NewVectorPolar (_bab ,_ddg ).Add (NewVectorPolar (_gdc /2,_ddg +_bf /2));_fcg :=_acd .AddVector (_abb );_def :=NewVectorPolar (_cgg ,_ddg -_bf /2);
_gcgd :=_fcg .AddVector (_def );_aag :=NewVectorPolar (_bab ,_ddg );_ebe :=_agc .AddVector (_aag );_cdc :=NewVectorPolar (_cgg ,_ddg +_bf +_bf /2);_ff :=_ebe .AddVector (_cdc );_ca :=_acd ;_beac :=NewPath ();_beac =_beac .AppendPoint (_acd );_beac =_beac .AppendPoint (_fcg );
_beac =_beac .AppendPoint (_gcgd );for _ ,_dfd :=range _edd .Points [1:len (_edd .Points )-1]{_beac =_beac .AppendPoint (_dfd );};_beac =_beac .AppendPoint (_ebe );_beac =_beac .AppendPoint (_ff );_beac =_beac .AppendPoint (_ca );_edd =_beac ;};_bcc :=_b .NewContentCreator ();
_bcc .Add_q ().SetNonStrokingColor (_dde .LineColor );if len (gsName )> 1{_bcc .Add_gs (_d .PdfObjectName (gsName ));};_edd =_edd .Offset (_dde .X1 ,_dde .Y1 );_gga :=_edd .GetBoundingBox ();DrawPathWithCreator (_edd ,_bcc );if _dde .LineStyle ==LineStyleDashed {_bcc .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_bcc .Add_f ().Add_Q ();};return _bcc .Bytes (),_gga .ToPdfRectangle (),nil ;};

// Offset shifts the Bezier path with the specified offsets.
func (_dc CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _ec ,_gde :=range _dc .Curves {_dc .Curves [_ec ]=_gde .AddOffsetXY (offX ,offY );};return _dc ;};

// Copy returns a clone of the path.
func (_gad Path )Copy ()Path {_gcg :=Path {};_gcg .Points =append (_gcg .Points ,_gad .Points ...);return _gcg ;};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _cd .PdfColor ;BorderEnabled bool ;BorderColor _cd .PdfColor ;BorderWidth float64 ;};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_fbbc Rectangle )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){_gae :=NewPath ();_gae =_gae .AppendPoint (NewPoint (0,0));_gae =_gae .AppendPoint (NewPoint (0,_fbbc .Height ));_gae =_gae .AppendPoint (NewPoint (_fbbc .Width ,_fbbc .Height ));
_gae =_gae .AppendPoint (NewPoint (_fbbc .Width ,0));_gae =_gae .AppendPoint (NewPoint (0,0));if _fbbc .X !=0||_fbbc .Y !=0{_gae =_gae .Offset (_fbbc .X ,_fbbc .Y );};_aee :=_b .NewContentCreator ();_aee .Add_q ();if _fbbc .FillEnabled {_aee .SetNonStrokingColor (_fbbc .FillColor );
};if _fbbc .BorderEnabled {_aee .SetStrokingColor (_fbbc .BorderColor );_aee .Add_w (_fbbc .BorderWidth );};if len (gsName )> 1{_aee .Add_gs (_d .PdfObjectName (gsName ));};DrawPathWithCreator (_gae ,_aee );_aee .Add_h ();if _fbbc .FillEnabled &&_fbbc .BorderEnabled {_aee .Add_B ();
}else if _fbbc .FillEnabled {_aee .Add_f ();}else if _fbbc .BorderEnabled {_aee .Add_S ();};_aee .Add_Q ();return _aee .Bytes (),_gae .GetBoundingBox ().ToPdfRectangle (),nil ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_cbg :=Vector {};_cbg .Dx =dx ;_cbg .Dy =dy ;return _cbg };

// AppendCurve appends the specified Bezier curve to the path.
func (_gd CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_gd .Curves =append (_gd .Curves ,curve );return _gd ;};

// Add adds the specified vector to the current one and returns the result.
func (_gcb Vector )Add (other Vector )Vector {_gcb .Dx +=other .Dx ;_gcb .Dy +=other .Dy ;return _gcb };

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _cd .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _cd .PdfColor ;Opacity float64 ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _cd .PdfColor ;FillEnabled bool ;FillColor _cd .PdfColor ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_aab Rectangle )ToPdfRectangle ()*_cd .PdfRectangle {return &_cd .PdfRectangle {Llx :_aab .X ,Lly :_aab .Y ,Urx :_aab .X +_aab .Width ,Ury :_aab .Y +_aab .Height };};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_b .ContentCreator ){for _gcgdf ,_fdb :=range bpath .Curves {if _gcgdf ==0{creator .Add_m (_fdb .P0 .X ,_fdb .P0 .Y );};creator .Add_c (_fdb .P1 .X ,_fdb .P1 .Y ,_fdb .P2 .X ,_fdb .P2 .Y ,_fdb .P3 .X ,_fdb .P3 .Y );
};};

// Offset shifts the path with the specified offsets.
func (_af Path )Offset (offX ,offY float64 )Path {for _bc ,_dd :=range _af .Points {_af .Points [_bc ]=_dd .Add (offX ,offY );};return _af ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_ga CubicBezierPath )GetBoundingBox ()Rectangle {_df :=Rectangle {};_dg :=0.0;_eg :=0.0;_dfb :=0.0;_gc :=0.0;for _ggg ,_aa :=range _ga .Curves {_db :=_aa .GetBounds ();if _ggg ==0{_dg =_db .Llx ;_eg =_db .Urx ;_dfb =_db .Lly ;_gc =_db .Ury ;continue ;
};if _db .Llx < _dg {_dg =_db .Llx ;};if _db .Urx > _eg {_eg =_db .Urx ;};if _db .Lly < _dfb {_dfb =_db .Lly ;};if _db .Ury > _gc {_gc =_db .Ury ;};};_df .X =_dg ;_df .Y =_dfb ;_df .Width =_eg -_dg ;_df .Height =_gc -_dfb ;return _df ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_da BoundingBox )ToPdfRectangle ()*_cd .PdfRectangle {return &_cd .PdfRectangle {Llx :_da .X ,Lly :_da .Y ,Urx :_da .X +_da .Width ,Ury :_da .Y +_da .Height };};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_egdf Circle )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){_aaf :=_egdf .Width /2;_eef :=_egdf .Height /2;if _egdf .BorderEnabled {_aaf -=_egdf .BorderWidth /2;_eef -=_egdf .BorderWidth /2;};_cff :=0.551784;_de :=_aaf *_cff ;_ab :=_eef *_cff ;
_eb :=NewCubicBezierPath ();_eb =_eb .AppendCurve (NewCubicBezierCurve (-_aaf ,0,-_aaf ,_ab ,-_de ,_eef ,0,_eef ));_eb =_eb .AppendCurve (NewCubicBezierCurve (0,_eef ,_de ,_eef ,_aaf ,_ab ,_aaf ,0));_eb =_eb .AppendCurve (NewCubicBezierCurve (_aaf ,0,_aaf ,-_ab ,_de ,-_eef ,0,-_eef ));
_eb =_eb .AppendCurve (NewCubicBezierCurve (0,-_eef ,-_de ,-_eef ,-_aaf ,-_ab ,-_aaf ,0));_eb =_eb .Offset (_aaf ,_eef );if _egdf .BorderEnabled {_eb =_eb .Offset (_egdf .BorderWidth /2,_egdf .BorderWidth /2);};if _egdf .X !=0||_egdf .Y !=0{_eb =_eb .Offset (_egdf .X ,_egdf .Y );
};_geg :=_b .NewContentCreator ();_geg .Add_q ();if _egdf .FillEnabled {_geg .SetNonStrokingColor (_egdf .FillColor );};if _egdf .BorderEnabled {_geg .SetStrokingColor (_egdf .BorderColor );_geg .Add_w (_egdf .BorderWidth );};if len (gsName )> 1{_geg .Add_gs (_d .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_eb ,_geg );_geg .Add_h ();if _egdf .FillEnabled &&_egdf .BorderEnabled {_geg .Add_B ();}else if _egdf .FillEnabled {_geg .Add_f ();}else if _egdf .BorderEnabled {_geg .Add_S ();};_geg .Add_Q ();_gdf :=_eb .GetBoundingBox ();
if _egdf .BorderEnabled {_gdf .Height +=_egdf .BorderWidth ;_gdf .Width +=_egdf .BorderWidth ;_gdf .X -=_egdf .BorderWidth /2;_gdf .Y -=_egdf .BorderWidth /2;};return _geg .Bytes (),_gdf .ToPdfRectangle (),nil ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_fe Point )Rotate (theta float64 )Point {_ag :=_f .NewPoint (_fe .X ,_fe .Y ).Rotate (theta );return NewPoint (_ag .X ,_ag .Y );};

// AddVector adds vector to a point.
func (_gfb Point )AddVector (v Vector )Point {_gfb .X +=v .Dx ;_gfb .Y +=v .Dy ;return _gfb };

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// FlipY flips the sign of the Dy component of the vector.
func (_bef Vector )FlipY ()Vector {_bef .Dy =-_bef .Dy ;return _bef };

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_ac CurvePolygon )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){_dac :=_b .NewContentCreator ();_dac .Add_q ();_ac .FillEnabled =_ac .FillEnabled &&_ac .FillColor !=nil ;if _ac .FillEnabled {_dac .SetNonStrokingColor (_ac .FillColor );
};_ac .BorderEnabled =_ac .BorderEnabled &&_ac .BorderColor !=nil ;if _ac .BorderEnabled {_dac .SetStrokingColor (_ac .BorderColor );_dac .Add_w (_ac .BorderWidth );};if len (gsName )> 1{_dac .Add_gs (_d .PdfObjectName (gsName ));};_aaff :=NewCubicBezierPath ();
for _ ,_gee :=range _ac .Rings {for _ced ,_bec :=range _gee {if _ced ==0{_dac .Add_m (_bec .P0 .X ,_bec .P0 .Y );}else {_dac .Add_l (_bec .P0 .X ,_bec .P0 .Y );};_dac .Add_c (_bec .P1 .X ,_bec .P1 .Y ,_bec .P2 .X ,_bec .P2 .Y ,_bec .P3 .X ,_bec .P3 .Y );
_aaff =_aaff .AppendCurve (_bec );};_dac .Add_h ();};if _ac .FillEnabled &&_ac .BorderEnabled {_dac .Add_B ();}else if _ac .FillEnabled {_dac .Add_f ();}else if _ac .BorderEnabled {_dac .Add_S ();};_dac .Add_Q ();return _dac .Bytes (),_aaff .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// GetBoundingBox returns the bounding box of the path.
func (_gdea Path )GetBoundingBox ()BoundingBox {_ee :=BoundingBox {};_bb :=0.0;_ge :=0.0;_fd :=0.0;_fdf :=0.0;for _ba ,_bg :=range _gdea .Points {if _ba ==0{_bb =_bg .X ;_ge =_bg .X ;_fd =_bg .Y ;_fdf =_bg .Y ;continue ;};if _bg .X < _bb {_bb =_bg .X ;
};if _bg .X > _ge {_ge =_bg .X ;};if _bg .Y < _fd {_fd =_bg .Y ;};if _bg .Y > _fdf {_fdf =_bg .Y ;};};_ee .X =_bb ;_ee .Y =_fd ;_ee .Width =_ge -_bb ;_ee .Height =_fdf -_fd ;return _ee ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _cd .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// Copy returns a clone of the Bezier path.
func (_cb CubicBezierPath )Copy ()CubicBezierPath {_ce :=CubicBezierPath {};_ce .Curves =append (_ce .Curves ,_cb .Curves ...);return _ce ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _cd .PdfColor ;LineWidth float64 ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_cg :=CubicBezierCurve {};_cg .P0 =NewPoint (x0 ,y0 );_cg .P1 =NewPoint (x1 ,y1 );_cg .P2 =NewPoint (x2 ,y2 );_cg .P3 =NewPoint (x3 ,y3 );return _cg ;};

// Scale scales the vector by the specified factor.
func (_ef Vector )Scale (factor float64 )Vector {_cgfg :=_ef .Magnitude ();_ega :=_ef .GetPolarAngle ();_ef .Dx =factor *_cgfg *_c .Cos (_ega );_ef .Dy =factor *_cgfg *_c .Sin (_ega );return _ef ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _cd .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _cd .PdfColor ;Opacity float64 ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_adb Polyline )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){if _adb .LineColor ==nil {_adb .LineColor =_cd .NewPdfColorDeviceRGB (0,0,0);};_egdc :=NewPath ();for _ ,_beg :=range _adb .Points {_egdc =_egdc .AppendPoint (_beg );};_fcgc :=_b .NewContentCreator ();
_fcgc .Add_q ().SetStrokingColor (_adb .LineColor ).Add_w (_adb .LineWidth );if len (gsName )> 1{_fcgc .Add_gs (_d .PdfObjectName (gsName ));};DrawPathWithCreator (_egdc ,_fcgc );_fcgc .Add_S ();_fcgc .Add_Q ();return _fcgc .Bytes (),_egdc .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// FlipX flips the sign of the Dx component of the vector.
func (_bcd Vector )FlipX ()Vector {_bcd .Dx =-_bcd .Dx ;return _bcd };

// Magnitude returns the magnitude of the vector.
func (_fead Vector )Magnitude ()float64 {return _c .Sqrt (_c .Pow (_fead .Dx ,2.0)+_c .Pow (_fead .Dy ,2.0));};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_gb :=Vector {};_gb .Dx =b .X -a .X ;_gb .Dy =b .Y -a .Y ;return _gb ;};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_be Path )RemovePoint (number int )Path {if number < 1||number > len (_be .Points ){return _be ;};_dcf :=number -1;_be .Points =append (_be .Points [:_dcf ],_be .Points [_dcf +1:]...);return _be ;};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_aabb BasicLine )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){_afd :=_aabb .LineWidth ;_ecd :=NewPath ();_ecd =_ecd .AppendPoint (NewPoint (_aabb .X1 ,_aabb .Y1 ));_ecd =_ecd .AppendPoint (NewPoint (_aabb .X2 ,_aabb .Y2 ));_ebea :=_b .NewContentCreator ();
_cgf :=_ecd .GetBoundingBox ();DrawPathWithCreator (_ecd ,_ebea );if _aabb .LineStyle ==LineStyleDashed {_ebea .Add_d ([]int64 {1,1},0);};_ebea .SetStrokingColor (_aabb .LineColor ).Add_w (_afd ).Add_S ().Add_Q ();return _ebea .Bytes (),_cgf .ToPdfRectangle (),nil ;
};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _cd .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_ad :=CubicBezierPath {};_ad .Curves =[]CubicBezierCurve {};return _ad ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_ea Polygon )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){_agb :=_b .NewContentCreator ();_agb .Add_q ();_ea .FillEnabled =_ea .FillEnabled &&_ea .FillColor !=nil ;if _ea .FillEnabled {_agb .SetNonStrokingColor (_ea .FillColor );};_ea .BorderEnabled =_ea .BorderEnabled &&_ea .BorderColor !=nil ;
if _ea .BorderEnabled {_agb .SetStrokingColor (_ea .BorderColor );_agb .Add_w (_ea .BorderWidth );};if len (gsName )> 1{_agb .Add_gs (_d .PdfObjectName (gsName ));};_agbb :=NewPath ();for _ ,_fbb :=range _ea .Points {for _bcf ,_dbe :=range _fbb {_agbb =_agbb .AppendPoint (_dbe );
if _bcf ==0{_agb .Add_m (_dbe .X ,_dbe .Y );}else {_agb .Add_l (_dbe .X ,_dbe .Y );};};_agb .Add_h ();};if _ea .FillEnabled &&_ea .BorderEnabled {_agb .Add_B ();}else if _ea .FillEnabled {_agb .Add_f ();}else if _ea .BorderEnabled {_agb .Add_S ();};_agb .Add_Q ();
return _agb .Bytes (),_agbb .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_dae Vector )GetPolarAngle ()float64 {return _c .Atan2 (_dae .Dy ,_dae .Dx )};

// AppendPoint adds the specified point to the path.
func (_egd Path )AppendPoint (point Point )Path {_egd .Points =append (_egd .Points ,point );return _egd };const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Rotate rotates the vector by the specified angle.
func (_geed Vector )Rotate (phi float64 )Vector {_ebf :=_geed .Magnitude ();_cede :=_geed .GetPolarAngle ();return NewVectorPolar (_ebf ,_cede +phi );};func (_dcc Point )String ()string {return _g .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_dcc .X ,_dcc .Y );
};

// Flip changes the sign of the vector: -vector.
func (_gdg Vector )Flip ()Vector {_fea :=_gdg .Magnitude ();_fbd :=_gdg .GetPolarAngle ();_gdg .Dx =_fea *_c .Cos (_fbd +_c .Pi );_gdg .Dy =_fea *_c .Sin (_fbd +_c .Pi );return _gdg ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_cc :=Vector {};_cc .Dx =length *_c .Cos (theta );_cc .Dy =length *_c .Sin (theta );return _cc ;};

// Length returns the number of points in the path.
func (_gdeb Path )Length ()int {return len (_gdeb .Points )};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_cfc Point )Add (dx ,dy float64 )Point {_cfc .X +=dx ;_cfc .Y +=dy ;return _cfc };

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _cd .PdfColor ;BorderEnabled bool ;BorderColor _cd .PdfColor ;BorderWidth float64 ;};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_bd CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_bd .P0 .X +=offX ;_bd .P1 .X +=offX ;_bd .P2 .X +=offX ;_bd .P3 .X +=offX ;_bd .P0 .Y +=offY ;_bd .P1 .Y +=offY ;_bd .P2 .Y +=offY ;_bd .P3 .Y +=offY ;return _bd ;};const (LineStyleSolid LineStyle =0;
LineStyleDashed LineStyle =1;);

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_bdc Path )GetPointNumber (number int )Point {if number < 1||number > len (_bdc .Points ){return Point {};};return _bdc .Points [number -1];};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_ebg PolyBezierCurve )Draw (gsName string )([]byte ,*_cd .PdfRectangle ,error ){if _ebg .BorderColor ==nil {_ebg .BorderColor =_cd .NewPdfColorDeviceRGB (0,0,0);};_ddd :=NewCubicBezierPath ();for _ ,_gfbf :=range _ebg .Curves {_ddd =_ddd .AppendCurve (_gfbf );
};_fa :=_b .NewContentCreator ();_fa .Add_q ();_ebg .FillEnabled =_ebg .FillEnabled &&_ebg .FillColor !=nil ;if _ebg .FillEnabled {_fa .SetNonStrokingColor (_ebg .FillColor );};_fa .SetStrokingColor (_ebg .BorderColor );_fa .Add_w (_ebg .BorderWidth );
if len (gsName )> 1{_fa .Add_gs (_d .PdfObjectName (gsName ));};for _ae ,_aba :=range _ddd .Curves {if _ae ==0{_fa .Add_m (_aba .P0 .X ,_aba .P0 .Y );}else {_fa .Add_l (_aba .P0 .X ,_aba .P0 .Y );};_fa .Add_c (_aba .P1 .X ,_aba .P1 .Y ,_aba .P2 .X ,_aba .P2 .Y ,_aba .P3 .X ,_aba .P3 .Y );
};if _ebg .FillEnabled {_fa .Add_h ();_fa .Add_B ();}else {_fa .Add_S ();};_fa .Add_Q ();return _fa .Bytes (),_ddd .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_ed CubicBezierCurve )GetBounds ()_cd .PdfRectangle {_gf :=_ed .P0 .X ;_cf :=_ed .P0 .X ;_fb :=_ed .P0 .Y ;_gg :=_ed .P0 .Y ;for _a :=0.0;_a <=1.0;_a +=0.001{Rx :=_ed .P0 .X *_c .Pow (1-_a ,3)+_ed .P1 .X *3*_a *_c .Pow (1-_a ,2)+_ed .P2 .X *3*_c .Pow (_a ,2)*(1-_a )+_ed .P3 .X *_c .Pow (_a ,3);
Ry :=_ed .P0 .Y *_c .Pow (1-_a ,3)+_ed .P1 .Y *3*_a *_c .Pow (1-_a ,2)+_ed .P2 .Y *3*_c .Pow (_a ,2)*(1-_a )+_ed .P3 .Y *_c .Pow (_a ,3);if Rx < _gf {_gf =Rx ;};if Rx > _cf {_cf =Rx ;};if Ry < _fb {_fb =Ry ;};if Ry > _gg {_gg =Ry ;};};_cdf :=_cd .PdfRectangle {};
_cdf .Llx =_gf ;_cdf .Lly =_fb ;_cdf .Urx =_cf ;_cdf .Ury =_gg ;return _cdf ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_b .ContentCreator ){for _gge ,_bce :=range path .Points {if _gge ==0{creator .Add_m (_bce .X ,_bce .Y );}else {creator .Add_l (_bce .X ,_bce .Y );};};};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};