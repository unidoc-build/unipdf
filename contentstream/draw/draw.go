//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_b "fmt";_ba "github.com/unidoc/unipdf/v3/contentstream";_g "github.com/unidoc/unipdf/v3/core";_bd "github.com/unidoc/unipdf/v3/internal/transform";_a "github.com/unidoc/unipdf/v3/model";_dc "math";);

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// GetBounds returns the bounding box of the Bezier curve.
func (_f CubicBezierCurve )GetBounds ()_a .PdfRectangle {_e :=_f .P0 .X ;_fd :=_f .P0 .X ;_ca :=_f .P0 .Y ;_bb :=_f .P0 .Y ;for _bf :=0.0;_bf <=1.0;_bf +=0.001{Rx :=_f .P0 .X *_dc .Pow (1-_bf ,3)+_f .P1 .X *3*_bf *_dc .Pow (1-_bf ,2)+_f .P2 .X *3*_dc .Pow (_bf ,2)*(1-_bf )+_f .P3 .X *_dc .Pow (_bf ,3);Ry :=_f .P0 .Y *_dc .Pow (1-_bf ,3)+_f .P1 .Y *3*_bf *_dc .Pow (1-_bf ,2)+_f .P2 .Y *3*_dc .Pow (_bf ,2)*(1-_bf )+_f .P3 .Y *_dc .Pow (_bf ,3);if Rx < _e {_e =Rx ;};if Rx > _fd {_fd =Rx ;};if Ry < _ca {_ca =Ry ;};if Ry > _bb {_bb =Ry ;};};_ec :=_a .PdfRectangle {};_ec .Llx =_e ;_ec .Lly =_ca ;_ec .Urx =_fd ;_ec .Ury =_bb ;return _ec ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_ga PolyBezierCurve )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){if _ga .BorderColor ==nil {_ga .BorderColor =_a .NewPdfColorDeviceRGB (0,0,0);};_dga :=NewCubicBezierPath ();for _ ,_gf :=range _ga .Curves {_dga =_dga .AppendCurve (_gf );};_cg :=_ba .NewContentCreator ();_cg .Add_q ();_ga .FillEnabled =_ga .FillEnabled &&_ga .FillColor !=nil ;if _ga .FillEnabled {_cg .Add_rg (_ga .FillColor .R (),_ga .FillColor .G (),_ga .FillColor .B ());};_cg .Add_RG (_ga .BorderColor .R (),_ga .BorderColor .G (),_ga .BorderColor .B ());_cg .Add_w (_ga .BorderWidth );if len (gsName )> 1{_cg .Add_gs (_g .PdfObjectName (gsName ));};for _ ,_df :=range _dga .Curves {_cg .Add_m (_df .P0 .X ,_df .P0 .Y );_cg .Add_c (_df .P1 .X ,_df .P1 .Y ,_df .P2 .X ,_df .P2 .Y ,_df .P3 .X ,_df .P3 .Y );};if _ga .FillEnabled {_cg .Add_h ();_cg .Add_B ();}else {_cg .Add_S ();};_cg .Add_Q ();return _cg .Bytes (),_dga .GetBoundingBox ().ToPdfRectangle (),nil ;};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_bga Point )Rotate (theta float64 )Point {_eca :=_bd .NewPoint (_bga .X ,_bga .Y ).Rotate (theta );return NewPoint (_eca .X ,_eca .Y );};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_gbd Rectangle )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_cbd :=NewPath ();_cbd =_cbd .AppendPoint (NewPoint (0,0));_cbd =_cbd .AppendPoint (NewPoint (0,_gbd .Height ));_cbd =_cbd .AppendPoint (NewPoint (_gbd .Width ,_gbd .Height ));_cbd =_cbd .AppendPoint (NewPoint (_gbd .Width ,0));_cbd =_cbd .AppendPoint (NewPoint (0,0));if _gbd .X !=0||_gbd .Y !=0{_cbd =_cbd .Offset (_gbd .X ,_gbd .Y );};_cea :=_ba .NewContentCreator ();_cea .Add_q ();if _gbd .FillEnabled {_cea .Add_rg (_gbd .FillColor .R (),_gbd .FillColor .G (),_gbd .FillColor .B ());};if _gbd .BorderEnabled {_cea .Add_RG (_gbd .BorderColor .R (),_gbd .BorderColor .G (),_gbd .BorderColor .B ());_cea .Add_w (_gbd .BorderWidth );};if len (gsName )> 1{_cea .Add_gs (_g .PdfObjectName (gsName ));};DrawPathWithCreator (_cbd ,_cea );_cea .Add_h ();if _gbd .FillEnabled &&_gbd .BorderEnabled {_cea .Add_B ();}else if _gbd .FillEnabled {_cea .Add_f ();}else if _gbd .BorderEnabled {_cea .Add_S ();};_cea .Add_Q ();return _cea .Bytes (),_cbd .GetBoundingBox ().ToPdfRectangle (),nil ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_ag :=CubicBezierPath {};_ag .Curves =[]CubicBezierCurve {};return _ag ;};

// Magnitude returns the magnitude of the vector.
func (_ffa Vector )Magnitude ()float64 {return _dc .Sqrt (_dc .Pow (_ffa .Dx ,2.0)+_dc .Pow (_ffa .Dy ,2.0));};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_ebd Path )RemovePoint (number int )Path {if number < 1||number > len (_ebd .Points ){return _ebd ;};_dce :=number -1;_ebd .Points =append (_ebd .Points [:_dce ],_ebd .Points [_dce +1:]...);return _ebd ;};

// Flip changes the sign of the vector: -vector.
func (_aeg Vector )Flip ()Vector {_babc :=_aeg .Magnitude ();_cdab :=_aeg .GetPolarAngle ();_aeg .Dx =_babc *_dc .Cos (_cdab +_dc .Pi );_aeg .Dy =_babc *_dc .Sin (_cdab +_dc .Pi );return _aeg ;};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_a .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_egg Rectangle )ToPdfRectangle ()*_a .PdfRectangle {return &_a .PdfRectangle {Llx :_egg .X ,Lly :_egg .Y ,Urx :_egg .X +_egg .Width ,Ury :_egg .Y +_egg .Height };};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_de BoundingBox )ToPdfRectangle ()*_a .PdfRectangle {return &_a .PdfRectangle {Llx :_de .X ,Lly :_de .Y ,Urx :_de .X +_de .Width ,Ury :_de .Y +_de .Height };};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_dagc :=Vector {};_dagc .Dx =dx ;_dagc .Dy =dy ;return _dagc };func (_aaa Point )String ()string {return _b .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_aaa .X ,_aaa .Y );};

// AppendPoint adds the specified point to the path.
func (_ee Path )AppendPoint (point Point )Path {_ee .Points =append (_ee .Points ,point );return _ee };

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_bbbe :=Vector {};_bbbe .Dx =b .X -a .X ;_bbbe .Dy =b .Y -a .Y ;return _bbbe ;};

// AddVector adds vector to a point.
func (_gd Point )AddVector (v Vector )Point {_gd .X +=v .Dx ;_gd .Y +=v .Dy ;return _gd };const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_afe :=Vector {};_afe .Dx =length *_dc .Cos (theta );_afe .Dy =length *_dc .Sin (theta );return _afe ;};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_fdc Point )Add (dx ,dy float64 )Point {_fdc .X +=dx ;_fdc .Y +=dy ;return _fdc };

// Scale scales the vector by the specified factor.
func (_bgg Vector )Scale (factor float64 )Vector {_baa :=_bgg .Magnitude ();_bdc :=_bgg .GetPolarAngle ();_bgg .Dx =factor *_baa *_dc .Cos (_bdc );_bgg .Dy =factor *_baa *_dc .Sin (_bdc );return _bgg ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_dced Vector )GetPolarAngle ()float64 {return _dc .Atan2 (_dced .Dy ,_dced .Dx )};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_a .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// Copy returns a clone of the Bezier path.
func (_fg CubicBezierPath )Copy ()CubicBezierPath {_ea :=CubicBezierPath {};_ea .Curves =append (_ea .Curves ,_fg .Curves ...);return _ea ;};

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_aac Path )GetPointNumber (number int )Point {if number < 1||number > len (_aac .Points ){return Point {};};return _aac .Points [number -1];};

// FlipY flips the sign of the Dy component of the vector.
func (_cgd Vector )FlipY ()Vector {_cgd .Dy =-_cgd .Dy ;return _cgd };

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_beff BasicLine )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_dad :=_beff .LineWidth ;_caef :=NewPath ();_caef =_caef .AppendPoint (NewPoint (_beff .X1 ,_beff .Y1 ));_caef =_caef .AppendPoint (NewPoint (_beff .X2 ,_beff .Y2 ));_cgg :=_ba .NewContentCreator ();_gea :=_caef .GetBoundingBox ();DrawPathWithCreator (_caef ,_cgg );if _beff .LineStyle ==LineStyleDashed {_cgg .Add_d ([]int64 {1,1},0);};_cgg .Add_RG (_beff .LineColor .R (),_beff .LineColor .G (),_beff .LineColor .B ()).Add_w (_dad ).Add_S ().Add_Q ();return _cgg .Bytes (),_gea .ToPdfRectangle (),nil ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_c CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_c .P0 .X +=offX ;_c .P1 .X +=offX ;_c .P2 .X +=offX ;_c .P3 .X +=offX ;_c .P0 .Y +=offY ;_c .P1 .Y +=offY ;_c .P2 .Y +=offY ;_c .P3 .Y +=offY ;return _c ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor *_a .PdfColorDeviceRGB ;LineWidth float64 ;};

// Offset shifts the Bezier path with the specified offsets.
func (_bbe CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _aa ,_gb :=range _bbe .Curves {_bbe .Curves [_aa ]=_gb .AddOffsetXY (offX ,offY );};return _bbe ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor *_a .PdfColorDeviceRGB ;BorderEnabled bool ;BorderColor *_a .PdfColorDeviceRGB ;BorderWidth float64 ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_bgc Circle )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_bge :=_bgc .Width /2;_dec :=_bgc .Height /2;if _bgc .BorderEnabled {_bge -=_bgc .BorderWidth /2;_dec -=_bgc .BorderWidth /2;};_bef :=0.551784;_bfd :=_bge *_bef ;_ge :=_dec *_bef ;_dd :=NewCubicBezierPath ();_dd =_dd .AppendCurve (NewCubicBezierCurve (-_bge ,0,-_bge ,_ge ,-_bfd ,_dec ,0,_dec ));_dd =_dd .AppendCurve (NewCubicBezierCurve (0,_dec ,_bfd ,_dec ,_bge ,_ge ,_bge ,0));_dd =_dd .AppendCurve (NewCubicBezierCurve (_bge ,0,_bge ,-_ge ,_bfd ,-_dec ,0,-_dec ));_dd =_dd .AppendCurve (NewCubicBezierCurve (0,-_dec ,-_bfd ,-_dec ,-_bge ,-_ge ,-_bge ,0));_dd =_dd .Offset (_bge ,_dec );if _bgc .BorderEnabled {_dd =_dd .Offset (_bgc .BorderWidth /2,_bgc .BorderWidth /2);};if _bgc .X !=0||_bgc .Y !=0{_dd =_dd .Offset (_bgc .X ,_bgc .Y );};_bbg :=_ba .NewContentCreator ();_bbg .Add_q ();if _bgc .FillEnabled {_bbg .Add_rg (_bgc .FillColor .R (),_bgc .FillColor .G (),_bgc .FillColor .B ());};if _bgc .BorderEnabled {_bbg .Add_RG (_bgc .BorderColor .R (),_bgc .BorderColor .G (),_bgc .BorderColor .B ());_bbg .Add_w (_bgc .BorderWidth );};if len (gsName )> 1{_bbg .Add_gs (_g .PdfObjectName (gsName ));};DrawBezierPathWithCreator (_dd ,_bbg );_bbg .Add_h ();if _bgc .FillEnabled &&_bgc .BorderEnabled {_bbg .Add_B ();}else if _bgc .FillEnabled {_bbg .Add_f ();}else if _bgc .BorderEnabled {_bbg .Add_S ();};_bbg .Add_Q ();_cbc :=_dd .GetBoundingBox ();if _bgc .BorderEnabled {_cbc .Height +=_bgc .BorderWidth ;_cbc .Width +=_bgc .BorderWidth ;_cbc .X -=_bgc .BorderWidth /2;_cbc .Y -=_bgc .BorderWidth /2;};return _bbg .Bytes (),_cbc .ToPdfRectangle (),nil ;};

// Offset shifts the path with the specified offsets.
func (_bg Path )Offset (offX ,offY float64 )Path {for _eg ,_cb :=range _bg .Points {_bg .Points [_eg ]=_cb .Add (offX ,offY );};return _bg ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_af Polygon )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_bfg :=_ba .NewContentCreator ();_bfg .Add_q ();_af .FillEnabled =_af .FillEnabled &&_af .FillColor !=nil ;if _af .FillEnabled {_bfg .Add_rg (_af .FillColor .R (),_af .FillColor .G (),_af .FillColor .B ());};_af .BorderEnabled =_af .BorderEnabled &&_af .BorderColor !=nil ;if _af .BorderEnabled {_bfg .Add_RG (_af .BorderColor .R (),_af .BorderColor .G (),_af .BorderColor .B ());_bfg .Add_w (_af .BorderWidth );};if len (gsName )> 1{_bfg .Add_gs (_g .PdfObjectName (gsName ));};_aab :=NewPath ();for _ ,_deb :=range _af .Points {for _bea ,_aaf :=range _deb {_aab =_aab .AppendPoint (_aaf );if _bea ==0{_bfg .Add_m (_aaf .X ,_aaf .Y );}else {_bfg .Add_l (_aaf .X ,_aaf .Y );};};_bfg .Add_h ();};if _af .FillEnabled &&_af .BorderEnabled {_bfg .Add_B ();}else if _af .FillEnabled {_bfg .Add_f ();}else if _af .BorderEnabled {_bfg .Add_S ();};_bfg .Add_Q ();return _bfg .Bytes (),_aab .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetBoundingBox returns the bounding box of the path.
func (_aed Path )GetBoundingBox ()BoundingBox {_cda :=BoundingBox {};_ad :=0.0;_gc :=0.0;_fa :=0.0;_ecb :=0.0;for _be ,_bdd :=range _aed .Points {if _be ==0{_ad =_bdd .X ;_gc =_bdd .X ;_fa =_bdd .Y ;_ecb =_bdd .Y ;continue ;};if _bdd .X < _ad {_ad =_bdd .X ;};if _bdd .X > _gc {_gc =_bdd .X ;};if _bdd .Y < _fa {_fa =_bdd .Y ;};if _bdd .Y > _ecb {_ecb =_bdd .Y ;};};_cda .X =_ad ;_cda .Y =_fa ;_cda .Width =_gc -_ad ;_cda .Height =_ecb -_fa ;return _cda ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_a .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_a .PdfColorDeviceRGB ;Opacity float64 ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_bad CubicBezierPath )GetBoundingBox ()Rectangle {_cd :=Rectangle {};_cae :=0.0;_eb :=0.0;_gg :=0.0;_eba :=0.0;for _cc ,_aad :=range _bad .Curves {_ae :=_aad .GetBounds ();if _cc ==0{_cae =_ae .Llx ;_eb =_ae .Urx ;_gg =_ae .Lly ;_eba =_ae .Ury ;continue ;};if _ae .Llx < _cae {_cae =_ae .Llx ;};if _ae .Urx > _eb {_eb =_ae .Urx ;};if _ae .Lly < _gg {_gg =_ae .Lly ;};if _ae .Ury > _eba {_eba =_ae .Ury ;};};_cd .X =_cae ;_cd .Y =_gg ;_cd .Width =_eb -_cae ;_cd .Height =_eba -_gg ;return _cd ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_ba .ContentCreator ){for _gbe ,_dgb :=range path .Points {if _gbe ==0{creator .Add_m (_dgb .X ,_dgb .Y );}else {creator .Add_l (_dgb .X ,_dgb .Y );};};};

// Add adds the specified vector to the current one and returns the result.
func (_afb Vector )Add (other Vector )Vector {_afb .Dx +=other .Dx ;_afb .Dy +=other .Dy ;return _afb };

// AppendCurve appends the specified Bezier curve to the path.
func (_ce CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_ce .Curves =append (_ce .Curves ,curve );return _ce ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_ed Polyline )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){if _ed .LineColor ==nil {_ed .LineColor =_a .NewPdfColorDeviceRGB (0,0,0);};_gde :=NewPath ();for _ ,_ade :=range _ed .Points {_gde =_gde .AppendPoint (_ade );};_bbb :=_ba .NewContentCreator ();_bbb .Add_q ();_bbb .Add_RG (_ed .LineColor .R (),_ed .LineColor .G (),_ed .LineColor .B ());_bbb .Add_w (_ed .LineWidth );if len (gsName )> 1{_bbb .Add_gs (_g .PdfObjectName (gsName ));};DrawPathWithCreator (_gde ,_bbb );_bbb .Add_S ();_bbb .Add_Q ();return _bbb .Bytes (),_gde .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Rotate rotates the vector by the specified angle.
func (_cdb Vector )Rotate (phi float64 )Vector {_ccb :=_cdb .Magnitude ();_ef :=_cdb .GetPolarAngle ();return NewVectorPolar (_ccb ,_ef +phi );};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_ba .ContentCreator ){for _cdg ,_ebfa :=range bpath .Curves {if _cdg ==0{creator .Add_m (_ebfa .P0 .X ,_ebfa .P0 .Y );};creator .Add_c (_ebfa .P1 .X ,_ebfa .P1 .Y ,_ebfa .P2 .X ,_ebfa .P2 .Y ,_ebfa .P3 .X ,_ebfa .P3 .Y );};};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_ff Line )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_dfc ,_fdcc :=_ff .X1 ,_ff .X2 ;_bfc ,_abc :=_ff .Y1 ,_ff .Y2 ;_cad :=_abc -_bfc ;_baf :=_fdcc -_dfc ;_dae :=_dc .Atan2 (_cad ,_baf );L :=_dc .Sqrt (_dc .Pow (_baf ,2.0)+_dc .Pow (_cad ,2.0));_bgea :=_ff .LineWidth ;_db :=_dc .Pi ;_cgc :=1.0;if _baf < 0{_cgc *=-1.0;};if _cad < 0{_cgc *=-1.0;};VsX :=_cgc *(-_bgea /2*_dc .Cos (_dae +_db /2));VsY :=_cgc *(-_bgea /2*_dc .Sin (_dae +_db /2)+_bgea *_dc .Sin (_dae +_db /2));V1X :=VsX +_bgea /2*_dc .Cos (_dae +_db /2);V1Y :=VsY +_bgea /2*_dc .Sin (_dae +_db /2);V2X :=VsX +_bgea /2*_dc .Cos (_dae +_db /2)+L *_dc .Cos (_dae );V2Y :=VsY +_bgea /2*_dc .Sin (_dae +_db /2)+L *_dc .Sin (_dae );V3X :=VsX +_bgea /2*_dc .Cos (_dae +_db /2)+L *_dc .Cos (_dae )+_bgea *_dc .Cos (_dae -_db /2);V3Y :=VsY +_bgea /2*_dc .Sin (_dae +_db /2)+L *_dc .Sin (_dae )+_bgea *_dc .Sin (_dae -_db /2);V4X :=VsX +_bgea /2*_dc .Cos (_dae -_db /2);V4Y :=VsY +_bgea /2*_dc .Sin (_dae -_db /2);_cce :=NewPath ();_cce =_cce .AppendPoint (NewPoint (V1X ,V1Y ));_cce =_cce .AppendPoint (NewPoint (V2X ,V2Y ));_cce =_cce .AppendPoint (NewPoint (V3X ,V3Y ));_cce =_cce .AppendPoint (NewPoint (V4X ,V4Y ));_dcb :=_ff .LineEndingStyle1 ;_gdc :=_ff .LineEndingStyle2 ;_ecd :=3*_bgea ;_dgac :=3*_bgea ;_cacc :=(_dgac -_bgea )/2;if _gdc ==LineEndingStyleArrow {_bgce :=_cce .GetPointNumber (2);_fc :=NewVectorPolar (_ecd ,_dae +_db );_fga :=_bgce .AddVector (_fc );_fae :=NewVectorPolar (_dgac /2,_dae +_db /2);_ecg :=NewVectorPolar (_ecd ,_dae );_ece :=NewVectorPolar (_cacc ,_dae +_db /2);_gdg :=_fga .AddVector (_ece );_bc :=_ecg .Add (_fae .Flip ());_dge :=_gdg .AddVector (_bc );_dbg :=_fae .Scale (2).Flip ().Add (_bc .Flip ());_fac :=_dge .AddVector (_dbg );_dcf :=_fga .AddVector (NewVectorPolar (_bgea ,_dae -_db /2));_fe :=NewPath ();_fe =_fe .AppendPoint (_cce .GetPointNumber (1));_fe =_fe .AppendPoint (_fga );_fe =_fe .AppendPoint (_gdg );_fe =_fe .AppendPoint (_dge );_fe =_fe .AppendPoint (_fac );_fe =_fe .AppendPoint (_dcf );_fe =_fe .AppendPoint (_cce .GetPointNumber (4));_cce =_fe ;};if _dcb ==LineEndingStyleArrow {_fab :=_cce .GetPointNumber (1);_fda :=_cce .GetPointNumber (_cce .Length ());_dgacg :=NewVectorPolar (_bgea /2,_dae +_db +_db /2);_ebf :=_fab .AddVector (_dgacg );_dag :=NewVectorPolar (_ecd ,_dae ).Add (NewVectorPolar (_dgac /2,_dae +_db /2));_gca :=_ebf .AddVector (_dag );_ebe :=NewVectorPolar (_cacc ,_dae -_db /2);_ebb :=_gca .AddVector (_ebe );_ggg :=NewVectorPolar (_ecd ,_dae );_eggg :=_fda .AddVector (_ggg );_eef :=NewVectorPolar (_cacc ,_dae +_db +_db /2);_fcb :=_eggg .AddVector (_eef );_bcf :=_ebf ;_agb :=NewPath ();_agb =_agb .AppendPoint (_ebf );_agb =_agb .AppendPoint (_gca );_agb =_agb .AppendPoint (_ebb );for _ ,_gfd :=range _cce .Points [1:len (_cce .Points )-1]{_agb =_agb .AppendPoint (_gfd );};_agb =_agb .AppendPoint (_eggg );_agb =_agb .AppendPoint (_fcb );_agb =_agb .AppendPoint (_bcf );_cce =_agb ;};_cdae :=_ba .NewContentCreator ();_cdae .Add_q ().Add_rg (_ff .LineColor .R (),_ff .LineColor .G (),_ff .LineColor .B ());if len (gsName )> 1{_cdae .Add_gs (_g .PdfObjectName (gsName ));};_cce =_cce .Offset (_ff .X1 ,_ff .Y1 );_fabb :=_cce .GetBoundingBox ();DrawPathWithCreator (_cce ,_cdae );if _ff .LineStyle ==LineStyleDashed {_cdae .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();}else {_cdae .Add_f ().Add_Q ();};return _cdae .Bytes (),_fabb .ToPdfRectangle (),nil ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Length returns the number of points in the path.
func (_dg Path )Length ()int {return len (_dg .Points )};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_a .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_a .PdfColorDeviceRGB ;Opacity float64 ;};

// FlipX flips the sign of the Dx component of the vector.
func (_abb Vector )FlipX ()Vector {_abb .Dx =-_abb .Dx ;return _abb };

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_ab :=CubicBezierCurve {};_ab .P0 =NewPoint (x0 ,y0 );_ab .P1 =NewPoint (x1 ,y1 );_ab .P2 =NewPoint (x2 ,y2 );_ab .P3 =NewPoint (x3 ,y3 );return _ab ;};

// Copy returns a clone of the path.
func (_bab Path )Copy ()Path {_ac :=Path {};_ac .Points =append (_ac .Points ,_bab .Points ...);return _ac ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor *_a .PdfColorDeviceRGB ;FillEnabled bool ;FillColor *_a .PdfColorDeviceRGB ;};