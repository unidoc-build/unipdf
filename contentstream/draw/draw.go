//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_b "fmt";_gc "github.com/unidoc/unipdf/v3/contentstream";_g "github.com/unidoc/unipdf/v3/core";_ge "github.com/unidoc/unipdf/v3/internal/transform";_a "github.com/unidoc/unipdf/v3/model";_ce "math";);

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Length returns the number of points in the path.
func (_abe Path )Length ()int {return len (_abe .Points )};

// CurvePolygon is a multi-point shape with rings containing curves that can be
// drawn to a PDF content stream.
type CurvePolygon struct{Rings [][]CubicBezierCurve ;FillEnabled bool ;FillColor _a .PdfColor ;BorderEnabled bool ;BorderColor _a .PdfColor ;BorderWidth float64 ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor _a .PdfColor ;FillEnabled bool ;FillColor _a .PdfColor ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _a .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _a .PdfColor ;Opacity float64 ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_de Vector )GetPolarAngle ()float64 {return _ce .Atan2 (_de .Dy ,_de .Dx )};

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_cea PolyBezierCurve )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){if _cea .BorderColor ==nil {_cea .BorderColor =_a .NewPdfColorDeviceRGB (0,0,0);};_ege :=NewCubicBezierPath ();for _ ,_af :=range _cea .Curves {_ege =_ege .AppendCurve (_af );
};_db :=_gc .NewContentCreator ();_db .Add_q ();_cea .FillEnabled =_cea .FillEnabled &&_cea .FillColor !=nil ;if _cea .FillEnabled {_db .SetNonStrokingColor (_cea .FillColor );};_db .SetStrokingColor (_cea .BorderColor );_db .Add_w (_cea .BorderWidth );
if len (gsName )> 1{_db .Add_gs (_g .PdfObjectName (gsName ));};for _fd ,_egf :=range _ege .Curves {if _fd ==0{_db .Add_m (_egf .P0 .X ,_egf .P0 .Y );}else {_db .Add_l (_egf .P0 .X ,_egf .P0 .Y );};_db .Add_c (_egf .P1 .X ,_egf .P1 .Y ,_egf .P2 .X ,_egf .P2 .Y ,_egf .P3 .X ,_egf .P3 .Y );
};if _cea .FillEnabled {_db .Add_h ();_db .Add_B ();}else {_db .Add_S ();};_db .Add_Q ();return _db .Bytes (),_ege .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor _a .PdfColor ;BorderEnabled bool ;BorderWidth float64 ;BorderColor _a .PdfColor ;Opacity float64 ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_e :=CubicBezierCurve {};_e .P0 =NewPoint (x0 ,y0 );_e .P1 =NewPoint (x1 ,y1 );_e .P2 =NewPoint (x2 ,y2 );_e .P3 =NewPoint (x3 ,y3 );return _e ;};

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_bb Point )Rotate (theta float64 )Point {_aac :=_ge .NewPoint (_bb .X ,_bb .Y ).Rotate (theta );return NewPoint (_aac .X ,_aac .Y );};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;
);func (_ccg Point )String ()string {return _b .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_ccg .X ,_ccg .Y );};

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _a .PdfColor ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// Flip changes the sign of the vector: -vector.
func (_cfb Vector )Flip ()Vector {_eaee :=_cfb .Magnitude ();_gaa :=_cfb .GetPolarAngle ();_cfb .Dx =_eaee *_ce .Cos (_gaa +_ce .Pi );_cfb .Dy =_eaee *_ce .Sin (_gaa +_ce .Pi );return _cfb ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_cdc :=Vector {};_cdc .Dx =dx ;_cdc .Dy =dy ;return _cdc };

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_cfg Path )RemovePoint (number int )Path {if number < 1||number > len (_cfg .Points ){return _cfg ;};_ebd :=number -1;_cfg .Points =append (_cfg .Points [:_ebd ],_cfg .Points [_ebd +1:]...);return _cfg ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_eae Circle )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_gbg :=_eae .Width /2;_dab :=_eae .Height /2;if _eae .BorderEnabled {_gbg -=_eae .BorderWidth /2;_dab -=_eae .BorderWidth /2;};_bbc :=0.551784;_ga :=_gbg *_bbc ;_efg :=_dab *_bbc ;
_ced :=NewCubicBezierPath ();_ced =_ced .AppendCurve (NewCubicBezierCurve (-_gbg ,0,-_gbg ,_efg ,-_ga ,_dab ,0,_dab ));_ced =_ced .AppendCurve (NewCubicBezierCurve (0,_dab ,_ga ,_dab ,_gbg ,_efg ,_gbg ,0));_ced =_ced .AppendCurve (NewCubicBezierCurve (_gbg ,0,_gbg ,-_efg ,_ga ,-_dab ,0,-_dab ));
_ced =_ced .AppendCurve (NewCubicBezierCurve (0,-_dab ,-_ga ,-_dab ,-_gbg ,-_efg ,-_gbg ,0));_ced =_ced .Offset (_gbg ,_dab );if _eae .BorderEnabled {_ced =_ced .Offset (_eae .BorderWidth /2,_eae .BorderWidth /2);};if _eae .X !=0||_eae .Y !=0{_ced =_ced .Offset (_eae .X ,_eae .Y );
};_df :=_gc .NewContentCreator ();_df .Add_q ();if _eae .FillEnabled {_df .SetNonStrokingColor (_eae .FillColor );};if _eae .BorderEnabled {_df .SetStrokingColor (_eae .BorderColor );_df .Add_w (_eae .BorderWidth );};if len (gsName )> 1{_df .Add_gs (_g .PdfObjectName (gsName ));
};DrawBezierPathWithCreator (_ced ,_df );_df .Add_h ();if _eae .FillEnabled &&_eae .BorderEnabled {_df .Add_B ();}else if _eae .FillEnabled {_df .Add_f ();}else if _eae .BorderEnabled {_df .Add_S ();};_df .Add_Q ();_gd :=_ced .GetBoundingBox ();if _eae .BorderEnabled {_gd .Height +=_eae .BorderWidth ;
_gd .Width +=_eae .BorderWidth ;_gd .X -=_eae .BorderWidth /2;_gd .Y -=_eae .BorderWidth /2;};return _df .Bytes (),_gd .ToPdfRectangle (),nil ;};

// GetBoundingBox returns the bounding box of the path.
func (_fb Path )GetBoundingBox ()BoundingBox {_gb :=BoundingBox {};_fc :=0.0;_bc :=0.0;_da :=0.0;_fce :=0.0;for _aa ,_be :=range _fb .Points {if _aa ==0{_fc =_be .X ;_bc =_be .X ;_da =_be .Y ;_fce =_be .Y ;continue ;};if _be .X < _fc {_fc =_be .X ;};if _be .X > _bc {_bc =_be .X ;
};if _be .Y < _da {_da =_be .Y ;};if _be .Y > _fce {_fce =_be .Y ;};};_gb .X =_fc ;_gb .Y =_da ;_gb .Width =_bc -_fc ;_gb .Height =_fce -_da ;return _gb ;};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_ddb Rectangle )ToPdfRectangle ()*_a .PdfRectangle {return &_a .PdfRectangle {Llx :_ddb .X ,Lly :_ddb .Y ,Urx :_ddb .X +_ddb .Width ,Ury :_ddb .Y +_ddb .Height };};

// Draw draws the composite curve polygon. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array
// and the bounding box of the polygon.
func (_bad CurvePolygon )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_cegd :=_gc .NewContentCreator ();_cegd .Add_q ();_bad .FillEnabled =_bad .FillEnabled &&_bad .FillColor !=nil ;if _bad .FillEnabled {_cegd .SetNonStrokingColor (_bad .FillColor );
};_bad .BorderEnabled =_bad .BorderEnabled &&_bad .BorderColor !=nil ;if _bad .BorderEnabled {_cegd .SetStrokingColor (_bad .BorderColor );_cegd .Add_w (_bad .BorderWidth );};if len (gsName )> 1{_cegd .Add_gs (_g .PdfObjectName (gsName ));};_bdf :=NewCubicBezierPath ();
for _ ,_cca :=range _bad .Rings {for _ccb ,_eca :=range _cca {if _ccb ==0{_cegd .Add_m (_eca .P0 .X ,_eca .P0 .Y );}else {_cegd .Add_l (_eca .P0 .X ,_eca .P0 .Y );};_cegd .Add_c (_eca .P1 .X ,_eca .P1 .Y ,_eca .P2 .X ,_eca .P2 .Y ,_eca .P3 .X ,_eca .P3 .Y );
_bdf =_bdf .AppendCurve (_eca );};_cegd .Add_h ();};if _bad .FillEnabled &&_bad .BorderEnabled {_cegd .Add_B ();}else if _bad .FillEnabled {_cegd .Add_f ();}else if _bad .BorderEnabled {_cegd .Add_S ();};_cegd .Add_Q ();return _cegd .Bytes (),_bdf .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_gc .ContentCreator ){for _dga ,_cge :=range path .Points {if _dga ==0{creator .Add_m (_cge .X ,_cge .Y );}else {creator .Add_l (_cge .X ,_cge .Y );};};};

// FlipX flips the sign of the Dx component of the vector.
func (_cga Vector )FlipX ()Vector {_cga .Dx =-_cga .Dx ;return _cga };

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_cec CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_cec .P0 .X +=offX ;_cec .P1 .X +=offX ;_cec .P2 .X +=offX ;_cec .P3 .X +=offX ;_cec .P0 .Y +=offY ;_cec .P1 .Y +=offY ;_cec .P2 .Y +=offY ;_cec .P3 .Y +=offY ;return _cec ;
};

// Add adds the specified vector to the current one and returns the result.
func (_ag Vector )Add (other Vector )Vector {_ag .Dx +=other .Dx ;_ag .Dy +=other .Dy ;return _ag };

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor _a .PdfColor ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// FlipY flips the sign of the Dy component of the vector.
func (_gda Vector )FlipY ()Vector {_gda .Dy =-_gda .Dy ;return _gda };

// Rotate rotates the vector by the specified angle.
func (_cfd Vector )Rotate (phi float64 )Vector {_dbdb :=_cfd .Magnitude ();_dbf :=_cfd .GetPolarAngle ();return NewVectorPolar (_dbdb ,_dbf +phi );};

// AddVector adds vector to a point.
func (_ba Point )AddVector (v Vector )Point {_ba .X +=v .Dx ;_ba .Y +=v .Dy ;return _ba };

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_bed BasicLine )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_dca :=_bed .LineWidth ;_aae :=NewPath ();_aae =_aae .AppendPoint (NewPoint (_bed .X1 ,_bed .Y1 ));_aae =_aae .AppendPoint (NewPoint (_bed .X2 ,_bed .Y2 ));_dbd :=_gc .NewContentCreator ();
_cff :=_aae .GetBoundingBox ();DrawPathWithCreator (_aae ,_dbd );if _bed .LineStyle ==LineStyleDashed {_dbd .Add_d ([]int64 {1,1},0);};_dbd .SetStrokingColor (_bed .LineColor ).Add_w (_dca ).Add_S ().Add_Q ();return _dbd .Bytes (),_cff .ToPdfRectangle (),nil ;
};

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_bef Rectangle )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_bcf :=NewPath ();_bcf =_bcf .AppendPoint (NewPoint (0,0));_bcf =_bcf .AppendPoint (NewPoint (0,_bef .Height ));_bcf =_bcf .AppendPoint (NewPoint (_bef .Width ,_bef .Height ));
_bcf =_bcf .AppendPoint (NewPoint (_bef .Width ,0));_bcf =_bcf .AppendPoint (NewPoint (0,0));if _bef .X !=0||_bef .Y !=0{_bcf =_bcf .Offset (_bef .X ,_bef .Y );};_bbcb :=_gc .NewContentCreator ();_bbcb .Add_q ();if _bef .FillEnabled {_bbcb .SetNonStrokingColor (_bef .FillColor );
};if _bef .BorderEnabled {_bbcb .SetStrokingColor (_bef .BorderColor );_bbcb .Add_w (_bef .BorderWidth );};if len (gsName )> 1{_bbcb .Add_gs (_g .PdfObjectName (gsName ));};DrawPathWithCreator (_bcf ,_bbcb );_bbcb .Add_h ();if _bef .FillEnabled &&_bef .BorderEnabled {_bbcb .Add_B ();
}else if _bef .FillEnabled {_bbcb .Add_f ();}else if _bef .BorderEnabled {_bbcb .Add_S ();};_bbcb .Add_Q ();return _bbcb .Bytes (),_bcf .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_cg Point )Add (dx ,dy float64 )Point {_cg .X +=dx ;_cg .Y +=dy ;return _cg };

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_ebg Path )GetPointNumber (number int )Point {if number < 1||number > len (_ebg .Points ){return Point {};};return _ebg .Points [number -1];};

// AppendCurve appends the specified Bezier curve to the path.
func (_gg CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_gg .Curves =append (_gg .Curves ,curve );return _gg ;};

// Offset shifts the path with the specified offsets.
func (_aca Path )Offset (offX ,offY float64 )Path {for _eecc ,_dd :=range _aca .Points {_aca .Points [_eecc ]=_dd .Add (offX ,offY );};return _aca ;};

// Offset shifts the Bezier path with the specified offsets.
func (_f CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _eg ,_ceg :=range _f .Curves {_f .Curves [_eg ]=_ceg .AddOffsetXY (offX ,offY );};return _f ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_gac :=Vector {};_gac .Dx =b .X -a .X ;_gac .Dy =b .Y -a .Y ;return _gac ;};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_cc :=CubicBezierPath {};_cc .Curves =[]CubicBezierCurve {};return _cc ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_ddg Line )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_egd ,_egb :=_ddg .X1 ,_ddg .X2 ;_afb ,_dg :=_ddg .Y1 ,_ddg .Y2 ;_ffb :=_dg -_afb ;_cfe :=_egb -_egd ;_aaa :=_ce .Atan2 (_ffb ,_cfe );L :=_ce .Sqrt (_ce .Pow (_cfe ,2.0)+_ce .Pow (_ffb ,2.0));
_dgd :=_ddg .LineWidth ;_gbd :=_ce .Pi ;_fa :=1.0;if _cfe < 0{_fa *=-1.0;};if _ffb < 0{_fa *=-1.0;};VsX :=_fa *(-_dgd /2*_ce .Cos (_aaa +_gbd /2));VsY :=_fa *(-_dgd /2*_ce .Sin (_aaa +_gbd /2)+_dgd *_ce .Sin (_aaa +_gbd /2));V1X :=VsX +_dgd /2*_ce .Cos (_aaa +_gbd /2);
V1Y :=VsY +_dgd /2*_ce .Sin (_aaa +_gbd /2);V2X :=VsX +_dgd /2*_ce .Cos (_aaa +_gbd /2)+L *_ce .Cos (_aaa );V2Y :=VsY +_dgd /2*_ce .Sin (_aaa +_gbd /2)+L *_ce .Sin (_aaa );V3X :=VsX +_dgd /2*_ce .Cos (_aaa +_gbd /2)+L *_ce .Cos (_aaa )+_dgd *_ce .Cos (_aaa -_gbd /2);
V3Y :=VsY +_dgd /2*_ce .Sin (_aaa +_gbd /2)+L *_ce .Sin (_aaa )+_dgd *_ce .Sin (_aaa -_gbd /2);V4X :=VsX +_dgd /2*_ce .Cos (_aaa -_gbd /2);V4Y :=VsY +_dgd /2*_ce .Sin (_aaa -_gbd /2);_ae :=NewPath ();_ae =_ae .AppendPoint (NewPoint (V1X ,V1Y ));_ae =_ae .AppendPoint (NewPoint (V2X ,V2Y ));
_ae =_ae .AppendPoint (NewPoint (V3X ,V3Y ));_ae =_ae .AppendPoint (NewPoint (V4X ,V4Y ));_fe :=_ddg .LineEndingStyle1 ;_geg :=_ddg .LineEndingStyle2 ;_ede :=3*_dgd ;_dda :=3*_dgd ;_eaf :=(_dda -_dgd )/2;if _geg ==LineEndingStyleArrow {_ccd :=_ae .GetPointNumber (2);
_afa :=NewVectorPolar (_ede ,_aaa +_gbd );_gee :=_ccd .AddVector (_afa );_cega :=NewVectorPolar (_dda /2,_aaa +_gbd /2);_ebga :=NewVectorPolar (_ede ,_aaa );_ddga :=NewVectorPolar (_eaf ,_aaa +_gbd /2);_gegd :=_gee .AddVector (_ddga );_bcc :=_ebga .Add (_cega .Flip ());
_afag :=_gegd .AddVector (_bcc );_ecc :=_cega .Scale (2).Flip ().Add (_bcc .Flip ());_ffd :=_afag .AddVector (_ecc );_eef :=_gee .AddVector (NewVectorPolar (_dgd ,_aaa -_gbd /2));_geed :=NewPath ();_geed =_geed .AppendPoint (_ae .GetPointNumber (1));_geed =_geed .AppendPoint (_gee );
_geed =_geed .AppendPoint (_gegd );_geed =_geed .AppendPoint (_afag );_geed =_geed .AppendPoint (_ffd );_geed =_geed .AppendPoint (_eef );_geed =_geed .AppendPoint (_ae .GetPointNumber (4));_ae =_geed ;};if _fe ==LineEndingStyleArrow {_beb :=_ae .GetPointNumber (1);
_dag :=_ae .GetPointNumber (_ae .Length ());_gdd :=NewVectorPolar (_dgd /2,_aaa +_gbd +_gbd /2);_dac :=_beb .AddVector (_gdd );_fbf :=NewVectorPolar (_ede ,_aaa ).Add (NewVectorPolar (_dda /2,_aaa +_gbd /2));_bab :=_dac .AddVector (_fbf );_feg :=NewVectorPolar (_eaf ,_aaa -_gbd /2);
_dgg :=_bab .AddVector (_feg );_efag :=NewVectorPolar (_ede ,_aaa );_gdg :=_dag .AddVector (_efag );_fef :=NewVectorPolar (_eaf ,_aaa +_gbd +_gbd /2);_fgf :=_gdg .AddVector (_fef );_bgg :=_dac ;_cedc :=NewPath ();_cedc =_cedc .AppendPoint (_dac );_cedc =_cedc .AppendPoint (_bab );
_cedc =_cedc .AppendPoint (_dgg );for _ ,_eee :=range _ae .Points [1:len (_ae .Points )-1]{_cedc =_cedc .AppendPoint (_eee );};_cedc =_cedc .AppendPoint (_gdg );_cedc =_cedc .AppendPoint (_fgf );_cedc =_cedc .AppendPoint (_bgg );_ae =_cedc ;};_afg :=_gc .NewContentCreator ();
_afg .Add_q ().SetNonStrokingColor (_ddg .LineColor );if len (gsName )> 1{_afg .Add_gs (_g .PdfObjectName (gsName ));};_ae =_ae .Offset (_ddg .X1 ,_ddg .Y1 );_beff :=_ae .GetBoundingBox ();DrawPathWithCreator (_ae ,_afg );if _ddg .LineStyle ==LineStyleDashed {_afg .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();
}else {_afg .Add_f ().Add_Q ();};return _afg .Bytes (),_beff .ToPdfRectangle (),nil ;};

// AppendPoint adds the specified point to the path.
func (_gfc Path )AppendPoint (point Point )Path {_gfc .Points =append (_gfc .Points ,point );return _gfc };

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_gc .ContentCreator ){for _cfgf ,_ecb :=range bpath .Curves {if _cfgf ==0{creator .Add_m (_ecb .P0 .X ,_ecb .P0 .Y );};creator .Add_c (_ecb .P1 .X ,_ecb .P1 .Y ,_ecb .P2 .X ,_ecb .P2 .Y ,_ecb .P3 .X ,_ecb .P3 .Y );
};};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_fg Polygon )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){_gff :=_gc .NewContentCreator ();_gff .Add_q ();_fg .FillEnabled =_fg .FillEnabled &&_fg .FillColor !=nil ;if _fg .FillEnabled {_gff .SetNonStrokingColor (_fg .FillColor );};_fg .BorderEnabled =_fg .BorderEnabled &&_fg .BorderColor !=nil ;
if _fg .BorderEnabled {_gff .SetStrokingColor (_fg .BorderColor );_gff .Add_w (_fg .BorderWidth );};if len (gsName )> 1{_gff .Add_gs (_g .PdfObjectName (gsName ));};_gec :=NewPath ();for _ ,_eaeb :=range _fg .Points {for _ed ,_ca :=range _eaeb {_gec =_gec .AppendPoint (_ca );
if _ed ==0{_gff .Add_m (_ca .X ,_ca .Y );}else {_gff .Add_l (_ca .X ,_ca .Y );};};_gff .Add_h ();};if _fg .FillEnabled &&_fg .BorderEnabled {_gff .Add_B ();}else if _fg .FillEnabled {_gff .Add_f ();}else if _fg .BorderEnabled {_gff .Add_S ();};_gff .Add_Q ();
return _gff .Bytes (),_gec .GetBoundingBox ().ToPdfRectangle (),nil ;};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_eeg CubicBezierPath )GetBoundingBox ()Rectangle {_cf :=Rectangle {};_ea :=0.0;_ff :=0.0;_cdb :=0.0;_gf :=0.0;for _eec ,_eb :=range _eeg .Curves {_ab :=_eb .GetBounds ();if _eec ==0{_ea =_ab .Llx ;_ff =_ab .Urx ;_cdb =_ab .Lly ;_gf =_ab .Ury ;continue ;
};if _ab .Llx < _ea {_ea =_ab .Llx ;};if _ab .Urx > _ff {_ff =_ab .Urx ;};if _ab .Lly < _cdb {_cdb =_ab .Lly ;};if _ab .Ury > _gf {_gf =_ab .Ury ;};};_cf .X =_ea ;_cf .Y =_cdb ;_cf .Width =_ff -_ea ;_cf .Height =_gf -_cdb ;return _cf ;};

// Copy returns a clone of the Bezier path.
func (_gea CubicBezierPath )Copy ()CubicBezierPath {_cd :=CubicBezierPath {};_cd .Curves =append (_cd .Curves ,_gea .Curves ...);return _cd ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// GetBounds returns the bounding box of the Bezier curve.
func (_ec CubicBezierCurve )GetBounds ()_a .PdfRectangle {_ee :=_ec .P0 .X ;_d :=_ec .P0 .X ;_ef :=_ec .P0 .Y ;_bg :=_ec .P0 .Y ;for _ac :=0.0;_ac <=1.0;_ac +=0.001{Rx :=_ec .P0 .X *_ce .Pow (1-_ac ,3)+_ec .P1 .X *3*_ac *_ce .Pow (1-_ac ,2)+_ec .P2 .X *3*_ce .Pow (_ac ,2)*(1-_ac )+_ec .P3 .X *_ce .Pow (_ac ,3);
Ry :=_ec .P0 .Y *_ce .Pow (1-_ac ,3)+_ec .P1 .Y *3*_ac *_ce .Pow (1-_ac ,2)+_ec .P2 .Y *3*_ce .Pow (_ac ,2)*(1-_ac )+_ec .P3 .Y *_ce .Pow (_ac ,3);if Rx < _ee {_ee =Rx ;};if Rx > _d {_d =Rx ;};if Ry < _ef {_ef =Ry ;};if Ry > _bg {_bg =Ry ;};};_efa :=_a .PdfRectangle {};
_efa .Llx =_ee ;_efa .Lly =_ef ;_efa .Urx =_d ;_efa .Ury =_bg ;return _efa ;};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_dc BoundingBox )ToPdfRectangle ()*_a .PdfRectangle {return &_a .PdfRectangle {Llx :_dc .X ,Lly :_dc .Y ,Urx :_dc .X +_dc .Width ,Ury :_dc .Y +_dc .Height };};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor _a .PdfColor ;LineWidth float64 ;};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor _a .PdfColor ;BorderEnabled bool ;BorderColor _a .PdfColor ;BorderWidth float64 ;};

// Copy returns a clone of the path.
func (_cfa Path )Copy ()Path {_bf :=Path {};_bf .Points =append (_bf .Points ,_cfa .Points ...);return _bf ;};

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_baf :=Vector {};_baf .Dx =length *_ce .Cos (theta );_baf .Dy =length *_ce .Sin (theta );return _baf ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_gcd Polyline )Draw (gsName string )([]byte ,*_a .PdfRectangle ,error ){if _gcd .LineColor ==nil {_gcd .LineColor =_a .NewPdfColorDeviceRGB (0,0,0);};_eegf :=NewPath ();for _ ,_bggf :=range _gcd .Points {_eegf =_eegf .AppendPoint (_bggf );};_ffbc :=_gc .NewContentCreator ();
_ffbc .Add_q ().SetStrokingColor (_gcd .LineColor ).Add_w (_gcd .LineWidth );if len (gsName )> 1{_ffbc .Add_gs (_g .PdfObjectName (gsName ));};DrawPathWithCreator (_eegf ,_ffbc );_ffbc .Add_S ();_ffbc .Add_Q ();return _ffbc .Bytes (),_eegf .GetBoundingBox ().ToPdfRectangle (),nil ;
};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// Magnitude returns the magnitude of the vector.
func (_gbe Vector )Magnitude ()float64 {return _ce .Sqrt (_ce .Pow (_gbe .Dx ,2.0)+_ce .Pow (_gbe .Dy ,2.0));};

// Scale scales the vector by the specified factor.
func (_gfd Vector )Scale (factor float64 )Vector {_bde :=_gfd .Magnitude ();_dcaa :=_gfd .GetPolarAngle ();_gfd .Dx =factor *_bde *_ce .Cos (_dcaa );_gfd .Dy =factor *_bde *_ce .Sin (_dcaa );return _gfd ;};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;
);