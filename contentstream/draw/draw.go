//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package draw has handy features for defining paths which can be used to draw content on a PDF page.  Handles
// defining paths as points, vector calculations and conversion to PDF content stream data which can be used in
// page content streams and XObject forms and thus also in annotation appearance streams.
//
// Also defines utility functions for drawing common shapes such as rectangles, lines and circles (ovals).
package draw ;import (_f "fmt";_da "github.com/unidoc/unipdf/v3/contentstream";_c "github.com/unidoc/unipdf/v3/core";_fb "github.com/unidoc/unipdf/v3/internal/transform";_ff "github.com/unidoc/unipdf/v3/model";_e "math";);

// NewPoint returns a new point with the coordinates x, y.
func NewPoint (x ,y float64 )Point {return Point {X :x ,Y :y }};

// Polygon is a multi-point shape that can be drawn to a PDF content stream.
type Polygon struct{Points [][]Point ;FillEnabled bool ;FillColor *_ff .PdfColorDeviceRGB ;BorderEnabled bool ;BorderColor *_ff .PdfColorDeviceRGB ;BorderWidth float64 ;};

// DrawPathWithCreator makes the path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawPathWithCreator (path Path ,creator *_da .ContentCreator ){for _dfa ,_bdg :=range path .Points {if _dfa ==0{creator .Add_m (_bdg .X ,_bdg .Y );}else {creator .Add_l (_bdg .X ,_bdg .Y );};};};

// Point represents a two-dimensional point.
type Point struct{X float64 ;Y float64 ;};

// Circle represents a circle shape with fill and border properties that can be drawn to a PDF content stream.
type Circle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_ff .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_ff .PdfColorDeviceRGB ;Opacity float64 ;};

// Rectangle is a shape with a specified Width and Height and a lower left corner at (X,Y) that can be
// drawn to a PDF content stream.  The rectangle can optionally have a border and a filling color.
// The Width/Height includes the border (if any specified), i.e. is positioned inside.
type Rectangle struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;FillEnabled bool ;FillColor *_ff .PdfColorDeviceRGB ;BorderEnabled bool ;BorderWidth float64 ;BorderColor *_ff .PdfColorDeviceRGB ;Opacity float64 ;};

// AppendCurve appends the specified Bezier curve to the path.
func (_cf CubicBezierPath )AppendCurve (curve CubicBezierCurve )CubicBezierPath {_cf .Curves =append (_cf .Curves ,curve );return _cf ;};

// NewVectorBetween returns a new vector with the direction specified by
// the subtraction of point a from point b (b-a).
func NewVectorBetween (a Point ,b Point )Vector {_efbd :=Vector {};_efbd .Dx =b .X -a .X ;_efbd .Dy =b .Y -a .Y ;return _efbd ;};

// Draw draws the circle. Can specify a graphics state (gsName) for setting opacity etc.  Otherwise leave empty ("").
// Returns the content stream as a byte array, the bounding box and an error on failure.
func (_dcc Circle )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){_de :=_dcc .Width /2;_fg :=_dcc .Height /2;if _dcc .BorderEnabled {_de -=_dcc .BorderWidth /2;_fg -=_dcc .BorderWidth /2;};_gbd :=0.551784;_fdc :=_de *_gbd ;_gd :=_fg *_gbd ;_eab :=NewCubicBezierPath ();_eab =_eab .AppendCurve (NewCubicBezierCurve (-_de ,0,-_de ,_gd ,-_fdc ,_fg ,0,_fg ));_eab =_eab .AppendCurve (NewCubicBezierCurve (0,_fg ,_fdc ,_fg ,_de ,_gd ,_de ,0));_eab =_eab .AppendCurve (NewCubicBezierCurve (_de ,0,_de ,-_gd ,_fdc ,-_fg ,0,-_fg ));_eab =_eab .AppendCurve (NewCubicBezierCurve (0,-_fg ,-_fdc ,-_fg ,-_de ,-_gd ,-_de ,0));_eab =_eab .Offset (_de ,_fg );if _dcc .BorderEnabled {_eab =_eab .Offset (_dcc .BorderWidth /2,_dcc .BorderWidth /2);};if _dcc .X !=0||_dcc .Y !=0{_eab =_eab .Offset (_dcc .X ,_dcc .Y );};_fbd :=_da .NewContentCreator ();_fbd .Add_q ();if _dcc .FillEnabled {_fbd .Add_rg (_dcc .FillColor .R (),_dcc .FillColor .G (),_dcc .FillColor .B ());};if _dcc .BorderEnabled {_fbd .Add_RG (_dcc .BorderColor .R (),_dcc .BorderColor .G (),_dcc .BorderColor .B ());_fbd .Add_w (_dcc .BorderWidth );};if len (gsName )> 1{_fbd .Add_gs (_c .PdfObjectName (gsName ));};DrawBezierPathWithCreator (_eab ,_fbd );_fbd .Add_h ();if _dcc .FillEnabled &&_dcc .BorderEnabled {_fbd .Add_B ();}else if _dcc .FillEnabled {_fbd .Add_f ();}else if _dcc .BorderEnabled {_fbd .Add_S ();};_fbd .Add_Q ();_dce :=_eab .GetBoundingBox ();if _dcc .BorderEnabled {_dce .Height +=_dcc .BorderWidth ;_dce .Width +=_dcc .BorderWidth ;_dce .X -=_dcc .BorderWidth /2;_dce .Y -=_dcc .BorderWidth /2;};return _fbd .Bytes (),_dce .ToPdfRectangle (),nil ;};

// FlipX flips the sign of the Dx component of the vector.
func (_efa Vector )FlipX ()Vector {_efa .Dx =-_efa .Dx ;return _efa };

// Copy returns a clone of the path.
func (_ef Path )Copy ()Path {_ffa :=Path {};_ffa .Points =append (_ffa .Points ,_ef .Points ...);return _ffa ;};

// NewCubicBezierCurve returns a new cubic Bezier curve.
func NewCubicBezierCurve (x0 ,y0 ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )CubicBezierCurve {_b :=CubicBezierCurve {};_b .P0 =NewPoint (x0 ,y0 );_b .P1 =NewPoint (x1 ,y1 );_b .P2 =NewPoint (x2 ,y2 );_b .P3 =NewPoint (x3 ,y3 );return _b ;};

// Draw draws the polygon. A graphics state name can be specified for
// setting the polygon properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polygon
// bounding box.
func (_caa Polygon )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){_fdb :=_da .NewContentCreator ();_fdb .Add_q ();_caa .FillEnabled =_caa .FillEnabled &&_caa .FillColor !=nil ;if _caa .FillEnabled {_fdb .Add_rg (_caa .FillColor .R (),_caa .FillColor .G (),_caa .FillColor .B ());};_caa .BorderEnabled =_caa .BorderEnabled &&_caa .BorderColor !=nil ;if _caa .BorderEnabled {_fdb .Add_RG (_caa .BorderColor .R (),_caa .BorderColor .G (),_caa .BorderColor .B ());_fdb .Add_w (_caa .BorderWidth );};if len (gsName )> 1{_fdb .Add_gs (_c .PdfObjectName (gsName ));};_be :=NewPath ();for _ ,_ace :=range _caa .Points {for _bfg ,_age :=range _ace {_be =_be .AppendPoint (_age );if _bfg ==0{_fdb .Add_m (_age .X ,_age .Y );}else {_fdb .Add_l (_age .X ,_age .Y );};};_fdb .Add_h ();};if _caa .FillEnabled &&_caa .BorderEnabled {_fdb .Add_B ();}else if _caa .FillEnabled {_fdb .Add_f ();}else if _caa .BorderEnabled {_fdb .Add_S ();};_fdb .Add_Q ();return _fdb .Bytes (),_be .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Offset shifts the Bezier path with the specified offsets.
func (_ec CubicBezierPath )Offset (offX ,offY float64 )CubicBezierPath {for _cc ,_bc :=range _ec .Curves {_ec .Curves [_cc ]=_bc .AddOffsetXY (offX ,offY );};return _ec ;};

// Offset shifts the path with the specified offsets.
func (_ebc Path )Offset (offX ,offY float64 )Path {for _dde ,_ac :=range _ebc .Points {_ebc .Points [_dde ]=_ac .Add (offX ,offY );};return _ebc ;};

// PolyBezierCurve represents a composite curve that is the result of
// joining multiple cubic Bezier curves.
type PolyBezierCurve struct{Curves []CubicBezierCurve ;BorderWidth float64 ;BorderColor *_ff .PdfColorDeviceRGB ;FillEnabled bool ;FillColor *_ff .PdfColorDeviceRGB ;};

// AddOffsetXY adds X,Y offset to all points on a curve.
func (_a CubicBezierCurve )AddOffsetXY (offX ,offY float64 )CubicBezierCurve {_a .P0 .X +=offX ;_a .P1 .X +=offX ;_a .P2 .X +=offX ;_a .P3 .X +=offX ;_a .P0 .Y +=offY ;_a .P1 .Y +=offY ;_a .P2 .Y +=offY ;_a .P3 .Y +=offY ;return _a ;};

// Draw draws the line to PDF contentstream. Generates the content stream which can be used in page contents or
// appearance stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error
// if one occurred.
func (_cae Line )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){_ccc ,_bd :=_cae .X1 ,_cae .X2 ;_gg ,_ffg :=_cae .Y1 ,_cae .Y2 ;_bea :=_ffg -_gg ;_ccgb :=_bd -_ccc ;_ggb :=_e .Atan2 (_bea ,_ccgb );L :=_e .Sqrt (_e .Pow (_ccgb ,2.0)+_e .Pow (_bea ,2.0));_aed :=_cae .LineWidth ;_ccgbg :=_e .Pi ;_bgf :=1.0;if _ccgb < 0{_bgf *=-1.0;};if _bea < 0{_bgf *=-1.0;};VsX :=_bgf *(-_aed /2*_e .Cos (_ggb +_ccgbg /2));VsY :=_bgf *(-_aed /2*_e .Sin (_ggb +_ccgbg /2)+_aed *_e .Sin (_ggb +_ccgbg /2));V1X :=VsX +_aed /2*_e .Cos (_ggb +_ccgbg /2);V1Y :=VsY +_aed /2*_e .Sin (_ggb +_ccgbg /2);V2X :=VsX +_aed /2*_e .Cos (_ggb +_ccgbg /2)+L *_e .Cos (_ggb );V2Y :=VsY +_aed /2*_e .Sin (_ggb +_ccgbg /2)+L *_e .Sin (_ggb );V3X :=VsX +_aed /2*_e .Cos (_ggb +_ccgbg /2)+L *_e .Cos (_ggb )+_aed *_e .Cos (_ggb -_ccgbg /2);V3Y :=VsY +_aed /2*_e .Sin (_ggb +_ccgbg /2)+L *_e .Sin (_ggb )+_aed *_e .Sin (_ggb -_ccgbg /2);V4X :=VsX +_aed /2*_e .Cos (_ggb -_ccgbg /2);V4Y :=VsY +_aed /2*_e .Sin (_ggb -_ccgbg /2);_dgf :=NewPath ();_dgf =_dgf .AppendPoint (NewPoint (V1X ,V1Y ));_dgf =_dgf .AppendPoint (NewPoint (V2X ,V2Y ));_dgf =_dgf .AppendPoint (NewPoint (V3X ,V3Y ));_dgf =_dgf .AppendPoint (NewPoint (V4X ,V4Y ));_cd :=_cae .LineEndingStyle1 ;_fff :=_cae .LineEndingStyle2 ;_fe :=3*_aed ;_fdcb :=3*_aed ;_ddeb :=(_fdcb -_aed )/2;if _fff ==LineEndingStyleArrow {_bge :=_dgf .GetPointNumber (2);_gda :=NewVectorPolar (_fe ,_ggb +_ccgbg );_fbg :=_bge .AddVector (_gda );_bcf :=NewVectorPolar (_fdcb /2,_ggb +_ccgbg /2);_aadc :=NewVectorPolar (_fe ,_ggb );_gaa :=NewVectorPolar (_ddeb ,_ggb +_ccgbg /2);_cbc :=_fbg .AddVector (_gaa );_ced :=_aadc .Add (_bcf .Flip ());_efg :=_cbc .AddVector (_ced );_bfbb :=_bcf .Scale (2).Flip ().Add (_ced .Flip ());_bec :=_efg .AddVector (_bfbb );_bcc :=_fbg .AddVector (NewVectorPolar (_aed ,_ggb -_ccgbg /2));_ceb :=NewPath ();_ceb =_ceb .AppendPoint (_dgf .GetPointNumber (1));_ceb =_ceb .AppendPoint (_fbg );_ceb =_ceb .AppendPoint (_cbc );_ceb =_ceb .AppendPoint (_efg );_ceb =_ceb .AppendPoint (_bec );_ceb =_ceb .AppendPoint (_bcc );_ceb =_ceb .AppendPoint (_dgf .GetPointNumber (4));_dgf =_ceb ;};if _cd ==LineEndingStyleArrow {_aae :=_dgf .GetPointNumber (1);_bae :=_dgf .GetPointNumber (_dgf .Length ());_cfa :=NewVectorPolar (_aed /2,_ggb +_ccgbg +_ccgbg /2);_aaea :=_aae .AddVector (_cfa );_gcd :=NewVectorPolar (_fe ,_ggb ).Add (NewVectorPolar (_fdcb /2,_ggb +_ccgbg /2));_acf :=_aaea .AddVector (_gcd );_ed :=NewVectorPolar (_ddeb ,_ggb -_ccgbg /2);_agf :=_acf .AddVector (_ed );_cdd :=NewVectorPolar (_fe ,_ggb );_cfcc :=_bae .AddVector (_cdd );_cad :=NewVectorPolar (_ddeb ,_ggb +_ccgbg +_ccgbg /2);_aee :=_cfcc .AddVector (_cad );_acea :=_aaea ;_bga :=NewPath ();_bga =_bga .AppendPoint (_aaea );_bga =_bga .AppendPoint (_acf );_bga =_bga .AppendPoint (_agf );for _ ,_dfd :=range _dgf .Points [1:len (_dgf .Points )-1]{_bga =_bga .AppendPoint (_dfd );};_bga =_bga .AppendPoint (_cfcc );_bga =_bga .AppendPoint (_aee );_bga =_bga .AppendPoint (_acea );_dgf =_bga ;};_ede :=_da .NewContentCreator ();_ede .Add_q ().Add_rg (_cae .LineColor .R (),_cae .LineColor .G (),_cae .LineColor .B ());if len (gsName )> 1{_ede .Add_gs (_c .PdfObjectName (gsName ));};_dgf =_dgf .Offset (_cae .X1 ,_cae .Y1 );_ge :=_dgf .GetBoundingBox ();DrawPathWithCreator (_dgf ,_ede );if _cae .LineStyle ==LineStyleDashed {_ede .Add_d ([]int64 {1,1},0).Add_S ().Add_f ().Add_Q ();}else {_ede .Add_f ().Add_Q ();};return _ede .Bytes (),_ge .ToPdfRectangle (),nil ;};

// Vector represents a two-dimensional vector.
type Vector struct{Dx float64 ;Dy float64 ;};

// NewPath returns a new empty path.
func NewPath ()Path {return Path {}};

// Line defines a line shape between point 1 (X1,Y1) and point 2 (X2,Y2).  The line ending styles can be none (regular line),
// or arrows at either end.  The line also has a specified width, color and opacity.
type Line struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_ff .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineEndingStyle1 LineEndingStyle ;LineEndingStyle2 LineEndingStyle ;LineStyle LineStyle ;};

// BasicLine defines a line between point 1 (X1,Y1) and point 2 (X2,Y2). The line has a specified width, color and opacity.
type BasicLine struct{X1 float64 ;Y1 float64 ;X2 float64 ;Y2 float64 ;LineColor *_ff .PdfColorDeviceRGB ;Opacity float64 ;LineWidth float64 ;LineStyle LineStyle ;};

// GetPolarAngle returns the angle the magnitude of the vector forms with the
// positive X-axis going counterclockwise.
func (_gee Vector )GetPolarAngle ()float64 {return _e .Atan2 (_gee .Dy ,_gee .Dx )};

// GetBoundingBox returns the bounding box of the Bezier path.
func (_bcd CubicBezierPath )GetBoundingBox ()Rectangle {_bfb :=Rectangle {};_ga :=0.0;_ae :=0.0;_eb :=0.0;_gb :=0.0;for _bfe ,_df :=range _bcd .Curves {_fd :=_df .GetBounds ();if _bfe ==0{_ga =_fd .Llx ;_ae =_fd .Urx ;_eb =_fd .Lly ;_gb =_fd .Ury ;continue ;};if _fd .Llx < _ga {_ga =_fd .Llx ;};if _fd .Urx > _ae {_ae =_fd .Urx ;};if _fd .Lly < _eb {_eb =_fd .Lly ;};if _fd .Ury > _gb {_gb =_fd .Ury ;};};_bfb .X =_ga ;_bfb .Y =_eb ;_bfb .Width =_ae -_ga ;_bfb .Height =_gb -_eb ;return _bfb ;};const (LineEndingStyleNone LineEndingStyle =0;LineEndingStyleArrow LineEndingStyle =1;LineEndingStyleButt LineEndingStyle =2;);

// FlipY flips the sign of the Dy component of the vector.
func (_dfdd Vector )FlipY ()Vector {_dfdd .Dy =-_dfdd .Dy ;return _dfdd };

// AppendPoint adds the specified point to the path.
func (_dd Path )AppendPoint (point Point )Path {_dd .Points =append (_dd .Points ,point );return _dd };

// BoundingBox represents the smallest rectangular area that encapsulates an object.
type BoundingBox struct{X float64 ;Y float64 ;Width float64 ;Height float64 ;};

// ToPdfRectangle returns the bounding box as a PDF rectangle.
func (_cg BoundingBox )ToPdfRectangle ()*_ff .PdfRectangle {return &_ff .PdfRectangle {Llx :_cg .X ,Lly :_cg .Y ,Urx :_cg .X +_cg .Width ,Ury :_cg .Y +_cg .Height };};

// Rotate rotates the vector by the specified angle.
func (_ee Vector )Rotate (phi float64 )Vector {_abf :=_ee .Magnitude ();_gbb :=_ee .GetPolarAngle ();return NewVectorPolar (_abf ,_gbb +phi );};const (LineStyleSolid LineStyle =0;LineStyleDashed LineStyle =1;);

// GetPointNumber returns the path point at the index specified by number.
// The index is 1-based.
func (_cb Path )GetPointNumber (number int )Point {if number < 1||number > len (_cb .Points ){return Point {};};return _cb .Points [number -1];};

// NewCubicBezierPath returns a new empty cubic Bezier path.
func NewCubicBezierPath ()CubicBezierPath {_fc :=CubicBezierPath {};_fc .Curves =[]CubicBezierCurve {};return _fc ;};

// LineEndingStyle defines the line ending style for lines.
// The currently supported line ending styles are None, Arrow (ClosedArrow) and Butt.
type LineEndingStyle int ;

// NewVectorPolar returns a new vector calculated from the specified
// magnitude and angle.
func NewVectorPolar (length float64 ,theta float64 )Vector {_bbd :=Vector {};_bbd .Dx =length *_e .Cos (theta );_bbd .Dy =length *_e .Sin (theta );return _bbd ;};

// Path consists of straight line connections between each point defined in an array of points.
type Path struct{Points []Point ;};

// Polyline defines a slice of points that are connected as straight lines.
type Polyline struct{Points []Point ;LineColor *_ff .PdfColorDeviceRGB ;LineWidth float64 ;};

// Draw draws the basic line to PDF. Generates the content stream which can be used in page contents or appearance
// stream of annotation. Returns the stream content, XForm bounding box (local), bounding box and an error if
// one occurred.
func (_ffd BasicLine )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){_caae :=_ffd .LineWidth ;_efdd :=NewPath ();_efdd =_efdd .AppendPoint (NewPoint (_ffd .X1 ,_ffd .Y1 ));_efdd =_efdd .AppendPoint (NewPoint (_ffd .X2 ,_ffd .Y2 ));_dad :=_da .NewContentCreator ();_eaf :=_efdd .GetBoundingBox ();DrawPathWithCreator (_efdd ,_dad );if _ffd .LineStyle ==LineStyleDashed {_dad .Add_d ([]int64 {1,1},0);};_dad .Add_RG (_ffd .LineColor .R (),_ffd .LineColor .G (),_ffd .LineColor .B ()).Add_w (_caae ).Add_S ().Add_Q ();return _dad .Bytes (),_eaf .ToPdfRectangle (),nil ;};

// NewVector returns a new vector with the direction specified by dx and dy.
func NewVector (dx ,dy float64 )Vector {_cadf :=Vector {};_cadf .Dx =dx ;_cadf .Dy =dy ;return _cadf };

// CubicBezierCurve is defined by:
// R(t) = P0*(1-t)^3 + P1*3*t*(1-t)^2 + P2*3*t^2*(1-t) + P3*t^3
// where P0 is the current point, P1, P2 control points and P3 the final point.
type CubicBezierCurve struct{P0 Point ;P1 Point ;P2 Point ;P3 Point ;};func (_cfc Point )String ()string {return _f .Sprintf ("(\u0025\u002e\u0031\u0066\u002c\u0025\u002e\u0031\u0066\u0029",_cfc .X ,_cfc .Y );};

// ToPdfRectangle returns the rectangle as a PDF rectangle.
func (_aad Rectangle )ToPdfRectangle ()*_ff .PdfRectangle {return &_ff .PdfRectangle {Llx :_aad .X ,Lly :_aad .Y ,Urx :_aad .X +_aad .Width ,Ury :_aad .Y +_aad .Height };};

// LineStyle refers to how the line will be created.
type LineStyle int ;

// Rotate returns a new Point at `p` rotated by `theta` degrees.
func (_dg Point )Rotate (theta float64 )Point {_ce :=_fb .NewPoint (_dg .X ,_dg .Y ).Rotate (theta );return NewPoint (_ce .X ,_ce .Y );};

// Add shifts the coordinates of the point with dx, dy and returns the result.
func (_ccg Point )Add (dx ,dy float64 )Point {_ccg .X +=dx ;_ccg .Y +=dy ;return _ccg };

// GetBounds returns the bounding box of the Bezier curve.
func (_aa CubicBezierCurve )GetBounds ()_ff .PdfRectangle {_ea :=_aa .P0 .X ;_eg :=_aa .P0 .X ;_g :=_aa .P0 .Y ;_bg :=_aa .P0 .Y ;for _gf :=0.0;_gf <=1.0;_gf +=0.001{Rx :=_aa .P0 .X *_e .Pow (1-_gf ,3)+_aa .P1 .X *3*_gf *_e .Pow (1-_gf ,2)+_aa .P2 .X *3*_e .Pow (_gf ,2)*(1-_gf )+_aa .P3 .X *_e .Pow (_gf ,3);Ry :=_aa .P0 .Y *_e .Pow (1-_gf ,3)+_aa .P1 .Y *3*_gf *_e .Pow (1-_gf ,2)+_aa .P2 .Y *3*_e .Pow (_gf ,2)*(1-_gf )+_aa .P3 .Y *_e .Pow (_gf ,3);if Rx < _ea {_ea =Rx ;};if Rx > _eg {_eg =Rx ;};if Ry < _g {_g =Ry ;};if Ry > _bg {_bg =Ry ;};};_bf :=_ff .PdfRectangle {};_bf .Llx =_ea ;_bf .Lly =_g ;_bf .Urx =_eg ;_bf .Ury =_bg ;return _bf ;};

// Flip changes the sign of the vector: -vector.
func (_bac Vector )Flip ()Vector {_db :=_bac .Magnitude ();_ddg :=_bac .GetPolarAngle ();_bac .Dx =_db *_e .Cos (_ddg +_e .Pi );_bac .Dy =_db *_e .Sin (_ddg +_e .Pi );return _bac ;};

// Scale scales the vector by the specified factor.
func (_eeg Vector )Scale (factor float64 )Vector {_eegg :=_eeg .Magnitude ();_edf :=_eeg .GetPolarAngle ();_eeg .Dx =factor *_eegg *_e .Cos (_edf );_eeg .Dy =factor *_eegg *_e .Sin (_edf );return _eeg ;};

// Magnitude returns the magnitude of the vector.
func (_bba Vector )Magnitude ()float64 {return _e .Sqrt (_e .Pow (_bba .Dx ,2.0)+_e .Pow (_bba .Dy ,2.0))};

// CubicBezierPath represents a collection of cubic Bezier curves.
type CubicBezierPath struct{Curves []CubicBezierCurve ;};

// Add adds the specified vector to the current one and returns the result.
func (_dac Vector )Add (other Vector )Vector {_dac .Dx +=other .Dx ;_dac .Dy +=other .Dy ;return _dac };

// GetBoundingBox returns the bounding box of the path.
func (_bb Path )GetBoundingBox ()BoundingBox {_ccb :=BoundingBox {};_ba :=0.0;_ffe :=0.0;_ad :=0.0;_bbf :=0.0;for _dcf ,_cbf :=range _bb .Points {if _dcf ==0{_ba =_cbf .X ;_ffe =_cbf .X ;_ad =_cbf .Y ;_bbf =_cbf .Y ;continue ;};if _cbf .X < _ba {_ba =_cbf .X ;};if _cbf .X > _ffe {_ffe =_cbf .X ;};if _cbf .Y < _ad {_ad =_cbf .Y ;};if _cbf .Y > _bbf {_bbf =_cbf .Y ;};};_ccb .X =_ba ;_ccb .Y =_ad ;_ccb .Width =_ffe -_ba ;_ccb .Height =_bbf -_ad ;return _ccb ;};

// Copy returns a clone of the Bezier path.
func (_dc CubicBezierPath )Copy ()CubicBezierPath {_gc :=CubicBezierPath {};_gc .Curves =append (_gc .Curves ,_dc .Curves ...);return _gc ;};

// RemovePoint removes the point at the index specified by number from the
// path. The index is 1-based.
func (_ag Path )RemovePoint (number int )Path {if number < 1||number > len (_ag .Points ){return _ag ;};_ab :=number -1;_ag .Points =append (_ag .Points [:_ab ],_ag .Points [_ab +1:]...);return _ag ;};

// DrawBezierPathWithCreator makes the bezier path with the content creator.
// Adds the PDF commands to draw the path to the creator instance.
func DrawBezierPathWithCreator (bpath CubicBezierPath ,creator *_da .ContentCreator ){for _cge ,_fae :=range bpath .Curves {if _cge ==0{creator .Add_m (_fae .P0 .X ,_fae .P0 .Y );};creator .Add_c (_fae .P1 .X ,_fae .P1 .Y ,_fae .P2 .X ,_fae .P2 .Y ,_fae .P3 .X ,_fae .P3 .Y );};};

// Length returns the number of points in the path.
func (_ca Path )Length ()int {return len (_ca .Points )};

// AddVector adds vector to a point.
func (_bfa Point )AddVector (v Vector )Point {_bfa .X +=v .Dx ;_bfa .Y +=v .Dy ;return _bfa };

// Draw draws the rectangle. Can specify a graphics state (gsName) for setting opacity etc.
// Otherwise leave empty (""). Returns the content stream as a byte array, bounding box and an error on failure.
func (_bed Rectangle )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){_baf :=NewPath ();_baf =_baf .AppendPoint (NewPoint (0,0));_baf =_baf .AppendPoint (NewPoint (0,_bed .Height ));_baf =_baf .AppendPoint (NewPoint (_bed .Width ,_bed .Height ));_baf =_baf .AppendPoint (NewPoint (_bed .Width ,0));_baf =_baf .AppendPoint (NewPoint (0,0));if _bed .X !=0||_bed .Y !=0{_baf =_baf .Offset (_bed .X ,_bed .Y );};_gac :=_da .NewContentCreator ();_gac .Add_q ();if _bed .FillEnabled {_gac .Add_rg (_bed .FillColor .R (),_bed .FillColor .G (),_bed .FillColor .B ());};if _bed .BorderEnabled {_gac .Add_RG (_bed .BorderColor .R (),_bed .BorderColor .G (),_bed .BorderColor .B ());_gac .Add_w (_bed .BorderWidth );};if len (gsName )> 1{_gac .Add_gs (_c .PdfObjectName (gsName ));};DrawPathWithCreator (_baf ,_gac );_gac .Add_h ();if _bed .FillEnabled &&_bed .BorderEnabled {_gac .Add_B ();}else if _bed .FillEnabled {_gac .Add_f ();}else if _bed .BorderEnabled {_gac .Add_S ();};_gac .Add_Q ();return _gac .Bytes (),_baf .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Draw draws the polyline. A graphics state name can be specified for
// setting the polyline properties (e.g. setting the opacity). Otherwise leave
// empty (""). Returns the content stream as a byte array and the polyline
// bounding box.
func (_ggd Polyline )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){if _ggd .LineColor ==nil {_ggd .LineColor =_ff .NewPdfColorDeviceRGB (0,0,0);};_dcb :=NewPath ();for _ ,_agee :=range _ggd .Points {_dcb =_dcb .AppendPoint (_agee );};_af :=_da .NewContentCreator ();_af .Add_q ();_af .Add_RG (_ggd .LineColor .R (),_ggd .LineColor .G (),_ggd .LineColor .B ());_af .Add_w (_ggd .LineWidth );if len (gsName )> 1{_af .Add_gs (_c .PdfObjectName (gsName ));};DrawPathWithCreator (_dcb ,_af );_af .Add_S ();_af .Add_Q ();return _af .Bytes (),_dcb .GetBoundingBox ().ToPdfRectangle (),nil ;};

// Draw draws the composite Bezier curve. A graphics state name can be
// specified for setting the curve properties (e.g. setting the opacity).
// Otherwise leave empty (""). Returns the content stream as a byte array and
// the curve bounding box.
func (_bbe PolyBezierCurve )Draw (gsName string )([]byte ,*_ff .PdfRectangle ,error ){if _bbe .BorderColor ==nil {_bbe .BorderColor =_ff .NewPdfColorDeviceRGB (0,0,0);};_efd :=NewCubicBezierPath ();for _ ,_bff :=range _bbe .Curves {_efd =_efd .AppendCurve (_bff );};_fcb :=_da .NewContentCreator ();_fcb .Add_q ();_bbe .FillEnabled =_bbe .FillEnabled &&_bbe .FillColor !=nil ;if _bbe .FillEnabled {_fcb .Add_rg (_bbe .FillColor .R (),_bbe .FillColor .G (),_bbe .FillColor .B ());};_fcb .Add_RG (_bbe .BorderColor .R (),_bbe .BorderColor .G (),_bbe .BorderColor .B ());_fcb .Add_w (_bbe .BorderWidth );if len (gsName )> 1{_fcb .Add_gs (_c .PdfObjectName (gsName ));};for _ ,_efb :=range _efd .Curves {_fcb .Add_m (_efb .P0 .X ,_efb .P0 .Y );_fcb .Add_c (_efb .P1 .X ,_efb .P1 .Y ,_efb .P2 .X ,_efb .P2 .Y ,_efb .P3 .X ,_efb .P3 .Y );};if _bbe .FillEnabled {_fcb .Add_h ();_fcb .Add_B ();}else {_fcb .Add_S ();};_fcb .Add_Q ();return _fcb .Bytes (),_efd .GetBoundingBox ().ToPdfRectangle (),nil ;};