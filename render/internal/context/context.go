//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_bfa "github.com/unidoc/freetype/truetype";_d "github.com/unidoc/unipdf/v3/core";_bc "github.com/unidoc/unipdf/v3/internal/textencoding";_bbe "github.com/unidoc/unipdf/v3/internal/transform";_e "github.com/unidoc/unipdf/v3/model";
_bb "golang.org/x/image/font";_c "image";_bf "image/color";);func (_fcd *TextFont )WithSize (size float64 ,originalFont *_e .PdfFont )*TextFont {return &TextFont {Font :_fcd .Font ,Size :size ,_faa :_fcd ._faa ,_gdd :originalFont };};func (_gef *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_gef .Tm =_bbe .NewMatrix (a ,b ,c ,d ,e ,f );
_gef .Tlm =_gef .Tm .Clone ();};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_deb *TextFont )GetCharMetrics (code _bc .CharCode )(float64 ,float64 ,bool ){if _ea ,_dec :=_deb .Font .GetCharMetrics (code );_dec &&_ea .Wx !=0{return _ea .Wx ,_ea .Wy ,_dec ;
};if _deb ._gdd ==nil {return 0,0,false ;};_bfc ,_dcb :=_deb ._gdd .GetCharMetrics (code );return _bfc .Wx ,_bfc .Wy ,_dcb &&_bfc .Wx !=0;};type LineCap int ;func (_fca *TextState )ProcTD (tx ,ty float64 ){_fca .Tl =-ty ;_fca .ProcTd (tx ,ty )};func (_aac *TextFont )BytesToCharcodes (data []byte )[]_bc .CharCode {if _aac ._gdd !=nil {return _aac ._gdd .BytesToCharcodes (data );
};return _aac .Font .BytesToCharcodes (data );};func (_cdb *TextFont )CharcodeToRunes (charcode _bc .CharCode )(_bc .CharCode ,[]rune ){_fffb :=[]_bc .CharCode {charcode };if _cdb ._gdd ==nil ||_cdb ._gdd ==_cdb .Font {if _cdb .Font .IsSimple ()&&_cdb ._faa !=nil {if _aad :=_cdb ._faa .Index (rune (charcode ));
_aad > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_cdb .Font .CharcodesToUnicode (_fffb );};_cgfc :=_cdb ._gdd .CharcodesToUnicode (_fffb );_adc ,_ :=_cdb .Font .RunesToCharcodeBytes (_cgfc );_cge :=_cdb .Font .BytesToCharcodes (_adc );
_bgf :=charcode ;if len (_cge )> 0&&_cge [0]!=0{_bgf =_cge [0];};return _bgf ,_cgfc ;};type Pattern interface{ColorAt (_ef ,_cf int )_bf .Color ;};func NewTextFont (font *_e .PdfFont ,size float64 )(*TextFont ,error ){_eb :=font .FontDescriptor ();if _eb ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");
};_edb ,_ad :=_d .GetStream (_eb .FontFile2 );if !_ad {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_dbf ,_cb :=_d .DecodeStream (_edb );
if _cb !=nil {return nil ,_cb ;};_aa ,_cb :=_bfa .Parse (_dbf );if _cb !=nil {return nil ,_cb ;};return &TextFont {Font :font ,Size :size ,_faa :_aa },nil ;};type TextFont struct{Font *_e .PdfFont ;Size float64 ;_faa *_bfa .Font ;_gdd *_e .PdfFont ;};type TextState struct{Tc float64 ;
Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _bbe .Matrix ;Tlm _bbe .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type TextRenderingMode int ;func (_df *TextState )ProcTj (data []byte ,ctx Context ){_dda :=_df .Tf .Size ;_eaf :=_df .Th /100.0;
_eae :=_df .GlobalScale ;_cde :=_bbe .NewMatrix (_dda *_eaf ,0,0,_dda ,0,_df .Ts );_fdc :=ctx .Matrix ();_ggf :=_fdc .Clone ().Mult (_df .Tm .Clone ().Mult (_cde )).ScalingFactorY ();_cbf :=_df .Tf .NewFace (_ggf );_dcf :=_df .Tf .BytesToCharcodes (data );
for _ ,_gdcb :=range _dcf {_aeb ,_fcf :=_df .Tf .CharcodeToRunes (_gdcb );_bcb :=string (_fcf );if _bcb =="\u0000"{continue ;};_fbc :=_fdc .Clone ().Mult (_df .Tm .Clone ().Mult (_cde ));_da :=_fbc .ScalingFactorY ();_fbc =_fbc .Scale (1/_da ,-1/_da );
if _df .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_fbc );ctx .DrawString (_bcb ,_cbf ,0,0);ctx .SetMatrix (_fdc );};_ggab :=0.0;if _bcb =="\u0020"{_ggab =_df .Tw ;};_ggg ,_ ,_add :=_df .Tf .GetCharMetrics (_aeb );if _add {_ggg =_ggg *0.001*_dda ;
}else {_ggg ,_ =ctx .MeasureString (_bcb ,_cbf );_ggg =_ggg /_eae ;};_ead :=(_ggg +_df .Tc +_ggab )*_eaf ;_df .Tm =_df .Tm .Mult (_bbe .TranslationMatrix (_ead ,0));};};func (_ca *TextState )ProcTStar (){_ca .ProcTd (0,-_ca .Tl )};func (_ffb *TextState )ProcTd (tx ,ty float64 ){_ffb .Tlm .Concat (_bbe .TranslationMatrix (tx ,ty ));
_ffb .Tm =_ffb .Tlm .Clone ();};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_fac ,_acce :=_e .NewPdfFontFromTTFFile (filePath );if _acce !=nil {return nil ,_acce ;};return NewTextFont (_fac ,size );};func NewTextState ()TextState {return TextState {Th :100,Tm :_bbe .IdentityMatrix (),Tlm :_bbe .IdentityMatrix ()};
};func (_dba *TextState )ProcTf (font *TextFont ){_dba .Tf =font };type Context interface{Push ();Pop ();Matrix ()_bbe .Matrix ;SetMatrix (_a _bbe .Matrix );Translate (_bbeb ,_fa float64 );Scale (_bd ,_gb float64 );Rotate (_dc float64 );MoveTo (_ag ,_age float64 );
LineTo (_efa ,_bbb float64 );CubicTo (_dd ,_ff ,_dgf ,_cg ,_gd ,_bg float64 );QuadraticTo (_fb ,_ed ,_bbba ,_cgf float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_dgg float64 );SetLineCap (_fae LineCap );
SetLineJoin (_ge LineJoin );SetDash (_gf ...float64 );SetDashOffset (_aga float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_edf ,_gdc ,_db ,_fbd float64 );SetFillRGBA (_eff ,_edc ,_fe ,_af float64 );SetFillStyle (_gg Pattern );SetFillRule (_ac FillRule );
SetStrokeRGBA (_ae ,_ba ,_gfb ,_acc float64 );SetStrokeStyle (_fc Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_ce string ,_fab _bb .Face ,_fee ,_bfd float64 );MeasureString (_ab string ,_cd _bb .Face )(_fd ,_gga float64 );
DrawRectangle (_aef ,_gfe ,_ced ,_bbebd float64 );DrawImage (_fff _c .Image ,_gba ,_cef int );DrawImageAnchored (_dgd _c .Image ,_de ,_cgb int ,_ee ,_efab float64 );Height ()int ;Width ()int ;};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;
TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type FillRule int ;
type LineJoin int ;func (_bgg *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bgg .Tw =aw ;_bgg .Tc =ac ;_bgg .ProcQ (data ,ctx );};func (_efe *TextFont )NewFace (size float64 )_bb .Face {return _bfa .NewFace (_efe ._faa ,&_bfa .Options {Size :size });
};func (_ebb *TextState )Reset (){_ebb .Tm =_bbe .IdentityMatrix ();_ebb .Tlm =_bbe .IdentityMatrix ()};func (_ffbb *TextState )ProcQ (data []byte ,ctx Context ){_ffbb .ProcTStar ();_ffbb .ProcTj (data ,ctx )};type Gradient interface{Pattern ;AddColorStop (_f float64 ,_dg _bf .Color );
};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_gddf *TextState )Translate (tx ,ty float64 ){_gddf .Tm =_gddf .Tm .Mult (_bbe .TranslationMatrix (tx ,ty ));};