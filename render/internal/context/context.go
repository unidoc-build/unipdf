//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_a "errors";_c "github.com/golang/freetype/truetype";_aa "github.com/unidoc/unipdf/v3/core";_df "github.com/unidoc/unipdf/v3/internal/textencoding";_e "github.com/unidoc/unipdf/v3/internal/transform";_f "github.com/unidoc/unipdf/v3/model";
_ad "golang.org/x/image/font";_g "image";_b "image/color";);type LineCap int ;func (_afd *TextState )ProcTStar (){_afd .ProcTd (0,-_afd .Tl )};func (_eff *TextFont )GetCharMetrics (code _df .CharCode )(float64 ,float64 ,bool ){if _be ,_bde :=_eff .Font .GetCharMetrics (code );
_bde &&_be .Wx !=0{return _be .Wx ,_be .Wy ,_bde ;};if _eff ._fb ==nil {return 0,0,false ;};_aed ,_gd :=_eff ._fb .GetCharMetrics (code );return _aed .Wx ,_aed .Wy ,_gd &&_aed .Wx !=0;};type LineJoin int ;func (_edf *TextFont )NewFace (size float64 )_ad .Face {return _c .NewFace (_edf ._aaf ,&_c .Options {Size :size });
};func (_egc *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _ecc ,_bgca :=_egc .Font .GetRuneMetrics (r );_bgca &&_ecc .Wx !=0{return _ecc .Wx ,_ecc .Wy ,_bgca ;};if _egc ._fb ==nil {return 0,0,false ;};_ac ,_bfa :=_egc ._fb .GetRuneMetrics (r );
return _ac .Wx ,_ac .Wy ,_bfa &&_ac .Wx !=0;};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type Context interface{Push ();Pop ();Matrix ()_e .Matrix ;SetMatrix (_eg _e .Matrix );Translate (_bdb ,_ea float64 );Scale (_dfb ,_fd float64 );Rotate (_dd float64 );
MoveTo (_db ,_ef float64 );LineTo (_ec ,_cf float64 );CubicTo (_cc ,_ggb ,_ba ,_cd ,_fg ,_ca float64 );QuadraticTo (_cg ,_ae ,_efb ,_gfa float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_dc float64 );
SetLineCap (_cfe LineCap );SetLineJoin (_efg LineJoin );SetDash (_abe ...float64 );SetDashOffset (_bab float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_bg ,_fe ,_bb ,_af float64 );SetFillRGBA (_aeb ,_eb ,_eba ,_eaf float64 );SetFillStyle (_gc Pattern );
SetFillRule (_ed FillRule );SetStrokeRGBA (_ggg ,_bf ,_bag ,_cce float64 );SetStrokeStyle (_cgc Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_aba string ,_baa _ad .Face ,_dcd ,_cda float64 );MeasureString (_ddg string ,_cceg _ad .Face )(_cff ,_bfe float64 );
DrawRectangle (_afc ,_ge ,_ged ,_eda float64 );DrawImage (_gggg _g .Image ,_ce ,_gfd int );DrawImageAnchored (_ccc _g .Image ,_dfc ,_ggf int ,_bgc ,_fee float64 );Height ()int ;Width ()int ;};func (_bba *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_bba .Tw =aw ;
_bba .Tc =ac ;_bba .ProcQ (data ,ctx );};func (_aca *TextState )Translate (tx ,ty float64 ){_aca .Tm =_aca .Tm .Mult (_e .TranslationMatrix (tx ,ty ));};type Pattern interface{ColorAt (_gg ,_bd int )_b .Color ;};const (TextRenderingModeFill TextRenderingMode =iota ;
TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func NewTextFont (font *_f .PdfFont ,size float64 )(*TextFont ,error ){_fbd :=font .FontDescriptor ();
if _fbd ==nil {return nil ,_a .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_cb ,_bac :=_aa .GetStream (_fbd .FontFile2 );if !_bac {return nil ,_a .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_eaa ,_gea :=_aa .DecodeStream (_cb );if _gea !=nil {return nil ,_gea ;};_geac ,_gea :=_c .Parse (_eaa );if _gea !=nil {return nil ,_gea ;};return &TextFont {Font :font ,Size :size ,_aaf :_geac },nil ;};func (_aaa *TextFont )CharcodesToUnicode (charcodes []_df .CharCode )[]rune {if _aaa ._fb !=nil {return _aaa ._fb .CharcodesToUnicode (charcodes );
};return _aaa .Font .CharcodesToUnicode (charcodes );};func (_dbe *TextState )Reset (){_dbe .Tm =_e .IdentityMatrix ();_dbe .Tlm =_e .IdentityMatrix ()};type FillRule int ;func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_cdg ,_caf :=_f .NewPdfFontFromTTFFile (filePath );
if _caf !=nil {return nil ,_caf ;};return NewTextFont (_cdg ,size );};type TextRenderingMode int ;type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _e .Matrix ;Tlm _e .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;
};type Gradient interface{Pattern ;AddColorStop (_gf float64 ,_ab _b .Color );};func (_ebf *TextState )ProcQ (data []byte ,ctx Context ){_ebf .ProcTStar ();_ebf .ProcTj (data ,ctx )};func (_gggb *TextState )ProcTf (font *TextFont ){_gggb .Tf =font };type TextFont struct{Font *_f .PdfFont ;
Size float64 ;_aaf *_c .Font ;_fb *_f .PdfFont ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_ega *TextState )ProcTd (tx ,ty float64 ){_ega .Tlm .Concat (_e .TranslationMatrix (tx ,ty ));_ega .Tm =_ega .Tlm .Clone ();};const (LineCapRound LineCap =iota ;
LineCapButt ;LineCapSquare ;);func (_fc *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_fc .Tm =_e .NewMatrix (a ,b ,c ,d ,e ,f );_fc .Tlm =_fc .Tm .Clone ();};func NewTextState ()TextState {return TextState {Th :100,Tm :_e .IdentityMatrix (),Tlm :_e .IdentityMatrix ()};
};func (_gb *TextState )ProcTj (data []byte ,ctx Context ){_cffb :=_gb .Tf .Size ;_bdg :=_gb .Th /100.0;_gedc :=_gb .GlobalScale ;_ceb :=_e .NewMatrix (_cffb *_bdg ,0,0,_cffb ,0,_gb .Ts );_gfb :=ctx .Matrix ();_dg :=_gfb .Clone ().Mult (_gb .Tm .Clone ().Mult (_ceb )).ScalingFactorY ();
_ccce :=_gb .Tf .NewFace (_dg );_bc :=_gb .Tf .BytesToCharcodes (data );_cec :=_gb .Tf .CharcodesToUnicode (_bc );for _acd ,_eac :=range _cec {if _eac =='\x00'{continue ;};_edaa :=_gfb .Clone ().Mult (_gb .Tm .Clone ().Mult (_ceb ));_gcd :=_edaa .ScalingFactorY ();
_edaa =_edaa .Scale (1/_gcd ,-1/_gcd );if _gb .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_edaa );ctx .DrawString (string (_eac ),_ccce ,0,0);ctx .SetMatrix (_gfb );};_cde :=0.0;if _eac ==' '{_cde =_gb .Tw ;};_dgb ,_ ,_gda :=_gb .Tf .GetRuneMetrics (_eac );
if !_gda &&_acd < len (_bc ){_dgb ,_ ,_gda =_gb .Tf .GetCharMetrics (_bc [_acd ]);};if _gda {_dgb =_dgb *0.001*_cffb ;}else {_dgb ,_ =ctx .MeasureString (string (_eac ),_ccce );_dgb =_dgb /_gedc ;};_fed :=(_dgb +_gb .Tc +_cde )*_bdg ;_gb .Tm =_gb .Tm .Mult (_e .TranslationMatrix (_fed ,0));
};};func (_gfdg *TextFont )BytesToCharcodes (data []byte )[]_df .CharCode {if _gfdg ._fb !=nil {return _gfdg ._fb .BytesToCharcodes (data );};return _gfdg .Font .BytesToCharcodes (data );};func (_da *TextState )ProcTD (tx ,ty float64 ){_da .Tl =-ty ;_da .ProcTd (tx ,ty )};
func (_abf *TextFont )WithSize (size float64 ,originalFont *_f .PdfFont )*TextFont {return &TextFont {Font :_abf .Font ,Size :size ,_aaf :_abf ._aaf ,_fb :originalFont };};