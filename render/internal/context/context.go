//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_f "errors";_gd "github.com/golang/freetype/truetype";_ed "github.com/unidoc/unipdf/v3/core";_eb "github.com/unidoc/unipdf/v3/internal/textencoding";_fe "github.com/unidoc/unipdf/v3/internal/transform";_b "github.com/unidoc/unipdf/v3/model";_g "golang.org/x/image/font";_c "image";_a "image/color";);func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bcg ,_cbg :=_b .NewPdfFontFromTTFFile (filePath );if _cbg !=nil {return nil ,_cbg ;};return NewTextFont (_bcg ,size );};func (_bea *TextFont )CharcodesToUnicode (charcodes []_eb .CharCode )[]rune {if _bea ._edd !=nil {return _bea ._edd .CharcodesToUnicode (charcodes );};return _bea .Font .CharcodesToUnicode (charcodes );};func (_gdd *TextState )ProcTd (tx ,ty float64 ){_gdd .Tlm .Concat (_fe .TranslationMatrix (tx ,-ty ));_gdd .Tm =_gdd .Tlm .Clone ();};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _fe .Matrix ;Tlm _fe .Matrix ;};type LineJoin int ;const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_aad *TextState )ProcQ (data []byte ,ctx Context ){_aad .ProcTStar ();_aad .ProcTj (data ,ctx )};type FillRule int ;type LineCap int ;func (_cdd *TextState )ProcTStar (){_cdd .ProcTd (0,-_cdd .Tl )};func NewTextFont (font *_b .PdfFont ,size float64 )(*TextFont ,error ){_gc :=font .FontDescriptor ();if _gc ==nil {return nil ,_f .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_cbe ,_eg :=_ed .GetStream (_gc .FontFile2 );if !_eg {return nil ,_f .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_ced ,_df :=_ed .DecodeStream (_cbe );if _df !=nil {return nil ,_df ;};_ebc ,_df :=_gd .Parse (_ced );if _df !=nil {return nil ,_df ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_gd .NewFace (_ebc ,&_gd .Options {Size :size }),Size :size ,_bgf :_ebc },nil ;};func (_eag *TextState )ProcTj (data []byte ,ctx Context ){_gf :=_eag .Tf .Size ;_gfb :=_eag .Th /100.0;_fga :=_fe .NewMatrix (_gf *_gfb ,0,0,_gf ,0,_eag .Ts );_ga :=_eag .Tf .CharcodesToUnicode (_eag .Tf .BytesToCharcodes (data ));for _ ,_fgad :=range _ga {if _fgad =='\x00'{continue ;};_ac :=_eag .Tm .Clone ();_eag .Tm .Concat (_fga );_fcdd ,_cbeb :=_eag .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_fgad ),_fcdd ,_cbeb );ctx .Scale (1,-1);_cad :=0.0;if _fgad ==' '{_cad =_eag .Tw ;};var _cf float64 ;if _dg ,_ ,_ecc :=_eag .Tf .GetRuneMetrics (_fgad );_ecc {_cf =_dg *0.001*_gf ;}else {_cf ,_ =ctx .MeasureString (string (_fgad ));};_eac :=(_cf +_eag .Tc +_cad )*_gfb ;_eag .Tm =_fe .TranslationMatrix (_eac ,0).Mult (_ac );};};func (_ab *TextState )Translate (tx ,ty float64 ){_ab .Tm =_fe .TranslationMatrix (tx ,ty ).Mult (_ab .Tm )};func (_ega *TextFont )GetCharMetrics (code _eb .CharCode )(float64 ,float64 ,bool ){if _bae ,_gda :=_ega .Font .GetCharMetrics (code );_gda &&_bae .Wx !=0{return _bae .Wx ,_bae .Wy ,_gda ;};if _ega ._edd ==nil {return 0,0,false ;};_cbf ,_ebd :=_ega ._edd .GetCharMetrics (code );return _cbf .Wx ,_cbf .Wy ,_ebd &&_cbf .Wx !=0;};func (_ff *TextFont )BytesToCharcodes (data []byte )[]_eb .CharCode {if _ff ._edd !=nil {return _ff ._edd .BytesToCharcodes (data );};return _ff .Font .BytesToCharcodes (data );};func (_ceed *TextFont )WithSize (size float64 ,originalFont *_b .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_ceed .Font ,Face :_gd .NewFace (_ceed ._bgf ,&_gd .Options {Size :size }),Size :size ,_bgf :_ceed ._bgf ,_edd :originalFont };};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_fb *TextState )ProcTf (font *TextFont ){_fb .Tf =font };func (_gde *TextState )ProcTD (tx ,ty float64 ){_gde .Tl =-ty ;_gde .ProcTd (tx ,ty )};type Gradient interface{Pattern ;AddColorStop (_ee float64 ,_ce _a .Color );};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_gce *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_gce .Tm =_fe .NewMatrix (a ,b ,c ,d ,e ,-f );_gce .Tlm =_gce .Tm .Clone ();};type TextFont struct{Font *_b .PdfFont ;Face _g .Face ;Size float64 ;_bgf *_gd .Font ;_edd *_b .PdfFont ;};func (_fgae *TextState )Reset (){_fgae .Tm =_fe .IdentityMatrix ();_fgae .Tlm =_fe .IdentityMatrix ()};func (_fa *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_fa .Tw =aw ;_fa .Tc =ac ;_fa .ProcQ (data ,ctx );};func (_cbb *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _adba ,_gbd :=_cbb .Font .GetRuneMetrics (r );_gbd &&_adba .Wx !=0{return _adba .Wx ,_adba .Wy ,_gbd ;};if _cbb ._edd ==nil {return 0,0,false ;};_fef ,_ebg :=_cbb ._edd .GetRuneMetrics (r );return _fef .Wx ,_fef .Wy ,_ebg &&_fef .Wx !=0;};type Context interface{Push ();Pop ();Matrix ()_fe .Matrix ;SetMatrix (_ca _fe .Matrix );Translate (_cb ,_af float64 );Scale (_cd ,_cg float64 );Rotate (_fc float64 );MoveTo (_cc ,_da float64 );LineTo (_fd ,_cdf float64 );CubicTo (_cbc ,_fdc ,_dc ,_bd ,_ag ,_cda float64 );QuadraticTo (_ea ,_fg ,_caa ,_bc float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_fec float64 );SetLineCap (_be LineCap );SetLineJoin (_ec LineJoin );SetDash (_aa ...float64 );SetDashOffset (_gb float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_cee ,_fdd ,_eba ,_fcd float64 );SetFillRGBA (_ef ,_beb ,_cdad ,_ba float64 );SetFillStyle (_cce Pattern );SetFillRule (_ecf FillRule );SetStrokeRGBA (_dd ,_ad ,_ecd ,_bg float64 );SetStrokeStyle (_gba Pattern );TextState ()*TextState ;DrawString (_bb string ,_ge ,_fgd float64 );MeasureString (_cgd string )(_geb ,_fee float64 );DrawRectangle (_dce ,_ccf ,_adb ,_cea float64 );DrawImage (_agc _c .Image ,_ceb ,_cdg int );DrawImageAnchored (_cac _c .Image ,_agg ,_cgb int ,_gdb ,_adc float64 );Height ()int ;Width ()int ;};func NewTextState ()*TextState {return &TextState {Th :100,Tm :_fe .IdentityMatrix (),Tlm :_fe .IdentityMatrix ()};};type Pattern interface{ColorAt (_d ,_bf int )_a .Color ;};