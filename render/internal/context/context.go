//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_a "errors";_cc "github.com/golang/freetype/truetype";_ae "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/internal/textencoding";_bc "github.com/unidoc/unipdf/v3/internal/transform";_cg "github.com/unidoc/unipdf/v3/model";_ad "golang.org/x/image/font";_c "image";_e "image/color";);const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_ggc *TextFont )WithSize (size float64 ,originalFont *_cg .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_ggc .Font ,Face :_cc .NewFace (_ggc ._feg ,&_cc .Options {Size :size }),Size :size ,_feg :_ggc ._feg ,_bfd :originalFont };};func (_dd *TextState )ProcTd (tx ,ty float64 ){_dd .Tlm .Concat (_bc .TranslationMatrix (tx ,-ty ));_dd .Tm =_dd .Tlm .Clone ();};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);func (_efc *TextState )ProcTf (font *TextFont ){_efc .Tf =font };func (_eeb *TextState )Translate (tx ,ty float64 ){_eeb .Tm =_bc .TranslationMatrix (tx ,ty ).Mult (_eeb .Tm );};func NewTextState ()*TextState {return &TextState {Th :100,Tm :_bc .IdentityMatrix (),Tlm :_bc .IdentityMatrix ()};};func (_abe *TextFont )BytesToCharcodes (data []byte )[]_g .CharCode {if _abe ._bfd !=nil {return _abe ._bfd .BytesToCharcodes (data );};return _abe .Font .BytesToCharcodes (data );};func (_cfg *TextState )ProcQ (data []byte ,ctx Context ){_cfg .ProcTStar ();_cfg .ProcTj (data ,ctx )};func (_ggd *TextFont )GetCharMetrics (code _g .CharCode )(float64 ,float64 ,bool ){if _aab ,_bca :=_ggd .Font .GetCharMetrics (code );_bca &&_aab .Wx !=0{return _aab .Wx ,_aab .Wy ,_bca ;};if _ggd ._bfd ==nil {return 0,0,false ;};_cgb ,_acb :=_ggd ._bfd .GetCharMetrics (code );return _cgb .Wx ,_cgb .Wy ,_acb &&_cgb .Wx !=0;};type Gradient interface{Pattern ;AddColorStop (_fb float64 ,_cf _e .Color );};func NewTextFont (font *_cg .PdfFont ,size float64 )(*TextFont ,error ){_dea :=font .FontDescriptor ();if _dea ==nil {return nil ,_a .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_eb ,_cd :=_ae .GetStream (_dea .FontFile2 );if !_cd {return nil ,_a .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_dae ,_gf :=_ae .DecodeStream (_eb );if _gf !=nil {return nil ,_gf ;};_bbg ,_gf :=_cc .Parse (_dae );if _gf !=nil {return nil ,_gf ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_cc .NewFace (_bbg ,&_cc .Options {Size :size }),Size :size ,_feg :_bbg },nil ;};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _bc .Matrix ;Tlm _bc .Matrix ;};func (_ggb *TextState )ProcTD (tx ,ty float64 ){_ggb .Tl =-ty ;_ggb .ProcTd (tx ,ty )};func (_gbf *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _ege ,_af :=_gbf .Font .GetRuneMetrics (r );_af &&_ege .Wx !=0{return _ege .Wx ,_ege .Wy ,_af ;};if _gbf ._bfd ==nil {return 0,0,false ;};_eaf ,_fbc :=_gbf ._bfd .GetRuneMetrics (r );return _eaf .Wx ,_eaf .Wy ,_fbc &&_eaf .Wx !=0;};type LineCap int ;func (_cfb *TextFont )CharcodesToUnicode (charcodes []_g .CharCode )[]rune {if _cfb ._bfd !=nil {return _cfb ._bfd .CharcodesToUnicode (charcodes );};return _cfb .Font .CharcodesToUnicode (charcodes );};type TextFont struct{Font *_cg .PdfFont ;Face _ad .Face ;Size float64 ;_feg *_cc .Font ;_bfd *_cg .PdfFont ;};type Context interface{Push ();Pop ();Matrix ()_bc .Matrix ;SetMatrix (_adg _bc .Matrix );Translate (_cb ,_d float64 );Scale (_gc ,_aa float64 );Rotate (_cfe float64 );MoveTo (_bf ,_gd float64 );LineTo (_cba ,_fc float64 );CubicTo (_df ,_bcb ,_dfe ,_ee ,_fg ,_fgc float64 );QuadraticTo (_ab ,_aac ,_ac ,_dg float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_ca float64 );SetLineCap (_fba LineCap );SetLineJoin (_eg LineJoin );SetDash (_ge ...float64 );SetDashOffset (_ga float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_cgf ,_ag ,_gb ,_aed float64 );SetFillRGBA (_dff ,_da ,_fcb ,_cgc float64 );SetFillStyle (_age Pattern );SetFillRule (_cbb FillRule );SetStrokeRGBA (_abd ,_fd ,_ccg ,_bb float64 );SetStrokeStyle (_fe Pattern );TextState ()*TextState ;DrawString (_cag string ,_de ,_ccd float64 );MeasureString (_ef string )(_fda ,_aee float64 );DrawRectangle (_dc ,_ff ,_gg ,_cbg float64 );DrawImage (_gga _c .Image ,_ea ,_bbe int );DrawImageAnchored (_ec _c .Image ,_fdc ,_dac int ,_bbd ,_be float64 );Height ()int ;Width ()int ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_ggf *TextState )ProcTStar (){_ggf .ProcTd (0,-_ggf .Tl )};func (_egb *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_egb .Tm =_bc .NewMatrix (a ,b ,c ,d ,e ,-f );_egb .Tlm =_egb .Tm .Clone ();};func (_bfa *TextState )Reset (){_bfa .Tm =_bc .IdentityMatrix ();_bfa .Tlm =_bc .IdentityMatrix ()};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_beb ,_gef :=_cg .NewPdfFontFromTTFFile (filePath );if _gef !=nil {return nil ,_gef ;};return NewTextFont (_beb ,size );};type LineJoin int ;func (_ebd *TextState )ProcTj (data []byte ,ctx Context ){_dga :=_ebd .Tf .Size ;_ccdb :=_ebd .Th /100.0;_feb :=_bc .NewMatrix (_dga *_ccdb ,0,0,_dga ,0,_ebd .Ts );_dge :=_ebd .Tf .CharcodesToUnicode (_ebd .Tf .BytesToCharcodes (data ));for _ ,_fef :=range _dge {if _fef =='\x00'{continue ;};_caa :=_ebd .Tm .Clone ();_ebd .Tm .Concat (_feb );_aace ,_dcb :=_ebd .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_fef ),_aace ,_dcb );ctx .Scale (1,-1);_fgd :=0.0;if _fef ==' '{_fgd =_ebd .Tw ;};var _acf float64 ;if _dec ,_ ,_ba :=_ebd .Tf .GetRuneMetrics (_fef );_ba {_acf =_dec *0.001*_dga ;}else {_acf ,_ =ctx .MeasureString (string (_fef ));};_cbac :=(_acf +_ebd .Tc +_fgd )*_ccdb ;_ebd .Tm =_bc .TranslationMatrix (_cbac ,0).Mult (_caa );};};type Pattern interface{ColorAt (_f ,_bg int )_e .Color ;};func (_dcd *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_dcd .Tw =aw ;_dcd .Tc =ac ;_dcd .ProcQ (data ,ctx );};type FillRule int ;