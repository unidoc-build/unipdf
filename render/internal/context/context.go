//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_g "errors";_eb "github.com/golang/freetype/truetype";_b "github.com/unidoc/unipdf/v3/core";_ca "github.com/unidoc/unipdf/v3/internal/textencoding";_ef "github.com/unidoc/unipdf/v3/internal/transform";_gd "github.com/unidoc/unipdf/v3/model";_d "golang.org/x/image/font";_e "image";_c "image/color";);type TextFont struct{Font *_gd .PdfFont ;Face _d .Face ;Size float64 ;_ced *_eb .Font ;_fed *_gd .PdfFont ;};const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _ef .Matrix ;Tlm _ef .Matrix ;};func (_gff *TextFont )BytesToCharcodes (data []byte )[]_ca .CharCode {if _gff ._fed !=nil {return _gff ._fed .BytesToCharcodes (data );};return _gff .Font .BytesToCharcodes (data );};func NewTextState ()*TextState {return &TextState {Th :100,Tm :_ef .IdentityMatrix (),Tlm :_ef .IdentityMatrix ()};};func (_baa *TextState )ProcTf (font *TextFont ){_baa .Tf =font };func (_dfbe *TextState )ProcQ (data []byte ,ctx Context ){_dfbe .ProcTStar ();_dfbe .ProcTj (data ,ctx )};func (_ecf *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_ecf .Tm =_ef .NewMatrix (a ,b ,c ,d ,e ,-f );_ecf .Tlm =_ecf .Tm .Clone ();};func (_bdbd *TextState )ProcTStar (){_bdbd .ProcTd (0,-_bdbd .Tl )};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type FillRule int ;func (_cgg *TextState )ProcTj (data []byte ,ctx Context ){_gag :=_cgg .Tf .Size ;_cae :=_cgg .Th /100.0;_bca :=_ef .NewMatrix (_gag *_cae ,0,0,_gag ,0,_cgg .Ts );_bag :=_cgg .Tf .CharcodesToUnicode (_cgg .Tf .BytesToCharcodes (data ));for _ ,_fba :=range _bag {if _fba =='\x00'{continue ;};_cegb :=_cgg .Tm .Clone ();_cgg .Tm .Concat (_bca );_daac ,_cbc :=_cgg .Tm .Transform (0,0);ctx .Scale (1,-1);ctx .DrawString (string (_fba ),_daac ,_cbc );ctx .Scale (1,-1);_fa :=0.0;if _fba ==' '{_fa =_cgg .Tw ;};var _bdba float64 ;if _dgf ,_ ,_ebd :=_cgg .Tf .GetRuneMetrics (_fba );_ebd {_bdba =_dgf *0.001*_gag ;}else {_bdba ,_ =ctx .MeasureString (string (_fba ));};_aaf :=(_bdba +_cgg .Tc +_fa )*_cae ;_cgg .Tm =_ef .TranslationMatrix (_aaf ,0).Mult (_cegb );};};func (_bdb *TextFont )CharcodesToUnicode (charcodes []_ca .CharCode )[]rune {if _bdb ._fed !=nil {return _bdb ._fed .CharcodesToUnicode (charcodes );};return _bdb .Font .CharcodesToUnicode (charcodes );};type LineCap int ;type LineJoin int ;func (_bcc *TextState )Translate (tx ,ty float64 ){_bcc .Tm =_ef .TranslationMatrix (tx ,ty ).Mult (_bcc .Tm );};type Gradient interface{Pattern ;AddColorStop (_fc float64 ,_db _c .Color );};func (_bbe *TextState )Reset (){_bbe .Tm =_ef .IdentityMatrix ();_bbe .Tlm =_ef .IdentityMatrix ()};type Context interface{Push ();Pop ();Matrix ()_ef .Matrix ;SetMatrix (_bf _ef .Matrix );Translate (_bgf ,_be float64 );Scale (_fcb ,_ebb float64 );Rotate (_ba float64 );MoveTo (_gf ,_a float64 );LineTo (_ebf ,_beb float64 );CubicTo (_ff ,_efa ,_af ,_ag ,_cb ,_bfa float64 );QuadraticTo (_ea ,_da ,_daa ,_ebc float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_df float64 );SetLineCap (_ee LineCap );SetLineJoin (_fg LineJoin );SetDash (_fgg ...float64 );SetDashOffset (_cg float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_agd ,_ge ,_fgb ,_dde float64 );SetFillRGBA (_ddc ,_ce ,_dbg ,_ffb float64 );SetFillStyle (_gee Pattern );SetFillRule (_aa FillRule );SetStrokeRGBA (_fce ,_geg ,_eg ,_bga float64 );SetStrokeStyle (_eab Pattern );TextState ()*TextState ;DrawString (_de string ,_fd ,_dg float64 );MeasureString (_fe string )(_fb ,_bd float64 );DrawRectangle (_gb ,_bad ,_ab ,_efc float64 );DrawImage (_ga _e .Image ,_geb ,_ed int );DrawImageAnchored (_gfc _e .Image ,_bc ,_gg int ,_edf ,_fcbf float64 );Height ()int ;Width ()int ;};func (_ceg *TextState )ProcTD (tx ,ty float64 ){_ceg .Tl =-ty ;_ceg .ProcTd (tx ,ty )};func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_ggf ,_bb :=_gd .NewPdfFontFromTTFFile (filePath );if _bb !=nil {return nil ,_bb ;};return NewTextFont (_ggf ,size );};func NewTextFont (font *_gd .PdfFont ,size float64 )(*TextFont ,error ){_cec :=font .FontDescriptor ();if _cec ==nil {return nil ,_g .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_gc ,_bgag :=_b .GetStream (_cec .FontFile2 );if !_bgag {return nil ,_g .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};_gea ,_ege :=_b .DecodeStream (_gc );if _ege !=nil {return nil ,_ege ;};_bae ,_ege :=_eb .Parse (_gea );if _ege !=nil {return nil ,_ege ;};if size <=1{size =10;};return &TextFont {Font :font ,Face :_eb .NewFace (_bae ,&_eb .Options {Size :size }),Size :size ,_ced :_bae },nil ;};const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_cgc *TextFont )GetRuneMetrics (r rune )(float64 ,float64 ,bool ){if _ec ,_gdc :=_cgc .Font .GetRuneMetrics (r );_gdc &&_ec .Wx !=0{return _ec .Wx ,_ec .Wy ,_gdc ;};if _cgc ._fed ==nil {return 0,0,false ;};_gge ,_dgb :=_cgc ._fed .GetRuneMetrics (r );return _gge .Wx ,_gge .Wy ,_dgb &&_gge .Wx !=0;};type Pattern interface{ColorAt (_bg ,_dd int )_c .Color ;};func (_fde *TextFont )GetCharMetrics (code _ca .CharCode )(float64 ,float64 ,bool ){if _fdf ,_eee :=_fde .Font .GetCharMetrics (code );_eee &&_fdf .Wx !=0{return _fdf .Wx ,_fdf .Wy ,_eee ;};if _fde ._fed ==nil {return 0,0,false ;};_cgd ,_bcf :=_fde ._fed .GetCharMetrics (code );return _cgd .Wx ,_cgd .Wy ,_bcf &&_cgd .Wx !=0;};func (_baf *TextFont )WithSize (size float64 ,originalFont *_gd .PdfFont )*TextFont {if size <=1{size =10;};return &TextFont {Font :_baf .Font ,Face :_eb .NewFace (_baf ._ced ,&_eb .Options {Size :size }),Size :size ,_ced :_baf ._ced ,_fed :originalFont };};func (_beg *TextState )ProcTd (tx ,ty float64 ){_beg .Tlm .Concat (_ef .TranslationMatrix (tx ,-ty ));_beg .Tm =_beg .Tlm .Clone ();};func (_cf *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_cf .Tw =aw ;_cf .Tc =ac ;_cf .ProcQ (data ,ctx );};