//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package context ;import (_f "errors";_dg "github.com/unidoc/freetype/truetype";_ff "github.com/unidoc/unipdf/v3/core";_eg "github.com/unidoc/unipdf/v3/internal/textencoding";_d "github.com/unidoc/unipdf/v3/internal/transform";_feg "github.com/unidoc/unipdf/v3/model";
_fe "golang.org/x/image/font";_a "image";_e "image/color";);func (_abcb *TextState )ProcTj (data []byte ,ctx Context ){_acge :=_abcb .Tf .Size ;_gff :=_abcb .Th /100.0;_de :=_abcb .GlobalScale ;_fed :=_d .NewMatrix (_acge *_gff ,0,0,_acge ,0,_abcb .Ts );
_cfe :=ctx .Matrix ();_bec :=_cfe .Clone ().Mult (_abcb .Tm .Clone ().Mult (_fed )).ScalingFactorY ();_fd :=_abcb .Tf .NewFace (_bec );_efg :=_abcb .Tf .BytesToCharcodes (data );for _ ,_ae :=range _efg {_bed ,_egg :=_abcb .Tf .CharcodeToRunes (_ae );_cg :=string (_egg );
if _cg =="\u0000"{continue ;};_bdg :=_cfe .Clone ().Mult (_abcb .Tm .Clone ().Mult (_fed ));_dfg :=_bdg .ScalingFactorY ();_bdg =_bdg .Scale (1/_dfg ,-1/_dfg );if _abcb .Tr !=TextRenderingModeInvisible {ctx .SetMatrix (_bdg );ctx .DrawString (_cg ,_fd ,0,0);
ctx .SetMatrix (_cfe );};_bca :=0.0;if _cg =="\u0020"{_bca =_abcb .Tw ;};_dag ,_ ,_dbf :=_abcb .Tf .GetCharMetrics (_bed );if _dbf {_dag =_dag *0.001*_acge ;}else {_dag ,_ =ctx .MeasureString (_cg ,_fd );_dag =_dag /_de ;};_cdb :=(_dag +_abcb .Tc +_bca )*_gff ;
_abcb .Tm =_abcb .Tm .Mult (_d .TranslationMatrix (_cdb ,0));};};func (_gdd *TextFont )NewFace (size float64 )_fe .Face {return _dg .NewFace (_gdd ._ab ,&_dg .Options {Size :size });};func NewTextFont (font *_feg .PdfFont ,size float64 )(*TextFont ,error ){_fcg :=font .FontDescriptor ();
if _fcg ==nil {return nil ,_f .New ("\u0063\u006fu\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0067\u0065\u0074\u0020\u0066\u006f\u006e\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069pt\u006f\u0072");};_ede ,_acg :=_ff .GetStream (_fcg .FontFile2 );if !_acg {return nil ,_f .New ("\u006di\u0073\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u0020f\u0069\u006c\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};_cfd ,_caeg :=_ff .DecodeStream (_ede );if _caeg !=nil {return nil ,_caeg ;};_gbe ,_caeg :=_dg .Parse (_cfd );if _caeg !=nil {return nil ,_caeg ;};return &TextFont {Font :font ,Size :size ,_ab :_gbe },nil ;};type LineCap int ;type TextFont struct{Font *_feg .PdfFont ;
Size float64 ;_ab *_dg .Font ;_ggge *_feg .PdfFont ;};func (_ba *TextFont )GetCharMetrics (code _eg .CharCode )(float64 ,float64 ,bool ){if _abc ,_gc :=_ba .Font .GetCharMetrics (code );_gc &&_abc .Wx !=0{return _abc .Wx ,_abc .Wy ,_gc ;};if _ba ._ggge ==nil {return 0,0,false ;
};_dfa ,_acb :=_ba ._ggge .GetCharMetrics (code );return _dfa .Wx ,_dfa .Wy ,_acb &&_dfa .Wx !=0;};const (TextRenderingModeFill TextRenderingMode =iota ;TextRenderingModeStroke ;TextRenderingModeFillStroke ;TextRenderingModeInvisible ;TextRenderingModeFillClip ;
TextRenderingModeStrokeClip ;TextRenderingModeFillStrokeClip ;TextRenderingModeClip ;);func (_faf *TextState )ProcQ (data []byte ,ctx Context ){_faf .ProcTStar ();_faf .ProcTj (data ,ctx )};func (_fgb *TextState )Reset (){_fgb .Tm =_d .IdentityMatrix ();
_fgb .Tlm =_d .IdentityMatrix ()};type Context interface{Push ();Pop ();Matrix ()_d .Matrix ;SetMatrix (_gg _d .Matrix );Translate (_eb ,_df float64 );Scale (_ed ,_b float64 );Rotate (_dge float64 );MoveTo (_dged ,_ad float64 );LineTo (_cc ,_fc float64 );
CubicTo (_dd ,_ea ,_ggg ,_aa ,_ddc ,_bc float64 );QuadraticTo (_db ,_ag ,_ac ,_bd float64 );NewSubPath ();ClosePath ();ClearPath ();Clip ();ClipPreserve ();ResetClip ();LineWidth ()float64 ;SetLineWidth (_gf float64 );SetLineCap (_ebg LineCap );SetLineJoin (_ebb LineJoin );
SetDash (_cf ...float64 );SetDashOffset (_fa float64 );Fill ();FillPreserve ();Stroke ();StrokePreserve ();SetRGBA (_ee ,_bdf ,_ca ,_ec float64 );SetFillRGBA (_dgf ,_cae ,_gb ,_cb float64 );SetFillStyle (_fac Pattern );SetFillRule (_dfe FillRule );SetStrokeRGBA (_ccg ,_eaf ,_ead ,_eda float64 );
SetStrokeStyle (_dga Pattern );FillPattern ()Pattern ;StrokePattern ()Pattern ;TextState ()*TextState ;DrawString (_af string ,_cfc _fe .Face ,_fea ,_be float64 );MeasureString (_feb string ,_cce _fe .Face )(_ccd ,_egf float64 );DrawRectangle (_ffb ,_ef ,_cfcf ,_ddg float64 );
DrawImage (_ce _a .Image ,_fag ,_acc int );DrawImageAnchored (_eee _a .Image ,_cac ,_ggb int ,_cca ,_beb float64 );Height ()int ;Width ()int ;};func (_bdfd *TextFont )BytesToCharcodes (data []byte )[]_eg .CharCode {if _bdfd ._ggge !=nil {return _bdfd ._ggge .BytesToCharcodes (data );
};return _bdfd .Font .BytesToCharcodes (data );};type LineJoin int ;const (FillRuleWinding FillRule =iota ;FillRuleEvenOdd ;);func (_adff *TextState )ProcDQ (data []byte ,aw ,ac float64 ,ctx Context ){_adff .Tw =aw ;_adff .Tc =ac ;_adff .ProcQ (data ,ctx );
};func (_gaf *TextState )Translate (tx ,ty float64 ){_gaf .Tm =_gaf .Tm .Mult (_d .TranslationMatrix (tx ,ty ));};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;);type Pattern interface{ColorAt (_c ,_ge int )_e .Color ;};type FillRule int ;type TextRenderingMode int ;
func NewTextFontFromPath (filePath string ,size float64 )(*TextFont ,error ){_bb ,_dfec :=_feg .NewPdfFontFromTTFFile (filePath );if _dfec !=nil {return nil ,_dfec ;};return NewTextFont (_bb ,size );};func (_ffg *TextState )ProcTm (a ,b ,c ,d ,e ,f float64 ){_ffg .Tm =_d .NewMatrix (a ,b ,c ,d ,e ,f );
_ffg .Tlm =_ffg .Tm .Clone ();};func (_fg *TextState )ProcTd (tx ,ty float64 ){_fg .Tlm .Concat (_d .TranslationMatrix (tx ,ty ));_fg .Tm =_fg .Tlm .Clone ();};func (_eab *TextState )ProcTD (tx ,ty float64 ){_eab .Tl =-ty ;_eab .ProcTd (tx ,ty )};func (_ga *TextFont )WithSize (size float64 ,originalFont *_feg .PdfFont )*TextFont {return &TextFont {Font :_ga .Font ,Size :size ,_ab :_ga ._ab ,_ggge :originalFont };
};type TextState struct{Tc float64 ;Tw float64 ;Th float64 ;Tl float64 ;Tf *TextFont ;Ts float64 ;Tm _d .Matrix ;Tlm _d .Matrix ;Tr TextRenderingMode ;GlobalScale float64 ;};type Gradient interface{Pattern ;AddColorStop (_gec float64 ,_gd _e .Color );};
const (LineCapRound LineCap =iota ;LineCapButt ;LineCapSquare ;);func (_cfeb *TextState )ProcTf (font *TextFont ){_cfeb .Tf =font };func (_cbg *TextFont )CharcodeToRunes (charcode _eg .CharCode )(_eg .CharCode ,[]rune ){_cd :=[]_eg .CharCode {charcode };
if _cbg ._ggge ==nil ||_cbg ._ggge ==_cbg .Font {if _cbg .Font .IsSimple ()&&_cbg ._ab !=nil {if _ada :=_cbg ._ab .Index (rune (charcode ));_ada > 0{return charcode ,[]rune {rune (charcode )};};};return charcode ,_cbg .Font .CharcodesToUnicode (_cd );};
_da :=_cbg ._ggge .CharcodesToUnicode (_cd );_aff ,_ :=_cbg .Font .RunesToCharcodeBytes (_da );_gfb :=_cbg .Font .BytesToCharcodes (_aff );_ccdf :=charcode ;if len (_gfb )> 0&&_gfb [0]!=0{_ccdf =_gfb [0];};return _ccdf ,_da ;};func (_fb *TextState )ProcTStar (){_fb .ProcTd (0,-_fb .Tl )};
func NewTextState ()TextState {return TextState {Th :100,Tm :_d .IdentityMatrix (),Tlm :_d .IdentityMatrix ()};};