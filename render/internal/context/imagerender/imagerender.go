//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_b "errors";_d "fmt";_ae "github.com/golang/freetype/raster";_cc "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/internal/transform";_cca "github.com/unidoc/unipdf/v3/render/internal/context";_ge "golang.org/x/image/draw";
_f "golang.org/x/image/font";_de "golang.org/x/image/math/f64";_aa "golang.org/x/image/math/fixed";_cd "image";_gd "image/color";_gde "image/draw";_g "math";_e "sort";_c "strings";);func (_bbfg *Context )Stroke (){_bbfg .StrokePreserve ();_bbfg .ClearPath ()};
func _dcac (_fdca float64 )float64 {return _fdca *_g .Pi /180};func (_eeba *Context )joiner ()_ae .Joiner {switch _eeba ._cf {case _cca .LineJoinBevel :return _ae .BevelJoiner ;case _cca .LineJoinRound :return _ae .RoundJoiner ;};return nil ;};func (_dcd *patternPainter )Paint (ss []_ae .Span ,done bool ){_acgc :=_dcd ._gcfd .Bounds ();
for _ ,_geff :=range ss {if _geff .Y < _acgc .Min .Y {continue ;};if _geff .Y >=_acgc .Max .Y {return ;};if _geff .X0 < _acgc .Min .X {_geff .X0 =_acgc .Min .X ;};if _geff .X1 > _acgc .Max .X {_geff .X1 =_acgc .Max .X ;};if _geff .X0 >=_geff .X1 {continue ;
};const _gcbf =1<<16-1;_cabd :=_geff .Y -_dcd ._gcfd .Rect .Min .Y ;_dab :=_geff .X0 -_dcd ._gcfd .Rect .Min .X ;_bcgd :=(_geff .Y -_dcd ._gcfd .Rect .Min .Y )*_dcd ._gcfd .Stride +(_geff .X0 -_dcd ._gcfd .Rect .Min .X )*4;_efee :=_bcgd +(_geff .X1 -_geff .X0 )*4;
for _ccdb ,_fdba :=_bcgd ,_dab ;_ccdb < _efee ;_ccdb ,_fdba =_ccdb +4,_fdba +1{_febc :=_geff .Alpha ;if _dcd ._baff !=nil {_febc =_febc *uint32 (_dcd ._baff .AlphaAt (_fdba ,_cabd ).A )/255;if _febc ==0{continue ;};};_fbdd :=_dcd ._dege .ColorAt (_fdba ,_cabd );
_afdc ,_ccfb ,_bebg ,_dff :=_fbdd .RGBA ();_edag :=uint32 (_dcd ._gcfd .Pix [_ccdb +0]);_gea :=uint32 (_dcd ._gcfd .Pix [_ccdb +1]);_cgab :=uint32 (_dcd ._gcfd .Pix [_ccdb +2]);_fbfg :=uint32 (_dcd ._gcfd .Pix [_ccdb +3]);_ddfe :=(_gcbf -(_dff *_febc /_gcbf ))*0x101;
_dcd ._gcfd .Pix [_ccdb +0]=uint8 ((_edag *_ddfe +_afdc *_febc )/_gcbf >>8);_dcd ._gcfd .Pix [_ccdb +1]=uint8 ((_gea *_ddfe +_ccfb *_febc )/_gcbf >>8);_dcd ._gcfd .Pix [_ccdb +2]=uint8 ((_cgab *_ddfe +_bebg *_febc )/_gcbf >>8);_dcd ._gcfd .Pix [_ccdb +3]=uint8 ((_fbfg *_ddfe +_dff *_febc )/_gcbf >>8);
};};};func (_bea *Context )Image ()_cd .Image {return _bea ._fd };func (_eag *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _dca =16;for _gbg :=0;_gbg < _dca ;_gbg ++{_edf :=float64 (_gbg +0)/_dca ;_aea :=float64 (_gbg +1)/_dca ;
_egb :=angle1 +(angle2 -angle1 )*_edf ;_bfd :=angle1 +(angle2 -angle1 )*_aea ;_gbce :=x +rx *_g .Cos (_egb );_cda :=y +ry *_g .Sin (_egb );_ddf :=x +rx *_g .Cos ((_egb +_bfd )/2);_fgb :=y +ry *_g .Sin ((_egb +_bfd )/2);_fgba :=x +rx *_g .Cos (_bfd );_ddd :=y +ry *_g .Sin (_bfd );
_fef :=2*_ddf -_gbce /2-_fgba /2;_aaga :=2*_fgb -_cda /2-_ddd /2;if _gbg ==0{if _eag ._fee {_eag .LineTo (_gbce ,_cda );}else {_eag .MoveTo (_gbce ,_cda );};};_eag .QuadraticTo (_fef ,_aaga ,_fgba ,_ddd );};};func _cgc (_dfa ,_aeda ,_ebc ,_eceb ,_ffdb ,_fda float64 )_cca .Gradient {_geec :=circle {_dfa ,_aeda ,_ebc };
_gcf :=circle {_eceb ,_ffdb ,_fda };_bedf :=circle {_eceb -_dfa ,_ffdb -_aeda ,_fda -_ebc };_cdg :=_gae (_bedf ._cga ,_bedf ._aedd ,-_bedf ._aafg ,_bedf ._cga ,_bedf ._aedd ,_bedf ._aafg );var _fdd float64 ;if _cdg !=0{_fdd =1.0/_cdg ;};_ggc :=-_geec ._aafg ;
_beba :=&radialGradient {_dbg :_geec ,_egae :_gcf ,_ded :_bedf ,_egdd :_cdg ,_cadd :_fdd ,_dagb :_ggc };return _beba ;};func (_ggd *Context )ClearPath (){_ggd ._cb .Clear ();_ggd ._gdg .Clear ();_ggd ._fee =false };type solidPattern struct{_fadg _gd .Color };
type linearGradient struct{_gabc ,_gadec ,_bdg ,_cegd float64 ;_afd stops ;};func (_ecb *Context )StrokePattern ()_cca .Pattern {return _ecb ._ba };type patternPainter struct{_gcfd *_cd .RGBA ;_baff *_cd .Alpha ;_dege _cca .Pattern ;};func (_bfc *Context )SetFillRule (fillRule _cca .FillRule ){_bfc ._ccab =fillRule };
func (_feff *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_feff .NewSubPath ();_feff .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_g .Pi );_feff .ClosePath ();};func (_abc *Context )SetColor (c _gd .Color ){_abc .setFillAndStrokeColor (c )};func (_cg *Context )SetFillStyle (pattern _cca .Pattern ){if _afc ,_ada :=pattern .(*solidPattern );
_ada {_cg ._gdf =_afc ._fadg ;};_cg ._efd =pattern ;};var (_eed =_dfb (_gd .White );_dd =_dfb (_gd .Black ););func (_geb *Context )Fill (){_geb .FillPreserve ();_geb .ClearPath ()};func (_caf *Context )SetHexColor (x string ){_aaa ,_bfg ,_ccf ,_age :=_acaa (x );
_caf .SetRGBA255 (_aaa ,_bfg ,_ccf ,_age );};func (_bdab *Context )SetPixel (x ,y int ){_bdab ._fd .Set (x ,y ,_bdab ._gdf )};func (_bca *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_bca ._fee {_bca .MoveTo (x1 ,y1 );};_gaa ,_adfa :=_bca ._fa .X ,_bca ._fa .Y ;
x1 ,y1 =_bca .Transform (x1 ,y1 );x2 ,y2 =_bca .Transform (x2 ,y2 );x3 ,y3 =_bca .Transform (x3 ,y3 );_dgc :=_eec (_gaa ,_adfa ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_ccaf :=_fdfee (_bca ._fa );for _ ,_bdd :=range _dgc [1:]{_ebb :=_fdfee (_bdd );if _ebb ==_ccaf {continue ;
};_ccaf =_ebb ;_bca ._cb .Add1 (_ebb );_bca ._gdg .Add1 (_ebb );_bca ._fa =_bdd ;};};func (_gdgf *Context )SetRGB255 (r ,g ,b int ){_gdgf .SetRGBA255 (r ,g ,b ,255)};func (_gad *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_gad ._fee {_gad .MoveTo (x1 ,y1 );
};x1 ,y1 =_gad .Transform (x1 ,y1 );x2 ,y2 =_gad .Transform (x2 ,y2 );_gdcb :=_ee .NewPoint (x1 ,y1 );_dbf :=_ee .NewPoint (x2 ,y2 );_gfd :=_fdfee (_gdcb );_aec :=_fdfee (_dbf );_gad ._cb .Add2 (_gfd ,_aec );_gad ._gdg .Add2 (_gfd ,_aec );_gad ._fa =_dbf ;
};func (_afbb *Context )SetRGBA (r ,g ,b ,a float64 ){_afbb ._gdf =_gd .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_afbb .setFillAndStrokeColor (_afbb ._gdf );};func (_ece *Context )drawRegularPolygon (_cfde int ,_degd ,_dcgf ,_aca ,_eae float64 ){_gcb :=2*_g .Pi /float64 (_cfde );
_eae -=_g .Pi /2;if _cfde %2==0{_eae +=_gcb /2;};_ece .NewSubPath ();for _fec :=0;_fec < _cfde ;_fec ++{_fbd :=_eae +_gcb *float64 (_fec );_ece .LineTo (_degd +_aca *_g .Cos (_fbd ),_dcgf +_aca *_g .Sin (_fbd ));};_ece .ClosePath ();};func (_adb *Context )SetLineWidth (lineWidth float64 ){_adb ._ffg =lineWidth };
func (_aegc *Context )SetMask (mask *_cd .Alpha )error {if mask .Bounds ().Size ()!=_aegc ._fd .Bounds ().Size (){return _b .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_aegc ._eab =mask ;return nil ;};func (_gba *Context )SetRGB (r ,g ,b float64 ){_gba .SetRGBA (r ,g ,b ,1)};type stop struct{_addg float64 ;_cfb _gd .Color ;};func _ffc (_efed _cd .Image )*_cd .RGBA {_ede :=_efed .Bounds ();_edd :=_cd .NewRGBA (_ede );
_gde .Draw (_edd ,_ede ,_efed ,_ede .Min ,_gde .Src );return _edd ;};func (_cgd *Context )TextState ()*_cca .TextState {return &_cgd ._acdg };func _gae (_ccdg ,_eaee ,_beg ,_efb ,_fdb ,_dcaf float64 )float64 {return _ccdg *_efb +_eaee *_fdb +_beg *_dcaf ;
};func _adg (_adc [][]_ee .Point )_ae .Path {var _deeg _ae .Path ;for _ ,_edge :=range _adc {var _gdebf _aa .Point26_6 ;for _aefe ,_bdb :=range _edge {_abbg :=_fdfee (_bdb );if _aefe ==0{_deeg .Start (_abbg );}else {_feb :=_abbg .X -_gdebf .X ;_feed :=_abbg .Y -_gdebf .Y ;
if _feb < 0{_feb =-_feb ;};if _feed < 0{_feed =-_feed ;};if _feb +_feed > 8{_deeg .Add1 (_abbg );};};_gdebf =_abbg ;};};return _deeg ;};func (_deg *Context )SetLineCap (lineCap _cca .LineCap ){_deg ._gab =lineCap };func (_dbda *Context )DrawCircle (x ,y ,r float64 ){_dbda .NewSubPath ();
_dbda .DrawEllipticalArc (x ,y ,r ,r ,0,2*_g .Pi );_dbda .ClosePath ();};func (_abb *Context )ShearAbout (sx ,sy ,x ,y float64 ){_abb .Translate (x ,y );_abb .Shear (sx ,sy );_abb .Translate (-x ,-y );};func (_aeb *Context )drawString (_deb string ,_ecc _f .Face ,_egbc ,_dag float64 ){_efe :=&_f .Drawer {Src :_cd .NewUniform (_aeb ._gdf ),Face :_ecc ,Dot :_fdfee (_ee .NewPoint (_egbc ,_dag ))};
_afge :=rune (-1);for _ ,_agb :=range _deb {if _afge >=0{_efe .Dot .X +=_efe .Face .Kern (_afge ,_agb );};_baf ,_fdc ,_cfc ,_fbf ,_bafa :=_efe .Face .Glyph (_efe .Dot ,_agb );if !_bafa {continue ;};_beab :=_baf .Sub (_baf .Min );_cefg :=_cd .NewRGBA (_beab );
_ge .DrawMask (_cefg ,_beab ,_efe .Src ,_cd .Point {},_fdc ,_cfc ,_ge .Over );var _ebea *_ge .Options ;if _aeb ._eab !=nil {_ebea =&_ge .Options {DstMask :_aeb ._eab ,DstMaskP :_cd .Point {}};};_ccg :=_aeb ._dea .Clone ().Translate (float64 (_baf .Min .X ),float64 (_baf .Min .Y ));
_cba :=_de .Aff3 {_ccg [0],_ccg [3],_ccg [6],_ccg [1],_ccg [4],_ccg [7]};_ge .BiLinear .Transform (_aeb ._fd ,_cba ,_cefg ,_beab ,_ge .Over ,_ebea );_efe .Dot .X +=_fbf ;_afge =_agb ;};};func (_daa *Context )Rotate (angle float64 ){_daa ._dea =_daa ._dea .Rotate (angle )};
func (_dgdg *Context )LineTo (x ,y float64 ){if !_dgdg ._fee {_dgdg .MoveTo (x ,y );}else {x ,y =_dgdg .Transform (x ,y );_cef :=_ee .NewPoint (x ,y );_fea :=_fdfee (_cef );_dgdg ._cb .Add1 (_fea );_dgdg ._gdg .Add1 (_fea );_dgdg ._fa =_cef ;};};func _bdaa (_cagf _cd .Image ,_dbb repeatOp )_cca .Pattern {return &surfacePattern {_eaf :_cagf ,_cegf :_dbb };
};func (_ced *Context )FillPreserve (){var _feg _ae .Painter ;if _ced ._eab ==nil {if _fc ,_afg :=_ced ._efd .(*solidPattern );_afg {_bad :=_ae .NewRGBAPainter (_ced ._fd );_bad .SetColor (_fc ._fadg );_feg =_bad ;};};if _feg ==nil {_feg =_bgcf (_ced ._fd ,_ced ._eab ,_ced ._efd );
};_ced .fill (_feg );};func _gc (_bb ,_bc ,_ccb ,_aae ,_bbf ,_ac ,_eeb float64 )(_aac ,_ga float64 ){_ag :=1-_eeb ;_gee :=_ag *_ag ;_ce :=2*_ag *_eeb ;_eg :=_eeb *_eeb ;_aac =_gee *_bb +_ce *_ccb +_eg *_bbf ;_ga =_gee *_bc +_ce *_aae +_eg *_ac ;return ;
};func (_fcb *Context )Scale (x ,y float64 ){_fcb ._dea =_fcb ._dea .Scale (x ,y )};func (_afbf *Context )SetLineJoin (lineJoin _cca .LineJoin ){_afbf ._cf =lineJoin };func (_cde *Context )NewSubPath (){if _cde ._fee {_cde ._gdg .Add1 (_fdfee (_cde ._dcg ));
};_cde ._fee =false ;};func (_aag *Context )AsMask ()*_cd .Alpha {_fgg :=_cd .NewAlpha (_aag ._fd .Bounds ());_ge .Draw (_fgg ,_aag ._fd .Bounds (),_aag ._fd ,_cd .Point {},_ge .Src );return _fgg ;};func (_beb *Context )InvertMask (){if _beb ._eab ==nil {_beb ._eab =_cd .NewAlpha (_beb ._fd .Bounds ());
}else {for _bde ,_fbe :=range _beb ._eab .Pix {_beb ._eab .Pix [_bde ]=255-_fbe ;};};};func _ef (_ed ,_eb ,_ccd ,_ec ,_efg ,_ebe float64 )[]_ee .Point {_bg :=(_g .Hypot (_ccd -_ed ,_ec -_eb )+_g .Hypot (_efg -_ccd ,_ebe -_ec ));_af :=int (_bg +0.5);if _af < 4{_af =4;
};_ebd :=float64 (_af )-1;_bcg :=make ([]_ee .Point ,_af );for _bd :=0;_bd < _af ;_bd ++{_fe :=float64 (_bd )/_ebd ;_afb ,_ad :=_gc (_ed ,_eb ,_ccd ,_ec ,_efg ,_ebe ,_fe );_bcg [_bd ]=_ee .NewPoint (_afb ,_ad );};return _bcg ;};func _acaa (_fgbfe string )(_cfa ,_baac ,_abeb ,_bcde int ){_fgbfe =_c .TrimPrefix (_fgbfe ,"\u0023");
_bcde =255;if len (_fgbfe )==3{_agea :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";_d .Sscanf (_fgbfe ,_agea ,&_cfa ,&_baac ,&_abeb );_cfa |=_cfa <<4;_baac |=_baac <<4;_abeb |=_abeb <<4;};if len (_fgbfe )==6{_cace :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";
_d .Sscanf (_fgbfe ,_cace ,&_cfa ,&_baac ,&_abeb );};if len (_fgbfe )==8{_fcc :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_d .Sscanf (_fgbfe ,_fcc ,&_cfa ,&_baac ,&_abeb ,&_bcde );};return ;};func (_ged *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_geeb :=_gd .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_ged ._ba =_dfb (_geeb );};type Context struct{_efc int ;_add int ;_eebfe *_ae .Rasterizer ;_fd *_cd .RGBA ;_eab *_cd .Alpha ;_gdf _gd .Color ;_efd _cca .Pattern ;_ba _cca .Pattern ;_cb _ae .Path ;_gdg _ae .Path ;_dcg _ee .Point ;_fa _ee .Point ;_fee bool ;
_bgc []float64 ;_acg float64 ;_ffg float64 ;_gab _cca .LineCap ;_cf _cca .LineJoin ;_ccab _cca .FillRule ;_dea _ee .Matrix ;_acdg _cca .TextState ;_db []*Context ;};func (_bge *Context )ResetClip (){_bge ._eab =nil };func _afdf (_fdbe ,_dfd _gd .Color ,_cced float64 )_gd .Color {_ffa ,_aacf ,_efad ,_bbd :=_fdbe .RGBA ();
_cfbg ,_cfdd ,_gec ,_edbd :=_dfd .RGBA ();return _gd .RGBA {_fdce (_ffa ,_cfbg ,_cced ),_fdce (_aacf ,_cfdd ,_cced ),_fdce (_efad ,_gec ,_cced ),_fdce (_bbd ,_edbd ,_cced )};};func (_ceg *Context )DrawImage (im _cd .Image ,x ,y int ){_ceg .DrawImageAnchored (im ,x ,y ,0,0)};
func (_fce stops )Less (i ,j int )bool {return _fce [i ]._addg < _fce [j ]._addg };func (_gade *Context )Matrix ()_ee .Matrix {return _gade ._dea };func _fdab (_faa _ae .Path )[][]_ee .Point {var _abca [][]_ee .Point ;var _afeg []_ee .Point ;var _dbgc ,_cgae float64 ;
for _bce :=0;_bce < len (_faa );{switch _faa [_bce ]{case 0:if len (_afeg )> 0{_abca =append (_abca ,_afeg );_afeg =nil ;};_dee :=_fceb (_faa [_bce +1]);_gbbb :=_fceb (_faa [_bce +2]);_afeg =append (_afeg ,_ee .NewPoint (_dee ,_gbbb ));_dbgc ,_cgae =_dee ,_gbbb ;
_bce +=4;case 1:_gabd :=_fceb (_faa [_bce +1]);_efge :=_fceb (_faa [_bce +2]);_afeg =append (_afeg ,_ee .NewPoint (_gabd ,_efge ));_dbgc ,_cgae =_gabd ,_efge ;_bce +=4;case 2:_cbgf :=_fceb (_faa [_bce +1]);_gdb :=_fceb (_faa [_bce +2]);_bgf :=_fceb (_faa [_bce +3]);
_eccc :=_fceb (_faa [_bce +4]);_edgc :=_ef (_dbgc ,_cgae ,_cbgf ,_gdb ,_bgf ,_eccc );_afeg =append (_afeg ,_edgc ...);_dbgc ,_cgae =_bgf ,_eccc ;_bce +=6;case 3:_gaf :=_fceb (_faa [_bce +1]);_bfa :=_fceb (_faa [_bce +2]);_cgdg :=_fceb (_faa [_bce +3]);
_ebbd :=_fceb (_faa [_bce +4]);_faegc :=_fceb (_faa [_bce +5]);_cadb :=_fceb (_faa [_bce +6]);_egbe :=_eec (_dbgc ,_cgae ,_gaf ,_bfa ,_cgdg ,_ebbd ,_faegc ,_cadb );_afeg =append (_afeg ,_egbe ...);_dbgc ,_cgae =_faegc ,_cadb ;_bce +=8;default:_cc .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_faa );
return _abca ;};};if len (_afeg )> 0{_abca =append (_abca ,_afeg );};return _abca ;};func (_cbaf *surfacePattern )ColorAt (x ,y int )_gd .Color {_fgbf :=_cbaf ._eaf .Bounds ();switch _cbaf ._cegf {case _bacd :if y >=_fgbf .Dy (){return _gd .Transparent ;
};case _aggf :if x >=_fgbf .Dx (){return _gd .Transparent ;};case _bddg :if x >=_fgbf .Dx ()||y >=_fgbf .Dy (){return _gd .Transparent ;};};x =x %_fgbf .Dx ()+_fgbf .Min .X ;y =y %_fgbf .Dy ()+_fgbf .Min .Y ;return _cbaf ._eaf .At (x ,y );};func (_gfc *Context )FillPattern ()_cca .Pattern {return _gfc ._efd };
func (_fac *Context )SetFillRGBA (r ,g ,b ,a float64 ){_gdeb :=_gd .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_fac ._gdf =_gdeb ;_fac ._efd =_dfb (_gdeb );};func _dfb (_bag _gd .Color )_cca .Pattern {return &solidPattern {_fadg :_bag }};
func (_fdf *Context )DrawPoint (x ,y ,r float64 ){_fdf .Push ();_adad ,_eda :=_fdf .Transform (x ,y );_fdf .Identity ();_fdf .DrawCircle (_adad ,_eda ,r );_fdf .Pop ();};func (_bbg *Context )Translate (x ,y float64 ){_bbg ._dea =_bbg ._dea .Translate (x ,y )};
func NewContextForImage (im _cd .Image )*Context {return NewContextForRGBA (_ffc (im ))};func (_cac *Context )RotateAbout (angle ,x ,y float64 ){_cac .Translate (x ,y );_cac .Rotate (angle );_cac .Translate (-x ,-y );};func _aece (_cbd ,_bfe ,_cfbc ,_ebaa float64 )_cca .Gradient {_bbga :=&linearGradient {_gabc :_cbd ,_gadec :_bfe ,_bdg :_cfbc ,_cegd :_ebaa };
return _bbga ;};func (_bae *Context )DrawString (s string ,face _f .Face ,x ,y float64 ){_bae .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_eea *Context )Width ()int {return _eea ._efc };func NewContextForRGBA (im *_cd .RGBA )*Context {_gdfb :=im .Bounds ().Size ().X ;
_dg :=im .Bounds ().Size ().Y ;return &Context {_efc :_gdfb ,_add :_dg ,_eebfe :_ae .NewRasterizer (_gdfb ,_dg ),_fd :im ,_gdf :_gd .Transparent ,_efd :_eed ,_ba :_dd ,_ffg :1,_ccab :_cca .FillRuleWinding ,_dea :_ee .IdentityMatrix (),_acdg :_cca .NewTextState ()};
};type circle struct{_cga ,_aedd ,_aafg float64 };func (_ddc *radialGradient )ColorAt (x ,y int )_gd .Color {if len (_ddc ._ccgg )==0{return _gd .Transparent ;};_bga ,_fgdf :=float64 (x )+0.5-_ddc ._dbg ._cga ,float64 (y )+0.5-_ddc ._dbg ._aedd ;_dge :=_gae (_bga ,_fgdf ,_ddc ._dbg ._aafg ,_ddc ._ded ._cga ,_ddc ._ded ._aedd ,_ddc ._ded ._aafg );
_baed :=_gae (_bga ,_fgdf ,-_ddc ._dbg ._aafg ,_bga ,_fgdf ,_ddc ._dbg ._aafg );if _ddc ._egdd ==0{if _dge ==0{return _gd .Transparent ;};_ecg :=0.5*_baed /_dge ;if _ecg *_ddc ._ded ._aafg >=_ddc ._dagb {return _cbae (_ecg ,_ddc ._ccgg );};return _gd .Transparent ;
};_gcg :=_gae (_dge ,_ddc ._egdd ,0,_dge ,-_baed ,0);if _gcg >=0{_gdgg :=_g .Sqrt (_gcg );_fag :=(_dge +_gdgg )*_ddc ._cadd ;_bcdc :=(_dge -_gdgg )*_ddc ._cadd ;if _fag *_ddc ._ded ._aafg >=_ddc ._dagb {return _cbae (_fag ,_ddc ._ccgg );}else if _bcdc *_ddc ._ded ._aafg >=_ddc ._dagb {return _cbae (_bcdc ,_ddc ._ccgg );
};};return _gd .Transparent ;};func (_dcgg *Context )capper ()_ae .Capper {switch _dcgg ._gab {case _cca .LineCapButt :return _ae .ButtCapper ;case _cca .LineCapRound :return _ae .RoundCapper ;case _cca .LineCapSquare :return _ae .SquareCapper ;};return nil ;
};func _gbe (_fgc float64 )_aa .Int26_6 {return _aa .Int26_6 (_fgc *64)};func (_ca *Context )LineWidth ()float64 {return _ca ._ffg };func (_ecca *Context )Pop (){_aee :=*_ecca ;_decd :=_ecca ._db ;_bed :=_decd [len (_decd )-1];*_ecca =*_bed ;_ecca ._cb =_aee ._cb ;
_ecca ._gdg =_aee ._gdg ;_ecca ._dcg =_aee ._dcg ;_ecca ._fa =_aee ._fa ;_ecca ._fee =_aee ._fee ;};func (_edbb *Context )Clip (){_edbb .ClipPreserve ();_edbb .ClearPath ()};func (_ccbc *Context )setFillAndStrokeColor (_edc _gd .Color ){_ccbc ._gdf =_edc ;
_ccbc ._efd =_dfb (_edc );_ccbc ._ba =_dfb (_edc );};func _fceb (_beac _aa .Int26_6 )float64 {const _ebbdb ,_ggb =6,1<<6-1;if _beac >=0{return float64 (_beac >>_ebbdb )+float64 (_beac &_ggb )/64;};_beac =-_beac ;if _beac >=0{return -(float64 (_beac >>_ebbdb )+float64 (_beac &_ggb )/64);
};return 0;};func (_gedde *Context )Push (){_aggd :=*_gedde ;_gedde ._db =append (_gedde ._db ,&_aggd )};func (_dae *linearGradient )ColorAt (x ,y int )_gd .Color {if len (_dae ._afd )==0{return _gd .Transparent ;};_gggd ,_cag :=float64 (x ),float64 (y );
_daga ,_gggf ,_egbf ,_ccabf :=_dae ._gabc ,_dae ._gadec ,_dae ._bdg ,_dae ._cegd ;_fad ,_bbb :=_egbf -_daga ,_ccabf -_gggf ;if _bbb ==0&&_fad !=0{return _cbae ((_gggd -_daga )/_fad ,_dae ._afd );};if _fad ==0&&_bbb !=0{return _cbae ((_cag -_gggf )/_bbb ,_dae ._afd );
};_abbc :=_fad *(_gggd -_daga )+_bbb *(_cag -_gggf );if _abbc < 0{return _dae ._afd [0]._cfb ;};_faeg :=_g .Hypot (_fad ,_bbb );_gdaa :=((_gggd -_daga )*-_bbb +(_cag -_gggf )*_fad )/(_faeg *_faeg );_feffg ,_addf :=_daga +_gdaa *-_bbb ,_gggf +_gdaa *_fad ;
_fff :=_g .Hypot (_gggd -_feffg ,_cag -_addf )/_faeg ;return _cbae (_fff ,_dae ._afd );};func (_dgdgd stops )Len ()int {return len (_dgdgd )};func _bgcf (_eebd *_cd .RGBA ,_fbb *_cd .Alpha ,_gfg _cca .Pattern )*patternPainter {return &patternPainter {_eebd ,_fbb ,_gfg };
};type radialGradient struct{_dbg ,_egae ,_ded circle ;_egdd ,_cadd float64 ;_dagb float64 ;_ccgg stops ;};func (_ggg stops )Swap (i ,j int ){_ggg [i ],_ggg [j ]=_ggg [j ],_ggg [i ]};func (_cgb *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_cgb .MoveTo (x1 ,y1 );
_cgb .LineTo (x2 ,y2 )};func (_ggga *linearGradient )AddColorStop (offset float64 ,color _gd .Color ){_ggga ._afd =append (_ggga ._afd ,stop {_addg :offset ,_cfb :color });_e .Sort (_ggga ._afd );};func (_ccca *Context )Shear (x ,y float64 ){_ccca ._dea .Shear (x ,y )};
func (_cbg *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_cbg .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func _ffaf (_feag [][]_ee .Point ,_cge []float64 ,_dfac float64 )[][]_ee .Point {var _egaa [][]_ee .Point ;if len (_cge )==0{return _feag ;
};if len (_cge )==1{_cge =append (_cge ,_cge [0]);};for _ ,_fga :=range _feag {if len (_fga )< 2{continue ;};_cgdd :=_fga [0];_bef :=1;_fab :=0;_baa :=0.0;if _dfac !=0{var _gga float64 ;for _ ,_dcc :=range _cge {_gga +=_dcc ;};_dfac =_g .Mod (_dfac ,_gga );
if _dfac < 0{_dfac +=_gga ;};for _cefb ,_badb :=range _cge {_dfac -=_badb ;if _dfac < 0{_fab =_cefb ;_baa =_badb +_dfac ;break ;};};};var _bee []_ee .Point ;_bee =append (_bee ,_cgdd );for _bef < len (_fga ){_gfcc :=_cge [_fab ];_bgg :=_fga [_bef ];_cafc :=_cgdd .Distance (_bgg );
_eabf :=_gfcc -_baa ;if _cafc > _eabf {_fbdf :=_eabf /_cafc ;_baeb :=_cgdd .Interpolate (_bgg ,_fbdf );_bee =append (_bee ,_baeb );if _fab %2==0&&len (_bee )> 1{_egaa =append (_egaa ,_bee );};_bee =nil ;_bee =append (_bee ,_baeb );_baa =0;_cgdd =_baeb ;
_fab =(_fab +1)%len (_cge );}else {_bee =append (_bee ,_bgg );_cgdd =_bgg ;_baa +=_cafc ;_bef ++;};};if _fab %2==0&&len (_bee )> 1{_egaa =append (_egaa ,_bee );};};return _egaa ;};type stops []stop ;func (_ffge *Context )SetDash (dashes ...float64 ){_ffge ._bgc =dashes };
func (_fb *Context )fill (_gce _ae .Painter ){_fgd :=_fb ._gdg ;if _fb ._fee {_fgd =make (_ae .Path ,len (_fb ._gdg ));copy (_fgd ,_fb ._gdg );_fgd .Add1 (_fdfee (_fb ._dcg ));};_aaf :=_fb ._eebfe ;_aaf .UseNonZeroWinding =_fb ._ccab ==_cca .FillRuleWinding ;
_aaf .Clear ();_aaf .AddPath (_fgd );_aaf .Rasterize (_gce );};func (_cegc *Context )DrawStringAnchored (s string ,face _f .Face ,x ,y ,ax ,ay float64 ){_aaff ,_dbc :=_cegc .MeasureString (s ,face );_cegc .drawString (s ,face ,x -ax *_aaff ,y +ay *_dbc );
};func (_cbe *Context )stroke (_ebed _ae .Painter ){_dbd :=_cbe ._cb ;if len (_cbe ._bgc )> 0{_dbd =_faegb (_dbd ,_cbe ._bgc ,_cbe ._acg );}else {_dbd =_adg (_fdab (_dbd ));};_def :=_cbe ._eebfe ;_def .UseNonZeroWinding =true ;_def .Clear ();_ega :=(_cbe ._dea .ScalingFactorX ()+_cbe ._dea .ScalingFactorY ())/2;
_def .AddStroke (_dbd ,_gbe (_cbe ._ffg *_ega ),_cbe .capper (),_cbe .joiner ());_def .Rasterize (_ebed );};func (_bcac *Context )StrokePreserve (){var _ebde _ae .Painter ;if _bcac ._eab ==nil {if _gbb ,_agf :=_bcac ._ba .(*solidPattern );_agf {_bcgf :=_ae .NewRGBAPainter (_bcac ._fd );
_bcgf .SetColor (_gbb ._fadg );_ebde =_bcgf ;};};if _ebde ==nil {_ebde =_bgcf (_bcac ._fd ,_bcac ._eab ,_bcac ._ba );};_bcac .stroke (_ebde );};func (_fdg *Context )SetMatrix (m _ee .Matrix ){_fdg ._dea =m };func NewContext (width ,height int )*Context {return NewContextForRGBA (_cd .NewRGBA (_cd .Rect (0,0,width ,height )));
};func (_ccaeb *Context )DrawImageAnchored (im _cd .Image ,x ,y int ,ax ,ay float64 ){_eba :=im .Bounds ().Size ();x -=int (ax *float64 (_eba .X ));y -=int (ay *float64 (_eba .Y ));_ccac :=_ge .BiLinear ;_edg :=_ccaeb ._dea .Clone ().Translate (float64 (x ),float64 (y ));
_abe :=_de .Aff3 {_edg [0],_edg [3],_edg [6],_edg [1],_edg [4],_edg [7]};if _ccaeb ._eab ==nil {_ccac .Transform (_ccaeb ._fd ,_abe ,im ,im .Bounds (),_ge .Over ,nil );}else {_ccac .Transform (_ccaeb ._fd ,_abe ,im ,im .Bounds (),_ge .Over ,&_ge .Options {DstMask :_ccaeb ._eab ,DstMaskP :_cd .Point {}});
};};func _eec (_ead ,_gef ,_gf ,_gfb ,_edb ,_adf ,_ccc ,_gbc float64 )[]_ee .Point {_egd :=(_g .Hypot (_gf -_ead ,_gfb -_gef )+_g .Hypot (_edb -_gf ,_adf -_gfb )+_g .Hypot (_ccc -_edb ,_gbc -_adf ));_gca :=int (_egd +0.5);if _gca < 4{_gca =4;};_cdd :=float64 (_gca )-1;
_efa :=make ([]_ee .Point ,_gca );for _acd :=0;_acd < _gca ;_acd ++{_bda :=float64 (_acd )/_cdd ;_aefb ,_dec :=_bf (_ead ,_gef ,_gf ,_gfb ,_edb ,_adf ,_ccc ,_gbc ,_bda );_efa [_acd ]=_ee .NewPoint (_aefb ,_dec );};return _efa ;};func (_afcd *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_bdae ,_bbfd ,_cdda ,_ccae :=x ,x +r ,x +w -r ,x +w ;
_fdfe ,_dga ,_fae ,_cad :=y ,y +r ,y +h -r ,y +h ;_afcd .NewSubPath ();_afcd .MoveTo (_bbfd ,_fdfe );_afcd .LineTo (_cdda ,_fdfe );_afcd .DrawArc (_cdda ,_dga ,r ,_dcac (270),_dcac (360));_afcd .LineTo (_ccae ,_fae );_afcd .DrawArc (_cdda ,_fae ,r ,_dcac (0),_dcac (90));
_afcd .LineTo (_bbfd ,_cad );_afcd .DrawArc (_bbfd ,_fae ,r ,_dcac (90),_dcac (180));_afcd .LineTo (_bdae ,_dga );_afcd .DrawArc (_bbfd ,_dga ,r ,_dcac (180),_dcac (270));_afcd .ClosePath ();};func (_fed *Context )MeasureString (s string ,face _f .Face )(_bdca ,_eccg float64 ){_bcc :=&_f .Drawer {Face :face };
_df :=_bcc .MeasureString (s );return float64 (_df >>6),_fed ._acdg .Tf .Size ;};func (_ceb *Context )SetDashOffset (offset float64 ){_ceb ._acg =offset };func _faegb (_fddb _ae .Path ,_dba []float64 ,_dfe float64 )_ae .Path {return _adg (_ffaf (_fdab (_fddb ),_dba ,_dfe ));
};const (_cab repeatOp =iota ;_bacd ;_aggf ;_bddg ;);func _cbae (_afe float64 ,_fbc stops )_gd .Color {if _afe <=0.0||len (_fbc )==1{return _fbc [0]._cfb ;};_bdaec :=_fbc [len (_fbc )-1];if _afe >=_bdaec ._addg {return _bdaec ._cfb ;};for _gaec ,_dfae :=range _fbc [1:]{if _afe < _dfae ._addg {_afe =(_afe -_fbc [_gaec ]._addg )/(_dfae ._addg -_fbc [_gaec ]._addg );
return _afdf (_fbc [_gaec ]._cfb ,_dfae ._cfb ,_afe );};};return _bdaec ._cfb ;};type surfacePattern struct{_eaf _cd .Image ;_cegf repeatOp ;};func _fdfee (_gadf _ee .Point )_aa .Point26_6 {return _aa .Point26_6 {X :_gbe (_gadf .X ),Y :_gbe (_gadf .Y )}};
func (_dgd *Context )SetStrokeStyle (pattern _cca .Pattern ){_dgd ._ba =pattern };func (_dde *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_dde .Translate (x ,y );_dde .Scale (sx ,sy );_dde .Translate (-x ,-y );};func (_cfd *Context )ClipPreserve (){_bff :=_cd .NewAlpha (_cd .Rect (0,0,_cfd ._efc ,_cfd ._add ));
_bcad :=_ae .NewAlphaOverPainter (_bff );_cfd .fill (_bcad );if _cfd ._eab ==nil {_cfd ._eab =_bff ;}else {_gedd :=_cd .NewAlpha (_cd .Rect (0,0,_cfd ._efc ,_cfd ._add ));_ge .DrawMask (_gedd ,_gedd .Bounds (),_bff ,_cd .Point {},_cfd ._eab ,_cd .Point {},_ge .Over );
_cfd ._eab =_gedd ;};};func (_agg *Context )Transform (x ,y float64 )(_ddeb ,_gda float64 ){return _agg ._dea .Transform (x ,y )};func (_dcb *Context )DrawRectangle (x ,y ,w ,h float64 ){_dcb .NewSubPath ();_dcb .MoveTo (x ,y );_dcb .LineTo (x +w ,y );
_dcb .LineTo (x +w ,y +h );_dcb .LineTo (x ,y +h );_dcb .ClosePath ();};func (_bcd *Context )Clear (){_bcf :=_cd .NewUniform (_bcd ._gdf );_ge .Draw (_bcd ._fd ,_bcd ._fd .Bounds (),_bcf ,_cd .Point {},_ge .Src );};func _fdce (_dfdd ,_cafb uint32 ,_aaaf float64 )uint8 {return uint8 (int32 (float64 (_dfdd )*(1.0-_aaaf )+float64 (_cafb )*_aaaf )>>8);
};func (_abg *Context )ClosePath (){if _abg ._fee {_daf :=_fdfee (_abg ._dcg );_abg ._cb .Add1 (_daf );_abg ._gdg .Add1 (_daf );_abg ._fa =_abg ._dcg ;};};func (_fg *Context )SetRGBA255 (r ,g ,b ,a int ){_fg ._gdf =_gd .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_fg .setFillAndStrokeColor (_fg ._gdf );};func _bf (_aef ,_egc ,_ab ,_bdc ,_ff ,_bbe ,_aed ,_ea ,_gdc float64 )(_gb ,_gg float64 ){_abf :=1-_gdc ;_be :=_abf *_abf *_abf ;_eebf :=3*_abf *_abf *_gdc ;_cce :=3*_abf *_gdc *_gdc ;_dc :=_gdc *_gdc *_gdc ;_gb =_be *_aef +_eebf *_ab +_cce *_ff +_dc *_aed ;
_gg =_be *_egc +_eebf *_bdc +_cce *_bbe +_dc *_ea ;return ;};func (_bac *Context )MoveTo (x ,y float64 ){if _bac ._fee {_bac ._gdg .Add1 (_fdfee (_bac ._dcg ));};x ,y =_bac .Transform (x ,y );_ffd :=_ee .NewPoint (x ,y );_aeg :=_fdfee (_ffd );_bac ._cb .Start (_aeg );
_bac ._gdg .Start (_aeg );_bac ._dcg =_ffd ;_bac ._fa =_ffd ;_bac ._fee =true ;};type repeatOp int ;func (_aggdd *solidPattern )ColorAt (x ,y int )_gd .Color {return _aggdd ._fadg };func (_acda *Context )Identity (){_acda ._dea =_ee .IdentityMatrix ()};
func (_bba *radialGradient )AddColorStop (offset float64 ,color _gd .Color ){_bba ._ccgg =append (_bba ._ccgg ,stop {_addg :offset ,_cfb :color });_e .Sort (_bba ._ccgg );};func (_da *Context )Height ()int {return _da ._add };