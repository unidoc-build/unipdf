//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imagerender ;import (_g "errors";_e "fmt";_cc "github.com/unidoc/freetype/raster";_bdb "github.com/unidoc/unipdf/v3/common";_fb "github.com/unidoc/unipdf/v3/internal/transform";_a "github.com/unidoc/unipdf/v3/render/internal/context";_da "golang.org/x/image/draw";
_df "golang.org/x/image/font";_gf "golang.org/x/image/math/f64";_gb "golang.org/x/image/math/fixed";_egb "image";_eg "image/color";_f "image/draw";_b "math";_d "sort";_bd "strings";);func _caab (_gcab ,_ccg ,_baa ,_fdg float64 )_a .Gradient {_faa :=&linearGradient {_cadd :_gcab ,_deb :_ccg ,_ddb :_baa ,_dbad :_fdg };
return _faa ;};func (_bfcg *Context )Shear (x ,y float64 ){_bfcg ._fe .Shear (x ,y )};func (_cfa *Context )SetRGBA (r ,g ,b ,a float64 ){_cfa ._ff =_eg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_cfa .setFillAndStrokeColor (_cfa ._ff );
};func (_bbe *Context )TextState ()*_a .TextState {return &_bbe ._bbg };func (_cdfg *Context )StrokePattern ()_a .Pattern {return _cdfg ._gaa };func (_feda *Context )drawRegularPolygon (_ece int ,_aca ,_bce ,_bad ,_caf float64 ){_dege :=2*_b .Pi /float64 (_ece );
_caf -=_b .Pi /2;if _ece %2==0{_caf +=_dege /2;};_feda .NewSubPath ();for _bcad :=0;_bcad < _ece ;_bcad ++{_ggae :=_caf +_dege *float64 (_bcad );_feda .LineTo (_aca +_bad *_b .Cos (_ggae ),_bce +_bad *_b .Sin (_ggae ));};_feda .ClosePath ();};func (_ccd *Context )ShearAbout (sx ,sy ,x ,y float64 ){_ccd .Translate (x ,y );
_ccd .Shear (sx ,sy );_ccd .Translate (-x ,-y );};func (_cfeb *Context )capper ()_cc .Capper {switch _cfeb ._ead {case _a .LineCapButt :return _cc .ButtCapper ;case _a .LineCapRound :return _cc .RoundCapper ;case _a .LineCapSquare :return _cc .SquareCapper ;
};return nil ;};func (_dc *Context )DrawString (s string ,face _df .Face ,x ,y float64 ){_dc .DrawStringAnchored (s ,face ,x ,y ,0,0);};func (_dgc *Context )SetMask (mask *_egb .Alpha )error {if mask .Bounds ().Size ()!=_dgc ._ade .Bounds ().Size (){return _g .New ("\u006d\u0061\u0073\u006b\u0020\u0073i\u007a\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068 \u0063\u006f\u006e\u0074\u0065\u0078\u0074 \u0073\u0069\u007a\u0065");
};_dgc ._gab =mask ;return nil ;};func (_abg *Context )DrawEllipse (x ,y ,rx ,ry float64 ){_abg .NewSubPath ();_abg .DrawEllipticalArc (x ,y ,rx ,ry ,0,2*_b .Pi );_abg .ClosePath ();};func (_gg *Context )SetLineWidth (lineWidth float64 ){_gg ._cdg =lineWidth };
func (_aba *Context )NewSubPath (){if _aba ._fcd {_aba ._faf .Add1 (_ceb (_aba ._geg ));};_aba ._fcd =false ;};func (_dbf *Context )ClipPreserve (){_fcaf :=_egb .NewAlpha (_egb .Rect (0,0,_dbf ._cff ,_dbf ._dfb ));_gfa :=_cc .NewAlphaOverPainter (_fcaf );
_dbf .fill (_gfa );if _dbf ._gab ==nil {_dbf ._gab =_fcaf ;}else {_cceg :=_egb .NewAlpha (_egb .Rect (0,0,_dbf ._cff ,_dbf ._dfb ));_da .DrawMask (_cceg ,_cceg .Bounds (),_fcaf ,_egb .Point {},_dbf ._gab ,_egb .Point {},_da .Over );_dbf ._gab =_cceg ;};
};func (_efe *Context )LineTo (x ,y float64 ){if !_efe ._fcd {_efe .MoveTo (x ,y );}else {x ,y =_efe .Transform (x ,y );_ccb :=_fb .NewPoint (x ,y );_cfe :=_ceb (_ccb );_efe ._bfb .Add1 (_cfe );_efe ._faf .Add1 (_cfe );_efe ._af =_ccb ;};};func (_cfb *Context )DrawImage (im _egb .Image ,x ,y int ){_cfb .DrawImageAnchored (im ,x ,y ,0,0)};
func _fbcc (_baf _egb .Image ,_gbag repeatOp )_a .Pattern {return &surfacePattern {_fea :_baf ,_gcf :_gbag };};func (_ccc *Context )stroke (_bba _cc .Painter ){_efd :=_ccc ._bfb ;if len (_ccc ._cgd )> 0{_efd =_agdbd (_efd ,_ccc ._cgd ,_ccc ._eaf );}else {_efd =_facdg (_afb (_efd ));
};_cec :=_ccc ._bgf ;_cec .UseNonZeroWinding =true ;_cec .Clear ();_efb :=(_ccc ._fe .ScalingFactorX ()+_ccc ._fe .ScalingFactorY ())/2;_cec .AddStroke (_efd ,_gbgf (_ccc ._cdg *_efb ),_ccc .capper (),_ccc .joiner ());_cec .Rasterize (_bba );};func (_gfff *Context )Translate (x ,y float64 ){_gfff ._fe =_gfff ._fe .Translate (x ,y )};
func (_gac *Context )Clear (){_cffc :=_egb .NewUniform (_gac ._ff );_da .Draw (_gac ._ade ,_gac ._ade .Bounds (),_cffc ,_egb .Point {},_da .Src );};func (_gcd *Context )DrawEllipticalArc (x ,y ,rx ,ry ,angle1 ,angle2 float64 ){const _dfg =16;for _edd :=0;
_edd < _dfg ;_edd ++{_dgf :=float64 (_edd +0)/_dfg ;_dgbb :=float64 (_edd +1)/_dfg ;_adc :=angle1 +(angle2 -angle1 )*_dgf ;_aab :=angle1 +(angle2 -angle1 )*_dgbb ;_cegb :=x +rx *_b .Cos (_adc );_gegb :=y +ry *_b .Sin (_adc );_dec :=x +rx *_b .Cos ((_adc +_aab )/2);
_bggg :=y +ry *_b .Sin ((_adc +_aab )/2);_gbcg :=x +rx *_b .Cos (_aab );_bbgg :=y +ry *_b .Sin (_aab );_adf :=2*_dec -_cegb /2-_gbcg /2;_aag :=2*_bggg -_gegb /2-_bbgg /2;if _edd ==0{if _gcd ._fcd {_gcd .LineTo (_cegb ,_gegb );}else {_gcd .MoveTo (_cegb ,_gegb );
};};_gcd .QuadraticTo (_adf ,_aag ,_gbcg ,_bbgg );};};func (_agb *Context )SetDashOffset (offset float64 ){_agb ._eaf =offset };func _agbc (_debf string )(_bdef ,_cgag ,_decb ,_bdbadf int ){_debf =_bd .TrimPrefix (_debf ,"\u0023");_bdbadf =255;if len (_debf )==3{_ddg :="\u00251\u0078\u0025\u0031\u0078\u0025\u0031x";
_e .Sscanf (_debf ,_ddg ,&_bdef ,&_cgag ,&_decb );_bdef |=_bdef <<4;_cgag |=_cgag <<4;_decb |=_decb <<4;};if len (_debf )==6{_bcb :="\u0025\u0030\u0032x\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_e .Sscanf (_debf ,_bcb ,&_bdef ,&_cgag ,&_decb );
};if len (_debf )==8{_bfaa :="\u0025\u00302\u0078\u0025\u00302\u0078\u0025\u0030\u0032\u0078\u0025\u0030\u0032\u0078";_e .Sscanf (_debf ,_bfaa ,&_bdef ,&_cgag ,&_decb ,&_bdbadf );};return ;};func (_fad *solidPattern )ColorAt (x ,y int )_eg .Color {return _fad ._fbb };
func _ef (_dd ,_gbc ,_geb ,_fde ,_gd ,_ddd float64 )[]_fb .Point {_db :=(_b .Hypot (_geb -_dd ,_fde -_gbc )+_b .Hypot (_gd -_geb ,_ddd -_fde ));_bf :=int (_db +0.5);if _bf < 4{_bf =4;};_fdeb :=float64 (_bf )-1;_aad :=make ([]_fb .Point ,_bf );for _ba :=0;
_ba < _bf ;_ba ++{_ae :=float64 (_ba )/_fdeb ;_aed ,_ag :=_ac (_dd ,_gbc ,_geb ,_fde ,_gd ,_ddd ,_ae );_aad [_ba ]=_fb .NewPoint (_aed ,_ag );};return _aad ;};func (_eaae *Context )SetFillRGBA (r ,g ,b ,a float64 ){_agf :=_eg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};
_eaae ._ff =_agf ;_eaae ._fdb =_bebd (_agf );};func (_degc *Context )SetLineJoin (lineJoin _a .LineJoin ){_degc ._abb =lineJoin };type circle struct{_fef ,_ageg ,_defd float64 };func (_gbca stops )Less (i ,j int )bool {return _gbca [i ]._fag < _gbca [j ]._fag };
func _bebd (_ebc _eg .Color )_a .Pattern {return &solidPattern {_fbb :_ebc }};func (_ed *Context )Fill (){_ed .FillPreserve ();_ed .ClearPath ()};func (_fded *surfacePattern )ColorAt (x ,y int )_eg .Color {_eceg :=_fded ._fea .Bounds ();switch _fded ._gcf {case _cea :if y >=_eceg .Dy (){return _eg .Transparent ;
};case _cdce :if x >=_eceg .Dx (){return _eg .Transparent ;};case _egda :if x >=_eceg .Dx ()||y >=_eceg .Dy (){return _eg .Transparent ;};};x =x %_eceg .Dx ()+_eceg .Min .X ;y =y %_eceg .Dy ()+_eceg .Min .Y ;return _fded ._fea .At (x ,y );};type repeatOp int ;
func _gad (_fg ,_fdef ,_cdf ,_ab ,_gda ,_bb ,_fgb ,_bg float64 )[]_fb .Point {_acg :=(_b .Hypot (_cdf -_fg ,_ab -_fdef )+_b .Hypot (_gda -_cdf ,_bb -_ab )+_b .Hypot (_fgb -_gda ,_bg -_bb ));_be :=int (_acg +0.5);if _be < 4{_be =4;};_eff :=float64 (_be )-1;
_gdaf :=make ([]_fb .Point ,_be );for _eaa :=0;_eaa < _be ;_eaa ++{_bbb :=float64 (_eaa )/_eff ;_ad ,_gc :=_ga (_fg ,_fdef ,_cdf ,_ab ,_gda ,_bb ,_fgb ,_bg ,_bbb );_gdaf [_eaa ]=_fb .NewPoint (_ad ,_gc );};return _gdaf ;};func (_acf *Context )SetRGB255 (r ,g ,b int ){_acf .SetRGBA255 (r ,g ,b ,255)};
func (_dde *Context )Pop (){_gebd :=*_dde ;_afa :=_dde ._ce ;_adee :=_afa [len (_afa )-1];*_dde =*_adee ;_dde ._bfb =_gebd ._bfb ;_dde ._faf =_gebd ._faf ;_dde ._geg =_gebd ._geg ;_dde ._af =_gebd ._af ;_dde ._fcd =_gebd ._fcd ;};func (_daggd *linearGradient )ColorAt (x ,y int )_eg .Color {if len (_daggd ._ccac )==0{return _eg .Transparent ;
};_eddf ,_afg :=float64 (x ),float64 (y );_gfd ,_fcbd ,_feeg ,_begaa :=_daggd ._cadd ,_daggd ._deb ,_daggd ._ddb ,_daggd ._dbad ;_cgb ,_eddfa :=_feeg -_gfd ,_begaa -_fcbd ;if _eddfa ==0&&_cgb !=0{return _bgfa ((_eddf -_gfd )/_cgb ,_daggd ._ccac );};if _cgb ==0&&_eddfa !=0{return _bgfa ((_afg -_fcbd )/_eddfa ,_daggd ._ccac );
};_gfb :=_cgb *(_eddf -_gfd )+_eddfa *(_afg -_fcbd );if _gfb < 0{return _daggd ._ccac [0]._bdbca ;};_ecc :=_b .Hypot (_cgb ,_eddfa );_gfbb :=((_eddf -_gfd )*-_eddfa +(_afg -_fcbd )*_cgb )/(_ecc *_ecc );_ebac ,_cdc :=_gfd +_gfbb *-_eddfa ,_fcbd +_gfbb *_cgb ;
_dgd :=_b .Hypot (_eddf -_ebac ,_afg -_cdc )/_ecc ;return _bgfa (_dgd ,_daggd ._ccac );};func (_cab *Context )SetPixel (x ,y int ){_cab ._ade .Set (x ,y ,_cab ._ff )};func (_gee *Context )MeasureString (s string ,face _df .Face )(_feeb ,_eaab float64 ){_ebb :=&_df .Drawer {Face :face };
_dabe :=_ebb .MeasureString (s );return float64 (_dabe >>6),_gee ._bbg .Tf .Size ;};func (_gdgd *Context )DrawImageAnchored (im _egb .Image ,x ,y int ,ax ,ay float64 ){_bcaa :=im .Bounds ().Size ();x -=int (ax *float64 (_bcaa .X ));y -=int (ay *float64 (_bcaa .Y ));
_fcdb :=_da .BiLinear ;_daa :=_gdgd ._fe .Clone ().Translate (float64 (x ),float64 (y ));_fee :=_gf .Aff3 {_daa [0],_daa [3],_daa [6],_daa [1],_daa [4],_daa [7]};if _gdgd ._gab ==nil {_fcdb .Transform (_gdgd ._ade ,_fee ,im ,im .Bounds (),_da .Over ,nil );
}else {_fcdb .Transform (_gdgd ._ade ,_fee ,im ,im .Bounds (),_da .Over ,&_da .Options {DstMask :_gdgd ._gab ,DstMaskP :_egb .Point {}});};};func (_dgb *Context )SetRGB (r ,g ,b float64 ){_dgb .SetRGBA (r ,g ,b ,1)};type stop struct{_fag float64 ;_bdbca _eg .Color ;
};type solidPattern struct{_fbb _eg .Color };func NewContextForRGBA (im *_egb .RGBA )*Context {_gea :=im .Bounds ().Size ().X ;_bga :=im .Bounds ().Size ().Y ;return &Context {_cff :_gea ,_dfb :_bga ,_bgf :_cc .NewRasterizer (_gea ,_bga ),_ade :im ,_ff :_eg .Transparent ,_fdb :_bc ,_gaa :_gef ,_cdg :1,_caa :_a .FillRuleWinding ,_fe :_fb .IdentityMatrix (),_bbg :_a .NewTextState ()};
};func _fcab (_fbcb _egb .Image )*_egb .RGBA {_cfbb :=_fbcb .Bounds ();_daga :=_egb .NewRGBA (_cfbb );_f .Draw (_daga ,_cfbb ,_fbcb ,_cfbb .Min ,_f .Src );return _daga ;};func _gba (_acaa ,_aede ,_bdbad ,_bdg ,_ecg ,_bdbadb float64 )float64 {return _acaa *_bdg +_aede *_ecg +_bdbad *_bdbadb ;
};func (_acgd *Context )SetDash (dashes ...float64 ){_acgd ._cgd =dashes };func (_fgc *Context )InvertMask (){if _fgc ._gab ==nil {_fgc ._gab =_egb .NewAlpha (_fgc ._ade .Bounds ());}else {for _bdbc ,_cfd :=range _fgc ._gab .Pix {_fgc ._gab .Pix [_bdbc ]=255-_cfd ;
};};};func _cbgf (_gbf _gb .Int26_6 )float64 {const _bcc ,_gde =6,1<<6-1;if _gbf >=0{return float64 (_gbf >>_bcc )+float64 (_gbf &_gde )/64;};_gbf =-_gbf ;if _gbf >=0{return -(float64 (_gbf >>_bcc )+float64 (_gbf &_gde )/64);};return 0;};func (_cgc *Context )Scale (x ,y float64 ){_cgc ._fe =_cgc ._fe .Scale (x ,y )};
func (_bggc *Context )DrawRectangle (x ,y ,w ,h float64 ){_bggc .NewSubPath ();_bggc .MoveTo (x ,y );_bggc .LineTo (x +w ,y );_bggc .LineTo (x +w ,y +h );_bggc .LineTo (x ,y +h );_bggc .ClosePath ();};func _gbgf (_deab float64 )_gb .Int26_6 {return _gb .Int26_6 (_deab *64)};
func (_cggd *Context )SetMatrix (m _fb .Matrix ){_cggd ._fe =m };func (_aeb *Context )SetStrokeRGBA (r ,g ,b ,a float64 ){_ggf :=_eg .NRGBA {uint8 (r *255),uint8 (g *255),uint8 (b *255),uint8 (a *255)};_aeb ._gaa =_bebd (_ggf );};func (_dbd *Context )Image ()_egb .Image {return _dbd ._ade };
func (_fdba *Context )ScaleAbout (sx ,sy ,x ,y float64 ){_fdba .Translate (x ,y );_fdba .Scale (sx ,sy );_fdba .Translate (-x ,-y );};func (_gdg *Context )DrawCircle (x ,y ,r float64 ){_gdg .NewSubPath ();_gdg .DrawEllipticalArc (x ,y ,r ,r ,0,2*_b .Pi );
_gdg .ClosePath ();};func (_ceg *Context )SetColor (c _eg .Color ){_ceg .setFillAndStrokeColor (c )};type stops []stop ;func (_edc *linearGradient )AddColorStop (offset float64 ,color _eg .Color ){_edc ._ccac =append (_edc ._ccac ,stop {_fag :offset ,_bdbca :color });
_d .Sort (_edc ._ccac );};func (_cbg stops )Swap (i ,j int ){_cbg [i ],_cbg [j ]=_cbg [j ],_cbg [i ]};func _bgfa (_ccadg float64 ,_abfa stops )_eg .Color {if _ccadg <=0.0||len (_abfa )==1{return _abfa [0]._bdbca ;};_aecd :=_abfa [len (_abfa )-1];if _ccadg >=_aecd ._fag {return _aecd ._bdbca ;
};for _gdac ,_facd :=range _abfa [1:]{if _ccadg < _facd ._fag {_ccadg =(_ccadg -_abfa [_gdac ]._fag )/(_facd ._fag -_abfa [_gdac ]._fag );return _cdd (_abfa [_gdac ]._bdbca ,_facd ._bdbca ,_ccadg );};};return _aecd ._bdbca ;};func (_acd *Context )DrawPoint (x ,y ,r float64 ){_acd .Push ();
_bagd ,_cca :=_acd .Transform (x ,y );_acd .Identity ();_acd .DrawCircle (_bagd ,_cca ,r );_acd .Pop ();};func (_ded *Context )SetFillRule (fillRule _a .FillRule ){_ded ._caa =fillRule };func (_dab *Context )CubicTo (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 ){if !_dab ._fcd {_dab .MoveTo (x1 ,y1 );
};_fed ,_dbe :=_dab ._af .X ,_dab ._af .Y ;x1 ,y1 =_dab .Transform (x1 ,y1 );x2 ,y2 =_dab .Transform (x2 ,y2 );x3 ,y3 =_dab .Transform (x3 ,y3 );_dbg :=_gad (_fed ,_dbe ,x1 ,y1 ,x2 ,y2 ,x3 ,y3 );_ada :=_ceb (_dab ._af );for _ ,_bega :=range _dbg [1:]{_abcc :=_ceb (_bega );
if _abcc ==_ada {continue ;};_ada =_abcc ;_dab ._bfb .Add1 (_abcc );_dab ._faf .Add1 (_abcc );_dab ._af =_bega ;};};type linearGradient struct{_cadd ,_deb ,_ddb ,_dbad float64 ;_ccac stops ;};func _ga (_dg ,_aaf ,_ca ,_dee ,_age ,_cb ,_bdbaa ,_cf ,_efa float64 )(_deg ,_fc float64 ){_cg :=1-_efa ;
_fa :=_cg *_cg *_cg ;_ebgc :=3*_cg *_cg *_efa ;_dfd :=3*_cg *_efa *_efa ;_eed :=_efa *_efa *_efa ;_deg =_fa *_dg +_ebgc *_ca +_dfd *_age +_eed *_bdbaa ;_fc =_fa *_aaf +_ebgc *_dee +_dfd *_cb +_eed *_cf ;return ;};func _ceb (_fbgg _fb .Point )_gb .Point26_6 {return _gb .Point26_6 {X :_gbgf (_fbgg .X ),Y :_gbgf (_fbgg .Y )}};
func (_afc *Context )Clip (){_afc .ClipPreserve ();_afc .ClearPath ()};func (_gbb *Context )RotateAbout (angle ,x ,y float64 ){_gbb .Translate (x ,y );_gbb .Rotate (angle );_gbb .Translate (-x ,-y );};func (_ggd *Context )FillPattern ()_a .Pattern {return _ggd ._fdb };
func (_gga *Context )Stroke (){_gga .StrokePreserve ();_gga .ClearPath ()};func (_bea *patternPainter )Paint (ss []_cc .Span ,done bool ){_cffe :=_bea ._bed .Bounds ();for _ ,_eade :=range ss {if _eade .Y < _cffe .Min .Y {continue ;};if _eade .Y >=_cffe .Max .Y {return ;
};if _eade .X0 < _cffe .Min .X {_eade .X0 =_cffe .Min .X ;};if _eade .X1 > _cffe .Max .X {_eade .X1 =_cffe .Max .X ;};if _eade .X0 >=_eade .X1 {continue ;};const _add =1<<16-1;_gbd :=_eade .Y -_bea ._bed .Rect .Min .Y ;_ccdc :=_eade .X0 -_bea ._bed .Rect .Min .X ;
_cecc :=(_eade .Y -_bea ._bed .Rect .Min .Y )*_bea ._bed .Stride +(_eade .X0 -_bea ._bed .Rect .Min .X )*4;_gcg :=_cecc +(_eade .X1 -_eade .X0 )*4;for _gced ,_eeg :=_cecc ,_ccdc ;_gced < _gcg ;_gced ,_eeg =_gced +4,_eeg +1{_acb :=_eade .Alpha ;if _bea ._gdd !=nil {_acb =_acb *uint32 (_bea ._gdd .AlphaAt (_eeg ,_gbd ).A )/255;
if _acb ==0{continue ;};};_dcdb :=_bea ._befe .ColorAt (_eeg ,_gbd );_dcda ,_ceag ,_agbg ,_dda :=_dcdb .RGBA ();_cdecc :=uint32 (_bea ._bed .Pix [_gced +0]);_edf :=uint32 (_bea ._bed .Pix [_gced +1]);_dgfa :=uint32 (_bea ._bed .Pix [_gced +2]);_cge :=uint32 (_bea ._bed .Pix [_gced +3]);
_gbba :=(_add -(_dda *_acb /_add ))*0x101;_bea ._bed .Pix [_gced +0]=uint8 ((_cdecc *_gbba +_dcda *_acb )/_add >>8);_bea ._bed .Pix [_gced +1]=uint8 ((_edf *_gbba +_ceag *_acb )/_add >>8);_bea ._bed .Pix [_gced +2]=uint8 ((_dgfa *_gbba +_agbg *_acb )/_add >>8);
_bea ._bed .Pix [_gced +3]=uint8 ((_cge *_gbba +_dda *_acb )/_add >>8);};};};type surfacePattern struct{_fea _egb .Image ;_gcf repeatOp ;};func NewContextForImage (im _egb .Image )*Context {return NewContextForRGBA (_fcab (im ))};var (_bc =_bebd (_eg .White );
_gef =_bebd (_eg .Black ););func _agdbd (_fbc _cc .Path ,_efee []float64 ,_febd float64 )_cc .Path {return _facdg (_bcf (_afb (_fbc ),_efee ,_febd ));};func (_eec *radialGradient )ColorAt (x ,y int )_eg .Color {if len (_eec ._ebbe )==0{return _eg .Transparent ;
};_fede ,_ccdf :=float64 (x )+0.5-_eec ._fbg ._fef ,float64 (y )+0.5-_eec ._fbg ._ageg ;_bcea :=_gba (_fede ,_ccdf ,_eec ._fbg ._defd ,_eec ._cee ._fef ,_eec ._cee ._ageg ,_eec ._cee ._defd );_efdcf :=_gba (_fede ,_ccdf ,-_eec ._fbg ._defd ,_fede ,_ccdf ,_eec ._fbg ._defd );
if _eec ._fdab ==0{if _bcea ==0{return _eg .Transparent ;};_ecge :=0.5*_efdcf /_bcea ;if _ecge *_eec ._cee ._defd >=_eec ._gdc {return _bgfa (_ecge ,_eec ._ebbe );};return _eg .Transparent ;};_bagb :=_gba (_bcea ,_eec ._fdab ,0,_bcea ,-_efdcf ,0);if _bagb >=0{_cdcc :=_b .Sqrt (_bagb );
_ccad :=(_bcea +_cdcc )*_eec ._bbbc ;_abeg :=(_bcea -_cdcc )*_eec ._bbbc ;if _ccad *_eec ._cee ._defd >=_eec ._gdc {return _bgfa (_ccad ,_eec ._ebbe );}else if _abeg *_eec ._cee ._defd >=_eec ._gdc {return _bgfa (_abeg ,_eec ._ebbe );};};return _eg .Transparent ;
};func (_dba *Context )Width ()int {return _dba ._cff };func (_cad *Context )ClearPath (){_cad ._bfb .Clear ();_cad ._faf .Clear ();_cad ._fcd =false };func (_cbb *Context )StrokePreserve (){var _begf _cc .Painter ;if _cbb ._gab ==nil {if _gaed ,_gdf :=_cbb ._gaa .(*solidPattern );
_gdf {_cef :=_cc .NewRGBAPainter (_cbb ._ade );_cef .SetColor (_gaed ._fbb );_begf =_cef ;};};if _begf ==nil {_begf =_fbe (_cbb ._ade ,_cbb ._gab ,_cbb ._gaa );};_cbb .stroke (_begf );};func (_dag *Context )SetRGBA255 (r ,g ,b ,a int ){_dag ._ff =_eg .NRGBA {uint8 (r ),uint8 (g ),uint8 (b ),uint8 (a )};
_dag .setFillAndStrokeColor (_dag ._ff );};func _fedee (_cefa ,_gaf ,_bdag ,_fdff ,_dea ,_agd float64 )_a .Gradient {_begd :=circle {_cefa ,_gaf ,_bdag };_aeba :=circle {_fdff ,_dea ,_agd };_adac :=circle {_fdff -_cefa ,_dea -_gaf ,_agd -_bdag };_aac :=_gba (_adac ._fef ,_adac ._ageg ,-_adac ._defd ,_adac ._fef ,_adac ._ageg ,_adac ._defd );
var _ecef float64 ;if _aac !=0{_ecef =1.0/_aac ;};_feb :=-_begd ._defd ;_ede :=&radialGradient {_fbg :_begd ,_bef :_aeba ,_cee :_adac ,_fdab :_aac ,_bbbc :_ecef ,_gdc :_feb };return _ede ;};func (_bbge stops )Len ()int {return len (_bbge )};func (_cce *Context )LineWidth ()float64 {return _cce ._cdg };
func _afb (_fgbe _cc .Path )[][]_fb .Point {var _gega [][]_fb .Point ;var _dcg []_fb .Point ;var _ccgdf ,_afbd float64 ;for _gag :=0;_gag < len (_fgbe );{switch _fgbe [_gag ]{case 0:if len (_dcg )> 0{_gega =append (_gega ,_dcg );_dcg =nil ;};_afad :=_cbgf (_fgbe [_gag +1]);
_fgg :=_cbgf (_fgbe [_gag +2]);_dcg =append (_dcg ,_fb .NewPoint (_afad ,_fgg ));_ccgdf ,_afbd =_afad ,_fgg ;_gag +=4;case 1:_ddbf :=_cbgf (_fgbe [_gag +1]);_fagg :=_cbgf (_fgbe [_gag +2]);_dcg =append (_dcg ,_fb .NewPoint (_ddbf ,_fagg ));_ccgdf ,_afbd =_ddbf ,_fagg ;
_gag +=4;case 2:_fcf :=_cbgf (_fgbe [_gag +1]);_gdce :=_cbgf (_fgbe [_gag +2]);_fffb :=_cbgf (_fgbe [_gag +3]);_agdb :=_cbgf (_fgbe [_gag +4]);_beb :=_ef (_ccgdf ,_afbd ,_fcf ,_gdce ,_fffb ,_agdb );_dcg =append (_dcg ,_beb ...);_ccgdf ,_afbd =_fffb ,_agdb ;
_gag +=6;case 3:_dagf :=_cbgf (_fgbe [_gag +1]);_acac :=_cbgf (_fgbe [_gag +2]);_abd :=_cbgf (_fgbe [_gag +3]);_ccdd :=_cbgf (_fgbe [_gag +4]);_agc :=_cbgf (_fgbe [_gag +5]);_adfg :=_cbgf (_fgbe [_gag +6]);_bee :=_gad (_ccgdf ,_afbd ,_dagf ,_acac ,_abd ,_ccdd ,_agc ,_adfg );
_dcg =append (_dcg ,_bee ...);_ccgdf ,_afbd =_agc ,_adfg ;_gag +=8;default:_bdb .Log .Debug ("\u0057\u0041\u0052\u004e: \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0074\u0068\u003a\u0020%\u0076",_fgbe );return _gega ;};};if len (_dcg )> 0{_gega =append (_gega ,_dcg );
};return _gega ;};func _fcc (_bde ,_edb uint32 ,_ffg float64 )uint8 {return uint8 (int32 (float64 (_bde )*(1.0-_ffg )+float64 (_edb )*_ffg )>>8);};func (_ffa *Context )QuadraticTo (x1 ,y1 ,x2 ,y2 float64 ){if !_ffa ._fcd {_ffa .MoveTo (x1 ,y1 );};x1 ,y1 =_ffa .Transform (x1 ,y1 );
x2 ,y2 =_ffa .Transform (x2 ,y2 );_dfe :=_fb .NewPoint (x1 ,y1 );_eba :=_fb .NewPoint (x2 ,y2 );_abc :=_ceb (_dfe );_gae :=_ceb (_eba );_ffa ._bfb .Add2 (_abc ,_gae );_ffa ._faf .Add2 (_abc ,_gae );_ffa ._af =_eba ;};func (_cde *Context )SetStrokeStyle (pattern _a .Pattern ){_cde ._gaa =pattern };
const (_fbgf repeatOp =iota ;_cea ;_cdce ;_egda ;);func (_fac *Context )setFillAndStrokeColor (_cac _eg .Color ){_fac ._ff =_cac ;_fac ._fdb =_bebd (_cac );_fac ._gaa =_bebd (_cac );};func (_bdf *Context )Rotate (angle float64 ){_bdf ._fe =_bdf ._fe .Rotate (angle )};
func (_aebe *Context )MoveTo (x ,y float64 ){if _aebe ._fcd {_aebe ._faf .Add1 (_ceb (_aebe ._geg ));};x ,y =_aebe .Transform (x ,y );_fff :=_fb .NewPoint (x ,y );_cdec :=_ceb (_fff );_aebe ._bfb .Start (_cdec );_aebe ._faf .Start (_cdec );_aebe ._geg =_fff ;
_aebe ._af =_fff ;_aebe ._fcd =true ;};func NewContext (width ,height int )*Context {return NewContextForRGBA (_egb .NewRGBA (_egb .Rect (0,0,width ,height )));};func (_fcb *Context )DrawRoundedRectangle (x ,y ,w ,h ,r float64 ){_cgff ,_edg ,_eee ,_cegc :=x ,x +r ,x +w -r ,x +w ;
_cbe ,_bdc ,_cba ,_dfa :=y ,y +r ,y +h -r ,y +h ;_fcb .NewSubPath ();_fcb .MoveTo (_edg ,_cbe );_fcb .LineTo (_eee ,_cbe );_fcb .DrawArc (_eee ,_bdc ,r ,_eggc (270),_eggc (360));_fcb .LineTo (_cegc ,_cba );_fcb .DrawArc (_eee ,_cba ,r ,_eggc (0),_eggc (90));
_fcb .LineTo (_edg ,_dfa );_fcb .DrawArc (_edg ,_cba ,r ,_eggc (90),_eggc (180));_fcb .LineTo (_cgff ,_bdc );_fcb .DrawArc (_edg ,_bdc ,r ,_eggc (180),_eggc (270));_fcb .ClosePath ();};type Context struct{_cff int ;_dfb int ;_bgf *_cc .Rasterizer ;_ade *_egb .RGBA ;
_gab *_egb .Alpha ;_ff _eg .Color ;_fdb _a .Pattern ;_gaa _a .Pattern ;_bfb _cc .Path ;_faf _cc .Path ;_geg _fb .Point ;_af _fb .Point ;_fcd bool ;_cgd []float64 ;_eaf float64 ;_cdg float64 ;_ead _a .LineCap ;_abb _a .LineJoin ;_caa _a .FillRule ;_fe _fb .Matrix ;
_bbg _a .TextState ;_ce []*Context ;};type patternPainter struct{_bed *_egb .RGBA ;_gdd *_egb .Alpha ;_befe _a .Pattern ;};func (_efc *Context )Matrix ()_fb .Matrix {return _efc ._fe };func (_bff *Context )SetLineCap (lineCap _a .LineCap ){_bff ._ead =lineCap };
func _cdd (_fge ,_aeda _eg .Color ,_egf float64 )_eg .Color {_cecg ,_gdcg ,_abge ,_ebgg :=_fge .RGBA ();_ccgd ,_bfa ,_cgcg ,_cdea :=_aeda .RGBA ();return _eg .RGBA {_fcc (_cecg ,_ccgd ,_egf ),_fcc (_gdcg ,_bfa ,_egf ),_fcc (_abge ,_cgcg ,_egf ),_fcc (_ebgg ,_cdea ,_egf )};
};func _ac (_ee ,_bdba ,_fbd ,_cd ,_ec ,_eef ,_eb float64 )(_ge ,_fd float64 ){_aa :=1-_eb ;_ea :=_aa *_aa ;_ebg :=2*_aa *_eb ;_de :=_eb *_eb ;_ge =_ea *_ee +_ebg *_fbd +_de *_ec ;_fd =_ea *_bdba +_ebg *_cd +_de *_eef ;return ;};func _facdg (_ebba [][]_fb .Point )_cc .Path {var _cgcd _cc .Path ;
for _ ,_bbgge :=range _ebba {var _eadb _gb .Point26_6 ;for _bfbf ,_gfc :=range _bbgge {_fagb :=_ceb (_gfc );if _bfbf ==0{_cgcd .Start (_fagb );}else {_edcb :=_fagb .X -_eadb .X ;_cfef :=_fagb .Y -_eadb .Y ;if _edcb < 0{_edcb =-_edcb ;};if _cfef < 0{_cfef =-_cfef ;
};if _edcb +_cfef > 8{_cgcd .Add1 (_fagb );};};_eadb =_fagb ;};};return _cgcd ;};func (_fdec *Context )ResetClip (){_fdec ._gab =nil };func (_ecf *Context )Identity (){_ecf ._fe =_fb .IdentityMatrix ()};func _eggc (_fffa float64 )float64 {return _fffa *_b .Pi /180};
func (_bag *Context )ClosePath (){if _bag ._fcd {_bgg :=_ceb (_bag ._geg );_bag ._bfb .Add1 (_bgg );_bag ._faf .Add1 (_bgg );_bag ._af =_bag ._geg ;};};func _fbe (_gbg *_egb .RGBA ,_eca *_egb .Alpha ,_ffc _a .Pattern )*patternPainter {return &patternPainter {_gbg ,_eca ,_ffc };
};func (_dge *Context )SetFillStyle (pattern _a .Pattern ){if _ecd ,_eafc :=pattern .(*solidPattern );_eafc {_dge ._ff =_ecd ._fbb ;};_dge ._fdb =pattern ;};func (_ged *Context )fill (_ebd _cc .Painter ){_def :=_ged ._faf ;if _ged ._fcd {_def =make (_cc .Path ,len (_ged ._faf ));
copy (_def ,_ged ._faf );_def .Add1 (_ceb (_ged ._geg ));};_fca :=_ged ._bgf ;_fca .UseNonZeroWinding =_ged ._caa ==_a .FillRuleWinding ;_fca .Clear ();_fca .AddPath (_def );_fca .Rasterize (_ebd );};func (_cgf *Context )joiner ()_cc .Joiner {switch _cgf ._abb {case _a .LineJoinBevel :return _cc .BevelJoiner ;
case _a .LineJoinRound :return _cc .RoundJoiner ;};return nil ;};func (_eaaef *Context )FillPreserve (){var _fab _cc .Painter ;if _eaaef ._gab ==nil {if _bfc ,_bca :=_eaaef ._fdb .(*solidPattern );_bca {_cfc :=_cc .NewRGBAPainter (_eaaef ._ade );_cfc .SetColor (_bfc ._fbb );
_fab =_cfc ;};};if _fab ==nil {_fab =_fbe (_eaaef ._ade ,_eaaef ._gab ,_eaaef ._fdb );};_eaaef .fill (_fab );};func _bcf (_ege [][]_fb .Point ,_fgbb []float64 ,_afbda float64 )[][]_fb .Point {var _dbea [][]_fb .Point ;if len (_fgbb )==0{return _ege ;};
if len (_fgbb )==1{_fgbb =append (_fgbb ,_fgbb [0]);};for _ ,_bcec :=range _ege {if len (_bcec )< 2{continue ;};_edeb :=_bcec [0];_fcfg :=1;_gfba :=0;_dcb :=0.0;if _afbda !=0{var _egbb float64 ;for _ ,_gdca :=range _fgbb {_egbb +=_gdca ;};_afbda =_b .Mod (_afbda ,_egbb );
if _afbda < 0{_afbda +=_egbb ;};for _fgbbe ,_fec :=range _fgbb {_afbda -=_fec ;if _afbda < 0{_gfba =_fgbbe ;_dcb =_fec +_afbda ;break ;};};};var _bded []_fb .Point ;_bded =append (_bded ,_edeb );for _fcfg < len (_bcec ){_eeb :=_fgbb [_gfba ];_dcd :=_bcec [_fcfg ];
_afcd :=_edeb .Distance (_dcd );_dca :=_eeb -_dcb ;if _afcd > _dca {_gce :=_dca /_afcd ;_abad :=_edeb .Interpolate (_dcd ,_gce );_bded =append (_bded ,_abad );if _gfba %2==0&&len (_bded )> 1{_dbea =append (_dbea ,_bded );};_bded =nil ;_bded =append (_bded ,_abad );
_dcb =0;_edeb =_abad ;_gfba =(_gfba +1)%len (_fgbb );}else {_bded =append (_bded ,_dcd );_edeb =_dcd ;_dcb +=_afcd ;_fcfg ++;};};if _gfba %2==0&&len (_bded )> 1{_dbea =append (_dbea ,_bded );};};return _dbea ;};func (_dbeg *Context )Transform (x ,y float64 )(_cga ,_egd float64 ){return _dbeg ._fe .Transform (x ,y )};
func (_cgg *Context )DrawLine (x1 ,y1 ,x2 ,y2 float64 ){_cgg .MoveTo (x1 ,y1 );_cgg .LineTo (x2 ,y2 )};func (_aedb *Context )DrawStringAnchored (s string ,face _df .Face ,x ,y ,ax ,ay float64 ){_bda ,_ffb :=_aedb .MeasureString (s ,face );_aedb .drawString (s ,face ,x -ax *_bda ,y +ay *_ffb );
};type radialGradient struct{_fbg ,_bef ,_cee circle ;_fdab ,_bbbc float64 ;_gdc float64 ;_ebbe stops ;};func (_egg *Context )SetHexColor (x string ){_cdff ,_beg ,_fgd ,_egbc :=_agbc (x );_egg .SetRGBA255 (_cdff ,_beg ,_fgd ,_egbc );};func (_eafa *Context )Height ()int {return _eafa ._dfb };
func (_bec *Context )DrawArc (x ,y ,r ,angle1 ,angle2 float64 ){_bec .DrawEllipticalArc (x ,y ,r ,r ,angle1 ,angle2 );};func (_dgee *Context )AsMask ()*_egb .Alpha {_fdf :=_egb .NewAlpha (_dgee ._ade .Bounds ());_da .Draw (_fdf ,_dgee ._ade .Bounds (),_dgee ._ade ,_egb .Point {},_da .Src );
return _fdf ;};func (_cdfga *Context )drawString (_bge string ,_agfd _df .Face ,_dagg ,_ccef float64 ){_dbff :=&_df .Drawer {Src :_egb .NewUniform (_cdfga ._ff ),Face :_agfd ,Dot :_ceb (_fb .NewPoint (_dagg ,_ccef ))};_gff :=rune (-1);for _ ,_bbc :=range _bge {if _gff >=0{_dbff .Dot .X +=_dbff .Face .Kern (_gff ,_bbc );
};_aec ,_adeb ,_abba ,_gefc ,_abf :=_dbff .Face .Glyph (_dbff .Dot ,_bbc );if !_abf {continue ;};_efdc :=_aec .Sub (_aec .Min );_fda :=_egb .NewRGBA (_efdc );_da .DrawMask (_fda ,_efdc ,_dbff .Src ,_egb .Point {},_adeb ,_abba ,_da .Over );var _bgd *_da .Options ;
if _cdfga ._gab !=nil {_bgd =&_da .Options {DstMask :_cdfga ._gab ,DstMaskP :_egb .Point {}};};_abe :=_cdfga ._fe .Clone ().Translate (float64 (_aec .Min .X ),float64 (_aec .Min .Y ));_bgab :=_gf .Aff3 {_abe [0],_abe [3],_abe [6],_abe [1],_abe [4],_abe [7]};
_da .BiLinear .Transform (_cdfga ._ade ,_bgab ,_fda ,_efdc ,_da .Over ,_bgd );_dbff .Dot .X +=_gefc ;_gff =_bbc ;};};func (_gfad *Context )Push (){_bae :=*_gfad ;_gfad ._ce =append (_gfad ._ce ,&_bae )};func (_gacf *radialGradient )AddColorStop (offset float64 ,color _eg .Color ){_gacf ._ebbe =append (_gacf ._ebbe ,stop {_fag :offset ,_bdbca :color });
_d .Sort (_gacf ._ebbe );};