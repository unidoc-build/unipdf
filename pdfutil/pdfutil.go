//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_d "github.com/unidoc/unipdf/v3/common";_dd "github.com/unidoc/unipdf/v3/contentstream";_g "github.com/unidoc/unipdf/v3/contentstream/draw";_cb "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_c .PdfPage )error {_a ,_fd :=page .GetMediaBox ();if _fd !=nil {return _fd ;};_ae ,_fd :=page .GetRotate ();if _fd !=nil {_d .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_fd .Error ());
};_dg :=_ae %360!=0&&_ae %90==0;_a .Normalize ();_ac ,_ge ,_ga ,_fg :=_a .Llx ,_a .Lly ,_a .Width (),_a .Height ();_acb :=_ac !=0||_ge !=0;if !_dg &&!_acb {return nil ;};_da :=func (_e ,_geb ,_aed float64 )_g .BoundingBox {return _g .Path {Points :[]_g .Point {_g .NewPoint (0,0).Rotate (_aed ),_g .NewPoint (_e ,0).Rotate (_aed ),_g .NewPoint (0,_geb ).Rotate (_aed ),_g .NewPoint (_e ,_geb ).Rotate (_aed )}}.GetBoundingBox ();
};_fa :=_dd .NewContentCreator ();var _ad float64 ;if _dg {_ad =-float64 (_ae );_cc :=_da (_ga ,_fg ,_ad );_fa .Translate ((_cc .Width -_ga )/2+_ga /2,(_cc .Height -_fg )/2+_fg /2);_fa .RotateDeg (_ad );_fa .Translate (-_ga /2,-_fg /2);_ga ,_fg =_cc .Width ,_cc .Height ;
};if _acb {_fa .Translate (-_ac ,-_ge );};_fac :=_fa .Operations ();_gc ,_fd :=_cb .MakeStream (_fac .Bytes (),_cb .NewFlateEncoder ());if _fd !=nil {return _fd ;};_cf :=_cb .MakeArray (_gc );_cf .Append (page .GetContentStreamObjs ()...);*_a =_c .PdfRectangle {Urx :_ga ,Ury :_fg };
if _b :=page .CropBox ;_b !=nil {_b .Normalize ();_adg ,_aa ,_bf ,_dae :=_b .Llx -_ac ,_b .Lly -_ge ,_b .Width (),_b .Height ();if _dg {_aeg :=_da (_bf ,_dae ,_ad );_bf ,_dae =_aeg .Width ,_aeg .Height ;};*_b =_c .PdfRectangle {Llx :_adg ,Lly :_aa ,Urx :_adg +_bf ,Ury :_aa +_dae };
};_d .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ad ,_fac ,_a );page .Contents =_cf ;page .Rotate =nil ;
return nil ;};