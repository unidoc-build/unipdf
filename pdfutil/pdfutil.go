//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_f "github.com/unidoc/unipdf/v3/common";_ge "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/contentstream/draw";_ce "github.com/unidoc/unipdf/v3/core";_g "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_g .PdfPage )error {_a ,_aa :=page .GetMediaBox ();if _aa !=nil {return _aa ;};_af :=page .Rotate ;_fg :=_af !=nil &&*_af %360!=0&&*_af %90==0;_a .Normalize ();_ad ,_b ,_dd ,_bc :=_a .Llx ,_a .Lly ,_a .Width (),_a .Height ();_ab :=_ad !=0||_b !=0;if !_fg &&!_ab {return nil ;};_gc :=func (_cef ,_bb ,_adg float64 )_d .BoundingBox {return _d .Path {Points :[]_d .Point {_d .NewPoint (0,0).Rotate (_adg ),_d .NewPoint (_cef ,0).Rotate (_adg ),_d .NewPoint (0,_bb ).Rotate (_adg ),_d .NewPoint (_cef ,_bb ).Rotate (_adg )}}.GetBoundingBox ();};_ag :=_ge .NewContentCreator ();var _e float64 ;if _fg {_e =-float64 (*page .Rotate );_ea :=_gc (_dd ,_bc ,_e );_ag .Translate ((_ea .Width -_dd )/2+_dd /2,(_ea .Height -_bc )/2+_bc /2);_ag .RotateDeg (_e );_ag .Translate (-_dd /2,-_bc /2);_dd ,_bc =_ea .Width ,_ea .Height ;};if _ab {_ag .Translate (-_ad ,-_b );};_gcc :=_ag .Operations ();_de ,_aa :=_ce .MakeStream (_gcc .Bytes (),_ce .NewFlateEncoder ());if _aa !=nil {return _aa ;};_bbc :=_ce .MakeArray (_de );_bbc .Append (page .GetContentStreamObjs ()...);*_a =_g .PdfRectangle {Urx :_dd ,Ury :_bc };if _ae :=page .CropBox ;_ae !=nil {_ae .Normalize ();_cg ,_gf ,_cb ,_ade :=_ae .Llx -_ad ,_ae .Lly -_b ,_ae .Width (),_ae .Height ();if _fg {_bd :=_gc (_cb ,_ade ,_e );_cb ,_ade =_bd .Width ,_bd .Height ;};*_ae =_g .PdfRectangle {Llx :_cg ,Lly :_gf ,Urx :_cg +_cb ,Ury :_gf +_ade };};_f .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_e ,_gcc ,_a );page .Contents =_bbc ;page .Rotate =nil ;return nil ;};