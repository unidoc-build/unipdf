//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_d "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/contentstream";_dd "github.com/unidoc/unipdf/v3/contentstream/draw";_ac "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_c .PdfPage )error {_ec ,_g :=page .GetMediaBox ();if _g !=nil {return _g ;};_dc :=page .Rotate ;_f :=_dc !=nil &&*_dc %360!=0&&*_dc %90==0;_ec .Normalize ();_b ,_de ,_ab ,_bd :=_ec .Llx ,_ec .Lly ,_ec .Width (),_ec .Height ();
_ba :=_b !=0||_de !=0;if !_f &&!_ba {return nil ;};_gf :=func (_eg ,_bg ,_ega float64 )_dd .BoundingBox {return _dd .Path {Points :[]_dd .Point {_dd .NewPoint (0,0).Rotate (_ega ),_dd .NewPoint (_eg ,0).Rotate (_ega ),_dd .NewPoint (0,_bg ).Rotate (_ega ),_dd .NewPoint (_eg ,_bg ).Rotate (_ega )}}.GetBoundingBox ();
};_fe :=_e .NewContentCreator ();var _dcg float64 ;if _f {_dcg =-float64 (*page .Rotate );_af :=_gf (_ab ,_bd ,_dcg );_fe .Translate ((_af .Width -_ab )/2+_ab /2,(_af .Height -_bd )/2+_bd /2);_fe .RotateDeg (_dcg );_fe .Translate (-_ab /2,-_bd /2);_ab ,_bd =_af .Width ,_af .Height ;
};if _ba {_fe .Translate (-_b ,-_de );};_db :=_fe .Operations ();_ag ,_g :=_ac .MakeStream (_db .Bytes (),_ac .NewFlateEncoder ());if _g !=nil {return _g ;};_be :=_ac .MakeArray (_ag );_be .Append (page .GetContentStreamObjs ()...);*_ec =_c .PdfRectangle {Urx :_ab ,Ury :_bd };
if _gd :=page .CropBox ;_gd !=nil {_gd .Normalize ();_fg ,_dg ,_ae ,_fa :=_gd .Llx -_b ,_gd .Lly -_de ,_gd .Width (),_gd .Height ();if _f {_gfe :=_gf (_ae ,_fa ,_dcg );_ae ,_fa =_gfe .Width ,_gfe .Height ;};*_gd =_c .PdfRectangle {Llx :_fg ,Lly :_dg ,Urx :_fg +_ae ,Ury :_dg +_fa };
};_d .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_dcg ,_db ,_ec );page .Contents =_be ;page .Rotate =nil ;
return nil ;};