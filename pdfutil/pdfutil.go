//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_a "github.com/unidoc/unipdf/v3/common";_d "github.com/unidoc/unipdf/v3/contentstream";_c "github.com/unidoc/unipdf/v3/contentstream/draw";_g "github.com/unidoc/unipdf/v3/core";_f "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_f .PdfPage )error {_dd ,_fa :=page .GetMediaBox ();if _fa !=nil {return _fa ;};_ed :=page .Rotate ;_b :=_ed !=nil &&*_ed %360!=0&&*_ed %90==0;_dd .Normalize ();_fg ,_ee ,_ad ,_be :=_dd .Llx ,_dd .Lly ,_dd .Width (),_dd .Height ();_df :=_fg !=0||_ee !=0;if !_b &&!_df {return nil ;};_bed :=func (_gd ,_ff ,_eeb float64 )_c .BoundingBox {return _c .Path {Points :[]_c .Point {_c .NewPoint (0,0).Rotate (_eeb ),_c .NewPoint (_gd ,0).Rotate (_eeb ),_c .NewPoint (0,_ff ).Rotate (_eeb ),_c .NewPoint (_gd ,_ff ).Rotate (_eeb )}}.GetBoundingBox ();};_ge :=_d .NewContentCreator ();var _ea float64 ;if _b {_ea =-float64 (*page .Rotate );_gg :=_bed (_ad ,_be ,_ea );_ge .Translate ((_gg .Width -_ad )/2+_ad /2,(_gg .Height -_be )/2+_be /2);_ge .RotateDeg (_ea );_ge .Translate (-_ad /2,-_be /2);_ad ,_be =_gg .Width ,_gg .Height ;};if _df {_ge .Translate (-_fg ,-_ee );};_db :=_ge .Operations ();_gf ,_fa :=_g .MakeStream (_db .Bytes (),_g .NewFlateEncoder ());if _fa !=nil {return _fa ;};_cg :=_g .MakeArray (_gf );_cg .Append (page .GetContentStreamObjs ()...);*_dd =_f .PdfRectangle {Urx :_ad ,Ury :_be };if _dfc :=page .CropBox ;_dfc !=nil {_dfc .Normalize ();_dg ,_bd ,_fd ,_fdd :=_dfc .Llx -_fg ,_dfc .Lly -_ee ,_dfc .Width (),_dfc .Height ();if _b {_ec :=_bed (_fd ,_fdd ,_ea );_fd ,_fdd =_ec .Width ,_ec .Height ;};*_dfc =_f .PdfRectangle {Llx :_dg ,Lly :_bd ,Urx :_dg +_fd ,Ury :_bd +_fdd };};_a .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ea ,_db ,_dd );page .Contents =_cg ;page .Rotate =nil ;return nil ;};