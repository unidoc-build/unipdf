//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_fg "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/contentstream";_a "github.com/unidoc/unipdf/v3/contentstream/draw";_g "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_c .PdfPage )error {_d ,_ab :=page .GetMediaBox ();if _ab !=nil {return _ab ;};_gb ,_ab :=page .GetRotate ();if _ab !=nil {_fg .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0025\u0073\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067\u0020\u0061\u006e\u0064\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u006e\u006f\u0020\u0072\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u000a",_ab .Error ());
};_ec :=_gb %360!=0&&_gb %90==0;_d .Normalize ();_ecg ,_gf ,_df ,_b :=_d .Llx ,_d .Lly ,_d .Width (),_d .Height ();_gbb :=_ecg !=0||_gf !=0;if !_ec &&!_gbb {return nil ;};_dg :=func (_bf ,_cc ,_dd float64 )_a .BoundingBox {return _a .Path {Points :[]_a .Point {_a .NewPoint (0,0).Rotate (_dd ),_a .NewPoint (_bf ,0).Rotate (_dd ),_a .NewPoint (0,_cc ).Rotate (_dd ),_a .NewPoint (_bf ,_cc ).Rotate (_dd )}}.GetBoundingBox ();
};_fd :=_e .NewContentCreator ();var _eb float64 ;if _ec {_eb =-float64 (_gb );_aa :=_dg (_df ,_b ,_eb );_fd .Translate ((_aa .Width -_df )/2+_df /2,(_aa .Height -_b )/2+_b /2);_fd .RotateDeg (_eb );_fd .Translate (-_df /2,-_b /2);_df ,_b =_aa .Width ,_aa .Height ;
};if _gbb {_fd .Translate (-_ecg ,-_gf );};_ac :=_fd .Operations ();_ee ,_ab :=_g .MakeStream (_ac .Bytes (),_g .NewFlateEncoder ());if _ab !=nil {return _ab ;};_ca :=_g .MakeArray (_ee );_ca .Append (page .GetContentStreamObjs ()...);*_d =_c .PdfRectangle {Urx :_df ,Ury :_b };
if _dfc :=page .CropBox ;_dfc !=nil {_dfc .Normalize ();_fe ,_cd ,_eg ,_egd :=_dfc .Llx -_ecg ,_dfc .Lly -_gf ,_dfc .Width (),_dfc .Height ();if _ec {_de :=_dg (_eg ,_egd ,_eb );_eg ,_egd =_de .Width ,_de .Height ;};*_dfc =_c .PdfRectangle {Llx :_fe ,Lly :_cd ,Urx :_fe +_eg ,Ury :_cd +_egd };
};_fg .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_eb ,_ac ,_d );page .Contents =_ca ;page .Rotate =nil ;
return nil ;};