//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_d "fmt";_b "io";_fc "os";_fb "path/filepath";_f "runtime";_ge "time";);const _fcg ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";const _edc =2021;
var Log Logger =DummyLogger {};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _b .Writer )*WriterLogger {_eee :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_eee ;};

// Debug logs debug message.
func (_ed ConsoleLogger )Debug (format string ,args ...interface{}){if _ed .LogLevel >=LogLevelDebug {_fbf :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ed .output (_fc .Stdout ,_fbf ,format ,args ...);};};

// Trace logs trace message.
func (_ea WriterLogger )Trace (format string ,args ...interface{}){if _ea .LogLevel >=LogLevelTrace {_gd :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_ea .logToWriter (_ea .Output ,_gd ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Info logs info message.
func (_eb ConsoleLogger )Info (format string ,args ...interface{}){if _eb .LogLevel >=LogLevelInfo {_ceb :="\u005bI\u004e\u0046\u004f\u005d\u0020";_eb .output (_fc .Stdout ,_ceb ,format ,args ...);};};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_dg WriterLogger )IsLogLevel (level LogLevel )bool {return _dg .LogLevel >=level };

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _b .Writer ;};const _dga =15;

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _ge .Time )string {return t .Format (_fcg )+"\u0020\u0055\u0054\u0043"};

// Error logs error message.
func (_agf WriterLogger )Error (format string ,args ...interface{}){if _agf .LogLevel >=LogLevelError {_cbb :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_agf .logToWriter (_agf .Output ,_cbb ,format ,args ...);};};const _ddc =30;

// Warning logs warning message.
func (_ae ConsoleLogger )Warning (format string ,args ...interface{}){if _ae .LogLevel >=LogLevelWarning {_ff :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ae .output (_fc .Stdout ,_ff ,format ,args ...);};};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};func _gaf (_ec _b .Writer ,_ac string ,_agg string ,_db ...interface{}){_ ,_cc ,_aea ,_eg :=_f .Caller (3);if !_eg {_cc ="\u003f\u003f\u003f";_aea =0;
}else {_cc =_fb .Base (_cc );};_eba :=_d .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_ac ,_cc ,_aea )+_agg +"\u000a";_d .Fprintf (_ec ,_eba ,_db ...);};var ReleasedAt =_ge .Date (_edc ,_aff ,_dga ,_dbc ,_ddc ,0,0,_ge .UTC );

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// Notice logs notice message.
func (_af WriterLogger )Notice (format string ,args ...interface{}){if _af .LogLevel >=LogLevelNotice {_gg :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_af .logToWriter (_af .Output ,_gg ,format ,args ...);};};const _dbc =15;

// Debug logs debug message.
func (_fbe WriterLogger )Debug (format string ,args ...interface{}){if _fbe .LogLevel >=LogLevelDebug {_gef :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fbe .logToWriter (_fbe .Output ,_gef ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};func (_fde WriterLogger )logToWriter (_gea _b .Writer ,_bg string ,_fdb string ,_fff ...interface{}){_gaf (_gea ,_bg ,_fdb ,_fff );};

// Trace logs trace message.
func (_cg ConsoleLogger )Trace (format string ,args ...interface{}){if _cg .LogLevel >=LogLevelTrace {_ab :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_cg .output (_fc .Stdout ,_ab ,format ,args ...);};};const _aff =6;

// Error logs error message.
func (_ca ConsoleLogger )Error (format string ,args ...interface{}){if _ca .LogLevel >=LogLevelError {_gad :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ca .output (_fc .Stdout ,_gad ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_gc ConsoleLogger )IsLogLevel (level LogLevel )bool {return _gc .LogLevel >=level };

// Notice logs notice message.
func (_de ConsoleLogger )Notice (format string ,args ...interface{}){if _de .LogLevel >=LogLevelNotice {_ag :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_de .output (_fc .Stdout ,_ag ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};func (_abg ConsoleLogger )output (_gb _b .Writer ,_dd string ,_beb string ,_cb ...interface{}){_gaf (_gb ,_dd ,_beb ,_cb ...);};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_be string ,_fd ...interface{});Warning (_c string ,_e ...interface{});Notice (_ga string ,_fdd ...interface{});Info (_a string ,_bed ...interface{});Debug (_cd string ,_ee ...interface{});Trace (_ce string ,_gag ...interface{});
IsLogLevel (_fa LogLevel )bool ;};

// Warning logs warning message.
func (_gf WriterLogger )Warning (format string ,args ...interface{}){if _gf .LogLevel >=LogLevelWarning {_gfg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_gf .logToWriter (_gf .Output ,_gfg ,format ,args ...);};};const Version ="\u0033\u002e\u0032\u0036\u002e\u0031";
const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// DummyLogger does nothing.
type DummyLogger struct{};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Info logs info message.
func (_bf WriterLogger )Info (format string ,args ...interface{}){if _bf .LogLevel >=LogLevelInfo {_fe :="\u005bI\u004e\u0046\u004f\u005d\u0020";_bf .logToWriter (_bf .Output ,_fe ,format ,args ...);};};