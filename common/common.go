//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_c "fmt";_a "io";_g "os";_dd "path/filepath";_dg "runtime";_f "time";);

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};var ReleasedAt =_f .Date (_fde ,_cea ,_gga ,_eed ,_beb ,0,0,_f .UTC );const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;
LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);const _eed =15;

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const _abb ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// Debug logs debug message.
func (_eb WriterLogger )Debug (format string ,args ...interface{}){if _eb .LogLevel >=LogLevelDebug {_ebg :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_eb .logToWriter (_eb .Output ,_ebg ,format ,args ...);};};

// Error logs error message.
func (_be ConsoleLogger )Error (format string ,args ...interface{}){if _be .LogLevel >=LogLevelError {_ag :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_be .output (_g .Stdout ,_ag ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};func (_ba ConsoleLogger )output (_fab _a .Writer ,_gcag string ,_gge string ,_aag ...interface{}){_ffe (_fab ,_gcag ,_gge ,_aag ...);};

// Trace logs trace message.
func (_aac ConsoleLogger )Trace (format string ,args ...interface{}){if _aac .LogLevel >=LogLevelTrace {_gd :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_aac .output (_g .Stdout ,_gd ,format ,args ...);};};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _a .Writer ;};

// Notice logs notice message.
func (_cbd ConsoleLogger )Notice (format string ,args ...interface{}){if _cbd .LogLevel >=LogLevelNotice {_dc :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_cbd .output (_g .Stdout ,_dc ,format ,args ...);};};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_gc string ,_e ...interface{});Warning (_gf string ,_gfc ...interface{});Notice (_fa string ,_fb ...interface{});Info (_ea string ,_db ...interface{});Debug (_gg string ,_cb ...interface{});Trace (_ef string ,_ed ...interface{});
IsLogLevel (_ce LogLevel )bool ;};

// DummyLogger does nothing.
type DummyLogger struct{};

// Info logs info message.
func (_af ConsoleLogger )Info (format string ,args ...interface{}){if _af .LogLevel >=LogLevelInfo {_aa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_af .output (_g .Stdout ,_aa ,format ,args ...);};};

// Warning logs warning message.
func (_cd ConsoleLogger )Warning (format string ,args ...interface{}){if _cd .LogLevel >=LogLevelWarning {_ff :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_cd .output (_g .Stdout ,_ff ,format ,args ...);};};const _cea =4;

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Trace logs trace message.
func (_dbb WriterLogger )Trace (format string ,args ...interface{}){if _dbb .LogLevel >=LogLevelTrace {_aba :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_dbb .logToWriter (_dbb .Output ,_aba ,format ,args ...);};};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _f .Time )string {return t .Format (_abb )+"\u0020\u0055\u0054\u0043"};var Log Logger =DummyLogger {};const Version ="\u0033\u002e\u0033\u0034\u002e\u0030";

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Debug logs debug message.
func (_gca ConsoleLogger )Debug (format string ,args ...interface{}){if _gca .LogLevel >=LogLevelDebug {_fd :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_gca .output (_g .Stdout ,_fd ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_b ConsoleLogger )IsLogLevel (level LogLevel )bool {return _b .LogLevel >=level };

// Warning logs warning message.
func (_aga WriterLogger )Warning (format string ,args ...interface{}){if _aga .LogLevel >=LogLevelWarning {_dde :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_aga .logToWriter (_aga .Output ,_dde ,format ,args ...);};};func (_cg WriterLogger )logToWriter (_fdd _a .Writer ,_ae string ,_cef string ,_bea ...interface{}){_ffe (_fdd ,_ae ,_cef ,_bea );
};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};func _ffe (_fdg _a .Writer ,_bg string ,_cgg string ,_cdd ...interface{}){_ ,_abae ,_ebd ,_eag :=_dg .Caller (3);if !_eag {_abae ="\u003f\u003f\u003f";_ebd =0;}else {_abae =_dd .Base (_abae );
};_bd :=_c .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_bg ,_abae ,_ebd )+_cgg +"\u000a";_c .Fprintf (_fdg ,_bd ,_cdd ...);};const _fde =2022;

// Notice logs notice message.
func (_aab WriterLogger )Notice (format string ,args ...interface{}){if _aab .LogLevel >=LogLevelNotice {_gdc :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_aab .logToWriter (_aab .Output ,_gdc ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ab WriterLogger )IsLogLevel (level LogLevel )bool {return _ab .LogLevel >=level };

// Error logs error message.
func (_ge WriterLogger )Error (format string ,args ...interface{}){if _ge .LogLevel >=LogLevelError {_cbc :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_ge .logToWriter (_ge .Output ,_cbc ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;const _gga =25;const _beb =30;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _a .Writer )*WriterLogger {_df :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_df ;};

// Info logs info message.
func (_fbg WriterLogger )Info (format string ,args ...interface{}){if _fbg .LogLevel >=LogLevelInfo {_gdcd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_fbg .logToWriter (_fbg .Output ,_gdcd ,format ,args ...);};};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};