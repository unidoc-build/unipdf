//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_ef "bufio";_ed "bytes";_c "errors";_d "fmt";_eg "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/core";_f "io";_g "math";);var ErrRangeCheck =_c .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_gd *PSProgram ;};func (_egc *PSProgram )String ()string {_bfd :="\u007b\u0020";for _ ,_df :=range *_egc {_bfd +=_df .String ();_bfd +="\u0020";};_bfd +="\u007d";return _bfd ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_fce *PSOperand )cvi (_ded *PSStack )error {_af ,_dgb :=_ded .Pop ();if _dgb !=nil {return _dgb ;};if _edc ,_eae :=_af .(*PSReal );_eae {_gafb :=int (_edc .Val );_dgb =_ded .Push (MakeInteger (_gafb ));}else if _cbb ,_bfe :=_af .(*PSInteger );_bfe {_ebb :=_cbb .Val ;_dgb =_ded .Push (MakeInteger (_ebb ));}else {return ErrTypeCheck ;};return _dgb ;};func (_dead *PSOperand )exp (_fdbf *PSStack )error {_acc ,_faf :=_fdbf .PopNumberAsFloat64 ();if _faf !=nil {return _faf ;};_gabe ,_faf :=_fdbf .PopNumberAsFloat64 ();if _faf !=nil {return _faf ;};if _g .Abs (_acc )< 1&&_gabe < 0{return ErrUndefinedResult ;};_adc :=_g .Pow (_gabe ,_acc );_faf =_fdbf .Push (MakeReal (_adc ));return _faf ;};func (_beg *PSOperand )sqrt (_adg *PSStack )error {_efd ,_defa :=_adg .PopNumberAsFloat64 ();if _defa !=nil {return _defa ;};if _efd < 0{return ErrRangeCheck ;};_cdde :=_g .Sqrt (_efd );_defa =_adg .Push (MakeReal (_cdde ));return _defa ;};func (_dgbg *PSParser )parseOperand ()(*PSOperand ,error ){var _geae []byte ;for {_ddf ,_fac :=_dgbg ._cgae .Peek (1);if _fac !=nil {if _fac ==_f .EOF {break ;};return nil ,_fac ;};if _b .IsDelimiter (_ddf [0]){break ;};if _b .IsWhiteSpace (_ddf [0]){break ;};_deag ,_ :=_dgbg ._cgae .ReadByte ();_geae =append (_geae ,_deag );};if len (_geae )==0{return nil ,_c .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_geae )),nil ;};func (_eeg *PSOperand )add (_db *PSStack )error {_daa ,_gbdf :=_db .Pop ();if _gbdf !=nil {return _gbdf ;};_eda ,_gbdf :=_db .Pop ();if _gbdf !=nil {return _gbdf ;};_bgd ,_ggca :=_daa .(*PSReal );_cad ,_gbdc :=_daa .(*PSInteger );if !_ggca &&!_gbdc {return ErrTypeCheck ;};_fd ,_bac :=_eda .(*PSReal );_dd ,_bdf :=_eda .(*PSInteger );if !_bac &&!_bdf {return ErrTypeCheck ;};if _gbdc &&_bdf {_ggd :=_cad .Val +_dd .Val ;_aggf :=_db .Push (MakeInteger (_ggd ));return _aggf ;};var _dfg float64 ;if _ggca {_dfg =_bgd .Val ;}else {_dfg =float64 (_cad .Val );};if _bac {_dfg +=_fd .Val ;}else {_dfg +=float64 (_dd .Val );};_gbdf =_db .Push (MakeReal (_dfg ));return _gbdf ;};func (_gffg *PSOperand )le (_gfe *PSStack )error {_cfb ,_agad :=_gfe .PopNumberAsFloat64 ();if _agad !=nil {return _agad ;};_fcfe ,_agad :=_gfe .PopNumberAsFloat64 ();if _agad !=nil {return _agad ;};if _g .Abs (_fcfe -_cfb )< _ca {_bdd :=_gfe .Push (MakeBool (true ));return _bdd ;}else if _fcfe < _cfb {_cbfb :=_gfe .Push (MakeBool (true ));return _cbfb ;}else {_ccg :=_gfe .Push (MakeBool (false ));return _ccg ;};};func (_agga *PSOperand )gt (_faa *PSStack )error {_fcf ,_dag :=_faa .PopNumberAsFloat64 ();if _dag !=nil {return _dag ;};_ddg ,_dag :=_faa .PopNumberAsFloat64 ();if _dag !=nil {return _dag ;};if _g .Abs (_ddg -_fcf )< _ca {_bbgc :=_faa .Push (MakeBool (false ));return _bbgc ;}else if _ddg > _fcf {_daeb :=_faa .Push (MakeBool (true ));return _daeb ;}else {_dagd :=_faa .Push (MakeBool (false ));return _dagd ;};};func (_cae *PSBoolean )Duplicate ()PSObject {_gbb :=PSBoolean {};_gbb .Val =_cae .Val ;return &_gbb };

// Pop pops an object from the top of the stack.
func (_fcab *PSStack )Pop ()(PSObject ,error ){if len (*_fcab )< 1{return nil ,ErrStackUnderflow ;};_gagb :=(*_fcab )[len (*_fcab )-1];*_fcab =(*_fcab )[0:len (*_fcab )-1];return _gagb ,nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_dde *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ebc ,_gcbb :=_dde .Pop ();if _gcbb !=nil {return 0,_gcbb ;};if _bgc ,_abb :=_ebc .(*PSReal );_abb {return _bgc .Val ,nil ;}else if _bcbf ,_bcca :=_ebc .(*PSInteger );_bcca {return float64 (_bcbf .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_aggc *PSOperand )pop (_befc *PSStack )error {_ ,_fde :=_befc .Pop ();if _fde !=nil {return _fde ;};return nil ;};func (_dea *PSReal )String ()string {return _d .Sprintf ("\u0025\u002e\u0035\u0066",_dea .Val )};

// PSParser is a basic Postscript parser.
type PSParser struct{_cgae *_ef .Reader };func (_ggfg *PSOperand )lt (_faag *PSStack )error {_feec ,_cga :=_faag .PopNumberAsFloat64 ();if _cga !=nil {return _cga ;};_abgc ,_cga :=_faag .PopNumberAsFloat64 ();if _cga !=nil {return _cga ;};if _g .Abs (_abgc -_feec )< _ca {_ega :=_faag .Push (MakeBool (false ));return _ega ;}else if _abgc < _feec {_dfgf :=_faag .Push (MakeBool (true ));return _dfgf ;}else {_fge :=_faag .Push (MakeBool (false ));return _fge ;};};func (_fbcb *PSOperand )neg (_defd *PSStack )error {_agc ,_aba :=_defd .Pop ();if _aba !=nil {return _aba ;};if _bfb ,_bbb :=_agc .(*PSReal );_bbb {_aba =_defd .Push (MakeReal (-_bfb .Val ));return _aba ;}else if _eddg ,_bag :=_agc .(*PSInteger );_bag {_aba =_defd .Push (MakeInteger (-_eddg .Val ));return _aba ;}else {return ErrTypeCheck ;};};func (_ab *PSOperand )Duplicate ()PSObject {_egb :=*_ab ;return &_egb };

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};

// String returns a string representation of the stack.
func (_faadf *PSStack )String ()string {_fdd :="\u005b\u0020";for _ ,_cbfc :=range *_faadf {_fdd +=_cbfc .String ();_fdd +="\u0020";};_fdd +="\u005d";return _fdd ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_beb *PSOperand )dup (_egge *PSStack )error {_fdbc ,_ffbg :=_egge .Pop ();if _ffbg !=nil {return _ffbg ;};_ffbg =_egge .Push (_fdbc );if _ffbg !=nil {return _ffbg ;};_ffbg =_egge .Push (_fdbc .Duplicate ());return _ffbg ;};func (_cac *PSOperand )String ()string {return string (*_cac )};var ErrStackUnderflow =_c .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_fga *PSOperand )ifCondition (_bcdd *PSStack )error {_eef ,_abe :=_bcdd .Pop ();if _abe !=nil {return _abe ;};_bed ,_abe :=_bcdd .Pop ();if _abe !=nil {return _abe ;};_ccc ,_dba :=_eef .(*PSProgram );if !_dba {return ErrTypeCheck ;};_bab ,_dba :=_bed .(*PSBoolean );if !_dba {return ErrTypeCheck ;};if _bab .Val {_gff :=_ccc .Exec (_bcdd );return _gff ;};return nil ;};func (_ccb *PSOperand )ln (_eeec *PSStack )error {_cade ,_bff :=_eeec .PopNumberAsFloat64 ();if _bff !=nil {return _bff ;};_aegb :=_g .Log (_cade );_bff =_eeec .Push (MakeReal (_aegb ));return _bff ;};func (_ba *PSOperand )DebugString ()string {return _d .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ba );};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_de *PSInteger )DebugString ()string {return _d .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_de .Val );};func (_aeg *PSOperand )atan (_fea *PSStack )error {_fbb ,_adf :=_fea .PopNumberAsFloat64 ();if _adf !=nil {return _adf ;};_bcda ,_adf :=_fea .PopNumberAsFloat64 ();if _adf !=nil {return _adf ;};if _fbb ==0{var _ggf error ;if _bcda < 0{_ggf =_fea .Push (MakeReal (270));}else {_ggf =_fea .Push (MakeReal (90));};return _ggf ;};_bfc :=_bcda /_fbb ;_cbg :=_g .Atan (_bfc )*180/_g .Pi ;_adf =_fea .Push (MakeReal (_cbg ));return _adf ;};func (_bde *PSOperand )cos (_cdd *PSStack )error {_dad ,_aab :=_cdd .PopNumberAsFloat64 ();if _aab !=nil {return _aab ;};_dee :=_g .Cos (_dad *_g .Pi /180.0);_aab =_cdd .Push (MakeReal (_dee ));return _aab ;};func (_egaf *PSOperand )round (_ece *PSStack )error {_cacg ,_geag :=_ece .Pop ();if _geag !=nil {return _geag ;};if _fff ,_cbfd :=_cacg .(*PSReal );_cbfd {_geag =_ece .Push (MakeReal (_g .Floor (_fff .Val +0.5)));}else if _ccbc ,_baa :=_cacg .(*PSInteger );_baa {_geag =_ece .Push (MakeInteger (_ccbc .Val ));}else {return ErrTypeCheck ;};return _geag ;};func (_badd *PSOperand )xor (_bcdf *PSStack )error {_ddgf ,_egag :=_bcdf .Pop ();if _egag !=nil {return _egag ;};_gbgd ,_egag :=_bcdf .Pop ();if _egag !=nil {return _egag ;};if _adcg ,_fae :=_ddgf .(*PSBoolean );_fae {_fecc ,_efgc :=_gbgd .(*PSBoolean );if !_efgc {return ErrTypeCheck ;};_egag =_bcdf .Push (MakeBool (_adcg .Val !=_fecc .Val ));return _egag ;};if _bgb ,_aadf :=_ddgf .(*PSInteger );_aadf {_dga ,_gggf :=_gbgd .(*PSInteger );if !_gggf {return ErrTypeCheck ;};_egag =_bcdf .Push (MakeInteger (_bgb .Val ^_dga .Val ));return _egag ;};return ErrTypeCheck ;};func (_fdg *PSOperand )mul (_gabg *PSStack )error {_dade ,_bef :=_gabg .Pop ();if _bef !=nil {return _bef ;};_cddc ,_bef :=_gabg .Pop ();if _bef !=nil {return _bef ;};_cfa ,_cba :=_dade .(*PSReal );_eggd ,_befg :=_dade .(*PSInteger );if !_cba &&!_befg {return ErrTypeCheck ;};_cfe ,_acb :=_cddc .(*PSReal );_bebc ,_dbea :=_cddc .(*PSInteger );if !_acb &&!_dbea {return ErrTypeCheck ;};if _befg &&_dbea {_gdeb :=_eggd .Val *_bebc .Val ;_bge :=_gabg .Push (MakeInteger (_gdeb ));return _bge ;};var _adbg float64 ;if _cba {_adbg =_cfa .Val ;}else {_adbg =float64 (_eggd .Val );};if _acb {_adbg *=_cfe .Val ;}else {_adbg *=float64 (_bebc .Val );};_bef =_gabg .Push (MakeReal (_adbg ));return _bef ;};func (_bga *PSParser )skipSpaces ()(int ,error ){_ead :=0;for {_cgdc ,_gef :=_bga ._cgae .Peek (1);if _gef !=nil {return 0,_gef ;};if _b .IsWhiteSpace (_cgdc [0]){_bga ._cgae .ReadByte ();_ead ++;}else {break ;};};return _ead ,nil ;};func (_dca *PSReal )DebugString ()string {return _d .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_dca .Val );};func (_fbg *PSOperand )not (_eacc *PSStack )error {_fcef ,_bbaf :=_eacc .Pop ();if _bbaf !=nil {return _bbaf ;};if _fda ,_decc :=_fcef .(*PSBoolean );_decc {_bbaf =_eacc .Push (MakeBool (!_fda .Val ));return _bbaf ;}else if _egf ,_fgbf :=_fcef .(*PSInteger );_fgbf {_bbaf =_eacc .Push (MakeInteger (^_egf .Val ));return _bbaf ;}else {return ErrTypeCheck ;};};func (_bbc *PSOperand )abs (_fec *PSStack )error {_ggc ,_egg :=_fec .Pop ();if _egg !=nil {return _egg ;};if _cee ,_fb :=_ggc .(*PSReal );_fb {_abf :=_cee .Val ;if _abf < 0{_egg =_fec .Push (MakeReal (-_abf ));}else {_egg =_fec .Push (MakeReal (_abf ));};}else if _eee ,_gge :=_ggc .(*PSInteger );_gge {_cdb :=_eee .Val ;if _cdb < 0{_egg =_fec .Push (MakeInteger (-_cdb ));}else {_egg =_fec .Push (MakeInteger (_cdb ));};}else {return ErrTypeCheck ;};return _egg ;};

// Empty empties the stack.
func (_gbf *PSStack )Empty (){*_gbf =[]PSObject {}};func (_cgf *PSOperand )cvr (_dcbd *PSStack )error {_baf ,_gab :=_dcbd .Pop ();if _gab !=nil {return _gab ;};if _fg ,_abg :=_baf .(*PSReal );_abg {_gab =_dcbd .Push (MakeReal (_fg .Val ));}else if _fgd ,_gcd :=_baf .(*PSInteger );_gcd {_gab =_dcbd .Push (MakeReal (float64 (_fgd .Val )));}else {return ErrTypeCheck ;};return _gab ;};func (_cgd *PSOperand )floor (_gabd *PSStack )error {_eac ,_gdc :=_gabd .Pop ();if _gdc !=nil {return _gdc ;};if _ace ,_dff :=_eac .(*PSReal );_dff {_gdc =_gabd .Push (MakeReal (_g .Floor (_ace .Val )));}else if _ceef ,_cdf :=_eac .(*PSInteger );_cdf {_gdc =_gabd .Push (MakeInteger (_ceef .Val ));}else {return ErrTypeCheck ;};return _gdc ;};func (_cb *PSProgram )Duplicate ()PSObject {_ced :=&PSProgram {};for _ ,_gc :=range *_cb {_ced .Append (_gc .Duplicate ());};return _ced ;};func (_ccdb *PSOperand )sub (_cccc *PSStack )error {_bcde ,_cdbe :=_cccc .Pop ();if _cdbe !=nil {return _cdbe ;};_dbd ,_cdbe :=_cccc .Pop ();if _cdbe !=nil {return _cdbe ;};_ege ,_geg :=_bcde .(*PSReal );_efa ,_gee :=_bcde .(*PSInteger );if !_geg &&!_gee {return ErrTypeCheck ;};_gffd ,_bfg :=_dbd .(*PSReal );_gbda ,_cfg :=_dbd .(*PSInteger );if !_bfg &&!_cfg {return ErrTypeCheck ;};if _gee &&_cfg {_ccgg :=_gbda .Val -_efa .Val ;_fdab :=_cccc .Push (MakeInteger (_ccgg ));return _fdab ;};var _gcbc float64 =0;if _bfg {_gcbc =_gffd .Val ;}else {_gcbc =float64 (_gbda .Val );};if _geg {_gcbc -=_ege .Val ;}else {_gcbc -=float64 (_efa .Val );};_cdbe =_cccc .Push (MakeReal (_gcbc ));return _cdbe ;};var ErrUndefinedResult =_c .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_fgb *PSOperand )exch (_bce *PSStack )error {_bdee ,_fdbce :=_bce .Pop ();if _fdbce !=nil {return _fdbce ;};_gce ,_fdbce :=_bce .Pop ();if _fdbce !=nil {return _fdbce ;};_fdbce =_bce .Push (_bdee );if _fdbce !=nil {return _fdbce ;};_fdbce =_bce .Push (_gce );return _fdbce ;};func (_cd *PSReal )Duplicate ()PSObject {_bcd :=PSReal {};_bcd .Val =_cd .Val ;return &_bcd };

// Exec executes the program, typically leaving output values on the stack.
func (_ffb *PSProgram )Exec (stack *PSStack )error {for _ ,_gad :=range *_ffb {var _da error ;switch _dcad :=_gad .(type ){case *PSInteger :_geb :=_dcad ;_da =stack .Push (_geb );case *PSReal :_bbg :=_dcad ;_da =stack .Push (_bbg );case *PSBoolean :_eb :=_dcad ;_da =stack .Push (_eb );case *PSProgram :_ffg :=_dcad ;_da =stack .Push (_ffg );case *PSOperand :_cag :=_dcad ;_da =_cag .Exec (stack );default:return ErrTypeCheck ;};if _da !=nil {return _da ;};};return nil ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_add :=PSReal {};_add .Val =val ;return &_add };func (_fbc *PSOperand )and (_aaf *PSStack )error {_ae ,_deaf :=_aaf .Pop ();if _deaf !=nil {return _deaf ;};_cg ,_deaf :=_aaf .Pop ();if _deaf !=nil {return _deaf ;};if _dfc ,_caed :=_ae .(*PSBoolean );_caed {_aca ,_ea :=_cg .(*PSBoolean );if !_ea {return ErrTypeCheck ;};_deaf =_aaf .Push (MakeBool (_dfc .Val &&_aca .Val ));return _deaf ;};if _ggcac ,_ad :=_ae .(*PSInteger );_ad {_bdfe ,_gbg :=_cg .(*PSInteger );if !_gbg {return ErrTypeCheck ;};_deaf =_aaf .Push (MakeInteger (_ggcac .Val &_bdfe .Val ));return _deaf ;};return ErrTypeCheck ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_ebcc :=PSBoolean {};_ebcc .Val =val ;return &_ebcc };func (_abdb *PSOperand )roll (_caba *PSStack )error {_dbb ,_abfg :=_caba .Pop ();if _abfg !=nil {return _abfg ;};_abga ,_abfg :=_caba .Pop ();if _abfg !=nil {return _abfg ;};_accd ,_bea :=_dbb .(*PSInteger );if !_bea {return ErrTypeCheck ;};_deea ,_bea :=_abga .(*PSInteger );if !_bea {return ErrTypeCheck ;};if _deea .Val < 0{return ErrRangeCheck ;};if _deea .Val ==0||_deea .Val ==1{return nil ;};if _deea .Val > len (*_caba ){return ErrStackUnderflow ;};for _cec :=0;_cec < _bgaa (_accd .Val );_cec ++{var _ebd []PSObject ;_ebd =(*_caba )[len (*_caba )-(_deea .Val ):len (*_caba )];if _accd .Val > 0{_bagf :=_ebd [len (_ebd )-1];_ebd =append ([]PSObject {_bagf },_ebd [0:len (_ebd )-1]...);}else {_ddgd :=_ebd [len (_ebd )-_deea .Val ];_ebd =append (_ebd [1:],_ddgd );};_aaff :=append ((*_caba )[0:len (*_caba )-_deea .Val ],_ebd ...);_caba =&_aaff ;};return nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_bg *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ga :=range objects {_bc :=_bg .Stack .Push (_ga );if _bc !=nil {return nil ,_bc ;};};_dc :=_bg ._gd .Exec (_bg .Stack );if _dc !=nil {_eg .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dc );return nil ,_dc ;};_ag :=[]PSObject (*_bg .Stack );_bg .Stack .Empty ();return _ag ,nil ;};var ErrUnsupportedOperand =_c .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_dagc *PSOperand )mod (_faad *PSStack )error {_fca ,_bafa :=_faad .Pop ();if _bafa !=nil {return _bafa ;};_ggg ,_bafa :=_faad .Pop ();if _bafa !=nil {return _bafa ;};_cbgb ,_afda :=_fca .(*PSInteger );if !_afda {return ErrTypeCheck ;};if _cbgb .Val ==0{return ErrUndefinedResult ;};_dcga ,_afda :=_ggg .(*PSInteger );if !_afda {return ErrTypeCheck ;};_aggb :=_dcga .Val %_cbgb .Val ;_bafa =_faad .Push (MakeInteger (_aggb ));return _bafa ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_dcg *PSOperand )div (_bba *PSStack )error {_dce ,_aga :=_bba .Pop ();if _aga !=nil {return _aga ;};_gaa ,_aga :=_bba .Pop ();if _aga !=nil {return _aga ;};_eddf ,_eec :=_dce .(*PSReal );_fdb ,_fgc :=_dce .(*PSInteger );if !_eec &&!_fgc {return ErrTypeCheck ;};if _eec &&_eddf .Val ==0{return ErrUndefinedResult ;};if _fgc &&_fdb .Val ==0{return ErrUndefinedResult ;};_fgg ,_ebfd :=_gaa .(*PSReal );_bcf ,_bbf :=_gaa .(*PSInteger );if !_ebfd &&!_bbf {return ErrTypeCheck ;};var _gaca float64 ;if _ebfd {_gaca =_fgg .Val ;}else {_gaca =float64 (_bcf .Val );};if _eec {_gaca /=_eddf .Val ;}else {_gaca /=float64 (_fdb .Val );};_aga =_bba .Push (MakeReal (_gaca ));return _aga ;};func (_efc *PSOperand )ceiling (_gf *PSStack )error {_aed ,_gfc :=_gf .Pop ();if _gfc !=nil {return _gfc ;};if _gac ,_dec :=_aed .(*PSReal );_dec {_gfc =_gf .Push (MakeReal (_g .Ceil (_gac .Val )));}else if _adb ,_fee :=_aed .(*PSInteger );_fee {_gfc =_gf .Push (MakeInteger (_adb .Val ));}else {_gfc =ErrTypeCheck ;};return _gfc ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _edd []float64 ;for _ ,_gbc :=range objects {if _ge ,_ff :=_gbc .(*PSInteger );_ff {_edd =append (_edd ,float64 (_ge .Val ));}else if _ce ,_bf :=_gbc .(*PSReal );_bf {_edd =append (_edd ,_ce .Val );}else {return nil ,ErrTypeCheck ;};};return _edd ,nil ;};func (_cgg *PSParser )parseNumber ()(PSObject ,error ){_dgf ,_eegd :=_b .ParseNumber (_cgg ._cgae );if _eegd !=nil {return nil ,_eegd ;};switch _fgdf :=_dgf .(type ){case *_b .PdfObjectFloat :return MakeReal (float64 (*_fgdf )),nil ;case *_b .PdfObjectInteger :return MakeInteger (int (*_fgdf )),nil ;};return nil ,_d .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dgf );};func (_dcb *PSBoolean )DebugString ()string {return _d .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_dcb .Val );};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_ceff :=PSParser {};_bcb :=_ed .NewBuffer (content );_ceff ._cgae =_ef .NewReader (_bcb );return &_ceff ;};func (_ee *PSProgram )DebugString ()string {_gg :="\u007b\u0020";for _ ,_agg :=range *_ee {_gg +=_agg .DebugString ();_gg +="\u0020";};_gg +="\u007d";return _gg ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dgff :=PSOperand (val );return &_dgff };var ErrTypeCheck =_c .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_bceb :=PSInteger {};_bceb .Val =val ;return &_bceb };func (_fa *PSOperand )copy (_dcbe *PSStack )error {_dae ,_gaf :=_dcbe .PopInteger ();if _gaf !=nil {return _gaf ;};if _dae < 0{return ErrRangeCheck ;};if _dae > len (*_dcbe ){return ErrRangeCheck ;};*_dcbe =append (*_dcbe ,(*_dcbe )[len (*_dcbe )-_dae :]...);return nil ;};func (_bad *PSOperand )truncate (_fbga *PSStack )error {_gade ,_bede :=_fbga .Pop ();if _bede !=nil {return _bede ;};if _bgfe ,_cfd :=_gade .(*PSReal );_cfd {_dadc :=int (_bgfe .Val );_bede =_fbga .Push (MakeReal (float64 (_dadc )));}else if _ffc ,_aaa :=_gade .(*PSInteger );_aaa {_bede =_fbga .Push (MakeInteger (_ffc .Val ));}else {return ErrTypeCheck ;};return _bede ;};func (_be *PSInteger )Duplicate ()PSObject {_efg :=PSInteger {};_efg .Val =_be .Val ;return &_efg };func (_ac *PSBoolean )String ()string {return _d .Sprintf ("\u0025\u0076",_ac .Val )};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_bged *PSStack )PopInteger ()(int ,error ){_edab ,_aegbc :=_bged .Pop ();if _aegbc !=nil {return 0,_aegbc ;};if _aag ,_gbfc :=_edab .(*PSInteger );_gbfc {return _aag .Val ,nil ;};return 0,ErrTypeCheck ;};func (_gacb *PSParser )parseFunction ()(*PSProgram ,error ){_acbg ,_ :=_gacb ._cgae .ReadByte ();if _acbg !='{'{return nil ,_c .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_cde :=NewPSProgram ();for {_gacb .skipSpaces ();_fgdg ,_cff :=_gacb ._cgae .Peek (2);if _cff !=nil {if _cff ==_f .EOF {break ;};return nil ,_cff ;};_eg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fgdg ));if _fgdg [0]=='}'{_eg .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_gacb ._cgae .ReadByte ();break ;}else if _fgdg [0]=='{'{_eg .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_ddbd ,_afec :=_gacb .parseFunction ();if _afec !=nil {return nil ,_afec ;};_cde .Append (_ddbd );}else if _b .IsDecimalDigit (_fgdg [0])||(_fgdg [0]=='-'&&_b .IsDecimalDigit (_fgdg [1])){_eg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_bffd ,_deb :=_gacb .parseNumber ();if _deb !=nil {return nil ,_deb ;};_cde .Append (_bffd );}else {_eg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_fgdg ,_ =_gacb ._cgae .Peek (5);_bddg :=string (_fgdg );_eg .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_bddg );if (len (_bddg )> 4)&&(_bddg [:5]=="\u0066\u0061\u006cs\u0065"){_ebfe ,_caf :=_gacb .parseBool ();if _caf !=nil {return nil ,_caf ;};_cde .Append (_ebfe );}else if (len (_bddg )> 3)&&(_bddg [:4]=="\u0074\u0072\u0075\u0065"){_babb ,_ggcd :=_gacb .parseBool ();if _ggcd !=nil {return nil ,_ggcd ;};_cde .Append (_babb );}else {_aedaf ,_bffc :=_gacb .parseOperand ();if _bffc !=nil {return nil ,_bffc ;};_cde .Append (_aedaf );};};};return _cde ,nil ;};func (_gfac *PSOperand )ne (_agd *PSStack )error {_accg :=_gfac .eq (_agd );if _accg !=nil {return _accg ;};_accg =_gfac .not (_agd );return _accg ;};func (_cge *PSOperand )sin (_bbca *PSStack )error {_ggdg ,_aafg :=_bbca .PopNumberAsFloat64 ();if _aafg !=nil {return _aafg ;};_gga :=_g .Sin (_ggdg *_g .Pi /180.0);_aafg =_bbca .Push (MakeReal (_gga ));return _aafg ;};func (_ddb *PSOperand )ge (_bbff *PSStack )error {_bggb ,_acee :=_bbff .PopNumberAsFloat64 ();if _acee !=nil {return _acee ;};_daea ,_acee :=_bbff .PopNumberAsFloat64 ();if _acee !=nil {return _acee ;};if _g .Abs (_daea -_bggb )< _ca {_bcc :=_bbff .Push (MakeBool (true ));return _bcc ;}else if _daea > _bggb {_gcg :=_bbff .Push (MakeBool (true ));return _gcg ;}else {_bdb :=_bbff .Push (MakeBool (false ));return _bdb ;};};func (_fbd *PSOperand )index (_afd *PSStack )error {_afc ,_gea :=_afd .Pop ();if _gea !=nil {return _gea ;};_aec ,_ec :=_afc .(*PSInteger );if !_ec {return ErrTypeCheck ;};if _aec .Val < 0{return ErrRangeCheck ;};if _aec .Val > len (*_afd )-1{return ErrStackUnderflow ;};_cf :=(*_afd )[len (*_afd )-1-_aec .Val ];_gea =_afd .Push (_cf .Duplicate ());return _gea ;};func (_bgg *PSOperand )eq (_gacf *PSStack )error {_egd ,_cc :=_gacf .Pop ();if _cc !=nil {return _cc ;};_dfd ,_cc :=_gacf .Pop ();if _cc !=nil {return _cc ;};_ede ,_cda :=_egd .(*PSBoolean );_deda ,_abd :=_dfd .(*PSBoolean );if _cda ||_abd {var _gba error ;if _cda &&_abd {_gba =_gacf .Push (MakeBool (_ede .Val ==_deda .Val ));}else {_gba =_gacf .Push (MakeBool (false ));};return _gba ;};var _efcd float64 ;var _cef float64 ;if _bbcb ,_bfa :=_egd .(*PSInteger );_bfa {_efcd =float64 (_bbcb .Val );}else if _gde ,_bace :=_egd .(*PSReal );_bace {_efcd =_gde .Val ;}else {return ErrTypeCheck ;};if _fdc ,_aabg :=_dfd .(*PSInteger );_aabg {_cef =float64 (_fdc .Val );}else if _edcc ,_gfb :=_dfd .(*PSReal );_gfb {_cef =_edcc .Val ;}else {return ErrTypeCheck ;};if _g .Abs (_cef -_efcd )< _ca {_cc =_gacf .Push (MakeBool (true ));}else {_cc =_gacf .Push (MakeBool (false ));};return _cc ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_cgaf *PSParser )parseBool ()(*PSBoolean ,error ){_cddee ,_dfa :=_cgaf ._cgae .Peek (4);if _dfa !=nil {return MakeBool (false ),_dfa ;};if (len (_cddee )>=4)&&(string (_cddee [:4])=="\u0074\u0072\u0075\u0065"){_cgaf ._cgae .Discard (4);return MakeBool (true ),nil ;};_cddee ,_dfa =_cgaf ._cgae .Peek (5);if _dfa !=nil {return MakeBool (false ),_dfa ;};if (len (_cddee )>=5)&&(string (_cddee [:5])=="\u0066\u0061\u006cs\u0065"){_cgaf ._cgae .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_c .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};var ErrStackOverflow =_c .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_ebf *PSOperand )bitshift (_gcc *PSStack )error {_cab ,_cbc :=_gcc .PopInteger ();if _cbc !=nil {return _cbc ;};_dcac ,_cbc :=_gcc .PopInteger ();if _cbc !=nil {return _cbc ;};var _fc int ;if _cab >=0{_fc =_dcac <<uint (_cab );}else {_fc =_dcac >>uint (-_cab );};_cbc =_gcc .Push (MakeInteger (_fc ));return _cbc ;};func (_dcc *PSInteger )String ()string {return _d .Sprintf ("\u0025\u0064",_dcc .Val )};func _bgaa (_efgd int )int {if _efgd < 0{return -_efgd ;};return _efgd ;};

// Push pushes an object on top of the stack.
func (_bcg *PSStack )Push (obj PSObject )error {if len (*_bcg )> 100{return ErrStackOverflow ;};*_bcg =append (*_bcg ,obj );return nil ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_fef *PSStack )DebugString ()string {_bgea :="\u005b\u0020";for _ ,_gdec :=range *_fef {_bgea +=_gdec .DebugString ();_bgea +="\u0020";};_bgea +="\u005d";return _bgea ;};func (_eab *PSOperand )or (_cace *PSStack )error {_aad ,_bgf :=_cace .Pop ();if _bgf !=nil {return _bgf ;};_acf ,_bgf :=_cace .Pop ();if _bgf !=nil {return _bgf ;};if _acfe ,_fcg :=_aad .(*PSBoolean );_fcg {_gcb ,_eaa :=_acf .(*PSBoolean );if !_eaa {return ErrTypeCheck ;};_bgf =_cace .Push (MakeBool (_acfe .Val ||_gcb .Val ));return _bgf ;};if _acg ,_bbaa :=_aad .(*PSInteger );_bbaa {_cgda ,_cbcf :=_acf .(*PSInteger );if !_cbcf {return ErrTypeCheck ;};_bgf =_cace .Push (MakeInteger (_acg .Val |_cgda .Val ));return _bgf ;};return ErrTypeCheck ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// Append appends an object to the PSProgram.
func (_aa *PSProgram )Append (obj PSObject ){*_aa =append (*_aa ,obj )};func (_def *PSOperand )log (_efb *PSStack )error {_cea ,_bae :=_efb .PopNumberAsFloat64 ();if _bae !=nil {return _bae ;};_aeb :=_g .Log10 (_cea );_bae =_efb .Push (MakeReal (_aeb ));return _bae ;};

// Parse parses the postscript and store as a program that can be executed.
func (_bbd *PSParser )Parse ()(*PSProgram ,error ){_bbd .skipSpaces ();_gfbe ,_cbbg :=_bbd ._cgae .Peek (2);if _cbbg !=nil {return nil ,_cbbg ;};if _gfbe [0]!='{'{return nil ,_c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_dac ,_cbbg :=_bbd .parseFunction ();if _cbbg !=nil &&_cbbg !=_f .EOF {return nil ,_cbbg ;};return _dac ,_cbbg ;};const _ca =0.000001;func (_baca *PSOperand )ifelse (_afe *PSStack )error {_ebbb ,_eddc :=_afe .Pop ();if _eddc !=nil {return _eddc ;};_dbe ,_eddc :=_afe .Pop ();if _eddc !=nil {return _eddc ;};_aeda ,_eddc :=_afe .Pop ();if _eddc !=nil {return _eddc ;};_gag ,_aef :=_ebbb .(*PSProgram );if !_aef {return ErrTypeCheck ;};_ged ,_aef :=_dbe .(*PSProgram );if !_aef {return ErrTypeCheck ;};_bcfb ,_aef :=_aeda .(*PSBoolean );if !_aef {return ErrTypeCheck ;};if _bcfb .Val {_cgc :=_ged .Exec (_afe );return _cgc ;};_eddc =_gag .Exec (_afe );return _eddc ;};func (_fdcg *PSOperand )idiv (_ccd *PSStack )error {_dedae ,_adcb :=_ccd .Pop ();if _adcb !=nil {return _adcb ;};_ggdf ,_adcb :=_ccd .Pop ();if _adcb !=nil {return _adcb ;};_gdb ,_fbcd :=_dedae .(*PSInteger );if !_fbcd {return ErrTypeCheck ;};if _gdb .Val ==0{return ErrUndefinedResult ;};_gfa ,_fbcd :=_ggdf .(*PSInteger );if !_fbcd {return ErrTypeCheck ;};_aedf :=_gfa .Val /_gdb .Val ;_adcb =_ccd .Push (MakeInteger (_aedf ));return _adcb ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_dg *PSOperand )Exec (stack *PSStack )error {_fe :=ErrUnsupportedOperand ;switch *_dg {case "\u0061\u0062\u0073":_fe =_dg .abs (stack );case "\u0061\u0064\u0064":_fe =_dg .add (stack );case "\u0061\u006e\u0064":_fe =_dg .and (stack );case "\u0061\u0074\u0061\u006e":_fe =_dg .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_fe =_dg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_fe =_dg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_fe =_dg .copy (stack );case "\u0063\u006f\u0073":_fe =_dg .cos (stack );case "\u0063\u0076\u0069":_fe =_dg .cvi (stack );case "\u0063\u0076\u0072":_fe =_dg .cvr (stack );case "\u0064\u0069\u0076":_fe =_dg .div (stack );case "\u0064\u0075\u0070":_fe =_dg .dup (stack );case "\u0065\u0071":_fe =_dg .eq (stack );case "\u0065\u0078\u0063\u0068":_fe =_dg .exch (stack );case "\u0065\u0078\u0070":_fe =_dg .exp (stack );case "\u0066\u006c\u006fo\u0072":_fe =_dg .floor (stack );case "\u0067\u0065":_fe =_dg .ge (stack );case "\u0067\u0074":_fe =_dg .gt (stack );case "\u0069\u0064\u0069\u0076":_fe =_dg .idiv (stack );case "\u0069\u0066":_fe =_dg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_fe =_dg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_fe =_dg .index (stack );case "\u006c\u0065":_fe =_dg .le (stack );case "\u006c\u006f\u0067":_fe =_dg .log (stack );case "\u006c\u006e":_fe =_dg .ln (stack );case "\u006c\u0074":_fe =_dg .lt (stack );case "\u006d\u006f\u0064":_fe =_dg .mod (stack );case "\u006d\u0075\u006c":_fe =_dg .mul (stack );case "\u006e\u0065":_fe =_dg .ne (stack );case "\u006e\u0065\u0067":_fe =_dg .neg (stack );case "\u006e\u006f\u0074":_fe =_dg .not (stack );case "\u006f\u0072":_fe =_dg .or (stack );case "\u0070\u006f\u0070":_fe =_dg .pop (stack );case "\u0072\u006f\u0075n\u0064":_fe =_dg .round (stack );case "\u0072\u006f\u006c\u006c":_fe =_dg .roll (stack );case "\u0073\u0069\u006e":_fe =_dg .sin (stack );case "\u0073\u0071\u0072\u0074":_fe =_dg .sqrt (stack );case "\u0073\u0075\u0062":_fe =_dg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_fe =_dg .truncate (stack );case "\u0078\u006f\u0072":_fe =_dg .xor (stack );};return _fe ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_bb :=&PSExecutor {};_bb .Stack =NewPSStack ();_bb ._gd =program ;return _bb ;};