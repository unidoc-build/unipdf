//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_e "bufio";_a "bytes";_g "errors";_ef "fmt";_aa "github.com/unidoc/unipdf/v3/common";_ge "github.com/unidoc/unipdf/v3/core";_f "io";_b "math";);func (_egg *PSOperand )cos (_fab *PSStack )error {_bdcb ,_bgc :=_fab .PopNumberAsFloat64 ();
if _bgc !=nil {return _bgc ;};_ddd :=_b .Cos (_bdcb *_b .Pi /180.0);_bgc =_fab .Push (MakeReal (_ddd ));return _bgc ;};

// Append appends an object to the PSProgram.
func (_aca *PSProgram )Append (obj PSObject ){*_aca =append (*_aca ,obj )};func (_ggg *PSOperand )exp (_cdc *PSStack )error {_fbfa ,_fbd :=_cdc .PopNumberAsFloat64 ();if _fbd !=nil {return _fbd ;};_ebec ,_fbd :=_cdc .PopNumberAsFloat64 ();if _fbd !=nil {return _fbd ;
};if _b .Abs (_fbfa )< 1&&_ebec < 0{return ErrUndefinedResult ;};_bac :=_b .Pow (_ebec ,_fbfa );_fbd =_cdc .Push (MakeReal (_bac ));return _fbd ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_dfd *PSOperand )abs (_bec *PSStack )error {_cgc ,_cee :=_bec .Pop ();if _cee !=nil {return _cee ;};if _gg ,_dcb :=_cgc .(*PSReal );_dcb {_gfd :=_gg .Val ;if _gfd < 0{_cee =_bec .Push (MakeReal (-_gfd ));
}else {_cee =_bec .Push (MakeReal (_gfd ));};}else if _cd ,_afe :=_cgc .(*PSInteger );_afe {_ebe :=_cd .Val ;if _ebe < 0{_cee =_bec .Push (MakeInteger (-_ebe ));}else {_cee =_bec .Push (MakeInteger (_ebe ));};}else {return ErrTypeCheck ;};return _cee ;
};func (_dfg *PSProgram )Duplicate ()PSObject {_ab :=&PSProgram {};for _ ,_bdg :=range *_dfg {_ab .Append (_bdg .Duplicate ());};return _ab ;};func (_gea *PSOperand )xor (_gbe *PSStack )error {_dba ,_ecg :=_gbe .Pop ();if _ecg !=nil {return _ecg ;};_aecg ,_ecg :=_gbe .Pop ();
if _ecg !=nil {return _ecg ;};if _fefb ,_dgec :=_dba .(*PSBoolean );_dgec {_gbc ,_bcaa :=_aecg .(*PSBoolean );if !_bcaa {return ErrTypeCheck ;};_ecg =_gbe .Push (MakeBool (_fefb .Val !=_gbc .Val ));return _ecg ;};if _dcac ,_dcef :=_dba .(*PSInteger );_dcef {_dcgd ,_gcdg :=_aecg .(*PSInteger );
if !_gcdg {return ErrTypeCheck ;};_ecg =_gbe .Push (MakeInteger (_dcac .Val ^_dcgd .Val ));return _ecg ;};return ErrTypeCheck ;};func (_gdf *PSBoolean )String ()string {return _ef .Sprintf ("\u0025\u0076",_gdf .Val )};func (_cga *PSOperand )or (_cefe *PSStack )error {_cgg ,_bdf :=_cefe .Pop ();
if _bdf !=nil {return _bdf ;};_cgbe ,_bdf :=_cefe .Pop ();if _bdf !=nil {return _bdf ;};if _abfb ,_cdab :=_cgg .(*PSBoolean );_cdab {_bfa ,_fgf :=_cgbe .(*PSBoolean );if !_fgf {return ErrTypeCheck ;};_bdf =_cefe .Push (MakeBool (_abfb .Val ||_bfa .Val ));
return _bdf ;};if _dfgg ,_gcgag :=_cgg .(*PSInteger );_gcgag {_feddd ,_dcg :=_cgbe .(*PSInteger );if !_dcg {return ErrTypeCheck ;};_bdf =_cefe .Push (MakeInteger (_dfgg .Val |_feddd .Val ));return _bdf ;};return ErrTypeCheck ;};func (_afde *PSOperand )cvr (_cda *PSStack )error {_afdd ,_ebf :=_cda .Pop ();
if _ebf !=nil {return _ebf ;};if _eaa ,_adef :=_afdd .(*PSReal );_adef {_ebf =_cda .Push (MakeReal (_eaa .Val ));}else if _bece ,_fdc :=_afdd .(*PSInteger );_fdc {_ebf =_cda .Push (MakeReal (float64 (_bece .Val )));}else {return ErrTypeCheck ;};return _ebf ;
};func (_bea *PSOperand )sub (_cfa *PSStack )error {_aeb ,_afc :=_cfa .Pop ();if _afc !=nil {return _afc ;};_bce ,_afc :=_cfa .Pop ();if _afc !=nil {return _afc ;};_fbb ,_cfd :=_aeb .(*PSReal );_gdd ,_bfaa :=_aeb .(*PSInteger );if !_cfd &&!_bfaa {return ErrTypeCheck ;
};_ebcb ,_eafa :=_bce .(*PSReal );_dgd ,_bbba :=_bce .(*PSInteger );if !_eafa &&!_bbba {return ErrTypeCheck ;};if _bfaa &&_bbba {_fad :=_dgd .Val -_gdd .Val ;_abfc :=_cfa .Push (MakeInteger (_fad ));return _abfc ;};var _ggc float64 =0;if _eafa {_ggc =_ebcb .Val ;
}else {_ggc =float64 (_dgd .Val );};if _cfd {_ggc -=_fbb .Val ;}else {_ggc -=float64 (_gdd .Val );};_afc =_cfa .Push (MakeReal (_ggc ));return _afc ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_af *PSReal )DebugString ()string {return _ef .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_af .Val );};func (_ged *PSOperand )bitshift (_gcd *PSStack )error {_fg ,_ebc :=_gcd .PopInteger ();if _ebc !=nil {return _ebc ;
};_gec ,_ebc :=_gcd .PopInteger ();if _ebc !=nil {return _ebc ;};var _fa int ;if _fg >=0{_fa =_gec <<uint (_fg );}else {_fa =_gec >>uint (-_fg );};_ebc =_gcd .Push (MakeInteger (_fa ));return _ebc ;};func (_gcc *PSOperand )ifelse (_cef *PSStack )error {_fecd ,_cfe :=_cef .Pop ();
if _cfe !=nil {return _cfe ;};_acag ,_cfe :=_cef .Pop ();if _cfe !=nil {return _cfe ;};_gdc ,_cfe :=_cef .Pop ();if _cfe !=nil {return _cfe ;};_ffa ,_ddc :=_fecd .(*PSProgram );if !_ddc {return ErrTypeCheck ;};_cfeb ,_ddc :=_acag .(*PSProgram );if !_ddc {return ErrTypeCheck ;
};_abaa ,_ddc :=_gdc .(*PSBoolean );if !_ddc {return ErrTypeCheck ;};if _abaa .Val {_eac :=_cfeb .Exec (_cef );return _eac ;};_cfe =_ffa .Exec (_cef );return _cfe ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dda :=PSOperand (val );return &_dda };func (_eca *PSOperand )atan (_cc *PSStack )error {_aec ,_abf :=_cc .PopNumberAsFloat64 ();if _abf !=nil {return _abf ;};_fcc ,_abf :=_cc .PopNumberAsFloat64 ();if _abf !=nil {return _abf ;
};if _aec ==0{var _ecba error ;if _fcc < 0{_ecba =_cc .Push (MakeReal (270));}else {_ecba =_cc .Push (MakeReal (90));};return _ecba ;};_bed :=_fcc /_aec ;_ccc :=_b .Atan (_bed )*180/_b .Pi ;_abf =_cc .Push (MakeReal (_ccc ));return _abf ;};

// Push pushes an object on top of the stack.
func (_cfc *PSStack )Push (obj PSObject )error {if len (*_cfc )> 100{return ErrStackOverflow ;};*_cfc =append (*_cfc ,obj );return nil ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cbb :=PSParser {};_dee :=_a .NewBuffer (content );_cbb ._agad =_e .NewReader (_dee );return &_cbb ;};func (_ggd *PSOperand )ifCondition (_acgb *PSStack )error {_bgbb ,_beb :=_acgb .Pop ();if _beb !=nil {return _beb ;
};_faae ,_beb :=_acgb .Pop ();if _beb !=nil {return _beb ;};_dbec ,_cdb :=_bgbb .(*PSProgram );if !_cdb {return ErrTypeCheck ;};_ccf ,_cdb :=_faae .(*PSBoolean );if !_cdb {return ErrTypeCheck ;};if _ccf .Val {_bcg :=_dbec .Exec (_acgb );return _bcg ;};
return nil ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_agad *_e .Reader };func (_bebb *PSParser )parseOperand ()(*PSOperand ,error ){var _ecc []byte ;for {_gcdd ,_egbf :=_bebb ._agad .Peek (1);if _egbf !=nil {if _egbf ==_f .EOF {break ;};return nil ,_egbf ;};if _ge .IsDelimiter (_gcdd [0]){break ;
};if _ge .IsWhiteSpace (_gcdd [0]){break ;};_bdb ,_ :=_bebb ._agad .ReadByte ();_ecc =append (_ecc ,_bdb );};if len (_ecc )==0{return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_ecc )),nil ;};func (_fea *PSOperand )copy (_ade *PSStack )error {_faa ,_cag :=_ade .PopInteger ();if _cag !=nil {return _cag ;};if _faa < 0{return ErrRangeCheck ;};if _faa > len (*_ade ){return ErrRangeCheck ;};*_ade =append (*_ade ,(*_ade )[len (*_ade )-_faa :]...);
return nil ;};func (_fedd *PSOperand )not (_dgef *PSStack )error {_ggfa ,_beegf :=_dgef .Pop ();if _beegf !=nil {return _beegf ;};if _ffbg ,_gcga :=_ggfa .(*PSBoolean );_gcga {_beegf =_dgef .Push (MakeBool (!_ffbg .Val ));return _beegf ;}else if _gdca ,_cefa :=_ggfa .(*PSInteger );
_cefa {_beegf =_dgef .Push (MakeInteger (^_gdca .Val ));return _beegf ;}else {return ErrTypeCheck ;};};func (_ca *PSOperand )Duplicate ()PSObject {_eef :=*_ca ;return &_eef };func (_bge *PSOperand )gt (_afda *PSStack )error {_bga ,_ceg :=_afda .PopNumberAsFloat64 ();
if _ceg !=nil {return _ceg ;};_fcd ,_ceg :=_afda .PopNumberAsFloat64 ();if _ceg !=nil {return _ceg ;};if _b .Abs (_fcd -_bga )< _d {_cff :=_afda .Push (MakeBool (false ));return _cff ;}else if _fcd > _bga {_dea :=_afda .Push (MakeBool (true ));return _dea ;
}else {_edc :=_afda .Push (MakeBool (false ));return _edc ;};};func (_gag *PSOperand )dup (_bcb *PSStack )error {_faf ,_egbb :=_bcb .Pop ();if _egbb !=nil {return _egbb ;};_egbb =_bcb .Push (_faf );if _egbb !=nil {return _egbb ;};_egbb =_bcb .Push (_faf .Duplicate ());
return _egbb ;};func (_dcdd *PSOperand )truncate (_bgd *PSStack )error {_afce ,_cgfb :=_bgd .Pop ();if _cgfb !=nil {return _cgfb ;};if _edbd ,_dbd :=_afce .(*PSReal );_dbd {_ccb :=int (_edbd .Val );_cgfb =_bgd .Push (MakeReal (float64 (_ccb )));}else if _dfgb ,_bfag :=_afce .(*PSInteger );
_bfag {_cgfb =_bgd .Push (MakeInteger (_dfgb .Val ));}else {return ErrTypeCheck ;};return _cgfb ;};const _d =0.000001;func (_bgb *PSProgram )DebugString ()string {_ad :="\u007b\u0020";for _ ,_bd :=range *_bgb {_ad +=_bd .DebugString ();_ad +="\u0020";};
_ad +="\u007d";return _ad ;};var ErrUndefinedResult =_g .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");var ErrStackUnderflow =_g .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");
func (_bf *PSInteger )String ()string {return _ef .Sprintf ("\u0025\u0064",_bf .Val )};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cf :=&PSExecutor {};_cf .Stack =NewPSStack ();_cf ._fc =program ;return _cf ;};func (_gge *PSOperand )sin (_ccfd *PSStack )error {_egdc ,_dga :=_ccfd .PopNumberAsFloat64 ();if _dga !=nil {return _dga ;
};_dae :=_b .Sin (_egdc *_b .Pi /180.0);_dga =_ccfd .Push (MakeReal (_dae ));return _dga ;};func (_dbc *PSOperand )String ()string {return string (*_dbc )};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_fe *PSInteger )Duplicate ()PSObject {_dc :=PSInteger {};_dc .Val =_fe .Val ;return &_dc };

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_fc *PSProgram ;};func (_cbc *PSOperand )eq (_afa *PSStack )error {_dde ,_dcbd :=_afa .Pop ();if _dcbd !=nil {return _dcbd ;};_egbg ,_dcbd :=_afa .Pop ();if _dcbd !=nil {return _dcbd ;};_cbg ,_cgcg :=_dde .(*PSBoolean );
_eed ,_bedf :=_egbg .(*PSBoolean );if _cgcg ||_bedf {var _bfee error ;if _cgcg &&_bedf {_bfee =_afa .Push (MakeBool (_cbg .Val ==_eed .Val ));}else {_bfee =_afa .Push (MakeBool (false ));};return _bfee ;};var _fgd float64 ;var _fbf float64 ;if _dge ,_fgda :=_dde .(*PSInteger );
_fgda {_fgd =float64 (_dge .Val );}else if _gad ,_edg :=_dde .(*PSReal );_edg {_fgd =_gad .Val ;}else {return ErrTypeCheck ;};if _bada ,_aaa :=_egbg .(*PSInteger );_aaa {_fbf =float64 (_bada .Val );}else if _dcea ,_beda :=_egbg .(*PSReal );_beda {_fbf =_dcea .Val ;
}else {return ErrTypeCheck ;};if _b .Abs (_fbf -_fgd )< _d {_dcbd =_afa .Push (MakeBool (true ));}else {_dcbd =_afa .Push (MakeBool (false ));};return _dcbd ;};func (_gda *PSOperand )le (_cdf *PSStack )error {_aaaag ,_gafc :=_cdf .PopNumberAsFloat64 ();
if _gafc !=nil {return _gafc ;};_feaa ,_gafc :=_cdf .PopNumberAsFloat64 ();if _gafc !=nil {return _gafc ;};if _b .Abs (_feaa -_aaaag )< _d {_ceb :=_cdf .Push (MakeBool (true ));return _ceb ;}else if _feaa < _aaaag {_dcce :=_cdf .Push (MakeBool (true ));
return _dcce ;}else {_gfe :=_cdf .Push (MakeBool (false ));return _gfe ;};};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_ebcg :=PSBoolean {};_ebcg .Val =val ;return &_ebcg };func (_aed *PSParser )parseBool ()(*PSBoolean ,error ){_bedb ,_bgab :=_aed ._agad .Peek (4);if _bgab !=nil {return MakeBool (false ),_bgab ;};if (len (_bedb )>=4)&&(string (_bedb [:4])=="\u0074\u0072\u0075\u0065"){_aed ._agad .Discard (4);
return MakeBool (true ),nil ;};_bedb ,_bgab =_aed ._agad .Peek (5);if _bgab !=nil {return MakeBool (false ),_bgab ;};if (len (_bedb )>=5)&&(string (_bedb [:5])=="\u0066\u0061\u006cs\u0065"){_aed ._agad .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_ece *PSOperand )sqrt (_acbc *PSStack )error {_acc ,_daeg :=_acbc .PopNumberAsFloat64 ();if _daeg !=nil {return _daeg ;};if _acc < 0{return ErrRangeCheck ;};_dadg :=_b .Sqrt (_acc );_daeg =_acbc .Push (MakeReal (_dadg ));return _daeg ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _be []float64 ;for _ ,_db :=range objects {if _ea ,_ac :=_db .(*PSInteger );_ac {_be =append (_be ,float64 (_ea .Val ));}else if _ed ,_eb :=_db .(*PSReal );_eb {_be =append (_be ,_ed .Val );
}else {return nil ,ErrTypeCheck ;};};return _be ,nil ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_gf *PSReal )Duplicate ()PSObject {_cg :=PSReal {};_cg .Val =_gf .Val ;return &_cg };

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_faaa *PSStack )PopInteger ()(int ,error ){_gfbg ,_eedb :=_faaa .Pop ();if _eedb !=nil {return 0,_eedb ;};if _dccg ,_gfge :=_gfbg .(*PSInteger );_gfge {return _dccg .Val ,nil ;};return 0,ErrTypeCheck ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};var ErrStackOverflow =_g .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_dcc *PSBoolean )DebugString ()string {return _ef .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_dcc .Val );};
func (_fae *PSOperand )round (_abda *PSStack )error {_cagf ,_cgccb :=_abda .Pop ();if _cgccb !=nil {return _cgccb ;};if _ccd ,_edcc :=_cagf .(*PSReal );_edcc {_cgccb =_abda .Push (MakeReal (_b .Floor (_ccd .Val +0.5)));}else if _dbef ,_fedf :=_cagf .(*PSInteger );
_fedf {_cgccb =_abda .Push (MakeInteger (_dbef .Val ));}else {return ErrTypeCheck ;};return _cgccb ;};func (_aff *PSOperand )ln (_edgd *PSStack )error {_dad ,_eag :=_edgd .PopNumberAsFloat64 ();if _eag !=nil {return _eag ;};_fafa :=_b .Log (_dad );_eag =_edgd .Push (MakeReal (_fafa ));
return _eag ;};func (_efa *PSOperand )and (_bfc *PSStack )error {_dd ,_agag :=_bfc .Pop ();if _agag !=nil {return _agag ;};_bfe ,_agag :=_bfc .Pop ();if _agag !=nil {return _agag ;};if _egf ,_efag :=_dd .(*PSBoolean );_efag {_aba ,_aae :=_bfe .(*PSBoolean );
if !_aae {return ErrTypeCheck ;};_agag =_bfc .Push (MakeBool (_egf .Val &&_aba .Val ));return _agag ;};if _aef ,_gaf :=_dd .(*PSInteger );_gaf {_ede ,_cgcc :=_bfe .(*PSInteger );if !_cgcc {return ErrTypeCheck ;};_agag =_bfc .Push (MakeInteger (_aef .Val &_ede .Val ));
return _agag ;};return ErrTypeCheck ;};func (_ebee *PSOperand )add (_ae *PSStack )error {_adb ,_eab :=_ae .Pop ();if _eab !=nil {return _eab ;};_ffd ,_eab :=_ae .Pop ();if _eab !=nil {return _eab ;};_afec ,_fef :=_adb .(*PSReal );_ada ,_aga :=_adb .(*PSInteger );
if !_fef &&!_aga {return ErrTypeCheck ;};_gc ,_fcf :=_ffd .(*PSReal );_bc ,_eae :=_ffd .(*PSInteger );if !_fcf &&!_eae {return ErrTypeCheck ;};if _aga &&_eae {_cb :=_ada .Val +_bc .Val ;_fbe :=_ae .Push (MakeInteger (_cb ));return _fbe ;};var _eeb float64 ;
if _fef {_eeb =_afec .Val ;}else {_eeb =float64 (_ada .Val );};if _fcf {_eeb +=_gc .Val ;}else {_eeb +=float64 (_bc .Val );};_eab =_ae .Push (MakeReal (_eeb ));return _eab ;};func (_bbb *PSReal )String ()string {return _ef .Sprintf ("\u0025\u002e\u0035\u0066",_bbb .Val )};
var ErrRangeCheck =_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_fgb *PSOperand )exch (_ddg *PSStack )error {_adg ,_aece :=_ddg .Pop ();if _aece !=nil {return _aece ;};_abc ,_aece :=_ddg .Pop ();
if _aece !=nil {return _aece ;};_aece =_ddg .Push (_adg );if _aece !=nil {return _aece ;};_aece =_ddg .Push (_abc );return _aece ;};func _dfbg (_bbg int )int {if _bbg < 0{return -_bbg ;};return _bbg ;};func (_gfdc *PSOperand )neg (_age *PSStack )error {_bbcg ,_fcdc :=_age .Pop ();
if _fcdc !=nil {return _fcdc ;};if _edb ,_gdcb :=_bbcg .(*PSReal );_gdcb {_fcdc =_age .Push (MakeReal (-_edb .Val ));return _fcdc ;}else if _gfeg ,_eaff :=_bbcg .(*PSInteger );_eaff {_fcdc =_age .Push (MakeInteger (-_gfeg .Val ));return _fcdc ;}else {return ErrTypeCheck ;
};};func (_efg *PSOperand )mod (_ecf *PSStack )error {_dfbc ,_edf :=_ecf .Pop ();if _edf !=nil {return _edf ;};_fed ,_edf :=_ecf .Pop ();if _edf !=nil {return _edf ;};_abe ,_ddee :=_dfbc .(*PSInteger );if !_ddee {return ErrTypeCheck ;};if _abe .Val ==0{return ErrUndefinedResult ;
};_gfc ,_ddee :=_fed .(*PSInteger );if !_ddee {return ErrTypeCheck ;};_aad :=_gfc .Val %_abe .Val ;_edf =_ecf .Push (MakeInteger (_aad ));return _edf ;};func (_gde *PSOperand )pop (_eeg *PSStack )error {_ ,_fcfc :=_eeg .Pop ();if _fcfc !=nil {return _fcfc ;
};return nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_cadg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_cba ,_fda :=_cadg .Pop ();if _fda !=nil {return 0,_fda ;};if _cfebc ,_adbb :=_cba .(*PSReal );_adbb {return _cfebc .Val ,nil ;}else if _cgec ,_fcg :=_cba .(*PSInteger );_fcg {return float64 (_cgec .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_ffae *PSOperand )ne (_ceeg *PSStack )error {_acab :=_ffae .eq (_ceeg );if _acab !=nil {return _acab ;};_acab =_ffae .not (_ceeg );return _acab ;};func (_ga *PSOperand )DebugString ()string {return _ef .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ga );
};func (_afd *PSOperand )ceiling (_fd *PSStack )error {_cge ,_aea :=_fd .Pop ();if _aea !=nil {return _aea ;};if _bbc ,_acf :=_cge .(*PSReal );_acf {_aea =_fd .Push (MakeReal (_b .Ceil (_bbc .Val )));}else if _gfb ,_dg :=_cge .(*PSInteger );_dg {_aea =_fd .Push (MakeInteger (_gfb .Val ));
}else {_aea =ErrTypeCheck ;};return _aea ;};

// Empty empties the stack.
func (_abbga *PSStack )Empty (){*_abbga =[]PSObject {}};func (_bdc *PSProgram )String ()string {_ec :="\u007b\u0020";for _ ,_dceb :=range *_bdc {_ec +=_dceb .String ();_ec +="\u0020";};_ec +="\u007d";return _ec ;};func (_fdb *PSOperand )ge (_ffb *PSStack )error {_fdba ,_gbg :=_ffb .PopNumberAsFloat64 ();
if _gbg !=nil {return _gbg ;};_eabg ,_gbg :=_ffb .PopNumberAsFloat64 ();if _gbg !=nil {return _gbg ;};if _b .Abs (_eabg -_fdba )< _d {_acaf :=_ffb .Push (MakeBool (true ));return _acaf ;}else if _eabg > _fdba {_egbc :=_ffb .Push (MakeBool (true ));return _egbc ;
}else {_dgg :=_ffb .Push (MakeBool (false ));return _dgg ;};};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// Parse parses the postscript and store as a program that can be executed.
func (_edcf *PSParser )Parse ()(*PSProgram ,error ){_edcf .skipSpaces ();_bfd ,_ffg :=_edcf ._agad .Peek (2);if _ffg !=nil {return nil ,_ffg ;};if _bfd [0]!='{'{return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_cdbg ,_ffg :=_edcf .parseFunction ();if _ffg !=nil &&_ffg !=_f .EOF {return nil ,_ffg ;};return _cdbg ,_ffg ;};func (_ggf *PSOperand )lt (_abaaf *PSStack )error {_baa ,_fgc :=_abaaf .PopNumberAsFloat64 ();if _fgc !=nil {return _fgc ;};_abd ,_fgc :=_abaaf .PopNumberAsFloat64 ();
if _fgc !=nil {return _fgc ;};if _b .Abs (_abd -_baa )< _d {_gfg :=_abaaf .Push (MakeBool (false ));return _gfg ;}else if _abd < _baa {_badg :=_abaaf .Push (MakeBool (true ));return _badg ;}else {_adff :=_abaaf .Push (MakeBool (false ));return _adff ;};
};func (_gac *PSOperand )roll (_cdca *PSStack )error {_affe ,_gccf :=_cdca .Pop ();if _gccf !=nil {return _gccf ;};_cgca ,_gccf :=_cdca .Pop ();if _gccf !=nil {return _gccf ;};_acee ,_fgg :=_affe .(*PSInteger );if !_fgg {return ErrTypeCheck ;};_agd ,_fgg :=_cgca .(*PSInteger );
if !_fgg {return ErrTypeCheck ;};if _agd .Val < 0{return ErrRangeCheck ;};if _agd .Val ==0||_agd .Val ==1{return nil ;};if _agd .Val > len (*_cdca ){return ErrStackUnderflow ;};for _afgg :=0;_afgg < _dfbg (_acee .Val );_afgg ++{var _dec []PSObject ;_dec =(*_cdca )[len (*_cdca )-(_agd .Val ):len (*_cdca )];
if _acee .Val > 0{_dac :=_dec [len (_dec )-1];_dec =append ([]PSObject {_dac },_dec [0:len (_dec )-1]...);}else {_dgb :=_dec [len (_dec )-_agd .Val ];_dec =append (_dec [1:],_dgb );};_acaa :=append ((*_cdca )[0:len (*_cdca )-_agd .Val ],_dec ...);_cdca =&_acaa ;
};return nil ;};

// Pop pops an object from the top of the stack.
func (_gcf *PSStack )Pop ()(PSObject ,error ){if len (*_gcf )< 1{return nil ,ErrStackUnderflow ;};_aag :=(*_gcf )[len (*_gcf )-1];*_gcf =(*_gcf )[0:len (*_gcf )-1];return _aag ,nil ;};

// Exec executes the program, typically leaving output values on the stack.
func (_ff *PSProgram )Exec (stack *PSStack )error {for _ ,_bae :=range *_ff {var _da error ;switch _cgd :=_bae .(type ){case *PSInteger :_ce :=_cgd ;_da =stack .Push (_ce );case *PSReal :_ee :=_cgd ;_da =stack .Push (_ee );case *PSBoolean :_dfb :=_cgd ;
_da =stack .Push (_dfb );case *PSProgram :_cgf :=_cgd ;_da =stack .Push (_cgf );case *PSOperand :_efe :=_cgd ;_da =_efe .Exec (stack );default:return ErrTypeCheck ;};if _da !=nil {return _da ;};};return nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_agg *PSOperand )floor (_aaf *PSStack )error {_gcdf ,_adf :=_aaf .Pop ();if _adf !=nil {return _adf ;};if _dbe ,_cad :=_gcdf .(*PSReal );_cad {_adf =_aaf .Push (MakeReal (_b .Floor (_dbe .Val )));}else if _bfce ,_eede :=_gcdf .(*PSInteger );
_eede {_adf =_aaf .Push (MakeInteger (_bfce .Val ));}else {return ErrTypeCheck ;};return _adf ;};func (_acb *PSOperand )log (_bdac *PSStack )error {_cdd ,_dcae :=_bdac .PopNumberAsFloat64 ();if _dcae !=nil {return _dcae ;};_acd :=_b .Log10 (_cdd );_dcae =_bdac .Push (MakeReal (_acd ));
return _dcae ;};func (_gb *PSBoolean )Duplicate ()PSObject {_efc :=PSBoolean {};_efc .Val =_gb .Val ;return &_efc };

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_faec :=PSReal {};_faec .Val =val ;return &_faec };

// Exec executes the operand `op` in the state specified by `stack`.
func (_ag *PSOperand )Exec (stack *PSStack )error {_de :=ErrUnsupportedOperand ;switch *_ag {case "\u0061\u0062\u0073":_de =_ag .abs (stack );case "\u0061\u0064\u0064":_de =_ag .add (stack );case "\u0061\u006e\u0064":_de =_ag .and (stack );case "\u0061\u0074\u0061\u006e":_de =_ag .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_de =_ag .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_de =_ag .ceiling (stack );case "\u0063\u006f\u0070\u0079":_de =_ag .copy (stack );case "\u0063\u006f\u0073":_de =_ag .cos (stack );
case "\u0063\u0076\u0069":_de =_ag .cvi (stack );case "\u0063\u0076\u0072":_de =_ag .cvr (stack );case "\u0064\u0069\u0076":_de =_ag .div (stack );case "\u0064\u0075\u0070":_de =_ag .dup (stack );case "\u0065\u0071":_de =_ag .eq (stack );case "\u0065\u0078\u0063\u0068":_de =_ag .exch (stack );
case "\u0065\u0078\u0070":_de =_ag .exp (stack );case "\u0066\u006c\u006fo\u0072":_de =_ag .floor (stack );case "\u0067\u0065":_de =_ag .ge (stack );case "\u0067\u0074":_de =_ag .gt (stack );case "\u0069\u0064\u0069\u0076":_de =_ag .idiv (stack );case "\u0069\u0066":_de =_ag .ifCondition (stack );
case "\u0069\u0066\u0065\u006c\u0073\u0065":_de =_ag .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_de =_ag .index (stack );case "\u006c\u0065":_de =_ag .le (stack );case "\u006c\u006f\u0067":_de =_ag .log (stack );case "\u006c\u006e":_de =_ag .ln (stack );
case "\u006c\u0074":_de =_ag .lt (stack );case "\u006d\u006f\u0064":_de =_ag .mod (stack );case "\u006d\u0075\u006c":_de =_ag .mul (stack );case "\u006e\u0065":_de =_ag .ne (stack );case "\u006e\u0065\u0067":_de =_ag .neg (stack );case "\u006e\u006f\u0074":_de =_ag .not (stack );
case "\u006f\u0072":_de =_ag .or (stack );case "\u0070\u006f\u0070":_de =_ag .pop (stack );case "\u0072\u006f\u0075n\u0064":_de =_ag .round (stack );case "\u0072\u006f\u006c\u006c":_de =_ag .roll (stack );case "\u0073\u0069\u006e":_de =_ag .sin (stack );
case "\u0073\u0071\u0072\u0074":_de =_ag .sqrt (stack );case "\u0073\u0075\u0062":_de =_ag .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_de =_ag .truncate (stack );case "\u0078\u006f\u0072":_de =_ag .xor (stack );};return _de ;
};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_ege *PSStack )DebugString ()string {_cdac :="\u005b\u0020";for _ ,_gfea :=range *_ege {_cdac +=_gfea .DebugString ();_cdac +="\u0020";};_cdac +="\u005d";return _cdac ;};func (_abbg *PSParser )parseFunction ()(*PSProgram ,error ){_ccg ,_ :=_abbg ._agad .ReadByte ();
if _ccg !='{'{return nil ,_g .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_gead :=NewPSProgram ();for {_abbg .skipSpaces ();_ddb ,_bdae :=_abbg ._agad .Peek (2);if _bdae !=nil {if _bdae ==_f .EOF {break ;
};return nil ,_bdae ;};_aa .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ddb ));if _ddb [0]=='}'{_aa .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_abbg ._agad .ReadByte ();
break ;}else if _ddb [0]=='{'{_aa .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_bab ,_bgdc :=_abbg .parseFunction ();if _bgdc !=nil {return nil ,_bgdc ;};_gead .Append (_bab );}else if _ge .IsDecimalDigit (_ddb [0])||(_ddb [0]=='-'&&_ge .IsDecimalDigit (_ddb [1])){_aa .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_gbd ,_ecgg :=_abbg .parseNumber ();if _ecgg !=nil {return nil ,_ecgg ;};_gead .Append (_gbd );}else {_aa .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ddb ,_ =_abbg ._agad .Peek (5);_dfdb :=string (_ddb );
_aa .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_dfdb );if (len (_dfdb )> 4)&&(_dfdb [:5]=="\u0066\u0061\u006cs\u0065"){_dacb ,_deg :=_abbg .parseBool ();if _deg !=nil {return nil ,_deg ;};_gead .Append (_dacb );}else if (len (_dfdb )> 3)&&(_dfdb [:4]=="\u0074\u0072\u0075\u0065"){_gdb ,_fadf :=_abbg .parseBool ();
if _fadf !=nil {return nil ,_fadf ;};_gead .Append (_gdb );}else {_fbfc ,_baad :=_abbg .parseOperand ();if _baad !=nil {return nil ,_baad ;};_gead .Append (_fbfc );};};};return _gead ,nil ;};func (_aaaa *PSOperand )idiv (_fbfe *PSStack )error {_fdbe ,_aaed :=_fbfe .Pop ();
if _aaed !=nil {return _aaed ;};_fdd ,_aaed :=_fbfe .Pop ();if _aaed !=nil {return _aaed ;};_cea ,_dbb :=_fdbe .(*PSInteger );if !_dbb {return ErrTypeCheck ;};if _cea .Val ==0{return ErrUndefinedResult ;};_ecbb ,_dbb :=_fdd .(*PSInteger );if !_dbb {return ErrTypeCheck ;
};_acg :=_ecbb .Val /_cea .Val ;_aaed =_fbfe .Push (MakeInteger (_acg ));return _aaed ;};

// String returns a string representation of the stack.
func (_dfgeg *PSStack )String ()string {_dagf :="\u005b\u0020";for _ ,_fde :=range *_dfgeg {_dagf +=_fde .String ();_dagf +="\u0020";};_dagf +="\u005d";return _dagf ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_df *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ba :=range objects {_bb :=_df .Stack .Push (_ba );if _bb !=nil {return nil ,_bb ;};};_ace :=_df ._fc .Exec (_df .Stack );if _ace !=nil {_aa .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ace );
return nil ,_ace ;};_fb :=[]PSObject (*_df .Stack );_df .Stack .Empty ();return _fb ,nil ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_efd :=PSInteger {};_efd .Val =val ;return &_efd };var ErrUnsupportedOperand =_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_eec *PSOperand )div (_eggf *PSStack )error {_egb ,_cfg :=_eggf .Pop ();if _cfg !=nil {return _cfg ;};_gcg ,_cfg :=_eggf .Pop ();if _cfg !=nil {return _cfg ;};_abb ,_eabe :=_egb .(*PSReal );_afg ,_ffcc :=_egb .(*PSInteger );
if !_eabe &&!_ffcc {return ErrTypeCheck ;};if _eabe &&_abb .Val ==0{return ErrUndefinedResult ;};if _ffcc &&_afg .Val ==0{return ErrUndefinedResult ;};_abg ,_aeg :=_gcg .(*PSReal );_dbg ,_dca :=_gcg .(*PSInteger );if !_aeg &&!_dca {return ErrTypeCheck ;
};var _bee float64 ;if _aeg {_bee =_abg .Val ;}else {_bee =float64 (_dbg .Val );};if _eabe {_bee /=_abb .Val ;}else {_bee /=float64 (_afg .Val );};_cfg =_eggf .Push (MakeReal (_bee ));return _cfg ;};var ErrTypeCheck =_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");
func (_eeca *PSParser )parseNumber ()(PSObject ,error ){_cce ,_bebd :=_ge .ParseNumber (_eeca ._agad );if _bebd !=nil {return nil ,_bebd ;};switch _cebb :=_cce .(type ){case *_ge .PdfObjectFloat :return MakeReal (float64 (*_cebb )),nil ;case *_ge .PdfObjectInteger :return MakeInteger (int (*_cebb )),nil ;
};return nil ,_ef .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cce );};func (_aged *PSParser )skipSpaces ()(int ,error ){_eecg :=0;for {_ffaf ,_dfge :=_aged ._agad .Peek (1);
if _dfge !=nil {return 0,_dfge ;};if _ge .IsWhiteSpace (_ffaf [0]){_aged ._agad .ReadByte ();_eecg ++;}else {break ;};};return _eecg ,nil ;};func (_beeg *PSOperand )mul (_bff *PSStack )error {_bca ,_adga :=_bff .Pop ();if _adga !=nil {return _adga ;};_gbb ,_adga :=_bff .Pop ();
if _adga !=nil {return _adga ;};_eba ,_efb :=_bca .(*PSReal );_fccd ,_ffe :=_bca .(*PSInteger );if !_efb &&!_ffe {return ErrTypeCheck ;};_adec ,_dgeb :=_gbb .(*PSReal );_eacb ,_dcdf :=_gbb .(*PSInteger );if !_dgeb &&!_dcdf {return ErrTypeCheck ;};if _ffe &&_dcdf {_egd :=_fccd .Val *_eacb .Val ;
_dag :=_bff .Push (MakeInteger (_egd ));return _dag ;};var _edce float64 ;if _efb {_edce =_eba .Val ;}else {_edce =float64 (_fccd .Val );};if _dgeb {_edce *=_adec .Val ;}else {_edce *=float64 (_eacb .Val );};_adga =_bff .Push (MakeReal (_edce ));return _adga ;
};func (_ffc *PSOperand )cvi (_adag *PSStack )error {_fca ,_feag :=_adag .Pop ();if _feag !=nil {return _feag ;};if _cgb ,_adbd :=_fca .(*PSReal );_adbd {_fec :=int (_cgb .Val );_feag =_adag .Push (MakeInteger (_fec ));}else if _bdgc ,_bad :=_fca .(*PSInteger );
_bad {_dcd :=_bdgc .Val ;_feag =_adag .Push (MakeInteger (_dcd ));}else {return ErrTypeCheck ;};return _feag ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_dcbdf *PSOperand )index (_dcbe *PSStack )error {_ebb ,_fdbf :=_dcbe .Pop ();if _fdbf !=nil {return _fdbf ;};_bda ,_bba :=_ebb .(*PSInteger );if !_bba {return ErrTypeCheck ;};if _bda .Val < 0{return ErrRangeCheck ;
};if _bda .Val > len (*_dcbe )-1{return ErrStackUnderflow ;};_bfca :=(*_dcbe )[len (*_dcbe )-1-_bda .Val ];_fdbf =_dcbe .Push (_bfca .Duplicate ());return _fdbf ;};func (_gd *PSInteger )DebugString ()string {return _ef .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_gd .Val );
};