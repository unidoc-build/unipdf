//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_e "bufio";_a "bytes";_be "errors";_g "fmt";_ac "github.com/unidoc/unipdf/v3/common";_gg "github.com/unidoc/unipdf/v3/core";_bg "io";_eg "math";);

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_dacc *PSOperand )eq (_eee *PSStack )error {_fbf ,_fdc :=_eee .Pop ();if _fdc !=nil {return _fdc ;};_gff ,_fdc :=_eee .Pop ();if _fdc !=nil {return _fdc ;};_gac ,_gdc :=_fbf .(*PSBoolean );_ceg ,_ebd :=_gff .(*PSBoolean );if _gdc ||_ebd {var _fba error ;if _gdc &&_ebd {_fba =_eee .Push (MakeBool (_gac .Val ==_ceg .Val ));}else {_fba =_eee .Push (MakeBool (false ));};return _fba ;};var _bcdb float64 ;var _bgfc float64 ;if _gfb ,_fca :=_fbf .(*PSInteger );_fca {_bcdb =float64 (_gfb .Val );}else if _adbb ,_cce :=_fbf .(*PSReal );_cce {_bcdb =_adbb .Val ;}else {return ErrTypeCheck ;};if _bgbb ,_gee :=_gff .(*PSInteger );_gee {_bgfc =float64 (_bgbb .Val );}else if _cdef ,_gdf :=_gff .(*PSReal );_gdf {_bgfc =_cdef .Val ;}else {return ErrTypeCheck ;};if _eg .Abs (_bgfc -_bcdb )< _f {_fdc =_eee .Push (MakeBool (true ));}else {_fdc =_eee .Push (MakeBool (false ));};return _fdc ;};var ErrUnsupportedOperand =_be .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_ebcg *PSOperand )round (_adbe *PSStack )error {_efbb ,_effe :=_adbe .Pop ();if _effe !=nil {return _effe ;};if _fed ,_daf :=_efbb .(*PSReal );_daf {_effe =_adbe .Push (MakeReal (_eg .Floor (_fed .Val +0.5)));}else if _edga ,_ceb :=_efbb .(*PSInteger );_ceb {_effe =_adbe .Push (MakeInteger (_edga .Val ));}else {return ErrTypeCheck ;};return _effe ;};func (_fbag *PSOperand )lt (_ggc *PSStack )error {_cac ,_fgac :=_ggc .PopNumberAsFloat64 ();if _fgac !=nil {return _fgac ;};_gdba ,_fgac :=_ggc .PopNumberAsFloat64 ();if _fgac !=nil {return _fgac ;};if _eg .Abs (_gdba -_cac )< _f {_cga :=_ggc .Push (MakeBool (false ));return _cga ;}else if _gdba < _cac {_gcfg :=_ggc .Push (MakeBool (true ));return _gcfg ;}else {_gaec :=_ggc .Push (MakeBool (false ));return _gaec ;};};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// String returns a string representation of the stack.
func (_ceca *PSStack )String ()string {_daa :="\u005b\u0020";for _ ,_cdg :=range *_ceca {_daa +=_cdg .String ();_daa +="\u0020";};_daa +="\u005d";return _daa ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_afe *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_gga :=range objects {_ed :=_afe .Stack .Push (_gga );if _ed !=nil {return nil ,_ed ;};};_ba :=_afe ._ad .Exec (_afe .Stack );if _ba !=nil {_ac .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ba );return nil ,_ba ;};_db :=[]PSObject (*_afe .Stack );_afe .Stack .Empty ();return _db ,nil ;};var ErrRangeCheck =_be .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_bbg *PSOperand )mul (_gdd *PSStack )error {_ff ,_edf :=_gdd .Pop ();if _edf !=nil {return _edf ;};_aggg ,_edf :=_gdd .Pop ();if _edf !=nil {return _edf ;};_cegg ,_gffc :=_ff .(*PSReal );_fbac ,_fec :=_ff .(*PSInteger );if !_gffc &&!_fec {return ErrTypeCheck ;};_dfgc ,_bfa :=_aggg .(*PSReal );_dgf ,_aggf :=_aggg .(*PSInteger );if !_bfa &&!_aggf {return ErrTypeCheck ;};if _fec &&_aggf {_cgad :=_fbac .Val *_dgf .Val ;_bcc :=_gdd .Push (MakeInteger (_cgad ));return _bcc ;};var _abc float64 ;if _gffc {_abc =_cegg .Val ;}else {_abc =float64 (_fbac .Val );};if _bfa {_abc *=_dfgc .Val ;}else {_abc *=float64 (_dgf .Val );};_edf =_gdd .Push (MakeReal (_abc ));return _edf ;};func (_fae *PSBoolean )String ()string {return _g .Sprintf ("\u0025\u0076",_fae .Val )};func (_bcd *PSReal )DebugString ()string {return _g .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_bcd .Val );};func (_gaab *PSOperand )truncate (_bfb *PSStack )error {_ccg ,_bed :=_bfb .Pop ();if _bed !=nil {return _bed ;};if _gba ,_acac :=_ccg .(*PSReal );_acac {_aacc :=int (_gba .Val );_bed =_bfb .Push (MakeReal (float64 (_aacc )));}else if _dgdf ,_baeae :=_ccg .(*PSInteger );_baeae {_bed =_bfb .Push (MakeInteger (_dgdf .Val ));}else {return ErrTypeCheck ;};return _bed ;};

// Parse parses the postscript and store as a program that can be executed.
func (_dcf *PSParser )Parse ()(*PSProgram ,error ){_dcf .skipSpaces ();_abe ,_gdge :=_dcf ._fgaf .Peek (2);if _gdge !=nil {return nil ,_gdge ;};if _abe [0]!='{'{return nil ,_be .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_feee ,_gdge :=_dcf .parseFunction ();if _gdge !=nil &&_gdge !=_bg .EOF {return nil ,_gdge ;};return _feee ,_gdge ;};func (_dbc *PSOperand )Duplicate ()PSObject {_fbd :=*_dbc ;return &_fbd };func (_fee *PSInteger )DebugString ()string {return _g .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_fee .Val );};

// Pop pops an object from the top of the stack.
func (_ggeb *PSStack )Pop ()(PSObject ,error ){if len (*_ggeb )< 1{return nil ,ErrStackUnderflow ;};_becb :=(*_ggeb )[len (*_ggeb )-1];*_ggeb =(*_ggeb )[0:len (*_ggeb )-1];return _becb ,nil ;};func (_gd *PSProgram )String ()string {_adg :="\u007b\u0020";for _ ,_aca :=range *_gd {_adg +=_aca .String ();_adg +="\u0020";};_adg +="\u007d";return _adg ;};func (_caa *PSOperand )ge (_fge *PSStack )error {_fdd ,_cab :=_fge .PopNumberAsFloat64 ();if _cab !=nil {return _cab ;};_ddga ,_cab :=_fge .PopNumberAsFloat64 ();if _cab !=nil {return _cab ;};if _eg .Abs (_ddga -_fdd )< _f {_ecdd :=_fge .Push (MakeBool (true ));return _ecdd ;}else if _ddga > _fdd {_egfe :=_fge .Push (MakeBool (true ));return _egfe ;}else {_aecf :=_fge .Push (MakeBool (false ));return _aecf ;};};

// Push pushes an object on top of the stack.
func (_cbfa *PSStack )Push (obj PSObject )error {if len (*_cbfa )> 100{return ErrStackOverflow ;};*_cbfa =append (*_cbfa ,obj );return nil ;};func (_eff *PSOperand )add (_cb *PSStack )error {_dbd ,_fgd :=_cb .Pop ();if _fgd !=nil {return _fgd ;};_acg ,_fgd :=_cb .Pop ();if _fgd !=nil {return _fgd ;};_gc ,_bdfe :=_dbd .(*PSReal );_bgf ,_agc :=_dbd .(*PSInteger );if !_bdfe &&!_agc {return ErrTypeCheck ;};_bec ,_ced :=_acg .(*PSReal );_eb ,_gcd :=_acg .(*PSInteger );if !_ced &&!_gcd {return ErrTypeCheck ;};if _agc &&_gcd {_gca :=_bgf .Val +_eb .Val ;_cbb :=_cb .Push (MakeInteger (_gca ));return _cbb ;};var _cdd float64 ;if _bdfe {_cdd =_gc .Val ;}else {_cdd =float64 (_bgf .Val );};if _ced {_cdd +=_bec .Val ;}else {_cdd +=float64 (_eb .Val );};_fgd =_cb .Push (MakeReal (_cdd ));return _fgd ;};func (_dac *PSOperand )cvi (_ebb *PSStack )error {_ddg ,_cee :=_ebb .Pop ();if _cee !=nil {return _cee ;};if _gef ,_abg :=_ddg .(*PSReal );_abg {_bee :=int (_gef .Val );_cee =_ebb .Push (MakeInteger (_bee ));}else if _geda ,_cgd :=_ddg .(*PSInteger );_cgd {_gedd :=_geda .Val ;_cee =_ebb .Push (MakeInteger (_gedd ));}else {return ErrTypeCheck ;};return _cee ;};func (_dc *PSBoolean )Duplicate ()PSObject {_bdg :=PSBoolean {};_bdg .Val =_dc .Val ;return &_bdg };func (_afd *PSReal )Duplicate ()PSObject {_df :=PSReal {};_df .Val =_afd .Val ;return &_df };func (_bcga *PSOperand )ln (_bfc *PSStack )error {_cfa ,_cec :=_bfc .PopNumberAsFloat64 ();if _cec !=nil {return _cec ;};_dfggb :=_eg .Log (_cfa );_cec =_bfc .Push (MakeReal (_dfggb ));return _cec ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _d []float64 ;for _ ,_c :=range objects {if _aa ,_af :=_c .(*PSInteger );_af {_d =append (_d ,float64 (_aa .Val ));}else if _ab ,_bgb :=_c .(*PSReal );_bgb {_d =append (_d ,_ab .Val );}else {return nil ,ErrTypeCheck ;};};return _d ,nil ;};const _f =0.000001;func (_ged *PSOperand )abs (_bfg *PSStack )error {_gea ,_dg :=_bfg .Pop ();if _dg !=nil {return _dg ;};if _bdf ,_fd :=_gea .(*PSReal );_fd {_cdf :=_bdf .Val ;if _cdf < 0{_dg =_bfg .Push (MakeReal (-_cdf ));}else {_dg =_bfg .Push (MakeReal (_cdf ));};}else if _dbb ,_bdga :=_gea .(*PSInteger );_bdga {_ce :=_dbb .Val ;if _ce < 0{_dg =_bfg .Push (MakeInteger (-_ce ));}else {_dg =_bfg .Push (MakeInteger (_ce ));};}else {return ErrTypeCheck ;};return _dg ;};func (_cfd *PSOperand )exch (_facg *PSStack )error {_dfg ,_eac :=_facg .Pop ();if _eac !=nil {return _eac ;};_ddge ,_eac :=_facg .Pop ();if _eac !=nil {return _eac ;};_eac =_facg .Push (_dfg );if _eac !=nil {return _eac ;};_eac =_facg .Push (_ddge );return _eac ;};func (_agg *PSOperand )cos (_gcc *PSStack )error {_eda ,_ccf :=_gcc .PopNumberAsFloat64 ();if _ccf !=nil {return _ccf ;};_gcf :=_eg .Cos (_eda *_eg .Pi /180.0);_ccf =_gcc .Push (MakeReal (_gcf ));return _ccf ;};func (_fbfa *PSOperand )or (_adaa *PSStack )error {_dgfd ,_aagg :=_adaa .Pop ();if _aagg !=nil {return _aagg ;};_dace ,_aagg :=_adaa .Pop ();if _aagg !=nil {return _aagg ;};if _ffa ,_fbg :=_dgfd .(*PSBoolean );_fbg {_cgcc ,_aage :=_dace .(*PSBoolean );if !_aage {return ErrTypeCheck ;};_aagg =_adaa .Push (MakeBool (_ffa .Val ||_cgcc .Val ));return _aagg ;};if _fdb ,_bge :=_dgfd .(*PSInteger );_bge {_bcf ,_ebdb :=_dace .(*PSInteger );if !_ebdb {return ErrTypeCheck ;};_aagg =_adaa .Push (MakeInteger (_fdb .Val |_bcf .Val ));return _aagg ;};return ErrTypeCheck ;};func (_bf *PSOperand )String ()string {return string (*_bf )};var ErrStackUnderflow =_be .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");var ErrTypeCheck =_be .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_ebcf *PSOperand )le (_efbg *PSStack )error {_ddgaa ,_bef :=_efbg .PopNumberAsFloat64 ();if _bef !=nil {return _bef ;};_ceda ,_bef :=_efbg .PopNumberAsFloat64 ();if _bef !=nil {return _bef ;};if _eg .Abs (_ceda -_ddgaa )< _f {_fdeb :=_efbg .Push (MakeBool (true ));return _fdeb ;}else if _ceda < _ddgaa {_dacb :=_efbg .Push (MakeBool (true ));return _dacb ;}else {_eed :=_efbg .Push (MakeBool (false ));return _eed ;};};func (_cff *PSOperand )sub (_fdcc *PSStack )error {_dgfc ,_eae :=_fdcc .Pop ();if _eae !=nil {return _eae ;};_dcee ,_eae :=_fdcc .Pop ();if _eae !=nil {return _eae ;};_cabgc ,_acdb :=_dgfc .(*PSReal );_add ,_fgfd :=_dgfc .(*PSInteger );if !_acdb &&!_fgfd {return ErrTypeCheck ;};_edaf ,_gbf :=_dcee .(*PSReal );_cceb ,_cbae :=_dcee .(*PSInteger );if !_gbf &&!_cbae {return ErrTypeCheck ;};if _fgfd &&_cbae {_dbbd :=_cceb .Val -_add .Val ;_efga :=_fdcc .Push (MakeInteger (_dbbd ));return _efga ;};var _gfg float64 =0;if _gbf {_gfg =_edaf .Val ;}else {_gfg =float64 (_cceb .Val );};if _acdb {_gfg -=_cabgc .Val ;}else {_gfg -=float64 (_add .Val );};_eae =_fdcc .Push (MakeReal (_gfg ));return _eae ;};func (_fda *PSOperand )div (_gge *PSStack )error {_cde ,_acb :=_gge .Pop ();if _acb !=nil {return _acb ;};_egg ,_acb :=_gge .Pop ();if _acb !=nil {return _acb ;};_gaa ,_deg :=_cde .(*PSReal );_fbb ,_ee :=_cde .(*PSInteger );if !_deg &&!_ee {return ErrTypeCheck ;};if _deg &&_gaa .Val ==0{return ErrUndefinedResult ;};if _ee &&_fbb .Val ==0{return ErrUndefinedResult ;};_edb ,_bfd :=_egg .(*PSReal );_egf ,_cgb :=_egg .(*PSInteger );if !_bfd &&!_cgb {return ErrTypeCheck ;};var _eggf float64 ;if _bfd {_eggf =_edb .Val ;}else {_eggf =float64 (_egf .Val );};if _deg {_eggf /=_gaa .Val ;}else {_eggf /=float64 (_fbb .Val );};_acb =_gge .Push (MakeReal (_eggf ));return _acb ;};func (_dfa *PSOperand )and (_aac *PSStack )error {_aaaf ,_bgc :=_aac .Pop ();if _bgc !=nil {return _bgc ;};_aae ,_bgc :=_aac .Pop ();if _bgc !=nil {return _bgc ;};if _efa ,_dcbc :=_aaaf .(*PSBoolean );_dcbc {_ec ,_beb :=_aae .(*PSBoolean );if !_beb {return ErrTypeCheck ;};_bgc =_aac .Push (MakeBool (_efa .Val &&_ec .Val ));return _bgc ;};if _gag ,_aee :=_aaaf .(*PSInteger );_aee {_dd ,_ecd :=_aae .(*PSInteger );if !_ecd {return ErrTypeCheck ;};_bgc =_aac .Push (MakeInteger (_gag .Val &_dd .Val ));return _bgc ;};return ErrTypeCheck ;};func _dcab (_bdge int )int {if _bdge < 0{return -_bdge ;};return _bdge ;};func (_gbe *PSOperand )ceiling (_ace *PSStack )error {_da ,_gda :=_ace .Pop ();if _gda !=nil {return _gda ;};if _gcag ,_gdaa :=_da .(*PSReal );_gdaa {_gda =_ace .Push (MakeReal (_eg .Ceil (_gcag .Val )));}else if _aff ,_fga :=_da .(*PSInteger );_fga {_gda =_ace .Push (MakeInteger (_aff .Val ));}else {_gda =ErrTypeCheck ;};return _gda ;};func (_bae *PSReal )String ()string {return _g .Sprintf ("\u0025\u002e\u0035\u0066",_bae .Val )};func (_gce *PSOperand )log (_gad *PSStack )error {_efg ,_gae :=_gad .PopNumberAsFloat64 ();if _gae !=nil {return _gae ;};_cbbg :=_eg .Log10 (_efg );_gae =_gad .Push (MakeReal (_cbbg ));return _gae ;};func (_beef *PSOperand )sin (_dgc *PSStack )error {_ggd ,_dadc :=_dgc .PopNumberAsFloat64 ();if _dadc !=nil {return _dadc ;};_gfd :=_eg .Sin (_ggd *_eg .Pi /180.0);_dadc =_dgc .Push (MakeReal (_gfd ));return _dadc ;};func (_ceec *PSOperand )ifelse (_gbb *PSStack )error {_beee ,_eag :=_gbb .Pop ();if _eag !=nil {return _eag ;};_dfag ,_eag :=_gbb .Pop ();if _eag !=nil {return _eag ;};_fad ,_eag :=_gbb .Pop ();if _eag !=nil {return _eag ;};_fdg ,_dfb :=_beee .(*PSProgram );if !_dfb {return ErrTypeCheck ;};_cgc ,_dfb :=_dfag .(*PSProgram );if !_dfb {return ErrTypeCheck ;};_gaac ,_dfb :=_fad .(*PSBoolean );if !_dfb {return ErrTypeCheck ;};if _gaac .Val {_dff :=_cgc .Exec (_gbb );return _dff ;};_eag =_fdg .Exec (_gbb );return _eag ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_bad *PSOperand )sqrt (_edc *PSStack )error {_afbf ,_bbdb :=_edc .PopNumberAsFloat64 ();if _bbdb !=nil {return _bbdb ;};if _afbf < 0{return ErrRangeCheck ;};_cad :=_eg .Sqrt (_afbf );_bbdb =_edc .Push (MakeReal (_cad ));return _bbdb ;};func (_egge *PSOperand )gt (_ded *PSStack )error {_dge ,_acd :=_ded .PopNumberAsFloat64 ();if _acd !=nil {return _acd ;};_bdca ,_acd :=_ded .PopNumberAsFloat64 ();if _acd !=nil {return _acd ;};if _eg .Abs (_bdca -_dge )< _f {_acaa :=_ded .Push (MakeBool (false ));return _acaa ;}else if _bdca > _dge {_aacg :=_ded .Push (MakeBool (true ));return _aacg ;}else {_gde :=_ded .Push (MakeBool (false ));return _gde ;};};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_afa *PSOperand )ne (_fcdc *PSStack )error {_eaf :=_afa .eq (_fcdc );if _eaf !=nil {return _eaf ;};_eaf =_afa .not (_fcdc );return _eaf ;};func (_gdfc *PSOperand )ifCondition (_dbbe *PSStack )error {_eeg ,_agd :=_dbbe .Pop ();if _agd !=nil {return _agd ;};_ede ,_agd :=_dbbe .Pop ();if _agd !=nil {return _agd ;};_dbca ,_aecd :=_eeg .(*PSProgram );if !_aecd {return ErrTypeCheck ;};_ddb ,_aecd :=_ede .(*PSBoolean );if !_aecd {return ErrTypeCheck ;};if _ddb .Val {_ebf :=_dbca .Exec (_dbbe );return _ebf ;};return nil ;};func (_fea *PSOperand )idiv (_ebc *PSStack )error {_afb ,_cca :=_ebc .Pop ();if _cca !=nil {return _cca ;};_cba ,_cca :=_ebc .Pop ();if _cca !=nil {return _cca ;};_efb ,_fgf :=_afb .(*PSInteger );if !_fgf {return ErrTypeCheck ;};if _efb .Val ==0{return ErrUndefinedResult ;};_agf ,_fgf :=_cba .(*PSInteger );if !_fgf {return ErrTypeCheck ;};_fcf :=_agf .Val /_efb .Val ;_cca =_ebc .Push (MakeInteger (_fcf ));return _cca ;};func (_fa *PSInteger )String ()string {return _g .Sprintf ("\u0025\u0064",_fa .Val )};func (_baea *PSOperand )bitshift (_gb *PSStack )error {_ca ,_baa :=_gb .PopInteger ();if _baa !=nil {return _baa ;};_ege ,_baa :=_gb .PopInteger ();if _baa !=nil {return _baa ;};var _ggb int ;if _ca >=0{_ggb =_ege <<uint (_ca );}else {_ggb =_ege >>uint (-_ca );};_baa =_gb .Push (MakeInteger (_ggb ));return _baa ;};func (_caac *PSOperand )not (_aab *PSStack )error {_caf ,_dbdb :=_aab .Pop ();if _dbdb !=nil {return _dbdb ;};if _bba ,_edg :=_caf .(*PSBoolean );_edg {_dbdb =_aab .Push (MakeBool (!_bba .Val ));return _dbdb ;}else if _fgdd ,_dbff :=_caf .(*PSInteger );_dbff {_dbdb =_aab .Push (MakeInteger (^_fgdd .Val ));return _dbdb ;}else {return ErrTypeCheck ;};};func (_gfdc *PSParser )parseOperand ()(*PSOperand ,error ){var _fcc []byte ;for {_bgec ,_dfdb :=_gfdc ._fgaf .Peek (1);if _dfdb !=nil {if _dfdb ==_bg .EOF {break ;};return nil ,_dfdb ;};if _gg .IsDelimiter (_bgec [0]){break ;};if _gg .IsWhiteSpace (_bgec [0]){break ;};_bfbe ,_ :=_gfdc ._fgaf .ReadByte ();_fcc =append (_fcc ,_bfbe );};if len (_fcc )==0{return nil ,_be .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_fcc )),nil ;};func (_bd *PSBoolean )DebugString ()string {return _g .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_bd .Val );};func (_fcag *PSOperand )roll (_acec *PSStack )error {_dad ,_eggd :=_acec .Pop ();if _eggd !=nil {return _eggd ;};_eef ,_eggd :=_acec .Pop ();if _eggd !=nil {return _eggd ;};_gfba ,_eacc :=_dad .(*PSInteger );if !_eacc {return ErrTypeCheck ;};_fgg ,_eacc :=_eef .(*PSInteger );if !_eacc {return ErrTypeCheck ;};if _fgg .Val < 0{return ErrRangeCheck ;};if _fgg .Val ==0||_fgg .Val ==1{return nil ;};if _fgg .Val > len (*_acec ){return ErrStackUnderflow ;};for _gade :=0;_gade < _dcab (_gfba .Val );_gade ++{var _afdf []PSObject ;_afdf =(*_acec )[len (*_acec )-(_fgg .Val ):len (*_acec )];if _gfba .Val > 0{_gcee :=_afdf [len (_afdf )-1];_afdf =append ([]PSObject {_gcee },_afdf [0:len (_afdf )-1]...);}else {_ggg :=_afdf [len (_afdf )-_fgg .Val ];_afdf =append (_afdf [1:],_ggg );};_cfe :=append ((*_acec )[0:len (*_acec )-_fgg .Val ],_afdf ...);_acec =&_cfe ;};return nil ;};func (_gaef *PSOperand )neg (_fdae *PSStack )error {_fgec ,_cabg :=_fdae .Pop ();if _cabg !=nil {return _cabg ;};if _fgb ,_agdd :=_fgec .(*PSReal );_agdd {_cabg =_fdae .Push (MakeReal (-_fgb .Val ));return _cabg ;}else if _efge ,_fgecf :=_fgec .(*PSInteger );_fgecf {_cabg =_fdae .Push (MakeInteger (-_efge .Val ));return _cabg ;}else {return ErrTypeCheck ;};};func (_bgbbc *PSOperand )pop (_faa *PSStack )error {_ ,_dag :=_faa .Pop ();if _dag !=nil {return _dag ;};return nil ;};func (_bbe *PSParser )skipSpaces ()(int ,error ){_deed :=0;for {_ccc ,_dbcac :=_bbe ._fgaf .Peek (1);if _dbcac !=nil {return 0,_dbcac ;};if _gg .IsWhiteSpace (_ccc [0]){_bbe ._fgaf .ReadByte ();_deed ++;}else {break ;};};return _deed ,nil ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_fdef *PSStack )DebugString ()string {_cabd :="\u005b\u0020";for _ ,_bcge :=range *_fdef {_cabd +=_bcge .DebugString ();_cabd +="\u0020";};_cabd +="\u005d";return _cabd ;};

// Append appends an object to the PSProgram.
func (_fg *PSProgram )Append (obj PSObject ){*_fg =append (*_fg ,obj )};func (_cd *PSOperand )DebugString ()string {return _g .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_cd );};func (_gab *PSOperand )dup (_cf *PSStack )error {_fab ,_aag :=_cf .Pop ();if _aag !=nil {return _aag ;};_aag =_cf .Push (_fab );if _aag !=nil {return _aag ;};_aag =_cf .Push (_fab .Duplicate ());return _aag ;};func (_ada *PSProgram )DebugString ()string {_bdc :="\u007b\u0020";for _ ,_bcb :=range *_ada {_bdc +=_bcb .DebugString ();_bdc +="\u0020";};_bdc +="\u007d";return _bdc ;};func (_fbde *PSParser )parseBool ()(*PSBoolean ,error ){_bfac ,_dfde :=_fbde ._fgaf .Peek (4);if _dfde !=nil {return MakeBool (false ),_dfde ;};if (len (_bfac )>=4)&&(string (_bfac [:4])=="\u0074\u0072\u0075\u0065"){_fbde ._fgaf .Discard (4);return MakeBool (true ),nil ;};_bfac ,_dfde =_fbde ._fgaf .Peek (5);if _dfde !=nil {return MakeBool (false ),_dfde ;};if (len (_bfac )>=5)&&(string (_bfac [:5])=="\u0066\u0061\u006cs\u0065"){_fbde ._fgaf .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_be .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_dca *PSProgram )Duplicate ()PSObject {_fef :=&PSProgram {};for _ ,_dcg :=range *_dca {_fef .Append (_dcg .Duplicate ());};return _fef ;};

// Empty empties the stack.
func (_fgc *PSStack )Empty (){*_fgc =[]PSObject {}};func (_ebg *PSOperand )floor (_egfb *PSStack )error {_gbd ,_dcc :=_egfb .Pop ();if _dcc !=nil {return _dcc ;};if _eeb ,_cgf :=_gbd .(*PSReal );_cgf {_dcc =_egfb .Push (MakeReal (_eg .Floor (_eeb .Val )));}else if _cdfb ,_fcd :=_gbd .(*PSInteger );_fcd {_dcc =_egfb .Push (MakeInteger (_cdfb .Val ));}else {return ErrTypeCheck ;};return _dcc ;};var ErrStackOverflow =_be .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// Exec executes the program, typically leaving output values on the stack.
func (_ef *PSProgram )Exec (stack *PSStack )error {for _ ,_fb :=range *_ef {var _adf error ;switch _aef :=_fb .(type ){case *PSInteger :_egc :=_aef ;_adf =stack .Push (_egc );case *PSReal :_ag :=_aef ;_adf =stack .Push (_ag );case *PSBoolean :_bcg :=_aef ;_adf =stack .Push (_bcg );case *PSProgram :_bb :=_aef ;_adf =stack .Push (_bb );case *PSOperand :_dcb :=_aef ;_adf =_dcb .Exec (stack );default:return ErrTypeCheck ;};if _adf !=nil {return _adf ;};};return nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_fabg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_aacd ,_gcff :=_fabg .Pop ();if _gcff !=nil {return 0,_gcff ;};if _fadc ,_eba :=_aacd .(*PSReal );_eba {return _fadc .Val ,nil ;}else if _ebda ,_aaec :=_aacd .(*PSInteger );_aaec {return float64 (_ebda .Val ),nil ;}else {return 0,ErrTypeCheck ;};};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_ecb *PSOperand )exp (_bbd *PSStack )error {_ade ,_gdab :=_bbd .PopNumberAsFloat64 ();if _gdab !=nil {return _gdab ;};_dbf ,_gdab :=_bbd .PopNumberAsFloat64 ();if _gdab !=nil {return _gdab ;};if _eg .Abs (_ade )< 1&&_dbf < 0{return ErrUndefinedResult ;};_bgd :=_eg .Pow (_dbf ,_ade );_gdab =_bbd .Push (MakeReal (_bgd ));return _gdab ;};func (_aec *PSOperand )cvr (_fac *PSStack )error {_bce ,_ead :=_fac .Pop ();if _ead !=nil {return _ead ;};if _ggf ,_fc :=_bce .(*PSReal );_fc {_ead =_fac .Push (MakeReal (_ggf .Val ));}else if _cbf ,_baf :=_bce .(*PSInteger );_baf {_ead =_fac .Push (MakeReal (float64 (_cbf .Val )));}else {return ErrTypeCheck ;};return _ead ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_fgaf *_e .Reader };

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};var ErrUndefinedResult =_be .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_aad *PSOperand )index (_ccd *PSStack )error {_dfgg ,_dgd :=_ccd .Pop ();if _dgd !=nil {return _dgd ;};_gdb ,_ggad :=_dfgg .(*PSInteger );if !_ggad {return ErrTypeCheck ;};if _gdb .Val < 0{return ErrRangeCheck ;};if _gdb .Val > len (*_ccd )-1{return ErrStackUnderflow ;};_bcbb :=(*_ccd )[len (*_ccd )-1-_gdb .Val ];_dgd =_ccd .Push (_bcbb .Duplicate ());return _dgd ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_bc :=&PSExecutor {};_bc .Stack =NewPSStack ();_bc ._ad =program ;return _bc ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_ad *PSProgram ;};func (_gbae *PSParser )parseFunction ()(*PSProgram ,error ){_ebbf ,_ :=_gbae ._fgaf .ReadByte ();if _ebbf !='{'{return nil ,_be .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_cece :=NewPSProgram ();for {_gbae .skipSpaces ();_dae ,_fbfd :=_gbae ._fgaf .Peek (2);if _fbfd !=nil {if _fbfd ==_bg .EOF {break ;};return nil ,_fbfd ;};_ac .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dae ));if _dae [0]=='}'{_ac .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_gbae ._fgaf .ReadByte ();break ;}else if _dae [0]=='{'{_ac .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_acag ,_cecec :=_gbae .parseFunction ();if _cecec !=nil {return nil ,_cecec ;};_cece .Append (_acag );}else if _gg .IsDecimalDigit (_dae [0])||(_dae [0]=='-'&&_gg .IsDecimalDigit (_dae [1])){_ac .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_cebd ,_egcg :=_gbae .parseNumber ();if _egcg !=nil {return nil ,_egcg ;};_cece .Append (_cebd );}else {_ac .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dae ,_ =_gbae ._fgaf .Peek (5);_cgeb :=string (_dae );_ac .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_cgeb );if (len (_cgeb )> 4)&&(_cgeb [:5]=="\u0066\u0061\u006cs\u0065"){_gedc ,_bcdf :=_gbae .parseBool ();if _bcdf !=nil {return nil ,_bcdf ;};_cece .Append (_gedc );}else if (len (_cgeb )> 3)&&(_cgeb [:4]=="\u0074\u0072\u0075\u0065"){_efba ,_dcca :=_gbae .parseBool ();if _dcca !=nil {return nil ,_dcca ;};_cece .Append (_efba );}else {_ceba ,_gfda :=_gbae .parseOperand ();if _gfda !=nil {return nil ,_gfda ;};_cece .Append (_ceba );};};};return _cece ,nil ;};func (_feac *PSOperand )xor (_feb *PSStack )error {_fddg ,_dagg :=_feb .Pop ();if _dagg !=nil {return _dagg ;};_fdac ,_dagg :=_feb .Pop ();if _dagg !=nil {return _dagg ;};if _geb ,_gdg :=_fddg .(*PSBoolean );_gdg {_acf ,_gdgd :=_fdac .(*PSBoolean );if !_gdgd {return ErrTypeCheck ;};_dagg =_feb .Push (MakeBool (_geb .Val !=_acf .Val ));return _dagg ;};if _fdccg ,_bca :=_fddg .(*PSInteger );_bca {_cega ,_bgff :=_fdac .(*PSInteger );if !_bgff {return ErrTypeCheck ;};_dagg =_feb .Push (MakeInteger (_fdccg .Val ^_cega .Val ));return _dagg ;};return ErrTypeCheck ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_afff *PSStack )PopInteger ()(int ,error ){_fgbb ,_fbdg :=_afff .Pop ();if _fbdg !=nil {return 0,_fbdg ;};if _eagf ,_cfb :=_fgbb .(*PSInteger );_cfb {return _eagf .Val ,nil ;};return 0,ErrTypeCheck ;};func (_acaaa *PSOperand )mod (_beab *PSStack )error {_fdda ,_abf :=_beab .Pop ();if _abf !=nil {return _abf ;};_dab ,_abf :=_beab .Pop ();if _abf !=nil {return _abf ;};_afc ,_dee :=_fdda .(*PSInteger );if !_dee {return ErrTypeCheck ;};if _afc .Val ==0{return ErrUndefinedResult ;};_cbc ,_dee :=_dab .(*PSInteger );if !_dee {return ErrTypeCheck ;};_cgac :=_cbc .Val %_afc .Val ;_abf =_beab .Push (MakeInteger (_cgac ));return _abf ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bbda :=PSBoolean {};_bbda .Val =val ;return &_bbda };func (_acgf *PSOperand )atan (_bdcf *PSStack )error {_ea ,_abb :=_bdcf .PopNumberAsFloat64 ();if _abb !=nil {return _abb ;};_cg ,_abb :=_bdcf .PopNumberAsFloat64 ();if _abb !=nil {return _abb ;};if _ea ==0{var _dfe error ;if _cg < 0{_dfe =_bdcf .Push (MakeReal (270));}else {_dfe =_bdcf .Push (MakeReal (90));};return _dfe ;};_de :=_cg /_ea ;_fde :=_eg .Atan (_de )*180/_eg .Pi ;_abb =_bdcf .Push (MakeReal (_fde ));return _abb ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_aaf :=PSParser {};_afcc :=_a .NewBuffer (content );_aaf ._fgaf =_e .NewReader (_afcc );return &_aaf ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_efag :=PSInteger {};_efag .Val =val ;return &_efag };

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_feab :=PSReal {};_feab .Val =val ;return &_feab };func (_bea *PSOperand )copy (_cge *PSStack )error {_dfd ,_fbc :=_cge .PopInteger ();if _fbc !=nil {return _fbc ;};if _dfd < 0{return ErrRangeCheck ;};if _dfd > len (*_cge ){return ErrRangeCheck ;};*_cge =append (*_cge ,(*_cge )[len (*_cge )-_dfd :]...);return nil ;};func (_fe *PSInteger )Duplicate ()PSObject {_ga :=PSInteger {};_ga .Val =_fe .Val ;return &_ga };

// Exec executes the operand `op` in the state specified by `stack`.
func (_gf *PSOperand )Exec (stack *PSStack )error {_dbg :=ErrUnsupportedOperand ;switch *_gf {case "\u0061\u0062\u0073":_dbg =_gf .abs (stack );case "\u0061\u0064\u0064":_dbg =_gf .add (stack );case "\u0061\u006e\u0064":_dbg =_gf .and (stack );case "\u0061\u0074\u0061\u006e":_dbg =_gf .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_dbg =_gf .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_dbg =_gf .ceiling (stack );case "\u0063\u006f\u0070\u0079":_dbg =_gf .copy (stack );case "\u0063\u006f\u0073":_dbg =_gf .cos (stack );case "\u0063\u0076\u0069":_dbg =_gf .cvi (stack );case "\u0063\u0076\u0072":_dbg =_gf .cvr (stack );case "\u0064\u0069\u0076":_dbg =_gf .div (stack );case "\u0064\u0075\u0070":_dbg =_gf .dup (stack );case "\u0065\u0071":_dbg =_gf .eq (stack );case "\u0065\u0078\u0063\u0068":_dbg =_gf .exch (stack );case "\u0065\u0078\u0070":_dbg =_gf .exp (stack );case "\u0066\u006c\u006fo\u0072":_dbg =_gf .floor (stack );case "\u0067\u0065":_dbg =_gf .ge (stack );case "\u0067\u0074":_dbg =_gf .gt (stack );case "\u0069\u0064\u0069\u0076":_dbg =_gf .idiv (stack );case "\u0069\u0066":_dbg =_gf .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_dbg =_gf .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_dbg =_gf .index (stack );case "\u006c\u0065":_dbg =_gf .le (stack );case "\u006c\u006f\u0067":_dbg =_gf .log (stack );case "\u006c\u006e":_dbg =_gf .ln (stack );case "\u006c\u0074":_dbg =_gf .lt (stack );case "\u006d\u006f\u0064":_dbg =_gf .mod (stack );case "\u006d\u0075\u006c":_dbg =_gf .mul (stack );case "\u006e\u0065":_dbg =_gf .ne (stack );case "\u006e\u0065\u0067":_dbg =_gf .neg (stack );case "\u006e\u006f\u0074":_dbg =_gf .not (stack );case "\u006f\u0072":_dbg =_gf .or (stack );case "\u0070\u006f\u0070":_dbg =_gf .pop (stack );case "\u0072\u006f\u0075n\u0064":_dbg =_gf .round (stack );case "\u0072\u006f\u006c\u006c":_dbg =_gf .roll (stack );case "\u0073\u0069\u006e":_dbg =_gf .sin (stack );case "\u0073\u0071\u0072\u0074":_dbg =_gf .sqrt (stack );case "\u0073\u0075\u0062":_dbg =_gf .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_dbg =_gf .truncate (stack );case "\u0078\u006f\u0072":_dbg =_gf .xor (stack );};return _dbg ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_bde :=PSOperand (val );return &_bde };func (_aeb *PSParser )parseNumber ()(PSObject ,error ){_bade ,_dgg :=_gg .ParseNumber (_aeb ._fgaf );if _dgg !=nil {return nil ,_dgg ;};switch _ddd :=_bade .(type ){case *_gg .PdfObjectFloat :return MakeReal (float64 (*_ddd )),nil ;case *_gg .PdfObjectInteger :return MakeInteger (int (*_ddd )),nil ;};return nil ,_g .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bade );};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};