//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_g "bufio";_ad "bytes";_b "errors";_gf "fmt";_cg "github.com/unidoc/unipdf/v3/common";_bf "github.com/unidoc/unipdf/v3/core";_a "io";_c "math";);var ErrUnsupportedOperand =_b .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_bdc *PSOperand )add (_eeaf *PSStack )error {_afb ,_adgf :=_eeaf .Pop ();if _adgf !=nil {return _adgf ;};_efa ,_adgf :=_eeaf .Pop ();if _adgf !=nil {return _adgf ;};_efg ,_eb :=_afb .(*PSReal );_afg ,_aee :=_afb .(*PSInteger );if !_eb &&!_aee {return ErrTypeCheck ;};_bee ,_ga :=_efa .(*PSReal );_abc ,_fff :=_efa .(*PSInteger );if !_ga &&!_fff {return ErrTypeCheck ;};if _aee &&_fff {_bcd :=_afg .Val +_abc .Val ;_bca :=_eeaf .Push (MakeInteger (_bcd ));return _bca ;};var _eff float64 ;if _eb {_eff =_efg .Val ;}else {_eff =float64 (_afg .Val );};if _ga {_eff +=_bee .Val ;}else {_eff +=float64 (_abc .Val );};_adgf =_eeaf .Push (MakeReal (_eff ));return _adgf ;};var ErrRangeCheck =_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");func (_agg *PSOperand )String ()string {return string (*_agg )};

// PSParser is a basic Postscript parser.
type PSParser struct{_dea *_g .Reader };func (_bgac *PSParser )parseOperand ()(*PSOperand ,error ){var _gfgg []byte ;for {_beff ,_ege :=_bgac ._dea .Peek (1);if _ege !=nil {if _ege ==_a .EOF {break ;};return nil ,_ege ;};if _bf .IsDelimiter (_beff [0]){break ;};if _bf .IsWhiteSpace (_beff [0]){break ;};_gagc ,_ :=_bgac ._dea .ReadByte ();_gfgg =append (_gfgg ,_gagc );};if len (_gfgg )==0{return nil ,_b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_gfgg )),nil ;};func (_gdab *PSOperand )ln (_ded *PSStack )error {_ccab ,_cebc :=_ded .PopNumberAsFloat64 ();if _cebc !=nil {return _cebc ;};_bde :=_c .Log (_ccab );_cebc =_ded .Push (MakeReal (_bde ));return _cebc ;};func (_gbc *PSInteger )Duplicate ()PSObject {_f :=PSInteger {};_f .Val =_gbc .Val ;return &_f };func (_eea *PSOperand )abs (_gbd *PSStack )error {_fgg ,_eg :=_gbd .Pop ();if _eg !=nil {return _eg ;};if _ge ,_bga :=_fgg .(*PSReal );_bga {_ceb :=_ge .Val ;if _ceb < 0{_eg =_gbd .Push (MakeReal (-_ceb ));}else {_eg =_gbd .Push (MakeReal (_ceb ));};}else if _efc ,_efe :=_fgg .(*PSInteger );_efe {_ed :=_efc .Val ;if _ed < 0{_eg =_gbd .Push (MakeInteger (-_ed ));}else {_eg =_gbd .Push (MakeInteger (_ed ));};}else {return ErrTypeCheck ;};return _eg ;};func (_bdd *PSOperand )atan (_de *PSStack )error {_bbdd ,_aac :=_de .PopNumberAsFloat64 ();if _aac !=nil {return _aac ;};_bbddf ,_aac :=_de .PopNumberAsFloat64 ();if _aac !=nil {return _aac ;};if _bbdd ==0{var _ec error ;if _bbddf < 0{_ec =_de .Push (MakeReal (270));}else {_ec =_de .Push (MakeReal (90));};return _ec ;};_abb :=_bbddf /_bbdd ;_bgg :=_c .Atan (_abb )*180/_c .Pi ;_aac =_de .Push (MakeReal (_bgg ));return _aac ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_edfg :=PSReal {};_edfg .Val =val ;return &_edfg };func (_ced *PSParser )parseNumber ()(PSObject ,error ){_acbc ,_eafg :=_bf .ParseNumber (_ced ._dea );if _eafg !=nil {return nil ,_eafg ;};switch _fdg :=_acbc .(type ){case *_bf .PdfObjectFloat :return MakeReal (float64 (*_fdg )),nil ;case *_bf .PdfObjectInteger :return MakeInteger (int (*_fdg )),nil ;};return nil ,_gf .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_acbc );};

// Pop pops an object from the top of the stack.
func (_ecbb *PSStack )Pop ()(PSObject ,error ){if len (*_ecbb )< 1{return nil ,ErrStackUnderflow ;};_gdaa :=(*_ecbb )[len (*_ecbb )-1];*_ecbb =(*_ecbb )[0:len (*_ecbb )-1];return _gdaa ,nil ;};func (_ab *PSReal )String ()string {return _gf .Sprintf ("\u0025\u002e\u0035\u0066",_ab .Val )};func (_bbd *PSOperand )Duplicate ()PSObject {_bfb :=*_bbd ;return &_bfb };func (_ea *PSOperand )cvr (_aed *PSStack )error {_bcf ,_adf :=_aed .Pop ();if _adf !=nil {return _adf ;};if _cac ,_acc :=_bcf .(*PSReal );_acc {_adf =_aed .Push (MakeReal (_cac .Val ));}else if _adbg ,_ccc :=_bcf .(*PSInteger );_ccc {_adf =_aed .Push (MakeReal (float64 (_adbg .Val )));}else {return ErrTypeCheck ;};return _adf ;};func (_fb *PSOperand )and (_dgc *PSStack )error {_edc ,_cfd :=_dgc .Pop ();if _cfd !=nil {return _cfd ;};_ccg ,_cfd :=_dgc .Pop ();if _cfd !=nil {return _cfd ;};if _bgc ,_ddd :=_edc .(*PSBoolean );_ddd {_ac ,_fed :=_ccg .(*PSBoolean );if !_fed {return ErrTypeCheck ;};_cfd =_dgc .Push (MakeBool (_bgc .Val &&_ac .Val ));return _cfd ;};if _df ,_eef :=_edc .(*PSInteger );_eef {_fcb ,_geg :=_ccg .(*PSInteger );if !_geg {return ErrTypeCheck ;};_cfd =_dgc .Push (MakeInteger (_df .Val &_fcb .Val ));return _cfd ;};return ErrTypeCheck ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_cag *PSStack )DebugString ()string {_dcfd :="\u005b\u0020";for _ ,_cbcf :=range *_cag {_dcfd +=_cbcf .DebugString ();_dcfd +="\u0020";};_dcfd +="\u005d";return _dcfd ;};

// String returns a string representation of the stack.
func (_acda *PSStack )String ()string {_egfb :="\u005b\u0020";for _ ,_cdbg :=range *_acda {_egfb +=_cdbg .String ();_egfb +="\u0020";};_egfb +="\u005d";return _egfb ;};func (_bge *PSOperand )exp (_efcf *PSStack )error {_agea ,_dbc :=_efcf .PopNumberAsFloat64 ();if _dbc !=nil {return _dbc ;};_aec ,_dbc :=_efcf .PopNumberAsFloat64 ();if _dbc !=nil {return _dbc ;};if _c .Abs (_agea )< 1&&_aec < 0{return ErrUndefinedResult ;};_aab :=_c .Pow (_aec ,_agea );_dbc =_efcf .Push (MakeReal (_aab ));return _dbc ;};func (_baeb *PSOperand )sqrt (_ecf *PSStack )error {_gfeg ,_gbdca :=_ecf .PopNumberAsFloat64 ();if _gbdca !=nil {return _gbdca ;};if _gfeg < 0{return ErrRangeCheck ;};_edge :=_c .Sqrt (_gfeg );_gbdca =_ecf .Push (MakeReal (_edge ));return _gbdca ;};var ErrStackOverflow =_b .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_dbd *PSStack )PopInteger ()(int ,error ){_bgcg ,_bafc :=_dbd .Pop ();if _bafc !=nil {return 0,_bafc ;};if _cdcd ,_afef :=_bgcg .(*PSInteger );_afef {return _cdcd .Val ,nil ;};return 0,ErrTypeCheck ;};

// Exec executes the program, typically leaving output values on the stack.
func (_cca *PSProgram )Exec (stack *PSStack )error {for _ ,_adcg :=range *_cca {var _dc error ;switch _abe :=_adcg .(type ){case *PSInteger :_be :=_abe ;_dc =stack .Push (_be );case *PSReal :_eee :=_abe ;_dc =stack .Push (_eee );case *PSBoolean :_bd :=_abe ;_dc =stack .Push (_bd );case *PSProgram :_cgb :=_abe ;_dc =stack .Push (_cgb );case *PSOperand :_ag :=_abe ;_dc =_ag .Exec (stack );default:return ErrTypeCheck ;};if _dc !=nil {return _dc ;};};return nil ;};func (_baf *PSBoolean )String ()string {return _gf .Sprintf ("\u0025\u0076",_baf .Val )};

// Empty empties the stack.
func (_eeaa *PSStack )Empty (){*_eeaa =[]PSObject {}};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_bba *PSOperand )bitshift (_db *PSStack )error {_gfg ,_eba :=_db .PopInteger ();if _eba !=nil {return _eba ;};_gbg ,_eba :=_db .PopInteger ();if _eba !=nil {return _eba ;};var _aag int ;if _gfg >=0{_aag =_gbg <<uint (_gfg );}else {_aag =_gbg >>uint (-_gfg );};_eba =_db .Push (MakeInteger (_aag ));return _eba ;};func (_acdg *PSOperand )ne (_dgee *PSStack )error {_cfcb :=_acdg .eq (_dgee );if _cfcb !=nil {return _cfcb ;};_cfcb =_acdg .not (_dgee );return _cfcb ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_adc *PSInteger )String ()string {return _gf .Sprintf ("\u0025\u0064",_adc .Val )};func (_dbbe *PSParser )parseFunction ()(*PSProgram ,error ){_fced ,_ :=_dbbe ._dea .ReadByte ();if _fced !='{'{return nil ,_b .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_bbde :=NewPSProgram ();for {_dbbe .skipSpaces ();_cgbg ,_gbb :=_dbbe ._dea .Peek (2);if _gbb !=nil {if _gbb ==_a .EOF {break ;};return nil ,_gbb ;};_cg .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cgbg ));if _cgbg [0]=='}'{_cg .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_dbbe ._dea .ReadByte ();break ;}else if _cgbg [0]=='{'{_cg .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_bef ,_dba :=_dbbe .parseFunction ();if _dba !=nil {return nil ,_dba ;};_bbde .Append (_bef );}else if _bf .IsDecimalDigit (_cgbg [0])||(_cgbg [0]=='-'&&_bf .IsDecimalDigit (_cgbg [1])){_cg .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_gfga ,_gffb :=_dbbe .parseNumber ();if _gffb !=nil {return nil ,_gffb ;};_bbde .Append (_gfga );}else {_cg .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_cgbg ,_ =_dbbe ._dea .Peek (5);_ccgf :=string (_cgbg );_cg .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_ccgf );if (len (_ccgf )> 4)&&(_ccgf [:5]=="\u0066\u0061\u006cs\u0065"){_eeeed ,_edfe :=_dbbe .parseBool ();if _edfe !=nil {return nil ,_edfe ;};_bbde .Append (_eeeed );}else if (len (_ccgf )> 3)&&(_ccgf [:4]=="\u0074\u0072\u0075\u0065"){_cabd ,_ffe :=_dbbe .parseBool ();if _ffe !=nil {return nil ,_ffe ;};_bbde .Append (_cabd );}else {_fgf ,_agbad :=_dbbe .parseOperand ();if _agbad !=nil {return nil ,_agbad ;};_bbde .Append (_fgf );};};};return _bbde ,nil ;};func (_fbfc *PSOperand )sub (_cggg *PSStack )error {_abf ,_bcfa :=_cggg .Pop ();if _bcfa !=nil {return _bcfa ;};_eeee ,_bcfa :=_cggg .Pop ();if _bcfa !=nil {return _bcfa ;};_cabf ,_bacc :=_abf .(*PSReal );_cbgf ,_cgc :=_abf .(*PSInteger );if !_bacc &&!_cgc {return ErrTypeCheck ;};_abgb ,_gcf :=_eeee .(*PSReal );_afd ,_cde :=_eeee .(*PSInteger );if !_gcf &&!_cde {return ErrTypeCheck ;};if _cgc &&_cde {_abbad :=_afd .Val -_cbgf .Val ;_gbgf :=_cggg .Push (MakeInteger (_abbad ));return _gbgf ;};var _gdf float64 =0;if _gcf {_gdf =_abgb .Val ;}else {_gdf =float64 (_afd .Val );};if _bacc {_gdf -=_cabf .Val ;}else {_gdf -=float64 (_cbgf .Val );};_bcfa =_cggg .Push (MakeReal (_gdf ));return _bcfa ;};func (_fcfa *PSOperand )le (_bdg *PSStack )error {_ggg ,_fcc :=_bdg .PopNumberAsFloat64 ();if _fcc !=nil {return _fcc ;};_ccag ,_fcc :=_bdg .PopNumberAsFloat64 ();if _fcc !=nil {return _fcc ;};if _c .Abs (_ccag -_ggg )< _ca {_gede :=_bdg .Push (MakeBool (true ));return _gede ;}else if _ccag < _ggg {_bcfg :=_bdg .Push (MakeBool (true ));return _bcfg ;}else {_dgdab :=_bdg .Push (MakeBool (false ));return _dgdab ;};};

// Parse parses the postscript and store as a program that can be executed.
func (_adbc *PSParser )Parse ()(*PSProgram ,error ){_adbc .skipSpaces ();_gbcf ,_aff :=_adbc ._dea .Peek (2);if _aff !=nil {return nil ,_aff ;};if _gbcf [0]!='{'{return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_fcdd ,_aff :=_adbc .parseFunction ();if _aff !=nil &&_aff !=_a .EOF {return nil ,_aff ;};return _fcdd ,_aff ;};var ErrUndefinedResult =_b .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_bfe *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_gb :=range objects {_cdg :=_bfe .Stack .Push (_gb );if _cdg !=nil {return nil ,_cdg ;};};_cf :=_bfe ._gc .Exec (_bfe .Stack );if _cf !=nil {_cg .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cf );return nil ,_cf ;};_ba :=[]PSObject (*_bfe .Stack );_bfe .Stack .Empty ();return _ba ,nil ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_agcc :=PSOperand (val );return &_agcc };func (_gef *PSOperand )not (_begb *PSStack )error {_adaa ,_fbfe :=_begb .Pop ();if _fbfe !=nil {return _fbfe ;};if _bbab ,_aeab :=_adaa .(*PSBoolean );_aeab {_fbfe =_begb .Push (MakeBool (!_bbab .Val ));return _fbfe ;}else if _beb ,_fgba :=_adaa .(*PSInteger );_fgba {_fbfe =_begb .Push (MakeInteger (^_beb .Val ));return _fbfe ;}else {return ErrTypeCheck ;};};func (_cdf *PSOperand )ceiling (_cdfb *PSStack )error {_abba ,_agc :=_cdfb .Pop ();if _agc !=nil {return _agc ;};if _ebf ,_abcd :=_abba .(*PSReal );_abcd {_agc =_cdfb .Push (MakeReal (_c .Ceil (_ebf .Val )));}else if _aea ,_ceg :=_abba .(*PSInteger );_ceg {_agc =_cdfb .Push (MakeInteger (_aea .Val ));}else {_agc =ErrTypeCheck ;};return _agc ;};func (_cda *PSOperand )exch (_da *PSStack )error {_ffc ,_dag :=_da .Pop ();if _dag !=nil {return _dag ;};_aba ,_dag :=_da .Pop ();if _dag !=nil {return _dag ;};_dag =_da .Push (_ffc );if _dag !=nil {return _dag ;};_dag =_da .Push (_aba );return _dag ;};func (_gca *PSOperand )round (_afe *PSStack )error {_ebfb ,_feab :=_afe .Pop ();if _feab !=nil {return _feab ;};if _egb ,_acca :=_ebfb .(*PSReal );_acca {_feab =_afe .Push (MakeReal (_c .Floor (_egb .Val +0.5)));}else if _dga ,_aggf :=_ebfb .(*PSInteger );_aggf {_feab =_afe .Push (MakeInteger (_dga .Val ));}else {return ErrTypeCheck ;};return _feab ;};func (_abge *PSOperand )gt (_ccb *PSStack )error {_gcd ,_fbf :=_ccb .PopNumberAsFloat64 ();if _fbf !=nil {return _fbf ;};_fae ,_fbf :=_ccb .PopNumberAsFloat64 ();if _fbf !=nil {return _fbf ;};if _c .Abs (_fae -_gcd )< _ca {_fge :=_ccb .Push (MakeBool (false ));return _fge ;}else if _fae > _gcd {_gaa :=_ccb .Push (MakeBool (true ));return _gaa ;}else {_ebab :=_ccb .Push (MakeBool (false ));return _ebab ;};};func (_ede *PSOperand )ge (_gbdc *PSStack )error {_dcc ,_gfad :=_gbdc .PopNumberAsFloat64 ();if _gfad !=nil {return _gfad ;};_dccg ,_gfad :=_gbdc .PopNumberAsFloat64 ();if _gfad !=nil {return _gfad ;};if _c .Abs (_dccg -_dcc )< _ca {_dcg :=_gbdc .Push (MakeBool (true ));return _dcg ;}else if _dccg > _dcc {_acb :=_gbdc .Push (MakeBool (true ));return _acb ;}else {_bac :=_gbdc .Push (MakeBool (false ));return _bac ;};};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_abd :=PSInteger {};_abd .Val =val ;return &_abd };func (_cbee *PSOperand )mul (_afaf *PSStack )error {_gdag ,_dbb :=_afaf .Pop ();if _dbb !=nil {return _dbb ;};_gaf ,_dbb :=_afaf .Pop ();if _dbb !=nil {return _dbb ;};_bbaa ,_cad :=_gdag .(*PSReal );_adeg ,_efd :=_gdag .(*PSInteger );if !_cad &&!_efd {return ErrTypeCheck ;};_dge ,_fbca :=_gaf .(*PSReal );_agec ,_bgb :=_gaf .(*PSInteger );if !_fbca &&!_bgb {return ErrTypeCheck ;};if _efd &&_bgb {_aeg :=_adeg .Val *_agec .Val ;_ddcg :=_afaf .Push (MakeInteger (_aeg ));return _ddcg ;};var _fgb float64 ;if _cad {_fgb =_bbaa .Val ;}else {_fgb =float64 (_adeg .Val );};if _fbca {_fgb *=_dge .Val ;}else {_fgb *=float64 (_agec .Val );};_dbb =_afaf .Push (MakeReal (_fgb ));return _dbb ;};func (_adbd *PSOperand )dup (_fec *PSStack )error {_fbd ,_dgb :=_fec .Pop ();if _dgb !=nil {return _dgb ;};_dgb =_fec .Push (_fbd );if _dgb !=nil {return _dgb ;};_dgb =_fec .Push (_fbd .Duplicate ());return _dgb ;};func (_daa *PSOperand )lt (_ddfc *PSStack )error {_ega ,_cbe :=_ddfc .PopNumberAsFloat64 ();if _cbe !=nil {return _cbe ;};_bfdfd ,_cbe :=_ddfc .PopNumberAsFloat64 ();if _cbe !=nil {return _cbe ;};if _c .Abs (_bfdfd -_ega )< _ca {_bbg :=_ddfc .Push (MakeBool (false ));return _bbg ;}else if _bfdfd < _ega {_edf :=_ddfc .Push (MakeBool (true ));return _edf ;}else {_egg :=_ddfc .Push (MakeBool (false ));return _egg ;};};func (_ffa *PSOperand )DebugString ()string {return _gf .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ffa );};func (_ef *PSReal )DebugString ()string {return _gf .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_ef .Val );};func (_gbe *PSBoolean )DebugString ()string {return _gf .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_gbe .Val );};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_fbfd *PSOperand )roll (_aagg *PSStack )error {_acg ,_ccgb :=_aagg .Pop ();if _ccgb !=nil {return _ccgb ;};_egc ,_ccgb :=_aagg .Pop ();if _ccgb !=nil {return _ccgb ;};_gfe ,_caa :=_acg .(*PSInteger );if !_caa {return ErrTypeCheck ;};_dfcd ,_caa :=_egc .(*PSInteger );if !_caa {return ErrTypeCheck ;};if _dfcd .Val < 0{return ErrRangeCheck ;};if _dfcd .Val ==0||_dfcd .Val ==1{return nil ;};if _dfcd .Val > len (*_aagg ){return ErrStackUnderflow ;};for _cdb :=0;_cdb < _bff (_gfe .Val );_cdb ++{var _dfe []PSObject ;_dfe =(*_aagg )[len (*_aagg )-(_dfcd .Val ):len (*_aagg )];if _gfe .Val > 0{_beee :=_dfe [len (_dfe )-1];_dfe =append ([]PSObject {_beee },_dfe [0:len (_dfe )-1]...);}else {_fbff :=_dfe [len (_dfe )-_dfcd .Val ];_dfe =append (_dfe [1:],_fbff );};_cegd :=append ((*_aagg )[0:len (*_aagg )-_dfcd .Val ],_dfe ...);_aagg =&_cegd ;};return nil ;};func (_baa *PSOperand )mod (_adgg *PSStack )error {_bbdb ,_fdea :=_adgg .Pop ();if _fdea !=nil {return _fdea ;};_fcff ,_fdea :=_adgg .Pop ();if _fdea !=nil {return _fdea ;};_eaf ,_abcg :=_bbdb .(*PSInteger );if !_abcg {return ErrTypeCheck ;};if _eaf .Val ==0{return ErrUndefinedResult ;};_gag ,_abcg :=_fcff .(*PSInteger );if !_abcg {return ErrTypeCheck ;};_cba :=_gag .Val %_eaf .Val ;_fdea =_adgg .Push (MakeInteger (_cba ));return _fdea ;};func (_fbg *PSOperand )cvi (_cbg *PSStack )error {_gde ,_bea :=_cbg .Pop ();if _bea !=nil {return _bea ;};if _bage ,_fee :=_gde .(*PSReal );_fee {_cgg :=int (_bage .Val );_bea =_cbg .Push (MakeInteger (_cgg ));}else if _ged ,_fbc :=_gde .(*PSInteger );_fbc {_ccac :=_ged .Val ;_bea =_cbg .Push (MakeInteger (_ccac ));}else {return ErrTypeCheck ;};return _bea ;};

// Append appends an object to the PSProgram.
func (_fc *PSProgram )Append (obj PSObject ){*_fc =append (*_fc ,obj )};func (_bccg *PSOperand )ifelse (_ecc *PSStack )error {_bce ,_fdd :=_ecc .Pop ();if _fdd !=nil {return _fdd ;};_fcdg ,_fdd :=_ecc .Pop ();if _fdd !=nil {return _fdd ;};_cfa ,_fdd :=_ecc .Pop ();if _fdd !=nil {return _fdd ;};_dfb ,_ebg :=_bce .(*PSProgram );if !_ebg {return ErrTypeCheck ;};_bccgb ,_ebg :=_fcdg .(*PSProgram );if !_ebg {return ErrTypeCheck ;};_fcf ,_ebg :=_cfa .(*PSBoolean );if !_ebg {return ErrTypeCheck ;};if _fcf .Val {_ggcd :=_bccgb .Exec (_ecc );return _ggcd ;};_fdd =_dfb .Exec (_ecc );return _fdd ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _bfa []float64 ;for _ ,_ade :=range objects {if _dgf ,_e :=_ade .(*PSInteger );_e {_bfa =append (_bfa ,float64 (_dgf .Val ));}else if _dgd ,_ee :=_ade .(*PSReal );_ee {_bfa =append (_bfa ,_dgd .Val );}else {return nil ,ErrTypeCheck ;};};return _bfa ,nil ;};func (_ecdd *PSOperand )truncate (_bbge *PSStack )error {_cdd ,_gdc :=_bbge .Pop ();if _gdc !=nil {return _gdc ;};if _cafb ,_fbgd :=_cdd .(*PSReal );_fbgd {_bbba :=int (_cafb .Val );_gdc =_bbge .Push (MakeReal (float64 (_bbba )));}else if _cgca ,_ebb :=_cdd .(*PSInteger );_ebb {_gdc =_bbge .Push (MakeInteger (_cgca .Val ));}else {return ErrTypeCheck ;};return _gdc ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_bacb *PSOperand )or (_fcba *PSStack )error {_bcb ,_cce :=_fcba .Pop ();if _cce !=nil {return _cce ;};_cab ,_cce :=_fcba .Pop ();if _cce !=nil {return _cce ;};if _ffg ,_fece :=_bcb .(*PSBoolean );_fece {_ggfe ,_aca :=_cab .(*PSBoolean );if !_aca {return ErrTypeCheck ;};_cce =_fcba .Push (MakeBool (_ffg .Val ||_ggfe .Val ));return _cce ;};if _edfd ,_eaa :=_bcb .(*PSInteger );_eaa {_dab ,_bbgf :=_cab .(*PSInteger );if !_bbgf {return ErrTypeCheck ;};_cce =_fcba .Push (MakeInteger (_edfd .Val |_dab .Val ));return _cce ;};return ErrTypeCheck ;};func (_adb *PSOperand )copy (_abg *PSStack )error {_feae ,_feg :=_abg .PopInteger ();if _feg !=nil {return _feg ;};if _feae < 0{return ErrRangeCheck ;};if _feae > len (*_abg ){return ErrRangeCheck ;};*_abg =append (*_abg ,(*_abg )[len (*_abg )-_feae :]...);return nil ;};func (_eec *PSProgram )DebugString ()string {_bag :="\u007b\u0020";for _ ,_ae :=range *_eec {_bag +=_ae .DebugString ();_bag +="\u0020";};_bag +="\u007d";return _bag ;};

// Push pushes an object on top of the stack.
func (_ccacb *PSStack )Push (obj PSObject )error {if len (*_ccacb )> 100{return ErrStackOverflow ;};*_ccacb =append (*_ccacb ,obj );return nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_fdec *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_ddfg ,_afeg :=_fdec .Pop ();if _afeg !=nil {return 0,_afeg ;};if _gbbd ,_gbf :=_ddfg .(*PSReal );_gbf {return _gbbd .Val ,nil ;}else if _eccg ,_acf :=_ddfg .(*PSInteger );_acf {return float64 (_eccg .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_geb *PSParser )skipSpaces ()(int ,error ){_gfd :=0;for {_cgbc ,_adfg :=_geb ._dea .Peek (1);if _adfg !=nil {return 0,_adfg ;};if _bf .IsWhiteSpace (_cgbc [0]){_geb ._dea .ReadByte ();_gfd ++;}else {break ;};};return _gfd ,nil ;};func (_ddg *PSOperand )log (_cfc *PSStack )error {_cccc ,_ggd :=_cfc .PopNumberAsFloat64 ();if _ggd !=nil {return _ggd ;};_ffaa :=_c .Log10 (_cccc );_ggd =_cfc .Push (MakeReal (_ffaa ));return _ggd ;};func (_adcge *PSParser )parseBool ()(*PSBoolean ,error ){_fgd ,_fceb :=_adcge ._dea .Peek (4);if _fceb !=nil {return MakeBool (false ),_fceb ;};if (len (_fgd )>=4)&&(string (_fgd [:4])=="\u0074\u0072\u0075\u0065"){_adcge ._dea .Discard (4);return MakeBool (true ),nil ;};_fgd ,_fceb =_adcge ._dea .Peek (5);if _fceb !=nil {return MakeBool (false ),_fceb ;};if (len (_fgd )>=5)&&(string (_fgd [:5])=="\u0066\u0061\u006cs\u0065"){_adcge ._dea .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_cgf :=PSBoolean {};_cgf .Val =val ;return &_cgf };func (_gfa *PSProgram )String ()string {_fca :="\u007b\u0020";for _ ,_fe :=range *_gfa {_fca +=_fe .String ();_fca +="\u0020";};_fca +="\u007d";return _fca ;};func (_bdb *PSOperand )div (_cbga *PSStack )error {_dgfd ,_ebd :=_cbga .Pop ();if _ebd !=nil {return _ebd ;};_bbb ,_ebd :=_cbga .Pop ();if _ebd !=nil {return _ebd ;};_cdc ,_bae :=_dgfd .(*PSReal );_bcc ,_dfg :=_dgfd .(*PSInteger );if !_bae &&!_dfg {return ErrTypeCheck ;};if _bae &&_cdc .Val ==0{return ErrUndefinedResult ;};if _dfg &&_bcc .Val ==0{return ErrUndefinedResult ;};_fggb ,_aedf :=_bbb .(*PSReal );_cec ,_aeea :=_bbb .(*PSInteger );if !_aedf &&!_aeea {return ErrTypeCheck ;};var _bbf float64 ;if _aedf {_bbf =_fggb .Val ;}else {_bbf =float64 (_cec .Val );};if _bae {_bbf /=_cdc .Val ;}else {_bbf /=float64 (_bcc .Val );};_ebd =_cbga .Push (MakeReal (_bbf ));return _ebd ;};func (_egff *PSOperand )neg (_fbe *PSStack )error {_dad ,_cdgc :=_fbe .Pop ();if _cdgc !=nil {return _cdgc ;};if _baca ,_bagd :=_dad .(*PSReal );_bagd {_cdgc =_fbe .Push (MakeReal (-_baca .Val ));return _cdgc ;}else if _ada ,_eeg :=_dad .(*PSInteger );_eeg {_cdgc =_fbe .Push (MakeInteger (-_ada .Val ));return _cdgc ;}else {return ErrTypeCheck ;};};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_gc *PSProgram ;};func (_cb *PSOperand )cos (_fd *PSStack )error {_caf ,_ggf :=_fd .PopNumberAsFloat64 ();if _ggf !=nil {return _ggf ;};_fa :=_c .Cos (_caf *_c .Pi /180.0);_ggf =_fd .Push (MakeReal (_fa ));return _ggf ;};func (_ff *PSInteger )DebugString ()string {return _gf .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ff .Val );};func (_ddf *PSProgram )Duplicate ()PSObject {_bb :=&PSProgram {};for _ ,_gd :=range *_ddf {_bb .Append (_gd .Duplicate ());};return _bb ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_af *PSBoolean )Duplicate ()PSObject {_adg :=PSBoolean {};_adg .Val =_af .Val ;return &_adg };const _ca =0.000001;func (_dfdd *PSOperand )floor (_gda *PSStack )error {_afc ,_bcaa :=_gda .Pop ();if _bcaa !=nil {return _bcaa ;};if _bfba ,_fde :=_afc .(*PSReal );_fde {_bcaa =_gda .Push (MakeReal (_c .Floor (_bfba .Val )));}else if _fdc ,_eae :=_afc .(*PSInteger );_eae {_bcaa =_gda .Push (MakeInteger (_fdc .Val ));}else {return ErrTypeCheck ;};return _bcaa ;};var ErrTypeCheck =_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");

// Exec executes the operand `op` in the state specified by `stack`.
func (_fea *PSOperand )Exec (stack *PSStack )error {_bc :=ErrUnsupportedOperand ;switch *_fea {case "\u0061\u0062\u0073":_bc =_fea .abs (stack );case "\u0061\u0064\u0064":_bc =_fea .add (stack );case "\u0061\u006e\u0064":_bc =_fea .and (stack );case "\u0061\u0074\u0061\u006e":_bc =_fea .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_bc =_fea .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_bc =_fea .ceiling (stack );case "\u0063\u006f\u0070\u0079":_bc =_fea .copy (stack );case "\u0063\u006f\u0073":_bc =_fea .cos (stack );case "\u0063\u0076\u0069":_bc =_fea .cvi (stack );case "\u0063\u0076\u0072":_bc =_fea .cvr (stack );case "\u0064\u0069\u0076":_bc =_fea .div (stack );case "\u0064\u0075\u0070":_bc =_fea .dup (stack );case "\u0065\u0071":_bc =_fea .eq (stack );case "\u0065\u0078\u0063\u0068":_bc =_fea .exch (stack );case "\u0065\u0078\u0070":_bc =_fea .exp (stack );case "\u0066\u006c\u006fo\u0072":_bc =_fea .floor (stack );case "\u0067\u0065":_bc =_fea .ge (stack );case "\u0067\u0074":_bc =_fea .gt (stack );case "\u0069\u0064\u0069\u0076":_bc =_fea .idiv (stack );case "\u0069\u0066":_bc =_fea .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_bc =_fea .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_bc =_fea .index (stack );case "\u006c\u0065":_bc =_fea .le (stack );case "\u006c\u006f\u0067":_bc =_fea .log (stack );case "\u006c\u006e":_bc =_fea .ln (stack );case "\u006c\u0074":_bc =_fea .lt (stack );case "\u006d\u006f\u0064":_bc =_fea .mod (stack );case "\u006d\u0075\u006c":_bc =_fea .mul (stack );case "\u006e\u0065":_bc =_fea .ne (stack );case "\u006e\u0065\u0067":_bc =_fea .neg (stack );case "\u006e\u006f\u0074":_bc =_fea .not (stack );case "\u006f\u0072":_bc =_fea .or (stack );case "\u0070\u006f\u0070":_bc =_fea .pop (stack );case "\u0072\u006f\u0075n\u0064":_bc =_fea .round (stack );case "\u0072\u006f\u006c\u006c":_bc =_fea .roll (stack );case "\u0073\u0069\u006e":_bc =_fea .sin (stack );case "\u0073\u0071\u0072\u0074":_bc =_fea .sqrt (stack );case "\u0073\u0075\u0062":_bc =_fea .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_bc =_fea .truncate (stack );case "\u0078\u006f\u0072":_bc =_fea .xor (stack );};return _bc ;};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_bfd *PSOperand )eq (_acd *PSStack )error {_edg ,_gff :=_acd .Pop ();if _gff !=nil {return _gff ;};_efee ,_gff :=_acd .Pop ();if _gff !=nil {return _gff ;};_fcd ,_aeb :=_edg .(*PSBoolean );_age ,_fgga :=_efee .(*PSBoolean );if _aeb ||_fgga {var _bfg error ;if _aeb &&_fgga {_bfg =_acd .Push (MakeBool (_fcd .Val ==_age .Val ));}else {_bfg =_acd .Push (MakeBool (false ));};return _bfg ;};var _dfc float64 ;var _ggc float64 ;if _gba ,_dfd :=_edg .(*PSInteger );_dfd {_dfc =float64 (_gba .Val );}else if _adfe ,_dbg :=_edg .(*PSReal );_dbg {_dfc =_adfe .Val ;}else {return ErrTypeCheck ;};if _egf ,_bddb :=_efee .(*PSInteger );_bddb {_ggc =float64 (_egf .Val );}else if _dfde ,_beg :=_efee .(*PSReal );_beg {_ggc =_dfde .Val ;}else {return ErrTypeCheck ;};if _c .Abs (_ggc -_dfc )< _ca {_gff =_acd .Push (MakeBool (true ));}else {_gff =_acd .Push (MakeBool (false ));};return _gff ;};func (_aabe *PSOperand )sin (_eggf *PSStack )error {_bbga ,_aabf :=_eggf .PopNumberAsFloat64 ();if _aabf !=nil {return _aabf ;};_ccaa :=_c .Sin (_bbga *_c .Pi /180.0);_aabf =_eggf .Push (MakeReal (_ccaa ));return _aabf ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_egd :=PSParser {};_fce :=_ad .NewBuffer (content );_egd ._dea =_g .NewReader (_fce );return &_egd ;};func _bff (_daee int )int {if _daee < 0{return -_daee ;};return _daee ;};func (_aa *PSReal )Duplicate ()PSObject {_ce :=PSReal {};_ce .Val =_aa .Val ;return &_ce };func (_gbge *PSOperand )xor (_dgde *PSStack )error {_eeb ,_dabd :=_dgde .Pop ();if _dabd !=nil {return _dabd ;};_egfc ,_dabd :=_dgde .Pop ();if _dabd !=nil {return _dabd ;};if _fgeb ,_bcae :=_eeb .(*PSBoolean );_bcae {_cega ,_eab :=_egfc .(*PSBoolean );if !_eab {return ErrTypeCheck ;};_dabd =_dgde .Push (MakeBool (_fgeb .Val !=_cega .Val ));return _dabd ;};if _gbga ,_dbba :=_eeb .(*PSInteger );_dbba {_bbfb ,_cfe :=_egfc .(*PSInteger );if !_cfe {return ErrTypeCheck ;};_dabd =_dgde .Push (MakeInteger (_gbga .Val ^_bbfb .Val ));return _dabd ;};return ErrTypeCheck ;};var ErrStackUnderflow =_b .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_gege *PSOperand )idiv (_cbd *PSStack )error {_dda ,_dae :=_cbd .Pop ();if _dae !=nil {return _dae ;};_efed ,_dae :=_cbd .Pop ();if _dae !=nil {return _dae ;};_gfb ,_afa :=_dda .(*PSInteger );if !_afa {return ErrTypeCheck ;};if _gfb .Val ==0{return ErrUndefinedResult ;};_ddc ,_afa :=_efed .(*PSInteger );if !_afa {return ErrTypeCheck ;};_agb :=_ddc .Val /_gfb .Val ;_dae =_cbd .Push (MakeInteger (_agb ));return _dae ;};func (_fded *PSOperand )index (_ffba *PSStack )error {_ecb ,_agba :=_ffba .Pop ();if _agba !=nil {return _agba ;};_dgda ,_aebb :=_ecb .(*PSInteger );if !_aebb {return ErrTypeCheck ;};if _dgda .Val < 0{return ErrRangeCheck ;};if _dgda .Val > len (*_ffba )-1{return ErrStackUnderflow ;};_dagd :=(*_ffba )[len (*_ffba )-1-_dgda .Val ];_agba =_ffba .Push (_dagd .Duplicate ());return _agba ;};func (_dac *PSOperand )pop (_cbc *PSStack )error {_ ,_fcg :=_cbc .Pop ();if _fcg !=nil {return _fcg ;};return nil ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_cc :=&PSExecutor {};_cc .Stack =NewPSStack ();_cc ._gc =program ;return _cc ;};func (_afgg *PSOperand )ifCondition (_aeae *PSStack )error {_ebfe ,_ecd :=_aeae .Pop ();if _ecd !=nil {return _ecd ;};_bcfc ,_ecd :=_aeae .Pop ();if _ecd !=nil {return _ecd ;};_gbaf ,_bfgc :=_ebfe .(*PSProgram );if !_bfgc {return ErrTypeCheck ;};_ffb ,_bfgc :=_bcfc .(*PSBoolean );if !_bfgc {return ErrTypeCheck ;};if _ffb .Val {_bfdf :=_gbaf .Exec (_aeae );return _bfdf ;};return nil ;};