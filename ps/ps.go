//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_a "bufio";_d "bytes";_b "errors";_ga "fmt";_f "github.com/unidoc/unipdf/v3/common";_bd "github.com/unidoc/unipdf/v3/core";_c "io";_cd "math";);func (_caa *PSOperand )not (_ade *PSStack )error {_gef ,_gcbf :=_ade .Pop ();if _gcbf !=nil {return _gcbf ;
};if _fcde ,_geee :=_gef .(*PSBoolean );_geee {_gcbf =_ade .Push (MakeBool (!_fcde .Val ));return _gcbf ;}else if _gfcg ,_aegb :=_gef .(*PSInteger );_aegb {_gcbf =_ade .Push (MakeInteger (^_gfcg .Val ));return _gcbf ;}else {return ErrTypeCheck ;};};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_gab *PSOperand )DebugString ()string {return _ga .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_gab );};func (_bffg *PSOperand )mul (_fe *PSStack )error {_efc ,_af :=_fe .Pop ();if _af !=nil {return _af ;};_ffc ,_af :=_fe .Pop ();
if _af !=nil {return _af ;};_gbbe ,_dgfg :=_efc .(*PSReal );_ggga ,_cdfd :=_efc .(*PSInteger );if !_dgfg &&!_cdfd {return ErrTypeCheck ;};_gfeg ,_fed :=_ffc .(*PSReal );_ggee ,_egb :=_ffc .(*PSInteger );if !_fed &&!_egb {return ErrTypeCheck ;};if _cdfd &&_egb {_ceca :=_ggga .Val *_ggee .Val ;
_edcf :=_fe .Push (MakeInteger (_ceca ));return _edcf ;};var _fceg float64 ;if _dgfg {_fceg =_gbbe .Val ;}else {_fceg =float64 (_ggga .Val );};if _fed {_fceg *=_gfeg .Val ;}else {_fceg *=float64 (_ggee .Val );};_af =_fe .Push (MakeReal (_fceg ));return _af ;
};func (_bccc *PSParser )parseOperand ()(*PSOperand ,error ){var _agbg []byte ;for {_dbd ,_aagf :=_bccc ._gcec .Peek (1);if _aagf !=nil {if _aagf ==_c .EOF {break ;};return nil ,_aagf ;};if _bd .IsDelimiter (_dbd [0]){break ;};if _bd .IsWhiteSpace (_dbd [0]){break ;
};_ecc ,_ :=_bccc ._gcec .ReadByte ();_agbg =append (_agbg ,_ecc );};if len (_agbg )==0{return nil ,_b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_agbg )),nil ;
};func (_dcbg *PSOperand )sub (_fge *PSStack )error {_bcfa ,_gfca :=_fge .Pop ();if _gfca !=nil {return _gfca ;};_agd ,_gfca :=_fge .Pop ();if _gfca !=nil {return _gfca ;};_fef ,_cac :=_bcfa .(*PSReal );_adb ,_gda :=_bcfa .(*PSInteger );if !_cac &&!_gda {return ErrTypeCheck ;
};_ada ,_abd :=_agd .(*PSReal );_fced ,_faec :=_agd .(*PSInteger );if !_abd &&!_faec {return ErrTypeCheck ;};if _gda &&_faec {_egbd :=_fced .Val -_adb .Val ;_dbf :=_fge .Push (MakeInteger (_egbd ));return _dbf ;};var _efe float64 =0;if _abd {_efe =_ada .Val ;
}else {_efe =float64 (_fced .Val );};if _cac {_efe -=_fef .Val ;}else {_efe -=float64 (_adb .Val );};_gfca =_fge .Push (MakeReal (_efe ));return _gfca ;};func (_cf *PSOperand )abs (_fd *PSStack )error {_be ,_cb :=_fd .Pop ();if _cb !=nil {return _cb ;};
if _db ,_abg :=_be .(*PSReal );_abg {_aefe :=_db .Val ;if _aefe < 0{_cb =_fd .Push (MakeReal (-_aefe ));}else {_cb =_fd .Push (MakeReal (_aefe ));};}else if _fc ,_agb :=_be .(*PSInteger );_agb {_cfc :=_fc .Val ;if _cfc < 0{_cb =_fd .Push (MakeInteger (-_cfc ));
}else {_cb =_fd .Push (MakeInteger (_cfc ));};}else {return ErrTypeCheck ;};return _cb ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _ae []float64 ;for _ ,_e :=range objects {if _age ,_ff :=_e .(*PSInteger );_ff {_ae =append (_ae ,float64 (_age .Val ));}else if _ge ,_fb :=_e .(*PSReal );_fb {_ae =append (_ae ,_ge .Val );
}else {return nil ,ErrTypeCheck ;};};return _ae ,nil ;};func (_ffa *PSOperand )gt (_bfd *PSStack )error {_aee ,_eaae :=_bfd .PopNumberAsFloat64 ();if _eaae !=nil {return _eaae ;};_acc ,_eaae :=_bfd .PopNumberAsFloat64 ();if _eaae !=nil {return _eaae ;};
if _cd .Abs (_acc -_aee )< _ag {_bbe :=_bfd .Push (MakeBool (false ));return _bbe ;}else if _acc > _aee {_aefc :=_bfd .Push (MakeBool (true ));return _aefc ;}else {_gacd :=_bfd .Push (MakeBool (false ));return _gacd ;};};func (_bddaf *PSOperand )round (_cae *PSStack )error {_bggg ,_dcd :=_cae .Pop ();
if _dcd !=nil {return _dcd ;};if _dab ,_aebb :=_bggg .(*PSReal );_aebb {_dcd =_cae .Push (MakeReal (_cd .Floor (_dab .Val +0.5)));}else if _bcgb ,_dgaa :=_bggg .(*PSInteger );_dgaa {_dcd =_cae .Push (MakeInteger (_bcgb .Val ));}else {return ErrTypeCheck ;
};return _dcd ;};

// Append appends an object to the PSProgram.
func (_dd *PSProgram )Append (obj PSObject ){*_dd =append (*_dd ,obj )};func (_dbcb *PSOperand )xor (_fad *PSStack )error {_degb ,_bccaf :=_fad .Pop ();if _bccaf !=nil {return _bccaf ;};_bbbb ,_bccaf :=_fad .Pop ();if _bccaf !=nil {return _bccaf ;};if _cbg ,_fagd :=_degb .(*PSBoolean );
_fagd {_gfa ,_gbbea :=_bbbb .(*PSBoolean );if !_gbbea {return ErrTypeCheck ;};_bccaf =_fad .Push (MakeBool (_cbg .Val !=_gfa .Val ));return _bccaf ;};if _eeca ,_baec :=_degb .(*PSInteger );_baec {_egde ,_badb :=_bbbb .(*PSInteger );if !_badb {return ErrTypeCheck ;
};_bccaf =_fad .Push (MakeInteger (_eeca .Val ^_egde .Val ));return _bccaf ;};return ErrTypeCheck ;};func (_becaf *PSOperand )sin (_fdba *PSStack )error {_fgc ,_edag :=_fdba .PopNumberAsFloat64 ();if _edag !=nil {return _edag ;};_dfg :=_cd .Sin (_fgc *_cd .Pi /180.0);
_edag =_fdba .Push (MakeReal (_dfg ));return _edag ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cda *PSOperand )Exec (stack *PSStack )error {_gce :=ErrUnsupportedOperand ;switch *_cda {case "\u0061\u0062\u0073":_gce =_cda .abs (stack );case "\u0061\u0064\u0064":_gce =_cda .add (stack );case "\u0061\u006e\u0064":_gce =_cda .and (stack );case "\u0061\u0074\u0061\u006e":_gce =_cda .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_gce =_cda .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_gce =_cda .ceiling (stack );case "\u0063\u006f\u0070\u0079":_gce =_cda .copy (stack );case "\u0063\u006f\u0073":_gce =_cda .cos (stack );
case "\u0063\u0076\u0069":_gce =_cda .cvi (stack );case "\u0063\u0076\u0072":_gce =_cda .cvr (stack );case "\u0064\u0069\u0076":_gce =_cda .div (stack );case "\u0064\u0075\u0070":_gce =_cda .dup (stack );case "\u0065\u0071":_gce =_cda .eq (stack );case "\u0065\u0078\u0063\u0068":_gce =_cda .exch (stack );
case "\u0065\u0078\u0070":_gce =_cda .exp (stack );case "\u0066\u006c\u006fo\u0072":_gce =_cda .floor (stack );case "\u0067\u0065":_gce =_cda .ge (stack );case "\u0067\u0074":_gce =_cda .gt (stack );case "\u0069\u0064\u0069\u0076":_gce =_cda .idiv (stack );
case "\u0069\u0066":_gce =_cda .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_gce =_cda .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_gce =_cda .index (stack );case "\u006c\u0065":_gce =_cda .le (stack );case "\u006c\u006f\u0067":_gce =_cda .log (stack );
case "\u006c\u006e":_gce =_cda .ln (stack );case "\u006c\u0074":_gce =_cda .lt (stack );case "\u006d\u006f\u0064":_gce =_cda .mod (stack );case "\u006d\u0075\u006c":_gce =_cda .mul (stack );case "\u006e\u0065":_gce =_cda .ne (stack );case "\u006e\u0065\u0067":_gce =_cda .neg (stack );
case "\u006e\u006f\u0074":_gce =_cda .not (stack );case "\u006f\u0072":_gce =_cda .or (stack );case "\u0070\u006f\u0070":_gce =_cda .pop (stack );case "\u0072\u006f\u0075n\u0064":_gce =_cda .round (stack );case "\u0072\u006f\u006c\u006c":_gce =_cda .roll (stack );
case "\u0073\u0069\u006e":_gce =_cda .sin (stack );case "\u0073\u0071\u0072\u0074":_gce =_cda .sqrt (stack );case "\u0073\u0075\u0062":_gce =_cda .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_gce =_cda .truncate (stack );case "\u0078\u006f\u0072":_gce =_cda .xor (stack );
};return _gce ;};func (_bae *PSBoolean )String ()string {return _ga .Sprintf ("\u0025\u0076",_bae .Val )};func (_egfd *PSOperand )ge (_gga *PSStack )error {_aea ,_bff :=_gga .PopNumberAsFloat64 ();if _bff !=nil {return _bff ;};_cec ,_bff :=_gga .PopNumberAsFloat64 ();
if _bff !=nil {return _bff ;};if _cd .Abs (_cec -_aea )< _ag {_fcgc :=_gga .Push (MakeBool (true ));return _fcgc ;}else if _cec > _aea {_eff :=_gga .Push (MakeBool (true ));return _eff ;}else {_adda :=_gga .Push (MakeBool (false ));return _adda ;};};func (_bad *PSProgram )String ()string {_ef :="\u007b\u0020";
for _ ,_bce :=range *_bad {_ef +=_bce .String ();_ef +="\u0020";};_ef +="\u007d";return _ef ;};func (_gec *PSReal )DebugString ()string {return _ga .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_gec .Val );};func (_ca *PSInteger )DebugString ()string {return _ga .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ca .Val );
};func (_bfc *PSOperand )String ()string {return string (*_bfc )};

// Push pushes an object on top of the stack.
func (_cgg *PSStack )Push (obj PSObject )error {if len (*_cgg )> 100{return ErrStackOverflow ;};*_cgg =append (*_cgg ,obj );return nil ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_aca :=&PSExecutor {};_aca .Stack =NewPSStack ();_aca ._ac =program ;return _aca ;};func (_cbe *PSOperand )eq (_dag *PSStack )error {_bgg ,_ceg :=_dag .Pop ();if _ceg !=nil {return _ceg ;};_bcc ,_ceg :=_dag .Pop ();
if _ceg !=nil {return _ceg ;};_aeb ,_bbc :=_bgg .(*PSBoolean );_adg ,_aaf :=_bcc .(*PSBoolean );if _bbc ||_aaf {var _beae error ;if _bbc &&_aaf {_beae =_dag .Push (MakeBool (_aeb .Val ==_adg .Val ));}else {_beae =_dag .Push (MakeBool (false ));};return _beae ;
};var _ebf float64 ;var _ddaa float64 ;if _bggd ,_edf :=_bgg .(*PSInteger );_edf {_ebf =float64 (_bggd .Val );}else if _fae ,_gfe :=_bgg .(*PSReal );_gfe {_ebf =_fae .Val ;}else {return ErrTypeCheck ;};if _edeb ,_ege :=_bcc .(*PSInteger );_ege {_ddaa =float64 (_edeb .Val );
}else if _fac ,_aac :=_bcc .(*PSReal );_aac {_ddaa =_fac .Val ;}else {return ErrTypeCheck ;};if _cd .Abs (_ddaa -_ebf )< _ag {_ceg =_dag .Push (MakeBool (true ));}else {_ceg =_dag .Push (MakeBool (false ));};return _ceg ;};func (_acga *PSParser )skipSpaces ()(int ,error ){_eebf :=0;
for {_edab ,_ccae :=_acga ._gcec .Peek (1);if _ccae !=nil {return 0,_ccae ;};if _bd .IsWhiteSpace (_edab [0]){_acga ._gcec .ReadByte ();_eebf ++;}else {break ;};};return _eebf ,nil ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_deag *PSOperand )pop (_cbdb *PSStack )error {_ ,_gcda :=_cbdb .Pop ();if _gcda !=nil {return _gcda ;};return nil ;};func (_ebde *PSOperand )dup (_gcd *PSStack )error {_fbgf ,_cbd :=_gcd .Pop ();if _cbd !=nil {return _cbd ;
};_cbd =_gcd .Push (_fbgf );if _cbd !=nil {return _cbd ;};_cbd =_gcd .Push (_fbgf .Duplicate ());return _cbd ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_fbf *PSBoolean )DebugString ()string {return _ga .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_fbf .Val );};var ErrStackUnderflow =_b .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");


// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_cfeg *PSOperand )mod (_aadf *PSStack )error {_cffc ,_fagb :=_aadf .Pop ();if _fagb !=nil {return _fagb ;};_fbgfg ,_fagb :=_aadf .Pop ();if _fagb !=nil {return _fagb ;};_bbbfg ,_gbg :=_cffc .(*PSInteger );
if !_gbg {return ErrTypeCheck ;};if _bbbfg .Val ==0{return ErrUndefinedResult ;};_eeeg ,_gbg :=_fbgfg .(*PSInteger );if !_gbg {return ErrTypeCheck ;};_dgc :=_eeeg .Val %_bbbfg .Val ;_fagb =_aadf .Push (MakeInteger (_dgc ));return _fagb ;};var ErrUndefinedResult =_b .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");
func (_egd *PSOperand )idiv (_bacg *PSStack )error {_aegd ,_agc :=_bacg .Pop ();if _agc !=nil {return _agc ;};_cbfa ,_agc :=_bacg .Pop ();if _agc !=nil {return _agc ;};_gcdg ,_caf :=_aegd .(*PSInteger );if !_caf {return ErrTypeCheck ;};if _gcdg .Val ==0{return ErrUndefinedResult ;
};_ebg ,_caf :=_cbfa .(*PSInteger );if !_caf {return ErrTypeCheck ;};_bcb :=_ebg .Val /_gcdg .Val ;_agc =_bacg .Push (MakeInteger (_bcb ));return _agc ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cafa :=PSParser {};_aafa :=_d .NewBuffer (content );_cafa ._gcec =_a .NewReader (_aafa );return &_cafa ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_bcd *PSStack )DebugString ()string {_geab :="\u005b\u0020";for _ ,_fgb :=range *_bcd {_geab +=_fgb .DebugString ();_geab +="\u0020";};_geab +="\u005d";return _geab ;};func (_gfg *PSOperand )copy (_aad *PSStack )error {_dea ,_fdg :=_aad .PopInteger ();
if _fdg !=nil {return _fdg ;};if _dea < 0{return ErrRangeCheck ;};if _dea > len (*_aad ){return ErrRangeCheck ;};*_aad =append (*_aad ,(*_aad )[len (*_aad )-_dea :]...);return nil ;};func (_dc *PSOperand )div (_cbbe *PSStack )error {_agg ,_aeg :=_cbbe .Pop ();
if _aeg !=nil {return _aeg ;};_gcb ,_aeg :=_cbbe .Pop ();if _aeg !=nil {return _aeg ;};_deb ,_eec :=_agg .(*PSReal );_fcd ,_bba :=_agg .(*PSInteger );if !_eec &&!_bba {return ErrTypeCheck ;};if _eec &&_deb .Val ==0{return ErrUndefinedResult ;};if _bba &&_fcd .Val ==0{return ErrUndefinedResult ;
};_cff ,_eed :=_gcb .(*PSReal );_cgd ,_eacf :=_gcb .(*PSInteger );if !_eed &&!_eacf {return ErrTypeCheck ;};var _cef float64 ;if _eed {_cef =_cff .Val ;}else {_cef =float64 (_cgd .Val );};if _eec {_cef /=_deb .Val ;}else {_cef /=float64 (_fcd .Val );};
_aeg =_cbbe .Push (MakeReal (_cef ));return _aeg ;};var ErrTypeCheck =_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");const _ag =0.000001;func (_cdb *PSOperand )lt (_bafb *PSStack )error {_geea ,_fagg :=_bafb .PopNumberAsFloat64 ();
if _fagg !=nil {return _fagg ;};_dff ,_fagg :=_bafb .PopNumberAsFloat64 ();if _fagg !=nil {return _fagg ;};if _cd .Abs (_dff -_geea )< _ag {_gaeb :=_bafb .Push (MakeBool (false ));return _gaeb ;}else if _dff < _geea {_fdcc :=_bafb .Push (MakeBool (true ));
return _fdcc ;}else {_bbd :=_bafb .Push (MakeBool (false ));return _bbd ;};};func (_eb *PSInteger )String ()string {return _ga .Sprintf ("\u0025\u0064",_eb .Val )};func (_eac *PSOperand )and (_dgd *PSStack )error {_efbc ,_bg :=_dgd .Pop ();if _bg !=nil {return _bg ;
};_abf ,_bg :=_dgd .Pop ();if _bg !=nil {return _bg ;};if _bag ,_fcge :=_efbc .(*PSBoolean );_fcge {_eg ,_ggg :=_abf .(*PSBoolean );if !_ggg {return ErrTypeCheck ;};_bg =_dgd .Push (MakeBool (_bag .Val &&_eg .Val ));return _bg ;};if _fab ,_bcg :=_efbc .(*PSInteger );
_bcg {_cfe ,_cad :=_abf .(*PSInteger );if !_cad {return ErrTypeCheck ;};_bg =_dgd .Push (MakeInteger (_fab .Val &_cfe .Val ));return _bg ;};return ErrTypeCheck ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_bf *PSReal )Duplicate ()PSObject {_aef :=PSReal {};_aef .Val =_bf .Val ;return &_aef };func (_cdaa *PSParser )parseFunction ()(*PSProgram ,error ){_gegc ,_ :=_cdaa ._gcec .ReadByte ();if _gegc !='{'{return nil ,_b .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_cegd :=NewPSProgram ();for {_cdaa .skipSpaces ();_dccc ,_dccce :=_cdaa ._gcec .Peek (2);if _dccce !=nil {if _dccce ==_c .EOF {break ;};return nil ,_dccce ;};_f .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_dccc ));
if _dccc [0]=='}'{_f .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_cdaa ._gcec .ReadByte ();break ;}else if _dccc [0]=='{'{_f .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_fedf ,_bbdg :=_cdaa .parseFunction ();
if _bbdg !=nil {return nil ,_bbdg ;};_cegd .Append (_fedf );}else if _bd .IsDecimalDigit (_dccc [0])||(_dccc [0]=='-'&&_bd .IsDecimalDigit (_dccc [1])){_f .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_fbaf ,_egc :=_cdaa .parseNumber ();
if _egc !=nil {return nil ,_egc ;};_cegd .Append (_fbaf );}else {_f .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_dccc ,_ =_cdaa ._gcec .Peek (5);_effe :=string (_dccc );_f .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_effe );
if (len (_effe )> 4)&&(_effe [:5]=="\u0066\u0061\u006cs\u0065"){_eeea ,_ecea :=_cdaa .parseBool ();if _ecea !=nil {return nil ,_ecea ;};_cegd .Append (_eeea );}else if (len (_effe )> 3)&&(_effe [:4]=="\u0074\u0072\u0075\u0065"){_ccc ,_gfef :=_cdaa .parseBool ();
if _gfef !=nil {return nil ,_gfef ;};_cegd .Append (_ccc );}else {_ebc ,_afa :=_cdaa .parseOperand ();if _afa !=nil {return nil ,_afa ;};_cegd .Append (_ebc );};};};return _cegd ,nil ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_gcec *_a .Reader };

// Parse parses the postscript and store as a program that can be executed.
func (_beed *PSParser )Parse ()(*PSProgram ,error ){_beed .skipSpaces ();_fede ,_bdf :=_beed ._gcec .Peek (2);if _bdf !=nil {return nil ,_bdf ;};if _fede [0]!='{'{return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_aafaa ,_bdf :=_beed .parseFunction ();if _bdf !=nil &&_bdf !=_c .EOF {return nil ,_bdf ;};return _aafaa ,_bdf ;};func (_dbg *PSOperand )truncate (_adc *PSStack )error {_cffb ,_dbe :=_adc .Pop ();if _dbe !=nil {return _dbe ;};if _ggeg ,_eegc :=_cffb .(*PSReal );
_eegc {_fee :=int (_ggeg .Val );_dbe =_adc .Push (MakeReal (float64 (_fee )));}else if _ebdg ,_cgc :=_cffb .(*PSInteger );_cgc {_dbe =_adc .Push (MakeInteger (_ebdg .Val ));}else {return ErrTypeCheck ;};return _dbe ;};func (_efb *PSOperand )add (_eaa *PSStack )error {_baf ,_fcg :=_eaa .Pop ();
if _fcg !=nil {return _fcg ;};_acae ,_fcg :=_eaa .Pop ();if _fcg !=nil {return _fcg ;};_bea ,_dda :=_baf .(*PSReal );_ece ,_gedc :=_baf .(*PSInteger );if !_dda &&!_gedc {return ErrTypeCheck ;};_dfc ,_acf :=_acae .(*PSReal );_gdf ,_ede :=_acae .(*PSInteger );
if !_acf &&!_ede {return ErrTypeCheck ;};if _gedc &&_ede {_fg :=_ece .Val +_gdf .Val ;_cc :=_eaa .Push (MakeInteger (_fg ));return _cc ;};var _de float64 ;if _dda {_de =_bea .Val ;}else {_de =float64 (_ece .Val );};if _acf {_de +=_dfc .Val ;}else {_de +=float64 (_gdf .Val );
};_fcg =_eaa .Push (MakeReal (_de ));return _fcg ;};func (_gbb *PSInteger )Duplicate ()PSObject {_bb :=PSInteger {};_bb .Val =_gbb .Val ;return &_bb };func (_cbb *PSOperand )cvi (_bbbf *PSStack )error {_gfc ,_gfd :=_bbbf .Pop ();if _gfd !=nil {return _gfd ;
};if _cbf ,_baeg :=_gfc .(*PSReal );_baeg {_gad :=int (_cbf .Val );_gfd =_bbbf .Push (MakeInteger (_gad ));}else if _dgb ,_cfcg :=_gfc .(*PSInteger );_cfcg {_deac :=_dgb .Val ;_gfd =_bbbf .Push (MakeInteger (_deac ));}else {return ErrTypeCheck ;};return _gfd ;
};func (_bge *PSOperand )or (_aegba *PSStack )error {_abgd ,_cced :=_aegba .Pop ();if _cced !=nil {return _cced ;};_egef ,_cced :=_aegba .Pop ();if _cced !=nil {return _cced ;};if _aag ,_badc :=_abgd .(*PSBoolean );_badc {_afe ,_gbgg :=_egef .(*PSBoolean );
if !_gbgg {return ErrTypeCheck ;};_cced =_aegba .Push (MakeBool (_aag .Val ||_afe .Val ));return _cced ;};if _aab ,_fedb :=_abgd .(*PSInteger );_fedb {_agce ,_dfed :=_egef .(*PSInteger );if !_dfed {return ErrTypeCheck ;};_cced =_aegba .Push (MakeInteger (_aab .Val |_agce .Val ));
return _cced ;};return ErrTypeCheck ;};func (_gdff *PSOperand )exch (_cbc *PSStack )error {_eca ,_gbad :=_cbc .Pop ();if _gbad !=nil {return _gbad ;};_bgd ,_gbad :=_cbc .Pop ();if _gbad !=nil {return _gbad ;};_gbad =_cbc .Push (_eca );if _gbad !=nil {return _gbad ;
};_gbad =_cbc .Push (_bgd );return _gbad ;};func (_eaaa *PSOperand )ifelse (_cgb *PSStack )error {_edca ,_cfa :=_cgb .Pop ();if _cfa !=nil {return _cfa ;};_cce ,_cfa :=_cgb .Pop ();if _cfa !=nil {return _cfa ;};_bcbb ,_cfa :=_cgb .Pop ();if _cfa !=nil {return _cfa ;
};_bgge ,_bef :=_edca .(*PSProgram );if !_bef {return ErrTypeCheck ;};_beagb ,_bef :=_cce .(*PSProgram );if !_bef {return ErrTypeCheck ;};_cca ,_bef :=_bcbb .(*PSBoolean );if !_bef {return ErrTypeCheck ;};if _cca .Val {_ffb :=_beagb .Exec (_cgb );return _ffb ;
};_cfa =_bgge .Exec (_cgb );return _cfa ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_eee *PSOperand )ifCondition (_edc *PSStack )error {_fbd ,_bcce :=_edc .Pop ();if _bcce !=nil {return _bcce ;};_eeb ,_bcce :=_edc .Pop ();if _bcce !=nil {return _bcce ;};_aefca ,_gae :=_fbd .(*PSProgram );
if !_gae {return ErrTypeCheck ;};_eaaf ,_gae :=_eeb .(*PSBoolean );if !_gae {return ErrTypeCheck ;};if _eaaf .Val {_fdb :=_aefca .Exec (_edc );return _fdb ;};return nil ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_add *PSOperand )Duplicate ()PSObject {_ed :=*_add ;return &_ed };func (_gfdb *PSParser )parseNumber ()(PSObject ,error ){_acb ,_fcc :=_bd .ParseNumber (_gfdb ._gcec );if _fcc !=nil {return nil ,_fcc ;};switch _dbgg :=_acb .(type ){case *_bd .PdfObjectFloat :return MakeReal (float64 (*_dbgg )),nil ;
case *_bd .PdfObjectInteger :return MakeInteger (int (*_dbgg )),nil ;};return nil ,_ga .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_acb );};var ErrUnsupportedOperand =_b .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");


// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_ccd :=PSInteger {};_ccd .Val =val ;return &_ccd };

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_fbg *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ba :=range objects {_gb :=_fbg .Stack .Push (_ba );if _gb !=nil {return nil ,_gb ;};};_df :=_fbg ._ac .Exec (_fbg .Stack );if _df !=nil {_f .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_df );
return nil ,_df ;};_ad :=[]PSObject (*_fbg .Stack );_fbg .Stack .Empty ();return _ad ,nil ;};var ErrRangeCheck =_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_cfg *PSOperand )index (_fbad *PSStack )error {_bcca ,_efbd :=_fbad .Pop ();if _efbd !=nil {return _efbd ;};_dfd ,_dcc :=_bcca .(*PSInteger );if !_dcc {return ErrTypeCheck ;};if _dfd .Val < 0{return ErrRangeCheck ;};if _dfd .Val > len (*_fbad )-1{return ErrStackUnderflow ;
};_cfcf :=(*_fbad )[len (*_fbad )-1-_dfd .Val ];_efbd =_fbad .Push (_cfcf .Duplicate ());return _efbd ;};func (_ebdd *PSParser )parseBool ()(*PSBoolean ,error ){_dgce ,_dbga :=_ebdd ._gcec .Peek (4);if _dbga !=nil {return MakeBool (false ),_dbga ;};if (len (_dgce )>=4)&&(string (_dgce [:4])=="\u0074\u0072\u0075\u0065"){_ebdd ._gcec .Discard (4);
return MakeBool (true ),nil ;};_dgce ,_dbga =_ebdd ._gcec .Peek (5);if _dbga !=nil {return MakeBool (false ),_dbga ;};if (len (_dgce )>=5)&&(string (_dgce [:5])=="\u0066\u0061\u006cs\u0065"){_ebdd ._gcec .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_fag *PSOperand )cvr (_gge *PSStack )error {_acg ,_aedf :=_gge .Pop ();if _aedf !=nil {return _aedf ;};if _aeff ,_gbe :=_acg .(*PSReal );_gbe {_aedf =_gge .Push (MakeReal (_aeff .Val ));}else if _acgd ,_fdc :=_acg .(*PSInteger );_fdc {_aedf =_gge .Push (MakeReal (float64 (_acgd .Val )));
}else {return ErrTypeCheck ;};return _aedf ;};func (_beb *PSOperand )neg (_dfe *PSStack )error {_cbcf ,_ffgb :=_dfe .Pop ();if _ffgb !=nil {return _ffgb ;};if _beef ,_dfb :=_cbcf .(*PSReal );_dfb {_ffgb =_dfe .Push (MakeReal (-_beef .Val ));return _ffgb ;
}else if _dbc ,_cdfe :=_cbcf .(*PSInteger );_cdfe {_ffgb =_dfe .Push (MakeInteger (-_dbc .Val ));return _ffgb ;}else {return ErrTypeCheck ;};};var ErrStackOverflow =_b .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");
func (_debd *PSOperand )le (_fbe *PSStack )error {_cbcd ,_bffd :=_fbe .PopNumberAsFloat64 ();if _bffd !=nil {return _bffd ;};_cfag ,_bffd :=_fbe .PopNumberAsFloat64 ();if _bffd !=nil {return _bffd ;};if _cd .Abs (_cfag -_cbcd )< _ag {_bdc :=_fbe .Push (MakeBool (true ));
return _bdc ;}else if _cfag < _cbcd {_cdg :=_fbe .Push (MakeBool (true ));return _cdg ;}else {_fdf :=_fbe .Push (MakeBool (false ));return _fdf ;};};func (_ggca *PSOperand )log (_dcb *PSStack )error {_eege ,_eea :=_dcb .PopNumberAsFloat64 ();if _eea !=nil {return _eea ;
};_bced :=_cd .Log10 (_eege );_eea =_dcb .Push (MakeReal (_bced ));return _eea ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_fgd *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_cgbe ,_adf :=_fgd .Pop ();if _adf !=nil {return 0,_adf ;};if _cccb ,_fcb :=_cgbe .(*PSReal );_fcb {return _cccb .Val ,nil ;}else if _edad ,_edfb :=_cgbe .(*PSInteger );_edfb {return float64 (_edad .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_faea :=PSBoolean {};_faea .Val =val ;return &_faea };func (_ab *PSReal )String ()string {return _ga .Sprintf ("\u0025\u002e\u0035\u0066",_ab .Val )};func _bca (_bebg int )int {if _bebg < 0{return -_bebg ;};return _bebg ;
};func (_egf *PSOperand )atan (_ffg *PSStack )error {_fga ,_gea :=_ffg .PopNumberAsFloat64 ();if _gea !=nil {return _gea ;};_beag ,_gea :=_ffg .PopNumberAsFloat64 ();if _gea !=nil {return _gea ;};if _fga ==0{var _eeg error ;if _beag < 0{_eeg =_ffg .Push (MakeReal (270));
}else {_eeg =_ffg .Push (MakeReal (90));};return _eeg ;};_aed :=_beag /_fga ;_bbb :=_cd .Atan (_aed )*180/_cd .Pi ;_gea =_ffg .Push (MakeReal (_bbb ));return _gea ;};

// String returns a string representation of the stack.
func (_gbc *PSStack )String ()string {_agdc :="\u005b\u0020";for _ ,_bade :=range *_gbc {_agdc +=_bade .String ();_agdc +="\u0020";};_agdc +="\u005d";return _agdc ;};func (_dgbf *PSOperand )sqrt (_ceee *PSStack )error {_dcdb ,_dcg :=_ceee .PopNumberAsFloat64 ();
if _dcg !=nil {return _dcg ;};if _dcdb < 0{return ErrRangeCheck ;};_acd :=_cd .Sqrt (_dcdb );_dcg =_ceee .Push (MakeReal (_acd ));return _dcg ;};func (_deg *PSOperand )ceiling (_da *PSStack )error {_cdd ,_bee :=_da .Pop ();if _bee !=nil {return _bee ;};
if _bac ,_aa :=_cdd .(*PSReal );_aa {_bee =_da .Push (MakeReal (_cd .Ceil (_bac .Val )));}else if _fba ,_geg :=_cdd .(*PSInteger );_geg {_bee =_da .Push (MakeInteger (_fba .Val ));}else {_bee =ErrTypeCheck ;};return _bee ;};func (_fa *PSProgram )Duplicate ()PSObject {_gba :=&PSProgram {};
for _ ,_ged :=range *_fa {_gba .Append (_ged .Duplicate ());};return _gba ;};func (_bdda *PSOperand )ln (_fce *PSStack )error {_dgba ,_dad :=_fce .PopNumberAsFloat64 ();if _dad !=nil {return _dad ;};_fbfb :=_cd .Log (_dgba );_dad =_fce .Push (MakeReal (_fbfb ));
return _dad ;};func (_gag *PSProgram )DebugString ()string {_cg :="\u007b\u0020";for _ ,_ebd :=range *_gag {_cg +=_ebd .DebugString ();_cg +="\u0020";};_cg +="\u007d";return _cg ;};func (_ce *PSOperand )cos (_edef *PSStack )error {_cdde ,_beca :=_edef .PopNumberAsFloat64 ();
if _beca !=nil {return _beca ;};_dgf :=_cd .Cos (_cdde *_cd .Pi /180.0);_beca =_edef .Push (MakeReal (_dgf ));return _beca ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_eeaf *PSStack )PopInteger ()(int ,error ){_bacf ,_aadd :=_eeaf .Pop ();if _aadd !=nil {return 0,_aadd ;};if _dba ,_acba :=_bacf .(*PSInteger );_acba {return _dba .Val ,nil ;};return 0,ErrTypeCheck ;};func (_gf *PSOperand )bitshift (_bdd *PSStack )error {_bec ,_bed :=_bdd .PopInteger ();
if _bed !=nil {return _bed ;};_fda ,_bed :=_bdd .PopInteger ();if _bed !=nil {return _bed ;};var _ecef int ;if _bec >=0{_ecef =_fda <<uint (_bec );}else {_ecef =_fda >>uint (-_bec );};_bed =_bdd .Push (MakeInteger (_ecef ));return _bed ;};func (_edb *PSOperand )roll (_cbcfc *PSStack )error {_fcgeb ,_ecf :=_cbcfc .Pop ();
if _ecf !=nil {return _ecf ;};_gefg ,_ecf :=_cbcfc .Pop ();if _ecf !=nil {return _ecf ;};_cffd ,_bfcg :=_fcgeb .(*PSInteger );if !_bfcg {return ErrTypeCheck ;};_cafc ,_bfcg :=_gefg .(*PSInteger );if !_bfcg {return ErrTypeCheck ;};if _cafc .Val < 0{return ErrRangeCheck ;
};if _cafc .Val ==0||_cafc .Val ==1{return nil ;};if _cafc .Val > len (*_cbcfc ){return ErrStackUnderflow ;};for _geb :=0;_geb < _bca (_cffd .Val );_geb ++{var _aagb []PSObject ;_aagb =(*_cbcfc )[len (*_cbcfc )-(_cafc .Val ):len (*_cbcfc )];if _cffd .Val > 0{_dabc :=_aagb [len (_aagb )-1];
_aagb =append ([]PSObject {_dabc },_aagb [0:len (_aagb )-1]...);}else {_bbbc :=_aagb [len (_aagb )-_cafc .Val ];_aagb =append (_aagb [1:],_bbbc );};_eda :=append ((*_cbcfc )[0:len (*_cbcfc )-_cafc .Val ],_aagb ...);_cbcfc =&_eda ;};return nil ;};func (_gdb *PSOperand )exp (_cadf *PSStack )error {_abc ,_beec :=_cadf .PopNumberAsFloat64 ();
if _beec !=nil {return _beec ;};_egfg ,_beec :=_cadf .PopNumberAsFloat64 ();if _beec !=nil {return _beec ;};if _cd .Abs (_abc )< 1&&_egfg < 0{return ErrUndefinedResult ;};_cegg :=_cd .Pow (_egfg ,_abc );_beec =_cadf .Push (MakeReal (_cegg ));return _beec ;
};func (_ced *PSOperand )floor (_dga *PSStack )error {_abe ,_ffgg :=_dga .Pop ();if _ffgg !=nil {return _ffgg ;};if _ccb ,_agga :=_abe .(*PSReal );_agga {_ffgg =_dga .Push (MakeReal (_cd .Floor (_ccb .Val )));}else if _ffe ,_cee :=_abe .(*PSInteger );_cee {_ffgg =_dga .Push (MakeInteger (_ffe .Val ));
}else {return ErrTypeCheck ;};return _ffgg ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_abdc :=PSReal {};_abdc .Val =val ;return &_abdc };

// Pop pops an object from the top of the stack.
func (_fgab *PSStack )Pop ()(PSObject ,error ){if len (*_fgab )< 1{return nil ,ErrStackUnderflow ;};_agec :=(*_fgab )[len (*_fgab )-1];*_fgab =(*_fgab )[0:len (*_fgab )-1];return _agec ,nil ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_ac *PSProgram ;};

// Exec executes the program, typically leaving output values on the stack.
func (_gee *PSProgram )Exec (stack *PSStack )error {for _ ,_ec :=range *_gee {var _faa error ;switch _gc :=_ec .(type ){case *PSInteger :_cge :=_gc ;_faa =stack .Push (_cge );case *PSReal :_gac :=_gc ;_faa =stack .Push (_gac );case *PSBoolean :_gcc :=_gc ;
_faa =stack .Push (_gcc );case *PSProgram :_gd :=_gc ;_faa =stack .Push (_gd );case *PSOperand :_ggc :=_gc ;_faa =_ggc .Exec (stack );default:return ErrTypeCheck ;};if _faa !=nil {return _faa ;};};return nil ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_bdb :=PSOperand (val );return &_bdb };

// Empty empties the stack.
func (_dgaac *PSStack )Empty (){*_dgaac =[]PSObject {}};func (_cdf *PSBoolean )Duplicate ()PSObject {_dg :=PSBoolean {};_dg .Val =_cdf .Val ;return &_dg };func (_aga *PSOperand )ne (_aec *PSStack )error {_cbea :=_aga .eq (_aec );if _cbea !=nil {return _cbea ;
};_cbea =_aga .not (_aec );return _cbea ;};