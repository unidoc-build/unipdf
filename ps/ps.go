//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_fg "bufio";_f "bytes";_a "errors";_fc "fmt";_fce "github.com/unidoc/unipdf/v3/common";_abb "github.com/unidoc/unipdf/v3/core";_ab "io";_c "math";);func (_ceeaf *PSProgram )Duplicate ()PSObject {_dg :=&PSProgram {};for _ ,_edf :=range *_ceeaf {_dg .Append (_edf .Duplicate ());
};return _dg ;};func (_cgb *PSOperand )mod (_bgea *PSStack )error {_adgg ,_gge :=_bgea .Pop ();if _gge !=nil {return _gge ;};_aeg ,_gge :=_bgea .Pop ();if _gge !=nil {return _gge ;};_dbeb ,_gga :=_adgg .(*PSInteger );if !_gga {return ErrTypeCheck ;};if _dbeb .Val ==0{return ErrUndefinedResult ;
};_fgdea ,_gga :=_aeg .(*PSInteger );if !_gga {return ErrTypeCheck ;};_abce :=_fgdea .Val %_dbeb .Val ;_gge =_bgea .Push (MakeInteger (_abce ));return _gge ;};func (_cda *PSOperand )ge (_bbg *PSStack )error {_ged ,_cecb :=_bbg .PopNumberAsFloat64 ();if _cecb !=nil {return _cecb ;
};_ecbe ,_cecb :=_bbg .PopNumberAsFloat64 ();if _cecb !=nil {return _cecb ;};if _c .Abs (_ecbe -_ged )< _cc {_cfc :=_bbg .Push (MakeBool (true ));return _cfc ;}else if _ecbe > _ged {_bcg :=_bbg .Push (MakeBool (true ));return _bcg ;}else {_fea :=_bbg .Push (MakeBool (false ));
return _fea ;};};func (_cdg *PSOperand )cvi (_efcg *PSStack )error {_abg ,_bcd :=_efcg .Pop ();if _bcd !=nil {return _bcd ;};if _adca ,_ecb :=_abg .(*PSReal );_ecb {_fec :=int (_adca .Val );_bcd =_efcg .Push (MakeInteger (_fec ));}else if _ffa ,_bcb :=_abg .(*PSInteger );
_bcb {_fge :=_ffa .Val ;_bcd =_efcg .Push (MakeInteger (_fge ));}else {return ErrTypeCheck ;};return _bcd ;};func (_cfd *PSOperand )cvr (_bcda *PSStack )error {_dcc ,_gd :=_bcda .Pop ();if _gd !=nil {return _gd ;};if _gab ,_bge :=_dcc .(*PSReal );_bge {_gd =_bcda .Push (MakeReal (_gab .Val ));
}else if _ega ,_aecd :=_dcc .(*PSInteger );_aecd {_gd =_bcda .Push (MakeReal (float64 (_ega .Val )));}else {return ErrTypeCheck ;};return _gd ;};func (_fdfg *PSOperand )xor (_efea *PSStack )error {_dfff ,_gcf :=_efea .Pop ();if _gcf !=nil {return _gcf ;
};_adfd ,_gcf :=_efea .Pop ();if _gcf !=nil {return _gcf ;};if _cdfd ,_affa :=_dfff .(*PSBoolean );_affa {_aaf ,_ebff :=_adfd .(*PSBoolean );if !_ebff {return ErrTypeCheck ;};_gcf =_efea .Push (MakeBool (_cdfd .Val !=_aaf .Val ));return _gcf ;};if _aede ,_fdc :=_dfff .(*PSInteger );
_fdc {_ebfa ,_efdd :=_adfd .(*PSInteger );if !_efdd {return ErrTypeCheck ;};_gcf =_efea .Push (MakeInteger (_aede .Val ^_ebfa .Val ));return _gcf ;};return ErrTypeCheck ;};func (_eg *PSInteger )DebugString ()string {return _fc .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_eg .Val );
};

// Push pushes an object on top of the stack.
func (_ccdd *PSStack )Push (obj PSObject )error {if len (*_ccdd )> 100{return ErrStackOverflow ;};*_ccdd =append (*_ccdd ,obj );return nil ;};func (_bc *PSProgram )DebugString ()string {_ccd :="\u007b\u0020";for _ ,_ac :=range *_bc {_ccd +=_ac .DebugString ();
_ccd +="\u0020";};_ccd +="\u007d";return _ccd ;};func (_bbdd *PSParser )parseOperand ()(*PSOperand ,error ){var _abbg []byte ;for {_bbeb ,_bdd :=_bbdd ._gffe .Peek (1);if _bdd !=nil {if _bdd ==_ab .EOF {break ;};return nil ,_bdd ;};if _abb .IsDelimiter (_bbeb [0]){break ;
};if _abb .IsWhiteSpace (_bbeb [0]){break ;};_fba ,_ :=_bbdd ._gffe .ReadByte ();_abbg =append (_abbg ,_fba );};if len (_abbg )==0{return nil ,_a .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_abbg )),nil ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cca *PSOperand )Exec (stack *PSStack )error {_ffc :=ErrUnsupportedOperand ;switch *_cca {case "\u0061\u0062\u0073":_ffc =_cca .abs (stack );case "\u0061\u0064\u0064":_ffc =_cca .add (stack );case "\u0061\u006e\u0064":_ffc =_cca .and (stack );case "\u0061\u0074\u0061\u006e":_ffc =_cca .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_ffc =_cca .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_ffc =_cca .ceiling (stack );case "\u0063\u006f\u0070\u0079":_ffc =_cca .copy (stack );case "\u0063\u006f\u0073":_ffc =_cca .cos (stack );
case "\u0063\u0076\u0069":_ffc =_cca .cvi (stack );case "\u0063\u0076\u0072":_ffc =_cca .cvr (stack );case "\u0064\u0069\u0076":_ffc =_cca .div (stack );case "\u0064\u0075\u0070":_ffc =_cca .dup (stack );case "\u0065\u0071":_ffc =_cca .eq (stack );case "\u0065\u0078\u0063\u0068":_ffc =_cca .exch (stack );
case "\u0065\u0078\u0070":_ffc =_cca .exp (stack );case "\u0066\u006c\u006fo\u0072":_ffc =_cca .floor (stack );case "\u0067\u0065":_ffc =_cca .ge (stack );case "\u0067\u0074":_ffc =_cca .gt (stack );case "\u0069\u0064\u0069\u0076":_ffc =_cca .idiv (stack );
case "\u0069\u0066":_ffc =_cca .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_ffc =_cca .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_ffc =_cca .index (stack );case "\u006c\u0065":_ffc =_cca .le (stack );case "\u006c\u006f\u0067":_ffc =_cca .log (stack );
case "\u006c\u006e":_ffc =_cca .ln (stack );case "\u006c\u0074":_ffc =_cca .lt (stack );case "\u006d\u006f\u0064":_ffc =_cca .mod (stack );case "\u006d\u0075\u006c":_ffc =_cca .mul (stack );case "\u006e\u0065":_ffc =_cca .ne (stack );case "\u006e\u0065\u0067":_ffc =_cca .neg (stack );
case "\u006e\u006f\u0074":_ffc =_cca .not (stack );case "\u006f\u0072":_ffc =_cca .or (stack );case "\u0070\u006f\u0070":_ffc =_cca .pop (stack );case "\u0072\u006f\u0075n\u0064":_ffc =_cca .round (stack );case "\u0072\u006f\u006c\u006c":_ffc =_cca .roll (stack );
case "\u0073\u0069\u006e":_ffc =_cca .sin (stack );case "\u0073\u0071\u0072\u0074":_ffc =_cca .sqrt (stack );case "\u0073\u0075\u0062":_ffc =_cca .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_ffc =_cca .truncate (stack );case "\u0078\u006f\u0072":_ffc =_cca .xor (stack );
};return _ffc ;};func (_def *PSOperand )copy (_gbb *PSStack )error {_gfc ,_egg :=_gbb .PopInteger ();if _egg !=nil {return _egg ;};if _gfc < 0{return ErrRangeCheck ;};if _gfc > len (*_gbb ){return ErrRangeCheck ;};*_gbb =append (*_gbb ,(*_gbb )[len (*_gbb )-_gfc :]...);
return nil ;};func (_ceea *PSReal )String ()string {return _fc .Sprintf ("\u0025\u002e\u0035\u0066",_ceea .Val )};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};const _cc =0.000001;

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_caaf *PSStack )DebugString ()string {_eeg :="\u005b\u0020";for _ ,_gbea :=range *_caaf {_eeg +=_gbea .DebugString ();_eeg +="\u0020";};_eeg +="\u005d";return _eeg ;};var ErrRangeCheck =_a .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_dd *PSOperand )DebugString ()string {return _fc .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_dd );};func (_agd *PSOperand )exch (_feca *PSStack )error {_ded ,_ebcb :=_feca .Pop ();if _ebcb !=nil {return _ebcb ;};_dee ,_ebcb :=_feca .Pop ();
if _ebcb !=nil {return _ebcb ;};_ebcb =_feca .Push (_ded );if _ebcb !=nil {return _ebcb ;};_ebcb =_feca .Push (_dee );return _ebcb ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_ffeg :=PSParser {};_dbf :=_f .NewBuffer (content );_ffeg ._gffe =_fg .NewReader (_dbf );return &_ffeg ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_efd *PSOperand )neg (_ccgc *PSStack )error {_dgd ,_acg :=_ccgc .Pop ();if _acg !=nil {return _acg ;};if _geg ,_ecd :=_dgd .(*PSReal );_ecd {_acg =_ccgc .Push (MakeReal (-_geg .Val ));return _acg ;}else if _cdff ,_efce :=_dgd .(*PSInteger );
_efce {_acg =_ccgc .Push (MakeInteger (-_cdff .Val ));return _acg ;}else {return ErrTypeCheck ;};};func (_cg *PSReal )DebugString ()string {return _fc .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_cg .Val );};func (_ege *PSOperand )ln (_bgc *PSStack )error {_dab ,_gfee :=_bgc .PopNumberAsFloat64 ();
if _gfee !=nil {return _gfee ;};_ffab :=_c .Log (_dab );_gfee =_bgc .Push (MakeReal (_ffab ));return _gfee ;};var ErrUndefinedResult =_a .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");
func (_bfc *PSOperand )ne (_acf *PSStack )error {_cgfb :=_bfc .eq (_acf );if _cgfb !=nil {return _cgfb ;};_cgfb =_bfc .not (_acf );return _cgfb ;};func (_bae *PSOperand )index (_fcab *PSStack )error {_bbb ,_edfd :=_fcab .Pop ();if _edfd !=nil {return _edfd ;
};_fgee ,_gbba :=_bbb .(*PSInteger );if !_gbba {return ErrTypeCheck ;};if _fgee .Val < 0{return ErrRangeCheck ;};if _fgee .Val > len (*_fcab )-1{return ErrStackUnderflow ;};_dfe :=(*_fcab )[len (*_fcab )-1-_fgee .Val ];_edfd =_fcab .Push (_dfe .Duplicate ());
return _edfd ;};func (_eef *PSBoolean )DebugString ()string {return _fc .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_eef .Val );};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ce :=&PSExecutor {};_ce .Stack =NewPSStack ();_ce ._gb =program ;return _ce ;};func (_fdb *PSOperand )log (_abbc *PSStack )error {_dad ,_abed :=_abbc .PopNumberAsFloat64 ();if _abed !=nil {return _abed ;
};_bga :=_c .Log10 (_dad );_abed =_abbc .Push (MakeReal (_bga ));return _abed ;};func (_bgb *PSOperand )floor (_dcg *PSStack )error {_ecea ,_ccaa :=_dcg .Pop ();if _ccaa !=nil {return _ccaa ;};if _gcc ,_gfb :=_ecea .(*PSReal );_gfb {_ccaa =_dcg .Push (MakeReal (_c .Floor (_gcc .Val )));
}else if _gdg ,_agda :=_ecea .(*PSInteger );_agda {_ccaa =_dcg .Push (MakeInteger (_gdg .Val ));}else {return ErrTypeCheck ;};return _ccaa ;};func (_cggc *PSOperand )atan (_bdb *PSStack )error {_ebf ,_ebdd :=_bdb .PopNumberAsFloat64 ();if _ebdd !=nil {return _ebdd ;
};_aece ,_ebdd :=_bdb .PopNumberAsFloat64 ();if _ebdd !=nil {return _ebdd ;};if _ebf ==0{var _bbe error ;if _aece < 0{_bbe =_bdb .Push (MakeReal (270));}else {_bbe =_bdb .Push (MakeReal (90));};return _bbe ;};_gba :=_aece /_ebf ;_edb :=_c .Atan (_gba )*180/_c .Pi ;
_ebdd =_bdb .Push (MakeReal (_edb ));return _ebdd ;};

// Append appends an object to the PSProgram.
func (_de *PSProgram )Append (obj PSObject ){*_de =append (*_de ,obj )};func (_fag *PSOperand )pop (_bbea *PSStack )error {_ ,_bcec :=_bbea .Pop ();if _bcec !=nil {return _bcec ;};return nil ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_aea :=PSInteger {};_aea .Val =val ;return &_aea };

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_bcc *PSOperand )sqrt (_abfe *PSStack )error {_cafa ,_ecdf :=_abfe .PopNumberAsFloat64 ();if _ecdf !=nil {return _ecdf ;};if _cafa < 0{return ErrRangeCheck ;};_bgfg :=_c .Sqrt (_cafa );_ecdf =_abfe .Push (MakeReal (_bgfg ));
return _ecdf ;};func (_gbcff *PSOperand )round (_gegb *PSStack )error {_decc ,_ggfd :=_gegb .Pop ();if _ggfd !=nil {return _ggfd ;};if _gff ,_cabc :=_decc .(*PSReal );_cabc {_ggfd =_gegb .Push (MakeReal (_c .Floor (_gff .Val +0.5)));}else if _fbe ,_gbbd :=_decc .(*PSInteger );
_gbbd {_ggfd =_gegb .Push (MakeInteger (_fbe .Val ));}else {return ErrTypeCheck ;};return _ggfd ;};func (_df *PSOperand )bitshift (_ffcf *PSStack )error {_ddc ,_adg :=_ffcf .PopInteger ();if _adg !=nil {return _adg ;};_bedc ,_adg :=_ffcf .PopInteger ();
if _adg !=nil {return _adg ;};var _decd int ;if _ddc >=0{_decd =_bedc <<uint (_ddc );}else {_decd =_bedc >>uint (-_ddc );};_adg =_ffcf .Push (MakeInteger (_decd ));return _adg ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_faag :=PSBoolean {};_faag .Val =val ;return &_faag };

// String returns a string representation of the stack.
func (_daa *PSStack )String ()string {_dga :="\u005b\u0020";for _ ,_babg :=range *_daa {_dga +=_babg .String ();_dga +="\u0020";};_dga +="\u005d";return _dga ;};func (_ebd *PSReal )Duplicate ()PSObject {_db :=PSReal {};_db .Val =_ebd .Val ;return &_db };
func (_fddc *PSOperand )eq (_bbc *PSStack )error {_fca ,_gbe :=_bbc .Pop ();if _gbe !=nil {return _gbe ;};_dgg ,_gbe :=_bbc .Pop ();if _gbe !=nil {return _gbe ;};_gfd ,_dfc :=_fca .(*PSBoolean );_gec ,_dcd :=_dgg .(*PSBoolean );if _dfc ||_dcd {var _cabf error ;
if _dfc &&_dcd {_cabf =_bbc .Push (MakeBool (_gfd .Val ==_gec .Val ));}else {_cabf =_bbc .Push (MakeBool (false ));};return _cabf ;};var _abc float64 ;var _gfdb float64 ;if _bad ,_acd :=_fca .(*PSInteger );_acd {_abc =float64 (_bad .Val );}else if _ccb ,_gceg :=_fca .(*PSReal );
_gceg {_abc =_ccb .Val ;}else {return ErrTypeCheck ;};if _cece ,_fbg :=_dgg .(*PSInteger );_fbg {_gfdb =float64 (_cece .Val );}else if _bf ,_cfe :=_dgg .(*PSReal );_cfe {_gfdb =_bf .Val ;}else {return ErrTypeCheck ;};if _c .Abs (_gfdb -_abc )< _cc {_gbe =_bbc .Push (MakeBool (true ));
}else {_gbe =_bbc .Push (MakeBool (false ));};return _gbe ;};func (_dgdd *PSOperand )roll (_gbcd *PSStack )error {_cccg ,_fddb :=_gbcd .Pop ();if _fddb !=nil {return _fddb ;};_dafc ,_fddb :=_gbcd .Pop ();if _fddb !=nil {return _fddb ;};_gbed ,_fegc :=_cccg .(*PSInteger );
if !_fegc {return ErrTypeCheck ;};_cbga ,_fegc :=_dafc .(*PSInteger );if !_fegc {return ErrTypeCheck ;};if _cbga .Val < 0{return ErrRangeCheck ;};if _cbga .Val ==0||_cbga .Val ==1{return nil ;};if _cbga .Val > len (*_gbcd ){return ErrStackUnderflow ;};
for _ddf :=0;_ddf < _gdb (_gbed .Val );_ddf ++{var _dce []PSObject ;_dce =(*_gbcd )[len (*_gbcd )-(_cbga .Val ):len (*_gbcd )];if _gbed .Val > 0{_dbc :=_dce [len (_dce )-1];_dce =append ([]PSObject {_dbc },_dce [0:len (_dce )-1]...);}else {_cfb :=_dce [len (_dce )-_cbga .Val ];
_dce =append (_dce [1:],_cfb );};_gee :=append ((*_gbcd )[0:len (*_gbcd )-_cbga .Val ],_dce ...);_gbcd =&_gee ;};return nil ;};func (_fgg *PSOperand )le (_gfe *PSStack )error {_bgf ,_bbbf :=_gfe .PopNumberAsFloat64 ();if _bbbf !=nil {return _bbbf ;};_dgc ,_bbbf :=_gfe .PopNumberAsFloat64 ();
if _bbbf !=nil {return _bbbf ;};if _c .Abs (_dgc -_bgf )< _cc {_cgd :=_gfe .Push (MakeBool (true ));return _cgd ;}else if _dgc < _bgf {_efe :=_gfe .Push (MakeBool (true ));return _efe ;}else {_fed :=_gfe .Push (MakeBool (false ));return _fed ;};};func (_ede *PSOperand )sin (_abf *PSStack )error {_age ,_acc :=_abf .PopNumberAsFloat64 ();
if _acc !=nil {return _acc ;};_dbec :=_c .Sin (_age *_c .Pi /180.0);_acc =_abf .Push (MakeReal (_dbec ));return _acc ;};func (_add *PSOperand )gt (_bfb *PSStack )error {_ada ,_ddcg :=_bfb .PopNumberAsFloat64 ();if _ddcg !=nil {return _ddcg ;};_adcc ,_ddcg :=_bfb .PopNumberAsFloat64 ();
if _ddcg !=nil {return _ddcg ;};if _c .Abs (_adcc -_ada )< _cc {_bdfc :=_bfb .Push (MakeBool (false ));return _bdfc ;}else if _adcc > _ada {_ebb :=_bfb .Push (MakeBool (true ));return _ebb ;}else {_aad :=_bfb .Push (MakeBool (false ));return _aad ;};};
func (_gaf *PSOperand )not (_ffcfe *PSStack )error {_eba ,_gae :=_ffcfe .Pop ();if _gae !=nil {return _gae ;};if _cef ,_bbca :=_eba .(*PSBoolean );_bbca {_gae =_ffcfe .Push (MakeBool (!_cef .Val ));return _gae ;}else if _caaa ,_dca :=_eba .(*PSInteger );
_dca {_gae =_ffcfe .Push (MakeInteger (^_caaa .Val ));return _gae ;}else {return ErrTypeCheck ;};};func (_dbg *PSOperand )and (_dbd *PSStack )error {_bed ,_bcac :=_dbd .Pop ();if _bcac !=nil {return _bcac ;};_adf ,_bcac :=_dbd .Pop ();if _bcac !=nil {return _bcac ;
};if _gg ,_ggf :=_bed .(*PSBoolean );_ggf {_edc ,_bea :=_adf .(*PSBoolean );if !_bea {return ErrTypeCheck ;};_bcac =_dbd .Push (MakeBool (_gg .Val &&_edc .Val ));return _bcac ;};if _ecg ,_efc :=_bed .(*PSInteger );_efc {_ced ,_fcc :=_adf .(*PSInteger );
if !_fcc {return ErrTypeCheck ;};_bcac =_dbd .Push (MakeInteger (_ecg .Val &_ced .Val ));return _bcac ;};return ErrTypeCheck ;};func (_cd *PSBoolean )Duplicate ()PSObject {_cec :=PSBoolean {};_cec .Val =_cd .Val ;return &_cec };var ErrStackUnderflow =_a .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");
var ErrTypeCheck =_a .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_begb *PSOperand )truncate (_cbge *PSStack )error {_dff ,_gaa :=_cbge .Pop ();if _gaa !=nil {return _gaa ;};if _caga ,_badf :=_dff .(*PSReal );
_badf {_bgba :=int (_caga .Val );_gaa =_cbge .Push (MakeReal (float64 (_bgba )));}else if _fgc ,_gaef :=_dff .(*PSInteger );_gaef {_gaa =_cbge .Push (MakeInteger (_fgc .Val ));}else {return ErrTypeCheck ;};return _gaa ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_dcbe *PSParser )parseBool ()(*PSBoolean ,error ){_ffcff ,_bbeg :=_dcbe ._gffe .Peek (4);if _bbeg !=nil {return MakeBool (false ),_bbeg ;};if (len (_ffcff )>=4)&&(string (_ffcff [:4])=="\u0074\u0072\u0075\u0065"){_dcbe ._gffe .Discard (4);
return MakeBool (true ),nil ;};_ffcff ,_bbeg =_dcbe ._gffe .Peek (5);if _bbeg !=nil {return MakeBool (false ),_bbeg ;};if (len (_ffcff )>=5)&&(string (_ffcff [:5])=="\u0066\u0061\u006cs\u0065"){_dcbe ._gffe .Discard (5);return MakeBool (false ),nil ;};
return MakeBool (false ),_a .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ae *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_ee :=range objects {_ea :=_ae .Stack .Push (_ee );if _ea !=nil {return nil ,_ea ;};};_ge :=_ae ._gb .Exec (_ae .Stack );if _ge !=nil {_fce .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ge );
return nil ,_ge ;};_fcec :=[]PSObject (*_ae .Stack );_ae .Stack .Empty ();return _fcec ,nil ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_eff :=PSReal {};_eff .Val =val ;return &_eff };func (_cf *PSOperand )cos (_da *PSStack )error {_daf ,_dac :=_da .PopNumberAsFloat64 ();if _dac !=nil {return _dac ;};_fdd :=_c .Cos (_daf *_c .Pi /180.0);_dac =_da .Push (MakeReal (_fdd ));
return _dac ;};func (_ed *PSProgram )String ()string {_fe :="\u007b\u0020";for _ ,_ef :=range *_ed {_fe +=_ef .String ();_fe +="\u0020";};_fe +="\u007d";return _fe ;};

// Parse parses the postscript and store as a program that can be executed.
func (_bef *PSParser )Parse ()(*PSProgram ,error ){_bef .skipSpaces ();_aga ,_eac :=_bef ._gffe .Peek (2);if _eac !=nil {return nil ,_eac ;};if _aga [0]!='{'{return nil ,_a .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_dafcf ,_eac :=_bef .parseFunction ();if _eac !=nil &&_eac !=_ab .EOF {return nil ,_eac ;};return _dafcf ,_eac ;};func (_fb *PSOperand )Duplicate ()PSObject {_bca :=*_fb ;return &_bca };var ErrStackOverflow =_a .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");


// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_aagg *PSStack )PopInteger ()(int ,error ){_dabg ,_dacf :=_aagg .Pop ();if _dacf !=nil {return 0,_dacf ;};if _baea ,_gcd :=_dabg .(*PSInteger );_gcd {return _baea .Val ,nil ;};return 0,ErrTypeCheck ;};func (_aag *PSParser )parseNumber ()(PSObject ,error ){_aeec ,_bab :=_abb .ParseNumber (_aag ._gffe );
if _bab !=nil {return nil ,_bab ;};switch _aeef :=_aeec .(type ){case *_abb .PdfObjectFloat :return MakeReal (float64 (*_aeef )),nil ;case *_abb .PdfObjectInteger :return MakeInteger (int (*_aeef )),nil ;};return nil ,_fc .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_aeec );
};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// Exec executes the program, typically leaving output values on the stack.
func (_eea *PSProgram )Exec (stack *PSStack )error {for _ ,_edg :=range *_eea {var _fa error ;switch _ff :=_edg .(type ){case *PSInteger :_ad :=_ff ;_fa =stack .Push (_ad );case *PSReal :_gef :=_ff ;_fa =stack .Push (_gef );case *PSBoolean :_aff :=_ff ;
_fa =stack .Push (_aff );case *PSProgram :_cgc :=_ff ;_fa =stack .Push (_cgc );case *PSOperand :_cdf :=_ff ;_fa =_cdf .Exec (stack );default:return ErrTypeCheck ;};if _fa !=nil {return _fa ;};};return nil ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_gb *PSProgram ;};func (_ecc *PSParser )skipSpaces ()(int ,error ){_bbf :=0;for {_fbgd ,_eeb :=_ecc ._gffe .Peek (1);if _eeb !=nil {return 0,_eeb ;};if _abb .IsWhiteSpace (_fbgd [0]){_ecc ._gffe .ReadByte ();_bbf ++;
}else {break ;};};return _bbf ,nil ;};func (_ece *PSOperand )dup (_cgf *PSStack )error {_afb ,_gbbg :=_cgf .Pop ();if _gbbg !=nil {return _gbbg ;};_gbbg =_cgf .Push (_afb );if _gbbg !=nil {return _gbbg ;};_gbbg =_cgf .Push (_afb .Duplicate ());return _gbbg ;
};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func _gdb (_cfba int )int {if _cfba < 0{return -_cfba ;};return _cfba ;};

// Empty empties the stack.
func (_dde *PSStack )Empty (){*_dde =[]PSObject {}};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_fbc *PSOperand )add (_fac *PSStack )error {_cgg ,_ffb :=_fac .Pop ();if _ffb !=nil {return _ffb ;};_afe ,_ffb :=_fac .Pop ();if _ffb !=nil {return _ffb ;};_cab ,_ec :=_cgg .(*PSReal );_bg ,_eag :=_cgg .(*PSInteger );
if !_ec &&!_eag {return ErrTypeCheck ;};_ffba ,_baf :=_afe .(*PSReal );_ffg ,_cgcf :=_afe .(*PSInteger );if !_baf &&!_cgcf {return ErrTypeCheck ;};if _eag &&_cgcf {_bce :=_bg .Val +_ffg .Val ;_deg :=_fac .Push (MakeInteger (_bce ));return _deg ;};var _caf float64 ;
if _ec {_caf =_cab .Val ;}else {_caf =float64 (_bg .Val );};if _baf {_caf +=_ffba .Val ;}else {_caf +=float64 (_ffg .Val );};_ffb =_fac .Push (MakeReal (_caf ));return _ffb ;};func (_feg *PSOperand )or (_dfdf *PSStack )error {_eee ,_cgde :=_dfdf .Pop ();
if _cgde !=nil {return _cgde ;};_cbe ,_cgde :=_dfdf .Pop ();if _cgde !=nil {return _cgde ;};if _bgad ,_dacb :=_eee .(*PSBoolean );_dacb {_gcg ,_dgb :=_cbe .(*PSBoolean );if !_dgb {return ErrTypeCheck ;};_cgde =_dfdf .Push (MakeBool (_bgad .Val ||_gcg .Val ));
return _cgde ;};if _dcb ,_gbab :=_eee .(*PSInteger );_gbab {_ebbc ,_ffd :=_cbe .(*PSInteger );if !_ffd {return ErrTypeCheck ;};_cgde =_dfdf .Push (MakeInteger (_dcb .Val |_ebbc .Val ));return _cgde ;};return ErrTypeCheck ;};func (_ade *PSParser )parseFunction ()(*PSProgram ,error ){_eeaa ,_ :=_ade ._gffe .ReadByte ();
if _eeaa !='{'{return nil ,_a .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_ace :=NewPSProgram ();for {_ade .skipSpaces ();_fdbc ,_ebeb :=_ade ._gffe .Peek (2);if _ebeb !=nil {if _ebeb ==_ab .EOF {break ;
};return nil ,_ebeb ;};_fce .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fdbc ));if _fdbc [0]=='}'{_fce .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_ade ._gffe .ReadByte ();
break ;}else if _fdbc [0]=='{'{_fce .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_acge ,_fbfa :=_ade .parseFunction ();if _fbfa !=nil {return nil ,_fbfa ;};_ace .Append (_acge );}else if _abb .IsDecimalDigit (_fdbc [0])||(_fdbc [0]=='-'&&_abb .IsDecimalDigit (_fdbc [1])){_fce .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_ccfb ,_gegd :=_ade .parseNumber ();if _gegd !=nil {return nil ,_gegd ;};_ace .Append (_ccfb );}else {_fce .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_fdbc ,_ =_ade ._gffe .Peek (5);_gfg :=string (_fdbc );
_fce .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gfg );if (len (_gfg )> 4)&&(_gfg [:5]=="\u0066\u0061\u006cs\u0065"){_cggca ,_edfc :=_ade .parseBool ();if _edfc !=nil {return nil ,_edfc ;};_ace .Append (_cggca );
}else if (len (_gfg )> 3)&&(_gfg [:4]=="\u0074\u0072\u0075\u0065"){_abcc ,_fgdg :=_ade .parseBool ();if _fgdg !=nil {return nil ,_fgdg ;};_ace .Append (_abcc );}else {_edgg ,_eagg :=_ade .parseOperand ();if _eagg !=nil {return nil ,_eagg ;};_ace .Append (_edgg );
};};};return _ace ,nil ;};func (_dag *PSOperand )idiv (_ddd *PSStack )error {_edfb ,_gbc :=_ddd .Pop ();if _gbc !=nil {return _gbc ;};_adce ,_gbc :=_ddd .Pop ();if _gbc !=nil {return _gbc ;};_eefb ,_adfe :=_edfb .(*PSInteger );if !_adfe {return ErrTypeCheck ;
};if _eefb .Val ==0{return ErrUndefinedResult ;};_abd ,_adfe :=_adce .(*PSInteger );if !_adfe {return ErrTypeCheck ;};_dbgg :=_abd .Val /_eefb .Val ;_gbc =_ddd .Push (MakeInteger (_dbgg ));return _gbc ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bdg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_egb ,_aegc :=_bdg .Pop ();if _aegc !=nil {return 0,_aegc ;};if _eceaf ,_bgbb :=_egb .(*PSReal );_bgbb {return _eceaf .Val ,nil ;}else if _aegg ,_dda :=_egb .(*PSInteger );_dda {return float64 (_aegg .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_bcdf *PSOperand )ifCondition (_beg *PSStack )error {_fdf ,_aee :=_beg .Pop ();if _aee !=nil {return _aee ;};_cfg ,_aee :=_beg .Pop ();if _aee !=nil {return _aee ;};_cggg ,_dcfe :=_fdf .(*PSProgram );if !_dcfe {return ErrTypeCheck ;
};_ddg ,_dcfe :=_cfg .(*PSBoolean );if !_dcfe {return ErrTypeCheck ;};if _ddg .Val {_cbd :=_cggg .Exec (_beg );return _cbd ;};return nil ;};func (_dc *PSOperand )abs (_fee *PSStack )error {_aec ,_aeb :=_fee .Pop ();if _aeb !=nil {return _aeb ;};if _be ,_dgf :=_aec .(*PSReal );
_dgf {_fbf :=_be .Val ;if _fbf < 0{_aeb =_fee .Push (MakeReal (-_fbf ));}else {_aeb =_fee .Push (MakeReal (_fbf ));};}else if _dec ,_ffe :=_aec .(*PSInteger );_ffe {_adc :=_dec .Val ;if _adc < 0{_aeb =_fee .Push (MakeInteger (-_adc ));}else {_aeb =_fee .Push (MakeInteger (_adc ));
};}else {return ErrTypeCheck ;};return _aeb ;};func (_fd *PSInteger )String ()string {return _fc .Sprintf ("\u0025\u0064",_fd .Val )};func (_cdc *PSOperand )mul (_dccd *PSStack )error {_efeg ,_faa :=_dccd .Pop ();if _faa !=nil {return _faa ;};_ceed ,_faa :=_dccd .Pop ();
if _faa !=nil {return _faa ;};_deca ,_fab :=_efeg .(*PSReal );_gbaa ,_ggc :=_efeg .(*PSInteger );if !_fab &&!_ggc {return ErrTypeCheck ;};_agg ,_ddgd :=_ceed .(*PSReal );_dddd ,_gcb :=_ceed .(*PSInteger );if !_ddgd &&!_gcb {return ErrTypeCheck ;};if _ggc &&_gcb {_cag :=_gbaa .Val *_dddd .Val ;
_caa :=_dccd .Push (MakeInteger (_cag ));return _caa ;};var _fcd float64 ;if _fab {_fcd =_deca .Val ;}else {_fcd =float64 (_gbaa .Val );};if _ddgd {_fcd *=_agg .Val ;}else {_fcd *=float64 (_dddd .Val );};_faa =_dccd .Push (MakeReal (_fcd ));return _faa ;
};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _e []float64 ;for _ ,_eb :=range objects {if _ccf ,_gbf :=_eb .(*PSInteger );_gbf {_e =append (_e ,float64 (_ccf .Val ));}else if _cee ,_d :=_eb .(*PSReal );_d {_e =append (_e ,_cee .Val );
}else {return nil ,ErrTypeCheck ;};};return _e ,nil ;};

// Pop pops an object from the top of the stack.
func (_beb *PSStack )Pop ()(PSObject ,error ){if len (*_beb )< 1{return nil ,ErrStackUnderflow ;};_gcce :=(*_beb )[len (*_beb )-1];*_beb =(*_beb )[0:len (*_beb )-1];return _gcce ,nil ;};func (_ba *PSOperand )String ()string {return string (*_ba )};func (_bd *PSInteger )Duplicate ()PSObject {_bb :=PSInteger {};
_bb .Val =_bd .Val ;return &_bb };func (_feea *PSOperand )lt (_cadd *PSStack )error {_dfg ,_ffga :=_cadd .PopNumberAsFloat64 ();if _ffga !=nil {return _ffga ;};_afc ,_ffga :=_cadd .PopNumberAsFloat64 ();if _ffga !=nil {return _ffga ;};if _c .Abs (_afc -_dfg )< _cc {_afbb :=_cadd .Push (MakeBool (false ));
return _afbb ;}else if _afc < _dfg {_fad :=_cadd .Push (MakeBool (true ));return _fad ;}else {_cge :=_cadd .Push (MakeBool (false ));return _cge ;};};var ErrUnsupportedOperand =_a .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
func (_cb *PSOperand )exp (_eec *PSStack )error {_cgcc ,_eaa :=_eec .PopNumberAsFloat64 ();if _eaa !=nil {return _eaa ;};_fgd ,_eaa :=_eec .PopNumberAsFloat64 ();if _eaa !=nil {return _eaa ;};if _c .Abs (_cgcc )< 1&&_fgd < 0{return ErrUndefinedResult ;
};_cdfb :=_c .Pow (_fgd ,_cgcc );_eaa =_eec .Push (MakeReal (_cdfb ));return _eaa ;};func (_aed *PSOperand )ceiling (_fcg *PSStack )error {_affb ,_ccc :=_fcg .Pop ();if _ccc !=nil {return _ccc ;};if _ag ,_cac :=_affb .(*PSReal );_cac {_ccc =_fcg .Push (MakeReal (_c .Ceil (_ag .Val )));
}else if _ebc ,_afff :=_affb .(*PSInteger );_afff {_ccc =_fcg .Push (MakeInteger (_ebc .Val ));}else {_ccc =ErrTypeCheck ;};return _ccc ;};func (_bec *PSOperand )ifelse (_gbcf *PSStack )error {_bdc ,_cbg :=_gbcf .Pop ();if _cbg !=nil {return _cbg ;};_fgde ,_cbg :=_gbcf .Pop ();
if _cbg !=nil {return _cbg ;};_faf ,_cbg :=_gbcf .Pop ();if _cbg !=nil {return _cbg ;};_egc ,_gde :=_bdc .(*PSProgram );if !_gde {return ErrTypeCheck ;};_dbb ,_gde :=_fgde .(*PSProgram );if !_gde {return ErrTypeCheck ;};_ccg ,_gde :=_faf .(*PSBoolean );
if !_gde {return ErrTypeCheck ;};if _ccg .Val {_eddd :=_dbb .Exec (_gbcf );return _eddd ;};_cbg =_egc .Exec (_gbcf );return _cbg ;};func (_dfd *PSOperand )div (_deb *PSStack )error {_gfa ,_bdf :=_deb .Pop ();if _bdf !=nil {return _bdf ;};_bbd ,_bdf :=_deb .Pop ();
if _bdf !=nil {return _bdf ;};_dcf ,_gc :=_gfa .(*PSReal );_aa ,_ggfa :=_gfa .(*PSInteger );if !_gc &&!_ggfa {return ErrTypeCheck ;};if _gc &&_dcf .Val ==0{return ErrUndefinedResult ;};if _ggfa &&_aa .Val ==0{return ErrUndefinedResult ;};_cad ,_gce :=_bbd .(*PSReal );
_edd ,_dbe :=_bbd .(*PSInteger );if !_gce &&!_dbe {return ErrTypeCheck ;};var _gaba float64 ;if _gce {_gaba =_cad .Val ;}else {_gaba =float64 (_edd .Val );};if _gc {_gaba /=_dcf .Val ;}else {_gaba /=float64 (_aa .Val );};_bdf =_deb .Push (MakeReal (_gaba ));
return _bdf ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_efg :=PSOperand (val );return &_efg };func (_cagf *PSOperand )sub (_agdaf *PSStack )error {_cggd ,_debf :=_agdaf .Pop ();if _debf !=nil {return _debf ;};_gea ,_debf :=_agdaf .Pop ();if _debf !=nil {return _debf ;
};_becf ,_afeb :=_cggd .(*PSReal );_efcc ,_adae :=_cggd .(*PSInteger );if !_afeb &&!_adae {return ErrTypeCheck ;};_bcae ,_fae :=_gea .(*PSReal );_ebab ,_ebe :=_gea .(*PSInteger );if !_fae &&!_ebe {return ErrTypeCheck ;};if _adae &&_ebe {_agc :=_ebab .Val -_efcc .Val ;
_cfa :=_agdaf .Push (MakeInteger (_agc ));return _cfa ;};var _cabe float64 =0;if _fae {_cabe =_bcae .Val ;}else {_cabe =float64 (_ebab .Val );};if _afeb {_cabe -=_becf .Val ;}else {_cabe -=float64 (_efcc .Val );};_debf =_agdaf .Push (MakeReal (_cabe ));
return _debf ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_af *PSBoolean )String ()string {return _fc .Sprintf ("\u0025\u0076",_af .Val )};

// PSParser is a basic Postscript parser.
type PSParser struct{_gffe *_fg .Reader };