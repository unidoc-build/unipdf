//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_d "bufio";_a "bytes";_g "errors";_df "fmt";_gc "github.com/unidoc/unipdf/v3/common";_ea "github.com/unidoc/unipdf/v3/core";_c "io";_ad "math";);

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_bagg *PSOperand )eq (_bdd *PSStack )error {_gec ,_cfb :=_bdd .Pop ();if _cfb !=nil {return _cfb ;};_fa ,_cfb :=_bdd .Pop ();if _cfb !=nil {return _cfb ;};_adce ,_bedc :=_gec .(*PSBoolean );_bgb ,_gecf :=_fa .(*PSBoolean );if _bedc ||_gecf {var _dad error ;
if _bedc &&_gecf {_dad =_bdd .Push (MakeBool (_adce .Val ==_bgb .Val ));}else {_dad =_bdd .Push (MakeBool (false ));};return _dad ;};var _fag float64 ;var _efe float64 ;if _abe ,_ecf :=_gec .(*PSInteger );_ecf {_fag =float64 (_abe .Val );}else if _bac ,_ggg :=_gec .(*PSReal );
_ggg {_fag =_bac .Val ;}else {return ErrTypeCheck ;};if _afa ,_acg :=_fa .(*PSInteger );_acg {_efe =float64 (_afa .Val );}else if _egg ,_afe :=_fa .(*PSReal );_afe {_efe =_egg .Val ;}else {return ErrTypeCheck ;};if _ad .Abs (_efe -_fag )< _dfc {_cfb =_bdd .Push (MakeBool (true ));
}else {_cfb =_bdd .Push (MakeBool (false ));};return _cfb ;};func (_ebbb *PSOperand )roll (_adcd *PSStack )error {_abcc ,_ggf :=_adcd .Pop ();if _ggf !=nil {return _ggf ;};_bdf ,_ggf :=_adcd .Pop ();if _ggf !=nil {return _ggf ;};_cgfe ,_dfeg :=_abcc .(*PSInteger );
if !_dfeg {return ErrTypeCheck ;};_befa ,_dfeg :=_bdf .(*PSInteger );if !_dfeg {return ErrTypeCheck ;};if _befa .Val < 0{return ErrRangeCheck ;};if _befa .Val ==0||_befa .Val ==1{return nil ;};if _befa .Val > len (*_adcd ){return ErrStackUnderflow ;};for _egbc :=0;
_egbc < _eaef (_cgfe .Val );_egbc ++{var _bbfe []PSObject ;_bbfe =(*_adcd )[len (*_adcd )-(_befa .Val ):len (*_adcd )];if _cgfe .Val > 0{_gaae :=_bbfe [len (_bbfe )-1];_bbfe =append ([]PSObject {_gaae },_bbfe [0:len (_bbfe )-1]...);}else {_gbee :=_bbfe [len (_bbfe )-_befa .Val ];
_bbfe =append (_bbfe [1:],_gbee );};_bda :=append ((*_adcd )[0:len (*_adcd )-_befa .Val ],_bbfe ...);_adcd =&_bda ;};return nil ;};func (_fed *PSOperand )not (_eeba *PSStack )error {_begb ,_dgfd :=_eeba .Pop ();if _dgfd !=nil {return _dgfd ;};if _fcb ,_dde :=_begb .(*PSBoolean );
_dde {_dgfd =_eeba .Push (MakeBool (!_fcb .Val ));return _dgfd ;}else if _ecg ,_fcbc :=_begb .(*PSInteger );_fcbc {_dgfd =_eeba .Push (MakeInteger (^_ecg .Val ));return _dgfd ;}else {return ErrTypeCheck ;};};func (_fgf *PSOperand )truncate (_dfa *PSStack )error {_eade ,_ege :=_dfa .Pop ();
if _ege !=nil {return _ege ;};if _ffba ,_eabb :=_eade .(*PSReal );_eabb {_geef :=int (_ffba .Val );_ege =_dfa .Push (MakeReal (float64 (_geef )));}else if _abb ,_ggc :=_eade .(*PSInteger );_ggc {_ege =_dfa .Push (MakeInteger (_abb .Val ));}else {return ErrTypeCheck ;
};return _ege ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_cgfa :=PSParser {};_dbbg :=_a .NewBuffer (content );_cgfa ._gffb =_d .NewReader (_dbbg );return &_cgfa ;};func _eaef (_fgda int )int {if _fgda < 0{return -_fgda ;};return _fgda ;};func (_eabe *PSOperand )String ()string {return string (*_eabe )};


// Exec executes the operand `op` in the state specified by `stack`.
func (_ffe *PSOperand )Exec (stack *PSStack )error {_dff :=ErrUnsupportedOperand ;switch *_ffe {case "\u0061\u0062\u0073":_dff =_ffe .abs (stack );case "\u0061\u0064\u0064":_dff =_ffe .add (stack );case "\u0061\u006e\u0064":_dff =_ffe .and (stack );case "\u0061\u0074\u0061\u006e":_dff =_ffe .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_dff =_ffe .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_dff =_ffe .ceiling (stack );case "\u0063\u006f\u0070\u0079":_dff =_ffe .copy (stack );case "\u0063\u006f\u0073":_dff =_ffe .cos (stack );
case "\u0063\u0076\u0069":_dff =_ffe .cvi (stack );case "\u0063\u0076\u0072":_dff =_ffe .cvr (stack );case "\u0064\u0069\u0076":_dff =_ffe .div (stack );case "\u0064\u0075\u0070":_dff =_ffe .dup (stack );case "\u0065\u0071":_dff =_ffe .eq (stack );case "\u0065\u0078\u0063\u0068":_dff =_ffe .exch (stack );
case "\u0065\u0078\u0070":_dff =_ffe .exp (stack );case "\u0066\u006c\u006fo\u0072":_dff =_ffe .floor (stack );case "\u0067\u0065":_dff =_ffe .ge (stack );case "\u0067\u0074":_dff =_ffe .gt (stack );case "\u0069\u0064\u0069\u0076":_dff =_ffe .idiv (stack );
case "\u0069\u0066":_dff =_ffe .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_dff =_ffe .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_dff =_ffe .index (stack );case "\u006c\u0065":_dff =_ffe .le (stack );case "\u006c\u006f\u0067":_dff =_ffe .log (stack );
case "\u006c\u006e":_dff =_ffe .ln (stack );case "\u006c\u0074":_dff =_ffe .lt (stack );case "\u006d\u006f\u0064":_dff =_ffe .mod (stack );case "\u006d\u0075\u006c":_dff =_ffe .mul (stack );case "\u006e\u0065":_dff =_ffe .ne (stack );case "\u006e\u0065\u0067":_dff =_ffe .neg (stack );
case "\u006e\u006f\u0074":_dff =_ffe .not (stack );case "\u006f\u0072":_dff =_ffe .or (stack );case "\u0070\u006f\u0070":_dff =_ffe .pop (stack );case "\u0072\u006f\u0075n\u0064":_dff =_ffe .round (stack );case "\u0072\u006f\u006c\u006c":_dff =_ffe .roll (stack );
case "\u0073\u0069\u006e":_dff =_ffe .sin (stack );case "\u0073\u0071\u0072\u0074":_dff =_ffe .sqrt (stack );case "\u0073\u0075\u0062":_dff =_ffe .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_dff =_ffe .truncate (stack );case "\u0078\u006f\u0072":_dff =_ffe .xor (stack );
};return _dff ;};func (_dgb *PSOperand )copy (_ffa *PSStack )error {_ffad ,_gebe :=_ffa .PopInteger ();if _gebe !=nil {return _gebe ;};if _ffad < 0{return ErrRangeCheck ;};if _ffad > len (*_ffa ){return ErrRangeCheck ;};*_ffa =append (*_ffa ,(*_ffa )[len (*_ffa )-_ffad :]...);
return nil ;};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_ecb *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_bfcd ,_aebd :=_ecb .Pop ();if _aebd !=nil {return 0,_aebd ;};if _efd ,_dgbe :=_bfcd .(*PSReal );_dgbe {return _efd .Val ,nil ;}else if _dgga ,_fdg :=_bfcd .(*PSInteger );_fdg {return float64 (_dgga .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_gbec *PSOperand )exp (_abcb *PSStack )error {_add ,_adg :=_abcb .PopNumberAsFloat64 ();if _adg !=nil {return _adg ;};_bb ,_adg :=_abcb .PopNumberAsFloat64 ();if _adg !=nil {return _adg ;};if _ad .Abs (_add )< 1&&_bb < 0{return ErrUndefinedResult ;
};_ebce :=_ad .Pow (_bb ,_add );_adg =_abcb .Push (MakeReal (_ebce ));return _adg ;};

// Push pushes an object on top of the stack.
func (_defe *PSStack )Push (obj PSObject )error {if len (*_defe )> 100{return ErrStackOverflow ;};*_defe =append (*_defe ,obj );return nil ;};var ErrStackOverflow =_g .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");
func (_dafe *PSOperand )bitshift (_cag *PSStack )error {_aaa ,_acc :=_cag .PopInteger ();if _acc !=nil {return _acc ;};_fcf ,_acc :=_cag .PopInteger ();if _acc !=nil {return _acc ;};var _dge int ;if _aaa >=0{_dge =_fcf <<uint (_aaa );}else {_dge =_fcf >>uint (-_aaa );
};_acc =_cag .Push (MakeInteger (_dge ));return _acc ;};var ErrTypeCheck =_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_afga *PSOperand )ln (_debf *PSStack )error {_bdgf ,_bdb :=_debf .PopNumberAsFloat64 ();
if _bdb !=nil {return _bdb ;};_bbg :=_ad .Log (_bdgf );_bdb =_debf .Push (MakeReal (_bbg ));return _bdb ;};func (_be *PSReal )DebugString ()string {return _df .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_be .Val );};func (_aaf *PSOperand )neg (_aed *PSStack )error {_cgf ,_eeee :=_aed .Pop ();
if _eeee !=nil {return _eeee ;};if _cfe ,_gbbc :=_cgf .(*PSReal );_gbbc {_eeee =_aed .Push (MakeReal (-_cfe .Val ));return _eeee ;}else if _dec ,_fcfa :=_cgf .(*PSInteger );_fcfa {_eeee =_aed .Push (MakeInteger (-_dec .Val ));return _eeee ;}else {return ErrTypeCheck ;
};};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_aggc *PSStack )PopInteger ()(int ,error ){_fcgg ,_aedd :=_aggc .Pop ();if _aedd !=nil {return 0,_aedd ;};if _dadbb ,_bfe :=_fcgg .(*PSInteger );_bfe {return _dadbb .Val ,nil ;};return 0,ErrTypeCheck ;};func (_gd *PSProgram )DebugString ()string {_de :="\u007b\u0020";
for _ ,_aae :=range *_gd {_de +=_aae .DebugString ();_de +="\u0020";};_de +="\u007d";return _de ;};func (_cb *PSReal )String ()string {return _df .Sprintf ("\u0025\u002e\u0035\u0066",_cb .Val )};func (_dbf *PSOperand )cvr (_eba *PSStack )error {_eeb ,_bf :=_eba .Pop ();
if _bf !=nil {return _bf ;};if _cge ,_cea :=_eeb .(*PSReal );_cea {_bf =_eba .Push (MakeReal (_cge .Val ));}else if _daa ,_fgd :=_eeb .(*PSInteger );_fgd {_bf =_eba .Push (MakeReal (float64 (_daa .Val )));}else {return ErrTypeCheck ;};return _bf ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};

// Empty empties the stack.
func (_abda *PSStack )Empty (){*_abda =[]PSObject {}};

// Append appends an object to the PSProgram.
func (_bd *PSProgram )Append (obj PSObject ){*_bd =append (*_bd ,obj )};var ErrUnsupportedOperand =_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_fdd *PSOperand )div (_dcga *PSStack )error {_fgc ,_ceg :=_dcga .Pop ();
if _ceg !=nil {return _ceg ;};_cbb ,_ceg :=_dcga .Pop ();if _ceg !=nil {return _ceg ;};_gfea ,_ec :=_fgc .(*PSReal );_aab ,_dce :=_fgc .(*PSInteger );if !_ec &&!_dce {return ErrTypeCheck ;};if _ec &&_gfea .Val ==0{return ErrUndefinedResult ;};if _dce &&_aab .Val ==0{return ErrUndefinedResult ;
};_egc ,_ebc :=_cbb .(*PSReal );_fgg ,_dgfg :=_cbb .(*PSInteger );if !_ebc &&!_dgfg {return ErrTypeCheck ;};var _fcc float64 ;if _ebc {_fcc =_egc .Val ;}else {_fcc =float64 (_fgg .Val );};if _ec {_fcc /=_gfea .Val ;}else {_fcc /=float64 (_aab .Val );};
_ceg =_dcga .Push (MakeReal (_fcc ));return _ceg ;};var ErrStackUnderflow =_g .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// Pop pops an object from the top of the stack.
func (_eggab *PSStack )Pop ()(PSObject ,error ){if len (*_eggab )< 1{return nil ,ErrStackUnderflow ;};_dbbe :=(*_eggab )[len (*_eggab )-1];*_eggab =(*_eggab )[0:len (*_eggab )-1];return _dbbe ,nil ;};func (_bgba *PSOperand )ifelse (_ebba *PSStack )error {_eaa ,_deb :=_ebba .Pop ();
if _deb !=nil {return _deb ;};_egca ,_deb :=_ebba .Pop ();if _deb !=nil {return _deb ;};_gcb ,_deb :=_ebba .Pop ();if _deb !=nil {return _deb ;};_cgdg ,_gda :=_eaa .(*PSProgram );if !_gda {return ErrTypeCheck ;};_baf ,_gda :=_egca .(*PSProgram );if !_gda {return ErrTypeCheck ;
};_age ,_gda :=_gcb .(*PSBoolean );if !_gda {return ErrTypeCheck ;};if _age .Val {_eea :=_baf .Exec (_ebba );return _eea ;};_deb =_cgdg .Exec (_ebba );return _deb ;};func (_gdb *PSOperand )and (_af *PSStack )error {_cgb ,_eee :=_af .Pop ();if _eee !=nil {return _eee ;
};_ddb ,_eee :=_af .Pop ();if _eee !=nil {return _eee ;};if _adad ,_fb :=_cgb .(*PSBoolean );_fb {_gbad ,_fg :=_ddb .(*PSBoolean );if !_fg {return ErrTypeCheck ;};_eee =_af .Push (MakeBool (_adad .Val &&_gbad .Val ));return _eee ;};if _ccb ,_aba :=_cgb .(*PSInteger );
_aba {_fd ,_daf :=_ddb .(*PSInteger );if !_daf {return ErrTypeCheck ;};_eee =_af .Push (MakeInteger (_ccb .Val &_fd .Val ));return _eee ;};return ErrTypeCheck ;};func (_edg *PSOperand )dup (_gge *PSStack )error {_fggd ,_eda :=_gge .Pop ();if _eda !=nil {return _eda ;
};_eda =_gge .Push (_fggd );if _eda !=nil {return _eda ;};_eda =_gge .Push (_fggd .Duplicate ());return _eda ;};func (_dgc *PSOperand )DebugString ()string {return _df .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_dgc );};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_gf *PSProgram ;};func (_bbf *PSOperand )ne (_feefc *PSStack )error {_cbc :=_bbf .eq (_feefc );if _cbc !=nil {return _cbc ;};_cbc =_bbf .not (_feefc );return _cbc ;};func (_ccfe *PSOperand )cvi (_gbadb *PSStack )error {_dca ,_baac :=_gbadb .Pop ();
if _baac !=nil {return _baac ;};if _fdc ,_gcc :=_dca .(*PSReal );_gcc {_egff :=int (_fdc .Val );_baac =_gbadb .Push (MakeInteger (_egff ));}else if _cfd ,_ffb :=_dca .(*PSInteger );_ffb {_ce :=_cfd .Val ;_baac =_gbadb .Push (MakeInteger (_ce ));}else {return ErrTypeCheck ;
};return _baac ;};func (_ddd *PSOperand )sub (_abfa *PSStack )error {_ffc ,_bca :=_abfa .Pop ();if _bca !=nil {return _bca ;};_adab ,_bca :=_abfa .Pop ();if _bca !=nil {return _bca ;};_bgf ,_cbg :=_ffc .(*PSReal );_eaad ,_fac :=_ffc .(*PSInteger );if !_cbg &&!_fac {return ErrTypeCheck ;
};_edf ,_gag :=_adab .(*PSReal );_edc ,_gca :=_adab .(*PSInteger );if !_gag &&!_gca {return ErrTypeCheck ;};if _fac &&_gca {_fada :=_edc .Val -_eaad .Val ;_cgeg :=_abfa .Push (MakeInteger (_fada ));return _cgeg ;};var _aee float64 =0;if _gag {_aee =_edf .Val ;
}else {_aee =float64 (_edc .Val );};if _cbg {_aee -=_bgf .Val ;}else {_aee -=float64 (_eaad .Val );};_bca =_abfa .Push (MakeReal (_aee ));return _bca ;};var ErrRangeCheck =_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");


// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_abdf *PSStack )DebugString ()string {_ggfd :="\u005b\u0020";for _ ,_dfd :=range *_abdf {_ggfd +=_dfd .DebugString ();_ggfd +="\u0020";};_ggfd +="\u005d";return _ggfd ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_bdg *PSOperand )idiv (_adccd *PSStack )error {_ead ,_ebae :=_adccd .Pop ();if _ebae !=nil {return _ebae ;};_feef ,_ebae :=_adccd .Pop ();if _ebae !=nil {return _ebae ;};_fgcd ,_gdcd :=_ead .(*PSInteger );if !_gdcd {return ErrTypeCheck ;
};if _fgcd .Val ==0{return ErrUndefinedResult ;};_dadb ,_gdcd :=_feef .(*PSInteger );if !_gdcd {return ErrTypeCheck ;};_ceb :=_dadb .Val /_fgcd .Val ;_ebae =_adccd .Push (MakeInteger (_ceb ));return _ebae ;};func (_ag *PSInteger )DebugString ()string {return _df .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_ag .Val );
};func (_aaed *PSParser )parseFunction ()(*PSProgram ,error ){_eadf ,_ :=_aaed ._gffb .ReadByte ();if _eadf !='{'{return nil ,_g .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_cgc :=NewPSProgram ();for {_aaed .skipSpaces ();
_aaed .skipComments ();_agf ,_cbbf :=_aaed ._gffb .Peek (2);if _cbbf !=nil {if _cbbf ==_c .EOF {break ;};return nil ,_cbbf ;};_gc .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_agf ));if _agf [0]=='}'{_gc .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
_aaed ._gffb .ReadByte ();break ;}else if _agf [0]=='{'{_gc .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_cce ,_ggd :=_aaed .parseFunction ();if _ggd !=nil {return nil ,_ggd ;};_cgc .Append (_cce );}else if _ea .IsDecimalDigit (_agf [0])||(_agf [0]=='-'&&_ea .IsDecimalDigit (_agf [1])){_gc .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_bcb ,_ffbd :=_aaed .parseNumber ();if _ffbd !=nil {return nil ,_ffbd ;};_cgc .Append (_bcb );}else {_gc .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_agf ,_ =_aaed ._gffb .Peek (5);_gagg :=string (_agf );
_gc .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gagg );if (len (_gagg )> 4)&&(_gagg [:5]=="\u0066\u0061\u006cs\u0065"){_acgf ,_bdaf :=_aaed .parseBool ();if _bdaf !=nil {return nil ,_bdaf ;};_cgc .Append (_acgf );
}else if (len (_gagg )> 3)&&(_gagg [:4]=="\u0074\u0072\u0075\u0065"){_dcgb ,_egbf :=_aaed .parseBool ();if _egbf !=nil {return nil ,_egbf ;};_cgc .Append (_dcgb );}else {_acf ,_cfa :=_aaed .parseOperand ();if _cfa !=nil {return nil ,_cfa ;};_cgc .Append (_acf );
};};};return _cgc ,nil ;};func (_faa *PSOperand )le (_abcf *PSStack )error {_bff ,_befc :=_abcf .PopNumberAsFloat64 ();if _befc !=nil {return _befc ;};_gbgg ,_befc :=_abcf .PopNumberAsFloat64 ();if _befc !=nil {return _befc ;};if _ad .Abs (_gbgg -_bff )< _dfc {_becg :=_abcf .Push (MakeBool (true ));
return _becg ;}else if _gbgg < _bff {_ebbe :=_abcf .Push (MakeBool (true ));return _ebbe ;}else {_gfcb :=_abcf .Push (MakeBool (false ));return _gfcb ;};};func (_gdec *PSParser )skipComments ()error {if _ ,_cgag :=_gdec .skipSpaces ();_cgag !=nil {return _cgag ;
};_faaf :=true ;for {_dedg ,_aaee :=_gdec ._gffb .Peek (1);if _aaee !=nil {_gc .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_aaee .Error ());return _aaee ;};if _faaf &&_dedg [0]!='%'{return nil ;};_faaf =false ;if (_dedg [0]!='\r')&&(_dedg [0]!='\n'){_gdec ._gffb .ReadByte ();
}else {break ;};};return _gdec .skipComments ();};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_dgg *PSOperand )floor (_dcd *PSStack )error {_dbc ,_cae :=_dcd .Pop ();if _cae !=nil {return _cae ;};if _eeec ,_gdc :=_dbc .(*PSReal );_gdc {_cae =_dcd .Push (MakeReal (_ad .Floor (_eeec .Val )));}else if _cda ,_dgge :=_dbc .(*PSInteger );
_dgge {_cae =_dcd .Push (MakeInteger (_cda .Val ));}else {return ErrTypeCheck ;};return _cae ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_eg :=&PSExecutor {};_eg .Stack =NewPSStack ();_eg ._gf =program ;return _eg ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_gffb *_d .Reader };

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_bba *PSOperand )pop (_dfb *PSStack )error {_ ,_gaa :=_dfb .Pop ();if _gaa !=nil {return _gaa ;};return nil ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_cbbff :=PSOperand (val );return &_cbbff };

// PSReal represents a real number.
type PSReal struct{Val float64 ;};

// Parse parses the postscript and store as a program that can be executed.
func (_dgd *PSParser )Parse ()(*PSProgram ,error ){_dgd .skipSpaces ();_gafe ,_bdge :=_dgd ._gffb .Peek (2);if _bdge !=nil {return nil ,_bdge ;};if _gafe [0]!='{'{return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_ffed ,_bdge :=_dgd .parseFunction ();if _bdge !=nil &&_bdge !=_c .EOF {return nil ,_bdge ;};return _ffed ,_bdge ;};

// Exec executes the program, typically leaving output values on the stack.
func (_adf *PSProgram )Exec (stack *PSStack )error {for _ ,_ee :=range *_adf {var _cff error ;switch _cg :=_ee .(type ){case *PSInteger :_egf :=_cg ;_cff =stack .Push (_egf );case *PSReal :_eaee :=_cg ;_cff =stack .Push (_eaee );case *PSBoolean :_ef :=_cg ;
_cff =stack .Push (_ef );case *PSProgram :_aac :=_cg ;_cff =stack .Push (_aac );case *PSOperand :_eeg :=_cg ;_cff =_eeg .Exec (stack );default:return ErrTypeCheck ;};if _cff !=nil {return _cff ;};};return nil ;};func (_cgbb *PSOperand )ceiling (_dea *PSStack )error {_gga ,_ddf :=_dea .Pop ();
if _ddf !=nil {return _ddf ;};if _agg ,_dcg :=_gga .(*PSReal );_dcg {_ddf =_dea .Push (MakeReal (_ad .Ceil (_agg .Val )));}else if _abc ,_ccbf :=_gga .(*PSInteger );_ccbf {_ddf =_dea .Push (MakeInteger (_abc .Val ));}else {_ddf =ErrTypeCheck ;};return _ddf ;
};func (_gde *PSOperand )sqrt (_cagc *PSStack )error {_decf ,_fgdf :=_cagc .PopNumberAsFloat64 ();if _fgdf !=nil {return _fgdf ;};if _decf < 0{return ErrRangeCheck ;};_gfgb :=_ad .Sqrt (_decf );_fgdf =_cagc .Push (MakeReal (_gfgb ));return _fgdf ;};func (_eb *PSInteger )Duplicate ()PSObject {_cc :=PSInteger {};
_cc .Val =_eb .Val ;return &_cc };func (_cfbf *PSOperand )mul (_gcg *PSStack )error {_ffeba ,_ebdc :=_gcg .Pop ();if _ebdc !=nil {return _ebdc ;};_gfb ,_ebdc :=_gcg .Pop ();if _ebdc !=nil {return _ebdc ;};_bfc ,_fad :=_ffeba .(*PSReal );_gdaf ,_eegc :=_ffeba .(*PSInteger );
if !_fad &&!_eegc {return ErrTypeCheck ;};_gbb ,_eeac :=_gfb .(*PSReal );_gbdd ,_gdd :=_gfb .(*PSInteger );if !_eeac &&!_gdd {return ErrTypeCheck ;};if _eegc &&_gdd {_ddab :=_gdaf .Val *_gbdd .Val ;_gae :=_gcg .Push (MakeInteger (_ddab ));return _gae ;
};var _dcaa float64 ;if _fad {_dcaa =_bfc .Val ;}else {_dcaa =float64 (_gdaf .Val );};if _eeac {_dcaa *=_gbb .Val ;}else {_dcaa *=float64 (_gbdd .Val );};_ebdc =_gcg .Push (MakeReal (_dcaa ));return _ebdc ;};func (_eff *PSOperand )mod (_ggb *PSStack )error {_egcb ,_fbc :=_ggb .Pop ();
if _fbc !=nil {return _fbc ;};_dfea ,_fbc :=_ggb .Pop ();if _fbc !=nil {return _fbc ;};_ddc ,_fff :=_egcb .(*PSInteger );if !_fff {return ErrTypeCheck ;};if _ddc .Val ==0{return ErrUndefinedResult ;};_acca ,_fff :=_dfea .(*PSInteger );if !_fff {return ErrTypeCheck ;
};_afc :=_acca .Val %_ddc .Val ;_fbc =_ggb .Push (MakeInteger (_afc ));return _fbc ;};var ErrUndefinedResult =_g .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_aff *PSOperand )round (_cgbf *PSStack )error {_egag ,_dafa :=_cgbf .Pop ();
if _dafa !=nil {return _dafa ;};if _bbdg ,_bcd :=_egag .(*PSReal );_bcd {_dafa =_cgbf .Push (MakeReal (_ad .Floor (_bbdg .Val +0.5)));}else if _gfg ,_gcgc :=_egag .(*PSInteger );_gcgc {_dafa =_cgbf .Push (MakeInteger (_gfg .Val ));}else {return ErrTypeCheck ;
};return _dafa ;};func (_aa *PSBoolean )DebugString ()string {return _df .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_aa .Val );};func (_dg *PSBoolean )String ()string {return _df .Sprintf ("\u0025\u0076",_dg .Val )};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_ecd *PSParser )skipSpaces ()(int ,error ){_cfdc :=0;for {_acd ,_agcc :=_ecd ._gffb .Peek (1);if _agcc !=nil {return 0,_agcc ;};if _ea .IsWhiteSpace (_acd [0]){_ecd ._gffb .ReadByte ();_cfdc ++;}else {break ;};};return _cfdc ,nil ;
};func (_bg *PSOperand )atan (_agc *PSStack )error {_geg ,_beef :=_agc .PopNumberAsFloat64 ();if _beef !=nil {return _beef ;};_ded ,_beef :=_agc .PopNumberAsFloat64 ();if _beef !=nil {return _beef ;};if _geg ==0{var _gfa error ;if _ded < 0{_gfa =_agc .Push (MakeReal (270));
}else {_gfa =_agc .Push (MakeReal (90));};return _gfa ;};_aad :=_ded /_geg ;_edd :=_ad .Atan (_aad )*180/_ad .Pi ;_beef =_agc .Push (MakeReal (_edd ));return _beef ;};func (_dfe *PSOperand )gt (_feb *PSStack )error {_abfd ,_cbe :=_feb .PopNumberAsFloat64 ();
if _cbe !=nil {return _cbe ;};_adcc ,_cbe :=_feb .PopNumberAsFloat64 ();if _cbe !=nil {return _cbe ;};if _ad .Abs (_adcc -_abfd )< _dfc {_cbeb :=_feb .Push (MakeBool (false ));return _cbeb ;}else if _adcc > _abfd {_fccb :=_feb .Push (MakeBool (true ));
return _fccb ;}else {_bc :=_feb .Push (MakeBool (false ));return _bc ;};};func (_ab *PSOperand )add (_ccf *PSStack )error {_dee ,_egb :=_ccf .Pop ();if _egb !=nil {return _egb ;};_ede ,_egb :=_ccf .Pop ();if _egb !=nil {return _egb ;};_fcea ,_feg :=_dee .(*PSReal );
_ffeb ,_ebd :=_dee .(*PSInteger );if !_feg &&!_ebd {return ErrTypeCheck ;};_gfec ,_ccd :=_ede .(*PSReal );_ccfd ,_gbf :=_ede .(*PSInteger );if !_ccd &&!_gbf {return ErrTypeCheck ;};if _ebd &&_gbf {_gbc :=_ffeb .Val +_ccfd .Val ;_fcg :=_ccf .Push (MakeInteger (_gbc ));
return _fcg ;};var _ebb float64 ;if _feg {_ebb =_fcea .Val ;}else {_ebb =float64 (_ffeb .Val );};if _ccd {_ebb +=_gfec .Val ;}else {_ebb +=float64 (_ccfd .Val );};_egb =_ccf .Push (MakeReal (_ebb ));return _egb ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_bdaa :=PSInteger {};_bdaa .Val =val ;return &_bdaa };func (_efb *PSOperand )exch (_ega *PSStack )error {_afg ,_baad :=_ega .Pop ();if _baad !=nil {return _baad ;};_fee ,_baad :=_ega .Pop ();if _baad !=nil {return _baad ;
};_baad =_ega .Push (_afg );if _baad !=nil {return _baad ;};_baad =_ega .Push (_fee );return _baad ;};func (_ge *PSReal )Duplicate ()PSObject {_gbe :=PSReal {};_gbe .Val =_ge .Val ;return &_gbe };func (_ebaa *PSParser )parseBool ()(*PSBoolean ,error ){_def ,_gagf :=_ebaa ._gffb .Peek (4);
if _gagf !=nil {return MakeBool (false ),_gagf ;};if (len (_def )>=4)&&(string (_def [:4])=="\u0074\u0072\u0075\u0065"){_ebaa ._gffb .Discard (4);return MakeBool (true ),nil ;};_def ,_gagf =_ebaa ._gffb .Peek (5);if _gagf !=nil {return MakeBool (false ),_gagf ;
};if (len (_def )>=5)&&(string (_def [:5])=="\u0066\u0061\u006cs\u0065"){_ebaa ._gffb .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};func (_fggb *PSOperand )or (_fbb *PSStack )error {_agd ,_cdg :=_fbb .Pop ();if _cdg !=nil {return _cdg ;};_bbgg ,_cdg :=_fbb .Pop ();if _cdg !=nil {return _cdg ;};if _gaf ,_gbfg :=_agd .(*PSBoolean );_gbfg {_ebbef ,_abdg :=_bbgg .(*PSBoolean );if !_abdg {return ErrTypeCheck ;
};_cdg =_fbb .Push (MakeBool (_gaf .Val ||_ebbef .Val ));return _cdg ;};if _ged ,_fde :=_agd .(*PSInteger );_fde {_fgce ,_aacb :=_bbgg .(*PSInteger );if !_aacb {return ErrTypeCheck ;};_cdg =_fbb .Push (MakeInteger (_ged .Val |_fgce .Val ));return _cdg ;
};return ErrTypeCheck ;};func (_bed *PSOperand )Duplicate ()PSObject {_dda :=*_bed ;return &_dda };func (_afd *PSParser )parseNumber ()(PSObject ,error ){_cbdf ,_ece :=_ea .ParseNumber (_afd ._gffb );if _ece !=nil {return nil ,_ece ;};switch _bcab :=_cbdf .(type ){case *_ea .PdfObjectFloat :return MakeReal (float64 (*_bcab )),nil ;
case *_ea .PdfObjectInteger :return MakeInteger (int (*_bcab )),nil ;};return nil ,_df .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cbdf );};func (_aca *PSOperand )log (_bbd *PSStack )error {_befcd ,_abd :=_bbd .PopNumberAsFloat64 ();
if _abd !=nil {return _abd ;};_dfg :=_ad .Log10 (_befcd );_abd =_bbd .Push (MakeReal (_dfg ));return _abd ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_dgbg :=PSBoolean {};_dgbg .Val =val ;return &_dgbg };

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _eab []float64 ;for _ ,_ade :=range objects {if _ca ,_b :=_ade .(*PSInteger );_b {_eab =append (_eab ,float64 (_ca .Val ));}else if _gb ,_ac :=_ade .(*PSReal );_ac {_eab =append (_eab ,_gb .Val );
}else {return nil ,ErrTypeCheck ;};};return _eab ,nil ;};const _dfc =0.000001;func (_bag *PSOperand )abs (_gg *PSStack )error {_fc ,_gba :=_gg .Pop ();if _gba !=nil {return _gba ;};if _ffd ,_fce :=_fc .(*PSReal );_fce {_cgd :=_ffd .Val ;if _cgd < 0{_gba =_gg .Push (MakeReal (-_cgd ));
}else {_gba =_gg .Push (MakeReal (_cgd ));};}else if _gfe ,_ccg :=_fc .(*PSInteger );_ccg {_bef :=_gfe .Val ;if _bef < 0{_gba =_gg .Push (MakeInteger (-_bef ));}else {_gba =_gg .Push (MakeInteger (_bef ));};}else {return ErrTypeCheck ;};return _gba ;};


// String returns a string representation of the stack.
func (_eeag *PSStack )String ()string {_dcf :="\u005b\u0020";for _ ,_aeddf :=range *_eeag {_dcf +=_aeddf .String ();_dcf +="\u0020";};_dcf +="\u005d";return _dcf ;};func (_ae *PSOperand )ge (_beg *PSStack )error {_gff ,_gef :=_beg .PopNumberAsFloat64 ();
if _gef !=nil {return _gef ;};_abf ,_gef :=_beg .PopNumberAsFloat64 ();if _gef !=nil {return _gef ;};if _ad .Abs (_abf -_gff )< _dfc {_gee :=_beg .Push (MakeBool (true ));return _gee ;}else if _abf > _gff {_bae :=_beg .Push (MakeBool (true ));return _bae ;
}else {_beb :=_beg .Push (MakeBool (false ));return _beb ;};};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_gbg *PSOperand )cos (_bec *PSStack )error {_baa ,_fea :=_bec .PopNumberAsFloat64 ();if _fea !=nil {return _fea ;};_fda :=_ad .Cos (_baa *_ad .Pi /180.0);_fea =_bec .Push (MakeReal (_fda ));return _fea ;};func (_eag *PSOperand )sin (_gea *PSStack )error {_dcdd ,_egga :=_gea .PopNumberAsFloat64 ();
if _egga !=nil {return _egga ;};_bbfec :=_ad .Sin (_dcdd *_ad .Pi /180.0);_egga =_gea .Push (MakeReal (_bbfec ));return _egga ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_dfcc *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_f :=range objects {_dc :=_dfcc .Stack .Push (_f );if _dc !=nil {return nil ,_dc ;};};_ada :=_dfcc ._gf .Exec (_dfcc .Stack );if _ada !=nil {_gc .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ada );
return nil ,_ada ;};_gfc :=[]PSObject (*_dfcc .Stack );_dfcc .Stack .Empty ();return _gfc ,nil ;};func (_ace *PSParser )parseOperand ()(*PSOperand ,error ){var _aeb []byte ;for {_bea ,_afdg :=_ace ._gffb .Peek (1);if _afdg !=nil {if _afdg ==_c .EOF {break ;
};return nil ,_afdg ;};if _ea .IsDelimiter (_bea [0]){break ;};if _ea .IsWhiteSpace (_bea [0]){break ;};_gcgca ,_ :=_ace ._gffb .ReadByte ();_aeb =append (_aeb ,_gcgca );};if len (_aeb )==0{return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_aeb )),nil ;};func (_adc *PSInteger )String ()string {return _df .Sprintf ("\u0025\u0064",_adc .Val )};func (_gcf *PSOperand )index (_fcca *PSStack )error {_cbd ,_bbb :=_fcca .Pop ();if _bbb !=nil {return _bbb ;};_bgg ,_abeg :=_cbd .(*PSInteger );
if !_abeg {return ErrTypeCheck ;};if _bgg .Val < 0{return ErrRangeCheck ;};if _bgg .Val > len (*_fcca )-1{return ErrStackUnderflow ;};_dgeb :=(*_fcca )[len (*_fcca )-1-_bgg .Val ];_bbb =_fcca .Push (_dgeb .Duplicate ());return _bbb ;};func (_gdg *PSOperand )xor (_afad *PSStack )error {_aag ,_gfbc :=_afad .Pop ();
if _gfbc !=nil {return _gfbc ;};_cbdd ,_gfbc :=_afad .Pop ();if _gfbc !=nil {return _gfbc ;};if _dcddf ,_dbd :=_aag .(*PSBoolean );_dbd {_cee ,_dcdg :=_cbdd .(*PSBoolean );if !_dcdg {return ErrTypeCheck ;};_gfbc =_afad .Push (MakeBool (_dcddf .Val !=_cee .Val ));
return _gfbc ;};if _fccbc ,_dbb :=_aag .(*PSInteger );_dbb {_cdc ,_aec :=_cbdd .(*PSInteger );if !_aec {return ErrTypeCheck ;};_gfbc =_afad .Push (MakeInteger (_fccbc .Val ^_cdc .Val ));return _gfbc ;};return ErrTypeCheck ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_bbda :=PSReal {};_bbda .Val =val ;return &_bbda };func (_da *PSProgram )String ()string {_fe :="\u007b\u0020";for _ ,_ff :=range *_da {_fe +=_ff .String ();_fe +="\u0020";};_fe +="\u007d";return _fe ;};func (_eebc *PSOperand )lt (_fgb *PSStack )error {_bge ,_fdad :=_fgb .PopNumberAsFloat64 ();
if _fdad !=nil {return _fdad ;};_adgd ,_fdad :=_fgb .PopNumberAsFloat64 ();if _fdad !=nil {return _fdad ;};if _ad .Abs (_adgd -_bge )< _dfc {_gegd :=_fgb .Push (MakeBool (false ));return _gegd ;}else if _adgd < _bge {_fdag :=_fgb .Push (MakeBool (true ));
return _fdag ;}else {_eabf :=_fgb .Push (MakeBool (false ));return _eabf ;};};func (_ba *PSProgram )Duplicate ()PSObject {_dgf :=&PSProgram {};for _ ,_cf :=range *_ba {_dgf .Append (_cf .Duplicate ());};return _dgf ;};func (_dgba *PSOperand )ifCondition (_ebg *PSStack )error {_fcgd ,_fae :=_ebg .Pop ();
if _fae !=nil {return _fae ;};_cga ,_fae :=_ebg .Pop ();if _fae !=nil {return _fae ;};_gbd ,_fdde :=_fcgd .(*PSProgram );if !_fdde {return ErrTypeCheck ;};_gggc ,_fdde :=_cga .(*PSBoolean );if !_fdde {return ErrTypeCheck ;};if _gggc .Val {_cec :=_gbd .Exec (_ebg );
return _cec ;};return nil ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_bee *PSBoolean )Duplicate ()PSObject {_db :=PSBoolean {};_db .Val =_bee .Val ;return &_db };